// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class DadosProcuracaoValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFDadosProcuracaoFactory> _mockDadosProcuracaoFactory;
    private readonly Mock<IDadosProcuracaoReader> _mockReader;
    private readonly DadosProcuracaoValidation _validation;
    private readonly Mock<IDadosProcuracaoService> _mockDadosProcuracaoService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IClientesReader> _mockClientesReader;
    private readonly DadosProcuracaoService _service;
    private readonly string _validUri = "test-uri";
    public DadosProcuracaoValidationTests()
    {
        _mockDadosProcuracaoFactory = new Mock<IFDadosProcuracaoFactory>();
        _mockReader = new Mock<IDadosProcuracaoReader>();
        _validation = new DadosProcuracaoValidation();
        _mockDadosProcuracaoService = new Mock<IDadosProcuracaoService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockClientesReader = new Mock<IClientesReader>();
    }

#region Class Structure Tests
    [Fact]
    public void DadosProcuracaoValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IDadosProcuracaoValidation>();
    }

    [Fact]
    public void DadosProcuracaoValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(DadosProcuracaoValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void DadosProcuracaoValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(DadosProcuracaoValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.DadosProcuracao CreateValidDadosProcuracao()
    {
        return new Models.DadosProcuracao
        {
            Id = 1,
            Cliente = 1,
            EstadoCivil = "Solteiro",
            Nacionalidade = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Profissao = "Desenvolvedor",
            CTPS = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            PisPasep = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Remuneracao = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Objeto = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM"
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockDadosProcuracaoService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterDadosProcuracao>(), It.IsAny<string>())).ReturnsAsync(new List<DadosProcuracaoResponseAll>());
        // Setup other mocks but don't override the DadosProcuracaos service mock
        _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.ClientesResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockDadosProcuracaoService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterDadosProcuracao>(), It.IsAny<string>())).ReturnsAsync(new List<DadosProcuracaoResponseAll>());
        // Setup other mocks but don't override the DadosProcuracaos service mock
        _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.ClientesResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var dadosprocuracao = new Models.DadosProcuracao
        {
            Id = 1,
            Cliente = 1,
            EstadoCivil = null,
            Nacionalidade = null,
            Profissao = null,
            CTPS = null,
            PisPasep = null,
            Remuneracao = null,
            Objeto = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(dadosprocuracao, _mockDadosProcuracaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockDadosProcuracaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region ValidateReg Required GUID Method Tests
    [Fact]
    public async Task ValidateReg_WithEmptyGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var dadosprocuracao = CreateValidDadosProcuracao();
        dadosprocuracao.GUID = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(dadosprocuracao, _mockDadosProcuracaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var dadosprocuracao = CreateValidDadosProcuracao();
        dadosprocuracao.GUID = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(dadosprocuracao, _mockDadosProcuracaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataGUID_ShouldReturnTrue()
    {
        // Arrange
        var dadosprocuracao = CreateValidDadosProcuracao();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(dadosprocuracao, _mockDadosProcuracaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var dadosprocuracao = CreateValidDadosProcuracao();
        dadosprocuracao.GUID = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(dadosprocuracao, _mockDadosProcuracaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
#region Foreign Key Validation Tests - Clientes
    [Fact]
    public async Task ValidateReg_WithInvalidClientes_ShouldThrowSGValidationException()
    {
        // Arrange
        var dadosprocuracao = CreateValidDadosProcuracao();
        dadosprocuracao.Cliente = 999;
        _mockClientesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.ClientesResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(dadosprocuracao, _mockDadosProcuracaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedClientesId_ShouldThrowSGValidationException()
    {
        // Arrange
        var dadosprocuracao = CreateValidDadosProcuracao();
        dadosprocuracao.Cliente = 999;
        var reg888 = new Models.Response.ClientesResponse
        {
            Id = 888
        }; // Different ID
        _mockClientesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(dadosprocuracao, _mockDadosProcuracaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidClientes_ShouldPass()
    {
        // Arrange
        var dadosprocuracao = CreateValidDadosProcuracao();
        dadosprocuracao.Cliente = 123;
        var reg123 = new Models.Response.ClientesResponse
        {
            Id = 123
        };
        _mockClientesReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(dadosprocuracao, _mockDadosProcuracaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}