// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class HonorariosDadosContratoWriterTests
{
    private readonly Mock<IFHonorariosDadosContratoFactory> _mockHonorariosDadosContratoFactory;
    private readonly Mock<FHonorariosDadosContrato> _mockFHonorariosDadosContrato;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly HonorariosDadosContratoWriter _honorariosdadoscontratoWriter;
    public HonorariosDadosContratoWriterTests()
    {
        _mockHonorariosDadosContratoFactory = new Mock<IFHonorariosDadosContratoFactory>();
        _mockFHonorariosDadosContrato = new Mock<FHonorariosDadosContrato>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _honorariosdadoscontratoWriter = new HonorariosDadosContratoWriter(_mockHonorariosDadosContratoFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var honorariosdadoscontrato = CreateValidHonorariosDadosContratoModel();
        honorariosdadoscontrato.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockHonorariosDadosContratoFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFHonorariosDadosContrato.Object);
        _mockFHonorariosDadosContrato.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _honorariosdadoscontratoWriter.WriteAsync(honorariosdadoscontrato, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFHonorariosDadosContrato.Object);
        _mockHonorariosDadosContratoFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockHonorariosDadosContratoFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFHonorariosDadosContrato.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var honorariosdadoscontrato = CreateValidHonorariosDadosContratoModel();
        honorariosdadoscontrato.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockHonorariosDadosContratoFactory.Setup(x => x.CreateFromIdAsync(honorariosdadoscontrato.Id, _mockConnection.Object)).ReturnsAsync(_mockFHonorariosDadosContrato.Object);
        _mockFHonorariosDadosContrato.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _honorariosdadoscontratoWriter.WriteAsync(honorariosdadoscontrato, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFHonorariosDadosContrato.Object);
        _mockHonorariosDadosContratoFactory.Verify(x => x.CreateFromIdAsync(honorariosdadoscontrato.Id, _mockConnection.Object), Times.Once);
        _mockHonorariosDadosContratoFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFHonorariosDadosContrato.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var honorariosdadoscontrato = CreateValidHonorariosDadosContratoModel();
        var auditorQuem = 99;
        _mockHonorariosDadosContratoFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFHonorariosDadosContrato.Object);
        _mockFHonorariosDadosContrato.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _honorariosdadoscontratoWriter.WriteAsync(honorariosdadoscontrato, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFHonorariosDadosContrato.Object);
        _mockFHonorariosDadosContrato.VerifySet(x => x.FCliente = honorariosdadoscontrato.Cliente, Times.Once);
        _mockFHonorariosDadosContrato.VerifySet(x => x.FFixo = honorariosdadoscontrato.Fixo, Times.Once);
        _mockFHonorariosDadosContrato.VerifySet(x => x.FVariavel = honorariosdadoscontrato.Variavel, Times.Once);
        _mockFHonorariosDadosContrato.VerifySet(x => x.FPercSucesso = honorariosdadoscontrato.PercSucesso, Times.Once);
        _mockFHonorariosDadosContrato.VerifySet(x => x.FProcesso = honorariosdadoscontrato.Processo, Times.Once);
        _mockFHonorariosDadosContrato.VerifySet(x => x.FArquivoContrato = honorariosdadoscontrato.ArquivoContrato, Times.Once);
        _mockFHonorariosDadosContrato.VerifySet(x => x.FTextoContrato = honorariosdadoscontrato.TextoContrato, Times.Once);
        _mockFHonorariosDadosContrato.VerifySet(x => x.FValorFixo = honorariosdadoscontrato.ValorFixo, Times.Once);
        _mockFHonorariosDadosContrato.VerifySet(x => x.FObservacao = honorariosdadoscontrato.Observacao, Times.Once);
        _mockFHonorariosDadosContrato.VerifySet(x => x.FGuid = honorariosdadoscontrato.Guid, Times.Once);
        _mockFHonorariosDadosContrato.VerifySet(x => x.FDataContrato = honorariosdadoscontrato.DataContrato.ToString(), Times.Once);
        _mockFHonorariosDadosContrato.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithNullDataContrato_ShouldNotSetFDataContrato()
    {
        // Arrange
        var honorariosdadoscontrato = CreateValidHonorariosDadosContratoModel();
        honorariosdadoscontrato.DataContrato = null;
        var auditorQuem = 123;
        _mockHonorariosDadosContratoFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFHonorariosDadosContrato.Object);
        _mockFHonorariosDadosContrato.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _honorariosdadoscontratoWriter.WriteAsync(honorariosdadoscontrato, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFHonorariosDadosContrato.VerifySet(x => x.FDataContrato = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var honorariosdadoscontrato = CreateValidHonorariosDadosContratoModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockHonorariosDadosContratoFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _honorariosdadoscontratoWriter.WriteAsync(honorariosdadoscontrato, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var honorariosdadoscontrato = CreateValidHonorariosDadosContratoModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockHonorariosDadosContratoFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFHonorariosDadosContrato.Object);
        _mockFHonorariosDadosContrato.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _honorariosdadoscontratoWriter.WriteAsync(honorariosdadoscontrato, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var honorariosdadoscontratoResponse = new HonorariosDadosContratoResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockHonorariosDadosContratoFactory.Setup(x => x.DeleteAsync(operadorId, honorariosdadoscontratoResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _honorariosdadoscontratoWriter.Delete(honorariosdadoscontratoResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockHonorariosDadosContratoFactory.Verify(x => x.DeleteAsync(operadorId, honorariosdadoscontratoResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var honorariosdadoscontratoResponse = new HonorariosDadosContratoResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockHonorariosDadosContratoFactory.Setup(x => x.DeleteAsync(operadorId, honorariosdadoscontratoResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _honorariosdadoscontratoWriter.Delete(honorariosdadoscontratoResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var honorariosdadoscontratoResponse = new HonorariosDadosContratoResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockHonorariosDadosContratoFactory.Setup(x => x.DeleteAsync(operadorId, honorariosdadoscontratoResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _honorariosdadoscontratoWriter.Delete(honorariosdadoscontratoResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new HonorariosDadosContratoWriter(_mockHonorariosDadosContratoFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new HonorariosDadosContratoWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.HonorariosDadosContrato CreateValidHonorariosDadosContratoModel()
    {
        return new Models.HonorariosDadosContrato
        {
            Id = 0,
            Cliente = 1,
            Fixo = false,
            Variavel = false,
            PercSucesso = 0m,
            Processo = 1,
            ArquivoContrato
            TextoContrato = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            ValorFixo = 0m,
            Observacao = "Observação teste",
            Guid = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            DataContrato = "24/04/1975"
        };
    }
#endregion
}