// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Writers;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IHonorariosDadosContratoWriter
{
    Task<FHonorariosDadosContrato> WriteAsync(Models.HonorariosDadosContrato honorariosdadoscontrato, int auditorQuem, MsiSqlConnection oCnn);
    Task Delete(HonorariosDadosContratoResponse honorariosdadoscontrato, int operadorId, MsiSqlConnection oCnn);
}

public class HonorariosDadosContratoWriter(IFHonorariosDadosContratoFactory honorariosdadoscontratoFactory) : IHonorariosDadosContratoWriter
{
    private readonly IFHonorariosDadosContratoFactory _honorariosdadoscontratoFactory = honorariosdadoscontratoFactory ?? throw new ArgumentNullException(nameof(honorariosdadoscontratoFactory));
    public virtual async Task Delete(HonorariosDadosContratoResponse honorariosdadoscontrato, int operadorId, MsiSqlConnection oCnn)
    {
        await _honorariosdadoscontratoFactory.DeleteAsync(operadorId, honorariosdadoscontrato.Id, oCnn);
    }

    public virtual async Task<FHonorariosDadosContrato> WriteAsync(Models.HonorariosDadosContrato honorariosdadoscontrato, int auditorQuem, MsiSqlConnection oCnn)
    {
        using var dbRec = await (honorariosdadoscontrato.Id.IsEmptyIDNumber() ? _honorariosdadoscontratoFactory.CreateAsync() : _honorariosdadoscontratoFactory.CreateFromIdAsync(honorariosdadoscontrato.Id, oCnn));
        dbRec.FCliente = honorariosdadoscontrato.Cliente;
        dbRec.FFixo = honorariosdadoscontrato.Fixo;
        dbRec.FVariavel = honorariosdadoscontrato.Variavel;
        dbRec.FPercSucesso = honorariosdadoscontrato.PercSucesso;
        dbRec.FProcesso = honorariosdadoscontrato.Processo;
        dbRec.FArquivoContrato = honorariosdadoscontrato.ArquivoContrato;
        dbRec.FTextoContrato = honorariosdadoscontrato.TextoContrato;
        dbRec.FValorFixo = honorariosdadoscontrato.ValorFixo;
        dbRec.FObservacao = honorariosdadoscontrato.Observacao;
        dbRec.FGuid = honorariosdadoscontrato.Guid;
        if (honorariosdadoscontrato.DataContrato != null)
            dbRec.FDataContrato = honorariosdadoscontrato.DataContrato.ToString();
        dbRec.AuditorQuem = auditorQuem;
        await dbRec.UpdateAsync(oCnn);
        return dbRec;
    }
}