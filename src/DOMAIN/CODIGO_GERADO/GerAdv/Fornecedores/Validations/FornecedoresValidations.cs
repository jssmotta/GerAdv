// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IFornecedoresValidation
{
    Task<bool> ValidateReg(Models.Fornecedores reg, IFornecedoresService service, ICidadeReader cidadeReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int? id, IFornecedoresService service, IBensMateriaisService bensmateriaisService, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class FornecedoresValidation : IFornecedoresValidation
{
    public async Task<bool> CanDelete(int? id, IFornecedoresService service, IBensMateriaisService bensmateriaisService, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id == null || id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id ?? default, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        var bensmateriaisExists0 = await bensmateriaisService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterBensMateriais { Fornecedor = id ?? default }, uri);
        if (bensmateriaisExists0 != null && bensmateriaisExists0.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Bens Materiais associados a ele.");
        return true;
    }

    private bool ValidSizes(Models.Fornecedores reg)
    {
        if (reg.Nome != null && reg.Nome.Length > DBFornecedoresDicInfo.ForNome.FTamanho)
            throw new SGValidationException($"Nome deve ter no máximo {DBFornecedoresDicInfo.ForNome.FTamanho} caracteres.");
        if (reg.CNPJ != null && reg.CNPJ.ClearInputCepCpfCnpj().Length > DBFornecedoresDicInfo.ForCNPJ.FTamanho)
            throw new SGValidationException($"CNPJ deve ter no máximo {DBFornecedoresDicInfo.ForCNPJ.FTamanho} caracteres.");
        if (reg.InscEst != null && reg.InscEst.Length > DBFornecedoresDicInfo.ForInscEst.FTamanho)
            throw new SGValidationException($"InscEst deve ter no máximo {DBFornecedoresDicInfo.ForInscEst.FTamanho} caracteres.");
        if (reg.CPF != null && reg.CPF.ClearInputCepCpfCnpj().Length > DBFornecedoresDicInfo.ForCPF.FTamanho)
            throw new SGValidationException($"CPF deve ter no máximo {DBFornecedoresDicInfo.ForCPF.FTamanho} caracteres.");
        if (reg.RG != null && reg.RG.Length > DBFornecedoresDicInfo.ForRG.FTamanho)
            throw new SGValidationException($"RG deve ter no máximo {DBFornecedoresDicInfo.ForRG.FTamanho} caracteres.");
        if (reg.Endereco != null && reg.Endereco.Length > DBFornecedoresDicInfo.ForEndereco.FTamanho)
            throw new SGValidationException($"Endereco deve ter no máximo {DBFornecedoresDicInfo.ForEndereco.FTamanho} caracteres.");
        if (reg.Bairro != null && reg.Bairro.Length > DBFornecedoresDicInfo.ForBairro.FTamanho)
            throw new SGValidationException($"Bairro deve ter no máximo {DBFornecedoresDicInfo.ForBairro.FTamanho} caracteres.");
        if (reg.CEP != null && reg.CEP.ClearInputCepCpfCnpj().Length > DBFornecedoresDicInfo.ForCEP.FTamanho)
            throw new SGValidationException($"CEP deve ter no máximo {DBFornecedoresDicInfo.ForCEP.FTamanho} caracteres.");
        if (reg.Site != null && reg.Site.Length > DBFornecedoresDicInfo.ForSite.FTamanho)
            throw new SGValidationException($"Site deve ter no máximo {DBFornecedoresDicInfo.ForSite.FTamanho} caracteres.");
        if (reg.GUID != null && reg.GUID.Length > DBFornecedoresDicInfo.ForGUID.FTamanho)
            throw new SGValidationException($"GUID deve ter no máximo {DBFornecedoresDicInfo.ForGUID.FTamanho} caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.Fornecedores reg, IFornecedoresService service, ICidadeReader cidadeReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Nome))
            throw new SGValidationException("Nome é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.Email != null && reg.Email.Length > 0 && !reg.Email.IsValidEmail())
            throw new SGValidationException($"Email em formato inválido.");
        if (reg.CPF != null && reg.CPF.Length > 0 && !reg.CPF.IsValidCpf())
            throw new SGValidationException("CPF inválido.");
        if (!string.IsNullOrWhiteSpace(reg.CPF))
        {
            var testaCpf = await IsCpfDuplicado(reg, service, uri);
            if (testaCpf.Item1 && testaCpf.Item2 != null)
            {
                throw new SGValidationException($"Fornecedor ({testaCpf.Item2.Nome}) com cpf '{reg.CPF.MaskCpf()}' já cadastrado.");
            }
            else if (testaCpf.Item1)
            {
                throw new SGValidationException($"Fornecedor com cpf '{reg.CPF.MaskCpf()}' já cadastrado.");
            }
        }

        if (reg.CNPJ != null && reg.CNPJ.Length > 0 && !reg.CNPJ.IsValidCnpj())
            throw new SGValidationException("CNPJ inválido.");
        if (!string.IsNullOrWhiteSpace(reg.CNPJ) && await IsCnpjDuplicado(reg, service, uri))
            throw new SGValidationException($"Fornecedor com cnpj {reg.CNPJ.MaskCnpj()} já cadastrado.");
        // Cidade
        if (!reg.Cidade.IsEmptyIDNumber())
        {
            var regCidade = await cidadeReader.Read(reg.Cidade, oCnn);
            if (regCidade == null || regCidade.Id != reg.Cidade)
            {
                throw new SGValidationException($"Cidade não encontrado ({regCidade?.Id}).");
            }
        }

        return true;
    }

    private async Task<bool> IsCnpjDuplicado(Models.Fornecedores reg, IFornecedoresService service, string uri)
    {
        if (reg.CNPJ.ClearInputCnpj().Length == 0)
            return false;
        var existingFornecedores = (await service.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterFornecedores { CNPJ = reg.CNPJ.ClearInputCnpj() }, uri)).FirstOrDefault();
        return existingFornecedores != null && existingFornecedores.Id > 0 && existingFornecedores.Id != reg.Id;
    }

    private async Task<(bool, FornecedoresResponseAll? )> IsCpfDuplicado(Models.Fornecedores reg, IFornecedoresService service, string uri)
    {
        if (reg.CPF.ClearInputCpf().Length == 0)
            return (false, null);
        var existingFornecedores = (await service.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterFornecedores { CPF = reg.CPF.ClearInputCpf() }, uri)).FirstOrDefault();
        return (existingFornecedores != null && existingFornecedores.Id > 0 && existingFornecedores.Id != reg.Id, existingFornecedores);
    }
}