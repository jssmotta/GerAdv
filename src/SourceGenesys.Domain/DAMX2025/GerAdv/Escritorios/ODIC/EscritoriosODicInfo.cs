// 100% auto-generated by Source Genesys Core
// copyright Â© 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#if (!MenphisSI_SG_GerAdv_DicOff)
// ReSharper disable once CheckNamespace
namespace MenphisSI.SG.GerAdv.DicInfo;
[Serializable]
public partial class DBEscritoriosODicInfo : IODicInfo
{
    public ImmutableArray<DBInfoSystem> IListFields() => List;
    public ImmutableArray<DBInfoSystem> IFieldsRaw() => ListWithoutAuditor;
    public ImmutableArray<DBInfoSystem> IPkFields() => ListPk();
    public ImmutableArray<DBInfoSystem> IPkIndicesFields() => ListPkIndices();
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITabelaNome() => DBEscritoriosDicInfo.TabelaNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoCodigo() => DBEscritoriosDicInfo.CampoCodigo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string IPrefixo() => DBEscritoriosDicInfo.TablePrefix;
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoNome() => DBEscritoriosDicInfo.CampoNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string NameSpace() => nameof(GerAdv);
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TemAuditor() => true;
    private static readonly FrozenDictionary<string, DBInfoSystem> _fieldLookup = List.ToFrozenDictionary(f => f.FNome, StringComparer.OrdinalIgnoreCase);
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public DBInfoSystem? GetInfoSystemByNameField(string campo) => _fieldLookup.GetValueOrDefault(campo);
    public static string TCampoCodigo => DBEscritoriosDicInfo.CampoCodigo;
    public static string TCampoNome => DBEscritoriosDicInfo.CampoNome;
    public static string TTabelaNome => DBEscritoriosDicInfo.TabelaNome;
    public static string TTablePrefix => DBEscritoriosDicInfo.TablePrefix;
    public static ImmutableArray<DBInfoSystem> List => [DBEscritoriosDicInfo.EscCNPJ, DBEscritoriosDicInfo.EscCasa, DBEscritoriosDicInfo.EscParceria, DBEscritoriosDicInfo.EscNome, DBEscritoriosDicInfo.EscOAB, DBEscritoriosDicInfo.EscEndereco, DBEscritoriosDicInfo.EscCidade, DBEscritoriosDicInfo.EscBairro, DBEscritoriosDicInfo.EscCEP, DBEscritoriosDicInfo.EscFone, DBEscritoriosDicInfo.EscFax, DBEscritoriosDicInfo.EscSite, DBEscritoriosDicInfo.EscEMail, DBEscritoriosDicInfo.EscOBS, DBEscritoriosDicInfo.EscAdvResponsavel, DBEscritoriosDicInfo.EscSecretaria, DBEscritoriosDicInfo.EscInscEst, DBEscritoriosDicInfo.EscCorrespondente, DBEscritoriosDicInfo.EscTop, DBEscritoriosDicInfo.EscEtiqueta, DBEscritoriosDicInfo.EscBold, DBEscritoriosDicInfo.EscGUID, DBEscritoriosDicInfo.EscQuemCad, DBEscritoriosDicInfo.EscDtCad, DBEscritoriosDicInfo.EscQuemAtu, DBEscritoriosDicInfo.EscDtAtu, DBEscritoriosDicInfo.EscVisto];
    public static ImmutableArray<DBInfoSystem> ListWithoutAuditor => [DBEscritoriosDicInfo.EscCNPJ, DBEscritoriosDicInfo.EscCasa, DBEscritoriosDicInfo.EscParceria, DBEscritoriosDicInfo.EscNome, DBEscritoriosDicInfo.EscOAB, DBEscritoriosDicInfo.EscEndereco, DBEscritoriosDicInfo.EscCidade, DBEscritoriosDicInfo.EscBairro, DBEscritoriosDicInfo.EscCEP, DBEscritoriosDicInfo.EscFone, DBEscritoriosDicInfo.EscFax, DBEscritoriosDicInfo.EscSite, DBEscritoriosDicInfo.EscEMail, DBEscritoriosDicInfo.EscOBS, DBEscritoriosDicInfo.EscAdvResponsavel, DBEscritoriosDicInfo.EscSecretaria, DBEscritoriosDicInfo.EscInscEst, DBEscritoriosDicInfo.EscCorrespondente, DBEscritoriosDicInfo.EscTop, DBEscritoriosDicInfo.EscGUID];

    public static ImmutableArray<DBInfoSystem> ListPk()
    {
        ImmutableArray<string> campos = ImmutableArray.CreateRange(["escCodigo"]);
        var result = campos.Where(campo => !campo.Equals(DBEscritoriosDicInfo.CampoCodigo)).Select(campo => List.FirstOrDefault(t => t.FNome == campo)).Where(item => item != null).Cast<DBInfoSystem>().Distinct().ToList();
        return result.Count > 0 ? [..result] : ImmutableArray<DBInfoSystem>.Empty;
    }

    public static ImmutableArray<DBInfoSystem> ListPkIndices()
    {
        ImmutableArray<string> campos = ImmutableArray.CreateRange(["escCodigo", "escNome"]);
        var result = campos.Where(campo => !campo.Equals(DBEscritoriosDicInfo.CampoCodigo)).Select(campo => List.FirstOrDefault(t => t.FNome == campo)).Where(item => item != null).Cast<DBInfoSystem>().Distinct().ToList();
        return result.Count > 0 ? [..result] : ImmutableArray<DBInfoSystem>.Empty;
    }
}
#endif
