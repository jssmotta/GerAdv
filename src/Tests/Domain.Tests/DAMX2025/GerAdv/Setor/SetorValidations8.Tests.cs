// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class SetorValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFSetorFactory> _mockSetorFactory;
    private readonly Mock<ISetorReader> _mockReader;
    private readonly SetorValidation _validation;
    private readonly Mock<ISetorService> _mockSetorService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly SetorService _service;
    private readonly string _validUri = "test-uri";
    public SetorValidationTests()
    {
        _mockSetorFactory = new Mock<IFSetorFactory>();
        _mockReader = new Mock<ISetorReader>();
        _validation = new SetorValidation();
        _mockSetorService = new Mock<ISetorService>();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

#region Class Structure Tests
    [Fact]
    public void SetorValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<ISetorValidation>();
    }

    [Fact]
    public void SetorValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(SetorValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void SetorValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(SetorValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.Setor CreateValidSetor()
    {
        return new Models.Setor
        {
            Id = 1,
            Descricao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockSetorService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterSetor>(), It.IsAny<string>())).ReturnsAsync(new List<SetorResponseAll>());
    // Setup other mocks but don't override the Setors service mock
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockSetorService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterSetor>(), It.IsAny<string>())).ReturnsAsync(new List<SetorResponseAll>());
    // Setup other mocks but don't override the Setors service mock
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var setor = new Models.Setor
        {
            Id = 1,
            Descricao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(setor, _mockSetorService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockSetorService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}