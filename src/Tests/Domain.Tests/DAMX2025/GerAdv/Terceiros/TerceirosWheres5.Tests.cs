// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class TerceirosWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFTerceirosFactory> _mockTerceirosFactory;
    private readonly Mock<FTerceiros> _mockFTerceiros;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly TerceirosWhere _terceirosWhere;
    public TerceirosWhereTests()
    {
        _mockTerceirosFactory = new Mock<IFTerceirosFactory>();
        _mockFTerceiros = new Mock<FTerceiros>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _terceirosWhere = new TerceirosWhere(_mockTerceirosFactory.Object);
    }

    public void Dispose()
    {
        _mockTerceirosFactory?.Reset();
        _mockFTerceiros?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
        };
    }

    private void SetupMockFTerceiros(int? Processo = 1, string? Nome = "João", int? Situacao = 1, int? Cidade = 1, string? Endereco = "Rua das Flores, 123", string? Bairro = "Centro", string? CEP = "01234-567", string? Fone = "(11) 99999-9999", string? Fax = "(11) 88888-9999", string? OBS = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string? EMail = "test@email.com", string? Class = "A", string? VaraForoComarca = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", bool? Sexo = false)
    {
        _mockFTerceiros.Setup(f => f.FProcesso).Returns(Processo ?? 0);
        _mockFTerceiros.Setup(f => f.FNome).Returns(Nome ?? string.Empty);
        _mockFTerceiros.Setup(f => f.FSituacao).Returns(Situacao ?? 0);
        _mockFTerceiros.Setup(f => f.FCidade).Returns(Cidade ?? 0);
        _mockFTerceiros.Setup(f => f.FEndereco).Returns(Endereco ?? string.Empty);
        _mockFTerceiros.Setup(f => f.FBairro).Returns(Bairro ?? string.Empty);
        _mockFTerceiros.Setup(f => f.FCEP).Returns(CEP ?? string.Empty);
        _mockFTerceiros.Setup(f => f.FFone).Returns(Fone ?? string.Empty);
        _mockFTerceiros.Setup(f => f.FFax).Returns(Fax ?? string.Empty);
        _mockFTerceiros.Setup(f => f.FOBS).Returns(OBS ?? string.Empty);
        _mockFTerceiros.Setup(f => f.FEMail).Returns(EMail ?? string.Empty);
        _mockFTerceiros.Setup(f => f.FClass).Returns(Class ?? string.Empty);
        _mockFTerceiros.Setup(f => f.FVaraForoComarca).Returns(VaraForoComarca ?? string.Empty);
        _mockFTerceiros.Setup(f => f.FSexo).Returns(Sexo ?? false);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFTerceirosFactory>();
        // Act
        var terceirosWhere = new TerceirosWhere(mockFactory.Object);
        // Assert
        terceirosWhere.Should().NotBeNull();
        terceirosWhere.Should().BeAssignableTo<ITerceirosWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFTerceirosFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new TerceirosWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnTerceirosResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFTerceiros();
        _mockTerceirosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFTerceiros.Object);
        // Act
        var result = _terceirosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.Processo.Should().Be(1);
        result.Nome.Should().Be("João");
        result.Situacao.Should().Be(1);
        result.Cidade.Should().Be(1);
        result.Endereco.Should().Be("Rua das Flores, 123");
        result.Bairro.Should().Be("Centro");
        result.CEP.Should().Be("01234-567");
        result.Fone.Should().Be("(11) 99999-9999");
        result.Fax.Should().Be("(11) 88888-9999");
        result.OBS.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.EMail.Should().Be("test@email.com");
        result.Class.Should().Be("A");
        result.VaraForoComarca.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Sexo.Should().Be(false);
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFTerceiros(Processo: null, Nome: null, Situacao: null, Cidade: null, Endereco: null, Bairro: null, CEP: null, Fone: null, Fax: null, OBS: null, EMail: null, Class: null, VaraForoComarca: null, Sexo: null);
        _mockTerceirosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFTerceiros.Object);
        // Act
        var result = _terceirosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Processo.Should().Be(0);
        result.Nome.Should().Be(string.Empty);
        result.Situacao.Should().Be(0);
        result.Cidade.Should().Be(0);
        result.Endereco.Should().Be(string.Empty);
        result.Bairro.Should().Be(string.Empty);
        result.CEP.Should().Be(string.Empty);
        result.Fone.Should().Be(string.Empty);
        result.Fax.Should().Be(string.Empty);
        result.OBS.Should().Be(string.Empty);
        result.EMail.Should().Be(string.Empty);
        result.Class.Should().Be(string.Empty);
        result.VaraForoComarca.Should().Be(string.Empty);
        result.Sexo.Should().Be(false);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFTerceiros();
        _mockTerceirosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFTerceiros.Object);
        // Act
        var result = _terceirosWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockTerceirosFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFTerceiros();
        _mockTerceirosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFTerceiros.Object);
        // Act
        var result = _terceirosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockTerceirosFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFTerceiros();
        _mockTerceirosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFTerceiros.Object);
        // Act
        var result = _terceirosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockTerceirosFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFTerceiros();
        _mockTerceirosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFTerceiros.Object);
        // Act
        _terceirosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockTerceirosFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFTerceirosInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFTerceiros.Setup(f => f.Dispose());
        SetupMockFTerceiros();
        _mockTerceirosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFTerceiros.Object);
        // Act
        _terceirosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFTerceiros.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockTerceirosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _terceirosWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFTerceiros(Processo: 1, Nome: "João", Situacao: 1, Cidade: 1, Endereco: "Rua das Flores, 123", Bairro: "Centro", CEP: "01234-567", Fone: "(11) 99999-9999", Fax: "(11) 88888-9999", OBS: "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", EMail: "test@email.com", Class: "A", VaraForoComarca: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", Sexo: false);
        _mockTerceirosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFTerceiros.Object);
        // Act
        var result = _terceirosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.Processo.Should().Be(1);
        result.Nome.Should().Be("João");
        result.Situacao.Should().Be(1);
        result.Cidade.Should().Be(1);
        result.Endereco.Should().Be("Rua das Flores, 123");
        result.Bairro.Should().Be("Centro");
        result.CEP.Should().Be("01234-567");
        result.Fone.Should().Be("(11) 99999-9999");
        result.Fax.Should().Be("(11) 88888-9999");
        result.OBS.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.EMail.Should().Be("test@email.com");
        result.Class.Should().Be("A");
        result.VaraForoComarca.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Sexo.Should().Be(false);
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "Nome = @{DBTerceirosDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBTerceirosDicInfo.CampoNome}", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"),
        };
        SetupMockFTerceiros();
        _mockTerceirosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFTerceiros.Object);
        // Act
        _terceirosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockTerceirosFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBTerceirosDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }
#region DateTime Tests
#endregion
#endregion
}