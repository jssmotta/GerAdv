// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class AdvogadosWriterTests
{
    private readonly Mock<IFAdvogadosFactory> _mockAdvogadosFactory;
    private readonly Mock<FAdvogados> _mockFAdvogados;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly AdvogadosWriter _advogadosWriter;
    public AdvogadosWriterTests()
    {
        _mockAdvogadosFactory = new Mock<IFAdvogadosFactory>();
        _mockFAdvogados = new Mock<FAdvogados>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _advogadosWriter = new AdvogadosWriter(_mockAdvogadosFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var advogados = CreateValidAdvogadosModel();
        advogados.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockAdvogadosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFAdvogados.Object);
        _mockFAdvogados.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _advogadosWriter.WriteAsync(advogados, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFAdvogados.Object);
        _mockAdvogadosFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockAdvogadosFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFAdvogados.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var advogados = CreateValidAdvogadosModel();
        advogados.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockAdvogadosFactory.Setup(x => x.CreateFromIdAsync(advogados.Id, _mockConnection.Object)).ReturnsAsync(_mockFAdvogados.Object);
        _mockFAdvogados.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _advogadosWriter.WriteAsync(advogados, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFAdvogados.Object);
        _mockAdvogadosFactory.Verify(x => x.CreateFromIdAsync(advogados.Id, _mockConnection.Object), Times.Once);
        _mockAdvogadosFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFAdvogados.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var advogados = CreateValidAdvogadosModel();
        var auditorQuem = 99;
        _mockAdvogadosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFAdvogados.Object);
        _mockFAdvogados.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _advogadosWriter.WriteAsync(advogados, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFAdvogados.Object);
        _mockFAdvogados.VerifySet(x => x.FCargo = advogados.Cargo, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FEMailPro = advogados.EMailPro, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FCPF = It.IsAny<string>(), Times.Once); // CPF é limpo pelo ClearInputCpf()
        _mockFAdvogados.VerifySet(x => x.FNome = advogados.Nome, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FRG = advogados.RG, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FCasa = advogados.Casa, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FNomeMae = advogados.NomeMae, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FEscritorio = advogados.Escritorio, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FEstagiario = advogados.Estagiario, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FOAB = advogados.OAB, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FNomeCompleto = advogados.NomeCompleto, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FEndereco = advogados.Endereco, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FCidade = advogados.Cidade, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FCEP = It.IsAny<string>(), Times.Once); // CEP é limpo pelo ClearInputCep()
        _mockFAdvogados.VerifySet(x => x.FSexo = advogados.Sexo, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FBairro = advogados.Bairro, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FCTPSSerie = advogados.CTPSSerie, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FCTPS = advogados.CTPS, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FFone = advogados.Fone, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FFax = advogados.Fax, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FComissao = advogados.Comissao, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FDtInicio = advogados.DtInicio.ToString(), Times.Once);
        _mockFAdvogados.VerifySet(x => x.FDtFim = advogados.DtFim.ToString(), Times.Once);
        _mockFAdvogados.VerifySet(x => x.FDtNasc = advogados.DtNasc.ToString(), Times.Once);
        _mockFAdvogados.VerifySet(x => x.FSalario = advogados.Salario, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FSecretaria = advogados.Secretaria, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FTextoProcuracao = advogados.TextoProcuracao, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FEMail = advogados.EMail, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FEspecializacao = advogados.Especializacao, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FPasta = advogados.Pasta, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FObservacao = advogados.Observacao, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FContaBancaria = advogados.ContaBancaria, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FParcTop = advogados.ParcTop, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FClass = advogados.Class, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FTop = advogados.Top, Times.Once);
        _mockFAdvogados.VerifySet(x => x.FGUID = advogados.GUID, Times.Once);
        _mockFAdvogados.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithNullDtInicio_ShouldNotSetFDtInicio()
    {
        // Arrange
        var advogados = CreateValidAdvogadosModel();
        advogados.DtInicio = null;
        var auditorQuem = 123;
        _mockAdvogadosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFAdvogados.Object);
        _mockFAdvogados.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _advogadosWriter.WriteAsync(advogados, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFAdvogados.VerifySet(x => x.FDtInicio = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WithNullDtFim_ShouldNotSetFDtFim()
    {
        // Arrange
        var advogados = CreateValidAdvogadosModel();
        advogados.DtFim = null;
        var auditorQuem = 123;
        _mockAdvogadosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFAdvogados.Object);
        _mockFAdvogados.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _advogadosWriter.WriteAsync(advogados, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFAdvogados.VerifySet(x => x.FDtFim = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WithNullDtNasc_ShouldNotSetFDtNasc()
    {
        // Arrange
        var advogados = CreateValidAdvogadosModel();
        advogados.DtNasc = null;
        var auditorQuem = 123;
        _mockAdvogadosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFAdvogados.Object);
        _mockFAdvogados.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _advogadosWriter.WriteAsync(advogados, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFAdvogados.VerifySet(x => x.FDtNasc = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var advogados = CreateValidAdvogadosModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockAdvogadosFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _advogadosWriter.WriteAsync(advogados, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var advogados = CreateValidAdvogadosModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockAdvogadosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFAdvogados.Object);
        _mockFAdvogados.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _advogadosWriter.WriteAsync(advogados, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var advogadosResponse = new AdvogadosResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockAdvogadosFactory.Setup(x => x.DeleteAsync(operadorId, advogadosResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _advogadosWriter.Delete(advogadosResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockAdvogadosFactory.Verify(x => x.DeleteAsync(operadorId, advogadosResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var advogadosResponse = new AdvogadosResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockAdvogadosFactory.Setup(x => x.DeleteAsync(operadorId, advogadosResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _advogadosWriter.Delete(advogadosResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var advogadosResponse = new AdvogadosResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockAdvogadosFactory.Setup(x => x.DeleteAsync(operadorId, advogadosResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _advogadosWriter.Delete(advogadosResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new AdvogadosWriter(_mockAdvogadosFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new AdvogadosWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.Advogados CreateValidAdvogadosModel()
    {
        return new Models.Advogados
        {
            Id = 0,
            Cargo = 1,
            EMailPro = "test@email.com",
            CPF = "544.506.718-13",
            Nome = "João",
            RG = "12.345.678-9",
            Casa = false,
            NomeMae = "João",
            Escritorio = 1,
            Estagiario = false,
            OAB = "AAAAAAAAAA",
            NomeCompleto = "João",
            Endereco = "Rua das Flores, 123",
            Cidade = 1,
            CEP = "01234-567",
            Sexo = false,
            Bairro = "Centro",
            CTPSSerie = "AAAAAAAA",
            CTPS = "AAAAAAAAAAAAA",
            Fone = "(11) 99999-9999",
            Fax = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Comissao = 1,
            DtInicio = "24/04/1975",
            DtFim = "24/04/1975",
            DtNasc = "24/04/1975",
            Salario = 0m,
            Secretaria = "AAAAAAAAAAAAAAAAAA",
            TextoProcuracao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            EMail = "test@email.com",
            Especializacao = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Pasta = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Observacao = "Observação teste",
            ContaBancaria = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            ParcTop = false,
            Class = "A",
            Top = false,
            GUID = Guid.NewGuid().ToString()
        };
    }
#endregion
}