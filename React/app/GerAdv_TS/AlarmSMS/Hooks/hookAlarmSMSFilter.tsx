// 100% auto-generated by Source Genesys WebApi Front & Back Creator
                     // copyright © 2000-2025 Menphis - Sistemas Inteligentes
                     // This file is part of the Source Genesys project                     
                    import { useState } from 'react';
import InputInput from '@/app/components/Inputs/InputInput';
import InputDate from '@/app/components/Inputs/InputDate';
import InputHora from '@/app/components/Inputs/InputHora';
import InputValor from '@/app/components/Inputs/InputValor';
import InputComboFilterYesNo from '@/app/components/Inputs/InputComboFilterYesNo';
import { FilterHandlers } from '@/app/components/Cruds/GenericFilterDialog';
import { FilterAlarmSMS } from '@/app/GerAdv_TS/AlarmSMS/Filters/AlarmSMS';
import OperadorComboBox from '@/app/GerAdv_TS/Operador/ComboBox/Operador';
import AgendaComboBox from '@/app/GerAdv_TS/Agenda/ComboBox/Agenda';
import RecadosComboBox from '@/app/GerAdv_TS/Recados/ComboBox/Recados';
interface UseAlarmSMSFilterProps {
  handleFetchWithFilter: (filtro?: FilterAlarmSMS | undefined | null) => Promise<void>;
}
interface UseAlarmSMSFilterReturn {
  // Estados
  showSearch: boolean;
  windowFilter: FilterAlarmSMS;
  setWindowFilter: React.Dispatch<React.SetStateAction<FilterAlarmSMS>>;
  // Handlers do Dialog
  handleSearch: () => void;
  handleCloseSearch: () => void;
  handleConfirmSearch: (filter: FilterAlarmSMS) => Promise<void>;
  // Render function
  renderInputFilters: (handlers: FilterHandlers<FilterAlarmSMS>) => React.ReactNode;
  // Utilitários
  clearFilter: () => void;
  hasActiveFilter: boolean;
}
export const useAlarmSMSFilter = ({ handleFetchWithFilter }: UseAlarmSMSFilterProps): UseAlarmSMSFilterReturn => {
  const [showSearch, setShowSearch] = useState(false);
  const [windowFilter, setWindowFilter] = useState<FilterAlarmSMS>({} as FilterAlarmSMS);
  // Handlers do Dialog
  const handleSearch = () => {
    setShowSearch(true);
    const filterWildechar = {...windowFilter, wildcardChar: '%' } as FilterAlarmSMS;
    setWindowFilter(filterWildechar);
  };
  const handleCloseSearch = () => {
    setShowSearch(false);
  };
  const handleConfirmSearch = async (filter: FilterAlarmSMS) => {
    await handleFetchWithFilter(filter);
  };
  // Função para limpar filtros
  const clearFilter = () => {
    setWindowFilter({});
    sessionStorage.removeItem(btoa('AlarmSMSFilter'));
    handleFetchWithFilter({});
  };
  // Verificar se há filtros ativos
  const hasActiveFilter = Object.values(windowFilter).some(value =>
    value !== undefined && value !== null && value !== '' && value !== -2147483648
  );
  // Função para renderizar os campos de filtro
  const renderInputFilters = (handlers: FilterHandlers<FilterAlarmSMS>) => (
  <>
  <InputInput
  type='text'
  id='descricao'
  name='descricao'
  value={handlers.windowFilter?.descricao ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Descricao'
  label='Descricao'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='minuto'
  name='minuto'
  value={handlers.windowFilter?.minuto ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Minuto'
  label='Minuto (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='minuto_end'
  name='minuto_end'
  value={handlers.windowFilter?.minuto_end ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Minuto final'
  label='Minuto final'
  disabled={handlers.windowFilter?.minuto ? false: true}
  className='inputIncNome inputSearch'
  />
  <InputComboFilterYesNo
  type='text'
  id='d1'
  name='d1'
  value={handlers.windowFilter?.d1 ?? -2147483648}
  onChange={handlers.handleInputChange}
  label='D1'
  className='inputSearch inputSearchCheckbox'
  />
  <InputComboFilterYesNo
  type='text'
  id='d2'
  name='d2'
  value={handlers.windowFilter?.d2 ?? -2147483648}
  onChange={handlers.handleInputChange}
  label='D2'
  className='inputSearch inputSearchCheckbox'
  />
  <InputComboFilterYesNo
  type='text'
  id='d3'
  name='d3'
  value={handlers.windowFilter?.d3 ?? -2147483648}
  onChange={handlers.handleInputChange}
  label='D3'
  className='inputSearch inputSearchCheckbox'
  />
  <InputComboFilterYesNo
  type='text'
  id='d4'
  name='d4'
  value={handlers.windowFilter?.d4 ?? -2147483648}
  onChange={handlers.handleInputChange}
  label='D4'
  className='inputSearch inputSearchCheckbox'
  />
  <InputComboFilterYesNo
  type='text'
  id='d5'
  name='d5'
  value={handlers.windowFilter?.d5 ?? -2147483648}
  onChange={handlers.handleInputChange}
  label='D5'
  className='inputSearch inputSearchCheckbox'
  />
  <InputComboFilterYesNo
  type='text'
  id='d6'
  name='d6'
  value={handlers.windowFilter?.d6 ?? -2147483648}
  onChange={handlers.handleInputChange}
  label='D6'
  className='inputSearch inputSearchCheckbox'
  />
  <InputComboFilterYesNo
  type='text'
  id='d7'
  name='d7'
  value={handlers.windowFilter?.d7 ?? -2147483648}
  onChange={handlers.handleInputChange}
  label='D7'
  className='inputSearch inputSearchCheckbox'
  />
  <InputInput
  type='text'
  id='email'
  name='email'
  value={handlers.windowFilter?.email ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe EMail'
  label='EMail'
  className='inputIncNome inputSearch'
  />
  <InputComboFilterYesNo
  type='text'
  id='desativar'
  name='desativar'
  value={handlers.windowFilter?.desativar ?? -2147483648}
  onChange={handlers.handleInputChange}
  label='Desativar'
  className='inputSearch inputSearchCheckbox'
  />
  <InputDate
  type='text'
  id='today'
  label='Today (igual ou início)'
  dataForm={null}
  className='inputSearch'
  name='today'
  value={handlers.windowFilter?.today ?? ''}
  onChange={(value: string) => handlers.handleDateChange('today', value)}
  />
  <InputDate
  type='text'
  id='today_end'
  label='Today (final)'
  dataForm={null}
  className='inputSearch'
  name='today_end'
  value={handlers.windowFilter?.today_end ?? ''}
  disabled={handlers.windowFilter?.today ? false: true}
  onChange={(value: string) => handlers.handleDateChange('today_end', value)}
  />
  <InputComboFilterYesNo
  type='text'
  id='excetodiasfelizes'
  name='excetodiasfelizes'
  value={handlers.windowFilter?.excetodiasfelizes ?? -2147483648}
  onChange={handlers.handleInputChange}
  label='ExcetoDiasFelizes'
  className='inputSearch inputSearchCheckbox'
  />
  <InputComboFilterYesNo
  type='text'
  id='desktop'
  name='desktop'
  value={handlers.windowFilter?.desktop ?? -2147483648}
  onChange={handlers.handleInputChange}
  label='Desktop'
  className='inputSearch inputSearchCheckbox'
  />
  <InputDate
  type='text'
  id='alertardatahora'
  label='AlertarDataHora (igual ou início)'
  dataForm={null}
  className='inputSearch'
  name='alertardatahora'
  value={handlers.windowFilter?.alertardatahora ?? ''}
  onChange={(value: string) => handlers.handleDateChange('alertardatahora', value)}
  />
  <InputDate
  type='text'
  id='alertardatahora_end'
  label='AlertarDataHora (final)'
  dataForm={null}
  className='inputSearch'
  name='alertardatahora_end'
  value={handlers.windowFilter?.alertardatahora_end ?? ''}
  disabled={handlers.windowFilter?.alertardatahora ? false: true}
  onChange={(value: string) => handlers.handleDateChange('alertardatahora_end', value)}
  />
  <OperadorComboBox
  name='operador'
  dataForm={null}
  value={handlers.windowFilter?.operador}
  setValue={(e:any) => handlers.handleComboChange(e, 'operador')}
  className='inputSearch inputSearchComboboxTab'
  label='Operador'
  />
  <InputInput
  type='text'
  id='guidexo'
  name='guidexo'
  value={handlers.windowFilter?.guidexo ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe GuidExo'
  label='GuidExo'
  className='inputIncNome inputSearch'
  />
  <AgendaComboBox
  name='agenda'
  dataForm={null}
  value={handlers.windowFilter?.agenda}
  setValue={(e:any) => handlers.handleComboChange(e, 'agenda')}
  className='inputSearch inputSearchComboboxTab'
  label='Compromisso'
  />
  <RecadosComboBox
  name='recado'
  dataForm={null}
  value={handlers.windowFilter?.recado}
  setValue={(e:any) => handlers.handleComboChange(e, 'recado')}
  className='inputSearch inputSearchComboboxTab'
  label='Recados'
  />
  <InputInput
  type='text'
  id='emocao'
  name='emocao'
  value={handlers.windowFilter?.emocao ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Emocao'
  label='Emocao (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='emocao_end'
  name='emocao_end'
  value={handlers.windowFilter?.emocao_end ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Emocao final'
  label='Emocao final'
  disabled={handlers.windowFilter?.emocao ? false: true}
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='codigo_filtro'
  name='codigo_filtro'
  value={handlers.windowFilter?.codigo_filtro ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código do cadastro'
  label='Código (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='codigo_filtro_end'
  name='codigo_filtro_end'
  value={handlers.windowFilter?.codigo_filtro_end ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código final do cadastro'
  label='Código final'
  disabled={handlers.windowFilter?.codigo_filtro ? false: true}
  className='inputIncNome inputSearch'
  />
</>
);
return {
  // Estados
  showSearch, 
  windowFilter, 
  setWindowFilter, 
  // Handlers
  handleSearch, 
  handleCloseSearch, 
  handleConfirmSearch, 
  // Render function
  renderInputFilters, 
  // Utilitários
  clearFilter, 
  hasActiveFilter
};
};