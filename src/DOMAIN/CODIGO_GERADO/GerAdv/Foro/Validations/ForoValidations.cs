// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IForoValidation
{
    Task<bool> ValidateReg(Models.Foro reg, IForoService service, ICidadeReader cidadeReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, IForoService service, IDivisaoTribunalService divisaotribunalService, IInstanciaService instanciaService, IPoderJudiciarioAssociadoService poderjudiciarioassociadoService, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class ForoValidation : IForoValidation
{
    public async Task<bool> CanDelete(int id, IForoService service, IDivisaoTribunalService divisaotribunalService, IInstanciaService instanciaService, IPoderJudiciarioAssociadoService poderjudiciarioassociadoService, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        var divisaotribunalExists0 = await divisaotribunalService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterDivisaoTribunal { Foro = id }, uri);
        if (divisaotribunalExists0 != null && divisaotribunalExists0.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Divisao Tribunal associados a ele.");
        var instanciaExists1 = await instanciaService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterInstancia { Foro = id }, uri);
        if (instanciaExists1 != null && instanciaExists1.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Instancia associados a ele.");
        var poderjudiciarioassociadoExists2 = await poderjudiciarioassociadoService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterPoderJudiciarioAssociado { Foro = id }, uri);
        if (poderjudiciarioassociadoExists2 != null && poderjudiciarioassociadoExists2.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Poder Judiciario Associado associados a ele.");
        return true;
    }

    private bool ValidSizes(Models.Foro reg)
    {
        if (reg.Nome != null && reg.Nome.Length > 40)
            throw new SGValidationException($"Nome deve ter no máximo 40 caracteres.");
        if (reg.Site != null && reg.Site.Length > 150)
            throw new SGValidationException($"Site deve ter no máximo 150 caracteres.");
        if (reg.Endereco != null && reg.Endereco.Length > 50)
            throw new SGValidationException($"Endereco deve ter no máximo 50 caracteres.");
        if (reg.Bairro != null && reg.Bairro.Length > 255)
            throw new SGValidationException($"Bairro deve ter no máximo 255 caracteres.");
        if (reg.CEP != null && reg.CEP.ClearInputCepCpfCnpj().Length > 10)
            throw new SGValidationException($"CEP deve ter no máximo 10 caracteres.");
        if (reg.Web != null && reg.Web.Length > 255)
            throw new SGValidationException($"Web deve ter no máximo 255 caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.Foro reg, IForoService service, ICidadeReader cidadeReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Nome))
            throw new SGValidationException("Nome é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.EMail.Length > 0 && !reg.EMail.IsValidEmail())
            throw new SGValidationException($"EMail em formato inválido.");
        // Cidade
        if (!reg.Cidade.IsEmptyIDNumber())
        {
            var regCidade = await cidadeReader.Read(reg.Cidade, oCnn);
            if (regCidade == null || regCidade.Id != reg.Cidade)
            {
                throw new SGValidationException($"Cidade não encontrado ({regCidade?.Id}).");
            }
        }

        return true;
    }
}