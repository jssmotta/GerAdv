// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class ReuniaoWriterTests
{
    private readonly Mock<IFReuniaoFactory> _mockReuniaoFactory;
    private readonly Mock<FReuniao> _mockFReuniao;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly ReuniaoWriter _reuniaoWriter;
    public ReuniaoWriterTests()
    {
        _mockReuniaoFactory = new Mock<IFReuniaoFactory>();
        _mockFReuniao = new Mock<FReuniao>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _reuniaoWriter = new ReuniaoWriter(_mockReuniaoFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var reuniao = CreateValidReuniaoModel();
        reuniao.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockReuniaoFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFReuniao.Object);
        _mockFReuniao.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _reuniaoWriter.WriteAsync(reuniao, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFReuniao.Object);
        _mockReuniaoFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockReuniaoFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFReuniao.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var reuniao = CreateValidReuniaoModel();
        reuniao.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockReuniaoFactory.Setup(x => x.CreateFromIdAsync(reuniao.Id, _mockConnection.Object)).ReturnsAsync(_mockFReuniao.Object);
        _mockFReuniao.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _reuniaoWriter.WriteAsync(reuniao, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFReuniao.Object);
        _mockReuniaoFactory.Verify(x => x.CreateFromIdAsync(reuniao.Id, _mockConnection.Object), Times.Once);
        _mockReuniaoFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFReuniao.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var reuniao = CreateValidReuniaoModel();
        var auditorQuem = 99;
        _mockReuniaoFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFReuniao.Object);
        _mockFReuniao.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _reuniaoWriter.WriteAsync(reuniao, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFReuniao.Object);
        _mockFReuniao.VerifySet(x => x.FCliente = reuniao.Cliente, Times.Once);
        _mockFReuniao.VerifySet(x => x.FIDAgenda = reuniao.IDAgenda, Times.Once);
        _mockFReuniao.VerifySet(x => x.FData = reuniao.Data, Times.Once);
        _mockFReuniao.VerifySet(x => x.FPauta = reuniao.Pauta, Times.Once);
        _mockFReuniao.VerifySet(x => x.FATA = reuniao.ATA, Times.Once);
        _mockFReuniao.VerifySet(x => x.FHoraInicial = reuniao.HoraInicial.ToString(), Times.Once);
        _mockFReuniao.VerifySet(x => x.FHoraFinal = reuniao.HoraFinal, Times.Once);
        _mockFReuniao.VerifySet(x => x.FExterna = reuniao.Externa, Times.Once);
        _mockFReuniao.VerifySet(x => x.FHoraSaida = reuniao.HoraSaida.ToString(), Times.Once);
        _mockFReuniao.VerifySet(x => x.FHoraRetorno = reuniao.HoraRetorno.ToString(), Times.Once);
        _mockFReuniao.VerifySet(x => x.FPrincipaisDecisoes = reuniao.PrincipaisDecisoes, Times.Once);
        _mockFReuniao.VerifySet(x => x.FGUID = reuniao.GUID, Times.Once);
        _mockFReuniao.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithNullHoraInicial_ShouldNotSetFHoraInicial()
    {
        // Arrange
        var reuniao = CreateValidReuniaoModel();
        reuniao.HoraInicial = null;
        var auditorQuem = 123;
        _mockReuniaoFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFReuniao.Object);
        _mockFReuniao.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _reuniaoWriter.WriteAsync(reuniao, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFReuniao.VerifySet(x => x.FHoraInicial = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WithNullHoraSaida_ShouldNotSetFHoraSaida()
    {
        // Arrange
        var reuniao = CreateValidReuniaoModel();
        reuniao.HoraSaida = null;
        var auditorQuem = 123;
        _mockReuniaoFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFReuniao.Object);
        _mockFReuniao.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _reuniaoWriter.WriteAsync(reuniao, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFReuniao.VerifySet(x => x.FHoraSaida = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WithNullHoraRetorno_ShouldNotSetFHoraRetorno()
    {
        // Arrange
        var reuniao = CreateValidReuniaoModel();
        reuniao.HoraRetorno = null;
        var auditorQuem = 123;
        _mockReuniaoFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFReuniao.Object);
        _mockFReuniao.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _reuniaoWriter.WriteAsync(reuniao, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFReuniao.VerifySet(x => x.FHoraRetorno = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var reuniao = CreateValidReuniaoModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockReuniaoFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _reuniaoWriter.WriteAsync(reuniao, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var reuniao = CreateValidReuniaoModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockReuniaoFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFReuniao.Object);
        _mockFReuniao.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _reuniaoWriter.WriteAsync(reuniao, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var reuniaoResponse = new ReuniaoResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockReuniaoFactory.Setup(x => x.DeleteAsync(operadorId, reuniaoResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _reuniaoWriter.Delete(reuniaoResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockReuniaoFactory.Verify(x => x.DeleteAsync(operadorId, reuniaoResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var reuniaoResponse = new ReuniaoResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockReuniaoFactory.Setup(x => x.DeleteAsync(operadorId, reuniaoResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _reuniaoWriter.Delete(reuniaoResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var reuniaoResponse = new ReuniaoResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockReuniaoFactory.Setup(x => x.DeleteAsync(operadorId, reuniaoResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _reuniaoWriter.Delete(reuniaoResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new ReuniaoWriter(_mockReuniaoFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new ReuniaoWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.Reuniao CreateValidReuniaoModel()
    {
        return new Models.Reuniao
        {
            Id = 0,
            Cliente = 1,
            IDAgenda = 1,
            Data = "27/05/2022",
            Pauta = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            ATA = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            HoraInicial = "04:04",
            HoraFinal = "04:04",
            Externa = false,
            HoraSaida = "04:04",
            HoraRetorno = "04:04",
            PrincipaisDecisoes = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            GUID = Guid.NewGuid().ToString()
        };
    }
#endregion
}