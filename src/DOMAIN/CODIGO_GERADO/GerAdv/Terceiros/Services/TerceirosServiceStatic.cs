// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class TerceirosService
{
    private static (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterTerceiros filtro)
    {
        var parameters = new List<SqlParameter>();
        if (filtro.Processo != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBTerceirosDicInfo.Processo)}", filtro.Processo));
        }

        if (!string.IsNullOrEmpty(filtro.Nome))
        {
            parameters.Add(new($"@{nameof(DBTerceirosDicInfo.Nome)}", ApplyWildCard(filtro.WildcardChar, filtro.Nome)));
        }

        if (filtro.Situacao != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBTerceirosDicInfo.Situacao)}", filtro.Situacao));
        }

        if (filtro.Cidade != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBTerceirosDicInfo.Cidade)}", filtro.Cidade));
        }

        if (!string.IsNullOrEmpty(filtro.Endereco))
        {
            parameters.Add(new($"@{nameof(DBTerceirosDicInfo.Endereco)}", ApplyWildCard(filtro.WildcardChar, filtro.Endereco)));
        }

        if (!string.IsNullOrEmpty(filtro.Bairro))
        {
            parameters.Add(new($"@{nameof(DBTerceirosDicInfo.Bairro)}", ApplyWildCard(filtro.WildcardChar, filtro.Bairro)));
        }

        if (!string.IsNullOrEmpty(filtro.CEP))
        {
            parameters.Add(new($"@{nameof(DBTerceirosDicInfo.CEP)}", ApplyWildCard(filtro.WildcardChar, filtro.CEP)));
        }

        if (!string.IsNullOrEmpty(filtro.Fone))
        {
            parameters.Add(new($"@{nameof(DBTerceirosDicInfo.Fone)}", ApplyWildCard(filtro.WildcardChar, filtro.Fone)));
        }

        if (!string.IsNullOrEmpty(filtro.Fax))
        {
            parameters.Add(new($"@{nameof(DBTerceirosDicInfo.Fax)}", ApplyWildCard(filtro.WildcardChar, filtro.Fax)));
        }

        if (!string.IsNullOrEmpty(filtro.OBS))
        {
            parameters.Add(new($"@{nameof(DBTerceirosDicInfo.OBS)}", ApplyWildCard(filtro.WildcardChar, filtro.OBS)));
        }

        if (!string.IsNullOrEmpty(filtro.EMail))
        {
            parameters.Add(new($"@{nameof(DBTerceirosDicInfo.EMail)}", ApplyWildCard(filtro.WildcardChar, filtro.EMail)));
        }

        if (!string.IsNullOrEmpty(filtro.Class))
        {
            parameters.Add(new($"@{nameof(DBTerceirosDicInfo.Class)}", ApplyWildCard(filtro.WildcardChar, filtro.Class)));
        }

        if (!string.IsNullOrEmpty(filtro.VaraForoComarca))
        {
            parameters.Add(new($"@{nameof(DBTerceirosDicInfo.VaraForoComarca)}", ApplyWildCard(filtro.WildcardChar, filtro.VaraForoComarca)));
        }

        if (filtro.Sexo != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBTerceirosDicInfo.Sexo)}", filtro.Sexo));
        }

        if (!string.IsNullOrEmpty(filtro.GUID))
        {
            parameters.Add(new($"@{nameof(DBTerceirosDicInfo.GUID)}", ApplyWildCard(filtro.WildcardChar, filtro.GUID)));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBTerceirosDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
        }

        if (filtro.Codigo_filtro_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBTerceirosDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
        }

        if (filtro.LogicalOperator.IsEmpty() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        cWhere.Append(filtro.Processo <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBTerceirosDicInfo.PTabelaNome}].[{DBTerceirosDicInfo.Processo}] = @{nameof(DBTerceirosDicInfo.Processo)}");
        cWhere.Append(filtro.Nome.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBTerceirosDicInfo.PTabelaNome}].[{DBTerceirosDicInfo.Nome}]  {DevourerConsts.MsiCollate} like @{nameof(DBTerceirosDicInfo.Nome)}");
        cWhere.Append(filtro.Situacao <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBTerceirosDicInfo.PTabelaNome}].[{DBTerceirosDicInfo.Situacao}] = @{nameof(DBTerceirosDicInfo.Situacao)}");
        cWhere.Append(filtro.Cidade <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBTerceirosDicInfo.PTabelaNome}].[{DBTerceirosDicInfo.Cidade}] = @{nameof(DBTerceirosDicInfo.Cidade)}");
        cWhere.Append(filtro.Endereco.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBTerceirosDicInfo.PTabelaNome}].[{DBTerceirosDicInfo.Endereco}]  {DevourerConsts.MsiCollate} like @{nameof(DBTerceirosDicInfo.Endereco)}");
        cWhere.Append(filtro.Bairro.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBTerceirosDicInfo.PTabelaNome}].[{DBTerceirosDicInfo.Bairro}]  {DevourerConsts.MsiCollate} like @{nameof(DBTerceirosDicInfo.Bairro)}");
        cWhere.Append(filtro.CEP.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBTerceirosDicInfo.PTabelaNome}].[{DBTerceirosDicInfo.CEP}]  {DevourerConsts.MsiCollate} like @{nameof(DBTerceirosDicInfo.CEP)}");
        cWhere.Append(filtro.Fone.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBTerceirosDicInfo.PTabelaNome}].[{DBTerceirosDicInfo.Fone}]  {DevourerConsts.MsiCollate} like @{nameof(DBTerceirosDicInfo.Fone)}");
        cWhere.Append(filtro.Fax.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBTerceirosDicInfo.PTabelaNome}].[{DBTerceirosDicInfo.Fax}]  {DevourerConsts.MsiCollate} like @{nameof(DBTerceirosDicInfo.Fax)}");
        cWhere.Append(filtro.OBS.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBTerceirosDicInfo.PTabelaNome}].[{DBTerceirosDicInfo.OBS}]  {DevourerConsts.MsiCollate} like @{nameof(DBTerceirosDicInfo.OBS)}");
        cWhere.Append(filtro.EMail.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBTerceirosDicInfo.PTabelaNome}].[{DBTerceirosDicInfo.EMail}]  {DevourerConsts.MsiCollate} like @{nameof(DBTerceirosDicInfo.EMail)}");
        cWhere.Append(filtro.Class.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBTerceirosDicInfo.PTabelaNome}].[{DBTerceirosDicInfo.Class}]  {DevourerConsts.MsiCollate} like @{nameof(DBTerceirosDicInfo.Class)}");
        cWhere.Append(filtro.VaraForoComarca.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBTerceirosDicInfo.PTabelaNome}].[{DBTerceirosDicInfo.VaraForoComarca}]  {DevourerConsts.MsiCollate} like @{nameof(DBTerceirosDicInfo.VaraForoComarca)}");
        cWhere.Append(filtro.Sexo == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBTerceirosDicInfo.PTabelaNome}].[{DBTerceirosDicInfo.Sexo}] = @{nameof(DBTerceirosDicInfo.Sexo)}");
        cWhere.Append(filtro.GUID.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBTerceirosDicInfo.PTabelaNome}].[{DBTerceirosDicInfo.GUID}]  {DevourerConsts.MsiCollate} like @{nameof(DBTerceirosDicInfo.GUID)}");
        if (!filtro.Codigo_filtro.IsEmpty() && filtro.Codigo_filtro_end.IsEmpty())
        {
            cWhere.Append(filtro.Codigo_filtro <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBTerceirosDicInfo.PTabelaNome}].[{DBTerceirosDicInfo.CampoCodigo}] >= @{nameof(DBTerceirosDicInfo.CampoCodigo)}");
        }
        else
        {
            cWhere.Append((filtro.Codigo_filtro <= 0 && filtro.Codigo_filtro_end <= 0) ? string.Empty : (!(filtro.Codigo_filtro <= 0) && !(filtro.Codigo_filtro_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBTerceirosDicInfo.CampoCodigo} BETWEEN @{nameof(DBTerceirosDicInfo.CampoCodigo)} AND @{nameof(DBTerceirosDicInfo.CampoCodigo)}_end" : !(filtro.Codigo_filtro <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBTerceirosDicInfo.CampoCodigo} = @{nameof(DBTerceirosDicInfo.CampoCodigo)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBTerceirosDicInfo.CampoCodigo} <= @{nameof(DBTerceirosDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private static string ApplyWildCard(char wildcardChar, string value)
    {
        if (wildcardChar == '\0' || wildcardChar == ' ')
        {
            return value;
        }

        var result = $"{wildcardChar}{value.Replace(" ", wildcardChar.ToString())}{wildcardChar}";
        return result;
    }

    public async Task<IEnumerable<NomeID>> GetListN([FromQuery] int max, [FromBody] Filters.FilterTerceiros? filtro, [FromRoute, Required] string uri, CancellationToken token)
    {
        // Tracking: 20250606-0
        ThrowIfDisposed();
        var filtroResult = filtro == null ? null : WFiltro(filtro!);
        string where = filtroResult?.where ?? string.Empty;
        List<SqlParameter> parameters = filtroResult?.parametros ?? [];
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new Exception($"Coneão nula.");
        }

        var keyCache = await reader.ReadStringAuditor(uri, "", [], oCnn);
        var cacheKey = $"{uri}-Terceiros-{max}-{where.GetHashCode()}-GetListN-{keyCache}";
        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId)
        };
        return await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataListNAsync(max, uri, where, parameters, cancel), entryOptions, cancellationToken: token) ?? [];
    }

    private async Task<IEnumerable<NomeID>> GetDataListNAsync(int max, string uri, string where, List<SqlParameter> parameters, CancellationToken token)
    {
        var result = new List<NomeID>(max);
        var lista = await reader.ListarN(max, uri, where, parameters, DBTerceirosDicInfo.CampoNome);
        foreach (var item in lista)
        {
            if (token.IsCancellationRequested)
                break;
            if (item?.FNome != null)
            {
                result.Add(new NomeID { Nome = item.FNome, ID = item.ID });
            }
        }

        return result;
    }

    private async Task<IEnumerable<TerceirosResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}