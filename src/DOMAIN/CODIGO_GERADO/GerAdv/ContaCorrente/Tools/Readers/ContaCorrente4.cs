// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Readers;
public partial class ContaCorrenteReader(IFContaCorrenteFactory contacorrenteFactory) : IContaCorrenteReader
{
    private readonly IFContaCorrenteFactory _contacorrenteFactory = contacorrenteFactory;
    public async Task<IEnumerable<ContaCorrenteResponseAll>> Listar(int max, string uri, string cWhere, List<SqlParameter> parameters, string order, CancellationToken cancellationToken) => await ListarTabela(BuildSqlQuery(DBContaCorrente.CamposSqlX, cWhere, order, max), parameters, uri, caching: DevourerOne.PCachingDefault, max: max, cancellationToken: cancellationToken);
    private async Task<IEnumerable<ContaCorrenteResponseAll>> ListarTabela(string sql, List<SqlParameter> parameters, string uri, bool caching = DevourerOne.PCachingDefault, int max = 200, CancellationToken cancellationToken = default)
    {
        var result = new List<ContaCorrenteResponseAll>(max);
        await using var connection = Configuracoes.GetConnectionByUri(uri);
        await using var cmd = new SqlCommand(cmdText: ConfiguracoesDBT.CmdSql(sql), connection: connection?.InnerConnection)
        {
            CommandTimeout = 30
        };
        foreach (var param in parameters)
        {
            if (!cmd.Parameters.Contains(param.ParameterName))
            {
                var newParam = new SqlParameter(param.ParameterName, param.Value)
                {
                    SqlDbType = param.SqlDbType,
                    Direction = param.Direction,
                    Size = param.Size,
                    Precision = param.Precision,
                    Scale = param.Scale
                };
                cmd.Parameters.Add(newParam);
            }
        }

        await using var reader = await cmd.ExecuteReaderAsync(CommandBehavior.SingleResult);
        while (await reader.ReadAsync())
        {
            if (cancellationToken.IsCancellationRequested)
                return result;
            result.Add(ReadAll(_contacorrenteFactory.CreateFromReader(reader), reader)!);
        }

        return result;
    }

    public async Task<ContaCorrenteResponse?> Read(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _contacorrenteFactory.CreateFromIdAsync(id, oCnn);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public async Task<Models.ContaCorrente?> ReadM(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _contacorrenteFactory.CreateFromIdAsync(id, oCnn);
        var contacorrente = new Models.ContaCorrente
        {
            Id = dbRec.ID,
            CIAcordo = dbRec.FCIAcordo,
            Quitado = dbRec.FQuitado,
            IDContrato = dbRec.FIDContrato,
            QuitadoID = dbRec.FQuitadoID,
            DebitoID = dbRec.FDebitoID,
            LivroCaixaID = dbRec.FLivroCaixaID,
            Sucumbencia = dbRec.FSucumbencia,
            DistRegra = dbRec.FDistRegra,
            Processo = dbRec.FProcesso,
            ParcelaX = dbRec.FParcelaX,
            Valor = dbRec.FValor,
            Cliente = dbRec.FCliente,
            Historico = dbRec.FHistorico ?? string.Empty,
            Contrato = dbRec.FContrato,
            Pago = dbRec.FPago,
            Distribuir = dbRec.FDistribuir,
            LC = dbRec.FLC,
            IDHTrab = dbRec.FIDHTrab,
            NroParcelas = dbRec.FNroParcelas,
            ValorPrincipal = dbRec.FValorPrincipal,
            ParcelaPrincipalID = dbRec.FParcelaPrincipalID,
            Hide = dbRec.FHide,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDtOriginal, out DateTime XDtOriginal))
        {
            contacorrente.DtOriginal = dbRec.FDtOriginal;
            contacorrente.DtOriginal_date = XDtOriginal;
        }

        if (DateTime.TryParse(dbRec.FData, out DateTime XData))
        {
            contacorrente.Data = dbRec.FData;
            contacorrente.Data_date = XData;
        }

        if (DateTime.TryParse(dbRec.FDataPgto, out DateTime XDataPgto))
        {
            contacorrente.DataPgto = dbRec.FDataPgto;
            contacorrente.DataPgto_date = XDataPgto;
        }

        return contacorrente;
    }

    public ContaCorrenteResponse? Read(FContaCorrente dbRec, MsiSqlConnection oCnn)
    {
        return Read(dbRec);
    }

    public ContaCorrenteResponse? Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn)
    {
        using var dbRec = _contacorrenteFactory.CreateFromParameters(parameters, oCnn, sqlWhere: where);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public ContaCorrenteResponse? Read(FContaCorrente dbRec) // Track 001.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var contacorrente = new ContaCorrenteResponse
        {
            Id = dbRec.ID,
            CIAcordo = dbRec.FCIAcordo,
            Quitado = dbRec.FQuitado,
            IDContrato = dbRec.FIDContrato,
            QuitadoID = dbRec.FQuitadoID,
            DebitoID = dbRec.FDebitoID,
            LivroCaixaID = dbRec.FLivroCaixaID,
            Sucumbencia = dbRec.FSucumbencia,
            DistRegra = dbRec.FDistRegra,
            Processo = dbRec.FProcesso,
            ParcelaX = dbRec.FParcelaX,
            Valor = dbRec.FValor,
            Cliente = dbRec.FCliente,
            Historico = dbRec.FHistorico ?? string.Empty,
            Contrato = dbRec.FContrato,
            Pago = dbRec.FPago,
            Distribuir = dbRec.FDistribuir,
            LC = dbRec.FLC,
            IDHTrab = dbRec.FIDHTrab,
            NroParcelas = dbRec.FNroParcelas,
            ValorPrincipal = dbRec.FValorPrincipal,
            ParcelaPrincipalID = dbRec.FParcelaPrincipalID,
            Hide = dbRec.FHide,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDtOriginal, out DateTime XDtOriginal))
        {
            contacorrente.DtOriginal = dbRec.FDtOriginal;
            contacorrente.DtOriginal_date = XDtOriginal;
        }

        if (DateTime.TryParse(dbRec.FData, out DateTime XData))
        {
            contacorrente.Data = dbRec.FData;
            contacorrente.Data_date = XData;
        }

        if (DateTime.TryParse(dbRec.FDataPgto, out DateTime XDataPgto))
        {
            contacorrente.DataPgto = dbRec.FDataPgto;
            contacorrente.DataPgto_date = XDataPgto;
        }

        return contacorrente;
    }

    public ContaCorrenteResponse? Read(SG.GerAdv.DBContaCorrente dbRec) // Track 002.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var contacorrente = new ContaCorrenteResponse
        {
            Id = dbRec.ID,
            CIAcordo = dbRec.FCIAcordo,
            Quitado = dbRec.FQuitado,
            IDContrato = dbRec.FIDContrato,
            QuitadoID = dbRec.FQuitadoID,
            DebitoID = dbRec.FDebitoID,
            LivroCaixaID = dbRec.FLivroCaixaID,
            Sucumbencia = dbRec.FSucumbencia,
            DistRegra = dbRec.FDistRegra,
            Processo = dbRec.FProcesso,
            ParcelaX = dbRec.FParcelaX,
            Valor = dbRec.FValor,
            Cliente = dbRec.FCliente,
            Historico = dbRec.FHistorico ?? string.Empty,
            Contrato = dbRec.FContrato,
            Pago = dbRec.FPago,
            Distribuir = dbRec.FDistribuir,
            LC = dbRec.FLC,
            IDHTrab = dbRec.FIDHTrab,
            NroParcelas = dbRec.FNroParcelas,
            ValorPrincipal = dbRec.FValorPrincipal,
            ParcelaPrincipalID = dbRec.FParcelaPrincipalID,
            Hide = dbRec.FHide,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDtOriginal, out DateTime XDtOriginal))
        {
            contacorrente.DtOriginal = dbRec.FDtOriginal;
            contacorrente.DtOriginal_date = XDtOriginal;
        }

        if (DateTime.TryParse(dbRec.FData, out DateTime XData))
        {
            contacorrente.Data = dbRec.FData;
            contacorrente.Data_date = XData;
        }

        if (DateTime.TryParse(dbRec.FDataPgto, out DateTime XDataPgto))
        {
            contacorrente.DataPgto = dbRec.FDataPgto;
            contacorrente.DataPgto_date = XDataPgto;
        }

        return contacorrente;
    }

    public ContaCorrenteResponseAll? ReadAll(FContaCorrente dbRec, IDataRecord dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var contacorrente = new ContaCorrenteResponseAll
        {
            Id = dbRec.ID,
            CIAcordo = dbRec.FCIAcordo,
            Quitado = dbRec.FQuitado,
            IDContrato = dbRec.FIDContrato,
            QuitadoID = dbRec.FQuitadoID,
            DebitoID = dbRec.FDebitoID,
            LivroCaixaID = dbRec.FLivroCaixaID,
            Sucumbencia = dbRec.FSucumbencia,
            DistRegra = dbRec.FDistRegra,
            Processo = dbRec.FProcesso,
            ParcelaX = dbRec.FParcelaX,
            Valor = dbRec.FValor,
            Cliente = dbRec.FCliente,
            Historico = dbRec.FHistorico ?? string.Empty,
            Contrato = dbRec.FContrato,
            Pago = dbRec.FPago,
            Distribuir = dbRec.FDistribuir,
            LC = dbRec.FLC,
            IDHTrab = dbRec.FIDHTrab,
            NroParcelas = dbRec.FNroParcelas,
            ValorPrincipal = dbRec.FValorPrincipal,
            ParcelaPrincipalID = dbRec.FParcelaPrincipalID,
            Hide = dbRec.FHide,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDtOriginal, out DateTime XDtOriginal))
        {
            contacorrente.DtOriginal = dbRec.FDtOriginal;
            contacorrente.DtOriginal_date = XDtOriginal;
        }

        if (DateTime.TryParse(dbRec.FData, out DateTime XData))
        {
            contacorrente.Data = dbRec.FData;
            contacorrente.Data_date = XData;
        }

        if (DateTime.TryParse(dbRec.FDataPgto, out DateTime XDataPgto))
        {
            contacorrente.DataPgto = dbRec.FDataPgto;
            contacorrente.DataPgto_date = XDataPgto;
        }

        try
        {
            contacorrente.NroPastaProcessos = dr[DBProcessosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            contacorrente.NomeClientes = dr[DBClientesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return contacorrente;
    }

    public ContaCorrenteResponseAll? ReadAll(SG.GerAdv.DBContaCorrente dbRec, DataRow dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var contacorrente = new ContaCorrenteResponseAll
        {
            Id = dbRec.ID,
            CIAcordo = dbRec.FCIAcordo,
            Quitado = dbRec.FQuitado,
            IDContrato = dbRec.FIDContrato,
            QuitadoID = dbRec.FQuitadoID,
            DebitoID = dbRec.FDebitoID,
            LivroCaixaID = dbRec.FLivroCaixaID,
            Sucumbencia = dbRec.FSucumbencia,
            DistRegra = dbRec.FDistRegra,
            Processo = dbRec.FProcesso,
            ParcelaX = dbRec.FParcelaX,
            Valor = dbRec.FValor,
            Cliente = dbRec.FCliente,
            Historico = dbRec.FHistorico ?? string.Empty,
            Contrato = dbRec.FContrato,
            Pago = dbRec.FPago,
            Distribuir = dbRec.FDistribuir,
            LC = dbRec.FLC,
            IDHTrab = dbRec.FIDHTrab,
            NroParcelas = dbRec.FNroParcelas,
            ValorPrincipal = dbRec.FValorPrincipal,
            ParcelaPrincipalID = dbRec.FParcelaPrincipalID,
            Hide = dbRec.FHide,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDtOriginal, out DateTime XDtOriginal))
        {
            contacorrente.DtOriginal = dbRec.FDtOriginal;
            contacorrente.DtOriginal_date = XDtOriginal;
        }

        if (DateTime.TryParse(dbRec.FData, out DateTime XData))
        {
            contacorrente.Data = dbRec.FData;
            contacorrente.Data_date = XData;
        }

        if (DateTime.TryParse(dbRec.FDataPgto, out DateTime XDataPgto))
        {
            contacorrente.DataPgto = dbRec.FDataPgto;
            contacorrente.DataPgto_date = XDataPgto;
        }

        try
        {
            contacorrente.NroPastaProcessos = dr[DBProcessosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            contacorrente.NomeClientes = dr[DBClientesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return contacorrente;
    }
}