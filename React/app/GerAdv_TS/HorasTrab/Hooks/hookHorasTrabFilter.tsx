// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
import { useState } from 'react';
import InputInput from '@/app/components/Inputs/InputInput';
import InputDate from '@/app/components/Inputs/InputDate';
import InputHora from '@/app/components/Inputs/InputHora';
import InputValor from '@/app/components/Inputs/InputValor';
import InputComboFilterYesNo from '@/app/components/Inputs/InputComboFilterYesNo';
import { FilterHandlers } from '@/app/components/Cruds/GenericFilterDialog';
import { FilterHorasTrab } from '@/app/GerAdv_TS/HorasTrab/Filters/HorasTrab';
import ClientesComboBox from '@/app/GerAdv_TS/Clientes/ComboBox/Clientes';
import AdvogadosComboBox from '@/app/GerAdv_TS/Advogados/ComboBox/Advogados';
import FuncionariosComboBox from '@/app/GerAdv_TS/Funcionarios/ComboBox/Funcionarios';
import ServicosComboBox from '@/app/GerAdv_TS/Servicos/ComboBox/Servicos';
interface UseHorasTrabFilterProps {
  handleFetchWithFilter: (filtro?: FilterHorasTrab | undefined | null) => Promise<void>;
}
interface UseHorasTrabFilterReturn {
  // Estados
  showSearch: boolean;
  windowFilter: FilterHorasTrab;
  setWindowFilter: React.Dispatch<React.SetStateAction<FilterHorasTrab>>;
  // Handlers do Dialog
  handleSearch: () => void;
  handleCloseSearch: () => void;
  handleConfirmSearch: (filter: FilterHorasTrab) => Promise<void>;
  // Render function
  renderInputFilters: (handlers: FilterHandlers<FilterHorasTrab>) => React.ReactNode;
  // Utilitários
  clearFilter: () => void;
  hasActiveFilter: boolean;
}
export const useHorasTrabFilter = ({ handleFetchWithFilter }: UseHorasTrabFilterProps): UseHorasTrabFilterReturn => {
  const [showSearch, setShowSearch] = useState(false);
  const [windowFilter, setWindowFilter] = useState<FilterHorasTrab>({} as FilterHorasTrab);
  // Handlers do Dialog
  const handleSearch = () => {
    setShowSearch(true);
    const filterWildechar = {...windowFilter, wildcardChar: '%' } as FilterHorasTrab;
    setWindowFilter(filterWildechar);
  };
  const handleCloseSearch = () => {
    setShowSearch(false);
  };
  const handleConfirmSearch = async (filter: FilterHorasTrab) => {
    await handleFetchWithFilter(filter);
  };
  // Função para limpar filtros
  const clearFilter = () => {
    setWindowFilter({});
    sessionStorage.removeItem(btoa('HorasTrabFilter'));
    handleFetchWithFilter({});
  };
  // Verificar se há filtros ativos
  const hasActiveFilter = Object.values(windowFilter).some(value =>
    value !== undefined && value !== null && value !== '' && value !== -2147483648
  );
  // Função para renderizar os campos de filtro
  const renderInputFilters = (handlers: FilterHandlers<FilterHorasTrab>) => (
  <>
  <InputInput
  type='text'
  id='idcontatocrm'
  name='idcontatocrm'
  value={handlers.windowFilter?.idcontatocrm ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe IDContatoCRM'
  label='IDContatoCRM (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='idcontatocrm_end'
  name='idcontatocrm_end'
  value={handlers.windowFilter?.idcontatocrm_end ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe IDContatoCRM final'
  label='IDContatoCRM final'
  disabled={handlers.windowFilter?.idcontatocrm ? false: true}
  className='inputIncNome inputSearch'
  />
  <InputComboFilterYesNo
  type='text'
  id='honorario'
  name='honorario'
  value={handlers.windowFilter?.honorario ?? -2147483648}
  onChange={handlers.handleInputChange}
  label='Honorario'
  className='inputSearch inputSearchCheckbox'
  />
  <InputInput
  type='text'
  id='idagenda'
  name='idagenda'
  value={handlers.windowFilter?.idagenda ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe IDAgenda'
  label='IDAgenda (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='idagenda_end'
  name='idagenda_end'
  value={handlers.windowFilter?.idagenda_end ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe IDAgenda final'
  label='IDAgenda final'
  disabled={handlers.windowFilter?.idagenda ? false: true}
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='data'
  name='data'
  value={handlers.windowFilter?.data ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Data'
  label='Data'
  className='inputIncNome inputSearch'
  />
  <ClientesComboBox
  name='cliente'
  dataForm={null}
  value={handlers.windowFilter?.cliente}
  setValue={(e:any) => handlers.handleComboChange(e, 'cliente')}
  className='inputSearch inputSearchComboboxTab'
  label='Clientes'
  />
  <InputInput
  type='text'
  id='status'
  name='status'
  value={handlers.windowFilter?.status ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Status'
  label='Status (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='status_end'
  name='status_end'
  value={handlers.windowFilter?.status_end ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Status final'
  label='Status final'
  disabled={handlers.windowFilter?.status ? false: true}
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='processo'
  name='processo'
  value={handlers.windowFilter?.processo ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Processo'
  label='Processo (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='processo_end'
  name='processo_end'
  value={handlers.windowFilter?.processo_end ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Processo final'
  label='Processo final'
  disabled={handlers.windowFilter?.processo ? false: true}
  className='inputIncNome inputSearch'
  />
  <AdvogadosComboBox
  name='advogado'
  dataForm={null}
  value={handlers.windowFilter?.advogado}
  setValue={(e:any) => handlers.handleComboChange(e, 'advogado')}
  className='inputSearch inputSearchComboboxTab'
  label='Advogados'
  />
  <FuncionariosComboBox
  name='funcionario'
  dataForm={null}
  value={handlers.windowFilter?.funcionario}
  setValue={(e:any) => handlers.handleComboChange(e, 'funcionario')}
  className='inputSearch inputSearchComboboxTab'
  label='Colaborador'
  />
  <InputInput
  type='text'
  id='hrini'
  name='hrini'
  value={handlers.windowFilter?.hrini ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe HrIni'
  label='HrIni'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='hrfim'
  name='hrfim'
  value={handlers.windowFilter?.hrfim ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe HrFim'
  label='HrFim'
  className='inputIncNome inputSearch'
  />
  <InputValor
  type='text'
  id='tempo'
  name='tempo'
  value={handlers.windowFilter?.tempo ?? 0}
  onChange={handlers.handleInputValorChange}
  label='Tempo (igual ou começando com)'
  className='inputSearch inputSearchValor'
  />

  <InputValor
  type='text'
  id='tempo_end'
  name='tempo_end'
  value={handlers.windowFilter?.tempo_end ?? 0}
  disabled={handlers.windowFilter?.tempo != 0 ? false: true}
  onChange={handlers.handleInputValorChange}
  label='Tempo (até)'
  className='inputSearch inputSearchValor inputSearchValorEnd'
  />

  <InputValor
  type='text'
  id='valor'
  name='valor'
  value={handlers.windowFilter?.valor ?? 0}
  onChange={handlers.handleInputValorChange}
  label='Valor (igual ou começando com)'
  className='inputSearch inputSearchValor'
  />

  <InputValor
  type='text'
  id='valor_end'
  name='valor_end'
  value={handlers.windowFilter?.valor_end ?? 0}
  disabled={handlers.windowFilter?.valor != 0 ? false: true}
  onChange={handlers.handleInputValorChange}
  label='Valor (até)'
  className='inputSearch inputSearchValor inputSearchValorEnd'
  />

  <InputInput
  type='text'
  id='obs'
  name='obs'
  value={handlers.windowFilter?.obs ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe OBS'
  label='OBS'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='anexo'
  name='anexo'
  value={handlers.windowFilter?.anexo ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Anexo'
  label='Anexo'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='anexocomp'
  name='anexocomp'
  value={handlers.windowFilter?.anexocomp ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe AnexoComp'
  label='AnexoComp'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='anexounc'
  name='anexounc'
  value={handlers.windowFilter?.anexounc ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe AnexoUNC'
  label='AnexoUNC'
  className='inputIncNome inputSearch'
  />
  <ServicosComboBox
  name='servico'
  dataForm={null}
  value={handlers.windowFilter?.servico}
  setValue={(e:any) => handlers.handleComboChange(e, 'servico')}
  className='inputSearch inputSearchComboboxTab'
  label='Serviços'
  />
  <InputInput
  type='text'
  id='codigo_filtro'
  name='codigo_filtro'
  value={handlers.windowFilter?.codigo_filtro ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código do cadastro'
  label='Código (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='codigo_filtro_end'
  name='codigo_filtro_end'
  value={handlers.windowFilter?.codigo_filtro_end ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código final do cadastro'
  label='Código final'
  disabled={handlers.windowFilter?.codigo_filtro ? false: true}
  className='inputIncNome inputSearch'
  />
</>
);
return {
  // Estados
  showSearch, 
  windowFilter, 
  setWindowFilter, 
  // Handlers
  handleSearch, 
  handleCloseSearch, 
  handleConfirmSearch, 
  // Render function
  renderInputFilters, 
  // Utilitários
  clearFilter, 
  hasActiveFilter
};
};