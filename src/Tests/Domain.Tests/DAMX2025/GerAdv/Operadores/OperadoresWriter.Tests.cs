// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class OperadoresWriterTests
{
    private readonly Mock<IFOperadoresFactory> _mockOperadoresFactory;
    private readonly Mock<FOperadores> _mockFOperadores;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly OperadoresWriter _operadoresWriter;
    public OperadoresWriterTests()
    {
        _mockOperadoresFactory = new Mock<IFOperadoresFactory>();
        _mockFOperadores = new Mock<FOperadores>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _operadoresWriter = new OperadoresWriter(_mockOperadoresFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var operadores = CreateValidOperadoresModel();
        operadores.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockOperadoresFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFOperadores.Object);
        _mockFOperadores.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _operadoresWriter.WriteAsync(operadores, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFOperadores.Object);
        _mockOperadoresFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockOperadoresFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFOperadores.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var operadores = CreateValidOperadoresModel();
        operadores.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockOperadoresFactory.Setup(x => x.CreateFromIdAsync(operadores.Id, _mockConnection.Object)).ReturnsAsync(_mockFOperadores.Object);
        _mockFOperadores.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _operadoresWriter.WriteAsync(operadores, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFOperadores.Object);
        _mockOperadoresFactory.Verify(x => x.CreateFromIdAsync(operadores.Id, _mockConnection.Object), Times.Once);
        _mockOperadoresFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFOperadores.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var operadores = CreateValidOperadoresModel();
        var auditorQuem = 99;
        _mockOperadoresFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFOperadores.Object);
        _mockFOperadores.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _operadoresWriter.WriteAsync(operadores, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFOperadores.Object);
        _mockFOperadores.VerifySet(x => x.FEnviado = operadores.Enviado, Times.Once);
        _mockFOperadores.VerifySet(x => x.FCasa = operadores.Casa, Times.Once);
        _mockFOperadores.VerifySet(x => x.FCasaID = operadores.CasaID, Times.Once);
        _mockFOperadores.VerifySet(x => x.FCasaCodigo = operadores.CasaCodigo, Times.Once);
        _mockFOperadores.VerifySet(x => x.FIsNovo = operadores.IsNovo, Times.Once);
        _mockFOperadores.VerifySet(x => x.FCliente = operadores.Cliente, Times.Once);
        _mockFOperadores.VerifySet(x => x.FGrupo = operadores.Grupo, Times.Once);
        _mockFOperadores.VerifySet(x => x.FNome = operadores.Nome, Times.Once);
        _mockFOperadores.VerifySet(x => x.FEMail = operadores.EMail, Times.Once);
        _mockFOperadores.VerifySet(x => x.FAtivado = operadores.Ativado, Times.Once);
        _mockFOperadores.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var operadores = CreateValidOperadoresModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockOperadoresFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _operadoresWriter.WriteAsync(operadores, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var operadores = CreateValidOperadoresModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockOperadoresFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFOperadores.Object);
        _mockFOperadores.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _operadoresWriter.WriteAsync(operadores, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var operadoresResponse = new OperadoresResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockOperadoresFactory.Setup(x => x.DeleteAsync(operadorId, operadoresResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _operadoresWriter.Delete(operadoresResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockOperadoresFactory.Verify(x => x.DeleteAsync(operadorId, operadoresResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var operadoresResponse = new OperadoresResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockOperadoresFactory.Setup(x => x.DeleteAsync(operadorId, operadoresResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _operadoresWriter.Delete(operadoresResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var operadoresResponse = new OperadoresResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockOperadoresFactory.Setup(x => x.DeleteAsync(operadorId, operadoresResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _operadoresWriter.Delete(operadoresResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new OperadoresWriter(_mockOperadoresFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new OperadoresWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.Operadores CreateValidOperadoresModel()
    {
        return new Models.Operadores
        {
            Id = 0,
            Enviado = false,
            Casa = false,
            CasaID = 1,
            CasaCodigo = 1,
            IsNovo = false,
            Cliente = 1,
            Grupo = 1,
            Nome = "João",
            EMail = "test@email.com",
            Ativado = false
        };
    }
#endregion
}