// 100% auto-generated by Source Genesys Core
// copyright Â© 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming 1
public partial class DBInstancia
{
    public DBInstancia(DataRow? dbRec)
    {
        if (dbRec is null)
            return;
        InitFromRecord(name =>
        {
            try
            {
                return dbRec[name];
            }
            catch
            {
                return DBNull.Value;
            }
        });
    }

    public DBInstancia(SqlDataReader? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do Instancia: {ex.Message}", ex);
        }
    }

    private void InitFromRecord(Func<string, object?> getValue)
    {
        if (DBNull.Value.Equals(getValue(CampoCodigo)))
            return;
        ID = Convert.ToInt32(getValue(CampoCodigo));
        // Checkpoint Carregar 
        try
        {
            if (!DBNull.Value.Equals(getValue(DBInstanciaDicInfo.Acao)))
                m_FAcao = Convert.ToInt32(getValue(DBInstanciaDicInfo.Acao));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBInstanciaDicInfo.Comarca)))
                m_FComarca = Convert.ToInt32(getValue(DBInstanciaDicInfo.Comarca));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBInstanciaDicInfo.Data)))
                m_FData = Convert.ToDateTime(getValue(DBInstanciaDicInfo.Data));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBInstanciaDicInfo.Divisao)))
                m_FDivisao = Convert.ToInt32(getValue(DBInstanciaDicInfo.Divisao));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBInstanciaDicInfo.DtAtu)))
                m_FDtAtu = Convert.ToDateTime(getValue(DBInstanciaDicInfo.DtAtu));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBInstanciaDicInfo.DtCad)))
                m_FDtCad = Convert.ToDateTime(getValue(DBInstanciaDicInfo.DtCad));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBInstanciaDicInfo.Foro)))
                m_FForo = Convert.ToInt32(getValue(DBInstanciaDicInfo.Foro));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBInstanciaDicInfo.InterpusemosRecurso)))
                m_FInterpusemosRecurso = Convert.ToBoolean(getValue(DBInstanciaDicInfo.InterpusemosRecurso));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBInstanciaDicInfo.Julgador)))
                m_FJulgador = Convert.ToInt32(getValue(DBInstanciaDicInfo.Julgador));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBInstanciaDicInfo.LiminarCliente)))
                m_FLiminarCliente = Convert.ToBoolean(getValue(DBInstanciaDicInfo.LiminarCliente));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBInstanciaDicInfo.LiminarConcedida)))
                m_FLiminarConcedida = Convert.ToBoolean(getValue(DBInstanciaDicInfo.LiminarConcedida));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBInstanciaDicInfo.LiminarNegada)))
                m_FLiminarNegada = Convert.ToBoolean(getValue(DBInstanciaDicInfo.LiminarNegada));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBInstanciaDicInfo.LiminarParcial)))
                m_FLiminarParcial = Convert.ToBoolean(getValue(DBInstanciaDicInfo.LiminarParcial));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBInstanciaDicInfo.LiminarPendente)))
                m_FLiminarPendente = Convert.ToBoolean(getValue(DBInstanciaDicInfo.LiminarPendente));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBInstanciaDicInfo.Principal)))
                m_FPrincipal = Convert.ToBoolean(getValue(DBInstanciaDicInfo.Principal));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBInstanciaDicInfo.Processo)))
                m_FProcesso = Convert.ToInt32(getValue(DBInstanciaDicInfo.Processo));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBInstanciaDicInfo.QuemAtu)))
                m_FQuemAtu = Convert.ToInt32(getValue(DBInstanciaDicInfo.QuemAtu));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBInstanciaDicInfo.QuemCad)))
                m_FQuemCad = Convert.ToInt32(getValue(DBInstanciaDicInfo.QuemCad));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBInstanciaDicInfo.StatusResultado)))
                m_FStatusResultado = Convert.ToInt32(getValue(DBInstanciaDicInfo.StatusResultado));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBInstanciaDicInfo.SubDivisao)))
                m_FSubDivisao = Convert.ToInt32(getValue(DBInstanciaDicInfo.SubDivisao));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBInstanciaDicInfo.TipoRecurso)))
                m_FTipoRecurso = Convert.ToInt32(getValue(DBInstanciaDicInfo.TipoRecurso));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBInstanciaDicInfo.Visto)))
                m_FVisto = Convert.ToBoolean(getValue(DBInstanciaDicInfo.Visto));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBInstanciaDicInfo.ZKeyQuando)))
                m_FZKeyQuando = Convert.ToDateTime(getValue(DBInstanciaDicInfo.ZKeyQuando));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBInstanciaDicInfo.ZKeyQuem)))
                m_FZKeyQuem = Convert.ToInt32(getValue(DBInstanciaDicInfo.ZKeyQuem));
        }
        catch
        {
        }

        try
        {
            m_FAccessCode = getValue(DBInstanciaDicInfo.AccessCode)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FGUID = getValue(DBInstanciaDicInfo.GUID)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FLiminarPedida = getValue(DBInstanciaDicInfo.LiminarPedida)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FLiminarResultado = getValue(DBInstanciaDicInfo.LiminarResultado)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FNroAntigo = getValue(DBInstanciaDicInfo.NroAntigo)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FNroProcesso = getValue(DBInstanciaDicInfo.NroProcesso)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FObjeto = getValue(DBInstanciaDicInfo.Objeto)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FZKey = getValue(DBInstanciaDicInfo.ZKey)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FZKeyIA = getValue(DBInstanciaDicInfo.ZKeyIA)?.ToString() ?? string.Empty;
        }
        catch
        {
        }
    }

    public void CarregarDadosBd(DataRow? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do Instancia: {ex.Message}", ex);
        }
    }

    public void CarregarDadosBd(SqlDataReader? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do Instancia: {ex.Message}", ex);
        }
    }
}