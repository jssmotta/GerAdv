// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// ============================================
// ARQUIVO: DBUpdateTests.cs.txt (Principal)
// ============================================
namespace MenphisSI.GerAdv.Tests;
public class DBPreClientesUpdate : IDisposable
{
    private readonly DBPreClientes _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBPreClientesUpdate()
    {
        _instance = new DBPreClientes();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void DefaultConstructor_ShouldCreateInstance_WithDefaultValues()
    {
        // Act
        var preclientes = new DBPreClientes();
        // Assert
        preclientes.Should().NotBeNull();
        preclientes.ITabelaName().Should().Be("PreClientes");
        preclientes.ID.Should().Be(0);
    }

    [Fact]
    public void AllProperties_WithValidValues_ShouldSetCorrectly()
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            FQuemIndicou = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FNomeFantasia = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FClass = "A",
            FInscEst = "AAAAAAAAAAAAAAA",
            FQualificacao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FCNPJ = "93016944000138",
            FCPF = "40392285029",
            FRG = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FObservacao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FEndereco = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FBairro = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FCEP = "AAAAAAAAAA",
            FFax = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FFone = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FHomePage = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FEMail = "menphis@menphis.com.br",
            FAssistido = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FAssRG = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FAssEndereco = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FCNH = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FAssCPF = "40392285029",
        };
        // Assert - All properties should be set preclientes.FQuemIndicou.Should().Be( "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        preclientes.FNome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        preclientes.FNomeFantasia.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        preclientes.FClass.Should().Be("A");
        preclientes.FInscEst.Should().Be("AAAAAAAAAAAAAAA");
        preclientes.FQualificacao.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        preclientes.FCNPJ.Should().Be("93016944000138");
        preclientes.FCPF.Should().Be("40392285029");
        preclientes.FRG.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        preclientes.FObservacao.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        preclientes.FEndereco.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        preclientes.FBairro.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        preclientes.FCEP.Should().Be("AAAAAAAAAA");
        preclientes.FFax.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        preclientes.FFone.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        preclientes.FHomePage.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        preclientes.FEMail.Should().Be("menphis@menphis.com.br");
        preclientes.FAssistido.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        preclientes.FAssRG.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        preclientes.FAssEndereco.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        preclientes.FCNH.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        preclientes.FAssCPF.Should().Be("40392285029");
    }

    [Fact]
    public void StringProperties_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var preclientes = new DBPreClientes();
        var longString = new string ('X', 300);
        preclientes.FQuemIndicou = longString; // MAX: 80
        preclientes.FNome = longString; // MAX: 80
        preclientes.FNomeFantasia = longString; // MAX: 80
        preclientes.FClass = longString; // MAX: 1
        preclientes.FInscEst = longString; // MAX: 15
        preclientes.FQualificacao = longString; // MAX: 100
        preclientes.FRG = longString; // MAX: 30
        preclientes.FEndereco = longString; // MAX: 80
        preclientes.FBairro = longString; // MAX: 50
        preclientes.FCEP = longString; // MAX: 10
        preclientes.FHomePage = longString; // MAX: 60
        preclientes.FAssistido = longString; // MAX: 50
        preclientes.FAssRG = longString; // MAX: 30
        preclientes.FAssEndereco = longString; // MAX: 70
        preclientes.FCNH = longString; // MAX: 100
        // Assert - All properties should be set preclientes.FQuemIndicou.Should().HaveLength(80);
        preclientes.FNome.Should().HaveLength(80);
        preclientes.FNomeFantasia.Should().HaveLength(80);
        preclientes.FClass.Should().HaveLength(1);
        preclientes.FInscEst.Should().HaveLength(15);
        preclientes.FQualificacao.Should().HaveLength(100);
        preclientes.FRG.Should().HaveLength(30);
        preclientes.FEndereco.Should().HaveLength(80);
        preclientes.FBairro.Should().HaveLength(50);
        preclientes.FCEP.Should().HaveLength(10);
        preclientes.FHomePage.Should().HaveLength(60);
        preclientes.FAssistido.Should().HaveLength(50);
        preclientes.FAssRG.Should().HaveLength(30);
        preclientes.FAssEndereco.Should().HaveLength(70);
        preclientes.FCNH.Should().HaveLength(100);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FQuemIndicou_Property_ShouldAcceptValidNames(string QuemIndicou)
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FQuemIndicou = QuemIndicou
        };
        // Assert
        preclientes.FQuemIndicou.Should().Be(QuemIndicou);
    }

    [Fact]
    public void FQuemIndicou_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FQuemIndicou = null
        };
        // Assert
        preclientes.FQuemIndicou.Should().Be(string.Empty);
    }

    [Fact]
    public void FQuemIndicou_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var preclientes = new DBPreClientes();
        var longName = new string ('A', 80 + 10); // Exceeds 80 character limit
        // Act
        preclientes.FQuemIndicou = longName;
        // Assert
        preclientes.FQuemIndicou.Should().HaveLength(80);
    }

    [Fact]
    public void FQuemIndicou_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FQuemIndicou = null;
        // Act
        var result = _instance.FQuemIndicou;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FQuemIndicou_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FQuemIndicou = expectedValue;
        // Act
        var result = _instance.FQuemIndicou;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FQuemIndicou_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFQuemIndicou", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FQuemIndicou = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FQuemIndicou);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FQuemIndicou_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFQuemIndicou", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FQuemIndicou = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FQuemIndicou);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FQuemIndicou_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFQuemIndicou", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FQuemIndicou = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FQuemIndicou);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FQuemIndicou_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFQuemIndicou", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FQuemIndicou = value;
        // Act
        _instance.FQuemIndicou = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FQuemIndicou_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFQuemIndicou", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FQuemIndicou = "Original Value";
        // Act
        _instance.FQuemIndicou = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FQuemIndicou_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFQuemIndicou", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FQuemIndicou = "First Value";
        // Act
        _instance.FQuemIndicou = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FQuemIndicou_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFQuemIndicou", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FQuemIndicou = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FQuemIndicou);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FQuemIndicou_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FQuemIndicou = input;
        // Assert
        Assert.Equal(expected, _instance.FQuemIndicou);
    }

    [Fact]
    public void FQuemIndicou_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFQuemIndicou", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FQuemIndicou = null;
        // Act
        _instance.FQuemIndicou = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FQuemIndicou_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFQuemIndicou", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FQuemIndicou = "Existing Value";
        // Act
        _instance.FQuemIndicou = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("João Silva", "84210454079", "joao@test.com")]
    [InlineData("Maria Santos", "42276926015", "maria@test.com")]
    public void Properties_WithValidData_ShouldSetCorrectly(string nome, string cpf, string email)
    {
        // Arrange
        var preclientes = new DBPreClientes();
        // Act
        preclientes.FNome = nome;
        preclientes.FCPF = cpf;
        preclientes.FEMail = email;
        // Assert
        preclientes.FNome.Should().Be(nome);
        preclientes.FCPF.Should().Be(cpf);
        preclientes.FEMail.Should().Be(email);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNome_Property_ShouldAcceptValidNames(string Nome)
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FNome = Nome
        };
        // Assert
        preclientes.FNome.Should().Be(Nome);
    }

    [Fact]
    public void FNome_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FNome = null
        };
        // Assert
        preclientes.FNome.Should().Be(string.Empty);
    }

    [Fact]
    public void SqlWhereConstructor_WithNullConnection_ShouldNotThrow()
    {
        // Arrange
        var sqlWhere = "cliCodigo = 1";
        // Act & Assert
        var PreClientes = new DBPreClientes(sqlWhere, null);
        PreClientes.Should().NotBeNull();
    }

    [Fact]
    public void ParameterizedConstructor_WithNullConnection_ShouldReturnEarly()
    {
        // Arrange
        var parameters = new List<SqlParameter>();
        var nome = "TesteNome";
        // Act
        var preclientes = new DBPreClientes(parameters, nome, null);
        // Assert
        preclientes.Should().NotBeNull();
        preclientes.ID.Should().Be(0); // Should not have loaded any data
    }

    [Fact]
    public void FNome_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var preclientes = new DBPreClientes();
        var longName = new string ('A', 80 + 10); // Exceeds 80 character limit
        // Act
        preclientes.FNome = longName;
        // Assert
        preclientes.FNome.Should().HaveLength(80);
    }

    [Fact]
    public void FNome_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FNome = null;
        // Act
        var result = _instance.FNome;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FNome_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FNome = expectedValue;
        // Act
        var result = _instance.FNome;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FNome_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNome = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNome = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FNome = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FNome = value;
        // Act
        _instance.FNome = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = "Original Value";
        // Act
        _instance.FNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = "First Value";
        // Act
        _instance.FNome = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNome = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNome_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FNome = input;
        // Assert
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void FNome_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = null;
        // Act
        _instance.FNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = "Existing Value";
        // Act
        _instance.FNome = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNomeFantasia_Property_ShouldAcceptValidNames(string NomeFantasia)
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FNomeFantasia = NomeFantasia
        };
        // Assert
        preclientes.FNomeFantasia.Should().Be(NomeFantasia);
    }

    [Fact]
    public void FNomeFantasia_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FNomeFantasia = null
        };
        // Assert
        preclientes.FNomeFantasia.Should().Be(string.Empty);
    }

    [Fact]
    public void FNomeFantasia_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var preclientes = new DBPreClientes();
        var longName = new string ('A', 80 + 10); // Exceeds 80 character limit
        // Act
        preclientes.FNomeFantasia = longName;
        // Assert
        preclientes.FNomeFantasia.Should().HaveLength(80);
    }

    [Fact]
    public void FNomeFantasia_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FNomeFantasia = null;
        // Act
        var result = _instance.FNomeFantasia;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FNomeFantasia_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FNomeFantasia = expectedValue;
        // Act
        var result = _instance.FNomeFantasia;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FNomeFantasia_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFNomeFantasia", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNomeFantasia = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FNomeFantasia);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNomeFantasia_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFNomeFantasia", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNomeFantasia = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FNomeFantasia);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FNomeFantasia_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFNomeFantasia", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FNomeFantasia = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FNomeFantasia);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNomeFantasia_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFNomeFantasia", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FNomeFantasia = value;
        // Act
        _instance.FNomeFantasia = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNomeFantasia_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFNomeFantasia", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNomeFantasia = "Original Value";
        // Act
        _instance.FNomeFantasia = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNomeFantasia_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFNomeFantasia", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNomeFantasia = "First Value";
        // Act
        _instance.FNomeFantasia = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNomeFantasia_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFNomeFantasia", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNomeFantasia = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FNomeFantasia);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNomeFantasia_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FNomeFantasia = input;
        // Assert
        Assert.Equal(expected, _instance.FNomeFantasia);
    }

    [Fact]
    public void FNomeFantasia_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFNomeFantasia", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNomeFantasia = null;
        // Act
        _instance.FNomeFantasia = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNomeFantasia_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFNomeFantasia", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNomeFantasia = "Existing Value";
        // Act
        _instance.FNomeFantasia = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCc")]
    public void FInscEst_Property_ShouldAcceptValidNames(string InscEst)
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FInscEst = InscEst
        };
        // Assert
        preclientes.FInscEst.Should().Be(InscEst);
    }

    [Fact]
    public void FInscEst_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FInscEst = null
        };
        // Assert
        preclientes.FInscEst.Should().Be(string.Empty);
    }

    [Fact]
    public void FInscEst_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var preclientes = new DBPreClientes();
        var longName = new string ('A', 15 + 10); // Exceeds 15 character limit
        // Act
        preclientes.FInscEst = longName;
        // Assert
        preclientes.FInscEst.Should().HaveLength(15);
    }

    [Fact]
    public void FInscEst_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FInscEst = null;
        // Act
        var result = _instance.FInscEst;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FInscEst_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FInscEst = expectedValue;
        // Act
        var result = _instance.FInscEst;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FInscEst_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFInscEst", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FInscEst = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FInscEst);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FInscEst_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFInscEst", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FInscEst = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FInscEst);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FInscEst_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFInscEst", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAA";
        // Act
        _instance.FInscEst = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FInscEst);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FInscEst_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFInscEst", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FInscEst = value;
        // Act
        _instance.FInscEst = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FInscEst_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFInscEst", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FInscEst = "Original Value";
        // Act
        _instance.FInscEst = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FInscEst_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFInscEst", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FInscEst = "First Value";
        // Act
        _instance.FInscEst = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FInscEst_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFInscEst", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FInscEst = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FInscEst);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAA", "AAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBB  ", "BBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCc", "CCCCCCCCCCCCCc")]
    public void FInscEst_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FInscEst = input;
        // Assert
        Assert.Equal(expected, _instance.FInscEst);
    }

    [Fact]
    public void FInscEst_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFInscEst", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FInscEst = null;
        // Act
        _instance.FInscEst = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FInscEst_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFInscEst", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FInscEst = "Existing Value";
        // Act
        _instance.FInscEst = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FQualificacao_Property_ShouldAcceptValidNames(string Qualificacao)
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FQualificacao = Qualificacao
        };
        // Assert
        preclientes.FQualificacao.Should().Be(Qualificacao);
    }

    [Fact]
    public void FQualificacao_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FQualificacao = null
        };
        // Assert
        preclientes.FQualificacao.Should().Be(string.Empty);
    }

    [Fact]
    public void FQualificacao_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var preclientes = new DBPreClientes();
        var longName = new string ('A', 100 + 10); // Exceeds 100 character limit
        // Act
        preclientes.FQualificacao = longName;
        // Assert
        preclientes.FQualificacao.Should().HaveLength(100);
    }

    [Fact]
    public void FQualificacao_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FQualificacao = null;
        // Act
        var result = _instance.FQualificacao;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FQualificacao_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FQualificacao = expectedValue;
        // Act
        var result = _instance.FQualificacao;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FQualificacao_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFQualificacao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FQualificacao = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FQualificacao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FQualificacao_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFQualificacao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FQualificacao = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FQualificacao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FQualificacao_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFQualificacao", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FQualificacao = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FQualificacao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FQualificacao_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFQualificacao", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FQualificacao = value;
        // Act
        _instance.FQualificacao = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FQualificacao_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFQualificacao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FQualificacao = "Original Value";
        // Act
        _instance.FQualificacao = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FQualificacao_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFQualificacao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FQualificacao = "First Value";
        // Act
        _instance.FQualificacao = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FQualificacao_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFQualificacao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FQualificacao = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FQualificacao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FQualificacao_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FQualificacao = input;
        // Assert
        Assert.Equal(expected, _instance.FQualificacao);
    }

    [Fact]
    public void FQualificacao_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFQualificacao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FQualificacao = null;
        // Act
        _instance.FQualificacao = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FQualificacao_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFQualificacao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FQualificacao = "Existing Value";
        // Act
        _instance.FQualificacao = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FRG_Property_ShouldAcceptValidNames(string RG)
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FRG = RG
        };
        // Assert
        preclientes.FRG.Should().Be(RG);
    }

    [Fact]
    public void FRG_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FRG = null
        };
        // Assert
        preclientes.FRG.Should().Be(string.Empty);
    }

    [Fact]
    public void FRG_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var preclientes = new DBPreClientes();
        var longName = new string ('A', 30 + 10); // Exceeds 30 character limit
        // Act
        preclientes.FRG = longName;
        // Assert
        preclientes.FRG.Should().HaveLength(30);
    }

    [Fact]
    public void FRG_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FRG = null;
        // Act
        var result = _instance.FRG;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FRG_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FRG = expectedValue;
        // Act
        var result = _instance.FRG;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FRG_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FRG = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FRG);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRG_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FRG = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FRG);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FRG_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FRG = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FRG);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRG_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FRG = value;
        // Act
        _instance.FRG = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRG_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRG = "Original Value";
        // Act
        _instance.FRG = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRG_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRG = "First Value";
        // Act
        _instance.FRG = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRG_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FRG = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FRG);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FRG_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FRG = input;
        // Assert
        Assert.Equal(expected, _instance.FRG);
    }

    [Fact]
    public void FRG_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRG = null;
        // Act
        _instance.FRG = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRG_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRG = "Existing Value";
        // Act
        _instance.FRG = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FObservacao_Property_ShouldAcceptValidNames(string Observacao)
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FObservacao = Observacao
        };
        // Assert
        preclientes.FObservacao.Should().Be(Observacao);
    }

    [Fact]
    public void FObservacao_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FObservacao = null
        };
        // Assert
        preclientes.FObservacao.Should().Be(string.Empty);
    }

    [Fact]
    public void FObservacao_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FObservacao = null;
        // Act
        var result = _instance.FObservacao;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FObservacao_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FObservacao = expectedValue;
        // Act
        var result = _instance.FObservacao;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FObservacao_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFObservacao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FObservacao = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FObservacao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObservacao_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFObservacao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FObservacao = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FObservacao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FObservacao_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFObservacao", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  ";
        var expectedValue = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM";
        // Act
        _instance.FObservacao = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FObservacao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObservacao_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFObservacao", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FObservacao = value;
        // Act
        _instance.FObservacao = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObservacao_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFObservacao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObservacao = "Original Value";
        // Act
        _instance.FObservacao = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObservacao_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFObservacao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObservacao = "First Value";
        // Act
        _instance.FObservacao = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObservacao_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFObservacao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FObservacao = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FObservacao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData
    [InlineData
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FObservacao_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FObservacao = input;
        // Assert
        Assert.Equal(expected, _instance.FObservacao);
    }

    [Fact]
    public void FObservacao_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFObservacao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObservacao = null;
        // Act
        _instance.FObservacao = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObservacao_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFObservacao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObservacao = "Existing Value";
        // Act
        _instance.FObservacao = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FEndereco_Property_ShouldAcceptValidNames(string Endereco)
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FEndereco = Endereco
        };
        // Assert
        preclientes.FEndereco.Should().Be(Endereco);
    }

    [Fact]
    public void FEndereco_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FEndereco = null
        };
        // Assert
        preclientes.FEndereco.Should().Be(string.Empty);
    }

    [Fact]
    public void FEndereco_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var preclientes = new DBPreClientes();
        var longName = new string ('A', 80 + 10); // Exceeds 80 character limit
        // Act
        preclientes.FEndereco = longName;
        // Assert
        preclientes.FEndereco.Should().HaveLength(80);
    }

    [Fact]
    public void FEndereco_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FEndereco = null;
        // Act
        var result = _instance.FEndereco;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FEndereco_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FEndereco = expectedValue;
        // Act
        var result = _instance.FEndereco;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FEndereco_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEndereco = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FEndereco);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEndereco = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FEndereco);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FEndereco = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FEndereco);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FEndereco = value;
        // Act
        _instance.FEndereco = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEndereco = "Original Value";
        // Act
        _instance.FEndereco = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEndereco = "First Value";
        // Act
        _instance.FEndereco = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEndereco = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FEndereco);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FEndereco_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FEndereco = input;
        // Assert
        Assert.Equal(expected, _instance.FEndereco);
    }

    [Fact]
    public void FEndereco_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEndereco = null;
        // Act
        _instance.FEndereco = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEndereco = "Existing Value";
        // Act
        _instance.FEndereco = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FBairro_Property_ShouldAcceptValidNames(string Bairro)
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FBairro = Bairro
        };
        // Assert
        preclientes.FBairro.Should().Be(Bairro);
    }

    [Fact]
    public void FBairro_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FBairro = null
        };
        // Assert
        preclientes.FBairro.Should().Be(string.Empty);
    }

    [Fact]
    public void FBairro_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var preclientes = new DBPreClientes();
        var longName = new string ('A', 50 + 10); // Exceeds 50 character limit
        // Act
        preclientes.FBairro = longName;
        // Assert
        preclientes.FBairro.Should().HaveLength(50);
    }

    [Fact]
    public void FBairro_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FBairro = null;
        // Act
        var result = _instance.FBairro;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FBairro_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FBairro = expectedValue;
        // Act
        var result = _instance.FBairro;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FBairro_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FBairro = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FBairro);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairro_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FBairro = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FBairro);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FBairro_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FBairro = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FBairro);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairro_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FBairro = value;
        // Act
        _instance.FBairro = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairro_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FBairro = "Original Value";
        // Act
        _instance.FBairro = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairro_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FBairro = "First Value";
        // Act
        _instance.FBairro = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairro_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FBairro = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FBairro);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FBairro_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FBairro = input;
        // Assert
        Assert.Equal(expected, _instance.FBairro);
    }

    [Fact]
    public void FBairro_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FBairro = null;
        // Act
        _instance.FBairro = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairro_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FBairro = "Existing Value";
        // Act
        _instance.FBairro = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FFax_Property_ShouldAcceptValidNames(string Fax)
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FFax = Fax
        };
        // Assert
        preclientes.FFax.Should().Be(Fax);
    }

    [Fact]
    public void FFax_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FFax = null
        };
        // Assert
        preclientes.FFax.Should().Be(string.Empty);
    }

    [Fact]
    public void FFax_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FFax = null;
        // Act
        var result = _instance.FFax;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FFax_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FFax = expectedValue;
        // Act
        var result = _instance.FFax;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FFax_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFax = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FFax);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFax = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FFax);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FFax_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  ";
        var expectedValue = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM";
        // Act
        _instance.FFax = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FFax);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FFax = value;
        // Act
        _instance.FFax = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFax = "Original Value";
        // Act
        _instance.FFax = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFax = "First Value";
        // Act
        _instance.FFax = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFax = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FFax);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FFax_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FFax = input;
        // Assert
        Assert.Equal(expected, _instance.FFax);
    }

    [Fact]
    public void FFax_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFax = null;
        // Act
        _instance.FFax = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFax = "Existing Value";
        // Act
        _instance.FFax = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FFone_Property_ShouldAcceptValidNames(string Fone)
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FFone = Fone
        };
        // Assert
        preclientes.FFone.Should().Be(Fone);
    }

    [Fact]
    public void FFone_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FFone = null
        };
        // Assert
        preclientes.FFone.Should().Be(string.Empty);
    }

    [Fact]
    public void FFone_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FFone = null;
        // Act
        var result = _instance.FFone;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FFone_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FFone = expectedValue;
        // Act
        var result = _instance.FFone;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FFone_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFone = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FFone);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFone = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FFone);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FFone_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  ";
        var expectedValue = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM";
        // Act
        _instance.FFone = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FFone);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FFone = value;
        // Act
        _instance.FFone = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFone = "Original Value";
        // Act
        _instance.FFone = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFone = "First Value";
        // Act
        _instance.FFone = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFone = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FFone);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData
    [InlineData
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FFone_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FFone = input;
        // Assert
        Assert.Equal(expected, _instance.FFone);
    }

    [Fact]
    public void FFone_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFone = null;
        // Act
        _instance.FFone = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFone = "Existing Value";
        // Act
        _instance.FFone = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FHomePage_Property_ShouldAcceptValidNames(string HomePage)
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FHomePage = HomePage
        };
        // Assert
        preclientes.FHomePage.Should().Be(HomePage);
    }

    [Fact]
    public void FHomePage_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FHomePage = null
        };
        // Assert
        preclientes.FHomePage.Should().Be(string.Empty);
    }

    [Fact]
    public void FHomePage_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var preclientes = new DBPreClientes();
        var longName = new string ('A', 60 + 10); // Exceeds 60 character limit
        // Act
        preclientes.FHomePage = longName;
        // Assert
        preclientes.FHomePage.Should().HaveLength(60);
    }

    [Fact]
    public void FHomePage_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FHomePage = null;
        // Act
        var result = _instance.FHomePage;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FHomePage_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FHomePage = expectedValue;
        // Act
        var result = _instance.FHomePage;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FHomePage_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFHomePage", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FHomePage = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FHomePage);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FHomePage_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFHomePage", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FHomePage = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FHomePage);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FHomePage_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFHomePage", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FHomePage = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FHomePage);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FHomePage_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFHomePage", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FHomePage = value;
        // Act
        _instance.FHomePage = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FHomePage_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFHomePage", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FHomePage = "Original Value";
        // Act
        _instance.FHomePage = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FHomePage_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFHomePage", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FHomePage = "First Value";
        // Act
        _instance.FHomePage = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FHomePage_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFHomePage", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FHomePage = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FHomePage);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FHomePage_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FHomePage = input;
        // Assert
        Assert.Equal(expected, _instance.FHomePage);
    }

    [Fact]
    public void FHomePage_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFHomePage", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FHomePage = null;
        // Act
        _instance.FHomePage = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FHomePage_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFHomePage", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FHomePage = "Existing Value";
        // Act
        _instance.FHomePage = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FAssistido_Property_ShouldAcceptValidNames(string Assistido)
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FAssistido = Assistido
        };
        // Assert
        preclientes.FAssistido.Should().Be(Assistido);
    }

    [Fact]
    public void FAssistido_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FAssistido = null
        };
        // Assert
        preclientes.FAssistido.Should().Be(string.Empty);
    }

    [Fact]
    public void FAssistido_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var preclientes = new DBPreClientes();
        var longName = new string ('A', 50 + 10); // Exceeds 50 character limit
        // Act
        preclientes.FAssistido = longName;
        // Assert
        preclientes.FAssistido.Should().HaveLength(50);
    }

    [Fact]
    public void FAssistido_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FAssistido = null;
        // Act
        var result = _instance.FAssistido;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FAssistido_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FAssistido = expectedValue;
        // Act
        var result = _instance.FAssistido;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FAssistido_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssistido", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAssistido = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FAssistido);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssistido_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssistido", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAssistido = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FAssistido);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FAssistido_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssistido", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FAssistido = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FAssistido);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssistido_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssistido", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FAssistido = value;
        // Act
        _instance.FAssistido = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssistido_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssistido", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAssistido = "Original Value";
        // Act
        _instance.FAssistido = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssistido_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssistido", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAssistido = "First Value";
        // Act
        _instance.FAssistido = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssistido_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssistido", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAssistido = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FAssistido);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FAssistido_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FAssistido = input;
        // Assert
        Assert.Equal(expected, _instance.FAssistido);
    }

    [Fact]
    public void FAssistido_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssistido", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAssistido = null;
        // Act
        _instance.FAssistido = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssistido_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssistido", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAssistido = "Existing Value";
        // Act
        _instance.FAssistido = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FAssRG_Property_ShouldAcceptValidNames(string AssRG)
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FAssRG = AssRG
        };
        // Assert
        preclientes.FAssRG.Should().Be(AssRG);
    }

    [Fact]
    public void FAssRG_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FAssRG = null
        };
        // Assert
        preclientes.FAssRG.Should().Be(string.Empty);
    }

    [Fact]
    public void FAssRG_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var preclientes = new DBPreClientes();
        var longName = new string ('A', 30 + 10); // Exceeds 30 character limit
        // Act
        preclientes.FAssRG = longName;
        // Assert
        preclientes.FAssRG.Should().HaveLength(30);
    }

    [Fact]
    public void FAssRG_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FAssRG = null;
        // Act
        var result = _instance.FAssRG;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FAssRG_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FAssRG = expectedValue;
        // Act
        var result = _instance.FAssRG;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FAssRG_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssRG", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAssRG = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FAssRG);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssRG_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssRG", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAssRG = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FAssRG);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FAssRG_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssRG", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FAssRG = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FAssRG);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssRG_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssRG", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FAssRG = value;
        // Act
        _instance.FAssRG = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssRG_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssRG", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAssRG = "Original Value";
        // Act
        _instance.FAssRG = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssRG_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssRG", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAssRG = "First Value";
        // Act
        _instance.FAssRG = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssRG_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssRG", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAssRG = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FAssRG);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FAssRG_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FAssRG = input;
        // Assert
        Assert.Equal(expected, _instance.FAssRG);
    }

    [Fact]
    public void FAssRG_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssRG", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAssRG = null;
        // Act
        _instance.FAssRG = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssRG_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssRG", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAssRG = "Existing Value";
        // Act
        _instance.FAssRG = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("40392285029")]
    [InlineData("BBBBBBBB")]
    [InlineData("CCCCCCCCCc")]
    public void FAssCPF_Property_ShouldAcceptValidNames(string AssCPF)
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FAssCPF = AssCPF
        };
        // Assert
        preclientes.FAssCPF.Should().Be(AssCPF);
    }

    [Fact]
    public void FAssCPF_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FAssCPF = null
        };
        // Assert
        preclientes.FAssCPF.Should().Be(string.Empty);
    }

    [Fact]
    public void FAssCPF_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var preclientes = new DBPreClientes();
        var longName = new string ('A', 11 + 10); // Exceeds 11 character limit
        // Act
        preclientes.FAssCPF = longName;
        // Assert
        preclientes.FAssCPF.Should().HaveLength(11);
    }

    [Fact]
    public void FAssCPF_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FAssCPF = null;
        // Act
        var result = _instance.FAssCPF;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FAssCPF_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FAssCPF = expectedValue;
        // Act
        var result = _instance.FAssCPF;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FAssCPF_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssCPF", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAssCPF = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FAssCPF);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssCPF_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssCPF", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAssCPF = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FAssCPF);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FAssCPF_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssCPF", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  40392285029  ";
        var expectedValue = "40392285029";
        // Act
        _instance.FAssCPF = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FAssCPF);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssCPF_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssCPF", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FAssCPF = value;
        // Act
        _instance.FAssCPF = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssCPF_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssCPF", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAssCPF = "Original Value";
        // Act
        _instance.FAssCPF = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssCPF_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssCPF", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAssCPF = "First Value";
        // Act
        _instance.FAssCPF = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssCPF_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssCPF", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAssCPF = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FAssCPF);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("40392285029", "40392285029")]
    [InlineData("  BBBBBBBB  ", "BBBBBBBB")]
    [InlineData("CCCCCCCCCc", "CCCCCCCCCc")]
    public void FAssCPF_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FAssCPF = input;
        // Assert
        Assert.Equal(expected, _instance.FAssCPF);
    }

    [Fact]
    public void FAssCPF_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssCPF", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAssCPF = null;
        // Act
        _instance.FAssCPF = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssCPF_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssCPF", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAssCPF = "Existing Value";
        // Act
        _instance.FAssCPF = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FAssEndereco_Property_ShouldAcceptValidNames(string AssEndereco)
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FAssEndereco = AssEndereco
        };
        // Assert
        preclientes.FAssEndereco.Should().Be(AssEndereco);
    }

    [Fact]
    public void FAssEndereco_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FAssEndereco = null
        };
        // Assert
        preclientes.FAssEndereco.Should().Be(string.Empty);
    }

    [Fact]
    public void FAssEndereco_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var preclientes = new DBPreClientes();
        var longName = new string ('A', 70 + 10); // Exceeds 70 character limit
        // Act
        preclientes.FAssEndereco = longName;
        // Assert
        preclientes.FAssEndereco.Should().HaveLength(70);
    }

    [Fact]
    public void FAssEndereco_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FAssEndereco = null;
        // Act
        var result = _instance.FAssEndereco;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FAssEndereco_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FAssEndereco = expectedValue;
        // Act
        var result = _instance.FAssEndereco;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FAssEndereco_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAssEndereco = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FAssEndereco);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssEndereco_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAssEndereco = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FAssEndereco);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FAssEndereco_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FAssEndereco = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FAssEndereco);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssEndereco_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FAssEndereco = value;
        // Act
        _instance.FAssEndereco = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssEndereco_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAssEndereco = "Original Value";
        // Act
        _instance.FAssEndereco = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssEndereco_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAssEndereco = "First Value";
        // Act
        _instance.FAssEndereco = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssEndereco_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAssEndereco = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FAssEndereco);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FAssEndereco_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FAssEndereco = input;
        // Assert
        Assert.Equal(expected, _instance.FAssEndereco);
    }

    [Fact]
    public void FAssEndereco_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAssEndereco = null;
        // Act
        _instance.FAssEndereco = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssEndereco_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFAssEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAssEndereco = "Existing Value";
        // Act
        _instance.FAssEndereco = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FCNH_Property_ShouldAcceptValidNames(string CNH)
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FCNH = CNH
        };
        // Assert
        preclientes.FCNH.Should().Be(CNH);
    }

    [Fact]
    public void FCNH_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var preclientes = new DBPreClientes
        {
            // Act
            FCNH = null
        };
        // Assert
        preclientes.FCNH.Should().Be(string.Empty);
    }

    [Fact]
    public void FCNH_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var preclientes = new DBPreClientes();
        var longName = new string ('A', 100 + 10); // Exceeds 100 character limit
        // Act
        preclientes.FCNH = longName;
        // Assert
        preclientes.FCNH.Should().HaveLength(100);
    }

    [Fact]
    public void FCNH_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FCNH = null;
        // Act
        var result = _instance.FCNH;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FCNH_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FCNH = expectedValue;
        // Act
        var result = _instance.FCNH;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FCNH_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFCNH", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FCNH = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FCNH);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCNH_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFCNH", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FCNH = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FCNH);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FCNH_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFCNH", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FCNH = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FCNH);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCNH_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFCNH", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FCNH = value;
        // Act
        _instance.FCNH = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCNH_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFCNH", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCNH = "Original Value";
        // Act
        _instance.FCNH = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCNH_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFCNH", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCNH = "First Value";
        // Act
        _instance.FCNH = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCNH_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFCNH", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FCNH = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FCNH);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FCNH_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FCNH = input;
        // Assert
        Assert.Equal(expected, _instance.FCNH);
    }

    [Fact]
    public void FCNH_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFCNH", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCNH = null;
        // Act
        _instance.FCNH = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCNH_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPreClientes).GetField("pFldFCNH", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCNH = "Existing Value";
        // Act
        _instance.FCNH = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void TabelaNome_Property_ShouldReturnCorrectTableName()
    {
        // Arrange
        var preclientes = new DBPreClientes();
        // Act & Assert
        preclientes.TabelaNome.Should().Be("PreClientes");
    }

    public virtual void Dispose()
    {
    // Cleanup resources if needed
    }
}