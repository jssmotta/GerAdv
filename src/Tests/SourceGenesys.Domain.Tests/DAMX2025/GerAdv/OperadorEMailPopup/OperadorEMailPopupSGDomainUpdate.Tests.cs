// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// ============================================
// ARQUIVO: DBUpdateTests.cs.txt (Principal)
// ============================================
namespace MenphisSI.GerAdv.Tests;
public class DBOperadorEMailPopupUpdate : IDisposable
{
    private readonly DBOperadorEMailPopup _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBOperadorEMailPopupUpdate()
    {
        _instance = new DBOperadorEMailPopup();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void DefaultConstructor_ShouldCreateInstance_WithDefaultValues()
    {
        // Act
        var operadoremailpopup = new DBOperadorEMailPopup();
        // Assert
        operadoremailpopup.Should().NotBeNull();
        operadoremailpopup.ITabelaName().Should().Be("OperadorEMailPopup");
        operadoremailpopup.ID.Should().Be(0);
    }

    [Fact]
    public void AllProperties_WithValidValues_ShouldSetCorrectly()
    {
        // Arrange
        var operadoremailpopup = new DBOperadorEMailPopup
        {
            FNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FSenha = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FSMTP = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FPOP3 = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FDescricao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FUsuario = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FGUID = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FAssinatura = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FSenha
        };
        // Assert - All properties should be set operadoremailpopup.FNome.Should().Be( "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        operadoremailpopup.FSenha.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        operadoremailpopup.FSMTP.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        operadoremailpopup.FPOP3.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        operadoremailpopup.FDescricao.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        operadoremailpopup.FUsuario.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        operadoremailpopup.FGUID.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        operadoremailpopup.FAssinatura.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        operadoremailpopup.FSenha256.Should().Be
    }

    [Fact]
    public void StringProperties_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var operadoremailpopup = new DBOperadorEMailPopup();
        var longString = new string ('X', 300);
        operadoremailpopup.FNome = longString; // MAX: 80
        operadoremailpopup.FSenha = longString; // MAX: 50
        operadoremailpopup.FSMTP = longString; // MAX: 255
        operadoremailpopup.FPOP3 = longString; // MAX: 255
        operadoremailpopup.FDescricao = longString; // MAX: 100
        operadoremailpopup.FUsuario = longString; // MAX: 50
        operadoremailpopup.FGUID = longString; // MAX: 100
        operadoremailpopup.FSenha256 = longString; // MAX: 4000
        // Assert - All properties should be set operadoremailpopup.FNome.Should().HaveLength(80);
        operadoremailpopup.FSenha.Should().HaveLength(50);
        operadoremailpopup.FSMTP.Should().HaveLength(255);
        operadoremailpopup.FPOP3.Should().HaveLength(255);
        operadoremailpopup.FDescricao.Should().HaveLength(100);
        operadoremailpopup.FUsuario.Should().HaveLength(50);
        operadoremailpopup.FGUID.Should().HaveLength(100);
        operadoremailpopup.FSenha256.Should().HaveLength(300);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNome_Property_ShouldAcceptValidNames(string Nome)
    {
        // Arrange
        var operadoremailpopup = new DBOperadorEMailPopup
        {
            // Act
            FNome = Nome
        };
        // Assert
        operadoremailpopup.FNome.Should().Be(Nome);
    }

    [Fact]
    public void FNome_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var operadoremailpopup = new DBOperadorEMailPopup
        {
            // Act
            FNome = null
        };
        // Assert
        operadoremailpopup.FNome.Should().Be(string.Empty);
    }

    [Fact]
    public void SqlWhereConstructor_WithNullConnection_ShouldNotThrow()
    {
        // Arrange
        var sqlWhere = "oepCodigo = 1";
        // Act & Assert
        var OperadorEMailPopup = new DBOperadorEMailPopup(sqlWhere, null);
        OperadorEMailPopup.Should().NotBeNull();
    }

    [Fact]
    public void ParameterizedConstructor_WithNullConnection_ShouldReturnEarly()
    {
        // Arrange
        var parameters = new List<SqlParameter>();
        var nome = "TesteNome";
        // Act
        var operadoremailpopup = new DBOperadorEMailPopup(parameters, nome, null);
        // Assert
        operadoremailpopup.Should().NotBeNull();
        operadoremailpopup.ID.Should().Be(0); // Should not have loaded any data
    }

    [Fact]
    public void FNome_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var operadoremailpopup = new DBOperadorEMailPopup();
        var longName = new string ('A', 80 + 10); // Exceeds 80 character limit
        // Act
        operadoremailpopup.FNome = longName;
        // Assert
        operadoremailpopup.FNome.Should().HaveLength(80);
    }

    [Fact]
    public void FNome_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FNome = null;
        // Act
        var result = _instance.FNome;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FNome_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FNome = expectedValue;
        // Act
        var result = _instance.FNome;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FNome_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNome = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNome = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FNome = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FNome = value;
        // Act
        _instance.FNome = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = "Original Value";
        // Act
        _instance.FNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = "First Value";
        // Act
        _instance.FNome = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNome = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNome_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FNome = input;
        // Assert
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void FNome_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = null;
        // Act
        _instance.FNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = "Existing Value";
        // Act
        _instance.FNome = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FSenha_Property_ShouldAcceptValidNames(string Senha)
    {
        // Arrange
        var operadoremailpopup = new DBOperadorEMailPopup
        {
            // Act
            FSenha = Senha
        };
        // Assert
        operadoremailpopup.FSenha.Should().Be(Senha);
    }

    [Fact]
    public void FSenha_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var operadoremailpopup = new DBOperadorEMailPopup
        {
            // Act
            FSenha = null
        };
        // Assert
        operadoremailpopup.FSenha.Should().Be(string.Empty);
    }

    [Fact]
    public void FSenha_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var operadoremailpopup = new DBOperadorEMailPopup();
        var longName = new string ('A', 50 + 10); // Exceeds 50 character limit
        // Act
        operadoremailpopup.FSenha = longName;
        // Assert
        operadoremailpopup.FSenha.Should().HaveLength(50);
    }

    [Fact]
    public void FSenha_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FSenha = null;
        // Act
        var result = _instance.FSenha;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FSenha_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FSenha = expectedValue;
        // Act
        var result = _instance.FSenha;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FSenha_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFSenha", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FSenha = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FSenha);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSenha_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFSenha", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FSenha = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FSenha);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FSenha_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFSenha", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FSenha = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FSenha);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSenha_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFSenha", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FSenha = value;
        // Act
        _instance.FSenha = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSenha_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFSenha", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSenha = "Original Value";
        // Act
        _instance.FSenha = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSenha_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFSenha", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSenha = "First Value";
        // Act
        _instance.FSenha = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSenha_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFSenha", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FSenha = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FSenha);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FSenha_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FSenha = input;
        // Assert
        Assert.Equal(expected, _instance.FSenha);
    }

    [Fact]
    public void FSenha_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFSenha", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSenha = null;
        // Act
        _instance.FSenha = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSenha_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFSenha", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSenha = "Existing Value";
        // Act
        _instance.FSenha = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FSMTP_Property_ShouldAcceptValidNames(string SMTP)
    {
        // Arrange
        var operadoremailpopup = new DBOperadorEMailPopup
        {
            // Act
            FSMTP = SMTP
        };
        // Assert
        operadoremailpopup.FSMTP.Should().Be(SMTP);
    }

    [Fact]
    public void FSMTP_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var operadoremailpopup = new DBOperadorEMailPopup
        {
            // Act
            FSMTP = null
        };
        // Assert
        operadoremailpopup.FSMTP.Should().Be(string.Empty);
    }

    [Fact]
    public void FSMTP_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var operadoremailpopup = new DBOperadorEMailPopup();
        var longName = new string ('A', 255 + 10); // Exceeds 255 character limit
        // Act
        operadoremailpopup.FSMTP = longName;
        // Assert
        operadoremailpopup.FSMTP.Should().HaveLength(255);
    }

    [Fact]
    public void FSMTP_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FSMTP = null;
        // Act
        var result = _instance.FSMTP;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FSMTP_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FSMTP = expectedValue;
        // Act
        var result = _instance.FSMTP;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FSMTP_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFSMTP", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FSMTP = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FSMTP);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSMTP_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFSMTP", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FSMTP = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FSMTP);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FSMTP_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFSMTP", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FSMTP = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FSMTP);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSMTP_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFSMTP", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FSMTP = value;
        // Act
        _instance.FSMTP = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSMTP_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFSMTP", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSMTP = "Original Value";
        // Act
        _instance.FSMTP = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSMTP_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFSMTP", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSMTP = "First Value";
        // Act
        _instance.FSMTP = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSMTP_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFSMTP", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FSMTP = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FSMTP);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FSMTP_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FSMTP = input;
        // Assert
        Assert.Equal(expected, _instance.FSMTP);
    }

    [Fact]
    public void FSMTP_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFSMTP", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSMTP = null;
        // Act
        _instance.FSMTP = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSMTP_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFSMTP", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSMTP = "Existing Value";
        // Act
        _instance.FSMTP = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FPOP3_Property_ShouldAcceptValidNames(string POP3)
    {
        // Arrange
        var operadoremailpopup = new DBOperadorEMailPopup
        {
            // Act
            FPOP3 = POP3
        };
        // Assert
        operadoremailpopup.FPOP3.Should().Be(POP3);
    }

    [Fact]
    public void FPOP3_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var operadoremailpopup = new DBOperadorEMailPopup
        {
            // Act
            FPOP3 = null
        };
        // Assert
        operadoremailpopup.FPOP3.Should().Be(string.Empty);
    }

    [Fact]
    public void FPOP3_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var operadoremailpopup = new DBOperadorEMailPopup();
        var longName = new string ('A', 255 + 10); // Exceeds 255 character limit
        // Act
        operadoremailpopup.FPOP3 = longName;
        // Assert
        operadoremailpopup.FPOP3.Should().HaveLength(255);
    }

    [Fact]
    public void FPOP3_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FPOP3 = null;
        // Act
        var result = _instance.FPOP3;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FPOP3_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FPOP3 = expectedValue;
        // Act
        var result = _instance.FPOP3;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FPOP3_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFPOP3", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FPOP3 = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FPOP3);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPOP3_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFPOP3", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FPOP3 = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FPOP3);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FPOP3_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFPOP3", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FPOP3 = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FPOP3);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPOP3_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFPOP3", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FPOP3 = value;
        // Act
        _instance.FPOP3 = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPOP3_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFPOP3", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPOP3 = "Original Value";
        // Act
        _instance.FPOP3 = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPOP3_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFPOP3", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPOP3 = "First Value";
        // Act
        _instance.FPOP3 = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPOP3_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFPOP3", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FPOP3 = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FPOP3);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FPOP3_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FPOP3 = input;
        // Assert
        Assert.Equal(expected, _instance.FPOP3);
    }

    [Fact]
    public void FPOP3_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFPOP3", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPOP3 = null;
        // Act
        _instance.FPOP3 = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPOP3_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFPOP3", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPOP3 = "Existing Value";
        // Act
        _instance.FPOP3 = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FDescricao_Property_ShouldAcceptValidNames(string Descricao)
    {
        // Arrange
        var operadoremailpopup = new DBOperadorEMailPopup
        {
            // Act
            FDescricao = Descricao
        };
        // Assert
        operadoremailpopup.FDescricao.Should().Be(Descricao);
    }

    [Fact]
    public void FDescricao_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var operadoremailpopup = new DBOperadorEMailPopup
        {
            // Act
            FDescricao = null
        };
        // Assert
        operadoremailpopup.FDescricao.Should().Be(string.Empty);
    }

    [Fact]
    public void FDescricao_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var operadoremailpopup = new DBOperadorEMailPopup();
        var longName = new string ('A', 100 + 10); // Exceeds 100 character limit
        // Act
        operadoremailpopup.FDescricao = longName;
        // Assert
        operadoremailpopup.FDescricao.Should().HaveLength(100);
    }

    [Fact]
    public void FDescricao_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FDescricao = null;
        // Act
        var result = _instance.FDescricao;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FDescricao_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FDescricao = expectedValue;
        // Act
        var result = _instance.FDescricao;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FDescricao_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFDescricao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FDescricao = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FDescricao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FDescricao_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFDescricao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FDescricao = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FDescricao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FDescricao_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFDescricao", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FDescricao = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FDescricao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FDescricao_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFDescricao", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FDescricao = value;
        // Act
        _instance.FDescricao = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FDescricao_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFDescricao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FDescricao = "Original Value";
        // Act
        _instance.FDescricao = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FDescricao_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFDescricao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FDescricao = "First Value";
        // Act
        _instance.FDescricao = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FDescricao_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFDescricao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FDescricao = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FDescricao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FDescricao_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FDescricao = input;
        // Assert
        Assert.Equal(expected, _instance.FDescricao);
    }

    [Fact]
    public void FDescricao_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFDescricao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FDescricao = null;
        // Act
        _instance.FDescricao = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FDescricao_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFDescricao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FDescricao = "Existing Value";
        // Act
        _instance.FDescricao = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FUsuario_Property_ShouldAcceptValidNames(string Usuario)
    {
        // Arrange
        var operadoremailpopup = new DBOperadorEMailPopup
        {
            // Act
            FUsuario = Usuario
        };
        // Assert
        operadoremailpopup.FUsuario.Should().Be(Usuario);
    }

    [Fact]
    public void FUsuario_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var operadoremailpopup = new DBOperadorEMailPopup
        {
            // Act
            FUsuario = null
        };
        // Assert
        operadoremailpopup.FUsuario.Should().Be(string.Empty);
    }

    [Fact]
    public void FUsuario_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var operadoremailpopup = new DBOperadorEMailPopup();
        var longName = new string ('A', 50 + 10); // Exceeds 50 character limit
        // Act
        operadoremailpopup.FUsuario = longName;
        // Assert
        operadoremailpopup.FUsuario.Should().HaveLength(50);
    }

    [Fact]
    public void FUsuario_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FUsuario = null;
        // Act
        var result = _instance.FUsuario;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FUsuario_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FUsuario = expectedValue;
        // Act
        var result = _instance.FUsuario;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FUsuario_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFUsuario", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FUsuario = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FUsuario);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FUsuario_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFUsuario", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FUsuario = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FUsuario);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FUsuario_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFUsuario", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FUsuario = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FUsuario);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FUsuario_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFUsuario", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FUsuario = value;
        // Act
        _instance.FUsuario = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FUsuario_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFUsuario", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FUsuario = "Original Value";
        // Act
        _instance.FUsuario = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FUsuario_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFUsuario", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FUsuario = "First Value";
        // Act
        _instance.FUsuario = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FUsuario_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFUsuario", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FUsuario = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FUsuario);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FUsuario_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FUsuario = input;
        // Assert
        Assert.Equal(expected, _instance.FUsuario);
    }

    [Fact]
    public void FUsuario_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFUsuario", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FUsuario = null;
        // Act
        _instance.FUsuario = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FUsuario_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFUsuario", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FUsuario = "Existing Value";
        // Act
        _instance.FUsuario = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FAssinatura_Property_ShouldAcceptValidNames(string Assinatura)
    {
        // Arrange
        var operadoremailpopup = new DBOperadorEMailPopup
        {
            // Act
            FAssinatura = Assinatura
        };
        // Assert
        operadoremailpopup.FAssinatura.Should().Be(Assinatura);
    }

    [Fact]
    public void FAssinatura_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var operadoremailpopup = new DBOperadorEMailPopup
        {
            // Act
            FAssinatura = null
        };
        // Assert
        operadoremailpopup.FAssinatura.Should().Be(string.Empty);
    }

    [Fact]
    public void FAssinatura_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FAssinatura = null;
        // Act
        var result = _instance.FAssinatura;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FAssinatura_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FAssinatura = expectedValue;
        // Act
        var result = _instance.FAssinatura;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FAssinatura_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFAssinatura", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAssinatura = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FAssinatura);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssinatura_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFAssinatura", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAssinatura = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FAssinatura);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FAssinatura_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFAssinatura", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  ";
        var expectedValue = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM";
        // Act
        _instance.FAssinatura = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FAssinatura);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssinatura_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFAssinatura", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FAssinatura = value;
        // Act
        _instance.FAssinatura = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssinatura_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFAssinatura", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAssinatura = "Original Value";
        // Act
        _instance.FAssinatura = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssinatura_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFAssinatura", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAssinatura = "First Value";
        // Act
        _instance.FAssinatura = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssinatura_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFAssinatura", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAssinatura = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FAssinatura);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData
    [InlineData
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FAssinatura_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FAssinatura = input;
        // Assert
        Assert.Equal(expected, _instance.FAssinatura);
    }

    [Fact]
    public void FAssinatura_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFAssinatura", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAssinatura = null;
        // Act
        _instance.FAssinatura = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAssinatura_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOperadorEMailPopup).GetField("pFldFAssinatura", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAssinatura = "Existing Value";
        // Act
        _instance.FAssinatura = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

#region Testes de GUID
    [Fact]
    public void GUID_DefaultValue_ShouldBeEmpty()
    {
        Assert.Equal(string.Empty, _instance.FGUID);
    }

    [Fact]
    public void GUID_SetValidGUID_ShouldStore()
    {
        var guid = Guid.NewGuid().ToString();
        _instance.FGUID = guid;
        Assert.Equal(guid, _instance.FGUID);
    }

#endregion
    [Fact]
    public void TabelaNome_Property_ShouldReturnCorrectTableName()
    {
        // Arrange
        var operadoremailpopup = new DBOperadorEMailPopup();
        // Act & Assert
        operadoremailpopup.TabelaNome.Should().Be("OperadorEMailPopup");
    }

    public virtual void Dispose()
    {
    // Cleanup resources if needed
    }
}