// 100% auto-generated by Source Genesys WebApi Front & Back Creator
                     // copyright © 2000-2025 Menphis - Sistemas Inteligentes
                     // This file is part of the Source Genesys project                     
                    import { useState } from 'react';
import InputInput from '@/app/components/Inputs/InputInput';
import InputDate from '@/app/components/Inputs/InputDate';
import InputHora from '@/app/components/Inputs/InputHora';
import InputValor from '@/app/components/Inputs/InputValor';
import InputComboFilterYesNo from '@/app/components/Inputs/InputComboFilterYesNo';
import { FilterHandlers } from '@/app/components/Cruds/GenericFilterDialog';
import { FilterOperadorEMailPopup } from '@/app/GerAdv_TS/OperadorEMailPopup/Filters/OperadorEMailPopup';
import OperadorComboBox from '@/app/GerAdv_TS/Operador/ComboBox/Operador';
interface UseOperadorEMailPopupFilterProps {
  handleFetchWithFilter: (filtro?: FilterOperadorEMailPopup | undefined | null) => Promise<void>;
}
interface UseOperadorEMailPopupFilterReturn {
  // Estados
  showSearch: boolean;
  windowFilter: FilterOperadorEMailPopup;
  setWindowFilter: React.Dispatch<React.SetStateAction<FilterOperadorEMailPopup>>;
  // Handlers do Dialog
  handleSearch: () => void;
  handleCloseSearch: () => void;
  handleConfirmSearch: (filter: FilterOperadorEMailPopup) => Promise<void>;
  // Render function
  renderInputFilters: (handlers: FilterHandlers<FilterOperadorEMailPopup>) => React.ReactNode;
  // Utilitários
  clearFilter: () => void;
  hasActiveFilter: boolean;
}
export const useOperadorEMailPopupFilter = ({ handleFetchWithFilter }: UseOperadorEMailPopupFilterProps): UseOperadorEMailPopupFilterReturn => {
  const [showSearch, setShowSearch] = useState(false);
  const [windowFilter, setWindowFilter] = useState<FilterOperadorEMailPopup>({} as FilterOperadorEMailPopup);
  // Handlers do Dialog
  const handleSearch = () => {
    setShowSearch(true);
    const filterWildechar = {...windowFilter, wildcardChar: '%' } as FilterOperadorEMailPopup;
    setWindowFilter(filterWildechar);
  };
  const handleCloseSearch = () => {
    setShowSearch(false);
  };
  const handleConfirmSearch = async (filter: FilterOperadorEMailPopup) => {
    await handleFetchWithFilter(filter);
  };
  // Função para limpar filtros
  const clearFilter = () => {
    setWindowFilter({});
    sessionStorage.removeItem(btoa('OperadorEMailPopupFilter'));
    handleFetchWithFilter({});
  };
  // Verificar se há filtros ativos
  const hasActiveFilter = Object.values(windowFilter).some(value =>
    value !== undefined && value !== null && value !== '' && value !== -2147483648
  );
  // Função para renderizar os campos de filtro
  const renderInputFilters = (handlers: FilterHandlers<FilterOperadorEMailPopup>) => (
  <>
  <OperadorComboBox
  name='operador'
  dataForm={null}
  value={handlers.windowFilter?.operador}
  setValue={(e:any) => handlers.handleComboChange(e, 'operador')}
  className='inputSearch inputSearchComboboxTab'
  label='Operador'
  />
  <InputInput
  type='text'
  id='nome'
  name='nome'
  value={handlers.windowFilter?.nome ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Nome'
  label='Nome'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='senha'
  name='senha'
  value={handlers.windowFilter?.senha ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Senha'
  label='Senha'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='smtp'
  name='smtp'
  value={handlers.windowFilter?.smtp ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe SMTP'
  label='SMTP'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='pop3'
  name='pop3'
  value={handlers.windowFilter?.pop3 ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe POP3'
  label='POP3'
  className='inputIncNome inputSearch'
  />
  <InputComboFilterYesNo
  type='text'
  id='autenticacao'
  name='autenticacao'
  value={handlers.windowFilter?.autenticacao ?? -2147483648}
  onChange={handlers.handleInputChange}
  label='Autenticacao'
  className='inputSearch inputSearchCheckbox'
  />
  <InputInput
  type='text'
  id='descricao'
  name='descricao'
  value={handlers.windowFilter?.descricao ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Descricao'
  label='Descricao'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='usuario'
  name='usuario'
  value={handlers.windowFilter?.usuario ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Usuario'
  label='Usuario'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='portasmtp'
  name='portasmtp'
  value={handlers.windowFilter?.portasmtp ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe PortaSmtp'
  label='PortaSmtp (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='portasmtp_end'
  name='portasmtp_end'
  value={handlers.windowFilter?.portasmtp_end ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe PortaSmtp final'
  label='PortaSmtp final'
  disabled={handlers.windowFilter?.portasmtp ? false: true}
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='portapop3'
  name='portapop3'
  value={handlers.windowFilter?.portapop3 ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe PortaPop3'
  label='PortaPop3 (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='portapop3_end'
  name='portapop3_end'
  value={handlers.windowFilter?.portapop3_end ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe PortaPop3 final'
  label='PortaPop3 final'
  disabled={handlers.windowFilter?.portapop3 ? false: true}
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='assinatura'
  name='assinatura'
  value={handlers.windowFilter?.assinatura ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Assinatura'
  label='Assinatura'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='senha256'
  name='senha256'
  value={handlers.windowFilter?.senha256 ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Senha256'
  label='Senha256'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='codigo_filtro'
  name='codigo_filtro'
  value={handlers.windowFilter?.codigo_filtro ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código do cadastro'
  label='Código (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='codigo_filtro_end'
  name='codigo_filtro_end'
  value={handlers.windowFilter?.codigo_filtro_end ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código final do cadastro'
  label='Código final'
  disabled={handlers.windowFilter?.codigo_filtro ? false: true}
  className='inputIncNome inputSearch'
  />
</>
);
return {
  // Estados
  showSearch, 
  windowFilter, 
  setWindowFilter, 
  // Handlers
  handleSearch, 
  handleCloseSearch, 
  handleConfirmSearch, 
  // Render function
  renderInputFilters, 
  // Utilitários
  clearFilter, 
  hasActiveFilter
};
};