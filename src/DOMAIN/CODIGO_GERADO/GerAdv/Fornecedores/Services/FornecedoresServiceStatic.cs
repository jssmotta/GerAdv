// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class FornecedoresService
{
    public (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterFornecedores? filtro)
    {
        if (filtro == null)
            return null;
        var parameters = new List<SqlParameter>();
        if (filtro.Grupo != int.MinValue)
        {
            parameters.Add(new($"@{(DBFornecedoresDicInfo.Grupo)}", filtro.Grupo));
            if (filtro.Grupo_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBFornecedoresDicInfo.Grupo)}_end", filtro.Grupo_end));
            }
        }

        if (!string.IsNullOrWhiteSpace(filtro.Nome))
        {
            parameters.Add(new($"@{(DBFornecedoresDicInfo.Nome)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Nome)));
        }

        if (filtro.SubGrupo != int.MinValue)
        {
            parameters.Add(new($"@{(DBFornecedoresDicInfo.SubGrupo)}", filtro.SubGrupo));
            if (filtro.SubGrupo_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBFornecedoresDicInfo.SubGrupo)}_end", filtro.SubGrupo_end));
            }
        }

        if (filtro.Tipo != int.MinValue)
        {
            parameters.Add(new($"@{(DBFornecedoresDicInfo.Tipo)}", filtro.Tipo));
        }

        if (filtro.Sexo != int.MinValue)
        {
            parameters.Add(new($"@{(DBFornecedoresDicInfo.Sexo)}", filtro.Sexo));
        }

        if (!string.IsNullOrWhiteSpace(filtro.CNPJ))
        {
            parameters.Add(new($"@{(DBFornecedoresDicInfo.CNPJ)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.CNPJ)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.InscEst))
        {
            parameters.Add(new($"@{(DBFornecedoresDicInfo.InscEst)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.InscEst)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.CPF))
        {
            parameters.Add(new($"@{(DBFornecedoresDicInfo.CPF)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.CPF)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.RG))
        {
            parameters.Add(new($"@{(DBFornecedoresDicInfo.RG)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.RG)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Endereco))
        {
            parameters.Add(new($"@{(DBFornecedoresDicInfo.Endereco)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Endereco)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Bairro))
        {
            parameters.Add(new($"@{(DBFornecedoresDicInfo.Bairro)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Bairro)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.CEP))
        {
            parameters.Add(new($"@{(DBFornecedoresDicInfo.CEP)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.CEP)));
        }

        if (filtro.Cidade != int.MinValue)
        {
            parameters.Add(new($"@{(DBFornecedoresDicInfo.Cidade)}", filtro.Cidade));
            if (filtro.Cidade_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBFornecedoresDicInfo.Cidade)}_end", filtro.Cidade_end));
            }
        }

        if (!string.IsNullOrWhiteSpace(filtro.Fone))
        {
            parameters.Add(new($"@{(DBFornecedoresDicInfo.Fone)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Fone)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Fax))
        {
            parameters.Add(new($"@{(DBFornecedoresDicInfo.Fax)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Fax)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Email))
        {
            parameters.Add(new($"@{(DBFornecedoresDicInfo.Email)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Email)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Site))
        {
            parameters.Add(new($"@{(DBFornecedoresDicInfo.Site)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Site)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Obs))
        {
            parameters.Add(new($"@{(DBFornecedoresDicInfo.Obs)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Obs)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Produtos))
        {
            parameters.Add(new($"@{(DBFornecedoresDicInfo.Produtos)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Produtos)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Contatos))
        {
            parameters.Add(new($"@{(DBFornecedoresDicInfo.Contatos)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Contatos)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.GUID))
        {
            parameters.Add(new($"@{(DBFornecedoresDicInfo.GUID)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.GUID)));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{(DBFornecedoresDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
            if (filtro.Codigo_filtro_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBFornecedoresDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
            }
        }

        if (filtro.LogicalOperator.IsEmptyX() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        if (!(filtro.Grupo.IsEmptyX()) && filtro.Grupo_end.IsEmptyX())
        {
            cWhere.Append(filtro.Grupo.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBFornecedoresDicInfo.PTabelaNome}].[{DBFornecedoresDicInfo.Grupo}] = @{(DBFornecedoresDicInfo.Grupo)}");
        }
        else if (!(filtro.Grupo.IsEmptyX()) && !(filtro.Grupo_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBFornecedoresDicInfo.PTabelaNome}].{DBFornecedoresDicInfo.Grupo} BETWEEN @{(DBFornecedoresDicInfo.Grupo)} AND @{(DBFornecedoresDicInfo.Grupo)}_end");
        }

        cWhere.Append(filtro.Nome.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBFornecedoresDicInfo.PTabelaNome}].[{DBFornecedoresDicInfo.Nome}]  {DevourerConsts.MsiCollate} like @{(DBFornecedoresDicInfo.Nome)}");
        if (!(filtro.SubGrupo.IsEmptyX()) && filtro.SubGrupo_end.IsEmptyX())
        {
            cWhere.Append(filtro.SubGrupo.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBFornecedoresDicInfo.PTabelaNome}].[{DBFornecedoresDicInfo.SubGrupo}] = @{(DBFornecedoresDicInfo.SubGrupo)}");
        }
        else if (!(filtro.SubGrupo.IsEmptyX()) && !(filtro.SubGrupo_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBFornecedoresDicInfo.PTabelaNome}].{DBFornecedoresDicInfo.SubGrupo} BETWEEN @{(DBFornecedoresDicInfo.SubGrupo)} AND @{(DBFornecedoresDicInfo.SubGrupo)}_end");
        }

        cWhere.Append(filtro.Tipo == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBFornecedoresDicInfo.PTabelaNome}].[{DBFornecedoresDicInfo.Tipo}] = @{(DBFornecedoresDicInfo.Tipo)}");
        cWhere.Append(filtro.Sexo == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBFornecedoresDicInfo.PTabelaNome}].[{DBFornecedoresDicInfo.Sexo}] = @{(DBFornecedoresDicInfo.Sexo)}");
        cWhere.Append(filtro.CNPJ.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBFornecedoresDicInfo.PTabelaNome}].[{DBFornecedoresDicInfo.CNPJ}]  {DevourerConsts.MsiCollate} like @{(DBFornecedoresDicInfo.CNPJ)}");
        cWhere.Append(filtro.InscEst.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBFornecedoresDicInfo.PTabelaNome}].[{DBFornecedoresDicInfo.InscEst}]  {DevourerConsts.MsiCollate} like @{(DBFornecedoresDicInfo.InscEst)}");
        cWhere.Append(filtro.CPF.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBFornecedoresDicInfo.PTabelaNome}].[{DBFornecedoresDicInfo.CPF}]  {DevourerConsts.MsiCollate} like @{(DBFornecedoresDicInfo.CPF)}");
        cWhere.Append(filtro.RG.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBFornecedoresDicInfo.PTabelaNome}].[{DBFornecedoresDicInfo.RG}]  {DevourerConsts.MsiCollate} like @{(DBFornecedoresDicInfo.RG)}");
        cWhere.Append(filtro.Endereco.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBFornecedoresDicInfo.PTabelaNome}].[{DBFornecedoresDicInfo.Endereco}]  {DevourerConsts.MsiCollate} like @{(DBFornecedoresDicInfo.Endereco)}");
        cWhere.Append(filtro.Bairro.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBFornecedoresDicInfo.PTabelaNome}].[{DBFornecedoresDicInfo.Bairro}]  {DevourerConsts.MsiCollate} like @{(DBFornecedoresDicInfo.Bairro)}");
        cWhere.Append(filtro.CEP.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBFornecedoresDicInfo.PTabelaNome}].[{DBFornecedoresDicInfo.CEP}]  {DevourerConsts.MsiCollate} like @{(DBFornecedoresDicInfo.CEP)}");
        if (!(filtro.Cidade.IsEmptyX()) && filtro.Cidade_end.IsEmptyX())
        {
            cWhere.Append(filtro.Cidade.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBFornecedoresDicInfo.PTabelaNome}].[{DBFornecedoresDicInfo.Cidade}] = @{(DBFornecedoresDicInfo.Cidade)}");
        }
        else if (!(filtro.Cidade.IsEmptyX()) && !(filtro.Cidade_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBFornecedoresDicInfo.PTabelaNome}].{DBFornecedoresDicInfo.Cidade} BETWEEN @{(DBFornecedoresDicInfo.Cidade)} AND @{(DBFornecedoresDicInfo.Cidade)}_end");
        }

        cWhere.Append(filtro.Fone.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBFornecedoresDicInfo.PTabelaNome}].[{DBFornecedoresDicInfo.Fone}]  {DevourerConsts.MsiCollate} like @{(DBFornecedoresDicInfo.Fone)}");
        cWhere.Append(filtro.Fax.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBFornecedoresDicInfo.PTabelaNome}].[{DBFornecedoresDicInfo.Fax}]  {DevourerConsts.MsiCollate} like @{(DBFornecedoresDicInfo.Fax)}");
        cWhere.Append(filtro.Email.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBFornecedoresDicInfo.PTabelaNome}].[{DBFornecedoresDicInfo.Email}]  {DevourerConsts.MsiCollate} like @{(DBFornecedoresDicInfo.Email)}");
        cWhere.Append(filtro.Site.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBFornecedoresDicInfo.PTabelaNome}].[{DBFornecedoresDicInfo.Site}]  {DevourerConsts.MsiCollate} like @{(DBFornecedoresDicInfo.Site)}");
        cWhere.Append(filtro.Obs.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBFornecedoresDicInfo.PTabelaNome}].[{DBFornecedoresDicInfo.Obs}]  {DevourerConsts.MsiCollate} like @{(DBFornecedoresDicInfo.Obs)}");
        cWhere.Append(filtro.Produtos.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBFornecedoresDicInfo.PTabelaNome}].[{DBFornecedoresDicInfo.Produtos}]  {DevourerConsts.MsiCollate} like @{(DBFornecedoresDicInfo.Produtos)}");
        cWhere.Append(filtro.Contatos.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBFornecedoresDicInfo.PTabelaNome}].[{DBFornecedoresDicInfo.Contatos}]  {DevourerConsts.MsiCollate} like @{(DBFornecedoresDicInfo.Contatos)}");
        cWhere.Append(filtro.GUID.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBFornecedoresDicInfo.PTabelaNome}].[{DBFornecedoresDicInfo.GUID}]  {DevourerConsts.MsiCollate} like @{(DBFornecedoresDicInfo.GUID)}");
        if (!(filtro.Codigo_filtro.IsEmptyX()) && filtro.Codigo_filtro_end.IsEmptyX())
        {
            cWhere.Append(filtro.Codigo_filtro.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBFornecedoresDicInfo.PTabelaNome}].[{DBFornecedoresDicInfo.CampoCodigo}] = @{(DBFornecedoresDicInfo.CampoCodigo)}");
        }
        else if (!(filtro.Codigo_filtro.IsEmptyX()) && !(filtro.Codigo_filtro_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBFornecedoresDicInfo.PTabelaNome}].{DBFornecedoresDicInfo.CampoCodigo} BETWEEN @{(DBFornecedoresDicInfo.CampoCodigo)} AND @{(DBFornecedoresDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private string GetFilterHash(Filters.FilterFornecedores? filtro)
    {
        if (filtro == null)
            return string.Empty;
        var json = JsonSerializer.Serialize(filtro);
        using var sha256 = SHA256.Create();
        var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(json));
        return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
    }

    public async Task<IEnumerable<NomeID>> GetListN([FromQuery] int max, [FromBody] Filters.FilterFornecedores? filtro, [FromRoute, Required] string uri, CancellationToken token)
    {
        // Tracking: 20250606-0
        ThrowIfDisposed();
        var filtroResult = filtro == null ? null : WFiltro(filtro!);
        string where = filtroResult?.where ?? string.Empty;
        List<SqlParameter> parameters = filtroResult?.parametros ?? [];
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new Exception($"Coneão nula.");
        }

        var keyCache = await reader.ReadStringAuditor(max, uri, "", [], oCnn);
        var cacheKey = $"{uri}-Fornecedores-{max}-{where.GetHashCode()}-GetListN-{keyCache}";
        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId)
        };
        return await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataListNAsync(max, uri, where, parameters, cancel), entryOptions, cancellationToken: token) ?? [];
    }

    private async Task<IEnumerable<NomeID>> GetDataListNAsync(int max, string uri, string where, List<SqlParameter> parameters, CancellationToken token)
    {
        var result = new List<NomeID>(max);
        var lista = await reader.ListarN(max, uri, where, parameters, DBFornecedoresDicInfo.CampoNome);
        foreach (var item in lista)
        {
            if (token.IsCancellationRequested)
                break;
            if (item?.FNome != null)
            {
                result.Add(new NomeID { Nome = item.FNome, ID = item.ID });
            }
        }

        return result;
    }

    private async Task<IEnumerable<FornecedoresResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}