// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class TipoRecursoValidationTests : IDisposable
{
    private readonly TipoRecursoValidation _validation;
    private readonly Mock<ITipoRecursoService> _mockTipoRecursoService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IJusticaReader> _mockJusticaReader;
    private readonly Mock<IAreaReader> _mockAreaReader;
    private readonly TipoRecursoService _service;
    private readonly string _validUri = "test-uri";
    public TipoRecursoValidationTests()
    {
        _validation = new TipoRecursoValidation();
        _mockTipoRecursoService = new Mock<ITipoRecursoService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockJusticaReader = new Mock<IJusticaReader>();
        _mockAreaReader = new Mock<IAreaReader>();
    }

#region Class Structure Tests
    [Fact]
    public void TipoRecursoValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<ITipoRecursoValidation>();
    }

    [Fact]
    public void TipoRecursoValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(TipoRecursoValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void TipoRecursoValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(TipoRecursoValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private static Models.TipoRecurso CreateValidTipoRecurso()
    {
        return new Models.TipoRecurso
        {
            Id = 1,
            Justica = 0,
            Area = 0,
            Descricao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockTipoRecursoService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterTipoRecurso>(), It.IsAny<string>())).ReturnsAsync([]);
        // Setup other mocks but don't override the TipoRecursos service mock
        _ = _mockJusticaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new JusticaResponse { Id = id }));
        _ = _mockAreaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new AreaResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockTipoRecursoService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterTipoRecurso>(), It.IsAny<string>())).ReturnsAsync([]);
        // Setup other mocks but don't override the TipoRecursos service mock
        _ = _mockJusticaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new JusticaResponse { Id = 0 }));
        _ = _mockAreaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new AreaResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var tiporecurso = new Models.TipoRecurso
        {
            Id = 1,
            Descricao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(tiporecurso, _mockTipoRecursoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockTipoRecursoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region Foreign Key Validation Tests - Justica
    [Fact]
    public async Task ValidateReg_WithInvalidJustica_ShouldThrowSGValidationException()
    {
        // Arrange
        var tiporecurso = CreateValidTipoRecurso();
        tiporecurso.Justica = 999;
        _mockJusticaReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.JusticaResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(tiporecurso, _mockTipoRecursoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedJusticaId_ShouldThrowSGValidationException()
    {
        // Arrange
        var tiporecurso = CreateValidTipoRecurso();
        tiporecurso.Justica = 999;
        var reg888 = new Models.Response.JusticaResponse
        {
            Id = 888
        }; // Different ID
        _mockJusticaReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(tiporecurso, _mockTipoRecursoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidJustica_ShouldPass()
    {
        // Arrange
        var tiporecurso = CreateValidTipoRecurso();
        tiporecurso.Justica = 123;
        var reg123 = new Models.Response.JusticaResponse
        {
            Id = 123
        };
        _mockJusticaReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(tiporecurso, _mockTipoRecursoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyJustica_ShouldPass()
    {
        // Arrange
        var tiporecurso = CreateValidTipoRecurso();
        tiporecurso.Justica = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(tiporecurso, _mockTipoRecursoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockJusticaReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - Area
    [Fact]
    public async Task ValidateReg_WithInvalidArea_ShouldThrowSGValidationException()
    {
        // Arrange
        var tiporecurso = CreateValidTipoRecurso();
        tiporecurso.Area = 999;
        _mockAreaReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.AreaResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(tiporecurso, _mockTipoRecursoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedAreaId_ShouldThrowSGValidationException()
    {
        // Arrange
        var tiporecurso = CreateValidTipoRecurso();
        tiporecurso.Area = 999;
        var reg888 = new Models.Response.AreaResponse
        {
            Id = 888
        }; // Different ID
        _mockAreaReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(tiporecurso, _mockTipoRecursoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidArea_ShouldPass()
    {
        // Arrange
        var tiporecurso = CreateValidTipoRecurso();
        tiporecurso.Area = 123;
        var reg123 = new Models.Response.AreaResponse
        {
            Id = 123
        };
        _mockAreaReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(tiporecurso, _mockTipoRecursoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyArea_ShouldPass()
    {
        // Arrange
        var tiporecurso = CreateValidTipoRecurso();
        tiporecurso.Area = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(tiporecurso, _mockTipoRecursoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockAreaReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}