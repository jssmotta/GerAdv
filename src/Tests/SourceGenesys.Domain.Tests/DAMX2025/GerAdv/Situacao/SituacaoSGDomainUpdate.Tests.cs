// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// ============================================
// ARQUIVO: DBUpdateTests.cs.txt (Principal)
// ============================================
namespace MenphisSI.GerAdv.Tests;
public class DBSituacaoUpdate : IDisposable
{
    private readonly DBSituacao _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBSituacaoUpdate()
    {
        _instance = new DBSituacao();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void DefaultConstructor_ShouldCreateInstance_WithDefaultValues()
    {
        // Act
        var situacao = new DBSituacao();
        // Assert
        situacao.Should().NotBeNull();
        situacao.ITabelaName().Should().Be("Situacao");
        situacao.ID.Should().Be(0);
    }

    [Fact]
    public void AllProperties_WithValidValues_ShouldSetCorrectly()
    {
        // Arrange
        var situacao = new DBSituacao
        {
            FParte_Int = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FGUID = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FParte_Opo = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        };
        // Assert - All properties should be set situacao.FParte_Int.Should().Be( "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        situacao.FGUID.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        situacao.FParte_Opo.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public void StringProperties_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var situacao = new DBSituacao();
        var longString = new string ('X', 300);
        situacao.FParte_Int = longString; // MAX: 30
        situacao.FGUID = longString; // MAX: 100
        situacao.FParte_Opo = longString; // MAX: 30
        // Assert - All properties should be set situacao.FParte_Int.Should().HaveLength(30);
        situacao.FGUID.Should().HaveLength(100);
        situacao.FParte_Opo.Should().HaveLength(30);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FParte_Int_Property_ShouldAcceptValidNames(string Parte_Int)
    {
        // Arrange
        var situacao = new DBSituacao
        {
            // Act
            FParte_Int = Parte_Int
        };
        // Assert
        situacao.FParte_Int.Should().Be(Parte_Int);
    }

    [Fact]
    public void FParte_Int_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var situacao = new DBSituacao
        {
            // Act
            FParte_Int = null
        };
        // Assert
        situacao.FParte_Int.Should().Be(string.Empty);
    }

    [Fact]
    public void FParte_Int_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var situacao = new DBSituacao();
        var longName = new string ('A', 30 + 10); // Exceeds 30 character limit
        // Act
        situacao.FParte_Int = longName;
        // Assert
        situacao.FParte_Int.Should().HaveLength(30);
    }

    [Fact]
    public void FParte_Int_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FParte_Int = null;
        // Act
        var result = _instance.FParte_Int;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FParte_Int_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FParte_Int = expectedValue;
        // Act
        var result = _instance.FParte_Int;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FParte_Int_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBSituacao).GetField("pFldFParte_Int", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FParte_Int = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FParte_Int);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FParte_Int_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBSituacao).GetField("pFldFParte_Int", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FParte_Int = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FParte_Int);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FParte_Int_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBSituacao).GetField("pFldFParte_Int", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FParte_Int = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FParte_Int);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FParte_Int_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBSituacao).GetField("pFldFParte_Int", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FParte_Int = value;
        // Act
        _instance.FParte_Int = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FParte_Int_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBSituacao).GetField("pFldFParte_Int", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FParte_Int = "Original Value";
        // Act
        _instance.FParte_Int = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FParte_Int_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBSituacao).GetField("pFldFParte_Int", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FParte_Int = "First Value";
        // Act
        _instance.FParte_Int = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FParte_Int_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBSituacao).GetField("pFldFParte_Int", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FParte_Int = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FParte_Int);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FParte_Int_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FParte_Int = input;
        // Assert
        Assert.Equal(expected, _instance.FParte_Int);
    }

    [Fact]
    public void FParte_Int_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBSituacao).GetField("pFldFParte_Int", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FParte_Int = null;
        // Act
        _instance.FParte_Int = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FParte_Int_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBSituacao).GetField("pFldFParte_Int", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FParte_Int = "Existing Value";
        // Act
        _instance.FParte_Int = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FParte_Opo_Property_ShouldAcceptValidNames(string Parte_Opo)
    {
        // Arrange
        var situacao = new DBSituacao
        {
            // Act
            FParte_Opo = Parte_Opo
        };
        // Assert
        situacao.FParte_Opo.Should().Be(Parte_Opo);
    }

    [Fact]
    public void FParte_Opo_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var situacao = new DBSituacao
        {
            // Act
            FParte_Opo = null
        };
        // Assert
        situacao.FParte_Opo.Should().Be(string.Empty);
    }

    [Fact]
    public void FParte_Opo_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var situacao = new DBSituacao();
        var longName = new string ('A', 30 + 10); // Exceeds 30 character limit
        // Act
        situacao.FParte_Opo = longName;
        // Assert
        situacao.FParte_Opo.Should().HaveLength(30);
    }

    [Fact]
    public void FParte_Opo_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FParte_Opo = null;
        // Act
        var result = _instance.FParte_Opo;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FParte_Opo_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FParte_Opo = expectedValue;
        // Act
        var result = _instance.FParte_Opo;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FParte_Opo_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBSituacao).GetField("pFldFParte_Opo", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FParte_Opo = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FParte_Opo);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FParte_Opo_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBSituacao).GetField("pFldFParte_Opo", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FParte_Opo = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FParte_Opo);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FParte_Opo_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBSituacao).GetField("pFldFParte_Opo", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FParte_Opo = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FParte_Opo);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FParte_Opo_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBSituacao).GetField("pFldFParte_Opo", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FParte_Opo = value;
        // Act
        _instance.FParte_Opo = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FParte_Opo_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBSituacao).GetField("pFldFParte_Opo", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FParte_Opo = "Original Value";
        // Act
        _instance.FParte_Opo = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FParte_Opo_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBSituacao).GetField("pFldFParte_Opo", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FParte_Opo = "First Value";
        // Act
        _instance.FParte_Opo = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FParte_Opo_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBSituacao).GetField("pFldFParte_Opo", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FParte_Opo = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FParte_Opo);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FParte_Opo_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FParte_Opo = input;
        // Assert
        Assert.Equal(expected, _instance.FParte_Opo);
    }

    [Fact]
    public void FParte_Opo_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBSituacao).GetField("pFldFParte_Opo", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FParte_Opo = null;
        // Act
        _instance.FParte_Opo = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FParte_Opo_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBSituacao).GetField("pFldFParte_Opo", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FParte_Opo = "Existing Value";
        // Act
        _instance.FParte_Opo = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

#region Testes de GUID
    [Fact]
    public void GUID_DefaultValue_ShouldBeEmpty()
    {
        Assert.Equal(string.Empty, _instance.FGUID);
    }

    [Fact]
    public void GUID_SetValidGUID_ShouldStore()
    {
        var guid = Guid.NewGuid().ToString();
        _instance.FGUID = guid;
        Assert.Equal(guid, _instance.FGUID);
    }

#endregion
    [Fact]
    public void TabelaNome_Property_ShouldReturnCorrectTableName()
    {
        // Arrange
        var situacao = new DBSituacao();
        // Act & Assert
        situacao.TabelaNome.Should().Be("Situacao");
    }

    public virtual void Dispose()
    {
    // Cleanup resources if needed
    }
}