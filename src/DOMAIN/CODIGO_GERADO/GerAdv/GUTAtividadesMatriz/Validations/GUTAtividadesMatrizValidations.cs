// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IGUTAtividadesMatrizValidation
{
    Task<bool> ValidateReg(Models.GUTAtividadesMatriz reg, IGUTAtividadesMatrizService service, IGUTMatrizReader gutmatrizReader, IGUTAtividadesReader gutatividadesReader, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
    Task<bool> CanDelete(int? id, IGUTAtividadesMatrizService service, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
}

public class GUTAtividadesMatrizValidation : IGUTAtividadesMatrizValidation
{
    public async Task<bool> CanDelete(int? id, IGUTAtividadesMatrizService service, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (id == null || id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id ?? default, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.GUTAtividadesMatriz reg)
    {
        if (reg.GUID != null && reg.GUID.Length > DBGUTAtividadesMatrizDicInfo.AmgGUID.FTamanho)
            throw new SGValidationException($"GUID deve ter no máximo {DBGUTAtividadesMatrizDicInfo.AmgGUID.FTamanho} caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.GUTAtividadesMatriz reg, IGUTAtividadesMatrizService service, IGUTMatrizReader gutmatrizReader, IGUTAtividadesReader gutatividadesReader, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.GUTMatriz == 0)
            throw new SGValidationException("GUTMatriz é obrigatório.");
        if (reg.GUTAtividade == 0)
            throw new SGValidationException("GUTAtividade é obrigatório.");
        if (reg.GUID.IsEmpty())
            throw new SGValidationException("GUID é obrigatório.");
        // GUTMatriz
        {
            var regGUTMatriz = await gutmatrizReader.Read(reg.GUTMatriz, oCnn);
            if (regGUTMatriz == null || regGUTMatriz.Id != reg.GUTMatriz)
            {
                throw new SGValidationException($"G U T Matriz não encontrado ({regGUTMatriz?.Id}).");
            }
        }

        // GUTAtividades
        {
            var regGUTAtividades = await gutatividadesReader.Read(reg.GUTAtividade, oCnn);
            if (regGUTAtividades == null || regGUTAtividades.Id != reg.GUTAtividade)
            {
                throw new SGValidationException($"G U T Atividades não encontrado ({regGUTAtividades?.Id}).");
            }
        }

        return true;
    }
}