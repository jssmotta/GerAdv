// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class HonorariosDadosContratoValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFHonorariosDadosContratoFactory> _mockHonorariosDadosContratoFactory;
    private readonly Mock<IHonorariosDadosContratoReader> _mockReader;
    private readonly HonorariosDadosContratoValidation _validation;
    private readonly Mock<IHonorariosDadosContratoService> _mockHonorariosDadosContratoService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IClientesReader> _mockClientesReader;
    private readonly HonorariosDadosContratoService _service;
    private readonly string _validUri = "test-uri";
    public HonorariosDadosContratoValidationTests()
    {
        _mockHonorariosDadosContratoFactory = new Mock<IFHonorariosDadosContratoFactory>();
        _mockReader = new Mock<IHonorariosDadosContratoReader>();
        _validation = new HonorariosDadosContratoValidation();
        _mockHonorariosDadosContratoService = new Mock<IHonorariosDadosContratoService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockClientesReader = new Mock<IClientesReader>();
    }

#region Class Structure Tests
    [Fact]
    public void HonorariosDadosContratoValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IHonorariosDadosContratoValidation>();
    }

    [Fact]
    public void HonorariosDadosContratoValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(HonorariosDadosContratoValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void HonorariosDadosContratoValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(HonorariosDadosContratoValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.HonorariosDadosContrato CreateValidHonorariosDadosContrato()
    {
        return new Models.HonorariosDadosContrato
        {
            Id = 1,
            Guid = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Cliente = 1,
            Fixo = false,
            Variavel = true,
            PercSucesso = 1m,
            Processo = 0,
            ArquivoContrato
            TextoContrato = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            ValorFixo = 1m,
            Observacao = "Observação teste",
            DataContrato = "24/04/1975"
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockHonorariosDadosContratoService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterHonorariosDadosContrato>(), It.IsAny<string>())).ReturnsAsync(new List<HonorariosDadosContratoResponseAll>());
        // Setup other mocks but don't override the HonorariosDadosContratos service mock
        _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.ClientesResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockHonorariosDadosContratoService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterHonorariosDadosContrato>(), It.IsAny<string>())).ReturnsAsync(new List<HonorariosDadosContratoResponseAll>());
        // Setup other mocks but don't override the HonorariosDadosContratos service mock
        _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.ClientesResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var honorariosdadoscontrato = new Models.HonorariosDadosContrato
        {
            Id = 1,
            Guid = null,
            Cliente = 1,
            Fixo = false,
            Variavel = true,
            ArquivoContrato = null,
            TextoContrato = null,
            Observacao = null,
            DataContrato = "27/05/2022"
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(honorariosdadoscontrato, _mockHonorariosDadosContratoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockHonorariosDadosContratoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region Foreign Key Validation Tests - Clientes
    [Fact]
    public async Task ValidateReg_WithInvalidClientes_ShouldThrowSGValidationException()
    {
        // Arrange
        var honorariosdadoscontrato = CreateValidHonorariosDadosContrato();
        honorariosdadoscontrato.Cliente = 999;
        _mockClientesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.ClientesResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(honorariosdadoscontrato, _mockHonorariosDadosContratoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedClientesId_ShouldThrowSGValidationException()
    {
        // Arrange
        var honorariosdadoscontrato = CreateValidHonorariosDadosContrato();
        honorariosdadoscontrato.Cliente = 999;
        var reg888 = new Models.Response.ClientesResponse
        {
            Id = 888
        }; // Different ID
        _mockClientesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(honorariosdadoscontrato, _mockHonorariosDadosContratoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidClientes_ShouldPass()
    {
        // Arrange
        var honorariosdadoscontrato = CreateValidHonorariosDadosContrato();
        honorariosdadoscontrato.Cliente = 123;
        var reg123 = new Models.Response.ClientesResponse
        {
            Id = 123
        };
        _mockClientesReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(honorariosdadoscontrato, _mockHonorariosDadosContratoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}