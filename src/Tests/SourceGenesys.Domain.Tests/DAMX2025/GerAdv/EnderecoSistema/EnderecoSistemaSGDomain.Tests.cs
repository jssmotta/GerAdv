// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBEnderecoSistema - Nome da classe (ex: DBClientes)
/// EnderecoSistema - Nome da tabela (ex: Clientes)
/// est - Prefixo dos campos (ex: cli)
/// estCodigo - Nome do campo código (ex: cliCodigo)
///  - Nome do campo nome (ex: cliNome)
/// DBEnderecoSistema.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBEnderecoSistemaTests : IDisposable
{
    private readonly DBEnderecoSistema _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBEnderecoSistemaTests()
    {
        _instance = new DBEnderecoSistema();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("estCodigo", typeof(int));
        dt.Columns.Add("estQuemCad", typeof(int));
        dt.Columns.Add("estDtCad", typeof(DateTime));
        dt.Columns.Add("estQuemAtu", typeof(int));
        dt.Columns.Add("estDtAtu", typeof(DateTime));
        dt.Columns.Add("estVisto", typeof(bool));
        dt.Columns.Add("estCadastro", typeof(int));
        dt.Columns.Add("estCadastroExCod", typeof(int));
        dt.Columns.Add("estTipoEnderecoSistema", typeof(int));
        dt.Columns.Add("estGUID", typeof(string));
        dt.Columns.Add("estProcesso", typeof(int));
        dt.Columns.Add("estMotivo", typeof(string));
        dt.Columns.Add("estContatoNoLocal", typeof(string));
        dt.Columns.Add("estCidade", typeof(int));
        dt.Columns.Add("estEndereco", typeof(string));
        dt.Columns.Add("estBairro", typeof(string));
        dt.Columns.Add("estCEP", typeof(string));
        dt.Columns.Add("estFone", typeof(string));
        dt.Columns.Add("estFax", typeof(string));
        dt.Columns.Add("estObservacao", typeof(string));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("EnderecoSistema", DBEnderecoSistema.PTabelaNome);
        Assert.Equal(" EnderecoSistema.* ", DBEnderecoSistema.CamposSqlX);
        Assert.Equal("estCodigo", DBEnderecoSistema.CampoCodigo);
        Assert.Equal("", DBEnderecoSistema.CampoNome);
        Assert.Equal("est", DBEnderecoSistema.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBEnderecoSistema();
        Assert.Equal(0, instance.ID);
        Assert.Equal("EnderecoSistema", instance.ITabelaName());
        Assert.Equal("est", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBEnderecoSistema((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBEnderecoSistema((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["estCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBEnderecoSistema(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("EnderecoSistema", cadastro.ITabelaName());
        Assert.Equal("estCodigo", cadastro.ICampoCodigo());
        Assert.Equal("", cadastro.ICampoNome());
        Assert.Equal("est", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBEnderecoSistema.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBEnderecoSistema.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBEnderecoSistema.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBEnderecoSistema();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBEnderecoSistema();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnFalse()
    {
        Assert.False(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cadastro_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCadastro = value;
        Assert.Equal(value, _instance.FCadastro);
    }

    [Fact]
    public void Cadastro_DefaultValue_ShouldBeZero()
    {
        var instance = new DBEnderecoSistema();
        Assert.Equal(0, instance.FCadastro);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void CadastroExCod_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCadastroExCod = value;
        Assert.Equal(value, _instance.FCadastroExCod);
    }

    [Fact]
    public void CadastroExCod_DefaultValue_ShouldBeZero()
    {
        var instance = new DBEnderecoSistema();
        Assert.Equal(0, instance.FCadastroExCod);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void TipoEnderecoSistema_ShouldAcceptIntegerValues(int value)
    {
        _instance.FTipoEnderecoSistema = value;
        Assert.Equal(value, _instance.FTipoEnderecoSistema);
    }

    [Fact]
    public void TipoEnderecoSistema_DefaultValue_ShouldBeZero()
    {
        var instance = new DBEnderecoSistema();
        Assert.Equal(0, instance.FTipoEnderecoSistema);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void GUID_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FGUID = input;
        Assert.Equal(expected, _instance.FGUID);
    }

    [Fact]
    public void GUID_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 150 + 10);
        _instance.FGUID = longString;
        Assert.True(_instance.FGUID.Length <= 150);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Processo_ShouldAcceptIntegerValues(int value)
    {
        _instance.FProcesso = value;
        Assert.Equal(value, _instance.FProcesso);
    }

    [Fact]
    public void Processo_DefaultValue_ShouldBeZero()
    {
        var instance = new DBEnderecoSistema();
        Assert.Equal(0, instance.FProcesso);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Motivo_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FMotivo = input;
        Assert.Equal(expected, _instance.FMotivo);
    }

    [Fact]
    public void Motivo_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 200 + 10);
        _instance.FMotivo = longString;
        Assert.True(_instance.FMotivo.Length <= 200);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void ContatoNoLocal_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FContatoNoLocal = input;
        Assert.Equal(expected, _instance.FContatoNoLocal);
    }

    [Fact]
    public void ContatoNoLocal_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FContatoNoLocal = longString;
        Assert.True(_instance.FContatoNoLocal.Length <= 50);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cidade_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCidade = value;
        Assert.Equal(value, _instance.FCidade);
    }

    [Fact]
    public void Cidade_DefaultValue_ShouldBeZero()
    {
        var instance = new DBEnderecoSistema();
        Assert.Equal(0, instance.FCidade);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Endereco_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FEndereco = input;
        Assert.Equal(expected, _instance.FEndereco);
    }

    [Fact]
    public void Endereco_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 150 + 10);
        _instance.FEndereco = longString;
        Assert.True(_instance.FEndereco.Length <= 150);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Bairro_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FBairro = input;
        Assert.Equal(expected, _instance.FBairro);
    }

    [Fact]
    public void Bairro_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FBairro = longString;
        Assert.True(_instance.FBairro.Length <= 50);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Fone_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FFone = input;
        Assert.Equal(expected, _instance.FFone);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Fax_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FFax = input;
        Assert.Equal(expected, _instance.FFax);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Observacao_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FObservacao = input;
        Assert.Equal(expected, _instance.FObservacao);
    }

    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}