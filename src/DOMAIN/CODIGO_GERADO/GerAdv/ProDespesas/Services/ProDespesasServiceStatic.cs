// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class ProDespesasService
{
    private static (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterProDespesas filtro)
    {
        var parameters = new List<SqlParameter>();
        if (filtro.LigacaoID != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProDespesasDicInfo.LigacaoID)}", filtro.LigacaoID));
        }

        if (filtro.LigacaoID_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProDespesasDicInfo.LigacaoID)}_end", filtro.LigacaoID_end));
        }

        if (filtro.Cliente != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProDespesasDicInfo.Cliente)}", filtro.Cliente));
        }

        if (filtro.Corrigido != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProDespesasDicInfo.Corrigido)}", filtro.Corrigido));
        }

        if (!string.IsNullOrEmpty(filtro.Data))
        {
            parameters.Add(new($"@{nameof(DBProDespesasDicInfo.Data)}", ApplyWildCard(filtro.WildcardChar, filtro.Data)));
        }

        if (filtro.ValorOriginal != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProDespesasDicInfo.ValorOriginal)}", filtro.ValorOriginal));
        }

        if (filtro.ValorOriginal_end != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProDespesasDicInfo.ValorOriginal)}_end", filtro.ValorOriginal_end));
        }

        if (filtro.Processo != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProDespesasDicInfo.Processo)}", filtro.Processo));
        }

        if (filtro.Quitado != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProDespesasDicInfo.Quitado)}", filtro.Quitado));
        }

        if (filtro.Quitado_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProDespesasDicInfo.Quitado)}_end", filtro.Quitado_end));
        }

        if (!filtro.DataCorrecao.IsEmpty())
        {
            if (DateTime.TryParse(filtro.DataCorrecao, out var dataParam))
                parameters.Add(new($"@{nameof(DBProDespesasDicInfo.DataCorrecao)}", dataParam));
        }

        if (!filtro.DataCorrecao_end.IsEmpty())
        {
            if (DateTime.TryParse(filtro.DataCorrecao_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBProDespesasDicInfo.DataCorrecao)}_end", dataParam));
        }

        if (filtro.Valor != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProDespesasDicInfo.Valor)}", filtro.Valor));
        }

        if (filtro.Valor_end != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProDespesasDicInfo.Valor)}_end", filtro.Valor_end));
        }

        if (filtro.Tipo != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProDespesasDicInfo.Tipo)}", filtro.Tipo));
        }

        if (!string.IsNullOrEmpty(filtro.Historico))
        {
            parameters.Add(new($"@{nameof(DBProDespesasDicInfo.Historico)}", ApplyWildCard(filtro.WildcardChar, filtro.Historico)));
        }

        if (filtro.LivroCaixa != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProDespesasDicInfo.LivroCaixa)}", filtro.LivroCaixa));
        }

        if (!string.IsNullOrEmpty(filtro.GUID))
        {
            parameters.Add(new($"@{nameof(DBProDespesasDicInfo.GUID)}", ApplyWildCard(filtro.WildcardChar, filtro.GUID)));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProDespesasDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
        }

        if (filtro.Codigo_filtro_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProDespesasDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
        }

        if (filtro.LogicalOperator.IsEmpty() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        if (!filtro.LigacaoID.IsEmpty() && filtro.LigacaoID_end.IsEmpty())
        {
            cWhere.Append(filtro.LigacaoID <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.LigacaoID}] >= @{nameof(DBProDespesasDicInfo.LigacaoID)}");
        }
        else
        {
            cWhere.Append((filtro.LigacaoID <= 0 && filtro.LigacaoID_end <= 0) ? string.Empty : (!(filtro.LigacaoID <= 0) && !(filtro.LigacaoID_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProDespesasDicInfo.LigacaoID} BETWEEN @{nameof(DBProDespesasDicInfo.LigacaoID)} AND @{nameof(DBProDespesasDicInfo.LigacaoID)}_end" : !(filtro.LigacaoID <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProDespesasDicInfo.LigacaoID} = @{nameof(DBProDespesasDicInfo.LigacaoID)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProDespesasDicInfo.LigacaoID} <= @{nameof(DBProDespesasDicInfo.LigacaoID)}_end");
        }

        cWhere.Append(filtro.Cliente <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.Cliente}] = @{nameof(DBProDespesasDicInfo.Cliente)}");
        cWhere.Append(filtro.Corrigido == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.Corrigido}] = @{nameof(DBProDespesasDicInfo.Corrigido)}");
        cWhere.Append(filtro.Data.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.Data}]  {DevourerConsts.MsiCollate} like @{nameof(DBProDespesasDicInfo.Data)}");
        if (!filtro.ValorOriginal.IsEmpty() && filtro.ValorOriginal_end.IsEmpty())
        {
            cWhere.Append(filtro.ValorOriginal == decimal.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.ValorOriginal}] >= @{nameof(DBProDespesasDicInfo.ValorOriginal)}");
        }
        else
        {
            cWhere.Append((filtro.ValorOriginal == decimal.MinValue && filtro.ValorOriginal_end == decimal.MinValue) ? string.Empty : (!(filtro.ValorOriginal == decimal.MinValue) && !(filtro.ValorOriginal_end == decimal.MinValue)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProDespesasDicInfo.ValorOriginal} BETWEEN @{nameof(DBProDespesasDicInfo.ValorOriginal)} AND @{nameof(DBProDespesasDicInfo.ValorOriginal)}_end" : !(filtro.ValorOriginal == decimal.MinValue) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProDespesasDicInfo.ValorOriginal} = @{nameof(DBProDespesasDicInfo.ValorOriginal)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProDespesasDicInfo.ValorOriginal} <= @{nameof(DBProDespesasDicInfo.ValorOriginal)}_end");
        }

        cWhere.Append(filtro.Processo <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.Processo}] = @{nameof(DBProDespesasDicInfo.Processo)}");
        if (!filtro.Quitado.IsEmpty() && filtro.Quitado_end.IsEmpty())
        {
            cWhere.Append(filtro.Quitado <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.Quitado}] >= @{nameof(DBProDespesasDicInfo.Quitado)}");
        }
        else
        {
            cWhere.Append((filtro.Quitado <= 0 && filtro.Quitado_end <= 0) ? string.Empty : (!(filtro.Quitado <= 0) && !(filtro.Quitado_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProDespesasDicInfo.Quitado} BETWEEN @{nameof(DBProDespesasDicInfo.Quitado)} AND @{nameof(DBProDespesasDicInfo.Quitado)}_end" : !(filtro.Quitado <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProDespesasDicInfo.Quitado} = @{nameof(DBProDespesasDicInfo.Quitado)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProDespesasDicInfo.Quitado} <= @{nameof(DBProDespesasDicInfo.Quitado)}_end");
        }

        if (!filtro.DataCorrecao.IsEmpty() && filtro.DataCorrecao_end.IsEmpty())
        {
            cWhere.Append(filtro.DataCorrecao.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.DataCorrecao}], 103) >= CONVERT(DATE, @{nameof(DBProDespesasDicInfo.DataCorrecao)}, 103)");
        }
        else
        {
            cWhere.Append((filtro.DataCorrecao.IsEmpty() && filtro.DataCorrecao_end.IsEmpty()) ? string.Empty : (!(filtro.DataCorrecao.IsEmpty()) && !(filtro.DataCorrecao_end.IsEmpty())) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProDespesasDicInfo.DataCorrecao} BETWEEN @{nameof(DBProDespesasDicInfo.DataCorrecao)} AND @{nameof(DBProDespesasDicInfo.DataCorrecao)}_end" : !(filtro.DataCorrecao.IsEmpty()) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProDespesasDicInfo.DataCorrecao} = @{nameof(DBProDespesasDicInfo.DataCorrecao)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProDespesasDicInfo.DataCorrecao} <= @{nameof(DBProDespesasDicInfo.DataCorrecao)}_end");
        }

        if (!filtro.Valor.IsEmpty() && filtro.Valor_end.IsEmpty())
        {
            cWhere.Append(filtro.Valor == decimal.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.Valor}] >= @{nameof(DBProDespesasDicInfo.Valor)}");
        }
        else
        {
            cWhere.Append((filtro.Valor == decimal.MinValue && filtro.Valor_end == decimal.MinValue) ? string.Empty : (!(filtro.Valor == decimal.MinValue) && !(filtro.Valor_end == decimal.MinValue)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProDespesasDicInfo.Valor} BETWEEN @{nameof(DBProDespesasDicInfo.Valor)} AND @{nameof(DBProDespesasDicInfo.Valor)}_end" : !(filtro.Valor == decimal.MinValue) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProDespesasDicInfo.Valor} = @{nameof(DBProDespesasDicInfo.Valor)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProDespesasDicInfo.Valor} <= @{nameof(DBProDespesasDicInfo.Valor)}_end");
        }

        cWhere.Append(filtro.Tipo == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.Tipo}] = @{nameof(DBProDespesasDicInfo.Tipo)}");
        cWhere.Append(filtro.Historico.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.Historico}]  {DevourerConsts.MsiCollate} like @{nameof(DBProDespesasDicInfo.Historico)}");
        cWhere.Append(filtro.LivroCaixa == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.LivroCaixa}] = @{nameof(DBProDespesasDicInfo.LivroCaixa)}");
        cWhere.Append(filtro.GUID.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.GUID}]  {DevourerConsts.MsiCollate} like @{nameof(DBProDespesasDicInfo.GUID)}");
        if (!filtro.Codigo_filtro.IsEmpty() && filtro.Codigo_filtro_end.IsEmpty())
        {
            cWhere.Append(filtro.Codigo_filtro <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.CampoCodigo}] >= @{nameof(DBProDespesasDicInfo.CampoCodigo)}");
        }
        else
        {
            cWhere.Append((filtro.Codigo_filtro <= 0 && filtro.Codigo_filtro_end <= 0) ? string.Empty : (!(filtro.Codigo_filtro <= 0) && !(filtro.Codigo_filtro_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProDespesasDicInfo.CampoCodigo} BETWEEN @{nameof(DBProDespesasDicInfo.CampoCodigo)} AND @{nameof(DBProDespesasDicInfo.CampoCodigo)}_end" : !(filtro.Codigo_filtro <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProDespesasDicInfo.CampoCodigo} = @{nameof(DBProDespesasDicInfo.CampoCodigo)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProDespesasDicInfo.CampoCodigo} <= @{nameof(DBProDespesasDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private static string ApplyWildCard(char wildcardChar, string value)
    {
        if (wildcardChar == '\0' || wildcardChar == ' ')
        {
            return value;
        }

        var result = $"{wildcardChar}{value.Replace(" ", wildcardChar.ToString())}{wildcardChar}";
        return result;
    }

    public async Task<IEnumerable<NomeID>> GetListN([FromQuery] int max, [FromBody] Filters.FilterProDespesas? filtro, [FromRoute, Required] string uri, CancellationToken token)
    {
        // Tracking: 20250606-0
        ThrowIfDisposed();
        var filtroResult = filtro == null ? null : WFiltro(filtro!);
        string where = filtroResult?.where ?? string.Empty;
        List<SqlParameter> parameters = filtroResult?.parametros ?? [];
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new Exception($"Coneão nula.");
        }

        var keyCache = await reader.ReadStringAuditor(uri, "", [], oCnn);
        var cacheKey = $"{uri}-ProDespesas-{max}-{where.GetHashCode()}-GetListN-{keyCache}";
        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId)
        };
        return await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataListNAsync(max, uri, where, parameters, cancel), entryOptions, cancellationToken: token) ?? [];
    }

    private async Task<IEnumerable<NomeID>> GetDataListNAsync(int max, string uri, string where, List<SqlParameter> parameters, CancellationToken token)
    {
        var result = new List<NomeID>(max);
        var lista = await reader.ListarN(max, uri, where, parameters, DBProDespesasDicInfo.CampoNome);
        foreach (var item in lista)
        {
            if (token.IsCancellationRequested)
                break;
            if (item?.FNome != null)
            {
                result.Add(new NomeID { Nome = item.FNome, ID = item.ID });
            }
        }

        return result;
    }

    private async Task<IEnumerable<ProDespesasResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}