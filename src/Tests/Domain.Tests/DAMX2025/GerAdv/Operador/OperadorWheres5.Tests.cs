// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class OperadorWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFOperadorFactory> _mockOperadorFactory;
    private readonly Mock<FOperador> _mockFOperador;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly OperadorWhere _operadorWhere;
    public OperadorWhereTests()
    {
        _mockOperadorFactory = new Mock<IFOperadorFactory>();
        _mockFOperador = new Mock<FOperador>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _operadorWhere = new OperadorWhere(_mockOperadorFactory.Object);
    }

    public void Dispose()
    {
        _mockOperadorFactory?.Reset();
        _mockFOperador?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
        };
    }

    private void SetupMockFOperador(string? EMail = "test@email.com", string? Pasta = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", bool? Telefonista = false, bool? Master = true, string? Nome = "João", string? Nick = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", bool? Excluido = false, bool? Situacao = true, string? MinhaDescricao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string? EMailNet = "test@email.com", bool? OnLine = false, bool? SysOp = true, bool? IsFinanceiro = false, bool? Top = true, bool? Sexo = false, bool? Basico = true, bool? Externo = false, bool? EMailConfirmado = true, string? DataLimiteReset = "24/04/1975")
    {
        _mockFOperador.Setup(f => f.FEMail).Returns(EMail ?? string.Empty);
        _mockFOperador.Setup(f => f.FPasta).Returns(Pasta ?? string.Empty);
        _mockFOperador.Setup(f => f.FTelefonista).Returns(Telefonista ?? false);
        _mockFOperador.Setup(f => f.FMaster).Returns(Master ?? false);
        _mockFOperador.Setup(f => f.FNome).Returns(Nome ?? string.Empty);
        _mockFOperador.Setup(f => f.FNick).Returns(Nick ?? string.Empty);
        _mockFOperador.Setup(f => f.FExcluido).Returns(Excluido ?? false);
        _mockFOperador.Setup(f => f.FSituacao).Returns(Situacao ?? false);
        _mockFOperador.Setup(f => f.FMinhaDescricao).Returns(MinhaDescricao ?? string.Empty);
        _mockFOperador.Setup(f => f.FEMailNet).Returns(EMailNet ?? string.Empty);
        _mockFOperador.Setup(f => f.FOnLine).Returns(OnLine ?? false);
        _mockFOperador.Setup(f => f.FSysOp).Returns(SysOp ?? false);
        _mockFOperador.Setup(f => f.FIsFinanceiro).Returns(IsFinanceiro ?? false);
        _mockFOperador.Setup(f => f.FTop).Returns(Top ?? false);
        _mockFOperador.Setup(f => f.FSexo).Returns(Sexo ?? false);
        _mockFOperador.Setup(f => f.FBasico).Returns(Basico ?? false);
        _mockFOperador.Setup(f => f.FExterno).Returns(Externo ?? false);
        _mockFOperador.Setup(f => f.FEMailConfirmado).Returns(EMailConfirmado ?? false);
        _mockFOperador.Setup(f => f.FDataLimiteReset).Returns(DataLimiteReset ?? string.Empty);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFOperadorFactory>();
        // Act
        var operadorWhere = new OperadorWhere(mockFactory.Object);
        // Assert
        operadorWhere.Should().NotBeNull();
        operadorWhere.Should().BeAssignableTo<IOperadorWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFOperadorFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new OperadorWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnOperadorResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFOperador();
        _mockOperadorFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOperador.Object);
        // Act
        var result = _operadorWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.EMail.Should().Be("test@email.com");
        result.Pasta.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.Telefonista.Should().Be(false);
        result.Master.Should().Be(true);
        result.Nome.Should().Be("João");
        result.Nick.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Excluido.Should().Be(false);
        result.Situacao.Should().Be(true);
        result.MinhaDescricao.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.EMailNet.Should().Be("test@email.com");
        result.OnLine.Should().Be(false);
        result.SysOp.Should().Be(true);
        result.IsFinanceiro.Should().Be(false);
        result.Top.Should().Be(true);
        result.Sexo.Should().Be(false);
        result.Basico.Should().Be(true);
        result.Externo.Should().Be(false);
        result.EMailConfirmado.Should().Be(true);
        result.DataLimiteReset.Should().Be("24/04/1975");
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFOperador(EMail: null, Pasta: null, Telefonista: null, Master: null, Nome: null, Nick: null, Excluido: null, Situacao: null, MinhaDescricao: null, EMailNet: null, OnLine: null, SysOp: null, IsFinanceiro: null, Top: null, Sexo: null, Basico: null, Externo: null, EMailConfirmado: null, DataLimiteReset: null);
        _mockOperadorFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOperador.Object);
        // Act
        var result = _operadorWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.EMail.Should().Be(string.Empty);
        result.Pasta.Should().Be(string.Empty);
        result.Telefonista.Should().Be(false);
        result.Master.Should().Be(false);
        result.Nome.Should().Be(string.Empty);
        result.Nick.Should().Be(string.Empty);
        result.Excluido.Should().Be(false);
        result.Situacao.Should().Be(false);
        result.MinhaDescricao.Should().Be(string.Empty);
        result.EMailNet.Should().Be(string.Empty);
        result.OnLine.Should().Be(false);
        result.SysOp.Should().Be(false);
        result.IsFinanceiro.Should().Be(false);
        result.Top.Should().Be(false);
        result.Sexo.Should().Be(false);
        result.Basico.Should().Be(false);
        result.Externo.Should().Be(false);
        result.EMailConfirmado.Should().Be(false);
        result.DataLimiteReset.Should().Be(string.Empty);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFOperador();
        _mockOperadorFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFOperador.Object);
        // Act
        var result = _operadorWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockOperadorFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFOperador();
        _mockOperadorFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOperador.Object);
        // Act
        var result = _operadorWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockOperadorFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFOperador();
        _mockOperadorFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOperador.Object);
        // Act
        var result = _operadorWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockOperadorFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFOperador();
        _mockOperadorFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOperador.Object);
        // Act
        _operadorWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockOperadorFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFOperadorInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFOperador.Setup(f => f.Dispose());
        SetupMockFOperador();
        _mockOperadorFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOperador.Object);
        // Act
        _operadorWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFOperador.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockOperadorFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _operadorWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFOperador(EMail: "test@email.com", Pasta: "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", Telefonista: false, Master: true, Nome: "João", Nick: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", Excluido: false, Situacao: true, MinhaDescricao: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", EMailNet: "test@email.com", OnLine: false, SysOp: true, IsFinanceiro: false, Top: true, Sexo: false, Basico: true, Externo: false, EMailConfirmado: true, DataLimiteReset: "24/04/1975");
        _mockOperadorFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOperador.Object);
        // Act
        var result = _operadorWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.EMail.Should().Be("test@email.com");
        result.Pasta.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.Telefonista.Should().Be(false);
        result.Master.Should().Be(true);
        result.Nome.Should().Be("João");
        result.Nick.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Excluido.Should().Be(false);
        result.Situacao.Should().Be(true);
        result.MinhaDescricao.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.EMailNet.Should().Be("test@email.com");
        result.OnLine.Should().Be(false);
        result.SysOp.Should().Be(true);
        result.IsFinanceiro.Should().Be(false);
        result.Top.Should().Be(true);
        result.Sexo.Should().Be(false);
        result.Basico.Should().Be(true);
        result.Externo.Should().Be(false);
        result.EMailConfirmado.Should().Be(true);
        result.DataLimiteReset.Should().Be("24/04/1975");
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "Nome = @{DBOperadorDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBOperadorDicInfo.CampoNome}", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"),
        };
        SetupMockFOperador();
        _mockOperadorFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOperador.Object);
        // Act
        _operadorWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockOperadorFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBOperadorDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#region DateTime Tests
    [Fact]
    public void Read_WithValidDateDataLimiteResetFields_ShouldParseAndSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var testDate = "31/12/2024";
        SetupMockFOperador(DataLimiteReset: testDate);
        _mockOperadorFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOperador.Object);
        // Act
        var result = _operadorWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataLimiteReset.Should().Be("31/12/2024");
    }

    [Fact]
    public void Read_WithInvalidDateDataLimiteResetStrings_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFOperador(DataLimiteReset: "invalid-date");
        _mockOperadorFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOperador.Object);
        // Act
        var result = _operadorWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataLimiteReset.Should().Be("");
    }

    [Fact]
    public void Read_WithNullDateDataLimiteResetFields_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFOperador(DataLimiteReset: null);
        _mockOperadorFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOperador.Object);
        // Act
        var result = _operadorWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataLimiteReset.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("31/12/2024")]
    [InlineData("2025/01/01T23:59:59")]
    [InlineData("2000-02-29")] // Leap year
    [InlineData("2025/01/02T14:30:45.123")]
    public void Read_WithValidDateDataLimiteResetFormats_ShouldParseCorrectly(string dateString)
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedDate = DateTime.Parse(dateString);
        SetupMockFOperador(DataLimiteReset: dateString);
        _mockOperadorFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOperador.Object);
        // Act
        var result = _operadorWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataLimiteReset.Should().Be(dateString);
    }
#endregion
#endregion
}