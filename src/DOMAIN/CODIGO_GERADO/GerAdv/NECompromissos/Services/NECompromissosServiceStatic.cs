// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class NECompromissosService
{
    public (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterNECompromissos? filtro)
    {
        if (filtro == null)
            return null;
        var parameters = new List<SqlParameter>();
        if (filtro.PalavraChave != int.MinValue)
        {
            parameters.Add(new($"@{(DBNECompromissosDicInfo.PalavraChave)}", filtro.PalavraChave));
            if (filtro.PalavraChave_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBNECompromissosDicInfo.PalavraChave)}_end", filtro.PalavraChave_end));
            }
        }

        if (filtro.Provisionar != int.MinValue)
        {
            parameters.Add(new($"@{(DBNECompromissosDicInfo.Provisionar)}", filtro.Provisionar));
        }

        if (filtro.TipoCompromisso != int.MinValue)
        {
            parameters.Add(new($"@{(DBNECompromissosDicInfo.TipoCompromisso)}", filtro.TipoCompromisso));
            if (filtro.TipoCompromisso_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBNECompromissosDicInfo.TipoCompromisso)}_end", filtro.TipoCompromisso_end));
            }
        }

        if (!string.IsNullOrWhiteSpace(filtro.TextoCompromisso))
        {
            parameters.Add(new($"@{(DBNECompromissosDicInfo.TextoCompromisso)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.TextoCompromisso)));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{(DBNECompromissosDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
            if (filtro.Codigo_filtro_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBNECompromissosDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
            }
        }

        if (filtro.LogicalOperator.IsEmptyX() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        if (!(filtro.PalavraChave.IsEmptyX()) && filtro.PalavraChave_end.IsEmptyX())
        {
            cWhere.Append(filtro.PalavraChave.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBNECompromissosDicInfo.PTabelaNome}].[{DBNECompromissosDicInfo.PalavraChave}] = @{(DBNECompromissosDicInfo.PalavraChave)}");
        }
        else if (!(filtro.PalavraChave.IsEmptyX()) && !(filtro.PalavraChave_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBNECompromissosDicInfo.PTabelaNome}].{DBNECompromissosDicInfo.PalavraChave} BETWEEN @{(DBNECompromissosDicInfo.PalavraChave)} AND @{(DBNECompromissosDicInfo.PalavraChave)}_end");
        }

        cWhere.Append(filtro.Provisionar == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBNECompromissosDicInfo.PTabelaNome}].[{DBNECompromissosDicInfo.Provisionar}] = @{(DBNECompromissosDicInfo.Provisionar)}");
        if (!(filtro.TipoCompromisso.IsEmptyX()) && filtro.TipoCompromisso_end.IsEmptyX())
        {
            cWhere.Append(filtro.TipoCompromisso.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBNECompromissosDicInfo.PTabelaNome}].[{DBNECompromissosDicInfo.TipoCompromisso}] = @{(DBNECompromissosDicInfo.TipoCompromisso)}");
        }
        else if (!(filtro.TipoCompromisso.IsEmptyX()) && !(filtro.TipoCompromisso_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBNECompromissosDicInfo.PTabelaNome}].{DBNECompromissosDicInfo.TipoCompromisso} BETWEEN @{(DBNECompromissosDicInfo.TipoCompromisso)} AND @{(DBNECompromissosDicInfo.TipoCompromisso)}_end");
        }

        cWhere.Append(filtro.TextoCompromisso.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBNECompromissosDicInfo.PTabelaNome}].[{DBNECompromissosDicInfo.TextoCompromisso}]  {DevourerConsts.MsiCollate} like @{(DBNECompromissosDicInfo.TextoCompromisso)}");
        if (!(filtro.Codigo_filtro.IsEmptyX()) && filtro.Codigo_filtro_end.IsEmptyX())
        {
            cWhere.Append(filtro.Codigo_filtro.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBNECompromissosDicInfo.PTabelaNome}].[{DBNECompromissosDicInfo.CampoCodigo}] = @{(DBNECompromissosDicInfo.CampoCodigo)}");
        }
        else if (!(filtro.Codigo_filtro.IsEmptyX()) && !(filtro.Codigo_filtro_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBNECompromissosDicInfo.PTabelaNome}].{DBNECompromissosDicInfo.CampoCodigo} BETWEEN @{(DBNECompromissosDicInfo.CampoCodigo)} AND @{(DBNECompromissosDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private string GetFilterHash(Filters.FilterNECompromissos? filtro)
    {
        if (filtro == null)
            return string.Empty;
        var json = JsonSerializer.Serialize(filtro);
        using var sha256 = SHA256.Create();
        var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(json));
        return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
    }

    private async Task<IEnumerable<NECompromissosResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}