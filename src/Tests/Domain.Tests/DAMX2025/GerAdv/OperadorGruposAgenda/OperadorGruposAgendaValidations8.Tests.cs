// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class OperadorGruposAgendaValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFOperadorGruposAgendaFactory> _mockOperadorGruposAgendaFactory;
    private readonly Mock<IOperadorGruposAgendaReader> _mockReader;
    private readonly OperadorGruposAgendaValidation _validation;
    private readonly Mock<IOperadorGruposAgendaService> _mockOperadorGruposAgendaService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IOperadorReader> _mockOperadorReader;
    private readonly OperadorGruposAgendaService _service;
    private readonly string _validUri = "test-uri";
    public OperadorGruposAgendaValidationTests()
    {
        _mockOperadorGruposAgendaFactory = new Mock<IFOperadorGruposAgendaFactory>();
        _mockReader = new Mock<IOperadorGruposAgendaReader>();
        _validation = new OperadorGruposAgendaValidation();
        _mockOperadorGruposAgendaService = new Mock<IOperadorGruposAgendaService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockOperadorReader = new Mock<IOperadorReader>();
    }

#region Class Structure Tests
    [Fact]
    public void OperadorGruposAgendaValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IOperadorGruposAgendaValidation>();
    }

    [Fact]
    public void OperadorGruposAgendaValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(OperadorGruposAgendaValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void OperadorGruposAgendaValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(OperadorGruposAgendaValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.OperadorGruposAgenda CreateValidOperadorGruposAgenda()
    {
        return new Models.OperadorGruposAgenda
        {
            Id = 1,
            SQLWhere = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Nome = "João",
            Operador = 1,
            GUID = Guid.NewGuid().ToString()
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockOperadorGruposAgendaService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterOperadorGruposAgenda>(), It.IsAny<string>())).ReturnsAsync(new List<OperadorGruposAgendaResponseAll>());
        // Setup other mocks but don't override the OperadorGruposAgendas service mock
        _mockOperadorReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.OperadorResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockOperadorGruposAgendaService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterOperadorGruposAgenda>(), It.IsAny<string>())).ReturnsAsync(new List<OperadorGruposAgendaResponseAll>());
        // Setup other mocks but don't override the OperadorGruposAgendas service mock
        _mockOperadorReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.OperadorResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var operadorgruposagenda = new Models.OperadorGruposAgenda
        {
            Id = 1,
            SQLWhere = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Nome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Operador = 1,
            GUID = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(operadorgruposagenda, _mockOperadorGruposAgendaService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockOperadorGruposAgendaService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region ValidateReg Required SQLWhere Method Tests 
    [Fact]
    public async Task ValidateReg_WithEmptySQLWhere_ShouldThrowSGValidationException()
    {
        // Arrange
        var operadorgruposagenda = CreateValidOperadorGruposAgenda();
        operadorgruposagenda.SQLWhere = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(operadorgruposagenda, _mockOperadorGruposAgendaService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullSQLWhere_ShouldThrowSGValidationException()
    {
        // Arrange
        var operadorgruposagenda = CreateValidOperadorGruposAgenda();
        operadorgruposagenda.SQLWhere = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(operadorgruposagenda, _mockOperadorGruposAgendaService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataSQLWhere_ShouldReturnTrue()
    {
        // Arrange
        var operadorgruposagenda = CreateValidOperadorGruposAgenda();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(operadorgruposagenda, _mockOperadorGruposAgendaService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceSQLWhere_ShouldThrowSGValidationException()
    {
        // Arrange
        var operadorgruposagenda = CreateValidOperadorGruposAgenda();
        operadorgruposagenda.SQLWhere = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(operadorgruposagenda, _mockOperadorGruposAgendaService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
#region ValidateReg Required Nome Method Tests 
    [Fact]
    public async Task ValidateReg_WithEmptyNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var operadorgruposagenda = CreateValidOperadorGruposAgenda();
        operadorgruposagenda.Nome = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(operadorgruposagenda, _mockOperadorGruposAgendaService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var operadorgruposagenda = CreateValidOperadorGruposAgenda();
        operadorgruposagenda.Nome = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(operadorgruposagenda, _mockOperadorGruposAgendaService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataNome_ShouldReturnTrue()
    {
        // Arrange
        var operadorgruposagenda = CreateValidOperadorGruposAgenda();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(operadorgruposagenda, _mockOperadorGruposAgendaService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var operadorgruposagenda = CreateValidOperadorGruposAgenda();
        operadorgruposagenda.Nome = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(operadorgruposagenda, _mockOperadorGruposAgendaService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
#region ValidateReg Required GUID Method Tests 
    [Fact]
    public async Task ValidateReg_WithEmptyGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var operadorgruposagenda = CreateValidOperadorGruposAgenda();
        operadorgruposagenda.GUID = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(operadorgruposagenda, _mockOperadorGruposAgendaService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var operadorgruposagenda = CreateValidOperadorGruposAgenda();
        operadorgruposagenda.GUID = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(operadorgruposagenda, _mockOperadorGruposAgendaService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataGUID_ShouldReturnTrue()
    {
        // Arrange
        var operadorgruposagenda = CreateValidOperadorGruposAgenda();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(operadorgruposagenda, _mockOperadorGruposAgendaService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var operadorgruposagenda = CreateValidOperadorGruposAgenda();
        operadorgruposagenda.GUID = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(operadorgruposagenda, _mockOperadorGruposAgendaService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
#region Foreign Key Validation Tests - Operador
    [Fact]
    public async Task ValidateReg_WithInvalidOperador_ShouldThrowSGValidationException()
    {
        // Arrange
        var operadorgruposagenda = CreateValidOperadorGruposAgenda();
        operadorgruposagenda.Operador = 999;
        _mockOperadorReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.OperadorResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(operadorgruposagenda, _mockOperadorGruposAgendaService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedOperadorId_ShouldThrowSGValidationException()
    {
        // Arrange
        var operadorgruposagenda = CreateValidOperadorGruposAgenda();
        operadorgruposagenda.Operador = 999;
        var reg888 = new Models.Response.OperadorResponse
        {
            Id = 888
        }; // Different ID
        _mockOperadorReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(operadorgruposagenda, _mockOperadorGruposAgendaService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidOperador_ShouldPass()
    {
        // Arrange
        var operadorgruposagenda = CreateValidOperadorGruposAgenda();
        operadorgruposagenda.Operador = 123;
        var reg123 = new Models.Response.OperadorResponse
        {
            Id = 123
        };
        _mockOperadorReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(operadorgruposagenda, _mockOperadorGruposAgendaService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}