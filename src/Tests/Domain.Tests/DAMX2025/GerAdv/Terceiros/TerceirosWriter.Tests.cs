// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class TerceirosWriterTests
{
    private readonly Mock<IFTerceirosFactory> _mockTerceirosFactory;
    private readonly Mock<FTerceiros> _mockFTerceiros;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly TerceirosWriter _terceirosWriter;
    public TerceirosWriterTests()
    {
        _mockTerceirosFactory = new Mock<IFTerceirosFactory>();
        _mockFTerceiros = new Mock<FTerceiros>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _terceirosWriter = new TerceirosWriter(_mockTerceirosFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var terceiros = CreateValidTerceirosModel();
        terceiros.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockTerceirosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFTerceiros.Object);
        _mockFTerceiros.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _terceirosWriter.WriteAsync(terceiros, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFTerceiros.Object);
        _mockTerceirosFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockTerceirosFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFTerceiros.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var terceiros = CreateValidTerceirosModel();
        terceiros.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockTerceirosFactory.Setup(x => x.CreateFromIdAsync(terceiros.Id, _mockConnection.Object)).ReturnsAsync(_mockFTerceiros.Object);
        _mockFTerceiros.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _terceirosWriter.WriteAsync(terceiros, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFTerceiros.Object);
        _mockTerceirosFactory.Verify(x => x.CreateFromIdAsync(terceiros.Id, _mockConnection.Object), Times.Once);
        _mockTerceirosFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFTerceiros.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var terceiros = CreateValidTerceirosModel();
        var auditorQuem = 99;
        _mockTerceirosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFTerceiros.Object);
        _mockFTerceiros.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _terceirosWriter.WriteAsync(terceiros, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFTerceiros.Object);
        _mockFTerceiros.VerifySet(x => x.FProcesso = terceiros.Processo, Times.Once);
        _mockFTerceiros.VerifySet(x => x.FNome = terceiros.Nome, Times.Once);
        _mockFTerceiros.VerifySet(x => x.FSituacao = terceiros.Situacao, Times.Once);
        _mockFTerceiros.VerifySet(x => x.FCidade = terceiros.Cidade, Times.Once);
        _mockFTerceiros.VerifySet(x => x.FEndereco = terceiros.Endereco, Times.Once);
        _mockFTerceiros.VerifySet(x => x.FBairro = terceiros.Bairro, Times.Once);
        _mockFTerceiros.VerifySet(x => x.FCEP = It.IsAny<string>(), Times.Once); // CEP é limpo pelo ClearInputCep()
        _mockFTerceiros.VerifySet(x => x.FFone = terceiros.Fone, Times.Once);
        _mockFTerceiros.VerifySet(x => x.FFax = terceiros.Fax, Times.Once);
        _mockFTerceiros.VerifySet(x => x.FOBS = terceiros.OBS, Times.Once);
        _mockFTerceiros.VerifySet(x => x.FEMail = terceiros.EMail, Times.Once);
        _mockFTerceiros.VerifySet(x => x.FClass = terceiros.Class, Times.Once);
        _mockFTerceiros.VerifySet(x => x.FVaraForoComarca = terceiros.VaraForoComarca, Times.Once);
        _mockFTerceiros.VerifySet(x => x.FSexo = terceiros.Sexo, Times.Once);
        _mockFTerceiros.VerifySet(x => x.FGUID = terceiros.GUID, Times.Once);
        _mockFTerceiros.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var terceiros = CreateValidTerceirosModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockTerceirosFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _terceirosWriter.WriteAsync(terceiros, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var terceiros = CreateValidTerceirosModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockTerceirosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFTerceiros.Object);
        _mockFTerceiros.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _terceirosWriter.WriteAsync(terceiros, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var terceirosResponse = new TerceirosResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockTerceirosFactory.Setup(x => x.DeleteAsync(operadorId, terceirosResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _terceirosWriter.Delete(terceirosResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockTerceirosFactory.Verify(x => x.DeleteAsync(operadorId, terceirosResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var terceirosResponse = new TerceirosResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockTerceirosFactory.Setup(x => x.DeleteAsync(operadorId, terceirosResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _terceirosWriter.Delete(terceirosResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var terceirosResponse = new TerceirosResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockTerceirosFactory.Setup(x => x.DeleteAsync(operadorId, terceirosResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _terceirosWriter.Delete(terceirosResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new TerceirosWriter(_mockTerceirosFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new TerceirosWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.Terceiros CreateValidTerceirosModel()
    {
        return new Models.Terceiros
        {
            Id = 0,
            Processo = 1,
            Nome = "João",
            Situacao = 1,
            Cidade = 1,
            Endereco = "Rua das Flores, 123",
            Bairro = "Centro",
            CEP = "01234-567",
            Fone = "(11) 99999-9999",
            Fax = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            OBS = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            EMail = "test@email.com",
            Class = "A",
            VaraForoComarca = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Sexo = false,
            GUID = Guid.NewGuid().ToString()
        };
    }
#endregion
}