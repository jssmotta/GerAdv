// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Readers;
public partial class ContratosReader(IFContratosFactory contratosFactory) : IContratosReader
{
    private readonly IFContratosFactory _contratosFactory = contratosFactory ?? throw new ArgumentNullException();
    public async Task<IEnumerable<ContratosResponseAll>> Listar(int max, string uri, string cWhere, List<SqlParameter>? parameters, string order, CancellationToken cancellationToken) => await ListarTabela(BuildSqlQuery(DBContratos.CamposSqlX, cWhere, order, max), parameters, uri, caching: false, max: max, cancellationToken: cancellationToken);
    private async Task<IEnumerable<ContratosResponseAll>> ListarTabela(string sql, List<SqlParameter>? parameters, string uri, bool caching = false, int max = 200, CancellationToken cancellationToken = default)
    {
        var result = new List<ContratosResponseAll>(max);
        await using var connection = Configuracoes.GetConnectionByUri(uri);
        await using var cmd = new SqlCommand(cmdText: ConfiguracoesDBT.CmdSql(sql), connection: connection?.InnerConnection)
        {
            CommandTimeout = 30
        };
        foreach (var param in parameters)
        {
            if (!cmd.Parameters.Contains(param.ParameterName))
            {
                var newParam = new SqlParameter(param.ParameterName, param.Value)
                {
                    SqlDbType = param.SqlDbType,
                    Direction = param.Direction,
                    Size = param.Size,
                    Precision = param.Precision,
                    Scale = param.Scale
                };
                cmd.Parameters.Add(newParam);
            }
        }

        await using var reader = await cmd.ExecuteReaderAsync(CommandBehavior.SingleResult);
        while (await reader.ReadAsync())
        {
            if (cancellationToken.IsCancellationRequested)
                return result;
            result.Add(ReadAll(_contratosFactory.CreateFromReader(reader), reader)!);
        }

        return result;
    }

    public async Task<ContratosResponse?> Read(int id, MsiSqlConnection? oCnn)
    {
        using var dbRec = await _contratosFactory.CreateFromIdAsync(id, oCnn);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public async Task<Models.Contratos?> ReadM(int id, MsiSqlConnection? oCnn)
    {
        using var dbRec = await _contratosFactory.CreateFromIdAsync(id, oCnn);
        var contratos = new Models.Contratos
        {
            Id = dbRec.ID,
            Processo = dbRec.FProcesso,
            Cliente = dbRec.FCliente,
            Advogado = dbRec.FAdvogado,
            Dia = dbRec.FDia,
            Valor = dbRec.FValor,
            OcultarRelatorio = dbRec.FOcultarRelatorio,
            PercEscritorio = dbRec.FPercEscritorio,
            ValorConsultoria = dbRec.FValorConsultoria,
            GUID = dbRec.FGUID ?? string.Empty,
            TipoCobranca = dbRec.FTipoCobranca,
            Protestar = dbRec.FProtestar ?? string.Empty,
            Juros = dbRec.FJuros ?? string.Empty,
            ValorRealizavel = dbRec.FValorRealizavel,
            DOCUMENTO = dbRec.FDOCUMENTO ?? string.Empty,
            EMail1 = dbRec.FEMail1 ?? string.Empty,
            EMail2 = dbRec.FEMail2 ?? string.Empty,
            EMail3 = dbRec.FEMail3 ?? string.Empty,
            Pessoa1 = dbRec.FPessoa1 ?? string.Empty,
            Pessoa2 = dbRec.FPessoa2 ?? string.Empty,
            Pessoa3 = dbRec.FPessoa3 ?? string.Empty,
            OBS = dbRec.FOBS ?? string.Empty,
            ClienteContrato = dbRec.FClienteContrato,
            IdExtrangeiro = dbRec.FIdExtrangeiro,
            ChaveContrato = dbRec.FChaveContrato ?? string.Empty,
            Avulso = dbRec.FAvulso,
            Suspenso = dbRec.FSuspenso,
            Multa = dbRec.FMulta ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataInicio, out DateTime XDataInicio))
        {
            contratos.DataInicio = dbRec.FDataInicio;
            contratos.DataInicio_date = XDataInicio;
        }

        if (DateTime.TryParse(dbRec.FDataTermino, out DateTime XDataTermino))
        {
            contratos.DataTermino = dbRec.FDataTermino;
            contratos.DataTermino_date = XDataTermino;
        }

        return contratos;
    }

    public ContratosResponse? Read(FContratos dbRec, MsiSqlConnection? oCnn)
    {
        return Read(dbRec);
    }

    public ContratosResponse? Read(string where, List<SqlParameter>? parameters, MsiSqlConnection? oCnn)
    {
        using var dbRec = _contratosFactory.CreateFromParameters(parameters, oCnn, sqlWhere: where);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public ContratosResponse? Read(FContratos dbRec) // Track 001.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var contratos = new ContratosResponse
        {
            Id = dbRec.ID,
            Processo = dbRec.FProcesso,
            Cliente = dbRec.FCliente,
            Advogado = dbRec.FAdvogado,
            Dia = dbRec.FDia,
            Valor = dbRec.FValor,
            OcultarRelatorio = dbRec.FOcultarRelatorio,
            PercEscritorio = dbRec.FPercEscritorio,
            ValorConsultoria = dbRec.FValorConsultoria,
            GUID = dbRec.FGUID ?? string.Empty,
            TipoCobranca = dbRec.FTipoCobranca,
            Protestar = dbRec.FProtestar ?? string.Empty,
            Juros = dbRec.FJuros ?? string.Empty,
            ValorRealizavel = dbRec.FValorRealizavel,
            DOCUMENTO = dbRec.FDOCUMENTO ?? string.Empty,
            EMail1 = dbRec.FEMail1 ?? string.Empty,
            EMail2 = dbRec.FEMail2 ?? string.Empty,
            EMail3 = dbRec.FEMail3 ?? string.Empty,
            Pessoa1 = dbRec.FPessoa1 ?? string.Empty,
            Pessoa2 = dbRec.FPessoa2 ?? string.Empty,
            Pessoa3 = dbRec.FPessoa3 ?? string.Empty,
            OBS = dbRec.FOBS ?? string.Empty,
            ClienteContrato = dbRec.FClienteContrato,
            IdExtrangeiro = dbRec.FIdExtrangeiro,
            ChaveContrato = dbRec.FChaveContrato ?? string.Empty,
            Avulso = dbRec.FAvulso,
            Suspenso = dbRec.FSuspenso,
            Multa = dbRec.FMulta ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataInicio, out DateTime XDataInicio))
        {
            contratos.DataInicio = dbRec.FDataInicio;
            contratos.DataInicio_date = XDataInicio;
        }

        if (DateTime.TryParse(dbRec.FDataTermino, out DateTime XDataTermino))
        {
            contratos.DataTermino = dbRec.FDataTermino;
            contratos.DataTermino_date = XDataTermino;
        }

        return contratos;
    }

    public ContratosResponse? Read(SG.GerAdv.DBContratos dbRec) // Track 002.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var contratos = new ContratosResponse
        {
            Id = dbRec.ID,
            Processo = dbRec.FProcesso,
            Cliente = dbRec.FCliente,
            Advogado = dbRec.FAdvogado,
            Dia = dbRec.FDia,
            Valor = dbRec.FValor,
            OcultarRelatorio = dbRec.FOcultarRelatorio,
            PercEscritorio = dbRec.FPercEscritorio,
            ValorConsultoria = dbRec.FValorConsultoria,
            GUID = dbRec.FGUID ?? string.Empty,
            TipoCobranca = dbRec.FTipoCobranca,
            Protestar = dbRec.FProtestar ?? string.Empty,
            Juros = dbRec.FJuros ?? string.Empty,
            ValorRealizavel = dbRec.FValorRealizavel,
            DOCUMENTO = dbRec.FDOCUMENTO ?? string.Empty,
            EMail1 = dbRec.FEMail1 ?? string.Empty,
            EMail2 = dbRec.FEMail2 ?? string.Empty,
            EMail3 = dbRec.FEMail3 ?? string.Empty,
            Pessoa1 = dbRec.FPessoa1 ?? string.Empty,
            Pessoa2 = dbRec.FPessoa2 ?? string.Empty,
            Pessoa3 = dbRec.FPessoa3 ?? string.Empty,
            OBS = dbRec.FOBS ?? string.Empty,
            ClienteContrato = dbRec.FClienteContrato,
            IdExtrangeiro = dbRec.FIdExtrangeiro,
            ChaveContrato = dbRec.FChaveContrato ?? string.Empty,
            Avulso = dbRec.FAvulso,
            Suspenso = dbRec.FSuspenso,
            Multa = dbRec.FMulta ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataInicio, out DateTime XDataInicio))
        {
            contratos.DataInicio = dbRec.FDataInicio;
            contratos.DataInicio_date = XDataInicio;
        }

        if (DateTime.TryParse(dbRec.FDataTermino, out DateTime XDataTermino))
        {
            contratos.DataTermino = dbRec.FDataTermino;
            contratos.DataTermino_date = XDataTermino;
        }

        return contratos;
    }

    public ContratosResponseAll? ReadAll(FContratos dbRec, IDataRecord dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var contratos = new ContratosResponseAll
        {
            Id = dbRec.ID,
            Processo = dbRec.FProcesso,
            Cliente = dbRec.FCliente,
            Advogado = dbRec.FAdvogado,
            Dia = dbRec.FDia,
            Valor = dbRec.FValor,
            OcultarRelatorio = dbRec.FOcultarRelatorio,
            PercEscritorio = dbRec.FPercEscritorio,
            ValorConsultoria = dbRec.FValorConsultoria,
            GUID = dbRec.FGUID ?? string.Empty,
            TipoCobranca = dbRec.FTipoCobranca,
            Protestar = dbRec.FProtestar ?? string.Empty,
            Juros = dbRec.FJuros ?? string.Empty,
            ValorRealizavel = dbRec.FValorRealizavel,
            DOCUMENTO = dbRec.FDOCUMENTO ?? string.Empty,
            EMail1 = dbRec.FEMail1 ?? string.Empty,
            EMail2 = dbRec.FEMail2 ?? string.Empty,
            EMail3 = dbRec.FEMail3 ?? string.Empty,
            Pessoa1 = dbRec.FPessoa1 ?? string.Empty,
            Pessoa2 = dbRec.FPessoa2 ?? string.Empty,
            Pessoa3 = dbRec.FPessoa3 ?? string.Empty,
            OBS = dbRec.FOBS ?? string.Empty,
            ClienteContrato = dbRec.FClienteContrato,
            IdExtrangeiro = dbRec.FIdExtrangeiro,
            ChaveContrato = dbRec.FChaveContrato ?? string.Empty,
            Avulso = dbRec.FAvulso,
            Suspenso = dbRec.FSuspenso,
            Multa = dbRec.FMulta ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataInicio, out DateTime XDataInicio))
        {
            contratos.DataInicio = dbRec.FDataInicio;
            contratos.DataInicio_date = XDataInicio;
        }

        if (DateTime.TryParse(dbRec.FDataTermino, out DateTime XDataTermino))
        {
            contratos.DataTermino = dbRec.FDataTermino;
            contratos.DataTermino_date = XDataTermino;
        }

        try
        {
            contratos.NomeClientes = dr[DBClientesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            contratos.NomeAdvogados = dr[DBAdvogadosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return contratos;
    }

    public ContratosResponseAll? ReadAll(SG.GerAdv.DBContratos dbRec, DataRow dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var contratos = new ContratosResponseAll
        {
            Id = dbRec.ID,
            Processo = dbRec.FProcesso,
            Cliente = dbRec.FCliente,
            Advogado = dbRec.FAdvogado,
            Dia = dbRec.FDia,
            Valor = dbRec.FValor,
            OcultarRelatorio = dbRec.FOcultarRelatorio,
            PercEscritorio = dbRec.FPercEscritorio,
            ValorConsultoria = dbRec.FValorConsultoria,
            GUID = dbRec.FGUID ?? string.Empty,
            TipoCobranca = dbRec.FTipoCobranca,
            Protestar = dbRec.FProtestar ?? string.Empty,
            Juros = dbRec.FJuros ?? string.Empty,
            ValorRealizavel = dbRec.FValorRealizavel,
            DOCUMENTO = dbRec.FDOCUMENTO ?? string.Empty,
            EMail1 = dbRec.FEMail1 ?? string.Empty,
            EMail2 = dbRec.FEMail2 ?? string.Empty,
            EMail3 = dbRec.FEMail3 ?? string.Empty,
            Pessoa1 = dbRec.FPessoa1 ?? string.Empty,
            Pessoa2 = dbRec.FPessoa2 ?? string.Empty,
            Pessoa3 = dbRec.FPessoa3 ?? string.Empty,
            OBS = dbRec.FOBS ?? string.Empty,
            ClienteContrato = dbRec.FClienteContrato,
            IdExtrangeiro = dbRec.FIdExtrangeiro,
            ChaveContrato = dbRec.FChaveContrato ?? string.Empty,
            Avulso = dbRec.FAvulso,
            Suspenso = dbRec.FSuspenso,
            Multa = dbRec.FMulta ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataInicio, out DateTime XDataInicio))
        {
            contratos.DataInicio = dbRec.FDataInicio;
            contratos.DataInicio_date = XDataInicio;
        }

        if (DateTime.TryParse(dbRec.FDataTermino, out DateTime XDataTermino))
        {
            contratos.DataTermino = dbRec.FDataTermino;
            contratos.DataTermino_date = XDataTermino;
        }

        try
        {
            contratos.NomeClientes = dr[DBClientesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            contratos.NomeAdvogados = dr[DBAdvogadosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return contratos;
    }
}