// 100% auto-generated by Source Genesys WebApi Front & Back Creator
                     // copyright © 2000-2025 Menphis - Sistemas Inteligentes
                     // This file is part of the Source Genesys project                     
                    // Tracking: Forms.tsx.txt
'use client';
import { IAlarmSMS } from '@/app/GerAdv_TS/AlarmSMS/Interfaces/interface.AlarmSMS';
import { useRouter } from 'next/navigation';
import React, { useEffect, useState, useRef } from 'react';
import { useSystemContext } from '@/app/context/SystemContext';
import { getParamFromUrl } from '@/app/tools/helpers';
import '@/app/styles/CrudFormsBase.css';
import '@/app/styles/CrudFormsMobile.css';
import '@/app/styles/CrudForms.css'; // [ INDEX_SIZE ]
import ButtonSalvarCrud from '@/app/components/Cruds/ButtonSalvarCrud';
import { useIsMobile } from '@/app/context/MobileContext';
import DeleteButton from '@/app/components/Cruds/DeleteButton';
import { AlarmSMSApi } from '../../Apis/ApiAlarmSMS';
import { useValidationsAlarmSMS } from '../../Hooks/hookAlarmSMS';
import OperadorComboBox from '@/app/GerAdv_TS/Operador/ComboBox/Operador';
import AgendaComboBox from '@/app/GerAdv_TS/Agenda/ComboBox/Agenda';
import RecadosComboBox from '@/app/GerAdv_TS/Recados/ComboBox/Recados';
import { OperadorApi } from '@/app/GerAdv_TS/Operador/Apis/ApiOperador';
import { AgendaApi } from '@/app/GerAdv_TS/Agenda/Apis/ApiAgenda';
import { RecadosApi } from '@/app/GerAdv_TS/Recados/Apis/ApiRecados';
import InputDescription from '@/app/components/Inputs/InputDescription';
import InputInput from '@/app/components/Inputs/InputInput'
import InputCheckbox from '@/app/components/Inputs/InputCheckbox';
interface AlarmSMSFormProps {
  alarmsmsData: IAlarmSMS;
  onChange: (e: any) => void;
  onSubmit: (e: React.FormEvent) => void;
  onClose: () => void;
  onError?: () => void;
  onReload?: () => void;
  onSuccess?: (registro?: any) => void;
}

export const AlarmSMSForm: React.FC<AlarmSMSFormProps> = ({
  alarmsmsData, 
  onChange, 
  onSubmit, 
  onClose, 
  onError, 
  onReload, 
  onSuccess, 
}) => {
const router = useRouter();
const { systemContext } = useSystemContext();
const isMobile = useIsMobile();
const dadoApi = new AlarmSMSApi(systemContext?.Uri ?? '', systemContext?.Token ?? '');
const [isSubmitting, setIsSubmitting] = useState(false);
const initialized = useRef(false);
const validationForm = useValidationsAlarmSMS();
const [nomeOperador, setNomeOperador] = useState('');
const operadorApi = new OperadorApi(systemContext?.Uri ?? '', systemContext?.Token ?? '');
const [nomeAgenda, setNomeAgenda] = useState('');
const agendaApi = new AgendaApi(systemContext?.Uri ?? '', systemContext?.Token ?? '');
const [nomeRecados, setNomeRecados] = useState('');
const recadosApi = new RecadosApi(systemContext?.Uri ?? '', systemContext?.Token ?? '');

if (getParamFromUrl('operador') > 0) {
  if (alarmsmsData.id === 0 && alarmsmsData.operador == 0) {
    operadorApi
    .getById(getParamFromUrl('operador'))
    .then((response) => {
      setNomeOperador(response.data.rnome);
    })
    .catch((error) => {
      console.log('Error unexpected');
    });

    alarmsmsData.operador = getParamFromUrl('operador');
  }
}

if (getParamFromUrl('agenda') > 0) {
  if (alarmsmsData.id === 0 && alarmsmsData.agenda == 0) {
    agendaApi
    .getById(getParamFromUrl('agenda'))
    .then((response) => {
      setNomeAgenda(response.data.campo);
    })
    .catch((error) => {
      console.log('Error unexpected');
    });

    alarmsmsData.agenda = getParamFromUrl('agenda');
  }
}

if (getParamFromUrl('recados') > 0) {
  if (alarmsmsData.id === 0 && alarmsmsData.recado == 0) {
    recadosApi
    .getById(getParamFromUrl('recados'))
    .then((response) => {
      setNomeRecados(response.data.campo);
    })
    .catch((error) => {
      console.log('Error unexpected');
    });

    alarmsmsData.recado = getParamFromUrl('recados');
  }
}
const addValorOperador = (e: any) => {
  if (e?.id>0)
    onChange({ target: { name: 'operador', value: e.id } });
  };
  const addValorAgenda = (e: any) => {
    if (e?.id>0)
      onChange({ target: { name: 'agenda', value: e.id } });
    };
    const addValorRecado = (e: any) => {
      if (e?.id>0)
        onChange({ target: { name: 'recado', value: e.id } });
      };
      const onConfirm = (e: React.FormEvent) => {
        e.preventDefault();
        if (e.stopPropagation) e.stopPropagation();

          if (!isSubmitting) {
            setIsSubmitting(true);

            try {
              onSubmit(e);
            } catch (error) {
            console.log('Erro ao submeter formulário de AlarmSMS:');
            setIsSubmitting(false);
            if (onError) onError();
            }
          }
        };
        const handleCancel = () => {
          if (onReload) {
            onReload(); // Recarrega os dados originais
          } else {
          onClose(); // Comportamento padrão se não há callback de recarga
        }
      };

      const handleDirectSave = () => {
        if (!isSubmitting) {
          setIsSubmitting(true);

          try {
            const syntheticEvent = {
              preventDefault: () => { }, 
              target: document.getElementById(`AlarmSMSForm-${alarmsmsData.id}`)
            } as unknown as React.FormEvent;

            onSubmit(syntheticEvent);
          } catch (error) {
          console.log('Erro ao salvar AlarmSMS diretamente');
          setIsSubmitting(false);
          if (onError) onError();
          }
        }
      };
      useEffect(() => {
        const el = document.querySelector('.nameFormMobile');
        if (el) {
          el.textContent = alarmsmsData?.id == 0 ? 'Editar AlarmSMS' : 'Adicionar Alarm S M S';
        }
      }, [alarmsmsData.id]);
      return (
      <>
      {!isMobile ? <style jsx global>{`
        @media (max-width: 1366px) {
          html {
            zoom: 0.8 !important;
          }
        }
        `}</style> : null}

        <div className={isMobile ? 'form-container form-container-AlarmSMS' : 'form-container form-container-AlarmSMS'}>

          <form className='formInputCadInc' id={`AlarmSMSForm-${alarmsmsData.id}`} onSubmit={onConfirm}>
            {!isMobile && (
              <ButtonSalvarCrud isMobile={false} validationForm={validationForm} entity='AlarmSMS' data={alarmsmsData} isSubmitting={isSubmitting} onClose={onClose} formId={`AlarmSMSForm-${alarmsmsData.id}`} preventPropagation={true} onSave={handleDirectSave} onCancel={handleCancel} />
              )}
              <div className='grid-container'>

                <InputDescription
                type='text'
                id='descricao'
                label='alarm s m s'
                dataForm={alarmsmsData}
                className='inputIncNome'
                name='descricao'
                value={alarmsmsData.descricao}
                placeholder={`Digite nome alarm s m s`}
                onChange={onChange}
                required
                disabled={alarmsmsData.id > 0}
                />

                <InputInput
                type='text'
                maxLength={2048}
                id='hora'
                label='Hora'
                dataForm={alarmsmsData}
                className='inputIncNome'
                name='hora'
                value={alarmsmsData.hora}
                onChange={onChange}
                />


                <InputInput
                type='text'
                maxLength={2048}
                id='minuto'
                label='Minuto'
                dataForm={alarmsmsData}
                className='inputIncNome'
                name='minuto'
                value={alarmsmsData.minuto}
                onChange={onChange}
                />

                <InputCheckbox dataForm={alarmsmsData} label='D1' name='d1' checked={alarmsmsData.d1} onChange={onChange} />
                <InputCheckbox dataForm={alarmsmsData} label='D2' name='d2' checked={alarmsmsData.d2} onChange={onChange} />
                <InputCheckbox dataForm={alarmsmsData} label='D3' name='d3' checked={alarmsmsData.d3} onChange={onChange} />
                <InputCheckbox dataForm={alarmsmsData} label='D4' name='d4' checked={alarmsmsData.d4} onChange={onChange} />
                <InputCheckbox dataForm={alarmsmsData} label='D5' name='d5' checked={alarmsmsData.d5} onChange={onChange} />
                <InputCheckbox dataForm={alarmsmsData} label='D6' name='d6' checked={alarmsmsData.d6} onChange={onChange} />
              </div><div className='grid-container'><InputCheckbox dataForm={alarmsmsData} label='D7' name='d7' checked={alarmsmsData.d7} onChange={onChange} />

              <InputInput
              required
              type='email'
              maxLength={50}
              id='email'
              label='EMail'
              dataForm={alarmsmsData}
              className='inputIncNome'
              name='email'
              value={alarmsmsData.email}
              onChange={onChange}
              />

              <InputCheckbox dataForm={alarmsmsData} label='Desativar' name='desativar' checked={alarmsmsData.desativar} onChange={onChange} />

              <InputInput
              type='text'
              maxLength={2048}
              id='today'
              label='Today'
              dataForm={alarmsmsData}
              className='inputIncNome'
              name='today'
              value={alarmsmsData.today}
              onChange={onChange}
              />

              <InputCheckbox dataForm={alarmsmsData} label='ExcetoDiasFelizes' name='excetodiasfelizes' checked={alarmsmsData.excetodiasfelizes} onChange={onChange} />
              <InputCheckbox dataForm={alarmsmsData} label='Desktop' name='desktop' checked={alarmsmsData.desktop} onChange={onChange} />

              <InputInput
              type='text'
              maxLength={2048}
              id='alertardatahora'
              label='AlertarDataHora'
              dataForm={alarmsmsData}
              className='inputIncNome'
              name='alertardatahora'
              value={alarmsmsData.alertardatahora}
              onChange={onChange}
              />


              <OperadorComboBox
              name={'operador'}
              dataForm={alarmsmsData}
              value={alarmsmsData.operador}
              setValue={addValorOperador}
              label={'Operador'}
              />

              <InputInput
              type='text'
              maxLength={100}
              id='guidexo'
              label='GuidExo'
              dataForm={alarmsmsData}
              className='inputIncNome'
              name='guidexo'
              value={alarmsmsData.guidexo}
              onChange={onChange}
              />

            </div><div className='grid-container'>
              <AgendaComboBox
              name={'agenda'}
              dataForm={alarmsmsData}
              value={alarmsmsData.agenda}
              setValue={addValorAgenda}
              label={'Compromisso'}
              />

              <RecadosComboBox
              name={'recado'}
              dataForm={alarmsmsData}
              value={alarmsmsData.recado}
              setValue={addValorRecado}
              label={'Recados'}
              />

              <InputInput
              type='text'
              maxLength={2048}
              id='emocao'
              label='Emocao'
              dataForm={alarmsmsData}
              className='inputIncNome'
              name='emocao'
              value={alarmsmsData.emocao}
              onChange={onChange}
              />

            </div>
          </form>


          {isMobile && (
            <ButtonSalvarCrud isMobile={true} validationForm={validationForm} entity='AlarmSMS' data={alarmsmsData} isSubmitting={isSubmitting} onClose={onClose} formId={`AlarmSMSForm-${alarmsmsData.id}`} preventPropagation={true} onSave={handleDirectSave} onCancel={handleCancel} />
            )}
            <DeleteButton page={'/pages/alarmsms'} id={alarmsmsData.id} closeModel={onClose} dadoApi={dadoApi} />
          </div>
          <div className='form-spacer'></div>
          </>
        );
      };