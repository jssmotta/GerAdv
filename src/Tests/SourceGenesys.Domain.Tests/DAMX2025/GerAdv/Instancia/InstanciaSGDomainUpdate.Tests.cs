// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// ============================================
// ARQUIVO: DBUpdateTests.cs.txt (Principal)
// ============================================
namespace MenphisSI.GerAdv.Tests;
public class DBInstanciaUpdate : IDisposable
{
    private readonly DBInstancia _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBInstanciaUpdate()
    {
        _instance = new DBInstancia();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void DefaultConstructor_ShouldCreateInstance_WithDefaultValues()
    {
        // Act
        var instancia = new DBInstancia();
        // Assert
        instancia.Should().NotBeNull();
        instancia.ITabelaName().Should().Be("Instancia");
        instancia.ID.Should().Be(0);
    }

    [Fact]
    public void AllProperties_WithValidValues_ShouldSetCorrectly()
    {
        // Arrange
        var instancia = new DBInstancia
        {
            FGUID = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FLiminarPedida = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FObjeto = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FLiminarResultado = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FNroProcesso = "AAAAAAAAAAAAAAAAAAAAAAAAA",
            FZKey = "AAAAAAAAAAAAAAAAAAAAAAAAA",
            FNroAntigo = "AAAAAAAAAAAAAAAAAAAAAAAAA",
            FAccessCode = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FZKeyIA = "AAAAAAAAAAAAAAAAAAAAAAAAA",
        };
        // Assert - All properties should be set instancia.FGUID.Should().Be( "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        instancia.FLiminarPedida.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        instancia.FObjeto.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        instancia.FLiminarResultado.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        instancia.FNroProcesso.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAA");
        instancia.FZKey.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAA");
        instancia.FNroAntigo.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAA");
        instancia.FAccessCode.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        instancia.FZKeyIA.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public void StringProperties_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var instancia = new DBInstancia();
        var longString = new string ('X', 300);
        instancia.FGUID = longString; // MAX: 100
        instancia.FObjeto = longString; // MAX: 255
        instancia.FNroProcesso = longString; // MAX: 25
        instancia.FZKey = longString; // MAX: 25
        instancia.FNroAntigo = longString; // MAX: 25
        instancia.FAccessCode = longString; // MAX: 100
        instancia.FZKeyIA = longString; // MAX: 25
        // Assert - All properties should be set instancia.FGUID.Should().HaveLength(100);
        instancia.FObjeto.Should().HaveLength(255);
        instancia.FNroProcesso.Should().HaveLength(25);
        instancia.FZKey.Should().HaveLength(25);
        instancia.FNroAntigo.Should().HaveLength(25);
        instancia.FAccessCode.Should().HaveLength(100);
        instancia.FZKeyIA.Should().HaveLength(25);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FLiminarPedida_Property_ShouldAcceptValidNames(string LiminarPedida)
    {
        // Arrange
        var instancia = new DBInstancia
        {
            // Act
            FLiminarPedida = LiminarPedida
        };
        // Assert
        instancia.FLiminarPedida.Should().Be(LiminarPedida);
    }

    [Fact]
    public void FLiminarPedida_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var instancia = new DBInstancia
        {
            // Act
            FLiminarPedida = null
        };
        // Assert
        instancia.FLiminarPedida.Should().Be(string.Empty);
    }

    [Fact]
    public void FLiminarPedida_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FLiminarPedida = null;
        // Act
        var result = _instance.FLiminarPedida;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FLiminarPedida_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FLiminarPedida = expectedValue;
        // Act
        var result = _instance.FLiminarPedida;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FLiminarPedida_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFLiminarPedida", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FLiminarPedida = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FLiminarPedida);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FLiminarPedida_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFLiminarPedida", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FLiminarPedida = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FLiminarPedida);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FLiminarPedida_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFLiminarPedida", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  ";
        var expectedValue = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM";
        // Act
        _instance.FLiminarPedida = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FLiminarPedida);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FLiminarPedida_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFLiminarPedida", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FLiminarPedida = value;
        // Act
        _instance.FLiminarPedida = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FLiminarPedida_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFLiminarPedida", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FLiminarPedida = "Original Value";
        // Act
        _instance.FLiminarPedida = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FLiminarPedida_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFLiminarPedida", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FLiminarPedida = "First Value";
        // Act
        _instance.FLiminarPedida = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FLiminarPedida_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFLiminarPedida", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FLiminarPedida = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FLiminarPedida);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData
    [InlineData
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FLiminarPedida_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FLiminarPedida = input;
        // Assert
        Assert.Equal(expected, _instance.FLiminarPedida);
    }

    [Fact]
    public void FLiminarPedida_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFLiminarPedida", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FLiminarPedida = null;
        // Act
        _instance.FLiminarPedida = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FLiminarPedida_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFLiminarPedida", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FLiminarPedida = "Existing Value";
        // Act
        _instance.FLiminarPedida = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FObjeto_Property_ShouldAcceptValidNames(string Objeto)
    {
        // Arrange
        var instancia = new DBInstancia
        {
            // Act
            FObjeto = Objeto
        };
        // Assert
        instancia.FObjeto.Should().Be(Objeto);
    }

    [Fact]
    public void FObjeto_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var instancia = new DBInstancia
        {
            // Act
            FObjeto = null
        };
        // Assert
        instancia.FObjeto.Should().Be(string.Empty);
    }

    [Fact]
    public void FObjeto_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var instancia = new DBInstancia();
        var longName = new string ('A', 255 + 10); // Exceeds 255 character limit
        // Act
        instancia.FObjeto = longName;
        // Assert
        instancia.FObjeto.Should().HaveLength(255);
    }

    [Fact]
    public void FObjeto_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FObjeto = null;
        // Act
        var result = _instance.FObjeto;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FObjeto_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FObjeto = expectedValue;
        // Act
        var result = _instance.FObjeto;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FObjeto_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFObjeto", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FObjeto = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FObjeto);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObjeto_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFObjeto", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FObjeto = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FObjeto);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FObjeto_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFObjeto", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FObjeto = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FObjeto);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObjeto_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFObjeto", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FObjeto = value;
        // Act
        _instance.FObjeto = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObjeto_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFObjeto", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObjeto = "Original Value";
        // Act
        _instance.FObjeto = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObjeto_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFObjeto", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObjeto = "First Value";
        // Act
        _instance.FObjeto = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObjeto_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFObjeto", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FObjeto = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FObjeto);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FObjeto_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FObjeto = input;
        // Assert
        Assert.Equal(expected, _instance.FObjeto);
    }

    [Fact]
    public void FObjeto_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFObjeto", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObjeto = null;
        // Act
        _instance.FObjeto = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObjeto_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFObjeto", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObjeto = "Existing Value";
        // Act
        _instance.FObjeto = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FLiminarResultado_Property_ShouldAcceptValidNames(string LiminarResultado)
    {
        // Arrange
        var instancia = new DBInstancia
        {
            // Act
            FLiminarResultado = LiminarResultado
        };
        // Assert
        instancia.FLiminarResultado.Should().Be(LiminarResultado);
    }

    [Fact]
    public void FLiminarResultado_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var instancia = new DBInstancia
        {
            // Act
            FLiminarResultado = null
        };
        // Assert
        instancia.FLiminarResultado.Should().Be(string.Empty);
    }

    [Fact]
    public void FLiminarResultado_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FLiminarResultado = null;
        // Act
        var result = _instance.FLiminarResultado;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FLiminarResultado_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FLiminarResultado = expectedValue;
        // Act
        var result = _instance.FLiminarResultado;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FLiminarResultado_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFLiminarResultado", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FLiminarResultado = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FLiminarResultado);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FLiminarResultado_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFLiminarResultado", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FLiminarResultado = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FLiminarResultado);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FLiminarResultado_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFLiminarResultado", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  ";
        var expectedValue = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM";
        // Act
        _instance.FLiminarResultado = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FLiminarResultado);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FLiminarResultado_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFLiminarResultado", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FLiminarResultado = value;
        // Act
        _instance.FLiminarResultado = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FLiminarResultado_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFLiminarResultado", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FLiminarResultado = "Original Value";
        // Act
        _instance.FLiminarResultado = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FLiminarResultado_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFLiminarResultado", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FLiminarResultado = "First Value";
        // Act
        _instance.FLiminarResultado = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FLiminarResultado_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFLiminarResultado", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FLiminarResultado = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FLiminarResultado);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  ", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FLiminarResultado_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FLiminarResultado = input;
        // Assert
        Assert.Equal(expected, _instance.FLiminarResultado);
    }

    [Fact]
    public void FLiminarResultado_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFLiminarResultado", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FLiminarResultado = null;
        // Act
        _instance.FLiminarResultado = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FLiminarResultado_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFLiminarResultado", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FLiminarResultado = "Existing Value";
        // Act
        _instance.FLiminarResultado = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNroProcesso_Property_ShouldAcceptValidNames(string NroProcesso)
    {
        // Arrange
        var instancia = new DBInstancia
        {
            // Act
            FNroProcesso = NroProcesso
        };
        // Assert
        instancia.FNroProcesso.Should().Be(NroProcesso);
    }

    [Fact]
    public void FNroProcesso_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var instancia = new DBInstancia
        {
            // Act
            FNroProcesso = null
        };
        // Assert
        instancia.FNroProcesso.Should().Be(string.Empty);
    }

    [Fact]
    public void FNroProcesso_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var instancia = new DBInstancia();
        var longName = new string ('A', 25 + 10); // Exceeds 25 character limit
        // Act
        instancia.FNroProcesso = longName;
        // Assert
        instancia.FNroProcesso.Should().HaveLength(25);
    }

    [Fact]
    public void FNroProcesso_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FNroProcesso = null;
        // Act
        var result = _instance.FNroProcesso;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FNroProcesso_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FNroProcesso = expectedValue;
        // Act
        var result = _instance.FNroProcesso;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FNroProcesso_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFNroProcesso", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNroProcesso = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FNroProcesso);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNroProcesso_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFNroProcesso", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNroProcesso = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FNroProcesso);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FNroProcesso_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFNroProcesso", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FNroProcesso = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FNroProcesso);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNroProcesso_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFNroProcesso", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FNroProcesso = value;
        // Act
        _instance.FNroProcesso = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNroProcesso_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFNroProcesso", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNroProcesso = "Original Value";
        // Act
        _instance.FNroProcesso = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNroProcesso_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFNroProcesso", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNroProcesso = "First Value";
        // Act
        _instance.FNroProcesso = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNroProcesso_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFNroProcesso", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNroProcesso = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FNroProcesso);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNroProcesso_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FNroProcesso = input;
        // Assert
        Assert.Equal(expected, _instance.FNroProcesso);
    }

    [Fact]
    public void FNroProcesso_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFNroProcesso", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNroProcesso = null;
        // Act
        _instance.FNroProcesso = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNroProcesso_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFNroProcesso", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNroProcesso = "Existing Value";
        // Act
        _instance.FNroProcesso = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FZKey_Property_ShouldAcceptValidNames(string ZKey)
    {
        // Arrange
        var instancia = new DBInstancia
        {
            // Act
            FZKey = ZKey
        };
        // Assert
        instancia.FZKey.Should().Be(ZKey);
    }

    [Fact]
    public void FZKey_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var instancia = new DBInstancia
        {
            // Act
            FZKey = null
        };
        // Assert
        instancia.FZKey.Should().Be(string.Empty);
    }

    [Fact]
    public void FZKey_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var instancia = new DBInstancia();
        var longName = new string ('A', 25 + 10); // Exceeds 25 character limit
        // Act
        instancia.FZKey = longName;
        // Assert
        instancia.FZKey.Should().HaveLength(25);
    }

    [Fact]
    public void FZKey_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FZKey = null;
        // Act
        var result = _instance.FZKey;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FZKey_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FZKey = expectedValue;
        // Act
        var result = _instance.FZKey;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FZKey_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFZKey", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FZKey = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FZKey);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FZKey_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFZKey", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FZKey = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FZKey);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FZKey_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFZKey", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FZKey = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FZKey);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FZKey_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFZKey", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FZKey = value;
        // Act
        _instance.FZKey = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FZKey_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFZKey", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FZKey = "Original Value";
        // Act
        _instance.FZKey = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FZKey_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFZKey", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FZKey = "First Value";
        // Act
        _instance.FZKey = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FZKey_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFZKey", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FZKey = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FZKey);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FZKey_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FZKey = input;
        // Assert
        Assert.Equal(expected, _instance.FZKey);
    }

    [Fact]
    public void FZKey_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFZKey", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FZKey = null;
        // Act
        _instance.FZKey = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FZKey_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFZKey", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FZKey = "Existing Value";
        // Act
        _instance.FZKey = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNroAntigo_Property_ShouldAcceptValidNames(string NroAntigo)
    {
        // Arrange
        var instancia = new DBInstancia
        {
            // Act
            FNroAntigo = NroAntigo
        };
        // Assert
        instancia.FNroAntigo.Should().Be(NroAntigo);
    }

    [Fact]
    public void FNroAntigo_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var instancia = new DBInstancia
        {
            // Act
            FNroAntigo = null
        };
        // Assert
        instancia.FNroAntigo.Should().Be(string.Empty);
    }

    [Fact]
    public void FNroAntigo_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var instancia = new DBInstancia();
        var longName = new string ('A', 25 + 10); // Exceeds 25 character limit
        // Act
        instancia.FNroAntigo = longName;
        // Assert
        instancia.FNroAntigo.Should().HaveLength(25);
    }

    [Fact]
    public void FNroAntigo_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FNroAntigo = null;
        // Act
        var result = _instance.FNroAntigo;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FNroAntigo_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FNroAntigo = expectedValue;
        // Act
        var result = _instance.FNroAntigo;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FNroAntigo_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFNroAntigo", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNroAntigo = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FNroAntigo);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNroAntigo_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFNroAntigo", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNroAntigo = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FNroAntigo);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FNroAntigo_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFNroAntigo", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FNroAntigo = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FNroAntigo);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNroAntigo_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFNroAntigo", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FNroAntigo = value;
        // Act
        _instance.FNroAntigo = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNroAntigo_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFNroAntigo", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNroAntigo = "Original Value";
        // Act
        _instance.FNroAntigo = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNroAntigo_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFNroAntigo", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNroAntigo = "First Value";
        // Act
        _instance.FNroAntigo = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNroAntigo_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFNroAntigo", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNroAntigo = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FNroAntigo);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNroAntigo_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FNroAntigo = input;
        // Assert
        Assert.Equal(expected, _instance.FNroAntigo);
    }

    [Fact]
    public void FNroAntigo_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFNroAntigo", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNroAntigo = null;
        // Act
        _instance.FNroAntigo = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNroAntigo_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFNroAntigo", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNroAntigo = "Existing Value";
        // Act
        _instance.FNroAntigo = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FAccessCode_Property_ShouldAcceptValidNames(string AccessCode)
    {
        // Arrange
        var instancia = new DBInstancia
        {
            // Act
            FAccessCode = AccessCode
        };
        // Assert
        instancia.FAccessCode.Should().Be(AccessCode);
    }

    [Fact]
    public void FAccessCode_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var instancia = new DBInstancia
        {
            // Act
            FAccessCode = null
        };
        // Assert
        instancia.FAccessCode.Should().Be(string.Empty);
    }

    [Fact]
    public void FAccessCode_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var instancia = new DBInstancia();
        var longName = new string ('A', 100 + 10); // Exceeds 100 character limit
        // Act
        instancia.FAccessCode = longName;
        // Assert
        instancia.FAccessCode.Should().HaveLength(100);
    }

    [Fact]
    public void FAccessCode_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FAccessCode = null;
        // Act
        var result = _instance.FAccessCode;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FAccessCode_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FAccessCode = expectedValue;
        // Act
        var result = _instance.FAccessCode;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FAccessCode_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFAccessCode", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAccessCode = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FAccessCode);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAccessCode_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFAccessCode", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAccessCode = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FAccessCode);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FAccessCode_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFAccessCode", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FAccessCode = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FAccessCode);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAccessCode_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFAccessCode", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FAccessCode = value;
        // Act
        _instance.FAccessCode = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAccessCode_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFAccessCode", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAccessCode = "Original Value";
        // Act
        _instance.FAccessCode = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAccessCode_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFAccessCode", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAccessCode = "First Value";
        // Act
        _instance.FAccessCode = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAccessCode_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFAccessCode", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAccessCode = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FAccessCode);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FAccessCode_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FAccessCode = input;
        // Assert
        Assert.Equal(expected, _instance.FAccessCode);
    }

    [Fact]
    public void FAccessCode_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFAccessCode", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAccessCode = null;
        // Act
        _instance.FAccessCode = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAccessCode_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFAccessCode", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAccessCode = "Existing Value";
        // Act
        _instance.FAccessCode = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FZKeyIA_Property_ShouldAcceptValidNames(string ZKeyIA)
    {
        // Arrange
        var instancia = new DBInstancia
        {
            // Act
            FZKeyIA = ZKeyIA
        };
        // Assert
        instancia.FZKeyIA.Should().Be(ZKeyIA);
    }

    [Fact]
    public void FZKeyIA_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var instancia = new DBInstancia
        {
            // Act
            FZKeyIA = null
        };
        // Assert
        instancia.FZKeyIA.Should().Be(string.Empty);
    }

    [Fact]
    public void FZKeyIA_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var instancia = new DBInstancia();
        var longName = new string ('A', 25 + 10); // Exceeds 25 character limit
        // Act
        instancia.FZKeyIA = longName;
        // Assert
        instancia.FZKeyIA.Should().HaveLength(25);
    }

    [Fact]
    public void FZKeyIA_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FZKeyIA = null;
        // Act
        var result = _instance.FZKeyIA;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FZKeyIA_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FZKeyIA = expectedValue;
        // Act
        var result = _instance.FZKeyIA;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FZKeyIA_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFZKeyIA", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FZKeyIA = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FZKeyIA);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FZKeyIA_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFZKeyIA", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FZKeyIA = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FZKeyIA);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FZKeyIA_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFZKeyIA", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FZKeyIA = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FZKeyIA);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FZKeyIA_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFZKeyIA", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FZKeyIA = value;
        // Act
        _instance.FZKeyIA = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FZKeyIA_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFZKeyIA", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FZKeyIA = "Original Value";
        // Act
        _instance.FZKeyIA = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FZKeyIA_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFZKeyIA", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FZKeyIA = "First Value";
        // Act
        _instance.FZKeyIA = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FZKeyIA_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFZKeyIA", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FZKeyIA = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FZKeyIA);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FZKeyIA_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FZKeyIA = input;
        // Assert
        Assert.Equal(expected, _instance.FZKeyIA);
    }

    [Fact]
    public void FZKeyIA_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFZKeyIA", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FZKeyIA = null;
        // Act
        _instance.FZKeyIA = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FZKeyIA_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBInstancia).GetField("pFldFZKeyIA", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FZKeyIA = "Existing Value";
        // Act
        _instance.FZKeyIA = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

#region Testes de GUID
    [Fact]
    public void GUID_DefaultValue_ShouldBeEmpty()
    {
        Assert.Equal(string.Empty, _instance.FGUID);
    }

    [Fact]
    public void GUID_SetValidGUID_ShouldStore()
    {
        var guid = Guid.NewGuid().ToString();
        _instance.FGUID = guid;
        Assert.Equal(guid, _instance.FGUID);
    }

#endregion
    [Fact]
    public void TabelaNome_Property_ShouldReturnCorrectTableName()
    {
        // Arrange
        var instancia = new DBInstancia();
        // Act & Assert
        instancia.TabelaNome.Should().Be("Instancia");
    }

    public virtual void Dispose()
    {
    // Cleanup resources if needed
    }
}