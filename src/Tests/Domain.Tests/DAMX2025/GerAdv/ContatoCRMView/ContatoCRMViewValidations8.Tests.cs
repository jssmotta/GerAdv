// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class ContatoCRMViewValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFContatoCRMViewFactory> _mockContatoCRMViewFactory;
    private readonly Mock<IContatoCRMViewReader> _mockReader;
    private readonly ContatoCRMViewValidation _validation;
    private readonly Mock<IContatoCRMViewService> _mockContatoCRMViewService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly ContatoCRMViewService _service;
    private readonly string _validUri = "test-uri";
    public ContatoCRMViewValidationTests()
    {
        _mockContatoCRMViewFactory = new Mock<IFContatoCRMViewFactory>();
        _mockReader = new Mock<IContatoCRMViewReader>();
        _validation = new ContatoCRMViewValidation();
        _mockContatoCRMViewService = new Mock<IContatoCRMViewService>();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

#region Class Structure Tests
    [Fact]
    public void ContatoCRMViewValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IContatoCRMViewValidation>();
    }

    [Fact]
    public void ContatoCRMViewValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(ContatoCRMViewValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void ContatoCRMViewValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(ContatoCRMViewValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.ContatoCRMView CreateValidContatoCRMView()
    {
        return new Models.ContatoCRMView
        {
            Id = 1,
            Data = "27/05/2022",
            IP = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockContatoCRMViewService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterContatoCRMView>(), It.IsAny<string>())).ReturnsAsync(new List<ContatoCRMViewResponseAll>());
    // Setup other mocks but don't override the ContatoCRMViews service mock
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockContatoCRMViewService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterContatoCRMView>(), It.IsAny<string>())).ReturnsAsync(new List<ContatoCRMViewResponseAll>());
    // Setup other mocks but don't override the ContatoCRMViews service mock
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var contatocrmview = new Models.ContatoCRMView
        {
            Id = 1,
            Data = "27/05/2022",
            IP = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(contatocrmview, _mockContatoCRMViewService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockContatoCRMViewService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region ValidateReg Required CGUID Method Tests
    [Fact]
    public async Task ValidateReg_WithEmptyCGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var contatocrmview = CreateValidContatoCRMView();
        contatocrmview.CGUID = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(contatocrmview, _mockContatoCRMViewService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullCGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var contatocrmview = CreateValidContatoCRMView();
        contatocrmview.CGUID = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(contatocrmview, _mockContatoCRMViewService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataCGUID_ShouldReturnTrue()
    {
        // Arrange
        var contatocrmview = CreateValidContatoCRMView();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(contatocrmview, _mockContatoCRMViewService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceCGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var contatocrmview = CreateValidContatoCRMView();
        contatocrmview.CGUID = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(contatocrmview, _mockContatoCRMViewService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
#region ValidateReg Required Data Method Tests
    [Fact]
    public async Task ValidateReg_WithEmptyData_ShouldThrowSGValidationException()
    {
        // Arrange
        var contatocrmview = CreateValidContatoCRMView();
        contatocrmview.Data = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(contatocrmview, _mockContatoCRMViewService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullData_ShouldThrowSGValidationException()
    {
        // Arrange
        var contatocrmview = CreateValidContatoCRMView();
        contatocrmview.Data = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(contatocrmview, _mockContatoCRMViewService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataData_ShouldReturnTrue()
    {
        // Arrange
        var contatocrmview = CreateValidContatoCRMView();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(contatocrmview, _mockContatoCRMViewService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceData_ShouldThrowSGValidationException()
    {
        // Arrange
        var contatocrmview = CreateValidContatoCRMView();
        contatocrmview.Data = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(contatocrmview, _mockContatoCRMViewService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
#region ValidateReg Required IP Method Tests
    [Fact]
    public async Task ValidateReg_WithEmptyIP_ShouldThrowSGValidationException()
    {
        // Arrange
        var contatocrmview = CreateValidContatoCRMView();
        contatocrmview.IP = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(contatocrmview, _mockContatoCRMViewService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullIP_ShouldThrowSGValidationException()
    {
        // Arrange
        var contatocrmview = CreateValidContatoCRMView();
        contatocrmview.IP = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(contatocrmview, _mockContatoCRMViewService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataIP_ShouldReturnTrue()
    {
        // Arrange
        var contatocrmview = CreateValidContatoCRMView();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(contatocrmview, _mockContatoCRMViewService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceIP_ShouldThrowSGValidationException()
    {
        // Arrange
        var contatocrmview = CreateValidContatoCRMView();
        contatocrmview.IP = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(contatocrmview, _mockContatoCRMViewService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}