// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class ReuniaoValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFReuniaoFactory> _mockReuniaoFactory;
    private readonly Mock<IReuniaoReader> _mockReader;
    private readonly ReuniaoValidation _validation;
    private readonly Mock<IReuniaoService> _mockReuniaoService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IClientesReader> _mockClientesReader;
    private readonly ReuniaoService _service;
    private readonly string _validUri = "test-uri";
    public ReuniaoValidationTests()
    {
        _mockReuniaoFactory = new Mock<IFReuniaoFactory>();
        _mockReader = new Mock<IReuniaoReader>();
        _validation = new ReuniaoValidation();
        _mockReuniaoService = new Mock<IReuniaoService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockClientesReader = new Mock<IClientesReader>();
    }

#region Class Structure Tests
    [Fact]
    public void ReuniaoValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IReuniaoValidation>();
    }

    [Fact]
    public void ReuniaoValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(ReuniaoValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void ReuniaoValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(ReuniaoValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.Reuniao CreateValidReuniao()
    {
        return new Models.Reuniao
        {
            Id = 1,
            Cliente = 0,
            IDAgenda = 0,
            Data = "27/05/2022",
            Pauta = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            ATA = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            HoraInicial = "04:04",
            HoraFinal = "27/05/2022",
            Externa = false,
            HoraSaida = "04:04",
            HoraRetorno = "04:04",
            PrincipaisDecisoes = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM"
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockReuniaoService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterReuniao>(), It.IsAny<string>())).ReturnsAsync(new List<ReuniaoResponseAll>());
        // Setup other mocks but don't override the Reuniaos service mock
        _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.ClientesResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockReuniaoService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterReuniao>(), It.IsAny<string>())).ReturnsAsync(new List<ReuniaoResponseAll>());
        // Setup other mocks but don't override the Reuniaos service mock
        _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.ClientesResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var reuniao = new Models.Reuniao
        {
            Id = 1,
            Data = "27/05/2022",
            Pauta = null,
            ATA = null,
            HoraInicial = null,
            HoraFinal = null,
            Externa = false,
            HoraSaida = null,
            HoraRetorno = null,
            PrincipaisDecisoes = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(reuniao, _mockReuniaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockReuniaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region HoraInicial Validation Tests
    [Theory]
    [InlineData("01/01/1899")]
    [InlineData("31/12/1899")]
    public async Task ValidateReg_WithHoraInicialBeforeMinDate_ShouldThrowSGValidationException(string invalidDate)
    {
        // Arrange
        var reuniao = CreateValidReuniao();
        reuniao.HoraInicial = invalidDate;
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(reuniao, _mockReuniaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("01/01/1900.");
    }

    [Fact]
    public async Task ValidateReg_WithValidHoraInicial_ShouldPass()
    {
        // Arrange
        var reuniao = CreateValidReuniao();
        reuniao.HoraInicial = "01/01/1990";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(reuniao, _mockReuniaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullHoraInicial_ShouldPass()
    {
        // Arrange
        var reuniao = CreateValidReuniao();
        reuniao.HoraInicial = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(reuniao, _mockReuniaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithInvalidDateHoraInicialFormat_ShouldPass()
    {
        // Arrange
        var reuniao = CreateValidReuniao();
        reuniao.HoraInicial = "invalid-date";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(reuniao, _mockReuniaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue(); // Invalid format is ignored, not validated
    }

    [Fact]
    public async Task ValidateReg_WithEmptyHoraInicial_ShouldPass()
    {
        // Arrange
        var reuniao = CreateValidReuniao();
        reuniao.HoraInicial = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(reuniao, _mockReuniaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region HoraSaida Validation Tests
    [Theory]
    [InlineData("01/01/1899")]
    [InlineData("31/12/1899")]
    public async Task ValidateReg_WithHoraSaidaBeforeMinDate_ShouldThrowSGValidationException(string invalidDate)
    {
        // Arrange
        var reuniao = CreateValidReuniao();
        reuniao.HoraSaida = invalidDate;
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(reuniao, _mockReuniaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("01/01/1900.");
    }

    [Fact]
    public async Task ValidateReg_WithValidHoraSaida_ShouldPass()
    {
        // Arrange
        var reuniao = CreateValidReuniao();
        reuniao.HoraSaida = "01/01/1990";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(reuniao, _mockReuniaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullHoraSaida_ShouldPass()
    {
        // Arrange
        var reuniao = CreateValidReuniao();
        reuniao.HoraSaida = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(reuniao, _mockReuniaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithInvalidDateHoraSaidaFormat_ShouldPass()
    {
        // Arrange
        var reuniao = CreateValidReuniao();
        reuniao.HoraSaida = "invalid-date";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(reuniao, _mockReuniaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue(); // Invalid format is ignored, not validated
    }

    [Fact]
    public async Task ValidateReg_WithEmptyHoraSaida_ShouldPass()
    {
        // Arrange
        var reuniao = CreateValidReuniao();
        reuniao.HoraSaida = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(reuniao, _mockReuniaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region HoraRetorno Validation Tests
    [Theory]
    [InlineData("01/01/1899")]
    [InlineData("31/12/1899")]
    public async Task ValidateReg_WithHoraRetornoBeforeMinDate_ShouldThrowSGValidationException(string invalidDate)
    {
        // Arrange
        var reuniao = CreateValidReuniao();
        reuniao.HoraRetorno = invalidDate;
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(reuniao, _mockReuniaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("01/01/1900.");
    }

    [Fact]
    public async Task ValidateReg_WithValidHoraRetorno_ShouldPass()
    {
        // Arrange
        var reuniao = CreateValidReuniao();
        reuniao.HoraRetorno = "01/01/1990";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(reuniao, _mockReuniaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullHoraRetorno_ShouldPass()
    {
        // Arrange
        var reuniao = CreateValidReuniao();
        reuniao.HoraRetorno = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(reuniao, _mockReuniaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithInvalidDateHoraRetornoFormat_ShouldPass()
    {
        // Arrange
        var reuniao = CreateValidReuniao();
        reuniao.HoraRetorno = "invalid-date";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(reuniao, _mockReuniaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue(); // Invalid format is ignored, not validated
    }

    [Fact]
    public async Task ValidateReg_WithEmptyHoraRetorno_ShouldPass()
    {
        // Arrange
        var reuniao = CreateValidReuniao();
        reuniao.HoraRetorno = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(reuniao, _mockReuniaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region Foreign Key Validation Tests - Clientes
    [Fact]
    public async Task ValidateReg_WithInvalidClientes_ShouldThrowSGValidationException()
    {
        // Arrange
        var reuniao = CreateValidReuniao();
        reuniao.Cliente = 999;
        _mockClientesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.ClientesResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(reuniao, _mockReuniaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedClientesId_ShouldThrowSGValidationException()
    {
        // Arrange
        var reuniao = CreateValidReuniao();
        reuniao.Cliente = 999;
        var reg888 = new Models.Response.ClientesResponse
        {
            Id = 888
        }; // Different ID
        _mockClientesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(reuniao, _mockReuniaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidClientes_ShouldPass()
    {
        // Arrange
        var reuniao = CreateValidReuniao();
        reuniao.Cliente = 123;
        var reg123 = new Models.Response.ClientesResponse
        {
            Id = 123
        };
        _mockClientesReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(reuniao, _mockReuniaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyClientes_ShouldPass()
    {
        // Arrange
        var reuniao = CreateValidReuniao();
        reuniao.Cliente = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(reuniao, _mockReuniaoService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockClientesReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}