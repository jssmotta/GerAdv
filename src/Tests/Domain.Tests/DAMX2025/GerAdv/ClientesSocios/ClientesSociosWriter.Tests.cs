// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class ClientesSociosWriterTests
{
    private readonly Mock<IFClientesSociosFactory> _mockClientesSociosFactory;
    private readonly Mock<FClientesSocios> _mockFClientesSocios;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly ClientesSociosWriter _clientessociosWriter;
    public ClientesSociosWriterTests()
    {
        _mockClientesSociosFactory = new Mock<IFClientesSociosFactory>();
        _mockFClientesSocios = new Mock<FClientesSocios>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _clientessociosWriter = new ClientesSociosWriter(_mockClientesSociosFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var clientessocios = CreateValidClientesSociosModel();
        clientessocios.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockClientesSociosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFClientesSocios.Object);
        _mockFClientesSocios.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _clientessociosWriter.WriteAsync(clientessocios, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFClientesSocios.Object);
        _mockClientesSociosFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockClientesSociosFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFClientesSocios.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var clientessocios = CreateValidClientesSociosModel();
        clientessocios.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockClientesSociosFactory.Setup(x => x.CreateFromIdAsync(clientessocios.Id, _mockConnection.Object)).ReturnsAsync(_mockFClientesSocios.Object);
        _mockFClientesSocios.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _clientessociosWriter.WriteAsync(clientessocios, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFClientesSocios.Object);
        _mockClientesSociosFactory.Verify(x => x.CreateFromIdAsync(clientessocios.Id, _mockConnection.Object), Times.Once);
        _mockClientesSociosFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFClientesSocios.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var clientessocios = CreateValidClientesSociosModel();
        var auditorQuem = 99;
        _mockClientesSociosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFClientesSocios.Object);
        _mockFClientesSocios.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _clientessociosWriter.WriteAsync(clientessocios, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFClientesSocios.Object);
        _mockFClientesSocios.VerifySet(x => x.FSomenteRepresentante = clientessocios.SomenteRepresentante, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FIdade = clientessocios.Idade, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FIsRepresentanteLegal = clientessocios.IsRepresentanteLegal, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FQualificacao = clientessocios.Qualificacao, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FSexo = clientessocios.Sexo, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FDtNasc = clientessocios.DtNasc.ToString(), Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FNome = clientessocios.Nome, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FSite = clientessocios.Site, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FRepresentanteLegal = clientessocios.RepresentanteLegal, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FCliente = clientessocios.Cliente, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FEndereco = clientessocios.Endereco, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FBairro = clientessocios.Bairro, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FCEP = It.IsAny<string>(), Times.Once); // CEP é limpo pelo ClearInputCep()
        _mockFClientesSocios.VerifySet(x => x.FCidade = clientessocios.Cidade, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FRG = clientessocios.RG, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FCPF = It.IsAny<string>(), Times.Once); // CPF é limpo pelo ClearInputCpf()
        _mockFClientesSocios.VerifySet(x => x.FFone = clientessocios.Fone, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FParticipacao = clientessocios.Participacao, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FCargo = clientessocios.Cargo, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FEMail = clientessocios.EMail, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FObs = clientessocios.Obs, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FCNH = clientessocios.CNH, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FDataContrato = clientessocios.DataContrato.ToString(), Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FCNPJ = It.IsAny<string>(), Times.Once); // CNPJ é limpo pelo ClearInputCnpj()
        _mockFClientesSocios.VerifySet(x => x.FInscEst = clientessocios.InscEst, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FSocioEmpresaAdminNome = clientessocios.SocioEmpresaAdminNome, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FEnderecoSocio = clientessocios.EnderecoSocio, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FBairroSocio = clientessocios.BairroSocio, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FCEPSocio = clientessocios.CEPSocio, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FCidadeSocio = clientessocios.CidadeSocio, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FRGDataExp = clientessocios.RGDataExp.ToString(), Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FSocioEmpresaAdminSomente = clientessocios.SocioEmpresaAdminSomente, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FTipo = clientessocios.Tipo, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FFax = clientessocios.Fax, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FClass = clientessocios.Class, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.FGUID = clientessocios.GUID, Times.Once);
        _mockFClientesSocios.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithNullDtNasc_ShouldNotSetFDtNasc()
    {
        // Arrange
        var clientessocios = CreateValidClientesSociosModel();
        clientessocios.DtNasc = null;
        var auditorQuem = 123;
        _mockClientesSociosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFClientesSocios.Object);
        _mockFClientesSocios.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _clientessociosWriter.WriteAsync(clientessocios, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFClientesSocios.VerifySet(x => x.FDtNasc = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WithNullDataContrato_ShouldNotSetFDataContrato()
    {
        // Arrange
        var clientessocios = CreateValidClientesSociosModel();
        clientessocios.DataContrato = null;
        var auditorQuem = 123;
        _mockClientesSociosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFClientesSocios.Object);
        _mockFClientesSocios.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _clientessociosWriter.WriteAsync(clientessocios, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFClientesSocios.VerifySet(x => x.FDataContrato = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WithNullRGDataExp_ShouldNotSetFRGDataExp()
    {
        // Arrange
        var clientessocios = CreateValidClientesSociosModel();
        clientessocios.RGDataExp = null;
        var auditorQuem = 123;
        _mockClientesSociosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFClientesSocios.Object);
        _mockFClientesSocios.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _clientessociosWriter.WriteAsync(clientessocios, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFClientesSocios.VerifySet(x => x.FRGDataExp = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var clientessocios = CreateValidClientesSociosModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockClientesSociosFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _clientessociosWriter.WriteAsync(clientessocios, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var clientessocios = CreateValidClientesSociosModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockClientesSociosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFClientesSocios.Object);
        _mockFClientesSocios.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _clientessociosWriter.WriteAsync(clientessocios, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var clientessociosResponse = new ClientesSociosResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockClientesSociosFactory.Setup(x => x.DeleteAsync(operadorId, clientessociosResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _clientessociosWriter.Delete(clientessociosResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockClientesSociosFactory.Verify(x => x.DeleteAsync(operadorId, clientessociosResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var clientessociosResponse = new ClientesSociosResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockClientesSociosFactory.Setup(x => x.DeleteAsync(operadorId, clientessociosResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _clientessociosWriter.Delete(clientessociosResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var clientessociosResponse = new ClientesSociosResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockClientesSociosFactory.Setup(x => x.DeleteAsync(operadorId, clientessociosResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _clientessociosWriter.Delete(clientessociosResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new ClientesSociosWriter(_mockClientesSociosFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new ClientesSociosWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.ClientesSocios CreateValidClientesSociosModel()
    {
        return new Models.ClientesSocios
        {
            Id = 0,
            SomenteRepresentante = false,
            Idade = 1,
            IsRepresentanteLegal = false,
            Qualificacao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Sexo = false,
            DtNasc = "24/04/1975",
            Nome = "João",
            Site = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            RepresentanteLegal = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Cliente = 1,
            Endereco = "Rua das Flores, 123",
            Bairro = "Centro",
            CEP = "01234-567",
            Cidade = 1,
            RG = "12.345.678-9",
            CPF = "544.506.718-13",
            Fone = "(11) 99999-9999",
            Participacao = "AAAAAAAA",
            Cargo = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            EMail = "test@email.com",
            Obs = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            CNH = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            DataContrato = "24/04/1975",
            CNPJ = "93016944000138",
            InscEst = "AAAAAAAAAAAAA",
            SocioEmpresaAdminNome = "João",
            EnderecoSocio = "Rua das Flores, 123",
            BairroSocio = "Centro",
            CEPSocio = "01234-567",
            CidadeSocio = 1,
            RGDataExp = "24/04/1975",
            SocioEmpresaAdminSomente = false,
            Tipo = false,
            Fax
            Class = "A",
            GUID = Guid.NewGuid().ToString()
        };
    }
#endregion
}