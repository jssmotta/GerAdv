// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// ============================================
// ARQUIVO: DBUpdateTests.cs.txt (Principal)
// ============================================
namespace MenphisSI.GerAdv.Tests;
public class DBPontoVirtualAcessosUpdate : IDisposable
{
    private readonly DBPontoVirtualAcessos _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBPontoVirtualAcessosUpdate()
    {
        _instance = new DBPontoVirtualAcessos();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void DefaultConstructor_ShouldCreateInstance_WithDefaultValues()
    {
        // Act
        var pontovirtualacessos = new DBPontoVirtualAcessos();
        // Assert
        pontovirtualacessos.Should().NotBeNull();
        pontovirtualacessos.ITabelaName().Should().Be("PontoVirtualAcessos");
        pontovirtualacessos.ID.Should().Be(0);
    }

    [Fact]
    public void AllProperties_WithValidValues_ShouldSetCorrectly()
    {
        // Arrange
        var pontovirtualacessos = new DBPontoVirtualAcessos
        {
            FOrigem = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        };
    // Assert - All properties should be set pontovirtualacessos.FOrigem.Should().Be( "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public void StringProperties_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var pontovirtualacessos = new DBPontoVirtualAcessos();
        var longString = new string ('X', 300);
        pontovirtualacessos.FOrigem = longString; // MAX: 150
    // Assert - All properties should be set pontovirtualacessos.FOrigem.Should().HaveLength(150);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FOrigem_Property_ShouldAcceptValidNames(string Origem)
    {
        // Arrange
        var pontovirtualacessos = new DBPontoVirtualAcessos
        {
            // Act
            FOrigem = Origem
        };
        // Assert
        pontovirtualacessos.FOrigem.Should().Be(Origem);
    }

    [Fact]
    public void FOrigem_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var pontovirtualacessos = new DBPontoVirtualAcessos
        {
            // Act
            FOrigem = null
        };
        // Assert
        pontovirtualacessos.FOrigem.Should().Be(string.Empty);
    }

    [Fact]
    public void FOrigem_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var pontovirtualacessos = new DBPontoVirtualAcessos();
        var longName = new string ('A', 150 + 10); // Exceeds 150 character limit
        // Act
        pontovirtualacessos.FOrigem = longName;
        // Assert
        pontovirtualacessos.FOrigem.Should().HaveLength(150);
    }

    [Fact]
    public void FOrigem_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FOrigem = null;
        // Act
        var result = _instance.FOrigem;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FOrigem_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FOrigem = expectedValue;
        // Act
        var result = _instance.FOrigem;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FOrigem_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPontoVirtualAcessos).GetField("pFldFOrigem", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FOrigem = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FOrigem);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FOrigem_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPontoVirtualAcessos).GetField("pFldFOrigem", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FOrigem = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FOrigem);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FOrigem_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPontoVirtualAcessos).GetField("pFldFOrigem", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FOrigem = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FOrigem);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FOrigem_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPontoVirtualAcessos).GetField("pFldFOrigem", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FOrigem = value;
        // Act
        _instance.FOrigem = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FOrigem_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPontoVirtualAcessos).GetField("pFldFOrigem", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FOrigem = "Original Value";
        // Act
        _instance.FOrigem = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FOrigem_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPontoVirtualAcessos).GetField("pFldFOrigem", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FOrigem = "First Value";
        // Act
        _instance.FOrigem = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FOrigem_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPontoVirtualAcessos).GetField("pFldFOrigem", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FOrigem = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FOrigem);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FOrigem_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FOrigem = input;
        // Assert
        Assert.Equal(expected, _instance.FOrigem);
    }

    [Fact]
    public void FOrigem_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPontoVirtualAcessos).GetField("pFldFOrigem", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FOrigem = null;
        // Act
        _instance.FOrigem = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FOrigem_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPontoVirtualAcessos).GetField("pFldFOrigem", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FOrigem = "Existing Value";
        // Act
        _instance.FOrigem = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void TabelaNome_Property_ShouldReturnCorrectTableName()
    {
        // Arrange
        var pontovirtualacessos = new DBPontoVirtualAcessos();
        // Act & Assert
        pontovirtualacessos.TabelaNome.Should().Be("PontoVirtualAcessos");
    }

    public virtual void Dispose()
    {
    // Cleanup resources if needed
    }
}