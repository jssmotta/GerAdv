// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class NENotasWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFNENotasFactory> _mockNENotasFactory;
    private readonly Mock<FNENotas> _mockFNENotas;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly NENotasWhere _nenotasWhere;
    public NENotasWhereTests()
    {
        _mockNENotasFactory = new Mock<IFNENotasFactory>();
        _mockFNENotas = new Mock<FNENotas>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _nenotasWhere = new NENotasWhere(_mockNENotasFactory.Object);
    }

    public void Dispose()
    {
        _mockNENotasFactory?.Reset();
        _mockFNENotas?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "AAAAAAAAAAAAAAAAAA")
        };
    }

    private void SetupMockFNENotas(int? Apenso = 1, int? Precatoria = 1, int? Instancia = 1, bool? MovPro = false, string? Nome = "João", bool? NotaExpedida = true, bool? Revisada = false, int? Processo = 1, int? PalavraChave = 1, string? Data = "27/05/2022", string? NotaPublicada = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    {
        _mockFNENotas.Setup(f => f.FApenso).Returns(Apenso ?? 0);
        _mockFNENotas.Setup(f => f.FPrecatoria).Returns(Precatoria ?? 0);
        _mockFNENotas.Setup(f => f.FInstancia).Returns(Instancia ?? 0);
        _mockFNENotas.Setup(f => f.FMovPro).Returns(MovPro ?? false);
        _mockFNENotas.Setup(f => f.FNome).Returns(Nome ?? string.Empty);
        _mockFNENotas.Setup(f => f.FNotaExpedida).Returns(NotaExpedida ?? false);
        _mockFNENotas.Setup(f => f.FRevisada).Returns(Revisada ?? false);
        _mockFNENotas.Setup(f => f.FProcesso).Returns(Processo ?? 0);
        _mockFNENotas.Setup(f => f.FPalavraChave).Returns(PalavraChave ?? 0);
        _mockFNENotas.Setup(f => f.FData).Returns(Data ?? string.Empty);
        _mockFNENotas.Setup(f => f.FNotaPublicada).Returns(NotaPublicada ?? string.Empty);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFNENotasFactory>();
        // Act
        var nenotasWhere = new NENotasWhere(mockFactory.Object);
        // Assert
        nenotasWhere.Should().NotBeNull();
        nenotasWhere.Should().BeAssignableTo<INENotasWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFNENotasFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new NENotasWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnNENotasResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFNENotas();
        _mockNENotasFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFNENotas.Object);
        // Act
        var result = _nenotasWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.Apenso.Should().Be(1);
        result.Precatoria.Should().Be(1);
        result.Instancia.Should().Be(1);
        result.MovPro.Should().Be(false);
        result.Nome.Should().Be("João");
        result.NotaExpedida.Should().Be(true);
        result.Revisada.Should().Be(false);
        result.Processo.Should().Be(1);
        result.PalavraChave.Should().Be(1);
        result.Data.Should().Be("27/05/2022");
        result.NotaPublicada.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFNENotas(Apenso: null, Precatoria: null, Instancia: null, MovPro: null, Nome: null, NotaExpedida: null, Revisada: null, Processo: null, PalavraChave: null, Data: null, NotaPublicada: null);
        _mockNENotasFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFNENotas.Object);
        // Act
        var result = _nenotasWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Apenso.Should().Be(0);
        result.Precatoria.Should().Be(0);
        result.Instancia.Should().Be(0);
        result.MovPro.Should().Be(false);
        result.Nome.Should().Be(string.Empty);
        result.NotaExpedida.Should().Be(false);
        result.Revisada.Should().Be(false);
        result.Processo.Should().Be(0);
        result.PalavraChave.Should().Be(0);
        result.Data.Should().Be(string.Empty);
        result.NotaPublicada.Should().Be(string.Empty);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFNENotas();
        _mockNENotasFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFNENotas.Object);
        // Act
        var result = _nenotasWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockNENotasFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFNENotas();
        _mockNENotasFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFNENotas.Object);
        // Act
        var result = _nenotasWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockNENotasFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFNENotas();
        _mockNENotasFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFNENotas.Object);
        // Act
        var result = _nenotasWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockNENotasFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFNENotas();
        _mockNENotasFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFNENotas.Object);
        // Act
        _nenotasWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockNENotasFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFNENotasInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFNENotas.Setup(f => f.Dispose());
        SetupMockFNENotas();
        _mockNENotasFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFNENotas.Object);
        // Act
        _nenotasWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFNENotas.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockNENotasFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _nenotasWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFNENotas(Apenso: 1, Precatoria: 1, Instancia: 1, MovPro: false, Nome: "João", NotaExpedida: true, Revisada: false, Processo: 1, PalavraChave: 1, Data: "27/05/2022", NotaPublicada: "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _mockNENotasFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFNENotas.Object);
        // Act
        var result = _nenotasWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.Apenso.Should().Be(1);
        result.Precatoria.Should().Be(1);
        result.Instancia.Should().Be(1);
        result.MovPro.Should().Be(false);
        result.Nome.Should().Be("João");
        result.NotaExpedida.Should().Be(true);
        result.Revisada.Should().Be(false);
        result.Processo.Should().Be(1);
        result.PalavraChave.Should().Be(1);
        result.Data.Should().Be("27/05/2022");
        result.NotaPublicada.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "Nome = @{DBNENotasDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBNENotasDicInfo.CampoNome}", "AAAAAAAAAAAAAAAAAA"),
        };
        SetupMockFNENotas();
        _mockNENotasFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFNENotas.Object);
        // Act
        _nenotasWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockNENotasFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBNENotasDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }
#region DateTime Tests
#endregion
#endregion
}