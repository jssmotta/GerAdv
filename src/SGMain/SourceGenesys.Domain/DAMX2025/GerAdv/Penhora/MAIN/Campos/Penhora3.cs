// 100% auto-generated by Source Genesys Core
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming 1
public partial class DBPenhora
{
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool pFldFProcesso, pFldFNome, pFldFDescricao, pFldFDataPenhora, pFldFPenhoraStatus, pFldFGUID, pFldFMaster;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected int m_FProcesso, m_FPenhoraStatus, m_FMaster;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected string? m_FNome, m_FDescricao, m_FGUID;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected DateTime? m_FDataPenhora;
    public virtual int FProcesso
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FProcesso;
        set
        {
            pFldFProcesso = pFldFProcesso || value != m_FProcesso;
            if (pFldFProcesso)
                m_FProcesso = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(255, ErrorMessage = "A propriedade FNome da tabela Penhora deve ter no máximo 255 caracteres.")]
    public virtual string? FNome
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNome ?? string.Empty;
        set
        {
            pFldFNome = pFldFNome || !(m_FNome ?? string.Empty).Equals(value);
            if (pFldFNome)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FNome = trimmed.Length > 255 ? trimmed.AsSpan(0, 255).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    public virtual string? FDescricao
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDescricao ?? string.Empty;
        set
        {
            pFldFDescricao = pFldFDescricao || !(m_FDescricao ?? string.Empty).Equals(value);
            if (pFldFDescricao)
                m_FDescricao = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public virtual string? FDataPenhora
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDataPenhora is null || m_FDataPenhora == DevourerOne.DDataZerada ? string.Empty : m_FDataPenhora.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFDataPenhora, m_FDataPenhora, value)is not (true, var changed, var data))
                return;
            (pFldFDataPenhora, m_FDataPenhora) = (changed, data);
        }
    }

    public virtual int FPenhoraStatus
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPenhoraStatus;
        set
        {
            pFldFPenhoraStatus = pFldFPenhoraStatus || value != m_FPenhoraStatus;
            if (pFldFPenhoraStatus)
                m_FPenhoraStatus = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(100, ErrorMessage = "A propriedade FGUID da tabela Penhora deve ter no máximo 100 caracteres.")]
    public virtual string? FGUID
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FGUID ?? string.Empty;
        set
        {
            pFldFGUID = pFldFGUID || !(m_FGUID ?? string.Empty).Equals(value);
            if (pFldFGUID)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FGUID = trimmed.Length > 100 ? trimmed.AsSpan(0, 100).ToString() : trimmed;
            }
        }
    }

    public virtual int FMaster
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FMaster;
        set
        {
            pFldFMaster = pFldFMaster || value != m_FMaster;
            if (pFldFMaster)
                m_FMaster = value;
        }
    }

    public void SetAuditor(int usuarioId) => AuditorQuem = usuarioId;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITabelaName() => PTabelaNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoCodigo() => CampoCodigo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoNome() => CampoNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string IPrefixo() => PTabelaPrefixo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITypeFieldCode() => "int";
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IdIsIdentity() => false;
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetID() => ID;
}