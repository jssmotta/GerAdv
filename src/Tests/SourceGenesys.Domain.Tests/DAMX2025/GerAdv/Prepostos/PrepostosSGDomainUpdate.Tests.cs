// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// ============================================
// ARQUIVO: DBUpdateTests.cs.txt (Principal)
// ============================================
namespace MenphisSI.GerAdv.Tests;
public class DBPrepostosUpdate : IDisposable
{
    private readonly DBPrepostos _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBPrepostosUpdate()
    {
        _instance = new DBPrepostos();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void DefaultConstructor_ShouldCreateInstance_WithDefaultValues()
    {
        // Act
        var prepostos = new DBPrepostos();
        // Assert
        prepostos.Should().NotBeNull();
        prepostos.ITabelaName().Should().Be("Prepostos");
        prepostos.ID.Should().Be(0);
    }

    [Fact]
    public void AllProperties_WithValidValues_ShouldSetCorrectly()
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            FGUID = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FQualificacao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FCPF = "40392285029",
            FRG = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FRegistro = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FCTPSNumero = "AAAAAAAAAAAAAAA",
            FCTPSSerie = "AAAAAAAAAA",
            FPIS = "AAAAAAAAAAAAAAAAAAAA",
            FObservacao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FEndereco = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FBairro = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FCEP = "AAAAAAAAAA",
            FFone = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FFax = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FEMail = "menphis@menphis.com.br",
            FPai = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FMae = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FClass = "A",
        };
        // Assert - All properties should be set prepostos.FGUID.Should().Be( "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        prepostos.FNome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        prepostos.FQualificacao.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        prepostos.FCPF.Should().Be("40392285029");
        prepostos.FRG.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        prepostos.FRegistro.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        prepostos.FCTPSNumero.Should().Be("AAAAAAAAAAAAAAA");
        prepostos.FCTPSSerie.Should().Be("AAAAAAAAAA");
        prepostos.FPIS.Should().Be("AAAAAAAAAAAAAAAAAAAA");
        prepostos.FObservacao.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        prepostos.FEndereco.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        prepostos.FBairro.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        prepostos.FCEP.Should().Be("AAAAAAAAAA");
        prepostos.FFone.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        prepostos.FFax.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        prepostos.FEMail.Should().Be("menphis@menphis.com.br");
        prepostos.FPai.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        prepostos.FMae.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        prepostos.FClass.Should().Be("A");
    }

    [Fact]
    public void StringProperties_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var prepostos = new DBPrepostos();
        var longString = new string ('X', 300);
        prepostos.FGUID = longString; // MAX: 150
        prepostos.FNome = longString; // MAX: 80
        prepostos.FQualificacao = longString; // MAX: 100
        prepostos.FRG = longString; // MAX: 30
        prepostos.FRegistro = longString; // MAX: 30
        prepostos.FCTPSNumero = longString; // MAX: 15
        prepostos.FCTPSSerie = longString; // MAX: 10
        prepostos.FPIS = longString; // MAX: 20
        prepostos.FEndereco = longString; // MAX: 80
        prepostos.FBairro = longString; // MAX: 50
        prepostos.FCEP = longString; // MAX: 10
        prepostos.FPai = longString; // MAX: 50
        prepostos.FMae = longString; // MAX: 50
        prepostos.FClass = longString; // MAX: 1
        // Assert - All properties should be set prepostos.FGUID.Should().HaveLength(150);
        prepostos.FNome.Should().HaveLength(80);
        prepostos.FQualificacao.Should().HaveLength(100);
        prepostos.FRG.Should().HaveLength(30);
        prepostos.FRegistro.Should().HaveLength(30);
        prepostos.FCTPSNumero.Should().HaveLength(15);
        prepostos.FCTPSSerie.Should().HaveLength(10);
        prepostos.FPIS.Should().HaveLength(20);
        prepostos.FEndereco.Should().HaveLength(80);
        prepostos.FBairro.Should().HaveLength(50);
        prepostos.FCEP.Should().HaveLength(10);
        prepostos.FPai.Should().HaveLength(50);
        prepostos.FMae.Should().HaveLength(50);
        prepostos.FClass.Should().HaveLength(1);
    }

    [Theory]
    [InlineData("João Silva", "84210454079", "joao@test.com")]
    [InlineData("Maria Santos", "42276926015", "maria@test.com")]
    public void Properties_WithValidData_ShouldSetCorrectly(string nome, string cpf, string email)
    {
        // Arrange
        var prepostos = new DBPrepostos();
        // Act
        prepostos.FNome = nome;
        prepostos.FCPF = cpf;
        prepostos.FEMail = email;
        // Assert
        prepostos.FNome.Should().Be(nome);
        prepostos.FCPF.Should().Be(cpf);
        prepostos.FEMail.Should().Be(email);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNome_Property_ShouldAcceptValidNames(string Nome)
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FNome = Nome
        };
        // Assert
        prepostos.FNome.Should().Be(Nome);
    }

    [Fact]
    public void FNome_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FNome = null
        };
        // Assert
        prepostos.FNome.Should().Be(string.Empty);
    }

    [Fact]
    public void SqlWhereConstructor_WithNullConnection_ShouldNotThrow()
    {
        // Arrange
        var sqlWhere = "preCodigo = 1";
        // Act & Assert
        var Prepostos = new DBPrepostos(sqlWhere, null);
        Prepostos.Should().NotBeNull();
    }

    [Fact]
    public void ParameterizedConstructor_WithNullConnection_ShouldReturnEarly()
    {
        // Arrange
        var parameters = new List<SqlParameter>();
        var nome = "TesteNome";
        // Act
        var prepostos = new DBPrepostos(parameters, nome, null);
        // Assert
        prepostos.Should().NotBeNull();
        prepostos.ID.Should().Be(0); // Should not have loaded any data
    }

    [Fact]
    public void FNome_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var prepostos = new DBPrepostos();
        var longName = new string ('A', 80 + 10); // Exceeds 80 character limit
        // Act
        prepostos.FNome = longName;
        // Assert
        prepostos.FNome.Should().HaveLength(80);
    }

    [Fact]
    public void FNome_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FNome = null;
        // Act
        var result = _instance.FNome;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FNome_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FNome = expectedValue;
        // Act
        var result = _instance.FNome;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FNome_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNome = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNome = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FNome = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FNome = value;
        // Act
        _instance.FNome = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = "Original Value";
        // Act
        _instance.FNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = "First Value";
        // Act
        _instance.FNome = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNome = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNome_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FNome = input;
        // Assert
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void FNome_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = null;
        // Act
        _instance.FNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = "Existing Value";
        // Act
        _instance.FNome = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FQualificacao_Property_ShouldAcceptValidNames(string Qualificacao)
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FQualificacao = Qualificacao
        };
        // Assert
        prepostos.FQualificacao.Should().Be(Qualificacao);
    }

    [Fact]
    public void FQualificacao_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FQualificacao = null
        };
        // Assert
        prepostos.FQualificacao.Should().Be(string.Empty);
    }

    [Fact]
    public void FQualificacao_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var prepostos = new DBPrepostos();
        var longName = new string ('A', 100 + 10); // Exceeds 100 character limit
        // Act
        prepostos.FQualificacao = longName;
        // Assert
        prepostos.FQualificacao.Should().HaveLength(100);
    }

    [Fact]
    public void FQualificacao_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FQualificacao = null;
        // Act
        var result = _instance.FQualificacao;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FQualificacao_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FQualificacao = expectedValue;
        // Act
        var result = _instance.FQualificacao;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FQualificacao_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFQualificacao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FQualificacao = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FQualificacao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FQualificacao_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFQualificacao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FQualificacao = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FQualificacao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FQualificacao_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFQualificacao", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FQualificacao = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FQualificacao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FQualificacao_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFQualificacao", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FQualificacao = value;
        // Act
        _instance.FQualificacao = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FQualificacao_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFQualificacao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FQualificacao = "Original Value";
        // Act
        _instance.FQualificacao = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FQualificacao_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFQualificacao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FQualificacao = "First Value";
        // Act
        _instance.FQualificacao = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FQualificacao_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFQualificacao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FQualificacao = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FQualificacao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FQualificacao_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FQualificacao = input;
        // Assert
        Assert.Equal(expected, _instance.FQualificacao);
    }

    [Fact]
    public void FQualificacao_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFQualificacao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FQualificacao = null;
        // Act
        _instance.FQualificacao = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FQualificacao_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFQualificacao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FQualificacao = "Existing Value";
        // Act
        _instance.FQualificacao = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FRG_Property_ShouldAcceptValidNames(string RG)
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FRG = RG
        };
        // Assert
        prepostos.FRG.Should().Be(RG);
    }

    [Fact]
    public void FRG_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FRG = null
        };
        // Assert
        prepostos.FRG.Should().Be(string.Empty);
    }

    [Fact]
    public void FRG_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var prepostos = new DBPrepostos();
        var longName = new string ('A', 30 + 10); // Exceeds 30 character limit
        // Act
        prepostos.FRG = longName;
        // Assert
        prepostos.FRG.Should().HaveLength(30);
    }

    [Fact]
    public void FRG_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FRG = null;
        // Act
        var result = _instance.FRG;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FRG_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FRG = expectedValue;
        // Act
        var result = _instance.FRG;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FRG_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FRG = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FRG);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRG_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FRG = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FRG);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FRG_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FRG = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FRG);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRG_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FRG = value;
        // Act
        _instance.FRG = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRG_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRG = "Original Value";
        // Act
        _instance.FRG = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRG_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRG = "First Value";
        // Act
        _instance.FRG = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRG_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FRG = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FRG);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FRG_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FRG = input;
        // Assert
        Assert.Equal(expected, _instance.FRG);
    }

    [Fact]
    public void FRG_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRG = null;
        // Act
        _instance.FRG = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRG_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRG = "Existing Value";
        // Act
        _instance.FRG = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FRegistro_Property_ShouldAcceptValidNames(string Registro)
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FRegistro = Registro
        };
        // Assert
        prepostos.FRegistro.Should().Be(Registro);
    }

    [Fact]
    public void FRegistro_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FRegistro = null
        };
        // Assert
        prepostos.FRegistro.Should().Be(string.Empty);
    }

    [Fact]
    public void FRegistro_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var prepostos = new DBPrepostos();
        var longName = new string ('A', 30 + 10); // Exceeds 30 character limit
        // Act
        prepostos.FRegistro = longName;
        // Assert
        prepostos.FRegistro.Should().HaveLength(30);
    }

    [Fact]
    public void FRegistro_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FRegistro = null;
        // Act
        var result = _instance.FRegistro;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FRegistro_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FRegistro = expectedValue;
        // Act
        var result = _instance.FRegistro;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FRegistro_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFRegistro", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FRegistro = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FRegistro);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRegistro_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFRegistro", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FRegistro = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FRegistro);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FRegistro_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFRegistro", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FRegistro = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FRegistro);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRegistro_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFRegistro", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FRegistro = value;
        // Act
        _instance.FRegistro = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRegistro_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFRegistro", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRegistro = "Original Value";
        // Act
        _instance.FRegistro = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRegistro_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFRegistro", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRegistro = "First Value";
        // Act
        _instance.FRegistro = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRegistro_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFRegistro", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FRegistro = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FRegistro);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FRegistro_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FRegistro = input;
        // Assert
        Assert.Equal(expected, _instance.FRegistro);
    }

    [Fact]
    public void FRegistro_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFRegistro", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRegistro = null;
        // Act
        _instance.FRegistro = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRegistro_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFRegistro", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRegistro = "Existing Value";
        // Act
        _instance.FRegistro = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCc")]
    public void FCTPSNumero_Property_ShouldAcceptValidNames(string CTPSNumero)
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FCTPSNumero = CTPSNumero
        };
        // Assert
        prepostos.FCTPSNumero.Should().Be(CTPSNumero);
    }

    [Fact]
    public void FCTPSNumero_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FCTPSNumero = null
        };
        // Assert
        prepostos.FCTPSNumero.Should().Be(string.Empty);
    }

    [Fact]
    public void FCTPSNumero_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var prepostos = new DBPrepostos();
        var longName = new string ('A', 15 + 10); // Exceeds 15 character limit
        // Act
        prepostos.FCTPSNumero = longName;
        // Assert
        prepostos.FCTPSNumero.Should().HaveLength(15);
    }

    [Fact]
    public void FCTPSNumero_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FCTPSNumero = null;
        // Act
        var result = _instance.FCTPSNumero;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FCTPSNumero_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FCTPSNumero = expectedValue;
        // Act
        var result = _instance.FCTPSNumero;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FCTPSNumero_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFCTPSNumero", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FCTPSNumero = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FCTPSNumero);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCTPSNumero_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFCTPSNumero", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FCTPSNumero = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FCTPSNumero);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FCTPSNumero_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFCTPSNumero", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAA";
        // Act
        _instance.FCTPSNumero = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FCTPSNumero);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCTPSNumero_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFCTPSNumero", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FCTPSNumero = value;
        // Act
        _instance.FCTPSNumero = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCTPSNumero_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFCTPSNumero", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCTPSNumero = "Original Value";
        // Act
        _instance.FCTPSNumero = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCTPSNumero_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFCTPSNumero", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCTPSNumero = "First Value";
        // Act
        _instance.FCTPSNumero = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCTPSNumero_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFCTPSNumero", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FCTPSNumero = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FCTPSNumero);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAA", "AAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBB  ", "BBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCc", "CCCCCCCCCCCCCc")]
    public void FCTPSNumero_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FCTPSNumero = input;
        // Assert
        Assert.Equal(expected, _instance.FCTPSNumero);
    }

    [Fact]
    public void FCTPSNumero_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFCTPSNumero", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCTPSNumero = null;
        // Act
        _instance.FCTPSNumero = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCTPSNumero_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFCTPSNumero", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCTPSNumero = "Existing Value";
        // Act
        _instance.FCTPSNumero = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAA")]
    [InlineData("BBBBBBB")]
    [InlineData("CCCCCCCCc")]
    public void FCTPSSerie_Property_ShouldAcceptValidNames(string CTPSSerie)
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FCTPSSerie = CTPSSerie
        };
        // Assert
        prepostos.FCTPSSerie.Should().Be(CTPSSerie);
    }

    [Fact]
    public void FCTPSSerie_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FCTPSSerie = null
        };
        // Assert
        prepostos.FCTPSSerie.Should().Be(string.Empty);
    }

    [Fact]
    public void FCTPSSerie_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var prepostos = new DBPrepostos();
        var longName = new string ('A', 10 + 10); // Exceeds 10 character limit
        // Act
        prepostos.FCTPSSerie = longName;
        // Assert
        prepostos.FCTPSSerie.Should().HaveLength(10);
    }

    [Fact]
    public void FCTPSSerie_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FCTPSSerie = null;
        // Act
        var result = _instance.FCTPSSerie;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FCTPSSerie_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FCTPSSerie = expectedValue;
        // Act
        var result = _instance.FCTPSSerie;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FCTPSSerie_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFCTPSSerie", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FCTPSSerie = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FCTPSSerie);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCTPSSerie_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFCTPSSerie", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FCTPSSerie = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FCTPSSerie);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FCTPSSerie_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFCTPSSerie", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAA  ";
        var expectedValue = "AAAAAAAA";
        // Act
        _instance.FCTPSSerie = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FCTPSSerie);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCTPSSerie_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFCTPSSerie", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FCTPSSerie = value;
        // Act
        _instance.FCTPSSerie = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCTPSSerie_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFCTPSSerie", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCTPSSerie = "Original Value";
        // Act
        _instance.FCTPSSerie = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCTPSSerie_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFCTPSSerie", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCTPSSerie = "First Value";
        // Act
        _instance.FCTPSSerie = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCTPSSerie_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFCTPSSerie", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FCTPSSerie = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FCTPSSerie);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAA", "AAAAAAAA")]
    [InlineData("  BBBBBBB  ", "BBBBBBB")]
    [InlineData("CCCCCCCCc", "CCCCCCCCc")]
    public void FCTPSSerie_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FCTPSSerie = input;
        // Assert
        Assert.Equal(expected, _instance.FCTPSSerie);
    }

    [Fact]
    public void FCTPSSerie_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFCTPSSerie", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCTPSSerie = null;
        // Act
        _instance.FCTPSSerie = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCTPSSerie_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFCTPSSerie", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCTPSSerie = "Existing Value";
        // Act
        _instance.FCTPSSerie = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCc")]
    public void FPIS_Property_ShouldAcceptValidNames(string PIS)
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FPIS = PIS
        };
        // Assert
        prepostos.FPIS.Should().Be(PIS);
    }

    [Fact]
    public void FPIS_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FPIS = null
        };
        // Assert
        prepostos.FPIS.Should().Be(string.Empty);
    }

    [Fact]
    public void FPIS_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var prepostos = new DBPrepostos();
        var longName = new string ('A', 20 + 10); // Exceeds 20 character limit
        // Act
        prepostos.FPIS = longName;
        // Assert
        prepostos.FPIS.Should().HaveLength(20);
    }

    [Fact]
    public void FPIS_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FPIS = null;
        // Act
        var result = _instance.FPIS;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FPIS_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FPIS = expectedValue;
        // Act
        var result = _instance.FPIS;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FPIS_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFPIS", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FPIS = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FPIS);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPIS_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFPIS", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FPIS = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FPIS);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FPIS_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFPIS", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FPIS = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FPIS);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPIS_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFPIS", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FPIS = value;
        // Act
        _instance.FPIS = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPIS_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFPIS", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPIS = "Original Value";
        // Act
        _instance.FPIS = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPIS_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFPIS", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPIS = "First Value";
        // Act
        _instance.FPIS = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPIS_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFPIS", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FPIS = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FPIS);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCc")]
    public void FPIS_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FPIS = input;
        // Assert
        Assert.Equal(expected, _instance.FPIS);
    }

    [Fact]
    public void FPIS_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFPIS", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPIS = null;
        // Act
        _instance.FPIS = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPIS_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFPIS", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPIS = "Existing Value";
        // Act
        _instance.FPIS = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData(1000.50)]
    [InlineData(0)]
    [InlineData(-100.25)]
    public void FSalario_Property_ShouldAcceptDecimalValues(decimal Salario)
    {
        // Arrange
        var prepostos = new DBPrepostos();
        // Act
        prepostos.FSalario = Salario;
        // Assert
        prepostos.FSalario.Should().Be(Salario);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FObservacao_Property_ShouldAcceptValidNames(string Observacao)
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FObservacao = Observacao
        };
        // Assert
        prepostos.FObservacao.Should().Be(Observacao);
    }

    [Fact]
    public void FObservacao_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FObservacao = null
        };
        // Assert
        prepostos.FObservacao.Should().Be(string.Empty);
    }

    [Fact]
    public void FObservacao_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FObservacao = null;
        // Act
        var result = _instance.FObservacao;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FObservacao_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FObservacao = expectedValue;
        // Act
        var result = _instance.FObservacao;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FObservacao_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFObservacao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FObservacao = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FObservacao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObservacao_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFObservacao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FObservacao = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FObservacao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FObservacao_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFObservacao", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  ";
        var expectedValue = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM";
        // Act
        _instance.FObservacao = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FObservacao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObservacao_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFObservacao", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FObservacao = value;
        // Act
        _instance.FObservacao = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObservacao_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFObservacao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObservacao = "Original Value";
        // Act
        _instance.FObservacao = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObservacao_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFObservacao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObservacao = "First Value";
        // Act
        _instance.FObservacao = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObservacao_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFObservacao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FObservacao = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FObservacao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData
    [InlineData
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FObservacao_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FObservacao = input;
        // Assert
        Assert.Equal(expected, _instance.FObservacao);
    }

    [Fact]
    public void FObservacao_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFObservacao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObservacao = null;
        // Act
        _instance.FObservacao = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObservacao_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFObservacao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObservacao = "Existing Value";
        // Act
        _instance.FObservacao = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FEndereco_Property_ShouldAcceptValidNames(string Endereco)
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FEndereco = Endereco
        };
        // Assert
        prepostos.FEndereco.Should().Be(Endereco);
    }

    [Fact]
    public void FEndereco_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FEndereco = null
        };
        // Assert
        prepostos.FEndereco.Should().Be(string.Empty);
    }

    [Fact]
    public void FEndereco_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var prepostos = new DBPrepostos();
        var longName = new string ('A', 80 + 10); // Exceeds 80 character limit
        // Act
        prepostos.FEndereco = longName;
        // Assert
        prepostos.FEndereco.Should().HaveLength(80);
    }

    [Fact]
    public void FEndereco_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FEndereco = null;
        // Act
        var result = _instance.FEndereco;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FEndereco_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FEndereco = expectedValue;
        // Act
        var result = _instance.FEndereco;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FEndereco_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEndereco = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FEndereco);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEndereco = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FEndereco);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FEndereco = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FEndereco);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FEndereco = value;
        // Act
        _instance.FEndereco = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEndereco = "Original Value";
        // Act
        _instance.FEndereco = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEndereco = "First Value";
        // Act
        _instance.FEndereco = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEndereco = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FEndereco);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FEndereco_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FEndereco = input;
        // Assert
        Assert.Equal(expected, _instance.FEndereco);
    }

    [Fact]
    public void FEndereco_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEndereco = null;
        // Act
        _instance.FEndereco = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEndereco = "Existing Value";
        // Act
        _instance.FEndereco = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FBairro_Property_ShouldAcceptValidNames(string Bairro)
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FBairro = Bairro
        };
        // Assert
        prepostos.FBairro.Should().Be(Bairro);
    }

    [Fact]
    public void FBairro_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FBairro = null
        };
        // Assert
        prepostos.FBairro.Should().Be(string.Empty);
    }

    [Fact]
    public void FBairro_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var prepostos = new DBPrepostos();
        var longName = new string ('A', 50 + 10); // Exceeds 50 character limit
        // Act
        prepostos.FBairro = longName;
        // Assert
        prepostos.FBairro.Should().HaveLength(50);
    }

    [Fact]
    public void FBairro_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FBairro = null;
        // Act
        var result = _instance.FBairro;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FBairro_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FBairro = expectedValue;
        // Act
        var result = _instance.FBairro;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FBairro_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FBairro = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FBairro);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairro_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FBairro = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FBairro);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FBairro_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FBairro = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FBairro);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairro_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FBairro = value;
        // Act
        _instance.FBairro = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairro_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FBairro = "Original Value";
        // Act
        _instance.FBairro = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairro_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FBairro = "First Value";
        // Act
        _instance.FBairro = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairro_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FBairro = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FBairro);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FBairro_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FBairro = input;
        // Assert
        Assert.Equal(expected, _instance.FBairro);
    }

    [Fact]
    public void FBairro_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FBairro = null;
        // Act
        _instance.FBairro = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairro_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FBairro = "Existing Value";
        // Act
        _instance.FBairro = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FFone_Property_ShouldAcceptValidNames(string Fone)
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FFone = Fone
        };
        // Assert
        prepostos.FFone.Should().Be(Fone);
    }

    [Fact]
    public void FFone_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FFone = null
        };
        // Assert
        prepostos.FFone.Should().Be(string.Empty);
    }

    [Fact]
    public void FFone_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FFone = null;
        // Act
        var result = _instance.FFone;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FFone_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FFone = expectedValue;
        // Act
        var result = _instance.FFone;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FFone_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFone = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FFone);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFone = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FFone);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FFone_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  ";
        var expectedValue = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM";
        // Act
        _instance.FFone = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FFone);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FFone = value;
        // Act
        _instance.FFone = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFone = "Original Value";
        // Act
        _instance.FFone = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFone = "First Value";
        // Act
        _instance.FFone = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFone = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FFone);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData
    [InlineData
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FFone_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FFone = input;
        // Assert
        Assert.Equal(expected, _instance.FFone);
    }

    [Fact]
    public void FFone_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFone = null;
        // Act
        _instance.FFone = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFone = "Existing Value";
        // Act
        _instance.FFone = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FFax_Property_ShouldAcceptValidNames(string Fax)
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FFax = Fax
        };
        // Assert
        prepostos.FFax.Should().Be(Fax);
    }

    [Fact]
    public void FFax_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FFax = null
        };
        // Assert
        prepostos.FFax.Should().Be(string.Empty);
    }

    [Fact]
    public void FFax_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FFax = null;
        // Act
        var result = _instance.FFax;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FFax_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FFax = expectedValue;
        // Act
        var result = _instance.FFax;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FFax_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFax = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FFax);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFax = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FFax);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FFax_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  ";
        var expectedValue = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM";
        // Act
        _instance.FFax = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FFax);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FFax = value;
        // Act
        _instance.FFax = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFax = "Original Value";
        // Act
        _instance.FFax = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFax = "First Value";
        // Act
        _instance.FFax = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFax = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FFax);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData
    [InlineData
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FFax_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FFax = input;
        // Assert
        Assert.Equal(expected, _instance.FFax);
    }

    [Fact]
    public void FFax_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFax = null;
        // Act
        _instance.FFax = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFax = "Existing Value";
        // Act
        _instance.FFax = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FPai_Property_ShouldAcceptValidNames(string Pai)
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FPai = Pai
        };
        // Assert
        prepostos.FPai.Should().Be(Pai);
    }

    [Fact]
    public void FPai_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FPai = null
        };
        // Assert
        prepostos.FPai.Should().Be(string.Empty);
    }

    [Fact]
    public void FPai_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var prepostos = new DBPrepostos();
        var longName = new string ('A', 50 + 10); // Exceeds 50 character limit
        // Act
        prepostos.FPai = longName;
        // Assert
        prepostos.FPai.Should().HaveLength(50);
    }

    [Fact]
    public void FPai_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FPai = null;
        // Act
        var result = _instance.FPai;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FPai_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FPai = expectedValue;
        // Act
        var result = _instance.FPai;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FPai_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFPai", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FPai = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FPai);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPai_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFPai", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FPai = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FPai);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FPai_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFPai", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FPai = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FPai);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPai_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFPai", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FPai = value;
        // Act
        _instance.FPai = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPai_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFPai", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPai = "Original Value";
        // Act
        _instance.FPai = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPai_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFPai", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPai = "First Value";
        // Act
        _instance.FPai = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPai_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFPai", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FPai = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FPai);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FPai_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FPai = input;
        // Assert
        Assert.Equal(expected, _instance.FPai);
    }

    [Fact]
    public void FPai_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFPai", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPai = null;
        // Act
        _instance.FPai = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPai_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFPai", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPai = "Existing Value";
        // Act
        _instance.FPai = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FMae_Property_ShouldAcceptValidNames(string Mae)
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FMae = Mae
        };
        // Assert
        prepostos.FMae.Should().Be(Mae);
    }

    [Fact]
    public void FMae_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var prepostos = new DBPrepostos
        {
            // Act
            FMae = null
        };
        // Assert
        prepostos.FMae.Should().Be(string.Empty);
    }

    [Fact]
    public void FMae_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var prepostos = new DBPrepostos();
        var longName = new string ('A', 50 + 10); // Exceeds 50 character limit
        // Act
        prepostos.FMae = longName;
        // Assert
        prepostos.FMae.Should().HaveLength(50);
    }

    [Fact]
    public void FMae_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FMae = null;
        // Act
        var result = _instance.FMae;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FMae_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FMae = expectedValue;
        // Act
        var result = _instance.FMae;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FMae_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFMae", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FMae = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FMae);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FMae_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFMae", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FMae = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FMae);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FMae_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFMae", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FMae = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FMae);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FMae_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFMae", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FMae = value;
        // Act
        _instance.FMae = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FMae_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFMae", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FMae = "Original Value";
        // Act
        _instance.FMae = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FMae_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFMae", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FMae = "First Value";
        // Act
        _instance.FMae = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FMae_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFMae", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FMae = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FMae);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FMae_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FMae = input;
        // Assert
        Assert.Equal(expected, _instance.FMae);
    }

    [Fact]
    public void FMae_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFMae", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FMae = null;
        // Act
        _instance.FMae = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FMae_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPrepostos).GetField("pFldFMae", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FMae = "Existing Value";
        // Act
        _instance.FMae = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

#region Testes de GUID
    [Fact]
    public void GUID_DefaultValue_ShouldBeEmpty()
    {
        Assert.Equal(string.Empty, _instance.FGUID);
    }

    [Fact]
    public void GUID_SetValidGUID_ShouldStore()
    {
        var guid = Guid.NewGuid().ToString();
        _instance.FGUID = guid;
        Assert.Equal(guid, _instance.FGUID);
    }

#endregion
    [Fact]
    public void TabelaNome_Property_ShouldReturnCorrectTableName()
    {
        // Arrange
        var prepostos = new DBPrepostos();
        // Act & Assert
        prepostos.TabelaNome.Should().Be("Prepostos");
    }

    public virtual void Dispose()
    {
    // Cleanup resources if needed
    }
}