// 100% auto-generated by Source Genesys Core
// copyright Â© 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// ReSharper disable once CheckNamespace
namespace MenphisSI.SG.GerAdv.DicInfo;
[Serializable]
public partial class DBModelosDocumentosODicInfo : IODicInfo
{
    public ImmutableArray<DBInfoSystem> IListFields() => List;
    public ImmutableArray<DBInfoSystem> IFieldsRaw() => ListWithoutAuditor;
    public ImmutableArray<DBInfoSystem> IPkFields() => ListPk();
    public ImmutableArray<DBInfoSystem> IPkIndicesFields() => ListPkIndices();
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITabelaNome() => DBModelosDocumentosDicInfo.TabelaNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoCodigo() => DBModelosDocumentosDicInfo.CampoCodigo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITypeFieldCode() => "int";
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string IPrefixo() => DBModelosDocumentosDicInfo.TablePrefix;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IdIsIdentity() => false;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoNome() => DBModelosDocumentosDicInfo.CampoNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string NameSpace() => nameof(GerAdv);
    private static readonly FrozenDictionary<string, DBInfoSystem> _fieldLookup = List.ToFrozenDictionary(f => f.FNome, StringComparer.OrdinalIgnoreCase);
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public DBInfoSystem? GetInfoSystemByNameField(string campo) => _fieldLookup.GetValueOrDefault(campo);
    public static string TCampoCodigo => DBModelosDocumentosDicInfo.CampoCodigo;
    public static string TCampoNome => DBModelosDocumentosDicInfo.CampoNome;
    public static string TTabelaNome => DBModelosDocumentosDicInfo.TabelaNome;
    public static string TTablePrefix => DBModelosDocumentosDicInfo.TablePrefix;
    public static ImmutableArray<DBInfoSystem> List => [DBModelosDocumentosDicInfo.MdcNome, DBModelosDocumentosDicInfo.MdcRemuneracao, DBModelosDocumentosDicInfo.MdcAssinatura, DBModelosDocumentosDicInfo.MdcHeader, DBModelosDocumentosDicInfo.MdcFooter, DBModelosDocumentosDicInfo.MdcExtra1, DBModelosDocumentosDicInfo.MdcExtra2, DBModelosDocumentosDicInfo.MdcExtra3, DBModelosDocumentosDicInfo.MdcOutorgante, DBModelosDocumentosDicInfo.MdcOutorgados, DBModelosDocumentosDicInfo.MdcPoderes, DBModelosDocumentosDicInfo.MdcObjeto, DBModelosDocumentosDicInfo.MdcTitulo, DBModelosDocumentosDicInfo.MdcTestemunhas, DBModelosDocumentosDicInfo.MdcTipoModeloDocumento, DBModelosDocumentosDicInfo.MdcCSS, DBModelosDocumentosDicInfo.MdcGUID, DBModelosDocumentosDicInfo.MdcQuemCad, DBModelosDocumentosDicInfo.MdcDtCad, DBModelosDocumentosDicInfo.MdcQuemAtu, DBModelosDocumentosDicInfo.MdcDtAtu, DBModelosDocumentosDicInfo.MdcVisto];
    public static ImmutableArray<DBInfoSystem> ListWithoutAuditor => [DBModelosDocumentosDicInfo.MdcNome, DBModelosDocumentosDicInfo.MdcRemuneracao, DBModelosDocumentosDicInfo.MdcAssinatura, DBModelosDocumentosDicInfo.MdcHeader, DBModelosDocumentosDicInfo.MdcFooter, DBModelosDocumentosDicInfo.MdcExtra1, DBModelosDocumentosDicInfo.MdcExtra2, DBModelosDocumentosDicInfo.MdcExtra3, DBModelosDocumentosDicInfo.MdcOutorgante, DBModelosDocumentosDicInfo.MdcOutorgados, DBModelosDocumentosDicInfo.MdcPoderes, DBModelosDocumentosDicInfo.MdcObjeto, DBModelosDocumentosDicInfo.MdcTitulo, DBModelosDocumentosDicInfo.MdcTestemunhas, DBModelosDocumentosDicInfo.MdcTipoModeloDocumento, DBModelosDocumentosDicInfo.MdcCSS, DBModelosDocumentosDicInfo.MdcGUID];

    public static ImmutableArray<DBInfoSystem> ListPk()
    {
        ImmutableArray<string> campos = ImmutableArray.CreateRange(["mdcNome"]);
        var result = campos.Where(campo => !campo.Equals(DBModelosDocumentosDicInfo.CampoCodigo)).Select(campo => List.FirstOrDefault(t => t.FNome == campo)).Where(item => item != null).Cast<DBInfoSystem>().Distinct().ToList();
        return result.Count > 0 ? [..result] : ImmutableArray<DBInfoSystem>.Empty;
    }

    public static ImmutableArray<DBInfoSystem> ListPkIndices()
    {
        ImmutableArray<string> campos = ImmutableArray.CreateRange(["mdcCodigo", "mdcNome"]);
        var result = campos.Where(campo => !campo.Equals(DBModelosDocumentosDicInfo.CampoCodigo)).Select(campo => List.FirstOrDefault(t => t.FNome == campo)).Where(item => item != null).Cast<DBInfoSystem>().Distinct().ToList();
        return result.Count > 0 ? [..result] : ImmutableArray<DBInfoSystem>.Empty;
    }
}