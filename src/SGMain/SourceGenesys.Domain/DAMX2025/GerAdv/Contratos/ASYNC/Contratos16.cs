// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
public partial class DBContratos
{
    /// <summary>
    /// Factory method async para carregar [tableMin]
    /// </summary>
    public static async Task<DBContratos> CreateAsync(int nCodigo, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        var registro = new DBContratos();
        await registro.CarregarAsync(nCodigo, oCnn, cancellationToken);
        return registro;
    }

    /// <summary>
    /// Carregar dados async
    /// </summary>
    protected async Task CarregarAsync(int id, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        if (id.IsEmptyIDNumber() || oCnn is null)
            return;
        using var cmd = new SqlCommand($"{ConfiguracoesDBT.SQLNoCount}SELECT TOP (1) {CamposSqlX} FROM {PTabelaNome.dbo(oCnn)} WHERE [{CampoCodigo}] = @ThisIDToLoad", oCnn.InnerConnection);
        cmd.Parameters.AddWithValue("@ThisIDToLoad", id);
        using var ds = await ConfiguracoesDBT.GetDataTableAsync(cmd, CommandBehavior.SingleRow, oCnn, cancellationToken);
        if (ds is null)
        {
            throw new InvalidOperationException($"Erro ao carregar registro {this.TabelaNome}.");
        }

        if (ds?.Rows.Count > 0)
        {
            CarregarDadosBd(ds.Rows[0]);
        }
    }

#if (!NOTSTORED_Contratos)
    /// <summary>
    /// Update async com timeout e cancellation
    /// </summary>
    public virtual async Task<int> UpdateAsync(MsiSqlConnection? oCnn, int insertId = 0, CancellationToken cancellationToken = default, int timeoutSeconds = 30)
    {
        var isInsert = insertId == 0 && ID == 0;
        if (!isInsert && !HasAnyFieldChanged())
            return 0;
        if (oCnn is null)
        {
#if DEBUG
            PTabelaNome.PopupBox("oCnn is null - UpdateAsync()");
#endif
            return 0;
        }

        try
        {
            var updateTool = new DBToolWTable32Async(PTabelaNome, CampoCodigo, ID == 0)
            {
                IsMachineCode = true,
                Identity = this.IdIsIdentity()
            };
            updateTool.Where = isInsert ? string.Empty : $"{CampoCodigo}={ID}";
            ConfigureUpdateFields(updateTool);
            ConfigureAuditorFields(updateTool);
            if (insertId != 0)
            {
                return await GravaNewIdAsync(updateTool, insertId, oCnn, cancellationToken);
            }

            var result = await updateTool.RecUpdateAsync(oCnn, cancellationToken);
            if (updateTool.Insert && result == "OK")
            {
                ID = updateTool.GetCodigo();
                if (ID == 0)
                {
                    Error = -2;
                    ErrorDescription = "O registro não pode ser incluído, tente mais tarde.";
                    return Error;
                }
            }

            return result == "OK" ? 0 : -1;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (Exception ex)
        {
            Error = -1;
            ErrorDescription = ex.Message;
            throw new InvalidOperationException($"Factory error");
        }
    }

#endif
    /// <summary>
    /// Verificar se existe async
    /// </summary>
    public static async Task<bool> ExisteAsync(int id, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        if (oCnn is null || id <= 0)
            return false;
        var existe = await ConfiguracoesDBT.GetScalarAsync<int?>($"SELECT 1 FROM {PTabelaNome.dbo(oCnn)} WHERE {CampoCodigo} = {id}", oCnn, cancellationToken);
        return existe.HasValue;
    }

    /// <summary>
    /// Delete async
    /// </summary>
    /// <param name = "operadorId">For future Audity</param>
    /// <param name = "id"></param>
    /// <param name = "oCnn"></param>
    /// <param name = "cancellationToken"></param>
    /// <returns></returns>
    /// <exception cref = "InvalidOperationException"></exception>
    public static async Task<bool> DeleteRecordAsync(int operadorId, int id, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        if (oCnn is null || id <= 0)
            return false;
        var sql = $"DELETE FROM {PTabelaNome.dbo(oCnn)} WHERE {CampoCodigo} = @Id";
        try
        {
            using var cmd = new SqlCommand(sql, oCnn.InnerConnection);
            cmd.Parameters.AddWithValue("@Id", id);
            var rowsAffected = await cmd.ExecuteNonQueryAsync(cancellationToken);
            return rowsAffected > 0;
        }
        catch (SqlException ex)when (ex.Number == 547)
        {
            throw new InvalidOperationException("Este registro não pode ser excluído, pois está vinculado a outros registros.");
        }
    }

#if (!NOTSTORED_Contratos)
    // Helper methods
    private bool HasAnyFieldChanged() => pFldFProcesso || pFldFCliente || pFldFAdvogado || pFldFDia || pFldFValor || pFldFDataInicio || pFldFDataTermino || pFldFOcultarRelatorio || pFldFPercEscritorio || pFldFValorConsultoria || pFldFGUID || pFldFTipoCobranca || pFldFProtestar || pFldFJuros || pFldFValorRealizavel || pFldFDOCUMENTO || pFldFEMail1 || pFldFEMail2 || pFldFEMail3 || pFldFPessoa1 || pFldFPessoa2 || pFldFPessoa3 || pFldFOBS || pFldFClienteContrato || pFldFIdExtrangeiro || pFldFChaveContrato || pFldFAvulso || pFldFSuspenso || pFldFMulta;
    private void ConfigureUpdateFields(DBToolWTable32Async updateTool)
    {
        if (pFldFProcesso)
            updateTool.Fields(DBContratosDicInfo.Processo, m_FProcesso, ETiposCampos.FNumber);
        if (pFldFCliente)
            updateTool.Fields(DBContratosDicInfo.Cliente, m_FCliente, ETiposCampos.FNumber);
        if (pFldFAdvogado)
            updateTool.Fields(DBContratosDicInfo.Advogado, m_FAdvogado, ETiposCampos.FNumber);
        if (pFldFDia)
            updateTool.Fields(DBContratosDicInfo.Dia, m_FDia, ETiposCampos.FNumber);
        if (pFldFValor)
            updateTool.Fields(DBContratosDicInfo.Valor, m_FValor, ETiposCampos.FDecimal);
        if (pFldFDataInicio)
            updateTool.Fields(DBContratosDicInfo.DataInicio, m_FDataInicio, ETiposCampos.FDate);
        if (pFldFDataTermino)
            updateTool.Fields(DBContratosDicInfo.DataTermino, m_FDataTermino, ETiposCampos.FDate);
        if (pFldFOcultarRelatorio || updateTool.Insert)
            updateTool.Fields(DBContratosDicInfo.OcultarRelatorio, m_FOcultarRelatorio, ETiposCampos.FBoolean);
        if (pFldFPercEscritorio)
            updateTool.Fields(DBContratosDicInfo.PercEscritorio, m_FPercEscritorio, ETiposCampos.FDecimal);
        if (pFldFValorConsultoria)
            updateTool.Fields(DBContratosDicInfo.ValorConsultoria, m_FValorConsultoria, ETiposCampos.FDecimal);
        if (pFldFGUID)
            updateTool.Fields(DBContratosDicInfo.GUID, m_FGUID, ETiposCampos.FString);
        if (pFldFTipoCobranca)
            updateTool.Fields(DBContratosDicInfo.TipoCobranca, m_FTipoCobranca, ETiposCampos.FNumber);
        if (pFldFProtestar)
            updateTool.Fields(DBContratosDicInfo.Protestar, m_FProtestar, ETiposCampos.FString);
        if (pFldFJuros)
            updateTool.Fields(DBContratosDicInfo.Juros, m_FJuros, ETiposCampos.FString);
        if (pFldFValorRealizavel)
            updateTool.Fields(DBContratosDicInfo.ValorRealizavel, m_FValorRealizavel, ETiposCampos.FDecimal);
        if (pFldFDOCUMENTO)
            updateTool.Fields(DBContratosDicInfo.DOCUMENTO, m_FDOCUMENTO, ETiposCampos.FString);
        if (pFldFEMail1)
            updateTool.Fields(DBContratosDicInfo.EMail1, m_FEMail1, ETiposCampos.FString);
        if (pFldFEMail2)
            updateTool.Fields(DBContratosDicInfo.EMail2, m_FEMail2, ETiposCampos.FString);
        if (pFldFEMail3)
            updateTool.Fields(DBContratosDicInfo.EMail3, m_FEMail3, ETiposCampos.FString);
        if (pFldFPessoa1)
            updateTool.Fields(DBContratosDicInfo.Pessoa1, m_FPessoa1, ETiposCampos.FString);
        if (pFldFPessoa2)
            updateTool.Fields(DBContratosDicInfo.Pessoa2, m_FPessoa2, ETiposCampos.FString);
        if (pFldFPessoa3)
            updateTool.Fields(DBContratosDicInfo.Pessoa3, m_FPessoa3, ETiposCampos.FString);
        if (pFldFOBS)
            updateTool.Fields(DBContratosDicInfo.OBS, m_FOBS, ETiposCampos.FString);
        if (pFldFClienteContrato)
            updateTool.Fields(DBContratosDicInfo.ClienteContrato, m_FClienteContrato, ETiposCampos.FNumber);
        if (pFldFIdExtrangeiro)
            updateTool.Fields(DBContratosDicInfo.IdExtrangeiro, m_FIdExtrangeiro, ETiposCampos.FNumber);
        if (pFldFChaveContrato)
            updateTool.Fields(DBContratosDicInfo.ChaveContrato, m_FChaveContrato, ETiposCampos.FString);
        if (pFldFAvulso || updateTool.Insert)
            updateTool.Fields(DBContratosDicInfo.Avulso, m_FAvulso, ETiposCampos.FBoolean);
        if (pFldFSuspenso || updateTool.Insert)
            updateTool.Fields(DBContratosDicInfo.Suspenso, m_FSuspenso, ETiposCampos.FBoolean);
        if (pFldFMulta)
            updateTool.Fields(DBContratosDicInfo.Multa, m_FMulta, ETiposCampos.FString);
    }

#endif
#if (!NOTSTORED_Contratos)
    private void ConfigureAuditorFields(DBToolWTable32Async updateTool)
    {
        // Tracking: CodeAuditor(202508121515)
        var isInsert = ID.IsEmptyIDNumber();
        if (m_AuditorQuem == 0)
            AuditorQuem = 1;
        if (isInsert)
            updateTool.Fields(DBContratosDicInfo.QuemCad, AuditorQuem, ETiposCampos.FNumber);
        if (isInsert)
            updateTool.Fields(DBContratosDicInfo.DtCad, DevourerOne.DateTimeUtc, ETiposCampos.FDate);
        if (!isInsert)
            updateTool.Fields(DBContratosDicInfo.QuemAtu, AuditorQuem, ETiposCampos.FNumber);
        if (!isInsert)
            updateTool.Fields(DBContratosDicInfo.DtAtu, DevourerOne.DateTimeUtc, ETiposCampos.FDate);
        updateTool.Fields(DBContratosDicInfo.Visto, false, ETiposCampos.FBoolean);
        if (string.IsNullOrWhiteSpace(m_FGUID))
        {
            this.FGUID = Guid.NewGuid().ToString();
        }
    }

    private async Task<int> GravaNewIdAsync(DBToolWTable32Async updateTool, int insertId, MsiSqlConnection oCnn, CancellationToken cancellationToken)
    {
        ID = insertId;
        updateTool.Fields(CampoCodigo, insertId, ETiposCampos.FNumber);
        var result = await updateTool.RecUpdateAsync(oCnn, cancellationToken, true);
        return result == "OK" ? 0 : -3;
    }
#endif
}