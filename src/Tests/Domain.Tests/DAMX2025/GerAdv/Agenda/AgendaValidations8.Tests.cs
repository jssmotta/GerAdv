// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class AgendaValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFAgendaFactory> _mockAgendaFactory;
    private readonly Mock<IAgendaReader> _mockReader;
    private readonly AgendaValidation _validation;
    private readonly Mock<IAgendaService> _mockAgendaService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<ICidadeReader> _mockCidadeReader;
    private readonly Mock<IAdvogadosReader> _mockAdvogadosReader;
    private readonly Mock<IFuncionariosReader> _mockFuncionariosReader;
    private readonly Mock<ITipoCompromissoReader> _mockTipoCompromissoReader;
    private readonly Mock<IClientesReader> _mockClientesReader;
    private readonly Mock<IAreaReader> _mockAreaReader;
    private readonly Mock<IJusticaReader> _mockJusticaReader;
    private readonly Mock<IOperadorReader> _mockOperadorReader;
    private readonly Mock<IPrepostosReader> _mockPrepostosReader;
    private readonly AgendaService _service;
    private readonly string _validUri = "test-uri";
    public AgendaValidationTests()
    {
        _mockAgendaFactory = new Mock<IFAgendaFactory>();
        _mockReader = new Mock<IAgendaReader>();
        _validation = new AgendaValidation();
        _mockAgendaService = new Mock<IAgendaService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockCidadeReader = new Mock<ICidadeReader>();
        _mockAdvogadosReader = new Mock<IAdvogadosReader>();
        _mockFuncionariosReader = new Mock<IFuncionariosReader>();
        _mockTipoCompromissoReader = new Mock<ITipoCompromissoReader>();
        _mockClientesReader = new Mock<IClientesReader>();
        _mockAreaReader = new Mock<IAreaReader>();
        _mockJusticaReader = new Mock<IJusticaReader>();
        _mockOperadorReader = new Mock<IOperadorReader>();
        _mockPrepostosReader = new Mock<IPrepostosReader>();
    }

#region Class Structure Tests
    [Fact]
    public void AgendaValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IAgendaValidation>();
    }

    [Fact]
    public void AgendaValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(AgendaValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void AgendaValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(AgendaValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.Agenda CreateValidAgenda()
    {
        return new Models.Agenda
        {
            Id = 1,
            IDCOB = 0,
            ClienteAvisado = false,
            RevisarP2 = true,
            IDNE = 0,
            Cidade = 0,
            Oculto = 0,
            CartaPrecatoria = 0,
            Revisar = false,
            HrFinal = "27/05/2022",
            Advogado = 0,
            EventoGerador = 0,
            EventoData = "24/04/1975",
            Funcionario = 0,
            Data = "27/05/2022",
            EventoPrazo = 0,
            Hora = "27/05/2022",
            Compromisso = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            TipoCompromisso = 0,
            Cliente = 0,
            Liberado = true,
            Importante = false,
            Concluido = true,
            Area = 0,
            Justica = 0,
            Processo = 0,
            IDHistorico = 0,
            IDInsProcesso = 0,
            Usuario = 0,
            Preposto = 0,
            QuemID = 0,
            QuemCodigo = 0,
            Status = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Valor = 1m,
            Decisao
            Sempre = 0,
            PrazoDias = 0,
            ProtocoloIntegrado = 0,
            DataInicioPrazo = "24/04/1975",
            UsuarioCiente = false
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockAgendaService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterAgenda>(), It.IsAny<string>())).ReturnsAsync(new List<AgendaResponseAll>());
        // Setup other mocks but don't override the Agendas service mock
        _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.CidadeResponse { Id = id }));
        _mockAdvogadosReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.AdvogadosResponse { Id = id }));
        _mockFuncionariosReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.FuncionariosResponse { Id = id }));
        _mockTipoCompromissoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.TipoCompromissoResponse { Id = id }));
        _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.ClientesResponse { Id = id }));
        _mockAreaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.AreaResponse { Id = id }));
        _mockJusticaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.JusticaResponse { Id = id }));
        _mockOperadorReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.OperadorResponse { Id = id }));
        _mockPrepostosReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.PrepostosResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockAgendaService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterAgenda>(), It.IsAny<string>())).ReturnsAsync(new List<AgendaResponseAll>());
        // Setup other mocks but don't override the Agendas service mock
        _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.CidadeResponse { Id = 0 }));
        _mockAdvogadosReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.AdvogadosResponse { Id = 0 }));
        _mockFuncionariosReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.FuncionariosResponse { Id = 0 }));
        _mockTipoCompromissoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.TipoCompromissoResponse { Id = 0 }));
        _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.ClientesResponse { Id = 0 }));
        _mockAreaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.AreaResponse { Id = 0 }));
        _mockJusticaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.JusticaResponse { Id = 0 }));
        _mockOperadorReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.OperadorResponse { Id = 0 }));
        _mockPrepostosReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.PrepostosResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var agenda = new Models.Agenda
        {
            Id = 1,
            ClienteAvisado = false,
            RevisarP2 = true,
            Revisar = false,
            HrFinal = null,
            EventoData = null,
            Data = "27/05/2022",
            Hora = null,
            Compromisso = null,
            Liberado = true,
            Importante = false,
            Concluido = true,
            Status = null,
            Decisao = null,
            DataInicioPrazo = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region EventoData Validation Tests
    [Theory]
    [InlineData("01/01/1899")]
    [InlineData("31/12/1899")]
    public async Task ValidateReg_WithEventoDataBeforeMinDate_ShouldThrowSGValidationException(string invalidDate)
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.EventoData = invalidDate;
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("01/01/1900.");
    }

    [Fact]
    public async Task ValidateReg_WithValidEventoData_ShouldPass()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.EventoData = "01/01/1990";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullEventoData_ShouldPass()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.EventoData = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithInvalidDateEventoDataFormat_ShouldPass()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.EventoData = "invalid-date";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue(); // Invalid format is ignored, not validated
    }

    [Fact]
    public async Task ValidateReg_WithEmptyEventoData_ShouldPass()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.EventoData = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region DataInicioPrazo Validation Tests
    [Theory]
    [InlineData("01/01/1899")]
    [InlineData("31/12/1899")]
    public async Task ValidateReg_WithDataInicioPrazoBeforeMinDate_ShouldThrowSGValidationException(string invalidDate)
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.DataInicioPrazo = invalidDate;
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("01/01/1900.");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataInicioPrazo_ShouldPass()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.DataInicioPrazo = "01/01/1990";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullDataInicioPrazo_ShouldPass()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.DataInicioPrazo = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithInvalidDateDataInicioPrazoFormat_ShouldPass()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.DataInicioPrazo = "invalid-date";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue(); // Invalid format is ignored, not validated
    }

    [Fact]
    public async Task ValidateReg_WithEmptyDataInicioPrazo_ShouldPass()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.DataInicioPrazo = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region Foreign Key Validation Tests - Cidade
    [Fact]
    public async Task ValidateReg_WithInvalidCidade_ShouldThrowSGValidationException()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Cidade = 999;
        _mockCidadeReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.CidadeResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedCidadeId_ShouldThrowSGValidationException()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Cidade = 999;
        var reg888 = new Models.Response.CidadeResponse
        {
            Id = 888
        }; // Different ID
        _mockCidadeReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidCidade_ShouldPass()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Cidade = 123;
        var reg123 = new Models.Response.CidadeResponse
        {
            Id = 123
        };
        _mockCidadeReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyCidade_ShouldPass()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Cidade = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockCidadeReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - Advogados
    [Fact]
    public async Task ValidateReg_WithInvalidAdvogados_ShouldThrowSGValidationException()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Advogado = 999;
        _mockAdvogadosReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.AdvogadosResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedAdvogadosId_ShouldThrowSGValidationException()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Advogado = 999;
        var reg888 = new Models.Response.AdvogadosResponse
        {
            Id = 888
        }; // Different ID
        _mockAdvogadosReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidAdvogados_ShouldPass()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Advogado = 123;
        var reg123 = new Models.Response.AdvogadosResponse
        {
            Id = 123
        };
        _mockAdvogadosReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyAdvogados_ShouldPass()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Advogado = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockAdvogadosReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - Funcionarios
    [Fact]
    public async Task ValidateReg_WithInvalidFuncionarios_ShouldThrowSGValidationException()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Funcionario = 999;
        _mockFuncionariosReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.FuncionariosResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedFuncionariosId_ShouldThrowSGValidationException()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Funcionario = 999;
        var reg888 = new Models.Response.FuncionariosResponse
        {
            Id = 888
        }; // Different ID
        _mockFuncionariosReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidFuncionarios_ShouldPass()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Funcionario = 123;
        var reg123 = new Models.Response.FuncionariosResponse
        {
            Id = 123
        };
        _mockFuncionariosReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyFuncionarios_ShouldPass()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Funcionario = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockFuncionariosReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - TipoCompromisso
    [Fact]
    public async Task ValidateReg_WithInvalidTipoCompromisso_ShouldThrowSGValidationException()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.TipoCompromisso = 999;
        _mockTipoCompromissoReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.TipoCompromissoResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedTipoCompromissoId_ShouldThrowSGValidationException()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.TipoCompromisso = 999;
        var reg888 = new Models.Response.TipoCompromissoResponse
        {
            Id = 888
        }; // Different ID
        _mockTipoCompromissoReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidTipoCompromisso_ShouldPass()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.TipoCompromisso = 123;
        var reg123 = new Models.Response.TipoCompromissoResponse
        {
            Id = 123
        };
        _mockTipoCompromissoReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyTipoCompromisso_ShouldPass()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.TipoCompromisso = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockTipoCompromissoReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - Clientes
    [Fact]
    public async Task ValidateReg_WithInvalidClientes_ShouldThrowSGValidationException()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Cliente = 999;
        _mockClientesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.ClientesResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedClientesId_ShouldThrowSGValidationException()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Cliente = 999;
        var reg888 = new Models.Response.ClientesResponse
        {
            Id = 888
        }; // Different ID
        _mockClientesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidClientes_ShouldPass()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Cliente = 123;
        var reg123 = new Models.Response.ClientesResponse
        {
            Id = 123
        };
        _mockClientesReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyClientes_ShouldPass()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Cliente = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockClientesReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - Area
    [Fact]
    public async Task ValidateReg_WithInvalidArea_ShouldThrowSGValidationException()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Area = 999;
        _mockAreaReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.AreaResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedAreaId_ShouldThrowSGValidationException()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Area = 999;
        var reg888 = new Models.Response.AreaResponse
        {
            Id = 888
        }; // Different ID
        _mockAreaReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidArea_ShouldPass()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Area = 123;
        var reg123 = new Models.Response.AreaResponse
        {
            Id = 123
        };
        _mockAreaReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyArea_ShouldPass()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Area = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockAreaReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - Justica
    [Fact]
    public async Task ValidateReg_WithInvalidJustica_ShouldThrowSGValidationException()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Justica = 999;
        _mockJusticaReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.JusticaResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedJusticaId_ShouldThrowSGValidationException()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Justica = 999;
        var reg888 = new Models.Response.JusticaResponse
        {
            Id = 888
        }; // Different ID
        _mockJusticaReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidJustica_ShouldPass()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Justica = 123;
        var reg123 = new Models.Response.JusticaResponse
        {
            Id = 123
        };
        _mockJusticaReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyJustica_ShouldPass()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Justica = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockJusticaReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - Operador
    [Fact]
    public async Task ValidateReg_WithInvalidOperador_ShouldThrowSGValidationException()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Usuario = 999;
        _mockOperadorReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.OperadorResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedOperadorId_ShouldThrowSGValidationException()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Usuario = 999;
        var reg888 = new Models.Response.OperadorResponse
        {
            Id = 888
        }; // Different ID
        _mockOperadorReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidOperador_ShouldPass()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Usuario = 123;
        var reg123 = new Models.Response.OperadorResponse
        {
            Id = 123
        };
        _mockOperadorReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyOperador_ShouldPass()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Usuario = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockOperadorReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - Prepostos
    [Fact]
    public async Task ValidateReg_WithInvalidPrepostos_ShouldThrowSGValidationException()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Preposto = 999;
        _mockPrepostosReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.PrepostosResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedPrepostosId_ShouldThrowSGValidationException()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Preposto = 999;
        var reg888 = new Models.Response.PrepostosResponse
        {
            Id = 888
        }; // Different ID
        _mockPrepostosReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidPrepostos_ShouldPass()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Preposto = 123;
        var reg123 = new Models.Response.PrepostosResponse
        {
            Id = 123
        };
        _mockPrepostosReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyPrepostos_ShouldPass()
    {
        // Arrange
        var agenda = CreateValidAgenda();
        agenda.Preposto = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agenda, _mockAgendaService.Object, _mockCidadeReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockAreaReader.Object, _mockJusticaReader.Object, _mockOperadorReader.Object, _mockPrepostosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockPrepostosReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}