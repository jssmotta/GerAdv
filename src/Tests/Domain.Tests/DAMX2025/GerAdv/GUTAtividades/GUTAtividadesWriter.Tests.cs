// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class GUTAtividadesWriterTests
{
    private readonly Mock<IFGUTAtividadesFactory> _mockGUTAtividadesFactory;
    private readonly Mock<FGUTAtividades> _mockFGUTAtividades;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly GUTAtividadesWriter _gutatividadesWriter;
    public GUTAtividadesWriterTests()
    {
        _mockGUTAtividadesFactory = new Mock<IFGUTAtividadesFactory>();
        _mockFGUTAtividades = new Mock<FGUTAtividades>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _gutatividadesWriter = new GUTAtividadesWriter(_mockGUTAtividadesFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var gutatividades = CreateValidGUTAtividadesModel();
        gutatividades.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockGUTAtividadesFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFGUTAtividades.Object);
        _mockFGUTAtividades.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _gutatividadesWriter.WriteAsync(gutatividades, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFGUTAtividades.Object);
        _mockGUTAtividadesFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockGUTAtividadesFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFGUTAtividades.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var gutatividades = CreateValidGUTAtividadesModel();
        gutatividades.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockGUTAtividadesFactory.Setup(x => x.CreateFromIdAsync(gutatividades.Id, _mockConnection.Object)).ReturnsAsync(_mockFGUTAtividades.Object);
        _mockFGUTAtividades.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _gutatividadesWriter.WriteAsync(gutatividades, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFGUTAtividades.Object);
        _mockGUTAtividadesFactory.Verify(x => x.CreateFromIdAsync(gutatividades.Id, _mockConnection.Object), Times.Once);
        _mockGUTAtividadesFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFGUTAtividades.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var gutatividades = CreateValidGUTAtividadesModel();
        var auditorQuem = 99;
        _mockGUTAtividadesFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFGUTAtividades.Object);
        _mockFGUTAtividades.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _gutatividadesWriter.WriteAsync(gutatividades, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFGUTAtividades.Object);
        _mockFGUTAtividades.VerifySet(x => x.FNome = gutatividades.Nome, Times.Once);
        _mockFGUTAtividades.VerifySet(x => x.FObservacao = gutatividades.Observacao, Times.Once);
        _mockFGUTAtividades.VerifySet(x => x.FGUTGrupo = gutatividades.GUTGrupo, Times.Once);
        _mockFGUTAtividades.VerifySet(x => x.FGUTPeriodicidade = gutatividades.GUTPeriodicidade, Times.Once);
        _mockFGUTAtividades.VerifySet(x => x.FOperador = gutatividades.Operador, Times.Once);
        _mockFGUTAtividades.VerifySet(x => x.FConcluido = gutatividades.Concluido, Times.Once);
        _mockFGUTAtividades.VerifySet(x => x.FDataConcluido = gutatividades.DataConcluido.ToString(), Times.Once);
        _mockFGUTAtividades.VerifySet(x => x.FDiasParaIniciar = gutatividades.DiasParaIniciar, Times.Once);
        _mockFGUTAtividades.VerifySet(x => x.FMinutosParaRealizar = gutatividades.MinutosParaRealizar, Times.Once);
        _mockFGUTAtividades.VerifySet(x => x.FGUID = gutatividades.GUID, Times.Once);
        _mockFGUTAtividades.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithNullDataConcluido_ShouldNotSetFDataConcluido()
    {
        // Arrange
        var gutatividades = CreateValidGUTAtividadesModel();
        gutatividades.DataConcluido = null;
        var auditorQuem = 123;
        _mockGUTAtividadesFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFGUTAtividades.Object);
        _mockFGUTAtividades.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _gutatividadesWriter.WriteAsync(gutatividades, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFGUTAtividades.VerifySet(x => x.FDataConcluido = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var gutatividades = CreateValidGUTAtividadesModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockGUTAtividadesFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _gutatividadesWriter.WriteAsync(gutatividades, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var gutatividades = CreateValidGUTAtividadesModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockGUTAtividadesFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFGUTAtividades.Object);
        _mockFGUTAtividades.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _gutatividadesWriter.WriteAsync(gutatividades, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var gutatividadesResponse = new GUTAtividadesResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockGUTAtividadesFactory.Setup(x => x.DeleteAsync(operadorId, gutatividadesResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _gutatividadesWriter.Delete(gutatividadesResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockGUTAtividadesFactory.Verify(x => x.DeleteAsync(operadorId, gutatividadesResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var gutatividadesResponse = new GUTAtividadesResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockGUTAtividadesFactory.Setup(x => x.DeleteAsync(operadorId, gutatividadesResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _gutatividadesWriter.Delete(gutatividadesResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var gutatividadesResponse = new GUTAtividadesResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockGUTAtividadesFactory.Setup(x => x.DeleteAsync(operadorId, gutatividadesResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _gutatividadesWriter.Delete(gutatividadesResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new GUTAtividadesWriter(_mockGUTAtividadesFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new GUTAtividadesWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.GUTAtividades CreateValidGUTAtividadesModel()
    {
        return new Models.GUTAtividades
        {
            Id = 0,
            Nome = "João",
            Observacao = "Observação teste",
            GUTGrupo = 1,
            GUTPeriodicidade = 1,
            Operador = 1,
            Concluido = false,
            DataConcluido = "24/04/1975",
            DiasParaIniciar = 1,
            MinutosParaRealizar = 1,
            GUID = Guid.NewGuid().ToString()
        };
    }
#endregion
}