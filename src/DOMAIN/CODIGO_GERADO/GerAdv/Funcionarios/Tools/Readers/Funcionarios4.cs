// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Readers;
public partial class FuncionariosReader(IFFuncionariosFactory funcionariosFactory) : IFuncionariosReader
{
    private readonly IFFuncionariosFactory _funcionariosFactory = funcionariosFactory ?? throw new ArgumentNullException();
    public async Task<IEnumerable<DBNomeID>> ListarN(int max, string uri, string cWhere, List<SqlParameter>? parameters, string order) => await DevourerSqlData.ListarNomeID(BuildSqlQuery("funCodigo, funNome", cWhere, order, max), parameters, uri, caching: false, max: max);
    public async Task<IEnumerable<FuncionariosResponseAll>> Listar(int max, string uri, string cWhere, List<SqlParameter>? parameters, string order, CancellationToken cancellationToken) => await ListarTabela(BuildSqlQuery(DBFuncionarios.CamposSqlX, cWhere, order, max), parameters, uri, caching: false, max: max, cancellationToken: cancellationToken);
    private async Task<IEnumerable<FuncionariosResponseAll>> ListarTabela(string sql, List<SqlParameter>? parameters, string uri, bool caching = false, int max = 200, CancellationToken cancellationToken = default)
    {
        var result = new List<FuncionariosResponseAll>(max);
        await using var connection = Configuracoes.GetConnectionByUri(uri);
        await using var cmd = new SqlCommand(cmdText: ConfiguracoesDBT.CmdSql(sql), connection: connection?.InnerConnection)
        {
            CommandTimeout = 30
        };
        foreach (var param in parameters)
        {
            if (!cmd.Parameters.Contains(param.ParameterName))
            {
                var newParam = new SqlParameter(param.ParameterName, param.Value)
                {
                    SqlDbType = param.SqlDbType,
                    Direction = param.Direction,
                    Size = param.Size,
                    Precision = param.Precision,
                    Scale = param.Scale
                };
                cmd.Parameters.Add(newParam);
            }
        }

        await using var reader = await cmd.ExecuteReaderAsync(CommandBehavior.SingleResult);
        while (await reader.ReadAsync())
        {
            if (cancellationToken.IsCancellationRequested)
                return result;
            result.Add(ReadAll(_funcionariosFactory.CreateFromReader(reader), reader)!);
        }

        return result;
    }

    public async Task<FuncionariosResponse?> Read(int id, MsiSqlConnection? oCnn)
    {
        using var dbRec = await _funcionariosFactory.CreateFromIdAsync(id, oCnn);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public async Task<Models.Funcionarios?> ReadM(int id, MsiSqlConnection? oCnn)
    {
        using var dbRec = await _funcionariosFactory.CreateFromIdAsync(id, oCnn);
        var funcionarios = new Models.Funcionarios
        {
            Id = dbRec.ID,
            GUID = dbRec.FGUID ?? string.Empty,
            EMailPro = dbRec.FEMailPro ?? string.Empty,
            Cargo = dbRec.FCargo,
            Nome = dbRec.FNome ?? string.Empty,
            Funcao = dbRec.FFuncao,
            Sexo = dbRec.FSexo,
            Registro = dbRec.FRegistro ?? string.Empty,
            CPF = dbRec.FCPF?.MaskCpf() ?? string.Empty,
            RG = dbRec.FRG ?? string.Empty,
            Tipo = dbRec.FTipo,
            Observacao = dbRec.FObservacao ?? string.Empty,
            Endereco = dbRec.FEndereco ?? string.Empty,
            Bairro = dbRec.FBairro ?? string.Empty,
            Cidade = dbRec.FCidade,
            CEP = dbRec.FCEP?.MaskCep() ?? string.Empty,
            Contato = dbRec.FContato ?? string.Empty,
            Fax = dbRec.FFax ?? string.Empty,
            Fone = dbRec.FFone ?? string.Empty,
            EMail = dbRec.FEMail ?? string.Empty,
            CTPSNumero = dbRec.FCTPSNumero ?? string.Empty,
            CTPSSerie = dbRec.FCTPSSerie ?? string.Empty,
            PIS = dbRec.FPIS ?? string.Empty,
            Salario = dbRec.FSalario,
            Data = dbRec.FData ?? string.Empty,
            LiberaAgenda = dbRec.FLiberaAgenda,
            Pasta = dbRec.FPasta ?? string.Empty,
            Class = dbRec.FClass ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FPeriodo_Ini, out DateTime XPeriodo_Ini))
        {
            funcionarios.Periodo_Ini = dbRec.FPeriodo_Ini;
            funcionarios.Periodo_Ini_date = XPeriodo_Ini;
        }

        if (DateTime.TryParse(dbRec.FPeriodo_Fim, out DateTime XPeriodo_Fim))
        {
            funcionarios.Periodo_Fim = dbRec.FPeriodo_Fim;
            funcionarios.Periodo_Fim_date = XPeriodo_Fim;
        }

        if (DateTime.TryParse(dbRec.FCTPSDtEmissao, out DateTime XCTPSDtEmissao))
        {
            funcionarios.CTPSDtEmissao = dbRec.FCTPSDtEmissao;
            funcionarios.CTPSDtEmissao_date = XCTPSDtEmissao;
        }

        if (DateTime.TryParse(dbRec.FDtNasc, out DateTime XDtNasc))
        {
            funcionarios.DtNasc = dbRec.FDtNasc;
            funcionarios.DtNasc_date = XDtNasc;
        }

        return funcionarios;
    }

    public FuncionariosResponse? Read(FFuncionarios dbRec, MsiSqlConnection? oCnn)
    {
        return Read(dbRec);
    }

    public FuncionariosResponse? Read(string where, List<SqlParameter>? parameters, MsiSqlConnection? oCnn)
    {
        using var dbRec = _funcionariosFactory.CreateFromParameters(parameters, oCnn, sqlWhere: where);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public FuncionariosResponse? Read(FFuncionarios dbRec) // Track 001.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var funcionarios = new FuncionariosResponse
        {
            Id = dbRec.ID,
            GUID = dbRec.FGUID ?? string.Empty,
            EMailPro = dbRec.FEMailPro ?? string.Empty,
            Cargo = dbRec.FCargo,
            Nome = dbRec.FNome ?? string.Empty,
            Funcao = dbRec.FFuncao,
            Sexo = dbRec.FSexo,
            Registro = dbRec.FRegistro ?? string.Empty,
            CPF = dbRec.FCPF?.MaskCpf() ?? string.Empty,
            RG = dbRec.FRG ?? string.Empty,
            Tipo = dbRec.FTipo,
            Observacao = dbRec.FObservacao ?? string.Empty,
            Endereco = dbRec.FEndereco ?? string.Empty,
            Bairro = dbRec.FBairro ?? string.Empty,
            Cidade = dbRec.FCidade,
            CEP = dbRec.FCEP?.MaskCep() ?? string.Empty,
            Contato = dbRec.FContato ?? string.Empty,
            Fax = dbRec.FFax ?? string.Empty,
            Fone = dbRec.FFone ?? string.Empty,
            EMail = dbRec.FEMail ?? string.Empty,
            CTPSNumero = dbRec.FCTPSNumero ?? string.Empty,
            CTPSSerie = dbRec.FCTPSSerie ?? string.Empty,
            PIS = dbRec.FPIS ?? string.Empty,
            Salario = dbRec.FSalario,
            Data = dbRec.FData ?? string.Empty,
            LiberaAgenda = dbRec.FLiberaAgenda,
            Pasta = dbRec.FPasta ?? string.Empty,
            Class = dbRec.FClass ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FPeriodo_Ini, out DateTime XPeriodo_Ini))
        {
            funcionarios.Periodo_Ini = dbRec.FPeriodo_Ini;
            funcionarios.Periodo_Ini_date = XPeriodo_Ini;
        }

        if (DateTime.TryParse(dbRec.FPeriodo_Fim, out DateTime XPeriodo_Fim))
        {
            funcionarios.Periodo_Fim = dbRec.FPeriodo_Fim;
            funcionarios.Periodo_Fim_date = XPeriodo_Fim;
        }

        if (DateTime.TryParse(dbRec.FCTPSDtEmissao, out DateTime XCTPSDtEmissao))
        {
            funcionarios.CTPSDtEmissao = dbRec.FCTPSDtEmissao;
            funcionarios.CTPSDtEmissao_date = XCTPSDtEmissao;
        }

        if (DateTime.TryParse(dbRec.FDtNasc, out DateTime XDtNasc))
        {
            funcionarios.DtNasc = dbRec.FDtNasc;
            funcionarios.DtNasc_date = XDtNasc;
        }

        return funcionarios;
    }

    public FuncionariosResponse? Read(SG.GerAdv.DBFuncionarios dbRec) // Track 002.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var funcionarios = new FuncionariosResponse
        {
            Id = dbRec.ID,
            GUID = dbRec.FGUID ?? string.Empty,
            EMailPro = dbRec.FEMailPro ?? string.Empty,
            Cargo = dbRec.FCargo,
            Nome = dbRec.FNome ?? string.Empty,
            Funcao = dbRec.FFuncao,
            Sexo = dbRec.FSexo,
            Registro = dbRec.FRegistro ?? string.Empty,
            CPF = dbRec.FCPF?.MaskCpf() ?? string.Empty,
            RG = dbRec.FRG ?? string.Empty,
            Tipo = dbRec.FTipo,
            Observacao = dbRec.FObservacao ?? string.Empty,
            Endereco = dbRec.FEndereco ?? string.Empty,
            Bairro = dbRec.FBairro ?? string.Empty,
            Cidade = dbRec.FCidade,
            CEP = dbRec.FCEP?.MaskCep() ?? string.Empty,
            Contato = dbRec.FContato ?? string.Empty,
            Fax = dbRec.FFax ?? string.Empty,
            Fone = dbRec.FFone ?? string.Empty,
            EMail = dbRec.FEMail ?? string.Empty,
            CTPSNumero = dbRec.FCTPSNumero ?? string.Empty,
            CTPSSerie = dbRec.FCTPSSerie ?? string.Empty,
            PIS = dbRec.FPIS ?? string.Empty,
            Salario = dbRec.FSalario,
            Data = dbRec.FData ?? string.Empty,
            LiberaAgenda = dbRec.FLiberaAgenda,
            Pasta = dbRec.FPasta ?? string.Empty,
            Class = dbRec.FClass ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FPeriodo_Ini, out DateTime XPeriodo_Ini))
        {
            funcionarios.Periodo_Ini = dbRec.FPeriodo_Ini;
            funcionarios.Periodo_Ini_date = XPeriodo_Ini;
        }

        if (DateTime.TryParse(dbRec.FPeriodo_Fim, out DateTime XPeriodo_Fim))
        {
            funcionarios.Periodo_Fim = dbRec.FPeriodo_Fim;
            funcionarios.Periodo_Fim_date = XPeriodo_Fim;
        }

        if (DateTime.TryParse(dbRec.FCTPSDtEmissao, out DateTime XCTPSDtEmissao))
        {
            funcionarios.CTPSDtEmissao = dbRec.FCTPSDtEmissao;
            funcionarios.CTPSDtEmissao_date = XCTPSDtEmissao;
        }

        if (DateTime.TryParse(dbRec.FDtNasc, out DateTime XDtNasc))
        {
            funcionarios.DtNasc = dbRec.FDtNasc;
            funcionarios.DtNasc_date = XDtNasc;
        }

        return funcionarios;
    }

    public FuncionariosResponseAll? ReadAll(FFuncionarios dbRec, IDataRecord dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var funcionarios = new FuncionariosResponseAll
        {
            Id = dbRec.ID,
            GUID = dbRec.FGUID ?? string.Empty,
            EMailPro = dbRec.FEMailPro ?? string.Empty,
            Cargo = dbRec.FCargo,
            Nome = dbRec.FNome ?? string.Empty,
            Funcao = dbRec.FFuncao,
            Sexo = dbRec.FSexo,
            Registro = dbRec.FRegistro ?? string.Empty,
            CPF = dbRec.FCPF?.MaskCpf() ?? string.Empty,
            RG = dbRec.FRG ?? string.Empty,
            Tipo = dbRec.FTipo,
            Observacao = dbRec.FObservacao ?? string.Empty,
            Endereco = dbRec.FEndereco ?? string.Empty,
            Bairro = dbRec.FBairro ?? string.Empty,
            Cidade = dbRec.FCidade,
            CEP = dbRec.FCEP?.MaskCep() ?? string.Empty,
            Contato = dbRec.FContato ?? string.Empty,
            Fax = dbRec.FFax ?? string.Empty,
            Fone = dbRec.FFone ?? string.Empty,
            EMail = dbRec.FEMail ?? string.Empty,
            CTPSNumero = dbRec.FCTPSNumero ?? string.Empty,
            CTPSSerie = dbRec.FCTPSSerie ?? string.Empty,
            PIS = dbRec.FPIS ?? string.Empty,
            Salario = dbRec.FSalario,
            Data = dbRec.FData ?? string.Empty,
            LiberaAgenda = dbRec.FLiberaAgenda,
            Pasta = dbRec.FPasta ?? string.Empty,
            Class = dbRec.FClass ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FPeriodo_Ini, out DateTime XPeriodo_Ini))
        {
            funcionarios.Periodo_Ini = dbRec.FPeriodo_Ini;
            funcionarios.Periodo_Ini_date = XPeriodo_Ini;
        }

        if (DateTime.TryParse(dbRec.FPeriodo_Fim, out DateTime XPeriodo_Fim))
        {
            funcionarios.Periodo_Fim = dbRec.FPeriodo_Fim;
            funcionarios.Periodo_Fim_date = XPeriodo_Fim;
        }

        if (DateTime.TryParse(dbRec.FCTPSDtEmissao, out DateTime XCTPSDtEmissao))
        {
            funcionarios.CTPSDtEmissao = dbRec.FCTPSDtEmissao;
            funcionarios.CTPSDtEmissao_date = XCTPSDtEmissao;
        }

        if (DateTime.TryParse(dbRec.FDtNasc, out DateTime XDtNasc))
        {
            funcionarios.DtNasc = dbRec.FDtNasc;
            funcionarios.DtNasc_date = XDtNasc;
        }

        try
        {
            funcionarios.NomeCargos = dr[DBCargosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            funcionarios.DescricaoFuncao = dr[DBFuncaoDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            funcionarios.NomeCidade = dr[DBCidadeDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return funcionarios;
    }

    public FuncionariosResponseAll? ReadAll(SG.GerAdv.DBFuncionarios dbRec, DataRow dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var funcionarios = new FuncionariosResponseAll
        {
            Id = dbRec.ID,
            GUID = dbRec.FGUID ?? string.Empty,
            EMailPro = dbRec.FEMailPro ?? string.Empty,
            Cargo = dbRec.FCargo,
            Nome = dbRec.FNome ?? string.Empty,
            Funcao = dbRec.FFuncao,
            Sexo = dbRec.FSexo,
            Registro = dbRec.FRegistro ?? string.Empty,
            CPF = dbRec.FCPF?.MaskCpf() ?? string.Empty,
            RG = dbRec.FRG ?? string.Empty,
            Tipo = dbRec.FTipo,
            Observacao = dbRec.FObservacao ?? string.Empty,
            Endereco = dbRec.FEndereco ?? string.Empty,
            Bairro = dbRec.FBairro ?? string.Empty,
            Cidade = dbRec.FCidade,
            CEP = dbRec.FCEP?.MaskCep() ?? string.Empty,
            Contato = dbRec.FContato ?? string.Empty,
            Fax = dbRec.FFax ?? string.Empty,
            Fone = dbRec.FFone ?? string.Empty,
            EMail = dbRec.FEMail ?? string.Empty,
            CTPSNumero = dbRec.FCTPSNumero ?? string.Empty,
            CTPSSerie = dbRec.FCTPSSerie ?? string.Empty,
            PIS = dbRec.FPIS ?? string.Empty,
            Salario = dbRec.FSalario,
            Data = dbRec.FData ?? string.Empty,
            LiberaAgenda = dbRec.FLiberaAgenda,
            Pasta = dbRec.FPasta ?? string.Empty,
            Class = dbRec.FClass ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FPeriodo_Ini, out DateTime XPeriodo_Ini))
        {
            funcionarios.Periodo_Ini = dbRec.FPeriodo_Ini;
            funcionarios.Periodo_Ini_date = XPeriodo_Ini;
        }

        if (DateTime.TryParse(dbRec.FPeriodo_Fim, out DateTime XPeriodo_Fim))
        {
            funcionarios.Periodo_Fim = dbRec.FPeriodo_Fim;
            funcionarios.Periodo_Fim_date = XPeriodo_Fim;
        }

        if (DateTime.TryParse(dbRec.FCTPSDtEmissao, out DateTime XCTPSDtEmissao))
        {
            funcionarios.CTPSDtEmissao = dbRec.FCTPSDtEmissao;
            funcionarios.CTPSDtEmissao_date = XCTPSDtEmissao;
        }

        if (DateTime.TryParse(dbRec.FDtNasc, out DateTime XDtNasc))
        {
            funcionarios.DtNasc = dbRec.FDtNasc;
            funcionarios.DtNasc_date = XDtNasc;
        }

        try
        {
            funcionarios.NomeCargos = dr[DBCargosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            funcionarios.DescricaoFuncao = dr[DBFuncaoDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            funcionarios.NomeCidade = dr[DBCidadeDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return funcionarios;
    }
}