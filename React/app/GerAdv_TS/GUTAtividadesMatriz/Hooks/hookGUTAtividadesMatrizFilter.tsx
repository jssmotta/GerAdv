// 100% auto-generated by Source Genesys WebApi Front & Back Creator
                     // copyright © 2000-2025 Menphis - Sistemas Inteligentes
                     // This file is part of the Source Genesys project                     
                    import { useState } from 'react';
import InputInput from '@/app/components/Inputs/InputInput';
import InputDate from '@/app/components/Inputs/InputDate';
import InputHora from '@/app/components/Inputs/InputHora';
import InputValor from '@/app/components/Inputs/InputValor';
import InputComboFilterYesNo from '@/app/components/Inputs/InputComboFilterYesNo';
import { FilterHandlers } from '@/app/components/Cruds/GenericFilterDialog';
import { FilterGUTAtividadesMatriz } from '@/app/GerAdv_TS/GUTAtividadesMatriz/Filters/GUTAtividadesMatriz';
import GUTMatrizComboBox from '@/app/GerAdv_TS/GUTMatriz/ComboBox/GUTMatriz';
import GUTAtividadesComboBox from '@/app/GerAdv_TS/GUTAtividades/ComboBox/GUTAtividades';
interface UseGUTAtividadesMatrizFilterProps {
  handleFetchWithFilter: (filtro?: FilterGUTAtividadesMatriz | undefined | null) => Promise<void>;
}
interface UseGUTAtividadesMatrizFilterReturn {
  // Estados
  showSearch: boolean;
  windowFilter: FilterGUTAtividadesMatriz;
  setWindowFilter: React.Dispatch<React.SetStateAction<FilterGUTAtividadesMatriz>>;
  // Handlers do Dialog
  handleSearch: () => void;
  handleCloseSearch: () => void;
  handleConfirmSearch: (filter: FilterGUTAtividadesMatriz) => Promise<void>;
  // Render function
  renderInputFilters: (handlers: FilterHandlers<FilterGUTAtividadesMatriz>) => React.ReactNode;
  // Utilitários
  clearFilter: () => void;
  hasActiveFilter: boolean;
}
export const useGUTAtividadesMatrizFilter = ({ handleFetchWithFilter }: UseGUTAtividadesMatrizFilterProps): UseGUTAtividadesMatrizFilterReturn => {
  const [showSearch, setShowSearch] = useState(false);
  const [windowFilter, setWindowFilter] = useState<FilterGUTAtividadesMatriz>({} as FilterGUTAtividadesMatriz);
  // Handlers do Dialog
  const handleSearch = () => {
    setShowSearch(true);
    const filterWildechar = {...windowFilter, wildcardChar: '%' } as FilterGUTAtividadesMatriz;
    setWindowFilter(filterWildechar);
  };
  const handleCloseSearch = () => {
    setShowSearch(false);
  };
  const handleConfirmSearch = async (filter: FilterGUTAtividadesMatriz) => {
    await handleFetchWithFilter(filter);
  };
  // Função para limpar filtros
  const clearFilter = () => {
    setWindowFilter({});
    sessionStorage.removeItem(btoa('GUTAtividadesMatrizFilter'));
    handleFetchWithFilter({});
  };
  // Verificar se há filtros ativos
  const hasActiveFilter = Object.values(windowFilter).some(value =>
    value !== undefined && value !== null && value !== '' && value !== -2147483648
  );
  // Função para renderizar os campos de filtro
  const renderInputFilters = (handlers: FilterHandlers<FilterGUTAtividadesMatriz>) => (
  <>
  <GUTMatrizComboBox
  name='gutmatriz'
  dataForm={null}
  value={handlers.windowFilter?.gutmatriz}
  setValue={(e:any) => handlers.handleComboChange(e, 'gutmatriz')}
  className='inputSearch inputSearchComboboxTab'
  label='G U T Matriz'
  />
  <GUTAtividadesComboBox
  name='gutatividade'
  dataForm={null}
  value={handlers.windowFilter?.gutatividade}
  setValue={(e:any) => handlers.handleComboChange(e, 'gutatividade')}
  className='inputSearch inputSearchComboboxTab'
  label='G U T Atividades'
  />
  <InputInput
  type='text'
  id='codigo_filtro'
  name='codigo_filtro'
  value={handlers.windowFilter?.codigo_filtro ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código do cadastro'
  label='Código (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='codigo_filtro_end'
  name='codigo_filtro_end'
  value={handlers.windowFilter?.codigo_filtro_end ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código final do cadastro'
  label='Código final'
  disabled={handlers.windowFilter?.codigo_filtro ? false: true}
  className='inputIncNome inputSearch'
  />
</>
);
return {
  // Estados
  showSearch, 
  windowFilter, 
  setWindowFilter, 
  // Handlers
  handleSearch, 
  handleCloseSearch, 
  handleConfirmSearch, 
  // Render function
  renderInputFilters, 
  // Utilitários
  clearFilter, 
  hasActiveFilter
};
};