// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IContatoCRMViewValidation
{
    Task<bool> ValidateReg(Models.ContatoCRMView reg, IContatoCRMViewService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int? id, IContatoCRMViewService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class ContatoCRMViewValidation : IContatoCRMViewValidation
{
    public async Task<bool> CanDelete(int? id, IContatoCRMViewService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id == null || id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id ?? default, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.ContatoCRMView reg)
    {
        if (reg.CGUID != null && reg.CGUID.Length > DBContatoCRMViewDicInfo.CcwCGUID.FTamanho)
            throw new SGValidationException($"CGUID deve ter no máximo {DBContatoCRMViewDicInfo.CcwCGUID.FTamanho} caracteres.");
        if (reg.IP != null && reg.IP.Length > DBContatoCRMViewDicInfo.CcwIP.FTamanho)
            throw new SGValidationException($"IP deve ter no máximo {DBContatoCRMViewDicInfo.CcwIP.FTamanho} caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.ContatoCRMView reg, IContatoCRMViewService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Data))
            throw new SGValidationException("Data é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.CGUID.IsEmpty())
            throw new SGValidationException("CGUID é obrigatório.");
        if (reg.Data.IsEmpty())
            throw new SGValidationException("Data é obrigatório.");
        if (reg.IP.IsEmpty())
            throw new SGValidationException("IP é obrigatório.");
        await Task.Delay(0);
        return true;
    }
}