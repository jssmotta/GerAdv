// 100% auto-generated by Source Genesys WebApi Front & Back Creator
                     // copyright © 2000-2025 Menphis - Sistemas Inteligentes
                     // This file is part of the Source Genesys project                     
                    // Tracking: Forms.tsx.txt
'use client';
import { IClientesSocios } from '@/app/GerAdv_TS/ClientesSocios/Interfaces/interface.ClientesSocios';
import { useRouter } from 'next/navigation';
import React, { useEffect, useState, useRef } from 'react';
import { useSystemContext } from '@/app/context/SystemContext';
import { getParamFromUrl } from '@/app/tools/helpers';
import '@/app/styles/CrudFormsBase.css';
import '@/app/styles/CrudFormsMobile.css';
import '@/app/styles/CrudForms.css'; // [ INDEX_SIZE ]
import ButtonSalvarCrud from '@/app/components/Cruds/ButtonSalvarCrud';
import { useIsMobile } from '@/app/context/MobileContext';
import DeleteButton from '@/app/components/Cruds/DeleteButton';
import { ClientesSociosApi } from '../../Apis/ApiClientesSocios';
import { useValidationsClientesSocios } from '../../Hooks/hookClientesSocios';
import ClientesComboBox from '@/app/GerAdv_TS/Clientes/ComboBox/Clientes';
import CidadeComboBox from '@/app/GerAdv_TS/Cidade/ComboBox/Cidade';
import { ClientesApi } from '@/app/GerAdv_TS/Clientes/Apis/ApiClientes';
import { CidadeApi } from '@/app/GerAdv_TS/Cidade/Apis/ApiCidade';
import InputName from '@/app/components/Inputs/InputName';
import InputCheckbox from '@/app/components/Inputs/InputCheckbox';
import InputInput from '@/app/components/Inputs/InputInput'
import InputCep from '@/app/components/Inputs/InputCep'
import InputCpf from '@/app/components/Inputs/InputCpf'
import InputCnpj from '@/app/components/Inputs/InputCnpj'
interface ClientesSociosFormProps {
  clientessociosData: IClientesSocios;
  onChange: (e: any) => void;
  onSubmit: (e: React.FormEvent) => void;
  onClose: () => void;
  onError?: () => void;
  onReload?: () => void;
  onSuccess?: (registro?: any) => void;
}

export const ClientesSociosForm: React.FC<ClientesSociosFormProps> = ({
  clientessociosData, 
  onChange, 
  onSubmit, 
  onClose, 
  onError, 
  onReload, 
  onSuccess, 
}) => {
const router = useRouter();
const { systemContext } = useSystemContext();
const isMobile = useIsMobile();
const dadoApi = new ClientesSociosApi(systemContext?.Uri ?? '', systemContext?.Token ?? '');
const [isSubmitting, setIsSubmitting] = useState(false);
const initialized = useRef(false);
const validationForm = useValidationsClientesSocios();
const [nomeClientes, setNomeClientes] = useState('');
const clientesApi = new ClientesApi(systemContext?.Uri ?? '', systemContext?.Token ?? '');
const [nomeCidade, setNomeCidade] = useState('');
const cidadeApi = new CidadeApi(systemContext?.Uri ?? '', systemContext?.Token ?? '');

if (getParamFromUrl('clientes') > 0) {
  if (clientessociosData.id === 0 && clientessociosData.cliente == 0) {
    clientesApi
    .getById(getParamFromUrl('clientes'))
    .then((response) => {
      setNomeClientes(response.data.nome);
    })
    .catch((error) => {
      console.log('Error unexpected');
    });

    clientessociosData.cliente = getParamFromUrl('clientes');
  }
}

if (getParamFromUrl('cidade') > 0) {
  if (clientessociosData.id === 0 && clientessociosData.cidade == 0) {
    cidadeApi
    .getById(getParamFromUrl('cidade'))
    .then((response) => {
      setNomeCidade(response.data.nome);
    })
    .catch((error) => {
      console.log('Error unexpected');
    });

    clientessociosData.cidade = getParamFromUrl('cidade');
  }
}
const addValorCliente = (e: any) => {
  if (e?.id>0)
    onChange({ target: { name: 'cliente', value: e.id } });
  };
  const addValorCidade = (e: any) => {
    if (e?.id>0)
      onChange({ target: { name: 'cidade', value: e.id } });
    };
    const onConfirm = (e: React.FormEvent) => {
      e.preventDefault();
      if (e.stopPropagation) e.stopPropagation();

        if (!isSubmitting) {
          setIsSubmitting(true);

          try {
            onSubmit(e);
          } catch (error) {
          console.log('Erro ao submeter formulário de ClientesSocios:');
          setIsSubmitting(false);
          if (onError) onError();
          }
        }
      };
      const handleCancel = () => {
        if (onReload) {
          onReload(); // Recarrega os dados originais
        } else {
        onClose(); // Comportamento padrão se não há callback de recarga
      }
    };

    const handleDirectSave = () => {
      if (!isSubmitting) {
        setIsSubmitting(true);

        try {
          const syntheticEvent = {
            preventDefault: () => { }, 
            target: document.getElementById(`ClientesSociosForm-${clientessociosData.id}`)
          } as unknown as React.FormEvent;

          onSubmit(syntheticEvent);
        } catch (error) {
        console.log('Erro ao salvar ClientesSocios diretamente');
        setIsSubmitting(false);
        if (onError) onError();
        }
      }
    };
    useEffect(() => {
      const el = document.querySelector('.nameFormMobile');
      if (el) {
        el.textContent = clientessociosData?.id == 0 ? 'Editar ClientesSocios' : 'Adicionar Clientes Socios';
      }
    }, [clientessociosData.id]);
    return (
    <>
    {!isMobile ? <style jsx global>{`
      @media (max-width: 1366px) {
        html {
          zoom: 0.8 !important;
        }
      }
      `}</style> : null}

      <div className={isMobile ? 'form-container form-container-ClientesSocios' : 'form-container form-container-ClientesSocios'}>

        <form className='formInputCadInc' id={`ClientesSociosForm-${clientessociosData.id}`} onSubmit={onConfirm}>
          {!isMobile && (
            <ButtonSalvarCrud isMobile={false} validationForm={validationForm} entity='ClientesSocios' data={clientessociosData} isSubmitting={isSubmitting} onClose={onClose} formId={`ClientesSociosForm-${clientessociosData.id}`} preventPropagation={true} onSave={handleDirectSave} onCancel={handleCancel} />
            )}
            <div className='grid-container'>

              <InputName
              type='text'
              id='nome'
              label='Nome'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='nome'
              value={clientessociosData.nome}
              placeholder={`Informe Nome`}
              onChange={onChange}
              required
              />
              <InputCheckbox dataForm={clientessociosData} label='SomenteRepresentante' name='somenterepresentante' checked={clientessociosData.somenterepresentante} onChange={onChange} />

              <InputInput
              type='text'
              maxLength={2048}
              id='idade'
              label='Idade'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='idade'
              value={clientessociosData.idade}
              onChange={onChange}
              />

              <InputCheckbox dataForm={clientessociosData} label='IsRepresentanteLegal' name='isrepresentantelegal' checked={clientessociosData.isrepresentantelegal} onChange={onChange} />

              <InputInput
              type='text'
              maxLength={100}
              id='qualificacao'
              label='Qualificacao'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='qualificacao'
              value={clientessociosData.qualificacao}
              onChange={onChange}
              />

              <InputCheckbox dataForm={clientessociosData} label='Sexo' name='sexo' checked={clientessociosData.sexo} onChange={onChange} />

              <InputInput
              type='text'
              maxLength={2048}
              id='dtnasc'
              label='DtNasc'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='dtnasc'
              value={clientessociosData.dtnasc}
              onChange={onChange}
              />


              <InputInput
              type='text'
              maxLength={150}
              id='site'
              label='Site'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='site'
              value={clientessociosData.site}
              onChange={onChange}
              />


              <InputInput
              type='text'
              maxLength={50}
              id='representantelegal'
              label='RepresentanteLegal'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='representantelegal'
              value={clientessociosData.representantelegal}
              onChange={onChange}
              />

            </div><div className='grid-container'>
              <ClientesComboBox
              name={'cliente'}
              dataForm={clientessociosData}
              value={clientessociosData.cliente}
              setValue={addValorCliente}
              label={'Clientes'}
              />

              <InputInput
              type='text'
              maxLength={80}
              id='endereco'
              label='Endereco'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='endereco'
              value={clientessociosData.endereco}
              onChange={onChange}
              />


              <InputInput
              type='text'
              maxLength={50}
              id='bairro'
              label='Bairro'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='bairro'
              value={clientessociosData.bairro}
              onChange={onChange}
              />


              <InputCep
              type='text'
              id='cep'
              label='CEP'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='cep'
              value={clientessociosData.cep}
              onChange={onChange}
              />


              <CidadeComboBox
              name={'cidade'}
              dataForm={clientessociosData}
              value={clientessociosData.cidade}
              setValue={addValorCidade}
              label={'Cidade'}
              />

              <InputInput
              type='text'
              maxLength={30}
              id='rg'
              label='RG'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='rg'
              value={clientessociosData.rg}
              onChange={onChange}
              />


              <InputCpf
              type='text'
              id='cpf'
              label='CPF'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='cpf'
              value={clientessociosData.cpf}
              onChange={onChange}
              />


              <InputInput
              type='text'
              maxLength={2147483647}
              id='fone'
              label='Fone'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='fone'
              value={clientessociosData.fone}
              onChange={onChange}
              />


              <InputInput
              type='text'
              maxLength={10}
              id='participacao'
              label='Participacao'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='participacao'
              value={clientessociosData.participacao}
              onChange={onChange}
              />

            </div><div className='grid-container'>
              <InputInput
              type='text'
              maxLength={50}
              id='cargo'
              label='Cargo'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='cargo'
              value={clientessociosData.cargo}
              onChange={onChange}
              />


              <InputInput
              type='email'
              maxLength={60}
              id='email'
              label='EMail'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='email'
              value={clientessociosData.email}
              onChange={onChange}
              />


              <InputInput
              type='text'
              maxLength={2147483647}
              id='obs'
              label='Obs'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='obs'
              value={clientessociosData.obs}
              onChange={onChange}
              />


              <InputInput
              type='text'
              maxLength={100}
              id='cnh'
              label='CNH'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='cnh'
              value={clientessociosData.cnh}
              onChange={onChange}
              />


              <InputInput
              type='text'
              maxLength={2048}
              id='datacontrato'
              label='DataContrato'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='datacontrato'
              value={clientessociosData.datacontrato}
              onChange={onChange}
              />


              <InputCnpj
              type='text'
              id='cnpj'
              label='CNPJ'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='cnpj'
              value={clientessociosData.cnpj}
              onChange={onChange}
              />


              <InputInput
              type='text'
              maxLength={15}
              id='inscest'
              label='InscEst'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='inscest'
              value={clientessociosData.inscest}
              onChange={onChange}
              />


              <InputInput
              type='text'
              maxLength={80}
              id='socioempresaadminnome'
              label='SocioEmpresaAdminNome'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='socioempresaadminnome'
              value={clientessociosData.socioempresaadminnome}
              onChange={onChange}
              />


              <InputInput
              type='text'
              maxLength={80}
              id='enderecosocio'
              label='EnderecoSocio'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='enderecosocio'
              value={clientessociosData.enderecosocio}
              onChange={onChange}
              />

            </div><div className='grid-container'>
              <InputInput
              type='text'
              maxLength={50}
              id='bairrosocio'
              label='BairroSocio'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='bairrosocio'
              value={clientessociosData.bairrosocio}
              onChange={onChange}
              />


              <InputInput
              type='text'
              maxLength={10}
              id='cepsocio'
              label='CEPSocio'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='cepsocio'
              value={clientessociosData.cepsocio}
              onChange={onChange}
              />


              <InputInput
              type='text'
              maxLength={2048}
              id='cidadesocio'
              label='CidadeSocio'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='cidadesocio'
              value={clientessociosData.cidadesocio}
              onChange={onChange}
              />


              <InputInput
              type='text'
              maxLength={2048}
              id='rgdataexp'
              label='RGDataExp'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='rgdataexp'
              value={clientessociosData.rgdataexp}
              onChange={onChange}
              />

              <InputCheckbox dataForm={clientessociosData} label='SocioEmpresaAdminSomente' name='socioempresaadminsomente' checked={clientessociosData.socioempresaadminsomente} onChange={onChange} />
              <InputCheckbox dataForm={clientessociosData} label='Tipo' name='tipo' checked={clientessociosData.tipo} onChange={onChange} />

              <InputInput
              type='text'
              maxLength={2048}
              id='fax'
              label='Fax'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='fax'
              value={clientessociosData.fax}
              onChange={onChange}
              />


              <InputInput
              type='text'
              maxLength={1}
              id='class'
              label='Class'
              dataForm={clientessociosData}
              className='inputIncNome'
              name='class'
              value={clientessociosData.class}
              onChange={onChange}
              />

            </div>
          </form>


          {isMobile && (
            <ButtonSalvarCrud isMobile={true} validationForm={validationForm} entity='ClientesSocios' data={clientessociosData} isSubmitting={isSubmitting} onClose={onClose} formId={`ClientesSociosForm-${clientessociosData.id}`} preventPropagation={true} onSave={handleDirectSave} onCancel={handleCancel} />
            )}
            <DeleteButton page={'/pages/clientessocios'} id={clientessociosData.id} closeModel={onClose} dadoApi={dadoApi} />
          </div>
          <div className='form-spacer'></div>
          </>
        );
      };