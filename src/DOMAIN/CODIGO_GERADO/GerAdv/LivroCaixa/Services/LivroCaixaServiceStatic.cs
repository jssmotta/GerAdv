// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class LivroCaixaService
{
    private (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterLivroCaixa filtro)
    {
        var parameters = new List<SqlParameter>();
        if (filtro.IDDes != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLivroCaixaDicInfo.IDDes)}", filtro.IDDes));
        }

        if (filtro.IDDes_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLivroCaixaDicInfo.IDDes)}_end", filtro.IDDes_end));
        }

        if (filtro.Pessoal != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLivroCaixaDicInfo.Pessoal)}", filtro.Pessoal));
        }

        if (filtro.Pessoal_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLivroCaixaDicInfo.Pessoal)}_end", filtro.Pessoal_end));
        }

        if (filtro.Ajuste != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLivroCaixaDicInfo.Ajuste)}", filtro.Ajuste));
        }

        if (filtro.IDHon != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLivroCaixaDicInfo.IDHon)}", filtro.IDHon));
        }

        if (filtro.IDHon_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLivroCaixaDicInfo.IDHon)}_end", filtro.IDHon_end));
        }

        if (filtro.IDHonParc != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLivroCaixaDicInfo.IDHonParc)}", filtro.IDHonParc));
        }

        if (filtro.IDHonParc_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLivroCaixaDicInfo.IDHonParc)}_end", filtro.IDHonParc_end));
        }

        if (filtro.IDHonSuc != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLivroCaixaDicInfo.IDHonSuc)}", filtro.IDHonSuc));
        }

        if (!string.IsNullOrEmpty(filtro.Data))
        {
            parameters.Add(new($"@{nameof(DBLivroCaixaDicInfo.Data)}", ApplyWildCard(filtro.WildcardChar, filtro.Data)));
        }

        if (filtro.Processo != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLivroCaixaDicInfo.Processo)}", filtro.Processo));
        }

        if (filtro.Processo_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLivroCaixaDicInfo.Processo)}_end", filtro.Processo_end));
        }

        if (filtro.Valor != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLivroCaixaDicInfo.Valor)}", filtro.Valor));
        }

        if (filtro.Valor_end != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLivroCaixaDicInfo.Valor)}_end", filtro.Valor_end));
        }

        if (filtro.Tipo != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLivroCaixaDicInfo.Tipo)}", filtro.Tipo));
        }

        if (!string.IsNullOrEmpty(filtro.Historico))
        {
            parameters.Add(new($"@{nameof(DBLivroCaixaDicInfo.Historico)}", ApplyWildCard(filtro.WildcardChar, filtro.Historico)));
        }

        if (filtro.Previsto != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLivroCaixaDicInfo.Previsto)}", filtro.Previsto));
        }

        if (filtro.Grupo != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLivroCaixaDicInfo.Grupo)}", filtro.Grupo));
        }

        if (filtro.Grupo_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLivroCaixaDicInfo.Grupo)}_end", filtro.Grupo_end));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLivroCaixaDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
        }

        if (filtro.Codigo_filtro_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLivroCaixaDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
        }

        if (filtro.LogicalOperator.IsEmptyX() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        if (!(filtro.IDDes.IsEmptyX()) && filtro.IDDes_end.IsEmptyX())
        {
            cWhere.Append(filtro.IDDes.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLivroCaixaDicInfo.PTabelaNome}].[{DBLivroCaixaDicInfo.IDDes}] = @{nameof(DBLivroCaixaDicInfo.IDDes)}");
        }
        else if (!(filtro.IDDes.IsEmptyX()) && !(filtro.IDDes_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLivroCaixaDicInfo.PTabelaNome}].{DBLivroCaixaDicInfo.IDDes} BETWEEN @{nameof(DBLivroCaixaDicInfo.IDDes)} AND @{nameof(DBLivroCaixaDicInfo.IDDes)}_end");
        }

        if (!(filtro.Pessoal.IsEmptyX()) && filtro.Pessoal_end.IsEmptyX())
        {
            cWhere.Append(filtro.Pessoal.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLivroCaixaDicInfo.PTabelaNome}].[{DBLivroCaixaDicInfo.Pessoal}] = @{nameof(DBLivroCaixaDicInfo.Pessoal)}");
        }
        else if (!(filtro.Pessoal.IsEmptyX()) && !(filtro.Pessoal_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLivroCaixaDicInfo.PTabelaNome}].{DBLivroCaixaDicInfo.Pessoal} BETWEEN @{nameof(DBLivroCaixaDicInfo.Pessoal)} AND @{nameof(DBLivroCaixaDicInfo.Pessoal)}_end");
        }

        cWhere.Append(filtro.Ajuste == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLivroCaixaDicInfo.PTabelaNome}].[{DBLivroCaixaDicInfo.Ajuste}] = @{nameof(DBLivroCaixaDicInfo.Ajuste)}");
        if (!(filtro.IDHon.IsEmptyX()) && filtro.IDHon_end.IsEmptyX())
        {
            cWhere.Append(filtro.IDHon.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLivroCaixaDicInfo.PTabelaNome}].[{DBLivroCaixaDicInfo.IDHon}] = @{nameof(DBLivroCaixaDicInfo.IDHon)}");
        }
        else if (!(filtro.IDHon.IsEmptyX()) && !(filtro.IDHon_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLivroCaixaDicInfo.PTabelaNome}].{DBLivroCaixaDicInfo.IDHon} BETWEEN @{nameof(DBLivroCaixaDicInfo.IDHon)} AND @{nameof(DBLivroCaixaDicInfo.IDHon)}_end");
        }

        if (!(filtro.IDHonParc.IsEmptyX()) && filtro.IDHonParc_end.IsEmptyX())
        {
            cWhere.Append(filtro.IDHonParc.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLivroCaixaDicInfo.PTabelaNome}].[{DBLivroCaixaDicInfo.IDHonParc}] = @{nameof(DBLivroCaixaDicInfo.IDHonParc)}");
        }
        else if (!(filtro.IDHonParc.IsEmptyX()) && !(filtro.IDHonParc_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLivroCaixaDicInfo.PTabelaNome}].{DBLivroCaixaDicInfo.IDHonParc} BETWEEN @{nameof(DBLivroCaixaDicInfo.IDHonParc)} AND @{nameof(DBLivroCaixaDicInfo.IDHonParc)}_end");
        }

        cWhere.Append(filtro.IDHonSuc == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLivroCaixaDicInfo.PTabelaNome}].[{DBLivroCaixaDicInfo.IDHonSuc}] = @{nameof(DBLivroCaixaDicInfo.IDHonSuc)}");
        cWhere.Append(filtro.Data.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLivroCaixaDicInfo.PTabelaNome}].[{DBLivroCaixaDicInfo.Data}]  {DevourerConsts.MsiCollate} like @{nameof(DBLivroCaixaDicInfo.Data)}");
        if (!(filtro.Processo.IsEmptyX()) && filtro.Processo_end.IsEmptyX())
        {
            cWhere.Append(filtro.Processo.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLivroCaixaDicInfo.PTabelaNome}].[{DBLivroCaixaDicInfo.Processo}] = @{nameof(DBLivroCaixaDicInfo.Processo)}");
        }
        else if (!(filtro.Processo.IsEmptyX()) && !(filtro.Processo_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLivroCaixaDicInfo.PTabelaNome}].{DBLivroCaixaDicInfo.Processo} BETWEEN @{nameof(DBLivroCaixaDicInfo.Processo)} AND @{nameof(DBLivroCaixaDicInfo.Processo)}_end");
        }

        if (!(filtro.Valor == decimal.MinValue) && filtro.Valor_end == decimal.MinValue)
        {
            cWhere.Append(filtro.Valor == decimal.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLivroCaixaDicInfo.PTabelaNome}].[{DBLivroCaixaDicInfo.Valor}] = @{nameof(DBLivroCaixaDicInfo.Valor)}");
        }
        else if (!(filtro.Valor == decimal.MinValue) && !(filtro.Valor_end == decimal.MinValue))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLivroCaixaDicInfo.PTabelaNome}].{DBLivroCaixaDicInfo.Valor} BETWEEN @{nameof(DBLivroCaixaDicInfo.Valor)} AND @{nameof(DBLivroCaixaDicInfo.Valor)}_end");
        }

        cWhere.Append(filtro.Tipo == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLivroCaixaDicInfo.PTabelaNome}].[{DBLivroCaixaDicInfo.Tipo}] = @{nameof(DBLivroCaixaDicInfo.Tipo)}");
        cWhere.Append(filtro.Historico.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLivroCaixaDicInfo.PTabelaNome}].[{DBLivroCaixaDicInfo.Historico}]  {DevourerConsts.MsiCollate} like @{nameof(DBLivroCaixaDicInfo.Historico)}");
        cWhere.Append(filtro.Previsto == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLivroCaixaDicInfo.PTabelaNome}].[{DBLivroCaixaDicInfo.Previsto}] = @{nameof(DBLivroCaixaDicInfo.Previsto)}");
        if (!(filtro.Grupo.IsEmptyX()) && filtro.Grupo_end.IsEmptyX())
        {
            cWhere.Append(filtro.Grupo.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLivroCaixaDicInfo.PTabelaNome}].[{DBLivroCaixaDicInfo.Grupo}] = @{nameof(DBLivroCaixaDicInfo.Grupo)}");
        }
        else if (!(filtro.Grupo.IsEmptyX()) && !(filtro.Grupo_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLivroCaixaDicInfo.PTabelaNome}].{DBLivroCaixaDicInfo.Grupo} BETWEEN @{nameof(DBLivroCaixaDicInfo.Grupo)} AND @{nameof(DBLivroCaixaDicInfo.Grupo)}_end");
        }

        if (!(filtro.Codigo_filtro.IsEmptyX()) && filtro.Codigo_filtro_end.IsEmptyX())
        {
            cWhere.Append(filtro.Codigo_filtro.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLivroCaixaDicInfo.PTabelaNome}].[{DBLivroCaixaDicInfo.CampoCodigo}] = @{nameof(DBLivroCaixaDicInfo.CampoCodigo)}");
        }
        else if (!(filtro.Codigo_filtro.IsEmptyX()) && !(filtro.Codigo_filtro_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLivroCaixaDicInfo.PTabelaNome}].{DBLivroCaixaDicInfo.CampoCodigo} BETWEEN @{nameof(DBLivroCaixaDicInfo.CampoCodigo)} AND @{nameof(DBLivroCaixaDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private string ApplyWildCard(char wildcardChar, string value)
    {
        if (wildcardChar == '\0' || wildcardChar == ' ')
        {
            return value;
        }

        var result = $"{wildcardChar}{value.Replace(" ", wildcardChar.ToString())}{wildcardChar}";
        return result;
    }

    private string GetFilterHash(Filters.FilterLivroCaixa? filtro)
    {
        if (filtro == null)
            return string.Empty;
        var json = JsonSerializer.Serialize(filtro);
        using var sha256 = SHA256.Create();
        var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(json));
        return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
    }

    public async Task<IEnumerable<NomeID>> GetListN([FromQuery] int max, [FromBody] Filters.FilterLivroCaixa? filtro, [FromRoute, Required] string uri, CancellationToken token)
    {
        // Tracking: 20250606-0
        ThrowIfDisposed();
        var filtroResult = filtro == null ? null : WFiltro(filtro!);
        string where = filtroResult?.where ?? string.Empty;
        List<SqlParameter> parameters = filtroResult?.parametros ?? [];
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new Exception($"Coneão nula.");
        }

        var keyCache = await reader.ReadStringAuditor(max, uri, "", [], oCnn);
        var cacheKey = $"{uri}-LivroCaixa-{max}-{where.GetHashCode()}-GetListN-{keyCache}";
        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId)
        };
        return await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataListNAsync(max, uri, where, parameters, cancel), entryOptions, cancellationToken: token) ?? [];
    }

    private async Task<IEnumerable<NomeID>> GetDataListNAsync(int max, string uri, string where, List<SqlParameter> parameters, CancellationToken token)
    {
        var result = new List<NomeID>(max);
        var lista = await reader.ListarN(max, uri, where, parameters, DBLivroCaixaDicInfo.CampoNome);
        foreach (var item in lista)
        {
            if (token.IsCancellationRequested)
                break;
            if (item?.FNome != null)
            {
                result.Add(new NomeID { Nome = item.FNome, ID = item.ID });
            }
        }

        return result;
    }

    private async Task<IEnumerable<LivroCaixaResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}