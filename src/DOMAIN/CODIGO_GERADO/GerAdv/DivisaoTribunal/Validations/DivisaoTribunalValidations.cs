// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IDivisaoTribunalValidation
{
    Task<bool> ValidateReg(Models.DivisaoTribunal reg, IDivisaoTribunalService service, IJusticaReader justicaReader, IAreaReader areaReader, ICidadeReader cidadeReader, IForoReader foroReader, ITribunalReader tribunalReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, IDivisaoTribunalService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class DivisaoTribunalValidation : IDivisaoTribunalValidation
{
    public async Task<bool> CanDelete(int id, IDivisaoTribunalService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.DivisaoTribunal reg)
    {
        if (reg.NomeEspecial.Length > 255)
            throw new SGValidationException($"NomeEspecial deve ter no máximo 255 caracteres.");
        if (reg.CodigoDiv.Length > 5)
            throw new SGValidationException($"CodigoDiv deve ter no máximo 5 caracteres.");
        if (reg.Endereco.Length > 40)
            throw new SGValidationException($"Endereco deve ter no máximo 40 caracteres.");
        if (reg.CEP.Length > 10)
            throw new SGValidationException($"CEP deve ter no máximo 10 caracteres.");
        if (reg.Andar.Length > 12)
            throw new SGValidationException($"Andar deve ter no máximo 12 caracteres.");
        if (reg.GUID.Length > 100)
            throw new SGValidationException($"GUID deve ter no máximo 100 caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.DivisaoTribunal reg, IDivisaoTribunalService service, IJusticaReader justicaReader, IAreaReader areaReader, ICidadeReader cidadeReader, IForoReader foroReader, ITribunalReader tribunalReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.Area == 0)
            throw new SGValidationException("Area é obrigatório.");
        if (reg.Cidade == 0)
            throw new SGValidationException("Cidade é obrigatório.");
        if (reg.Tribunal == 0)
            throw new SGValidationException("Tribunal é obrigatório.");
        if (reg.CodigoDiv.IsEmpty())
            throw new SGValidationException("CodigoDiv é obrigatório.");
        if (reg.EMail.Length > 0 && !reg.EMail.IsValidEmail())
            throw new SGValidationException($"EMail em formato inválido.");
        // Justica
        if (!reg.Justica.IsEmptyIDNumber())
        {
            var regJustica = await justicaReader.Read(reg.Justica, oCnn);
            if (regJustica == null || regJustica.Id != reg.Justica)
            {
                throw new SGValidationException($"Justiça não encontrado ({regJustica?.Id}).");
            }
        }

        // Area
        {
            var regArea = await areaReader.Read(reg.Area, oCnn);
            if (regArea == null || regArea.Id != reg.Area)
            {
                throw new SGValidationException($"Área não encontrado ({regArea?.Id}).");
            }
        }

        // Cidade
        {
            var regCidade = await cidadeReader.Read(reg.Cidade, oCnn);
            if (regCidade == null || regCidade.Id != reg.Cidade)
            {
                throw new SGValidationException($"Cidade não encontrado ({regCidade?.Id}).");
            }
        }

        // Foro
        if (!reg.Foro.IsEmptyIDNumber())
        {
            var regForo = await foroReader.Read(reg.Foro, oCnn);
            if (regForo == null || regForo.Id != reg.Foro)
            {
                throw new SGValidationException($"Foro não encontrado ({regForo?.Id}).");
            }
        }

        // Tribunal
        {
            var regTribunal = await tribunalReader.Read(reg.Tribunal, oCnn);
            if (regTribunal == null || regTribunal.Id != reg.Tribunal)
            {
                throw new SGValidationException($"Tribunal não encontrado ({regTribunal?.Id}).");
            }
        }

        return true;
    }
}