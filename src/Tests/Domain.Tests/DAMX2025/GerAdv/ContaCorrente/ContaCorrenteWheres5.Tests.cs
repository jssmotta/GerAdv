// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class ContaCorrenteWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFContaCorrenteFactory> _mockContaCorrenteFactory;
    private readonly Mock<FContaCorrente> _mockFContaCorrente;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly ContaCorrenteWhere _contacorrenteWhere;
    public ContaCorrenteWhereTests()
    {
        _mockContaCorrenteFactory = new Mock<IFContaCorrenteFactory>();
        _mockFContaCorrente = new Mock<FContaCorrente>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _contacorrenteWhere = new ContaCorrenteWhere(_mockContaCorrenteFactory.Object);
    }

    public void Dispose()
    {
        _mockContaCorrenteFactory?.Reset();
        _mockFContaCorrente?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "27/05/2022")
        };
    }

    private void SetupMockFContaCorrente(int? CIAcordo = 1, bool? Quitado = false, int? IDContrato = 1, int? QuitadoID = 1, int? DebitoID = 1, int? LivroCaixaID = 1, bool? Sucumbencia = true, bool? DistRegra = false, string? DtOriginal = "24/04/1975", int? Processo = 1, int? ParcelaX = 1, decimal? Valor = 0m, string? Data = "27/05/2022", int? Cliente = 1, string? Historico = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", bool? Contrato = true, bool? Pago = false, bool? Distribuir = true, bool? LC = false, int? IDHTrab = 1, int? NroParcelas = 1, decimal? ValorPrincipal = 0m, int? ParcelaPrincipalID = 1, bool? Hide = true, string? DataPgto = "24/04/1975")
    {
        _mockFContaCorrente.Setup(f => f.FCIAcordo).Returns(CIAcordo ?? 0);
        _mockFContaCorrente.Setup(f => f.FQuitado).Returns(Quitado ?? false);
        _mockFContaCorrente.Setup(f => f.FIDContrato).Returns(IDContrato ?? 0);
        _mockFContaCorrente.Setup(f => f.FQuitadoID).Returns(QuitadoID ?? 0);
        _mockFContaCorrente.Setup(f => f.FDebitoID).Returns(DebitoID ?? 0);
        _mockFContaCorrente.Setup(f => f.FLivroCaixaID).Returns(LivroCaixaID ?? 0);
        _mockFContaCorrente.Setup(f => f.FSucumbencia).Returns(Sucumbencia ?? false);
        _mockFContaCorrente.Setup(f => f.FDistRegra).Returns(DistRegra ?? false);
        _mockFContaCorrente.Setup(f => f.FDtOriginal).Returns(DtOriginal ?? string.Empty);
        _mockFContaCorrente.Setup(f => f.FProcesso).Returns(Processo ?? 0);
        _mockFContaCorrente.Setup(f => f.FParcelaX).Returns(ParcelaX ?? 0);
        _mockFContaCorrente.Setup(f => f.FValor).Returns(Valor ?? 0m);
        _mockFContaCorrente.Setup(f => f.FData).Returns(Data ?? string.Empty);
        _mockFContaCorrente.Setup(f => f.FCliente).Returns(Cliente ?? 0);
        _mockFContaCorrente.Setup(f => f.FHistorico).Returns(Historico ?? string.Empty);
        _mockFContaCorrente.Setup(f => f.FContrato).Returns(Contrato ?? false);
        _mockFContaCorrente.Setup(f => f.FPago).Returns(Pago ?? false);
        _mockFContaCorrente.Setup(f => f.FDistribuir).Returns(Distribuir ?? false);
        _mockFContaCorrente.Setup(f => f.FLC).Returns(LC ?? false);
        _mockFContaCorrente.Setup(f => f.FIDHTrab).Returns(IDHTrab ?? 0);
        _mockFContaCorrente.Setup(f => f.FNroParcelas).Returns(NroParcelas ?? 0);
        _mockFContaCorrente.Setup(f => f.FValorPrincipal).Returns(ValorPrincipal ?? 0m);
        _mockFContaCorrente.Setup(f => f.FParcelaPrincipalID).Returns(ParcelaPrincipalID ?? 0);
        _mockFContaCorrente.Setup(f => f.FHide).Returns(Hide ?? false);
        _mockFContaCorrente.Setup(f => f.FDataPgto).Returns(DataPgto ?? string.Empty);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFContaCorrenteFactory>();
        // Act
        var contacorrenteWhere = new ContaCorrenteWhere(mockFactory.Object);
        // Assert
        contacorrenteWhere.Should().NotBeNull();
        contacorrenteWhere.Should().BeAssignableTo<IContaCorrenteWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFContaCorrenteFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new ContaCorrenteWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnContaCorrenteResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFContaCorrente();
        _mockContaCorrenteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFContaCorrente.Object);
        // Act
        var result = _contacorrenteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.CIAcordo.Should().Be(1);
        result.Quitado.Should().Be(false);
        result.IDContrato.Should().Be(1);
        result.QuitadoID.Should().Be(1);
        result.DebitoID.Should().Be(1);
        result.LivroCaixaID.Should().Be(1);
        result.Sucumbencia.Should().Be(true);
        result.DistRegra.Should().Be(false);
        result.DtOriginal.Should().Be("24/04/1975");
        result.Processo.Should().Be(1);
        result.ParcelaX.Should().Be(1);
        result.Valor.Should().Be(0m);
        result.Data.Should().Be("27/05/2022");
        result.Cliente.Should().Be(1);
        result.Historico.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.Contrato.Should().Be(true);
        result.Pago.Should().Be(false);
        result.Distribuir.Should().Be(true);
        result.LC.Should().Be(false);
        result.IDHTrab.Should().Be(1);
        result.NroParcelas.Should().Be(1);
        result.ValorPrincipal.Should().Be(0m);
        result.ParcelaPrincipalID.Should().Be(1);
        result.Hide.Should().Be(true);
        result.DataPgto.Should().Be("24/04/1975");
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFContaCorrente(CIAcordo: null, Quitado: null, IDContrato: null, QuitadoID: null, DebitoID: null, LivroCaixaID: null, Sucumbencia: null, DistRegra: null, DtOriginal: null, Processo: null, ParcelaX: null, Valor: null, Data: null, Cliente: null, Historico: null, Contrato: null, Pago: null, Distribuir: null, LC: null, IDHTrab: null, NroParcelas: null, ValorPrincipal: null, ParcelaPrincipalID: null, Hide: null, DataPgto: null);
        _mockContaCorrenteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFContaCorrente.Object);
        // Act
        var result = _contacorrenteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.CIAcordo.Should().Be(0);
        result.Quitado.Should().Be(false);
        result.IDContrato.Should().Be(0);
        result.QuitadoID.Should().Be(0);
        result.DebitoID.Should().Be(0);
        result.LivroCaixaID.Should().Be(0);
        result.Sucumbencia.Should().Be(false);
        result.DistRegra.Should().Be(false);
        result.DtOriginal.Should().Be(string.Empty);
        result.Processo.Should().Be(0);
        result.ParcelaX.Should().Be(0);
        result.Valor.Should().Be(0m);
        result.Data.Should().Be(string.Empty);
        result.Cliente.Should().Be(0);
        result.Historico.Should().Be(string.Empty);
        result.Contrato.Should().Be(false);
        result.Pago.Should().Be(false);
        result.Distribuir.Should().Be(false);
        result.LC.Should().Be(false);
        result.IDHTrab.Should().Be(0);
        result.NroParcelas.Should().Be(0);
        result.ValorPrincipal.Should().Be(0m);
        result.ParcelaPrincipalID.Should().Be(0);
        result.Hide.Should().Be(false);
        result.DataPgto.Should().Be(string.Empty);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFContaCorrente();
        _mockContaCorrenteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFContaCorrente.Object);
        // Act
        var result = _contacorrenteWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockContaCorrenteFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFContaCorrente();
        _mockContaCorrenteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFContaCorrente.Object);
        // Act
        var result = _contacorrenteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockContaCorrenteFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFContaCorrente();
        _mockContaCorrenteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFContaCorrente.Object);
        // Act
        var result = _contacorrenteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockContaCorrenteFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFContaCorrente();
        _mockContaCorrenteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFContaCorrente.Object);
        // Act
        _contacorrenteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockContaCorrenteFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFContaCorrenteInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFContaCorrente.Setup(f => f.Dispose());
        SetupMockFContaCorrente();
        _mockContaCorrenteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFContaCorrente.Object);
        // Act
        _contacorrenteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFContaCorrente.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockContaCorrenteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _contacorrenteWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFContaCorrente(CIAcordo: 1, Quitado: false, IDContrato: 1, QuitadoID: 1, DebitoID: 1, LivroCaixaID: 1, Sucumbencia: true, DistRegra: false, DtOriginal: "24/04/1975", Processo: 1, ParcelaX: 1, Valor: 0m, Data: "27/05/2022", Cliente: 1, Historico: "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", Contrato: true, Pago: false, Distribuir: true, LC: false, IDHTrab: 1, NroParcelas: 1, ValorPrincipal: 0m, ParcelaPrincipalID: 1, Hide: true, DataPgto: "24/04/1975");
        _mockContaCorrenteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFContaCorrente.Object);
        // Act
        var result = _contacorrenteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.CIAcordo.Should().Be(1);
        result.Quitado.Should().Be(false);
        result.IDContrato.Should().Be(1);
        result.QuitadoID.Should().Be(1);
        result.DebitoID.Should().Be(1);
        result.LivroCaixaID.Should().Be(1);
        result.Sucumbencia.Should().Be(true);
        result.DistRegra.Should().Be(false);
        result.DtOriginal.Should().Be("24/04/1975");
        result.Processo.Should().Be(1);
        result.ParcelaX.Should().Be(1);
        result.Valor.Should().Be(0m);
        result.Data.Should().Be("27/05/2022");
        result.Cliente.Should().Be(1);
        result.Historico.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.Contrato.Should().Be(true);
        result.Pago.Should().Be(false);
        result.Distribuir.Should().Be(true);
        result.LC.Should().Be(false);
        result.IDHTrab.Should().Be(1);
        result.NroParcelas.Should().Be(1);
        result.ValorPrincipal.Should().Be(0m);
        result.ParcelaPrincipalID.Should().Be(1);
        result.Hide.Should().Be(true);
        result.DataPgto.Should().Be("24/04/1975");
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "Data = @{DBContaCorrenteDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBContaCorrenteDicInfo.CampoNome}", "27/05/2022"),
        };
        SetupMockFContaCorrente();
        _mockContaCorrenteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFContaCorrente.Object);
        // Act
        _contacorrenteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockContaCorrenteFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBContaCorrenteDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#region DateTime Tests
    [Fact]
    public void Read_WithValidDateDtOriginalFields_ShouldParseAndSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var testDate = "31/12/2024";
        SetupMockFContaCorrente(DtOriginal: testDate);
        _mockContaCorrenteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFContaCorrente.Object);
        // Act
        var result = _contacorrenteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtOriginal.Should().Be("31/12/2024");
    }

    [Fact]
    public void Read_WithInvalidDateDtOriginalStrings_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFContaCorrente(DtOriginal: "invalid-date");
        _mockContaCorrenteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFContaCorrente.Object);
        // Act
        var result = _contacorrenteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtOriginal.Should().Be("");
    }

    [Fact]
    public void Read_WithNullDateDtOriginalFields_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFContaCorrente(DtOriginal: null);
        _mockContaCorrenteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFContaCorrente.Object);
        // Act
        var result = _contacorrenteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtOriginal.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("31/12/2024")]
    [InlineData("2025/01/01T23:59:59")]
    [InlineData("2000-02-29")] // Leap year
    [InlineData("2025/01/02T14:30:45.123")]
    public void Read_WithValidDateDtOriginalFormats_ShouldParseCorrectly(string dateString)
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedDate = DateTime.Parse(dateString);
        SetupMockFContaCorrente(DtOriginal: dateString);
        _mockContaCorrenteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFContaCorrente.Object);
        // Act
        var result = _contacorrenteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtOriginal.Should().Be(dateString);
    }

    [Fact]
    public void Read_WithValidDateDataPgtoFields_ShouldParseAndSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var testDate = "01/01/2025";
        SetupMockFContaCorrente(DataPgto: testDate);
        _mockContaCorrenteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFContaCorrente.Object);
        // Act
        var result = _contacorrenteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataPgto.Should().Be("01/01/2025");
    }

    [Fact]
    public void Read_WithInvalidDateDataPgtoStrings_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFContaCorrente(DataPgto: "invalid-date");
        _mockContaCorrenteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFContaCorrente.Object);
        // Act
        var result = _contacorrenteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataPgto.Should().Be("");
    }

    [Fact]
    public void Read_WithNullDateDataPgtoFields_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFContaCorrente(DataPgto: null);
        _mockContaCorrenteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFContaCorrente.Object);
        // Act
        var result = _contacorrenteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataPgto.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("01/01/2025")]
    [InlineData("2025/01/02T23:59:59")]
    [InlineData("2000-02-29")] // Leap year
    [InlineData("2025/01/03T14:30:45.123")]
    public void Read_WithValidDateDataPgtoFormats_ShouldParseCorrectly(string dateString)
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedDate = DateTime.Parse(dateString);
        SetupMockFContaCorrente(DataPgto: dateString);
        _mockContaCorrenteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFContaCorrente.Object);
        // Act
        var result = _contacorrenteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataPgto.Should().Be(dateString);
    }
#endregion
#endregion
}