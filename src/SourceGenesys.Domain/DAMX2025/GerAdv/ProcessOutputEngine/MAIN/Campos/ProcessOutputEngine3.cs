// 100% auto-generated by Source Genesys Core
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming
public partial class DBProcessOutputEngine
{
    [XmlIgnore]
    private protected bool pFldFNome, pFldFDatabase, pFldFTabela, pFldFCampo, pFldFValor, pFldFOutput, pFldFAdministrador, pFldFOutputSource, pFldFDisabledItem, pFldFIDModulo, pFldFIsOnlyProcesso, pFldFMyID, pFldFGUID;
    [XmlIgnore]
    private protected int m_FOutputSource, m_FIDModulo, m_FMyID;
    [XmlIgnore]
    private protected string? m_FNome, m_FDatabase, m_FTabela, m_FCampo, m_FValor, m_FOutput, m_FGUID;
    [XmlIgnore]
    private protected bool m_FAdministrador, m_FDisabledItem, m_FIsOnlyProcesso;
    [StringLength(255, ErrorMessage = "A propriedade FNome da tabela ProcessOutputEngine deve ter no máximo 255 caracteres.")]
    public string? FNome
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNome ?? string.Empty;
        set
        {
            pFldFNome = pFldFNome || !(m_FNome ?? string.Empty).Equals(value);
            if (pFldFNome)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FNome = trimmed.Length > 255 ? trimmed.AsSpan(0, 255).ToString() : trimmed;
            }
        }
    }

    [StringLength(255, ErrorMessage = "A propriedade FDatabase da tabela ProcessOutputEngine deve ter no máximo 255 caracteres.")]
    public string? FDatabase
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDatabase ?? string.Empty;
        set
        {
            pFldFDatabase = pFldFDatabase || !(m_FDatabase ?? string.Empty).Equals(value);
            if (pFldFDatabase)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FDatabase = trimmed.Length > 255 ? trimmed.AsSpan(0, 255).ToString() : trimmed;
            }
        }
    }

    [StringLength(255, ErrorMessage = "A propriedade FTabela da tabela ProcessOutputEngine deve ter no máximo 255 caracteres.")]
    public string? FTabela
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FTabela ?? string.Empty;
        set
        {
            pFldFTabela = pFldFTabela || !(m_FTabela ?? string.Empty).Equals(value);
            if (pFldFTabela)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FTabela = trimmed.Length > 255 ? trimmed.AsSpan(0, 255).ToString() : trimmed;
            }
        }
    }

    [StringLength(255, ErrorMessage = "A propriedade FCampo da tabela ProcessOutputEngine deve ter no máximo 255 caracteres.")]
    public string? FCampo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCampo ?? string.Empty;
        set
        {
            pFldFCampo = pFldFCampo || !(m_FCampo ?? string.Empty).Equals(value);
            if (pFldFCampo)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FCampo = trimmed.Length > 255 ? trimmed.AsSpan(0, 255).ToString() : trimmed;
            }
        }
    }

    [StringLength(255, ErrorMessage = "A propriedade FValor da tabela ProcessOutputEngine deve ter no máximo 255 caracteres.")]
    public string? FValor
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FValor ?? string.Empty;
        set
        {
            pFldFValor = pFldFValor || !(m_FValor ?? string.Empty).Equals(value);
            if (pFldFValor)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FValor = trimmed.Length > 255 ? trimmed.AsSpan(0, 255).ToString() : trimmed;
            }
        }
    }

    public string? FOutput
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FOutput ?? string.Empty;
        set
        {
            pFldFOutput = pFldFOutput || !(m_FOutput ?? string.Empty).Equals(value);
            if (pFldFOutput)
                m_FOutput = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public bool FAdministrador
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAdministrador;
        set
        {
            pFldFAdministrador = pFldFAdministrador || value != m_FAdministrador;
            if (pFldFAdministrador)
                m_FAdministrador = value;
        }
    }

    public int FOutputSource
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FOutputSource;
        set
        {
            pFldFOutputSource = pFldFOutputSource || value != m_FOutputSource;
            if (pFldFOutputSource)
                m_FOutputSource = value;
        }
    }

    public bool FDisabledItem
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDisabledItem;
        set
        {
            pFldFDisabledItem = pFldFDisabledItem || value != m_FDisabledItem;
            if (pFldFDisabledItem)
                m_FDisabledItem = value;
        }
    }

    public int FIDModulo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FIDModulo;
        set
        {
            pFldFIDModulo = pFldFIDModulo || value != m_FIDModulo;
            if (pFldFIDModulo)
                m_FIDModulo = value;
        }
    }

    public bool FIsOnlyProcesso
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FIsOnlyProcesso;
        set
        {
            pFldFIsOnlyProcesso = pFldFIsOnlyProcesso || value != m_FIsOnlyProcesso;
            if (pFldFIsOnlyProcesso)
                m_FIsOnlyProcesso = value;
        }
    }

    public int FMyID
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FMyID;
        set
        {
            pFldFMyID = pFldFMyID || value != m_FMyID;
            if (pFldFMyID)
                m_FMyID = value;
        }
    }

    [StringLength(100, ErrorMessage = "A propriedade FGUID da tabela ProcessOutputEngine deve ter no máximo 100 caracteres.")]
    public string? FGUID
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FGUID ?? string.Empty;
        set
        {
            pFldFGUID = pFldFGUID || !(m_FGUID ?? string.Empty).Equals(value);
            if (pFldFGUID)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FGUID = trimmed.Length > 100 ? trimmed.AsSpan(0, 100).ToString() : trimmed;
            }
        }
    }

    public int IQuemCad() => 0;
    public int IQuemAtu() => 0;
    public string IDtCadDataX_DataHora() => string.Empty;
    public string IDtAtuDataX_DataHora() => string.Empty;
    [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public void SetAuditor(int usuarioId)
    {
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITabelaName() => PTabelaNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoCodigo() => CampoCodigo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoNome() => CampoNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string IPrefixo() => PTabelaPrefixo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITypeFieldCode() => "int";
    public ImmutableArray<DBInfoSystem> IFieldsRaw() => throw new NotImplementedException();
    public ImmutableArray<DBInfoSystem> IPkFields() => throw new NotImplementedException();
    public ImmutableArray<DBInfoSystem> IPkIndicesFields() => throw new NotImplementedException();
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => false;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetID() => ID;
}