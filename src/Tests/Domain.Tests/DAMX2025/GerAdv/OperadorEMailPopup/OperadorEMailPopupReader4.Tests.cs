// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using MenphisSI.GerAdv.Models.Response.All;
using MenphisSI.GerAdv.Readers;
using System.Data;

namespace MenphisSI.GerAdv.Tests.Readers;
/// <summary>
/// Comprehensive unit tests for OperadorEMailPopupReader class
/// Tests all public methods including async operations, data reading, and data transformation
/// </summary>
public class OperadorEMailPopupReaderTests : IDisposable
{
    private readonly Mock<IFOperadorEMailPopupFactory> _mockOperadorEMailPopupFactory;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IDataRecord> _mockDataRecord;
    private readonly OperadorEMailPopupReader _operadoremailpopupReader;
    public OperadorEMailPopupReaderTests()
    {
        _mockOperadorEMailPopupFactory = new Mock<IFOperadorEMailPopupFactory>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockDataRecord = new Mock<IDataRecord>();
        _operadoremailpopupReader = new OperadorEMailPopupReader(_mockOperadorEMailPopupFactory.Object);
    }

#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldInitializeReader()
    {
        // Act & Assert
        _operadoremailpopupReader.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new OperadorEMailPopupReader(null !));
    }

#endregion
#region ListarN Tests
    [Fact]
    public async Task ListarN_WithValidParameters_ShouldCallDevourerSqlData()
    {
        // Arrange
        var max = 10;
        var uri = "valid-uri"; // This would need to be a valid URI in actual implementation
        var cWhere = "oepCodigo > 0";
        var parameters = new List<SqlParameter>();
        var order = "oepnome";
        // Act & Assert
        // Since this calls static methods and external dependencies,
        // we expect it to throw an exception with our test setup
        await Assert.ThrowsAsync<Exception>(() => _operadoremailpopupReader.ListarN(max, uri, cWhere, parameters, order));
    }

    [Fact]
    public async Task ListarN_WithEmptyParameters_ShouldThrowException()
    {
        // Arrange
        var max = 0;
        var uri = string.Empty; // Empty URI should cause an exception
        var cWhere = string.Empty;
        var parameters = new List<SqlParameter>();
        var order = string.Empty;
        // Act & Assert
        await Assert.ThrowsAsync<Exception>(() => _operadoremailpopupReader.ListarN(max, uri, cWhere, parameters, order));
    }

#endregion
#region Listar Tests
    [Fact]
    public async Task Listar_WithValidParameters_ShouldCallListarTabela()
    {
        // Arrange
        var max = 10;
        var uri = "valid-uri"; // This would need to be a valid URI in actual implementation
        var cWhere = "oepCodigo > 0";
        var parameters = new List<SqlParameter>();
        var order = "carNome";
        var cancellationToken = CancellationToken.None;
        // Act & Assert
        // Since this calls external dependencies and database connections,
        // we expect it to throw an exception with our test setup
        await Assert.ThrowsAsync<Exception>(() => _operadoremailpopupReader.Listar(max, uri, cWhere, parameters, order, cancellationToken));
    }

    [Fact]
    public async Task Listar_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        var max = 10;
        var uri = "test-uri";
        var cWhere = "oepCodigo > 0";
        var parameters = new List<SqlParameter>();
        var order = "carNome";
        var cancellationToken = new CancellationToken(true); // Already cancelled
        // Act & Assert
        // Even with cancellation, this should throw an exception due to invalid URI
        await Assert.ThrowsAsync<Exception>(() => _operadoremailpopupReader.Listar(max, uri, cWhere, parameters, order, cancellationToken));
    }

#endregion
#region Read Tests with ID and Connection
    [Fact]
    public async Task Read_WithValidId_ShouldReturnOperadorEMailPopupResponse()
    {
        // Arrange
        var id = 123;
        var expectedOperadorEMailPopup = new FOperadorEMailPopup
        {
            ID = id,
            FNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
        _mockOperadorEMailPopupFactory.Setup(x => x.CreateFromIdAsync(id, _mockConnection.Object)).ReturnsAsync(expectedOperadorEMailPopup);
        // Act
        var result = await _operadoremailpopupReader.Read(id, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result?.Id.Should().Be(id);
        result?.Nome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public async Task Read_WithEmptyId_ShouldReturnNull()
    {
        // Arrange
        var id = 0; // Empty ID
        var emptyFOperadorEMailPopup = new FOperadorEMailPopup
        {
            ID = 0
        };
        _mockOperadorEMailPopupFactory.Setup(x => x.CreateFromIdAsync(id, _mockConnection.Object)).ReturnsAsync(emptyFOperadorEMailPopup);
        // Act
        var result = await _operadoremailpopupReader.Read(id, _mockConnection.Object);
        // Assert
        result.Should().BeNull();
    }

    [Fact]
    public async Task Read_WithNegativeId_ShouldReturnNull()
    {
        // Arrange
        var id = -1;
        var emptyFOperadorEMailPopup = new FOperadorEMailPopup
        {
            ID = 0
        };
        _mockOperadorEMailPopupFactory.Setup(x => x.CreateFromIdAsync(id, _mockConnection.Object)).ReturnsAsync(emptyFOperadorEMailPopup);
        // Act
        var result = await _operadoremailpopupReader.Read(id, _mockConnection.Object);
        // Assert
        result.Should().BeNull();
    }

#endregion
#region ReadM Tests
    [Fact]
    public async Task ReadM_WithValidId_ShouldReturnOperadorEMailPopupModel()
    {
        // Arrange
        var id = 123;
        var expectedFOperadorEMailPopup = new FOperadorEMailPopup
        {
            ID = id,
            FNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
        _mockOperadorEMailPopupFactory.Setup(x => x.CreateFromIdAsync(id, _mockConnection.Object)).ReturnsAsync(expectedFOperadorEMailPopup);
        // Act
        var result = await _operadoremailpopupReader.ReadM(id, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result?.Id.Should().Be(id);
        result?.Nome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public async Task ReadM_WithEmptyId_ShouldReturnModelWithDefaults()
    {
        // Arrange
        var id = 0;
        var emptyFOperadorEMailPopup = new FOperadorEMailPopup
        {
            ID = 0,
            FNome = null
        };
        _mockOperadorEMailPopupFactory.Setup(x => x.CreateFromIdAsync(id, _mockConnection.Object)).ReturnsAsync(emptyFOperadorEMailPopup);
        // Act
        var result = await _operadoremailpopupReader.ReadM(id, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result?.Id.Should().Be(0);
        result?.Nome.Should().Be(string.Empty);
    }

#endregion
#region Read with FOperadorEMailPopup and Connection Tests
    [Fact]
    public void Read_WithValidFOperadorEMailPopupAndConnection_ShouldReturnOperadorEMailPopupResponse()
    {
        // Arrange
        var dbRec = new FOperadorEMailPopup
        {
            ID = 123,
            FNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
        // Act
        var result = _operadoremailpopupReader.Read(dbRec, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result?.Id.Should().Be(123);
        result?.Nome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public void Read_WithNullFOperadorEMailPopupAndConnection_ShouldReturnNull()
    {
        // Arrange
        FOperadorEMailPopup? dbRec = null;
        // Act
        var result = _operadoremailpopupReader.Read(dbRec, _mockConnection.Object);
        // Assert
        result.Should().BeNull();
    }

#endregion
#region Read with Where and Parameters Tests
    [Fact]
    public void Read_WithWhereAndParameters_ShouldReturnOperadorEMailPopupResponse()
    {
        // Arrange
        var where = "oepCodigo = @id";
        var parameters = new List<SqlParameter>
        {
            new("@id", 123)
        };
        var expectedFOperadorEMailPopup = new FOperadorEMailPopup
        {
            ID = 123,
            FNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
        _mockOperadorEMailPopupFactory.Setup(x => x.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(expectedFOperadorEMailPopup);
        // Act
        var result = _operadoremailpopupReader.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result?.Id.Should().Be(123);
        result?.Nome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public void Read_WithWhereAndParameters_WhenRecordNotFound_ShouldReturnNull()
    {
        // Arrange
        var where = "oepCodigo = @id";
        var parameters = new List<SqlParameter>
        {
            new("@id", 999)
        };
        var emptyFOperadorEMailPopup = new FOperadorEMailPopup
        {
            ID = 0
        };
        _mockOperadorEMailPopupFactory.Setup(x => x.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(emptyFOperadorEMailPopup);
        // Act
        var result = _operadoremailpopupReader.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().BeNull();
    }

#endregion
#region Read with FOperadorEMailPopup Tests
    [Fact]
    public void Read_WithValidFOperadorEMailPopup_ShouldReturnOperadorEMailPopupResponse()
    {
        // Arrange
        var dbRec = new FOperadorEMailPopup
        {
            ID = 123,
            FNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
        // Act
        var result = _operadoremailpopupReader.Read(dbRec);
        // Assert
        result.Should().NotBeNull();
        result?.Id.Should().Be(123);
        result?.Nome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public void Read_WithNullFOperadorEMailPopup_ShouldReturnNull()
    {
        // Arrange
        FOperadorEMailPopup? dbRec = null;
        // Act
        var result = _operadoremailpopupReader.Read(dbRec);
        // Assert
        result.Should().BeNull();
    }

    [Fact]
    public void Read_WithFOperadorEMailPopupNullNome_ShouldReturnEmptyStringForNome()
    {
        // Arrange
        var dbRec = new FOperadorEMailPopup
        {
            ID = 123,
            FNome = null
        };
        // Act
        var result = _operadoremailpopupReader.Read(dbRec);
        // Assert
        result.Should().NotBeNull();
        result?.Id.Should().Be(123);
        result?.Nome.Should().Be(string.Empty);
    }

#endregion
#region Read with DBOperadorEMailPopup Tests
    [Fact]
    public void Read_WithValidSGDBOperadorEMailPopup_ShouldReturnOperadorEMailPopupResponse()
    {
        // Arrange
        var dbRec = new DBOperadorEMailPopup
        {
            ID = 123,
            FNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
        // Act
        var result = _operadoremailpopupReader.Read(dbRec);
        // Assert
        result.Should().NotBeNull();
        result?.Id.Should().Be(123);
        result?.Nome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public void Read_WithNullSGDBOperadorEMailPopup_ShouldReturnNull()
    {
        // Arrange
        DBOperadorEMailPopup? dbRec = null;
        // Act
        var result = _operadoremailpopupReader.Read(dbRec);
        // Assert
        result.Should().BeNull();
    }

    [Fact]
    public void Read_WithSGDBOperadorEMailPopupNullNome_ShouldReturnEmptyStringForNome()
    {
        // Arrange
        var dbRec = new DBOperadorEMailPopup
        {
            ID = 123,
            FNome = null // This should result in empty string in response
        };
        // Act
        var result = _operadoremailpopupReader.Read(dbRec);
        // Assert
        result.Should().NotBeNull();
        result?.Id.Should().Be(123);
        result?.Nome.Should().Be(string.Empty);
    }

#endregion
#region ReadAll with FOperadorEMailPopup and IDataRecord Tests
    [Fact]
    public void ReadAll_WithValidFOperadorEMailPopupAndDataRecord_ShouldReturnOperadorEMailPopupResponseAll()
    {
        // Arrange
        var dbRec = new FOperadorEMailPopup
        {
            ID = 123,
            FNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
        // Act
        var result = _operadoremailpopupReader.ReadAll(dbRec, _mockDataRecord.Object);
        // Assert
        result.Should().NotBeNull();
        result?.Id.Should().Be(123);
        result?.Nome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public void ReadAll_WithNullFOperadorEMailPopupAndDataRecord_ShouldReturnNull()
    {
        // Arrange
        FOperadorEMailPopup? dbRec = null;
        // Act
        var result = _operadoremailpopupReader.ReadAll(dbRec, _mockDataRecord.Object);
        // Assert
        result.Should().BeNull();
    }

    [Fact]
    public void ReadAll_WithFOperadorEMailPopupNullNomeAndDataRecord_ShouldReturnEmptyStringForNome()
    {
        // Arrange
        var dbRec = new FOperadorEMailPopup
        {
            ID = 123,
            FNome = null
        };
        // Act
        var result = _operadoremailpopupReader.ReadAll(dbRec, _mockDataRecord.Object);
        // Assert
        result.Should().NotBeNull();
        result?.Id.Should().Be(123);
        result?.Nome.Should().Be(string.Empty);
    }

#endregion
#region ReadAll with DBOperadorEMailPopup and DataRow Tests
    [Fact]
    public void ReadAll_WithValidSGDBOperadorEMailPopupAndDataRow_ShouldReturnOperadorEMailPopupResponseAll()
    {
        // Arrange
        var dbRec = new DBOperadorEMailPopup
        {
            ID = 123,
            FNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
        // Act
        var result = _operadoremailpopupReader.ReadAll(dbRec, null);
        // Assert
        result.Should().NotBeNull();
        result?.Id.Should().Be(123);
        result?.Nome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public void ReadAll_WithNullSGDBOperadorEMailPopupAndDataRow_ShouldReturnNull()
    {
        // Arrange
        DBOperadorEMailPopup? dbRec = null;
        // Act
        var result = _operadoremailpopupReader.ReadAll(dbRec, null);
        // Assert
        result.Should().BeNull();
    }

    [Fact]
    public void ReadAll_WithSGDBOperadorEMailPopupNullNomeAndDataRow_ShouldReturnEmptyStringForNome()
    {
        // Arrange
        var dbRec = new DBOperadorEMailPopup
        {
            ID = 123,
            FNome = null // This should result in empty string in response
        };
        // Act
        var result = _operadoremailpopupReader.ReadAll(dbRec, null);
        // Assert
        result.Should().NotBeNull();
        result?.Id.Should().Be(123);
        result?.Nome.Should().Be(string.Empty);
    }

#endregion
#region Edge Cases and Error Handling Tests
    [Fact]
    public async Task Read_WithFactoryException_ShouldPropagateException()
    {
        // Arrange
        var id = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockOperadorEMailPopupFactory.Setup(x => x.CreateFromIdAsync(id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _operadoremailpopupReader.Read(id, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task ReadM_WithFactoryException_ShouldPropagateException()
    {
        // Arrange
        var id = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockOperadorEMailPopupFactory.Setup(x => x.CreateFromIdAsync(id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _operadoremailpopupReader.ReadM(id, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public void Read_WithWhereParameters_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "oepCodigo = @id";
        var parameters = new List<SqlParameter>
        {
            new("@id", 123)
        };
        var expectedException = new InvalidOperationException("Factory error");
        _mockOperadorEMailPopupFactory.Setup(x => x.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _operadoremailpopupReader.Read(where, parameters, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Data Consistency Tests
    [Theory]
    [InlineData(1, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData(999, "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData(0, "")]
    public void Read_WithVariousData_ShouldMaintainConsistency(int id, string nome)
    {
        // Arrange
        var dbRec = new FOperadorEMailPopup
        {
            ID = id,
            FNome = nome
        };
        // Act
        var result = _operadoremailpopupReader.Read(dbRec);
        // Assert
        if (id == 0)
        {
            result.Should().NotBeNull();
            result?.Id.Should().Be(id);
        }
        else
        {
            result.Should().NotBeNull();
            result?.Id.Should().Be(id);
            result?.Nome.Should().Be(nome);
        }
    }

    [Theory]
    [InlineData(1, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData(999, "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData(0, "")]
    public void ReadAll_WithVariousData_ShouldMaintainConsistency(int id, string nome)
    {
        // Arrange
        var dbRec = new FOperadorEMailPopup
        {
            ID = id,
            FNome = nome
        };
        // Act
        var result = _operadoremailpopupReader.ReadAll(dbRec, _mockDataRecord.Object);
        // Assert
        result.Should().NotBeNull();
        result?.Id.Should().Be(id);
        result?.Nome.Should().Be(nome);
    }

#endregion
#region Async Behavior Tests
    [Fact]
    public async Task AsyncMethods_ShouldCompleteWithoutBlocking()
    {
        // Arrange
        var id = 123;
        var expectedFOperadorEMailPopup = new FOperadorEMailPopup
        {
            ID = id,
            FNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
        _mockOperadorEMailPopupFactory.Setup(x => x.CreateFromIdAsync(id, _mockConnection.Object)).ReturnsAsync(expectedFOperadorEMailPopup);
        // Act & Assert
        // Test only the methods that don't depend on external URI connections
        var readTask = _operadoremailpopupReader.Read(id, _mockConnection.Object);
        var readMTask = _operadoremailpopupReader.ReadM(id, _mockConnection.Object);
        await Task.WhenAll(readTask, readMTask);
        // If we reach here, async methods completed without deadlock
        Assert.True(true);
    }

    [Fact]
    public async Task ListarN_WithInvalidUri_ShouldThrowException()
    {
        // Arrange
        var max = 10;
        var uri = "test-uri"; // Invalid URI
        var cWhere = "";
        var parameters = new List<SqlParameter>();
        var order = "";
        // Act & Assert
        // This should throw an exception because the URI is invalid
        await Assert.ThrowsAsync<Exception>(() => _operadoremailpopupReader.ListarN(max, uri, cWhere, parameters, order));
    }

    [Fact]
    public async Task Listar_WithInvalidUri_ShouldThrowException()
    {
        // Arrange
        var max = 10;
        var uri = "test-uri"; // Invalid URI
        var cWhere = "";
        var parameters = new List<SqlParameter>();
        var order = "";
        var cancellationToken = CancellationToken.None;
        // Act & Assert
        // This should throw an exception because the URI is invalid
        await Assert.ThrowsAsync<Exception>(() => _operadoremailpopupReader.Listar(max, uri, cWhere, parameters, order, cancellationToken));
    }

#endregion
#region Parameter Validation Tests
    [Fact]
    public async Task Read_WithNullConnection_ShouldHandleGracefully()
    {
        // Arrange
        var id = 123;
        // Act & Assert
        // This would typically throw an exception or handle gracefully
        // depending on the implementation
        try
        {
            await _operadoremailpopupReader.Read(id, null !);
        }
        catch (Exception ex)
        {
            ex.Should().NotBeNull();
        }
    }

    [Fact]
    public async Task ReadM_WithNullConnection_ShouldHandleGracefully()
    {
        // Arrange
        var id = 123;
        // Act & Assert
        try
        {
            await _operadoremailpopupReader.ReadM(id, null !);
        }
        catch (Exception ex)
        {
            ex.Should().NotBeNull();
        }
    }

    [Fact]
    public void Read_WithNullParametersList_ShouldHandleGracefully()
    {
        // Arrange
        var where = "oepCodigo = @id";
        // Act & Assert
        try
        {
            _operadoremailpopupReader.Read(where, null !, _mockConnection.Object);
        }
        catch (Exception ex)
        {
            ex.Should().NotBeNull();
        }
    }

#endregion
#region Integration-like Tests
    [Fact]
    public void Read_FOperadorEMailPopup_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var testId = 456;
        var testNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        var dbRec = new FOperadorEMailPopup
        {
            ID = testId,
            FNome = testNome
        };
        // Act
        var result = _operadoremailpopupReader.Read(dbRec);
        // Assert
        result.Should().NotBeNull();
        result.Should().BeOfType<OperadorEMailPopupResponse>();
        result!.Id.Should().Be(testId);
        result.Nome.Should().Be(testNome);
    }

    [Fact]
    public void ReadAll_FOperadorEMailPopup_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var testId = 789;
        var testNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        var dbRec = new FOperadorEMailPopup
        {
            ID = testId,
            FNome = testNome
        };
        // Act
        var result = _operadoremailpopupReader.ReadAll(dbRec, _mockDataRecord.Object);
        // Assert
        result.Should().NotBeNull();
        result.Should().BeOfType<OperadorEMailPopupResponseAll>();
        result!.Id.Should().Be(testId);
        result.Nome.Should().Be(testNome);
    }

#endregion
#region Dispose
    public virtual void Dispose()
    {
        // Clean up any resources if needed
        GC.SuppressFinalize(this);
    }
#endregion
}