// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Readers;
public partial class ContatoCRMReader(IFContatoCRMFactory contatocrmFactory) : IContatoCRMReader
{
    private readonly IFContatoCRMFactory _contatocrmFactory = contatocrmFactory;
    public async Task<IEnumerable<DBNomeID>> ListarN(int max, string uri, string cWhere, List<SqlParameter> parameters, string order) => await DevourerSqlData.ListarNomeID(BuildSqlQuery("ctcCodigo, ctcData", cWhere, order, max), parameters, uri, caching: DevourerOne.PCachingDefault, max: max);
    public async Task<IEnumerable<ContatoCRMResponseAll>> Listar(int max, string uri, string cWhere, List<SqlParameter> parameters, string order, CancellationToken cancellationToken) => await ListarTabela(BuildSqlQuery(DBContatoCRM.CamposSqlX, cWhere, order, max), parameters, uri, caching: DevourerOne.PCachingDefault, max: max, cancellationToken: cancellationToken);
    private async Task<IEnumerable<ContatoCRMResponseAll>> ListarTabela(string sql, List<SqlParameter> parameters, string uri, bool caching = DevourerOne.PCachingDefault, int max = 200, CancellationToken cancellationToken = default)
    {
        var result = new List<ContatoCRMResponseAll>(max);
        await using var connection = Configuracoes.GetConnectionByUri(uri);
        await using var cmd = new SqlCommand(cmdText: ConfiguracoesDBT.CmdSql(sql), connection: connection?.InnerConnection)
        {
            CommandTimeout = 30
        };
        foreach (var param in parameters)
        {
            if (!cmd.Parameters.Contains(param.ParameterName))
            {
                var newParam = new SqlParameter(param.ParameterName, param.Value)
                {
                    SqlDbType = param.SqlDbType,
                    Direction = param.Direction,
                    Size = param.Size,
                    Precision = param.Precision,
                    Scale = param.Scale
                };
                cmd.Parameters.Add(newParam);
            }
        }

        await using var reader = await cmd.ExecuteReaderAsync(CommandBehavior.SingleResult);
        while (await reader.ReadAsync())
        {
            if (cancellationToken.IsCancellationRequested)
                return result;
            result.Add(ReadAll(_contatocrmFactory.CreateFromReader(reader), reader)!);
        }

        return result;
    }

    public async Task<ContatoCRMResponse?> Read(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _contatocrmFactory.CreateFromIdAsync(id, oCnn);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public async Task<Models.ContatoCRM?> ReadM(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _contatocrmFactory.CreateFromIdAsync(id, oCnn);
        var contatocrm = new Models.ContatoCRM
        {
            Id = dbRec.ID,
            AgeClienteAvisado = dbRec.FAgeClienteAvisado,
            DocsViaRecebimento = dbRec.FDocsViaRecebimento,
            NaoPublicavel = dbRec.FNaoPublicavel,
            Notificar = dbRec.FNotificar,
            Ocultar = dbRec.FOcultar,
            Assunto = dbRec.FAssunto ?? string.Empty,
            IsDocsRecebidos = dbRec.FIsDocsRecebidos,
            QuemNotificou = dbRec.FQuemNotificou,
            Operador = dbRec.FOperador,
            Cliente = dbRec.FCliente,
            ObjetoNotificou = dbRec.FObjetoNotificou,
            PessoaContato = dbRec.FPessoaContato ?? string.Empty,
            Data = dbRec.FData ?? string.Empty,
            Tempo = dbRec.FTempo,
            Processo = dbRec.FProcesso,
            Importante = dbRec.FImportante,
            Urgente = dbRec.FUrgente,
            GerarHoraTrabalhada = dbRec.FGerarHoraTrabalhada,
            ExibirNoTopo = dbRec.FExibirNoTopo,
            TipoContatoCRM = dbRec.FTipoContatoCRM,
            Contato = dbRec.FContato ?? string.Empty,
            Emocao = dbRec.FEmocao,
            Continuar = dbRec.FContinuar,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataNotificou, out DateTime XDataNotificou))
        {
            contatocrm.DataNotificou = dbRec.FDataNotificou;
            contatocrm.DataNotificou_date = XDataNotificou;
        }

        if (DateTime.TryParse(dbRec.FHoraNotificou, out DateTime XHoraNotificou))
        {
            contatocrm.HoraNotificou = dbRec.FHoraNotificou;
            contatocrm.HoraNotificou_date = XHoraNotificou;
        }

        if (DateTime.TryParse(dbRec.FHoraInicial, out DateTime XHoraInicial))
        {
            contatocrm.HoraInicial = dbRec.FHoraInicial;
            contatocrm.HoraInicial_date = XHoraInicial;
        }

        if (DateTime.TryParse(dbRec.FHoraFinal, out DateTime XHoraFinal))
        {
            contatocrm.HoraFinal = dbRec.FHoraFinal;
            contatocrm.HoraFinal_date = XHoraFinal;
        }

        return contatocrm;
    }

    public ContatoCRMResponse? Read(FContatoCRM dbRec, MsiSqlConnection oCnn)
    {
        return Read(dbRec);
    }

    public ContatoCRMResponse? Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn)
    {
        using var dbRec = _contatocrmFactory.CreateFromParameters(parameters, oCnn, sqlWhere: where);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public ContatoCRMResponse? Read(FContatoCRM dbRec) // Track 001.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var contatocrm = new ContatoCRMResponse
        {
            Id = dbRec.ID,
            AgeClienteAvisado = dbRec.FAgeClienteAvisado,
            DocsViaRecebimento = dbRec.FDocsViaRecebimento,
            NaoPublicavel = dbRec.FNaoPublicavel,
            Notificar = dbRec.FNotificar,
            Ocultar = dbRec.FOcultar,
            Assunto = dbRec.FAssunto ?? string.Empty,
            IsDocsRecebidos = dbRec.FIsDocsRecebidos,
            QuemNotificou = dbRec.FQuemNotificou,
            Operador = dbRec.FOperador,
            Cliente = dbRec.FCliente,
            ObjetoNotificou = dbRec.FObjetoNotificou,
            PessoaContato = dbRec.FPessoaContato ?? string.Empty,
            Data = dbRec.FData ?? string.Empty,
            Tempo = dbRec.FTempo,
            Processo = dbRec.FProcesso,
            Importante = dbRec.FImportante,
            Urgente = dbRec.FUrgente,
            GerarHoraTrabalhada = dbRec.FGerarHoraTrabalhada,
            ExibirNoTopo = dbRec.FExibirNoTopo,
            TipoContatoCRM = dbRec.FTipoContatoCRM,
            Contato = dbRec.FContato ?? string.Empty,
            Emocao = dbRec.FEmocao,
            Continuar = dbRec.FContinuar,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataNotificou, out DateTime XDataNotificou))
        {
            contatocrm.DataNotificou = dbRec.FDataNotificou;
            contatocrm.DataNotificou_date = XDataNotificou;
        }

        if (DateTime.TryParse(dbRec.FHoraNotificou, out DateTime XHoraNotificou))
        {
            contatocrm.HoraNotificou = dbRec.FHoraNotificou;
            contatocrm.HoraNotificou_date = XHoraNotificou;
        }

        if (DateTime.TryParse(dbRec.FHoraInicial, out DateTime XHoraInicial))
        {
            contatocrm.HoraInicial = dbRec.FHoraInicial;
            contatocrm.HoraInicial_date = XHoraInicial;
        }

        if (DateTime.TryParse(dbRec.FHoraFinal, out DateTime XHoraFinal))
        {
            contatocrm.HoraFinal = dbRec.FHoraFinal;
            contatocrm.HoraFinal_date = XHoraFinal;
        }

        return contatocrm;
    }

    public ContatoCRMResponse? Read(SG.GerAdv.DBContatoCRM dbRec) // Track 002.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var contatocrm = new ContatoCRMResponse
        {
            Id = dbRec.ID,
            AgeClienteAvisado = dbRec.FAgeClienteAvisado,
            DocsViaRecebimento = dbRec.FDocsViaRecebimento,
            NaoPublicavel = dbRec.FNaoPublicavel,
            Notificar = dbRec.FNotificar,
            Ocultar = dbRec.FOcultar,
            Assunto = dbRec.FAssunto ?? string.Empty,
            IsDocsRecebidos = dbRec.FIsDocsRecebidos,
            QuemNotificou = dbRec.FQuemNotificou,
            Operador = dbRec.FOperador,
            Cliente = dbRec.FCliente,
            ObjetoNotificou = dbRec.FObjetoNotificou,
            PessoaContato = dbRec.FPessoaContato ?? string.Empty,
            Data = dbRec.FData ?? string.Empty,
            Tempo = dbRec.FTempo,
            Processo = dbRec.FProcesso,
            Importante = dbRec.FImportante,
            Urgente = dbRec.FUrgente,
            GerarHoraTrabalhada = dbRec.FGerarHoraTrabalhada,
            ExibirNoTopo = dbRec.FExibirNoTopo,
            TipoContatoCRM = dbRec.FTipoContatoCRM,
            Contato = dbRec.FContato ?? string.Empty,
            Emocao = dbRec.FEmocao,
            Continuar = dbRec.FContinuar,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataNotificou, out DateTime XDataNotificou))
        {
            contatocrm.DataNotificou = dbRec.FDataNotificou;
            contatocrm.DataNotificou_date = XDataNotificou;
        }

        if (DateTime.TryParse(dbRec.FHoraNotificou, out DateTime XHoraNotificou))
        {
            contatocrm.HoraNotificou = dbRec.FHoraNotificou;
            contatocrm.HoraNotificou_date = XHoraNotificou;
        }

        if (DateTime.TryParse(dbRec.FHoraInicial, out DateTime XHoraInicial))
        {
            contatocrm.HoraInicial = dbRec.FHoraInicial;
            contatocrm.HoraInicial_date = XHoraInicial;
        }

        if (DateTime.TryParse(dbRec.FHoraFinal, out DateTime XHoraFinal))
        {
            contatocrm.HoraFinal = dbRec.FHoraFinal;
            contatocrm.HoraFinal_date = XHoraFinal;
        }

        return contatocrm;
    }

    public ContatoCRMResponseAll? ReadAll(FContatoCRM dbRec, IDataRecord dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var contatocrm = new ContatoCRMResponseAll
        {
            Id = dbRec.ID,
            AgeClienteAvisado = dbRec.FAgeClienteAvisado,
            DocsViaRecebimento = dbRec.FDocsViaRecebimento,
            NaoPublicavel = dbRec.FNaoPublicavel,
            Notificar = dbRec.FNotificar,
            Ocultar = dbRec.FOcultar,
            Assunto = dbRec.FAssunto ?? string.Empty,
            IsDocsRecebidos = dbRec.FIsDocsRecebidos,
            QuemNotificou = dbRec.FQuemNotificou,
            Operador = dbRec.FOperador,
            Cliente = dbRec.FCliente,
            ObjetoNotificou = dbRec.FObjetoNotificou,
            PessoaContato = dbRec.FPessoaContato ?? string.Empty,
            Data = dbRec.FData ?? string.Empty,
            Tempo = dbRec.FTempo,
            Processo = dbRec.FProcesso,
            Importante = dbRec.FImportante,
            Urgente = dbRec.FUrgente,
            GerarHoraTrabalhada = dbRec.FGerarHoraTrabalhada,
            ExibirNoTopo = dbRec.FExibirNoTopo,
            TipoContatoCRM = dbRec.FTipoContatoCRM,
            Contato = dbRec.FContato ?? string.Empty,
            Emocao = dbRec.FEmocao,
            Continuar = dbRec.FContinuar,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataNotificou, out DateTime XDataNotificou))
        {
            contatocrm.DataNotificou = dbRec.FDataNotificou;
            contatocrm.DataNotificou_date = XDataNotificou;
        }

        if (DateTime.TryParse(dbRec.FHoraNotificou, out DateTime XHoraNotificou))
        {
            contatocrm.HoraNotificou = dbRec.FHoraNotificou;
            contatocrm.HoraNotificou_date = XHoraNotificou;
        }

        if (DateTime.TryParse(dbRec.FHoraInicial, out DateTime XHoraInicial))
        {
            contatocrm.HoraInicial = dbRec.FHoraInicial;
            contatocrm.HoraInicial_date = XHoraInicial;
        }

        if (DateTime.TryParse(dbRec.FHoraFinal, out DateTime XHoraFinal))
        {
            contatocrm.HoraFinal = dbRec.FHoraFinal;
            contatocrm.HoraFinal_date = XHoraFinal;
        }

        try
        {
            contatocrm.NomeOperador = dr[DBOperadorDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            contatocrm.NomeClientes = dr[DBClientesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            contatocrm.NroPastaProcessos = dr[DBProcessosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            contatocrm.NomeTipoContatoCRM = dr[DBTipoContatoCRMDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return contatocrm;
    }

    public ContatoCRMResponseAll? ReadAll(SG.GerAdv.DBContatoCRM dbRec, DataRow dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var contatocrm = new ContatoCRMResponseAll
        {
            Id = dbRec.ID,
            AgeClienteAvisado = dbRec.FAgeClienteAvisado,
            DocsViaRecebimento = dbRec.FDocsViaRecebimento,
            NaoPublicavel = dbRec.FNaoPublicavel,
            Notificar = dbRec.FNotificar,
            Ocultar = dbRec.FOcultar,
            Assunto = dbRec.FAssunto ?? string.Empty,
            IsDocsRecebidos = dbRec.FIsDocsRecebidos,
            QuemNotificou = dbRec.FQuemNotificou,
            Operador = dbRec.FOperador,
            Cliente = dbRec.FCliente,
            ObjetoNotificou = dbRec.FObjetoNotificou,
            PessoaContato = dbRec.FPessoaContato ?? string.Empty,
            Data = dbRec.FData ?? string.Empty,
            Tempo = dbRec.FTempo,
            Processo = dbRec.FProcesso,
            Importante = dbRec.FImportante,
            Urgente = dbRec.FUrgente,
            GerarHoraTrabalhada = dbRec.FGerarHoraTrabalhada,
            ExibirNoTopo = dbRec.FExibirNoTopo,
            TipoContatoCRM = dbRec.FTipoContatoCRM,
            Contato = dbRec.FContato ?? string.Empty,
            Emocao = dbRec.FEmocao,
            Continuar = dbRec.FContinuar,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataNotificou, out DateTime XDataNotificou))
        {
            contatocrm.DataNotificou = dbRec.FDataNotificou;
            contatocrm.DataNotificou_date = XDataNotificou;
        }

        if (DateTime.TryParse(dbRec.FHoraNotificou, out DateTime XHoraNotificou))
        {
            contatocrm.HoraNotificou = dbRec.FHoraNotificou;
            contatocrm.HoraNotificou_date = XHoraNotificou;
        }

        if (DateTime.TryParse(dbRec.FHoraInicial, out DateTime XHoraInicial))
        {
            contatocrm.HoraInicial = dbRec.FHoraInicial;
            contatocrm.HoraInicial_date = XHoraInicial;
        }

        if (DateTime.TryParse(dbRec.FHoraFinal, out DateTime XHoraFinal))
        {
            contatocrm.HoraFinal = dbRec.FHoraFinal;
            contatocrm.HoraFinal_date = XHoraFinal;
        }

        try
        {
            contatocrm.NomeOperador = dr[DBOperadorDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            contatocrm.NomeClientes = dr[DBClientesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            contatocrm.NroPastaProcessos = dr[DBProcessosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            contatocrm.NomeTipoContatoCRM = dr[DBTipoContatoCRMDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return contatocrm;
    }
}