// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class RecadosService
{
    private static (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterRecados filtro)
    {
        var parameters = new List<SqlParameter>();
        if (!string.IsNullOrEmpty(filtro.ClienteNome))
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.ClienteNome)}", ApplyWildCard(filtro.WildcardChar, filtro.ClienteNome)));
        }

        if (!string.IsNullOrEmpty(filtro.De))
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.De)}", ApplyWildCard(filtro.WildcardChar, filtro.De)));
        }

        if (!string.IsNullOrEmpty(filtro.Para))
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.Para)}", ApplyWildCard(filtro.WildcardChar, filtro.Para)));
        }

        if (!string.IsNullOrEmpty(filtro.Assunto))
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.Assunto)}", ApplyWildCard(filtro.WildcardChar, filtro.Assunto)));
        }

        if (filtro.Concluido != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.Concluido)}", filtro.Concluido));
        }

        if (filtro.Processo != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.Processo)}", filtro.Processo));
        }

        if (filtro.Cliente != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.Cliente)}", filtro.Cliente));
        }

        if (!string.IsNullOrEmpty(filtro.Recado))
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.Recado)}", ApplyWildCard(filtro.WildcardChar, filtro.Recado)));
        }

        if (filtro.Urgente != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.Urgente)}", filtro.Urgente));
        }

        if (filtro.Importante != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.Importante)}", filtro.Importante));
        }

        if (!string.IsNullOrEmpty(filtro.Data))
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.Data)}", ApplyWildCard(filtro.WildcardChar, filtro.Data)));
        }

        if (filtro.Voltara != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.Voltara)}", filtro.Voltara));
        }

        if (filtro.Pessoal != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.Pessoal)}", filtro.Pessoal));
        }

        if (filtro.Retornar != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.Retornar)}", filtro.Retornar));
        }

        if (!filtro.RetornoData.IsEmpty())
        {
            if (DateTime.TryParse(filtro.RetornoData, out var dataParam))
                parameters.Add(new($"@{nameof(DBRecadosDicInfo.RetornoData)}", dataParam));
        }

        if (!filtro.RetornoData_end.IsEmpty())
        {
            if (DateTime.TryParse(filtro.RetornoData_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBRecadosDicInfo.RetornoData)}_end", dataParam));
        }

        if (filtro.Emotion != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.Emotion)}", filtro.Emotion));
        }

        if (filtro.Emotion_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.Emotion)}_end", filtro.Emotion_end));
        }

        if (filtro.InternetID != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.InternetID)}", filtro.InternetID));
        }

        if (filtro.InternetID_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.InternetID)}_end", filtro.InternetID_end));
        }

        if (filtro.Uploaded != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.Uploaded)}", filtro.Uploaded));
        }

        if (filtro.Natureza != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.Natureza)}", filtro.Natureza));
        }

        if (filtro.Natureza_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.Natureza)}_end", filtro.Natureza_end));
        }

        if (filtro.BIU != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.BIU)}", filtro.BIU));
        }

        if (filtro.AguardarRetorno != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.AguardarRetorno)}", filtro.AguardarRetorno));
        }

        if (!string.IsNullOrEmpty(filtro.AguardarRetornoPara))
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.AguardarRetornoPara)}", ApplyWildCard(filtro.WildcardChar, filtro.AguardarRetornoPara)));
        }

        if (filtro.AguardarRetornoOK != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.AguardarRetornoOK)}", filtro.AguardarRetornoOK));
        }

        if (filtro.ParaID != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.ParaID)}", filtro.ParaID));
        }

        if (filtro.ParaID_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.ParaID)}_end", filtro.ParaID_end));
        }

        if (filtro.NaoPublicavel != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.NaoPublicavel)}", filtro.NaoPublicavel));
        }

        if (filtro.IsContatoCRM != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.IsContatoCRM)}", filtro.IsContatoCRM));
        }

        if (filtro.MasterID != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.MasterID)}", filtro.MasterID));
        }

        if (filtro.MasterID_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.MasterID)}_end", filtro.MasterID_end));
        }

        if (!string.IsNullOrEmpty(filtro.ListaPara))
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.ListaPara)}", ApplyWildCard(filtro.WildcardChar, filtro.ListaPara)));
        }

        if (filtro.Typed != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.Typed)}", filtro.Typed));
        }

        if (filtro.AssuntoRecado != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.AssuntoRecado)}", filtro.AssuntoRecado));
        }

        if (filtro.AssuntoRecado_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.AssuntoRecado)}_end", filtro.AssuntoRecado_end));
        }

        if (filtro.Historico != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.Historico)}", filtro.Historico));
        }

        if (filtro.ContatoCRM != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.ContatoCRM)}", filtro.ContatoCRM));
        }

        if (filtro.Ligacoes != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.Ligacoes)}", filtro.Ligacoes));
        }

        if (filtro.Agenda != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.Agenda)}", filtro.Agenda));
        }

        if (!string.IsNullOrEmpty(filtro.GUID))
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.GUID)}", ApplyWildCard(filtro.WildcardChar, filtro.GUID)));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
        }

        if (filtro.Codigo_filtro_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBRecadosDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
        }

        if (filtro.LogicalOperator.IsEmpty() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        cWhere.Append(filtro.ClienteNome.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.ClienteNome}]  {DevourerConsts.MsiCollate} like @{nameof(DBRecadosDicInfo.ClienteNome)}");
        cWhere.Append(filtro.De.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.De}]  {DevourerConsts.MsiCollate} like @{nameof(DBRecadosDicInfo.De)}");
        cWhere.Append(filtro.Para.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.Para}]  {DevourerConsts.MsiCollate} like @{nameof(DBRecadosDicInfo.Para)}");
        cWhere.Append(filtro.Assunto.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.Assunto}]  {DevourerConsts.MsiCollate} like @{nameof(DBRecadosDicInfo.Assunto)}");
        cWhere.Append(filtro.Concluido == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.Concluido}] = @{nameof(DBRecadosDicInfo.Concluido)}");
        cWhere.Append(filtro.Processo <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.Processo}] = @{nameof(DBRecadosDicInfo.Processo)}");
        cWhere.Append(filtro.Cliente <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.Cliente}] = @{nameof(DBRecadosDicInfo.Cliente)}");
        cWhere.Append(filtro.Recado.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.Recado}]  {DevourerConsts.MsiCollate} like @{nameof(DBRecadosDicInfo.Recado)}");
        cWhere.Append(filtro.Urgente == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.Urgente}] = @{nameof(DBRecadosDicInfo.Urgente)}");
        cWhere.Append(filtro.Importante == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.Importante}] = @{nameof(DBRecadosDicInfo.Importante)}");
        cWhere.Append(filtro.Data.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.Data}]  {DevourerConsts.MsiCollate} like @{nameof(DBRecadosDicInfo.Data)}");
        cWhere.Append(filtro.Voltara == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.Voltara}] = @{nameof(DBRecadosDicInfo.Voltara)}");
        cWhere.Append(filtro.Pessoal == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.Pessoal}] = @{nameof(DBRecadosDicInfo.Pessoal)}");
        cWhere.Append(filtro.Retornar == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.Retornar}] = @{nameof(DBRecadosDicInfo.Retornar)}");
        if (!filtro.RetornoData.IsEmpty() && filtro.RetornoData_end.IsEmpty())
        {
            cWhere.Append(filtro.RetornoData.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.RetornoData}], 103) >= CONVERT(DATE, @{nameof(DBRecadosDicInfo.RetornoData)}, 103)");
        }
        else
        {
            cWhere.Append((filtro.RetornoData.IsEmpty() && filtro.RetornoData_end.IsEmpty()) ? string.Empty : (!(filtro.RetornoData.IsEmpty()) && !(filtro.RetornoData_end.IsEmpty())) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBRecadosDicInfo.RetornoData} BETWEEN @{nameof(DBRecadosDicInfo.RetornoData)} AND @{nameof(DBRecadosDicInfo.RetornoData)}_end" : !(filtro.RetornoData.IsEmpty()) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBRecadosDicInfo.RetornoData} = @{nameof(DBRecadosDicInfo.RetornoData)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBRecadosDicInfo.RetornoData} <= @{nameof(DBRecadosDicInfo.RetornoData)}_end");
        }

        if (!filtro.Emotion.IsEmpty() && filtro.Emotion_end.IsEmpty())
        {
            cWhere.Append(filtro.Emotion <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.Emotion}] >= @{nameof(DBRecadosDicInfo.Emotion)}");
        }
        else
        {
            cWhere.Append((filtro.Emotion <= 0 && filtro.Emotion_end <= 0) ? string.Empty : (!(filtro.Emotion <= 0) && !(filtro.Emotion_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBRecadosDicInfo.Emotion} BETWEEN @{nameof(DBRecadosDicInfo.Emotion)} AND @{nameof(DBRecadosDicInfo.Emotion)}_end" : !(filtro.Emotion <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBRecadosDicInfo.Emotion} = @{nameof(DBRecadosDicInfo.Emotion)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBRecadosDicInfo.Emotion} <= @{nameof(DBRecadosDicInfo.Emotion)}_end");
        }

        if (!filtro.InternetID.IsEmpty() && filtro.InternetID_end.IsEmpty())
        {
            cWhere.Append(filtro.InternetID <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.InternetID}] >= @{nameof(DBRecadosDicInfo.InternetID)}");
        }
        else
        {
            cWhere.Append((filtro.InternetID <= 0 && filtro.InternetID_end <= 0) ? string.Empty : (!(filtro.InternetID <= 0) && !(filtro.InternetID_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBRecadosDicInfo.InternetID} BETWEEN @{nameof(DBRecadosDicInfo.InternetID)} AND @{nameof(DBRecadosDicInfo.InternetID)}_end" : !(filtro.InternetID <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBRecadosDicInfo.InternetID} = @{nameof(DBRecadosDicInfo.InternetID)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBRecadosDicInfo.InternetID} <= @{nameof(DBRecadosDicInfo.InternetID)}_end");
        }

        cWhere.Append(filtro.Uploaded == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.Uploaded}] = @{nameof(DBRecadosDicInfo.Uploaded)}");
        if (!filtro.Natureza.IsEmpty() && filtro.Natureza_end.IsEmpty())
        {
            cWhere.Append(filtro.Natureza <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.Natureza}] >= @{nameof(DBRecadosDicInfo.Natureza)}");
        }
        else
        {
            cWhere.Append((filtro.Natureza <= 0 && filtro.Natureza_end <= 0) ? string.Empty : (!(filtro.Natureza <= 0) && !(filtro.Natureza_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBRecadosDicInfo.Natureza} BETWEEN @{nameof(DBRecadosDicInfo.Natureza)} AND @{nameof(DBRecadosDicInfo.Natureza)}_end" : !(filtro.Natureza <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBRecadosDicInfo.Natureza} = @{nameof(DBRecadosDicInfo.Natureza)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBRecadosDicInfo.Natureza} <= @{nameof(DBRecadosDicInfo.Natureza)}_end");
        }

        cWhere.Append(filtro.BIU == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.BIU}] = @{nameof(DBRecadosDicInfo.BIU)}");
        cWhere.Append(filtro.AguardarRetorno == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.AguardarRetorno}] = @{nameof(DBRecadosDicInfo.AguardarRetorno)}");
        cWhere.Append(filtro.AguardarRetornoPara.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.AguardarRetornoPara}]  {DevourerConsts.MsiCollate} like @{nameof(DBRecadosDicInfo.AguardarRetornoPara)}");
        cWhere.Append(filtro.AguardarRetornoOK == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.AguardarRetornoOK}] = @{nameof(DBRecadosDicInfo.AguardarRetornoOK)}");
        if (!filtro.ParaID.IsEmpty() && filtro.ParaID_end.IsEmpty())
        {
            cWhere.Append(filtro.ParaID <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.ParaID}] >= @{nameof(DBRecadosDicInfo.ParaID)}");
        }
        else
        {
            cWhere.Append((filtro.ParaID <= 0 && filtro.ParaID_end <= 0) ? string.Empty : (!(filtro.ParaID <= 0) && !(filtro.ParaID_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBRecadosDicInfo.ParaID} BETWEEN @{nameof(DBRecadosDicInfo.ParaID)} AND @{nameof(DBRecadosDicInfo.ParaID)}_end" : !(filtro.ParaID <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBRecadosDicInfo.ParaID} = @{nameof(DBRecadosDicInfo.ParaID)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBRecadosDicInfo.ParaID} <= @{nameof(DBRecadosDicInfo.ParaID)}_end");
        }

        cWhere.Append(filtro.NaoPublicavel == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.NaoPublicavel}] = @{nameof(DBRecadosDicInfo.NaoPublicavel)}");
        cWhere.Append(filtro.IsContatoCRM == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.IsContatoCRM}] = @{nameof(DBRecadosDicInfo.IsContatoCRM)}");
        if (!filtro.MasterID.IsEmpty() && filtro.MasterID_end.IsEmpty())
        {
            cWhere.Append(filtro.MasterID <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.MasterID}] >= @{nameof(DBRecadosDicInfo.MasterID)}");
        }
        else
        {
            cWhere.Append((filtro.MasterID <= 0 && filtro.MasterID_end <= 0) ? string.Empty : (!(filtro.MasterID <= 0) && !(filtro.MasterID_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBRecadosDicInfo.MasterID} BETWEEN @{nameof(DBRecadosDicInfo.MasterID)} AND @{nameof(DBRecadosDicInfo.MasterID)}_end" : !(filtro.MasterID <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBRecadosDicInfo.MasterID} = @{nameof(DBRecadosDicInfo.MasterID)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBRecadosDicInfo.MasterID} <= @{nameof(DBRecadosDicInfo.MasterID)}_end");
        }

        cWhere.Append(filtro.ListaPara.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.ListaPara}]  {DevourerConsts.MsiCollate} like @{nameof(DBRecadosDicInfo.ListaPara)}");
        cWhere.Append(filtro.Typed == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.Typed}] = @{nameof(DBRecadosDicInfo.Typed)}");
        if (!filtro.AssuntoRecado.IsEmpty() && filtro.AssuntoRecado_end.IsEmpty())
        {
            cWhere.Append(filtro.AssuntoRecado <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.AssuntoRecado}] >= @{nameof(DBRecadosDicInfo.AssuntoRecado)}");
        }
        else
        {
            cWhere.Append((filtro.AssuntoRecado <= 0 && filtro.AssuntoRecado_end <= 0) ? string.Empty : (!(filtro.AssuntoRecado <= 0) && !(filtro.AssuntoRecado_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBRecadosDicInfo.AssuntoRecado} BETWEEN @{nameof(DBRecadosDicInfo.AssuntoRecado)} AND @{nameof(DBRecadosDicInfo.AssuntoRecado)}_end" : !(filtro.AssuntoRecado <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBRecadosDicInfo.AssuntoRecado} = @{nameof(DBRecadosDicInfo.AssuntoRecado)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBRecadosDicInfo.AssuntoRecado} <= @{nameof(DBRecadosDicInfo.AssuntoRecado)}_end");
        }

        cWhere.Append(filtro.Historico <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.Historico}] = @{nameof(DBRecadosDicInfo.Historico)}");
        cWhere.Append(filtro.ContatoCRM <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.ContatoCRM}] = @{nameof(DBRecadosDicInfo.ContatoCRM)}");
        cWhere.Append(filtro.Ligacoes <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.Ligacoes}] = @{nameof(DBRecadosDicInfo.Ligacoes)}");
        cWhere.Append(filtro.Agenda <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.Agenda}] = @{nameof(DBRecadosDicInfo.Agenda)}");
        cWhere.Append(filtro.GUID.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.GUID}]  {DevourerConsts.MsiCollate} like @{nameof(DBRecadosDicInfo.GUID)}");
        if (!filtro.Codigo_filtro.IsEmpty() && filtro.Codigo_filtro_end.IsEmpty())
        {
            cWhere.Append(filtro.Codigo_filtro <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBRecadosDicInfo.PTabelaNome}].[{DBRecadosDicInfo.CampoCodigo}] >= @{nameof(DBRecadosDicInfo.CampoCodigo)}");
        }
        else
        {
            cWhere.Append((filtro.Codigo_filtro <= 0 && filtro.Codigo_filtro_end <= 0) ? string.Empty : (!(filtro.Codigo_filtro <= 0) && !(filtro.Codigo_filtro_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBRecadosDicInfo.CampoCodigo} BETWEEN @{nameof(DBRecadosDicInfo.CampoCodigo)} AND @{nameof(DBRecadosDicInfo.CampoCodigo)}_end" : !(filtro.Codigo_filtro <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBRecadosDicInfo.CampoCodigo} = @{nameof(DBRecadosDicInfo.CampoCodigo)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBRecadosDicInfo.CampoCodigo} <= @{nameof(DBRecadosDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private static string ApplyWildCard(char wildcardChar, string value)
    {
        if (wildcardChar == '\0' || wildcardChar == ' ')
        {
            return value;
        }

        var result = $"{wildcardChar}{value.Replace(" ", wildcardChar.ToString())}{wildcardChar}";
        return result;
    }

    public async Task<IEnumerable<NomeID>> GetListN([FromQuery] int max, [FromBody] Filters.FilterRecados? filtro, [FromRoute, Required] string uri, CancellationToken token)
    {
        // Tracking: 20250606-0
        ThrowIfDisposed();
        var filtroResult = filtro == null ? null : WFiltro(filtro!);
        string where = filtroResult?.where ?? string.Empty;
        List<SqlParameter> parameters = filtroResult?.parametros ?? [];
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new Exception($"Coneão nula.");
        }

        var keyCache = await reader.ReadStringAuditor(uri, "", [], oCnn);
        var cacheKey = $"{uri}-Recados-{max}-{where.GetHashCode()}-GetListN-{keyCache}";
        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId)
        };
        return await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataListNAsync(max, uri, where, parameters, cancel), entryOptions, cancellationToken: token) ?? [];
    }

    private async Task<IEnumerable<NomeID>> GetDataListNAsync(int max, string uri, string where, List<SqlParameter> parameters, CancellationToken token)
    {
        var result = new List<NomeID>(max);
        var lista = await reader.ListarN(max, uri, where, parameters, DBRecadosDicInfo.CampoNome);
        foreach (var item in lista)
        {
            if (token.IsCancellationRequested)
                break;
            if (item?.FNome != null)
            {
                result.Add(new NomeID { Nome = item.FNome, ID = item.ID });
            }
        }

        return result;
    }

    private async Task<IEnumerable<RecadosResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}