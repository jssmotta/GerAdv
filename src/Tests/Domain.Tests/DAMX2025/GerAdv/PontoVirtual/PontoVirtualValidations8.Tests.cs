// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class PontoVirtualValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFPontoVirtualFactory> _mockPontoVirtualFactory;
    private readonly Mock<IPontoVirtualReader> _mockReader;
    private readonly PontoVirtualValidation _validation;
    private readonly Mock<IPontoVirtualService> _mockPontoVirtualService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IOperadorReader> _mockOperadorReader;
    private readonly PontoVirtualService _service;
    private readonly string _validUri = "test-uri";
    public PontoVirtualValidationTests()
    {
        _mockPontoVirtualFactory = new Mock<IFPontoVirtualFactory>();
        _mockReader = new Mock<IPontoVirtualReader>();
        _validation = new PontoVirtualValidation();
        _mockPontoVirtualService = new Mock<IPontoVirtualService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockOperadorReader = new Mock<IOperadorReader>();
    }

#region Class Structure Tests
    [Fact]
    public void PontoVirtualValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IPontoVirtualValidation>();
    }

    [Fact]
    public void PontoVirtualValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(PontoVirtualValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void PontoVirtualValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(PontoVirtualValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.PontoVirtual CreateValidPontoVirtual()
    {
        return new Models.PontoVirtual
        {
            Id = 1,
            HoraEntrada = "04:04",
            HoraSaida = "04:04",
            Operador = 1,
            Key = "AAAAAAAAAAAAAAAAAAAAA"
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockPontoVirtualService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterPontoVirtual>(), It.IsAny<string>())).ReturnsAsync(new List<PontoVirtualResponseAll>());
        // Setup other mocks but don't override the PontoVirtuals service mock
        _mockOperadorReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.OperadorResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockPontoVirtualService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterPontoVirtual>(), It.IsAny<string>())).ReturnsAsync(new List<PontoVirtualResponseAll>());
        // Setup other mocks but don't override the PontoVirtuals service mock
        _mockOperadorReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.OperadorResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var pontovirtual = new Models.PontoVirtual
        {
            Id = 1,
            HoraEntrada = "27/05/2022",
            HoraSaida = "27/05/2022",
            Operador = 1,
            Key = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(pontovirtual, _mockPontoVirtualService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockPontoVirtualService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region Foreign Key Validation Tests - Operador
    [Fact]
    public async Task ValidateReg_WithInvalidOperador_ShouldThrowSGValidationException()
    {
        // Arrange
        var pontovirtual = CreateValidPontoVirtual();
        pontovirtual.Operador = 999;
        _mockOperadorReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.OperadorResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(pontovirtual, _mockPontoVirtualService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedOperadorId_ShouldThrowSGValidationException()
    {
        // Arrange
        var pontovirtual = CreateValidPontoVirtual();
        pontovirtual.Operador = 999;
        var reg888 = new Models.Response.OperadorResponse
        {
            Id = 888
        }; // Different ID
        _mockOperadorReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(pontovirtual, _mockPontoVirtualService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidOperador_ShouldPass()
    {
        // Arrange
        var pontovirtual = CreateValidPontoVirtual();
        pontovirtual.Operador = 123;
        var reg123 = new Models.Response.OperadorResponse
        {
            Id = 123
        };
        _mockOperadorReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(pontovirtual, _mockPontoVirtualService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}