// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBBensMateriais - Nome da classe (ex: DBClientes)
/// BensMateriais - Nome da tabela (ex: Clientes)
/// bmt - Prefixo dos campos (ex: cli)
/// bmtCodigo - Nome do campo código (ex: cliCodigo)
/// bmtNome - Nome do campo nome (ex: cliNome)
/// DBBensMateriais.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBBensMateriaisTests : IDisposable
{
    private readonly DBBensMateriais _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBBensMateriaisTests()
    {
        _instance = new DBBensMateriais();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("bmtCodigo", typeof(int));
        dt.Columns.Add("bmtQuemCad", typeof(int));
        dt.Columns.Add("bmtDtCad", typeof(DateTime));
        dt.Columns.Add("bmtQuemAtu", typeof(int));
        dt.Columns.Add("bmtDtAtu", typeof(DateTime));
        dt.Columns.Add("bmtVisto", typeof(bool));
        dt.Columns.Add("bmtNome", typeof(string));
        dt.Columns.Add("bmtBensClassificacao", typeof(int));
        dt.Columns.Add("bmtDataCompra", typeof(DateTime));
        dt.Columns.Add("bmtDataFimDaGarantia", typeof(DateTime));
        dt.Columns.Add("bmtNFNRO", typeof(string));
        dt.Columns.Add("bmtFornecedor", typeof(int));
        dt.Columns.Add("bmtValorBem", typeof(decimal));
        dt.Columns.Add("bmtNroSerieProduto", typeof(string));
        dt.Columns.Add("bmtComprador", typeof(string));
        dt.Columns.Add("bmtCidade", typeof(int));
        dt.Columns.Add("bmtGarantiaLoja", typeof(string));
        dt.Columns.Add("bmtDataTerminoDaGarantiaDaLoja", typeof(DateTime));
        dt.Columns.Add("bmtObservacoes", typeof(string));
        dt.Columns.Add("bmtNomeVendedor", typeof(string));
        dt.Columns.Add("bmtGUID", typeof(string));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("BensMateriais", DBBensMateriais.PTabelaNome);
        Assert.Equal(" BensMateriais.* ", DBBensMateriais.CamposSqlX);
        Assert.Equal("bmtCodigo", DBBensMateriais.CampoCodigo);
        Assert.Equal("bmtNome", DBBensMateriais.CampoNome);
        Assert.Equal("bmt", DBBensMateriais.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBBensMateriais();
        Assert.Equal(0, instance.ID);
        Assert.Equal("BensMateriais", instance.ITabelaName());
        Assert.Equal("bmt", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBBensMateriais((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBBensMateriais((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["bmtCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBBensMateriais(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("BensMateriais", cadastro.ITabelaName());
        Assert.Equal("bmtCodigo", cadastro.ICampoCodigo());
        Assert.Equal("bmtNome", cadastro.ICampoNome());
        Assert.Equal("bmt", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBBensMateriais.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBBensMateriais.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBBensMateriais.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBBensMateriais();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBBensMateriais();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnTrue()
    {
        Assert.True(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Nome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNome = input;
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void Nome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FNome = longString;
        Assert.True(_instance.FNome.Length <= 80);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void BensClassificacao_ShouldAcceptIntegerValues(int value)
    {
        _instance.FBensClassificacao = value;
        Assert.Equal(value, _instance.FBensClassificacao);
    }

    [Fact]
    public void BensClassificacao_DefaultValue_ShouldBeZero()
    {
        var instance = new DBBensMateriais();
        Assert.Equal(0, instance.FBensClassificacao);
    }

    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void DataCompra_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FDataCompra = dateString;
        Assert.Equal(dateString, _instance.FDataCompra);
    }

    [Fact]
    public void DataCompra_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBBensMateriais();
        Assert.Equal(string.Empty, instance.FDataCompra);
    }

    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void DataFimDaGarantia_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FDataFimDaGarantia = dateString;
        Assert.Equal(dateString, _instance.FDataFimDaGarantia);
    }

    [Fact]
    public void DataFimDaGarantia_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBBensMateriais();
        Assert.Equal(string.Empty, instance.FDataFimDaGarantia);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void NFNRO_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNFNRO = input;
        Assert.Equal(expected, _instance.FNFNRO);
    }

    [Fact]
    public void NFNRO_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 255 + 10);
        _instance.FNFNRO = longString;
        Assert.True(_instance.FNFNRO.Length <= 255);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Fornecedor_ShouldAcceptIntegerValues(int value)
    {
        _instance.FFornecedor = value;
        Assert.Equal(value, _instance.FFornecedor);
    }

    [Fact]
    public void Fornecedor_DefaultValue_ShouldBeZero()
    {
        var instance = new DBBensMateriais();
        Assert.Equal(0, instance.FFornecedor);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void NroSerieProduto_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNroSerieProduto = input;
        Assert.Equal(expected, _instance.FNroSerieProduto);
    }

    [Fact]
    public void NroSerieProduto_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FNroSerieProduto = longString;
        Assert.True(_instance.FNroSerieProduto.Length <= 100);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Comprador_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FComprador = input;
        Assert.Equal(expected, _instance.FComprador);
    }

    [Fact]
    public void Comprador_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FComprador = longString;
        Assert.True(_instance.FComprador.Length <= 100);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cidade_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCidade = value;
        Assert.Equal(value, _instance.FCidade);
    }

    [Fact]
    public void Cidade_DefaultValue_ShouldBeZero()
    {
        var instance = new DBBensMateriais();
        Assert.Equal(0, instance.FCidade);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void GarantiaLoja_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FGarantiaLoja = value;
        Assert.Equal(value, _instance.FGarantiaLoja);
    }

    [Fact]
    public void GarantiaLoja_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBBensMateriais();
        Assert.False(instance.FGarantiaLoja);
    }

    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void DataTerminoDaGarantiaDaLoja_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FDataTerminoDaGarantiaDaLoja = dateString;
        Assert.Equal(dateString, _instance.FDataTerminoDaGarantiaDaLoja);
    }

    [Fact]
    public void DataTerminoDaGarantiaDaLoja_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBBensMateriais();
        Assert.Equal(string.Empty, instance.FDataTerminoDaGarantiaDaLoja);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Observacoes_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FObservacoes = input;
        Assert.Equal(expected, _instance.FObservacoes);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void NomeVendedor_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNomeVendedor = input;
        Assert.Equal(expected, _instance.FNomeVendedor);
    }

    [Fact]
    public void NomeVendedor_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 255 + 10);
        _instance.FNomeVendedor = longString;
        Assert.True(_instance.FNomeVendedor.Length <= 255);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void GUID_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FGUID = input;
        Assert.Equal(expected, _instance.FGUID);
    }

    [Fact]
    public void GUID_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FGUID = longString;
        Assert.True(_instance.FGUID.Length <= 100);
    }

    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}