// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class GUTAtividadesService
{
    private (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterGUTAtividades filtro)
    {
        var parameters = new List<SqlParameter>();
        if (!string.IsNullOrEmpty(filtro.Nome))
        {
            parameters.Add(new($"@{nameof(DBGUTAtividadesDicInfo.Nome)}", ApplyWildCard(filtro.WildcardChar, filtro.Nome)));
        }

        if (!string.IsNullOrEmpty(filtro.Observacao))
        {
            parameters.Add(new($"@{nameof(DBGUTAtividadesDicInfo.Observacao)}", ApplyWildCard(filtro.WildcardChar, filtro.Observacao)));
        }

        if (filtro.GUTGrupo != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBGUTAtividadesDicInfo.GUTGrupo)}", filtro.GUTGrupo));
        }

        if (filtro.GUTGrupo_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBGUTAtividadesDicInfo.GUTGrupo)}_end", filtro.GUTGrupo_end));
        }

        if (filtro.GUTPeriodicidade != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBGUTAtividadesDicInfo.GUTPeriodicidade)}", filtro.GUTPeriodicidade));
        }

        if (filtro.Operador != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBGUTAtividadesDicInfo.Operador)}", filtro.Operador));
        }

        if (filtro.Concluido != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBGUTAtividadesDicInfo.Concluido)}", filtro.Concluido));
        }

        if (!filtro.DataConcluido.IsEmptyDX())
        {
            if (DateTime.TryParse(filtro.DataConcluido, out var dataParam))
                parameters.Add(new($"@{nameof(DBGUTAtividadesDicInfo.DataConcluido)}", dataParam));
        }

        if (!filtro.DataConcluido_end.IsEmptyDX())
        {
            if (DateTime.TryParse(filtro.DataConcluido_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBGUTAtividadesDicInfo.DataConcluido)}_end", dataParam));
        }

        if (filtro.DiasParaIniciar != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBGUTAtividadesDicInfo.DiasParaIniciar)}", filtro.DiasParaIniciar));
        }

        if (filtro.DiasParaIniciar_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBGUTAtividadesDicInfo.DiasParaIniciar)}_end", filtro.DiasParaIniciar_end));
        }

        if (filtro.MinutosParaRealizar != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBGUTAtividadesDicInfo.MinutosParaRealizar)}", filtro.MinutosParaRealizar));
        }

        if (filtro.MinutosParaRealizar_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBGUTAtividadesDicInfo.MinutosParaRealizar)}_end", filtro.MinutosParaRealizar_end));
        }

        if (!string.IsNullOrEmpty(filtro.GUID))
        {
            parameters.Add(new($"@{nameof(DBGUTAtividadesDicInfo.GUID)}", ApplyWildCard(filtro.WildcardChar, filtro.GUID)));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBGUTAtividadesDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
        }

        if (filtro.Codigo_filtro_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBGUTAtividadesDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
        }

        if (filtro.LogicalOperator.IsEmptyX() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        cWhere.Append(filtro.Nome.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].[{DBGUTAtividadesDicInfo.Nome}]  {DevourerConsts.MsiCollate} like @{nameof(DBGUTAtividadesDicInfo.Nome)}");
        cWhere.Append(filtro.Observacao.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].[{DBGUTAtividadesDicInfo.Observacao}]  {DevourerConsts.MsiCollate} like @{nameof(DBGUTAtividadesDicInfo.Observacao)}");
        if (!(filtro.GUTGrupo.IsEmptyX()) && filtro.GUTGrupo_end.IsEmptyX())
        {
            cWhere.Append(filtro.GUTGrupo.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].[{DBGUTAtividadesDicInfo.GUTGrupo}] = @{nameof(DBGUTAtividadesDicInfo.GUTGrupo)}");
        }
        else if (!(filtro.GUTGrupo.IsEmptyX()) && !(filtro.GUTGrupo_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].{DBGUTAtividadesDicInfo.GUTGrupo} BETWEEN @{nameof(DBGUTAtividadesDicInfo.GUTGrupo)} AND @{nameof(DBGUTAtividadesDicInfo.GUTGrupo)}_end");
        }

        cWhere.Append(filtro.GUTPeriodicidade.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].[{DBGUTAtividadesDicInfo.GUTPeriodicidade}] = @{nameof(DBGUTAtividadesDicInfo.GUTPeriodicidade)}");
        cWhere.Append(filtro.Operador.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].[{DBGUTAtividadesDicInfo.Operador}] = @{nameof(DBGUTAtividadesDicInfo.Operador)}");
        cWhere.Append(filtro.Concluido == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].[{DBGUTAtividadesDicInfo.Concluido}] = @{nameof(DBGUTAtividadesDicInfo.Concluido)}");
        if (!(filtro.DataConcluido.IsEmptyDX()) && filtro.DataConcluido_end.IsEmptyDX())
        {
            cWhere.Append(filtro.DataConcluido.IsEmptyDX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBGUTAtividadesDicInfo.PTabelaNome}].[{DBGUTAtividadesDicInfo.DataConcluido}], 103) = CONVERT(DATE, @{nameof(DBGUTAtividadesDicInfo.DataConcluido)}, 103)");
        }
        else if (!(filtro.DataConcluido.IsEmptyDX()) && !(filtro.DataConcluido_end.IsEmptyDX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].{DBGUTAtividadesDicInfo.DataConcluido} BETWEEN @{nameof(DBGUTAtividadesDicInfo.DataConcluido)} AND @{nameof(DBGUTAtividadesDicInfo.DataConcluido)}_end");
        }

        if (!(filtro.DiasParaIniciar.IsEmptyX()) && filtro.DiasParaIniciar_end.IsEmptyX())
        {
            cWhere.Append(filtro.DiasParaIniciar.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].[{DBGUTAtividadesDicInfo.DiasParaIniciar}] = @{nameof(DBGUTAtividadesDicInfo.DiasParaIniciar)}");
        }
        else if (!(filtro.DiasParaIniciar.IsEmptyX()) && !(filtro.DiasParaIniciar_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].{DBGUTAtividadesDicInfo.DiasParaIniciar} BETWEEN @{nameof(DBGUTAtividadesDicInfo.DiasParaIniciar)} AND @{nameof(DBGUTAtividadesDicInfo.DiasParaIniciar)}_end");
        }

        if (!(filtro.MinutosParaRealizar.IsEmptyX()) && filtro.MinutosParaRealizar_end.IsEmptyX())
        {
            cWhere.Append(filtro.MinutosParaRealizar.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].[{DBGUTAtividadesDicInfo.MinutosParaRealizar}] = @{nameof(DBGUTAtividadesDicInfo.MinutosParaRealizar)}");
        }
        else if (!(filtro.MinutosParaRealizar.IsEmptyX()) && !(filtro.MinutosParaRealizar_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].{DBGUTAtividadesDicInfo.MinutosParaRealizar} BETWEEN @{nameof(DBGUTAtividadesDicInfo.MinutosParaRealizar)} AND @{nameof(DBGUTAtividadesDicInfo.MinutosParaRealizar)}_end");
        }

        cWhere.Append(filtro.GUID.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].[{DBGUTAtividadesDicInfo.GUID}]  {DevourerConsts.MsiCollate} like @{nameof(DBGUTAtividadesDicInfo.GUID)}");
        if (!(filtro.Codigo_filtro.IsEmptyX()) && filtro.Codigo_filtro_end.IsEmptyX())
        {
            cWhere.Append(filtro.Codigo_filtro.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].[{DBGUTAtividadesDicInfo.CampoCodigo}] = @{nameof(DBGUTAtividadesDicInfo.CampoCodigo)}");
        }
        else if (!(filtro.Codigo_filtro.IsEmptyX()) && !(filtro.Codigo_filtro_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].{DBGUTAtividadesDicInfo.CampoCodigo} BETWEEN @{nameof(DBGUTAtividadesDicInfo.CampoCodigo)} AND @{nameof(DBGUTAtividadesDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private string ApplyWildCard(char wildcardChar, string value)
    {
        if (wildcardChar == '\0' || wildcardChar == ' ')
        {
            return value;
        }

        var result = $"{wildcardChar}{value.Replace(" ", wildcardChar.ToString())}{wildcardChar}";
        return result;
    }

    private string GetFilterHash(Filters.FilterGUTAtividades? filtro)
    {
        if (filtro == null)
            return string.Empty;
        var json = JsonSerializer.Serialize(filtro);
        using var sha256 = SHA256.Create();
        var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(json));
        return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
    }

    public async Task<IEnumerable<NomeID>> GetListN([FromQuery] int max, [FromBody] Filters.FilterGUTAtividades? filtro, [FromRoute, Required] string uri, CancellationToken token)
    {
        // Tracking: 20250606-0
        ThrowIfDisposed();
        var filtroResult = filtro == null ? null : WFiltro(filtro!);
        string where = filtroResult?.where ?? string.Empty;
        List<SqlParameter> parameters = filtroResult?.parametros ?? [];
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new Exception($"Coneão nula.");
        }

        var keyCache = await reader.ReadStringAuditor(max, uri, "", [], oCnn);
        var cacheKey = $"{uri}-GUTAtividades-{max}-{where.GetHashCode()}-GetListN-{keyCache}";
        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId)
        };
        return await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataListNAsync(max, uri, where, parameters, cancel), entryOptions, cancellationToken: token) ?? [];
    }

    private async Task<IEnumerable<NomeID>> GetDataListNAsync(int max, string uri, string where, List<SqlParameter> parameters, CancellationToken token)
    {
        var result = new List<NomeID>(max);
        var lista = await reader.ListarN(max, uri, where, parameters, DBGUTAtividadesDicInfo.CampoNome);
        foreach (var item in lista)
        {
            if (token.IsCancellationRequested)
                break;
            if (item?.FNome != null)
            {
                result.Add(new NomeID { Nome = item.FNome, ID = item.ID });
            }
        }

        return result;
    }

    private async Task<IEnumerable<GUTAtividadesResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}