// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Readers;
public partial class ReuniaoReader(IFReuniaoFactory reuniaoFactory) : IReuniaoReader
{
    private readonly IFReuniaoFactory _reuniaoFactory = reuniaoFactory ?? throw new ArgumentNullException();
    public async Task<IEnumerable<DBNomeID>> ListarN(int max, string uri, string cWhere, List<SqlParameter>? parameters, string order) => await DevourerSqlData.ListarNomeID(BuildSqlQuery("renCodigo, renData", cWhere, order, max), parameters, uri, caching: false, max: max);
    public async Task<IEnumerable<ReuniaoResponseAll>> Listar(int max, string uri, string cWhere, List<SqlParameter>? parameters, string order, CancellationToken cancellationToken) => await ListarTabela(BuildSqlQuery(DBReuniao.CamposSqlX, cWhere, order, max), parameters, uri, caching: false, max: max, cancellationToken: cancellationToken);
    private async Task<IEnumerable<ReuniaoResponseAll>> ListarTabela(string sql, List<SqlParameter>? parameters, string uri, bool caching = false, int max = 200, CancellationToken cancellationToken = default)
    {
        var result = new List<ReuniaoResponseAll>(max);
        await using var connection = Configuracoes.GetConnectionByUri(uri);
        await using var cmd = new SqlCommand(cmdText: ConfiguracoesDBT.CmdSql(sql), connection: connection?.InnerConnection)
        {
            CommandTimeout = 30
        };
        foreach (var param in parameters)
        {
            if (!cmd.Parameters.Contains(param.ParameterName))
            {
                var newParam = new SqlParameter(param.ParameterName, param.Value)
                {
                    SqlDbType = param.SqlDbType,
                    Direction = param.Direction,
                    Size = param.Size,
                    Precision = param.Precision,
                    Scale = param.Scale
                };
                cmd.Parameters.Add(newParam);
            }
        }

        await using var reader = await cmd.ExecuteReaderAsync(CommandBehavior.SingleResult);
        while (await reader.ReadAsync())
        {
            if (cancellationToken.IsCancellationRequested)
                return result;
            result.Add(ReadAll(_reuniaoFactory.CreateFromReader(reader), reader)!);
        }

        return result;
    }

    public async Task<ReuniaoResponse?> Read(int id, MsiSqlConnection? oCnn)
    {
        using var dbRec = await _reuniaoFactory.CreateFromIdAsync(id, oCnn);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public async Task<Models.Reuniao?> ReadM(int id, MsiSqlConnection? oCnn)
    {
        using var dbRec = await _reuniaoFactory.CreateFromIdAsync(id, oCnn);
        var reuniao = new Models.Reuniao
        {
            Id = dbRec.ID,
            Cliente = dbRec.FCliente,
            IDAgenda = dbRec.FIDAgenda,
            Data = dbRec.FData ?? string.Empty,
            Pauta = dbRec.FPauta ?? string.Empty,
            ATA = dbRec.FATA ?? string.Empty,
            HoraFinal = dbRec.FHoraFinal ?? string.Empty,
            Externa = dbRec.FExterna,
            PrincipaisDecisoes = dbRec.FPrincipaisDecisoes ?? string.Empty,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FHoraInicial, out DateTime XHoraInicial))
        {
            reuniao.HoraInicial = dbRec.FHoraInicial;
            reuniao.HoraInicial_date = XHoraInicial;
        }

        if (DateTime.TryParse(dbRec.FHoraSaida, out DateTime XHoraSaida))
        {
            reuniao.HoraSaida = dbRec.FHoraSaida;
            reuniao.HoraSaida_date = XHoraSaida;
        }

        if (DateTime.TryParse(dbRec.FHoraRetorno, out DateTime XHoraRetorno))
        {
            reuniao.HoraRetorno = dbRec.FHoraRetorno;
            reuniao.HoraRetorno_date = XHoraRetorno;
        }

        return reuniao;
    }

    public ReuniaoResponse? Read(FReuniao dbRec, MsiSqlConnection? oCnn)
    {
        return Read(dbRec);
    }

    public ReuniaoResponse? Read(string where, List<SqlParameter>? parameters, MsiSqlConnection? oCnn)
    {
        using var dbRec = _reuniaoFactory.CreateFromParameters(parameters, oCnn, sqlWhere: where);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public ReuniaoResponse? Read(FReuniao dbRec) // Track 001.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var reuniao = new ReuniaoResponse
        {
            Id = dbRec.ID,
            Cliente = dbRec.FCliente,
            IDAgenda = dbRec.FIDAgenda,
            Data = dbRec.FData ?? string.Empty,
            Pauta = dbRec.FPauta ?? string.Empty,
            ATA = dbRec.FATA ?? string.Empty,
            HoraFinal = dbRec.FHoraFinal ?? string.Empty,
            Externa = dbRec.FExterna,
            PrincipaisDecisoes = dbRec.FPrincipaisDecisoes ?? string.Empty,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FHoraInicial, out DateTime XHoraInicial))
        {
            reuniao.HoraInicial = dbRec.FHoraInicial;
            reuniao.HoraInicial_date = XHoraInicial;
        }

        if (DateTime.TryParse(dbRec.FHoraSaida, out DateTime XHoraSaida))
        {
            reuniao.HoraSaida = dbRec.FHoraSaida;
            reuniao.HoraSaida_date = XHoraSaida;
        }

        if (DateTime.TryParse(dbRec.FHoraRetorno, out DateTime XHoraRetorno))
        {
            reuniao.HoraRetorno = dbRec.FHoraRetorno;
            reuniao.HoraRetorno_date = XHoraRetorno;
        }

        return reuniao;
    }

    public ReuniaoResponse? Read(SG.GerAdv.DBReuniao dbRec) // Track 002.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var reuniao = new ReuniaoResponse
        {
            Id = dbRec.ID,
            Cliente = dbRec.FCliente,
            IDAgenda = dbRec.FIDAgenda,
            Data = dbRec.FData ?? string.Empty,
            Pauta = dbRec.FPauta ?? string.Empty,
            ATA = dbRec.FATA ?? string.Empty,
            HoraFinal = dbRec.FHoraFinal ?? string.Empty,
            Externa = dbRec.FExterna,
            PrincipaisDecisoes = dbRec.FPrincipaisDecisoes ?? string.Empty,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FHoraInicial, out DateTime XHoraInicial))
        {
            reuniao.HoraInicial = dbRec.FHoraInicial;
            reuniao.HoraInicial_date = XHoraInicial;
        }

        if (DateTime.TryParse(dbRec.FHoraSaida, out DateTime XHoraSaida))
        {
            reuniao.HoraSaida = dbRec.FHoraSaida;
            reuniao.HoraSaida_date = XHoraSaida;
        }

        if (DateTime.TryParse(dbRec.FHoraRetorno, out DateTime XHoraRetorno))
        {
            reuniao.HoraRetorno = dbRec.FHoraRetorno;
            reuniao.HoraRetorno_date = XHoraRetorno;
        }

        return reuniao;
    }

    public ReuniaoResponseAll? ReadAll(FReuniao dbRec, IDataRecord dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var reuniao = new ReuniaoResponseAll
        {
            Id = dbRec.ID,
            Cliente = dbRec.FCliente,
            IDAgenda = dbRec.FIDAgenda,
            Data = dbRec.FData ?? string.Empty,
            Pauta = dbRec.FPauta ?? string.Empty,
            ATA = dbRec.FATA ?? string.Empty,
            HoraFinal = dbRec.FHoraFinal ?? string.Empty,
            Externa = dbRec.FExterna,
            PrincipaisDecisoes = dbRec.FPrincipaisDecisoes ?? string.Empty,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FHoraInicial, out DateTime XHoraInicial))
        {
            reuniao.HoraInicial = dbRec.FHoraInicial;
            reuniao.HoraInicial_date = XHoraInicial;
        }

        if (DateTime.TryParse(dbRec.FHoraSaida, out DateTime XHoraSaida))
        {
            reuniao.HoraSaida = dbRec.FHoraSaida;
            reuniao.HoraSaida_date = XHoraSaida;
        }

        if (DateTime.TryParse(dbRec.FHoraRetorno, out DateTime XHoraRetorno))
        {
            reuniao.HoraRetorno = dbRec.FHoraRetorno;
            reuniao.HoraRetorno_date = XHoraRetorno;
        }

        try
        {
            reuniao.NomeClientes = dr[DBClientesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return reuniao;
    }

    public ReuniaoResponseAll? ReadAll(SG.GerAdv.DBReuniao dbRec, DataRow dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var reuniao = new ReuniaoResponseAll
        {
            Id = dbRec.ID,
            Cliente = dbRec.FCliente,
            IDAgenda = dbRec.FIDAgenda,
            Data = dbRec.FData ?? string.Empty,
            Pauta = dbRec.FPauta ?? string.Empty,
            ATA = dbRec.FATA ?? string.Empty,
            HoraFinal = dbRec.FHoraFinal ?? string.Empty,
            Externa = dbRec.FExterna,
            PrincipaisDecisoes = dbRec.FPrincipaisDecisoes ?? string.Empty,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FHoraInicial, out DateTime XHoraInicial))
        {
            reuniao.HoraInicial = dbRec.FHoraInicial;
            reuniao.HoraInicial_date = XHoraInicial;
        }

        if (DateTime.TryParse(dbRec.FHoraSaida, out DateTime XHoraSaida))
        {
            reuniao.HoraSaida = dbRec.FHoraSaida;
            reuniao.HoraSaida_date = XHoraSaida;
        }

        if (DateTime.TryParse(dbRec.FHoraRetorno, out DateTime XHoraRetorno))
        {
            reuniao.HoraRetorno = dbRec.FHoraRetorno;
            reuniao.HoraRetorno_date = XHoraRetorno;
        }

        try
        {
            reuniao.NomeClientes = dr[DBClientesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return reuniao;
    }
}