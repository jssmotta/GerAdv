// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class ContratosValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFContratosFactory> _mockContratosFactory;
    private readonly Mock<IContratosReader> _mockReader;
    private readonly ContratosValidation _validation;
    private readonly Mock<IContratosService> _mockContratosService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IClientesReader> _mockClientesReader;
    private readonly Mock<IAdvogadosReader> _mockAdvogadosReader;
    private readonly ContratosService _service;
    private readonly string _validUri = "test-uri";
    public ContratosValidationTests()
    {
        _mockContratosFactory = new Mock<IFContratosFactory>();
        _mockReader = new Mock<IContratosReader>();
        _validation = new ContratosValidation();
        _mockContratosService = new Mock<IContratosService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockClientesReader = new Mock<IClientesReader>();
        _mockAdvogadosReader = new Mock<IAdvogadosReader>();
    }

#region Class Structure Tests
    [Fact]
    public void ContratosValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IContratosValidation>();
    }

    [Fact]
    public void ContratosValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(ContratosValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void ContratosValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(ContratosValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.Contratos CreateValidContratos()
    {
        return new Models.Contratos
        {
            Id = 1,
            Processo = 0,
            Cliente = 0,
            Advogado = 0,
            Dia = 0,
            Valor = 1m,
            DataInicio = "24/04/1975",
            DataTermino = "24/04/1975",
            OcultarRelatorio = false,
            PercEscritorio = 1m,
            ValorConsultoria = 1m,
            TipoCobranca = 0,
            Protestar = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Juros = "AAA",
            ValorRealizavel = 1m,
            DOCUMENTO = "AAAAAAAAAAAAA",
            EMail1 = "test@email.com",
            EMail2 = "test@email.com",
            EMail3 = "test@email.com",
            Pessoa1 = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Pessoa2 = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Pessoa3 = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            OBS = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            ClienteContrato = 0,
            IdExtrangeiro = 0,
            ChaveContrato = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Avulso = true,
            Suspenso = false,
            Multa = "AAAAAAAA"
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockContratosService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterContratos>(), It.IsAny<string>())).ReturnsAsync(new List<ContratosResponseAll>());
        // Setup other mocks but don't override the Contratoss service mock
        _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.ClientesResponse { Id = id }));
        _mockAdvogadosReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.AdvogadosResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockContratosService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterContratos>(), It.IsAny<string>())).ReturnsAsync(new List<ContratosResponseAll>());
        // Setup other mocks but don't override the Contratoss service mock
        _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.ClientesResponse { Id = 0 }));
        _mockAdvogadosReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.AdvogadosResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var contratos = new Models.Contratos
        {
            Id = 1,
            DataInicio = null,
            DataTermino = null,
            OcultarRelatorio = false,
            Protestar = null,
            Juros = null,
            DOCUMENTO = null,
            EMail1 = null,
            EMail2 = null,
            EMail3 = null,
            Pessoa1 = null,
            Pessoa2 = null,
            Pessoa3 = null,
            OBS = null,
            ChaveContrato = null,
            Multa = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(contratos, _mockContratosService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockContratosService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region Foreign Key Validation Tests - Clientes
    [Fact]
    public async Task ValidateReg_WithInvalidClientes_ShouldThrowSGValidationException()
    {
        // Arrange
        var contratos = CreateValidContratos();
        contratos.Cliente = 999;
        _mockClientesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.ClientesResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(contratos, _mockContratosService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedClientesId_ShouldThrowSGValidationException()
    {
        // Arrange
        var contratos = CreateValidContratos();
        contratos.Cliente = 999;
        var reg888 = new Models.Response.ClientesResponse
        {
            Id = 888
        }; // Different ID
        _mockClientesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(contratos, _mockContratosService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidClientes_ShouldPass()
    {
        // Arrange
        var contratos = CreateValidContratos();
        contratos.Cliente = 123;
        var reg123 = new Models.Response.ClientesResponse
        {
            Id = 123
        };
        _mockClientesReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(contratos, _mockContratosService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyClientes_ShouldPass()
    {
        // Arrange
        var contratos = CreateValidContratos();
        contratos.Cliente = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(contratos, _mockContratosService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockClientesReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - Advogados
    [Fact]
    public async Task ValidateReg_WithInvalidAdvogados_ShouldThrowSGValidationException()
    {
        // Arrange
        var contratos = CreateValidContratos();
        contratos.Advogado = 999;
        _mockAdvogadosReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.AdvogadosResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(contratos, _mockContratosService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedAdvogadosId_ShouldThrowSGValidationException()
    {
        // Arrange
        var contratos = CreateValidContratos();
        contratos.Advogado = 999;
        var reg888 = new Models.Response.AdvogadosResponse
        {
            Id = 888
        }; // Different ID
        _mockAdvogadosReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(contratos, _mockContratosService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidAdvogados_ShouldPass()
    {
        // Arrange
        var contratos = CreateValidContratos();
        contratos.Advogado = 123;
        var reg123 = new Models.Response.AdvogadosResponse
        {
            Id = 123
        };
        _mockAdvogadosReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(contratos, _mockContratosService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyAdvogados_ShouldPass()
    {
        // Arrange
        var contratos = CreateValidContratos();
        contratos.Advogado = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(contratos, _mockContratosService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockAdvogadosReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}