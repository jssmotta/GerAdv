// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class ContratosWriterTests
{
    private readonly Mock<IFContratosFactory> _mockContratosFactory;
    private readonly Mock<FContratos> _mockFContratos;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly ContratosWriter _contratosWriter;
    public ContratosWriterTests()
    {
        _mockContratosFactory = new Mock<IFContratosFactory>();
        _mockFContratos = new Mock<FContratos>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _contratosWriter = new ContratosWriter(_mockContratosFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var contratos = CreateValidContratosModel();
        contratos.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockContratosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFContratos.Object);
        _mockFContratos.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _contratosWriter.WriteAsync(contratos, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFContratos.Object);
        _mockContratosFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockContratosFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFContratos.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var contratos = CreateValidContratosModel();
        contratos.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockContratosFactory.Setup(x => x.CreateFromIdAsync(contratos.Id, _mockConnection.Object)).ReturnsAsync(_mockFContratos.Object);
        _mockFContratos.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _contratosWriter.WriteAsync(contratos, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFContratos.Object);
        _mockContratosFactory.Verify(x => x.CreateFromIdAsync(contratos.Id, _mockConnection.Object), Times.Once);
        _mockContratosFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFContratos.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var contratos = CreateValidContratosModel();
        var auditorQuem = 99;
        _mockContratosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFContratos.Object);
        _mockFContratos.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _contratosWriter.WriteAsync(contratos, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFContratos.Object);
        _mockFContratos.VerifySet(x => x.FProcesso = contratos.Processo, Times.Once);
        _mockFContratos.VerifySet(x => x.FCliente = contratos.Cliente, Times.Once);
        _mockFContratos.VerifySet(x => x.FAdvogado = contratos.Advogado, Times.Once);
        _mockFContratos.VerifySet(x => x.FDia = contratos.Dia, Times.Once);
        _mockFContratos.VerifySet(x => x.FValor = contratos.Valor, Times.Once);
        _mockFContratos.VerifySet(x => x.FDataInicio = contratos.DataInicio.ToString(), Times.Once);
        _mockFContratos.VerifySet(x => x.FDataTermino = contratos.DataTermino.ToString(), Times.Once);
        _mockFContratos.VerifySet(x => x.FOcultarRelatorio = contratos.OcultarRelatorio, Times.Once);
        _mockFContratos.VerifySet(x => x.FPercEscritorio = contratos.PercEscritorio, Times.Once);
        _mockFContratos.VerifySet(x => x.FValorConsultoria = contratos.ValorConsultoria, Times.Once);
        _mockFContratos.VerifySet(x => x.FGUID = contratos.GUID, Times.Once);
        _mockFContratos.VerifySet(x => x.FTipoCobranca = contratos.TipoCobranca, Times.Once);
        _mockFContratos.VerifySet(x => x.FProtestar = contratos.Protestar, Times.Once);
        _mockFContratos.VerifySet(x => x.FJuros = contratos.Juros, Times.Once);
        _mockFContratos.VerifySet(x => x.FValorRealizavel = contratos.ValorRealizavel, Times.Once);
        _mockFContratos.VerifySet(x => x.FDOCUMENTO = contratos.DOCUMENTO, Times.Once);
        _mockFContratos.VerifySet(x => x.FEMail1 = contratos.EMail1, Times.Once);
        _mockFContratos.VerifySet(x => x.FEMail2 = contratos.EMail2, Times.Once);
        _mockFContratos.VerifySet(x => x.FEMail3 = contratos.EMail3, Times.Once);
        _mockFContratos.VerifySet(x => x.FPessoa1 = contratos.Pessoa1, Times.Once);
        _mockFContratos.VerifySet(x => x.FPessoa2 = contratos.Pessoa2, Times.Once);
        _mockFContratos.VerifySet(x => x.FPessoa3 = contratos.Pessoa3, Times.Once);
        _mockFContratos.VerifySet(x => x.FOBS = contratos.OBS, Times.Once);
        _mockFContratos.VerifySet(x => x.FClienteContrato = contratos.ClienteContrato, Times.Once);
        _mockFContratos.VerifySet(x => x.FIdExtrangeiro = contratos.IdExtrangeiro, Times.Once);
        _mockFContratos.VerifySet(x => x.FChaveContrato = contratos.ChaveContrato, Times.Once);
        _mockFContratos.VerifySet(x => x.FAvulso = contratos.Avulso, Times.Once);
        _mockFContratos.VerifySet(x => x.FSuspenso = contratos.Suspenso, Times.Once);
        _mockFContratos.VerifySet(x => x.FMulta = contratos.Multa, Times.Once);
        _mockFContratos.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithNullDataInicio_ShouldNotSetFDataInicio()
    {
        // Arrange
        var contratos = CreateValidContratosModel();
        contratos.DataInicio = null;
        var auditorQuem = 123;
        _mockContratosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFContratos.Object);
        _mockFContratos.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _contratosWriter.WriteAsync(contratos, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFContratos.VerifySet(x => x.FDataInicio = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WithNullDataTermino_ShouldNotSetFDataTermino()
    {
        // Arrange
        var contratos = CreateValidContratosModel();
        contratos.DataTermino = null;
        var auditorQuem = 123;
        _mockContratosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFContratos.Object);
        _mockFContratos.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _contratosWriter.WriteAsync(contratos, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFContratos.VerifySet(x => x.FDataTermino = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var contratos = CreateValidContratosModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockContratosFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _contratosWriter.WriteAsync(contratos, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var contratos = CreateValidContratosModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockContratosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFContratos.Object);
        _mockFContratos.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _contratosWriter.WriteAsync(contratos, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var contratosResponse = new ContratosResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockContratosFactory.Setup(x => x.DeleteAsync(operadorId, contratosResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _contratosWriter.Delete(contratosResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockContratosFactory.Verify(x => x.DeleteAsync(operadorId, contratosResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var contratosResponse = new ContratosResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockContratosFactory.Setup(x => x.DeleteAsync(operadorId, contratosResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _contratosWriter.Delete(contratosResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var contratosResponse = new ContratosResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockContratosFactory.Setup(x => x.DeleteAsync(operadorId, contratosResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _contratosWriter.Delete(contratosResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new ContratosWriter(_mockContratosFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new ContratosWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.Contratos CreateValidContratosModel()
    {
        return new Models.Contratos
        {
            Id = 0,
            Processo = 1,
            Cliente = 1,
            Advogado = 1,
            Dia = 1,
            Valor = 0m,
            DataInicio = "24/04/1975",
            DataTermino = "24/04/1975",
            OcultarRelatorio = false,
            PercEscritorio = 0m,
            ValorConsultoria = 0m,
            GUID = Guid.NewGuid().ToString(),
            TipoCobranca = 1,
            Protestar = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Juros = "AAA",
            ValorRealizavel = 0m,
            DOCUMENTO = "AAAAAAAAAAAAA",
            EMail1 = "test@email.com",
            EMail2 = "test@email.com",
            EMail3 = "test@email.com",
            Pessoa1 = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Pessoa2 = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Pessoa3 = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            OBS = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            ClienteContrato = 1,
            IdExtrangeiro = 1,
            ChaveContrato = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Avulso = false,
            Suspenso = false,
            Multa = "AAAAAAAA"
        };
    }
#endregion
}