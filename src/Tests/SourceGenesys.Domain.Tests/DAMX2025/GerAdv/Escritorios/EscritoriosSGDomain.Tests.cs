// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBEscritorios - Nome da classe (ex: DBClientes)
/// Escritorios - Nome da tabela (ex: Clientes)
/// esc - Prefixo dos campos (ex: cli)
/// escCodigo - Nome do campo código (ex: cliCodigo)
/// escNome - Nome do campo nome (ex: cliNome)
/// DBEscritorios.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBEscritoriosTests : IDisposable
{
    private readonly DBEscritorios _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBEscritoriosTests()
    {
        _instance = new DBEscritorios();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("escCodigo", typeof(int));
        dt.Columns.Add("escQuemCad", typeof(int));
        dt.Columns.Add("escDtCad", typeof(DateTime));
        dt.Columns.Add("escQuemAtu", typeof(int));
        dt.Columns.Add("escDtAtu", typeof(DateTime));
        dt.Columns.Add("escVisto", typeof(bool));
        dt.Columns.Add("escGUID", typeof(string));
        dt.Columns.Add("escCNPJ", typeof(string));
        dt.Columns.Add("escCasa", typeof(string));
        dt.Columns.Add("escParceria", typeof(string));
        dt.Columns.Add("escNome", typeof(string));
        dt.Columns.Add("escOAB", typeof(string));
        dt.Columns.Add("escEndereco", typeof(string));
        dt.Columns.Add("escCidade", typeof(int));
        dt.Columns.Add("escBairro", typeof(string));
        dt.Columns.Add("escCEP", typeof(string));
        dt.Columns.Add("escFone", typeof(string));
        dt.Columns.Add("escFax", typeof(string));
        dt.Columns.Add("escSite", typeof(string));
        dt.Columns.Add("escEMail", typeof(string));
        dt.Columns.Add("escOBS", typeof(string));
        dt.Columns.Add("escAdvResponsavel", typeof(string));
        dt.Columns.Add("escSecretaria", typeof(string));
        dt.Columns.Add("escInscEst", typeof(string));
        dt.Columns.Add("escCorrespondente", typeof(string));
        dt.Columns.Add("escTop", typeof(string));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("Escritorios", DBEscritorios.PTabelaNome);
        Assert.Equal(" Escritorios.* ", DBEscritorios.CamposSqlX);
        Assert.Equal("escCodigo", DBEscritorios.CampoCodigo);
        Assert.Equal("escNome", DBEscritorios.CampoNome);
        Assert.Equal("esc", DBEscritorios.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBEscritorios();
        Assert.Equal(0, instance.ID);
        Assert.Equal("Escritorios", instance.ITabelaName());
        Assert.Equal("esc", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBEscritorios((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBEscritorios((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["escCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBEscritorios(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("Escritorios", cadastro.ITabelaName());
        Assert.Equal("escCodigo", cadastro.ICampoCodigo());
        Assert.Equal("escNome", cadastro.ICampoNome());
        Assert.Equal("esc", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBEscritorios.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBEscritorios.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBEscritorios.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBEscritorios();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBEscritorios();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnTrue()
    {
        Assert.True(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void GUID_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FGUID = input;
        Assert.Equal(expected, _instance.FGUID);
    }

    [Fact]
    public void GUID_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FGUID = longString;
        Assert.True(_instance.FGUID.Length <= 100);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Casa_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FCasa = value;
        Assert.Equal(value, _instance.FCasa);
    }

    [Fact]
    public void Casa_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBEscritorios();
        Assert.False(instance.FCasa);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Casa_ShouldAcceptIntegerValues(int value)
{
    _instance.FCasa = value;
    Assert.Equal(value, _instance.FCasa);
}

[Fact]
public void Casa_DefaultValue_ShouldBeZero()
{
    var instance = new DBEscritorios();
    Assert.Equal(0, instance.Casa);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Casa_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FCasa = dateString;
    Assert.Equal(dateString, _instance.FCasa);
}

[Fact]
public void Casa_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBEscritorios();
    Assert.Equal(string.Empty, instance.Casa);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Casa_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FCasa = input;
        Assert.Equal(expected, _instance.FCasa);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FCasa = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Casa_ValidEmail_ShouldAccept(string email)
{
    _instance.FCasa = email;
    Assert.Equal(email, _instance.FCasa);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Casa_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FCasa = email);
}
*/
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Parceria_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FParceria = value;
        Assert.Equal(value, _instance.FParceria);
    }

    [Fact]
    public void Parceria_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBEscritorios();
        Assert.False(instance.FParceria);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Parceria_ShouldAcceptIntegerValues(int value)
{
    _instance.FParceria = value;
    Assert.Equal(value, _instance.FParceria);
}

[Fact]
public void Parceria_DefaultValue_ShouldBeZero()
{
    var instance = new DBEscritorios();
    Assert.Equal(0, instance.Parceria);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Parceria_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FParceria = dateString;
    Assert.Equal(dateString, _instance.FParceria);
}

[Fact]
public void Parceria_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBEscritorios();
    Assert.Equal(string.Empty, instance.Parceria);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Parceria_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FParceria = input;
        Assert.Equal(expected, _instance.FParceria);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FParceria = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Parceria_ValidEmail_ShouldAccept(string email)
{
    _instance.FParceria = email;
    Assert.Equal(email, _instance.FParceria);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Parceria_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FParceria = email);
}
*/
    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Nome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNome = input;
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void Nome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FNome = longString;
        Assert.True(_instance.FNome.Length <= 50);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void OAB_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FOAB = input;
        Assert.Equal(expected, _instance.FOAB);
    }

    [Fact]
    public void OAB_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 15 + 10);
        _instance.FOAB = longString;
        Assert.True(_instance.FOAB.Length <= 15);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Endereco_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FEndereco = input;
        Assert.Equal(expected, _instance.FEndereco);
    }

    [Fact]
    public void Endereco_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FEndereco = longString;
        Assert.True(_instance.FEndereco.Length <= 50);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cidade_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCidade = value;
        Assert.Equal(value, _instance.FCidade);
    }

    [Fact]
    public void Cidade_DefaultValue_ShouldBeZero()
    {
        var instance = new DBEscritorios();
        Assert.Equal(0, instance.FCidade);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Bairro_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FBairro = input;
        Assert.Equal(expected, _instance.FBairro);
    }

    [Fact]
    public void Bairro_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 30 + 10);
        _instance.FBairro = longString;
        Assert.True(_instance.FBairro.Length <= 30);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Fone_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FFone = input;
        Assert.Equal(expected, _instance.FFone);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Fax_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FFax = input;
        Assert.Equal(expected, _instance.FFax);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Site_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FSite = input;
        Assert.Equal(expected, _instance.FSite);
    }

    [Fact]
    public void Site_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 200 + 10);
        _instance.FSite = longString;
        Assert.True(_instance.FSite.Length <= 200);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void OBS_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FOBS = input;
        Assert.Equal(expected, _instance.FOBS);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void AdvResponsavel_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FAdvResponsavel = input;
        Assert.Equal(expected, _instance.FAdvResponsavel);
    }

    [Fact]
    public void AdvResponsavel_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FAdvResponsavel = longString;
        Assert.True(_instance.FAdvResponsavel.Length <= 80);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Secretaria_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FSecretaria = input;
        Assert.Equal(expected, _instance.FSecretaria);
    }

    [Fact]
    public void Secretaria_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FSecretaria = longString;
        Assert.True(_instance.FSecretaria.Length <= 80);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void InscEst_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FInscEst = input;
        Assert.Equal(expected, _instance.FInscEst);
    }

    [Fact]
    public void InscEst_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 15 + 10);
        _instance.FInscEst = longString;
        Assert.True(_instance.FInscEst.Length <= 15);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Correspondente_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FCorrespondente = value;
        Assert.Equal(value, _instance.FCorrespondente);
    }

    [Fact]
    public void Correspondente_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBEscritorios();
        Assert.False(instance.FCorrespondente);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Correspondente_ShouldAcceptIntegerValues(int value)
{
    _instance.FCorrespondente = value;
    Assert.Equal(value, _instance.FCorrespondente);
}

[Fact]
public void Correspondente_DefaultValue_ShouldBeZero()
{
    var instance = new DBEscritorios();
    Assert.Equal(0, instance.Correspondente);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Correspondente_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FCorrespondente = dateString;
    Assert.Equal(dateString, _instance.FCorrespondente);
}

[Fact]
public void Correspondente_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBEscritorios();
    Assert.Equal(string.Empty, instance.Correspondente);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Correspondente_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FCorrespondente = input;
        Assert.Equal(expected, _instance.FCorrespondente);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FCorrespondente = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Correspondente_ValidEmail_ShouldAccept(string email)
{
    _instance.FCorrespondente = email;
    Assert.Equal(email, _instance.FCorrespondente);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Correspondente_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FCorrespondente = email);
}
*/
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Top_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FTop = value;
        Assert.Equal(value, _instance.FTop);
    }

    [Fact]
    public void Top_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBEscritorios();
        Assert.False(instance.FTop);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Top_ShouldAcceptIntegerValues(int value)
{
    _instance.FTop = value;
    Assert.Equal(value, _instance.FTop);
}

[Fact]
public void Top_DefaultValue_ShouldBeZero()
{
    var instance = new DBEscritorios();
    Assert.Equal(0, instance.Top);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Top_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FTop = dateString;
    Assert.Equal(dateString, _instance.FTop);
}

[Fact]
public void Top_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBEscritorios();
    Assert.Equal(string.Empty, instance.Top);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Top_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FTop = input;
        Assert.Equal(expected, _instance.FTop);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FTop = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Top_ValidEmail_ShouldAccept(string email)
{
    _instance.FTop = email;
    Assert.Equal(email, _instance.FTop);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Top_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FTop = email);
}
*/
    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}