// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Wheres;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IContaCorrenteWhere
{
    ContaCorrenteResponse Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn);
}

public partial class ContaCorrenteWhere(IFContaCorrenteFactory contacorrenteFactory) : IContaCorrenteWhere
{
    private readonly IFContaCorrenteFactory _contacorrenteFactory = contacorrenteFactory;
    public ContaCorrenteResponse Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn)
    {
        using var dbRec = _contacorrenteFactory.CreateFromParameters(parameters, oCnn, sqlWhere: where);
        var contacorrente = new ContaCorrenteResponse
        {
            Id = dbRec.ID,
            CIAcordo = dbRec.FCIAcordo,
            Quitado = dbRec.FQuitado,
            IDContrato = dbRec.FIDContrato,
            QuitadoID = dbRec.FQuitadoID,
            DebitoID = dbRec.FDebitoID,
            LivroCaixaID = dbRec.FLivroCaixaID,
            Sucumbencia = dbRec.FSucumbencia,
            DistRegra = dbRec.FDistRegra,
            Processo = dbRec.FProcesso,
            ParcelaX = dbRec.FParcelaX,
            Valor = dbRec.FValor,
            Data = dbRec.FData ?? string.Empty,
            Cliente = dbRec.FCliente,
            Historico = dbRec.FHistorico ?? string.Empty,
            Contrato = dbRec.FContrato,
            Pago = dbRec.FPago,
            Distribuir = dbRec.FDistribuir,
            LC = dbRec.FLC,
            IDHTrab = dbRec.FIDHTrab,
            NroParcelas = dbRec.FNroParcelas,
            ValorPrincipal = dbRec.FValorPrincipal,
            ParcelaPrincipalID = dbRec.FParcelaPrincipalID,
            Hide = dbRec.FHide,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDtOriginal, out DateTime XDtOriginal))
        {
            contacorrente.DtOriginal = dbRec.FDtOriginal;
            contacorrente.DtOriginal_date = XDtOriginal;
        }

        if (DateTime.TryParse(dbRec.FDataPgto, out DateTime XDataPgto))
        {
            contacorrente.DataPgto = dbRec.FDataPgto;
            contacorrente.DataPgto_date = XDataPgto;
        }

        return contacorrente;
    }
}