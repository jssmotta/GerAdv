// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBEnderecos - Nome da classe (ex: DBClientes)
/// Enderecos - Nome da tabela (ex: Clientes)
/// end - Prefixo dos campos (ex: cli)
/// endCodigo - Nome do campo código (ex: cliCodigo)
/// endDescricao - Nome do campo nome (ex: cliNome)
/// DBEnderecos.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBEnderecosTests : IDisposable
{
    private readonly DBEnderecos _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBEnderecosTests()
    {
        _instance = new DBEnderecos();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("endCodigo", typeof(int));
        dt.Columns.Add("endQuemCad", typeof(int));
        dt.Columns.Add("endDtCad", typeof(DateTime));
        dt.Columns.Add("endQuemAtu", typeof(int));
        dt.Columns.Add("endDtAtu", typeof(DateTime));
        dt.Columns.Add("endVisto", typeof(bool));
        dt.Columns.Add("endTopIndex", typeof(string));
        dt.Columns.Add("endGUID", typeof(string));
        dt.Columns.Add("endDescricao", typeof(string));
        dt.Columns.Add("endContato", typeof(string));
        dt.Columns.Add("endDtNasc", typeof(DateTime));
        dt.Columns.Add("endEndereco", typeof(string));
        dt.Columns.Add("endBairro", typeof(string));
        dt.Columns.Add("endPrivativo", typeof(string));
        dt.Columns.Add("endAddContato", typeof(string));
        dt.Columns.Add("endCEP", typeof(string));
        dt.Columns.Add("endOAB", typeof(string));
        dt.Columns.Add("endOBS", typeof(string));
        dt.Columns.Add("endFone", typeof(string));
        dt.Columns.Add("endFax", typeof(string));
        dt.Columns.Add("endTratamento", typeof(string));
        dt.Columns.Add("endCidade", typeof(int));
        dt.Columns.Add("endSite", typeof(string));
        dt.Columns.Add("endEMail", typeof(string));
        dt.Columns.Add("endQuem", typeof(int));
        dt.Columns.Add("endQuemIndicou", typeof(string));
        dt.Columns.Add("endReportECBOnly", typeof(string));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("Enderecos", DBEnderecos.PTabelaNome);
        Assert.Equal(" Enderecos.* ", DBEnderecos.CamposSqlX);
        Assert.Equal("endCodigo", DBEnderecos.CampoCodigo);
        Assert.Equal("endDescricao", DBEnderecos.CampoNome);
        Assert.Equal("end", DBEnderecos.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBEnderecos();
        Assert.Equal(0, instance.ID);
        Assert.Equal("Enderecos", instance.ITabelaName());
        Assert.Equal("end", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBEnderecos((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBEnderecos((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["endCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBEnderecos(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("Enderecos", cadastro.ITabelaName());
        Assert.Equal("endCodigo", cadastro.ICampoCodigo());
        Assert.Equal("endDescricao", cadastro.ICampoNome());
        Assert.Equal("end", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBEnderecos.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBEnderecos.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBEnderecos.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBEnderecos();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBEnderecos();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnTrue()
    {
        Assert.True(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void TopIndex_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FTopIndex = value;
        Assert.Equal(value, _instance.FTopIndex);
    }

    [Fact]
    public void TopIndex_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBEnderecos();
        Assert.False(instance.FTopIndex);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void TopIndex_ShouldAcceptIntegerValues(int value)
{
    _instance.FTopIndex = value;
    Assert.Equal(value, _instance.FTopIndex);
}

[Fact]
public void TopIndex_DefaultValue_ShouldBeZero()
{
    var instance = new DBEnderecos();
    Assert.Equal(0, instance.TopIndex);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void TopIndex_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FTopIndex = dateString;
    Assert.Equal(dateString, _instance.FTopIndex);
}

[Fact]
public void TopIndex_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBEnderecos();
    Assert.Equal(string.Empty, instance.TopIndex);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void TopIndex_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FTopIndex = input;
        Assert.Equal(expected, _instance.FTopIndex);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FTopIndex = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void TopIndex_ValidEmail_ShouldAccept(string email)
{
    _instance.FTopIndex = email;
    Assert.Equal(email, _instance.FTopIndex);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void TopIndex_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FTopIndex = email);
}
*/
    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void GUID_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FGUID = input;
        Assert.Equal(expected, _instance.FGUID);
    }

    [Fact]
    public void GUID_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FGUID = longString;
        Assert.True(_instance.FGUID.Length <= 100);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Descricao_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FDescricao = input;
        Assert.Equal(expected, _instance.FDescricao);
    }

    [Fact]
    public void Descricao_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FDescricao = longString;
        Assert.True(_instance.FDescricao.Length <= 50);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Contato_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FContato = input;
        Assert.Equal(expected, _instance.FContato);
    }

    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void DtNasc_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FDtNasc = dateString;
        Assert.Equal(dateString, _instance.FDtNasc);
    }

    [Fact]
    public void DtNasc_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBEnderecos();
        Assert.Equal(string.Empty, instance.FDtNasc);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Endereco_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FEndereco = input;
        Assert.Equal(expected, _instance.FEndereco);
    }

    [Fact]
    public void Endereco_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FEndereco = longString;
        Assert.True(_instance.FEndereco.Length <= 50);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Bairro_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FBairro = input;
        Assert.Equal(expected, _instance.FBairro);
    }

    [Fact]
    public void Bairro_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 30 + 10);
        _instance.FBairro = longString;
        Assert.True(_instance.FBairro.Length <= 30);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Privativo_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FPrivativo = value;
        Assert.Equal(value, _instance.FPrivativo);
    }

    [Fact]
    public void Privativo_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBEnderecos();
        Assert.False(instance.FPrivativo);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Privativo_ShouldAcceptIntegerValues(int value)
{
    _instance.FPrivativo = value;
    Assert.Equal(value, _instance.FPrivativo);
}

[Fact]
public void Privativo_DefaultValue_ShouldBeZero()
{
    var instance = new DBEnderecos();
    Assert.Equal(0, instance.Privativo);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Privativo_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FPrivativo = dateString;
    Assert.Equal(dateString, _instance.FPrivativo);
}

[Fact]
public void Privativo_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBEnderecos();
    Assert.Equal(string.Empty, instance.Privativo);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Privativo_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FPrivativo = input;
        Assert.Equal(expected, _instance.FPrivativo);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FPrivativo = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Privativo_ValidEmail_ShouldAccept(string email)
{
    _instance.FPrivativo = email;
    Assert.Equal(email, _instance.FPrivativo);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Privativo_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FPrivativo = email);
}
*/
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void AddContato_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FAddContato = value;
        Assert.Equal(value, _instance.FAddContato);
    }

    [Fact]
    public void AddContato_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBEnderecos();
        Assert.False(instance.FAddContato);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void AddContato_ShouldAcceptIntegerValues(int value)
{
    _instance.FAddContato = value;
    Assert.Equal(value, _instance.FAddContato);
}

[Fact]
public void AddContato_DefaultValue_ShouldBeZero()
{
    var instance = new DBEnderecos();
    Assert.Equal(0, instance.AddContato);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void AddContato_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FAddContato = dateString;
    Assert.Equal(dateString, _instance.FAddContato);
}

[Fact]
public void AddContato_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBEnderecos();
    Assert.Equal(string.Empty, instance.AddContato);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void AddContato_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FAddContato = input;
        Assert.Equal(expected, _instance.FAddContato);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FAddContato = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void AddContato_ValidEmail_ShouldAccept(string email)
{
    _instance.FAddContato = email;
    Assert.Equal(email, _instance.FAddContato);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void AddContato_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FAddContato = email);
}
*/
    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void OAB_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FOAB = input;
        Assert.Equal(expected, _instance.FOAB);
    }

    [Fact]
    public void OAB_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 20 + 10);
        _instance.FOAB = longString;
        Assert.True(_instance.FOAB.Length <= 20);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void OBS_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FOBS = input;
        Assert.Equal(expected, _instance.FOBS);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Fone_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FFone = input;
        Assert.Equal(expected, _instance.FFone);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Fax_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FFax = input;
        Assert.Equal(expected, _instance.FFax);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Tratamento_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FTratamento = input;
        Assert.Equal(expected, _instance.FTratamento);
    }

    [Fact]
    public void Tratamento_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 20 + 10);
        _instance.FTratamento = longString;
        Assert.True(_instance.FTratamento.Length <= 20);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cidade_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCidade = value;
        Assert.Equal(value, _instance.FCidade);
    }

    [Fact]
    public void Cidade_DefaultValue_ShouldBeZero()
    {
        var instance = new DBEnderecos();
        Assert.Equal(0, instance.FCidade);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Site_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FSite = input;
        Assert.Equal(expected, _instance.FSite);
    }

    [Fact]
    public void Site_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 200 + 10);
        _instance.FSite = longString;
        Assert.True(_instance.FSite.Length <= 200);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Quem_ShouldAcceptIntegerValues(int value)
    {
        _instance.FQuem = value;
        Assert.Equal(value, _instance.FQuem);
    }

    [Fact]
    public void Quem_DefaultValue_ShouldBeZero()
    {
        var instance = new DBEnderecos();
        Assert.Equal(0, instance.FQuem);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void QuemIndicou_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FQuemIndicou = input;
        Assert.Equal(expected, _instance.FQuemIndicou);
    }

    [Fact]
    public void QuemIndicou_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 150 + 10);
        _instance.FQuemIndicou = longString;
        Assert.True(_instance.FQuemIndicou.Length <= 150);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void ReportECBOnly_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FReportECBOnly = value;
        Assert.Equal(value, _instance.FReportECBOnly);
    }

    [Fact]
    public void ReportECBOnly_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBEnderecos();
        Assert.False(instance.FReportECBOnly);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void ReportECBOnly_ShouldAcceptIntegerValues(int value)
{
    _instance.FReportECBOnly = value;
    Assert.Equal(value, _instance.FReportECBOnly);
}

[Fact]
public void ReportECBOnly_DefaultValue_ShouldBeZero()
{
    var instance = new DBEnderecos();
    Assert.Equal(0, instance.ReportECBOnly);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void ReportECBOnly_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FReportECBOnly = dateString;
    Assert.Equal(dateString, _instance.FReportECBOnly);
}

[Fact]
public void ReportECBOnly_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBEnderecos();
    Assert.Equal(string.Empty, instance.ReportECBOnly);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void ReportECBOnly_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FReportECBOnly = input;
        Assert.Equal(expected, _instance.FReportECBOnly);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FReportECBOnly = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void ReportECBOnly_ValidEmail_ShouldAccept(string email)
{
    _instance.FReportECBOnly = email;
    Assert.Equal(email, _instance.FReportECBOnly);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void ReportECBOnly_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FReportECBOnly = email);
}
*/
    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}