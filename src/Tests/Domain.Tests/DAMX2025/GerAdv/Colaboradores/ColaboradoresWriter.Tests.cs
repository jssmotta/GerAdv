// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class ColaboradoresWriterTests
{
    private readonly Mock<IFColaboradoresFactory> _mockColaboradoresFactory;
    private readonly Mock<FColaboradores> _mockFColaboradores;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly ColaboradoresWriter _colaboradoresWriter;
    public ColaboradoresWriterTests()
    {
        _mockColaboradoresFactory = new Mock<IFColaboradoresFactory>();
        _mockFColaboradores = new Mock<FColaboradores>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _colaboradoresWriter = new ColaboradoresWriter(_mockColaboradoresFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var colaboradores = CreateValidColaboradoresModel();
        colaboradores.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockColaboradoresFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFColaboradores.Object);
        _mockFColaboradores.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _colaboradoresWriter.WriteAsync(colaboradores, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFColaboradores.Object);
        _mockColaboradoresFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockColaboradoresFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFColaboradores.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var colaboradores = CreateValidColaboradoresModel();
        colaboradores.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockColaboradoresFactory.Setup(x => x.CreateFromIdAsync(colaboradores.Id, _mockConnection.Object)).ReturnsAsync(_mockFColaboradores.Object);
        _mockFColaboradores.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _colaboradoresWriter.WriteAsync(colaboradores, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFColaboradores.Object);
        _mockColaboradoresFactory.Verify(x => x.CreateFromIdAsync(colaboradores.Id, _mockConnection.Object), Times.Once);
        _mockColaboradoresFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFColaboradores.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var colaboradores = CreateValidColaboradoresModel();
        var auditorQuem = 99;
        _mockColaboradoresFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFColaboradores.Object);
        _mockFColaboradores.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _colaboradoresWriter.WriteAsync(colaboradores, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFColaboradores.Object);
        _mockFColaboradores.VerifySet(x => x.FCargo = colaboradores.Cargo, Times.Once);
        _mockFColaboradores.VerifySet(x => x.FCliente = colaboradores.Cliente, Times.Once);
        _mockFColaboradores.VerifySet(x => x.FSexo = colaboradores.Sexo, Times.Once);
        _mockFColaboradores.VerifySet(x => x.FNome = colaboradores.Nome, Times.Once);
        _mockFColaboradores.VerifySet(x => x.FCPF = It.IsAny<string>(), Times.Once); // CPF é limpo pelo ClearInputCpf()
        _mockFColaboradores.VerifySet(x => x.FRG = colaboradores.RG, Times.Once);
        _mockFColaboradores.VerifySet(x => x.FDtNasc = colaboradores.DtNasc.ToString(), Times.Once);
        _mockFColaboradores.VerifySet(x => x.FIdade = colaboradores.Idade, Times.Once);
        _mockFColaboradores.VerifySet(x => x.FEndereco = colaboradores.Endereco, Times.Once);
        _mockFColaboradores.VerifySet(x => x.FBairro = colaboradores.Bairro, Times.Once);
        _mockFColaboradores.VerifySet(x => x.FCEP = It.IsAny<string>(), Times.Once); // CEP é limpo pelo ClearInputCep()
        _mockFColaboradores.VerifySet(x => x.FCidade = colaboradores.Cidade, Times.Once);
        _mockFColaboradores.VerifySet(x => x.FFone = colaboradores.Fone, Times.Once);
        _mockFColaboradores.VerifySet(x => x.FObservacao = colaboradores.Observacao, Times.Once);
        _mockFColaboradores.VerifySet(x => x.FEMail = colaboradores.EMail, Times.Once);
        _mockFColaboradores.VerifySet(x => x.FCNH = colaboradores.CNH, Times.Once);
        _mockFColaboradores.VerifySet(x => x.FClass = colaboradores.Class, Times.Once);
        _mockFColaboradores.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithNullDtNasc_ShouldNotSetFDtNasc()
    {
        // Arrange
        var colaboradores = CreateValidColaboradoresModel();
        colaboradores.DtNasc = null;
        var auditorQuem = 123;
        _mockColaboradoresFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFColaboradores.Object);
        _mockFColaboradores.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _colaboradoresWriter.WriteAsync(colaboradores, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFColaboradores.VerifySet(x => x.FDtNasc = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var colaboradores = CreateValidColaboradoresModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockColaboradoresFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _colaboradoresWriter.WriteAsync(colaboradores, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var colaboradores = CreateValidColaboradoresModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockColaboradoresFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFColaboradores.Object);
        _mockFColaboradores.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _colaboradoresWriter.WriteAsync(colaboradores, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var colaboradoresResponse = new ColaboradoresResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockColaboradoresFactory.Setup(x => x.DeleteAsync(operadorId, colaboradoresResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _colaboradoresWriter.Delete(colaboradoresResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockColaboradoresFactory.Verify(x => x.DeleteAsync(operadorId, colaboradoresResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var colaboradoresResponse = new ColaboradoresResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockColaboradoresFactory.Setup(x => x.DeleteAsync(operadorId, colaboradoresResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _colaboradoresWriter.Delete(colaboradoresResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var colaboradoresResponse = new ColaboradoresResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockColaboradoresFactory.Setup(x => x.DeleteAsync(operadorId, colaboradoresResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _colaboradoresWriter.Delete(colaboradoresResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new ColaboradoresWriter(_mockColaboradoresFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new ColaboradoresWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.Colaboradores CreateValidColaboradoresModel()
    {
        return new Models.Colaboradores
        {
            Id = 0,
            Cargo = 1,
            Cliente = 1,
            Sexo = false,
            Nome = "João",
            CPF = "544.506.718-13",
            RG = "12.345.678-9",
            DtNasc = "24/04/1975",
            Idade = 1,
            Endereco = "Rua das Flores, 123",
            Bairro = "Centro",
            CEP = "01234-567",
            Cidade = 1,
            Fone = "(11) 99999-9999",
            Observacao = "Observação teste",
            EMail = "test@email.com",
            CNH = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Class = "A"
        };
    }
#endregion
}