// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IAlarmSMSValidation
{
    Task<bool> ValidateReg(Models.AlarmSMS reg, IAlarmSMSService service, IOperadorReader operadorReader, IAgendaReader agendaReader, IRecadosReader recadosReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, IAlarmSMSService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class AlarmSMSValidation : IAlarmSMSValidation
{
    public async Task<bool> CanDelete(int id, IAlarmSMSService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.AlarmSMS reg)
    {
        if (reg.GuidExo.Length > 100)
            throw new SGValidationException($"GuidExo deve ter no máximo 100 caracteres.");
        if (reg.GUID.Length > 100)
            throw new SGValidationException($"GUID deve ter no máximo 100 caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.AlarmSMS reg, IAlarmSMSService service, IOperadorReader operadorReader, IAgendaReader agendaReader, IRecadosReader recadosReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Descricao))
            throw new SGValidationException("Descrição é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.Descricao.IsEmpty())
            throw new SGValidationException("Descricao é obrigatório.");
        if (reg.EMail.Length > 0 && !reg.EMail.IsValidEmail())
            throw new SGValidationException($"EMail em formato inválido.");
        if (reg.EMail.IsEmpty())
            throw new SGValidationException("EMail é obrigatório.");
        if (reg.GUID.IsEmpty())
            throw new SGValidationException("GUID é obrigatório.");
        // Operador
        if (!reg.Operador.IsEmptyIDNumber())
        {
            var regOperador = await operadorReader.Read(reg.Operador, oCnn);
            if (regOperador == null || regOperador.Id != reg.Operador)
            {
                throw new SGValidationException($"Operador não encontrado ({regOperador?.Id}).");
            }
        }

        // Agenda
        if (!reg.Agenda.IsEmptyIDNumber())
        {
            var regAgenda = await agendaReader.Read(reg.Agenda, oCnn);
            if (regAgenda == null || regAgenda.Id != reg.Agenda)
            {
                throw new SGValidationException($"Compromisso não encontrado ({regAgenda?.Id}).");
            }
        }

        // Recados
        if (!reg.Recado.IsEmptyIDNumber())
        {
            var regRecados = await recadosReader.Read(reg.Recado, oCnn);
            if (regRecados == null || regRecados.Id != reg.Recado)
            {
                throw new SGValidationException($"Recados não encontrado ({regRecados?.Id}).");
            }
        }

        return true;
    }
}