// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IOperadorEMailPopupValidation
{
    Task<bool> ValidateReg(Models.OperadorEMailPopup reg, IOperadorEMailPopupService service, IOperadorReader operadorReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int? id, IOperadorEMailPopupService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class OperadorEMailPopupValidation : IOperadorEMailPopupValidation
{
    public async Task<bool> CanDelete(int? id, IOperadorEMailPopupService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id == null || id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id ?? default, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.OperadorEMailPopup reg)
    {
        if (reg.Nome != null && reg.Nome.Length > DBOperadorEMailPopupDicInfo.OepNome.FTamanho)
            throw new SGValidationException($"Nome deve ter no máximo {DBOperadorEMailPopupDicInfo.OepNome.FTamanho} caracteres.");
        if (reg.SMTP != null && reg.SMTP.Length > DBOperadorEMailPopupDicInfo.OepSMTP.FTamanho)
            throw new SGValidationException($"SMTP deve ter no máximo {DBOperadorEMailPopupDicInfo.OepSMTP.FTamanho} caracteres.");
        if (reg.POP3 != null && reg.POP3.Length > DBOperadorEMailPopupDicInfo.OepPOP3.FTamanho)
            throw new SGValidationException($"POP3 deve ter no máximo {DBOperadorEMailPopupDicInfo.OepPOP3.FTamanho} caracteres.");
        if (reg.Descricao != null && reg.Descricao.Length > DBOperadorEMailPopupDicInfo.OepDescricao.FTamanho)
            throw new SGValidationException($"Descricao deve ter no máximo {DBOperadorEMailPopupDicInfo.OepDescricao.FTamanho} caracteres.");
        if (reg.Usuario != null && reg.Usuario.Length > DBOperadorEMailPopupDicInfo.OepUsuario.FTamanho)
            throw new SGValidationException($"Usuario deve ter no máximo {DBOperadorEMailPopupDicInfo.OepUsuario.FTamanho} caracteres.");
        if (reg.GUID != null && reg.GUID.Length > DBOperadorEMailPopupDicInfo.OepGUID.FTamanho)
            throw new SGValidationException($"GUID deve ter no máximo {DBOperadorEMailPopupDicInfo.OepGUID.FTamanho} caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.OperadorEMailPopup reg, IOperadorEMailPopupService service, IOperadorReader operadorReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Nome))
            throw new SGValidationException("Nome é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        // Operador
        if (!reg.Operador.IsEmptyIDNumber())
        {
            var regOperador = await operadorReader.Read(reg.Operador, oCnn);
            if (regOperador == null || regOperador.Id != reg.Operador)
            {
                throw new SGValidationException($"Operador não encontrado ({regOperador?.Id}).");
            }
        }

        return true;
    }
}