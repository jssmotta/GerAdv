// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class Diario2ValidationTests : IDisposable
{
    private readonly Diario2Validation _validation;
    private readonly Mock<IDiario2Service> _mockDiario2Service;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IOperadorReader> _mockOperadorReader;
    private readonly Mock<IClientesReader> _mockClientesReader;
    private readonly Diario2Service _service;
    private readonly string _validUri = "test-uri";
    public Diario2ValidationTests()
    {
        _validation = new Diario2Validation();
        _mockDiario2Service = new Mock<IDiario2Service>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockOperadorReader = new Mock<IOperadorReader>();
        _mockClientesReader = new Mock<IClientesReader>();
    }

#region Class Structure Tests
    [Fact]
    public void Diario2Validation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IDiario2Validation>();
    }

    [Fact]
    public void Diario2Validation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(Diario2Validation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void Diario2Validation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(Diario2Validation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private static Models.Diario2 CreateValidDiario2()
    {
        return new Models.Diario2
        {
            Id = 1,
            Data = "27/05/2022",
            Hora = "27/05/2022",
            Operador = 1,
            Nome = "João",
            Ocorrencia
            Cliente = 0,
            GUID = Guid.NewGuid().ToString()
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockDiario2Service.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterDiario2>(), It.IsAny<string>())).ReturnsAsync([]);
        // Setup other mocks but don't override the Diario2s service mock
        _ = _mockOperadorReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new OperadorResponse { Id = id }));
        _ = _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new ClientesResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockDiario2Service.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterDiario2>(), It.IsAny<string>())).ReturnsAsync([]);
        // Setup other mocks but don't override the Diario2s service mock
        _ = _mockOperadorReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new OperadorResponse { Id = 0 }));
        _ = _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new ClientesResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var diario2 = new Models.Diario2
        {
            Id = 1,
            Data = "27/05/2022",
            Hora = "27/05/2022",
            Operador = 1,
            Nome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Ocorrencia
            GUID = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region ValidateReg Required Data Method Tests 
    [Fact]
    public async Task ValidateReg_WithEmptyData_ShouldThrowSGValidationException()
    {
        // Arrange
        var diario2 = CreateValidDiario2();
        diario2.Data = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullData_ShouldThrowSGValidationException()
    {
        // Arrange
        var diario2 = CreateValidDiario2();
        diario2.Data = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataData_ShouldReturnTrue()
    {
        // Arrange
        var diario2 = CreateValidDiario2();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceData_ShouldThrowSGValidationException()
    {
        // Arrange
        var diario2 = CreateValidDiario2();
        diario2.Data = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
#region ValidateReg Required Hora Method Tests 
    [Fact]
    public async Task ValidateReg_WithEmptyHora_ShouldThrowSGValidationException()
    {
        // Arrange
        var diario2 = CreateValidDiario2();
        diario2.Hora = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullHora_ShouldThrowSGValidationException()
    {
        // Arrange
        var diario2 = CreateValidDiario2();
        diario2.Hora = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataHora_ShouldReturnTrue()
    {
        // Arrange
        var diario2 = CreateValidDiario2();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceHora_ShouldThrowSGValidationException()
    {
        // Arrange
        var diario2 = CreateValidDiario2();
        diario2.Hora = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
#region ValidateReg Required Nome Method Tests 
    [Fact]
    public async Task ValidateReg_WithEmptyNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var diario2 = CreateValidDiario2();
        diario2.Nome = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var diario2 = CreateValidDiario2();
        diario2.Nome = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataNome_ShouldReturnTrue()
    {
        // Arrange
        var diario2 = CreateValidDiario2();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var diario2 = CreateValidDiario2();
        diario2.Nome = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
#region ValidateReg Required Ocorrencia Method Tests 
    [Fact]
    public async Task ValidateReg_WithEmptyOcorrencia_ShouldThrowSGValidationException()
    {
        // Arrange
        var diario2 = CreateValidDiario2();
        diario2.Ocorrencia = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullOcorrencia_ShouldThrowSGValidationException()
    {
        // Arrange
        var diario2 = CreateValidDiario2();
        diario2.Ocorrencia = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataOcorrencia_ShouldReturnTrue()
    {
        // Arrange
        var diario2 = CreateValidDiario2();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceOcorrencia_ShouldThrowSGValidationException()
    {
        // Arrange
        var diario2 = CreateValidDiario2();
        diario2.Ocorrencia = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
#region ValidateReg Required GUID Method Tests 
    [Fact]
    public async Task ValidateReg_WithEmptyGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var diario2 = CreateValidDiario2();
        diario2.GUID = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var diario2 = CreateValidDiario2();
        diario2.GUID = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataGUID_ShouldReturnTrue()
    {
        // Arrange
        var diario2 = CreateValidDiario2();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var diario2 = CreateValidDiario2();
        diario2.GUID = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
#region Foreign Key Validation Tests - Operador
    [Fact]
    public async Task ValidateReg_WithInvalidOperador_ShouldThrowSGValidationException()
    {
        // Arrange
        var diario2 = CreateValidDiario2();
        diario2.Operador = 999;
        _mockOperadorReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.OperadorResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedOperadorId_ShouldThrowSGValidationException()
    {
        // Arrange
        var diario2 = CreateValidDiario2();
        diario2.Operador = 999;
        var reg888 = new Models.Response.OperadorResponse
        {
            Id = 888
        }; // Different ID
        _mockOperadorReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidOperador_ShouldPass()
    {
        // Arrange
        var diario2 = CreateValidDiario2();
        diario2.Operador = 123;
        var reg123 = new Models.Response.OperadorResponse
        {
            Id = 123
        };
        _mockOperadorReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region Foreign Key Validation Tests - Clientes
    [Fact]
    public async Task ValidateReg_WithInvalidClientes_ShouldThrowSGValidationException()
    {
        // Arrange
        var diario2 = CreateValidDiario2();
        diario2.Cliente = 999;
        _mockClientesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.ClientesResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedClientesId_ShouldThrowSGValidationException()
    {
        // Arrange
        var diario2 = CreateValidDiario2();
        diario2.Cliente = 999;
        var reg888 = new Models.Response.ClientesResponse
        {
            Id = 888
        }; // Different ID
        _mockClientesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidClientes_ShouldPass()
    {
        // Arrange
        var diario2 = CreateValidDiario2();
        diario2.Cliente = 123;
        var reg123 = new Models.Response.ClientesResponse
        {
            Id = 123
        };
        _mockClientesReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyClientes_ShouldPass()
    {
        // Arrange
        var diario2 = CreateValidDiario2();
        diario2.Cliente = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(diario2, _mockDiario2Service.Object, _mockOperadorReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockClientesReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}