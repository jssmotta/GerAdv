// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IAreaValidation
{
    Task<bool> ValidateReg(Models.Area reg, IAreaService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, IAreaService service, IAcaoService acaoService, IAgendaService agendaService, IAreasJusticaService areasjusticaService, IDivisaoTribunalService divisaotribunalService, IFaseService faseService, IObjetosService objetosService, IPoderJudiciarioAssociadoService poderjudiciarioassociadoService, ITipoRecursoService tiporecursoService, ITribunalService tribunalService, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class AreaValidation : IAreaValidation
{
    public async Task<bool> CanDelete(int id, IAreaService service, IAcaoService acaoService, IAgendaService agendaService, IAreasJusticaService areasjusticaService, IDivisaoTribunalService divisaotribunalService, IFaseService faseService, IObjetosService objetosService, IPoderJudiciarioAssociadoService poderjudiciarioassociadoService, ITipoRecursoService tiporecursoService, ITribunalService tribunalService, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        var acaoExists0 = await acaoService.Filter(new Filters.FilterAcao { Area = id }, uri);
        if (acaoExists0 != null && acaoExists0.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Acao associados a ele.");
        var agendaExists1 = await agendaService.Filter(new Filters.FilterAgenda { Area = id }, uri);
        if (agendaExists1 != null && agendaExists1.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Compromisso associados a ele.");
        var areasjusticaExists2 = await areasjusticaService.Filter(new Filters.FilterAreasJustica { Area = id }, uri);
        if (areasjusticaExists2 != null && areasjusticaExists2.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Areas Justica associados a ele.");
        var divisaotribunalExists3 = await divisaotribunalService.Filter(new Filters.FilterDivisaoTribunal { Area = id }, uri);
        if (divisaotribunalExists3 != null && divisaotribunalExists3.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Divisao Tribunal associados a ele.");
        var faseExists4 = await faseService.Filter(new Filters.FilterFase { Area = id }, uri);
        if (faseExists4 != null && faseExists4.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Fase associados a ele.");
        var objetosExists5 = await objetosService.Filter(new Filters.FilterObjetos { Area = id }, uri);
        if (objetosExists5 != null && objetosExists5.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Objetos associados a ele.");
        var poderjudiciarioassociadoExists6 = await poderjudiciarioassociadoService.Filter(new Filters.FilterPoderJudiciarioAssociado { Area = id }, uri);
        if (poderjudiciarioassociadoExists6 != null && poderjudiciarioassociadoExists6.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Poder Judiciario Associado associados a ele.");
        var tiporecursoExists7 = await tiporecursoService.Filter(new Filters.FilterTipoRecurso { Area = id }, uri);
        if (tiporecursoExists7 != null && tiporecursoExists7.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Tipo Recurso associados a ele.");
        var tribunalExists8 = await tribunalService.Filter(new Filters.FilterTribunal { Area = id }, uri);
        if (tribunalExists8 != null && tribunalExists8.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Tribunal associados a ele.");
        return true;
    }

    private bool ValidSizes(Models.Area reg)
    {
        if (reg.Descricao != null && reg.Descricao.Length > 40)
            throw new SGValidationException($"Descricao deve ter no máximo 40 caracteres.");
        if (reg.GUID != null && reg.GUID.Length > 100)
            throw new SGValidationException($"GUID deve ter no máximo 100 caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.Area reg, IAreaService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Descricao))
            throw new SGValidationException("Descrição é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        await Task.Delay(0);
        return true;
    }
}