// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class PreClientesWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFPreClientesFactory> _mockPreClientesFactory;
    private readonly Mock<FPreClientes> _mockFPreClientes;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly PreClientesWhere _preclientesWhere;
    public PreClientesWhereTests()
    {
        _mockPreClientesFactory = new Mock<IFPreClientesFactory>();
        _mockFPreClientes = new Mock<FPreClientes>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _preclientesWhere = new PreClientesWhere(_mockPreClientesFactory.Object);
    }

    public void Dispose()
    {
        _mockPreClientesFactory?.Reset();
        _mockFPreClientes?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
        };
    }

    private void SetupMockFPreClientes(bool? Inativo = false, string? QuemIndicou = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string? Nome = "João", int? Adv = 1, int? IDRep = 1, bool? Juridica = true, string? NomeFantasia = "João", string? Class = "A", bool? Tipo = false, string? DtNasc = "24/04/1975", string? InscEst = "AAAAAAAAAAAAA", string? Qualificacao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", bool? Sexo = true, int? Idade = 1, string? CNPJ = "93016944000138", string? CPF = "544.506.718-13", string? RG = "12.345.678-9", bool? TipoCaptacao = false, string? Observacao = "Observação teste", string? Endereco = "Rua das Flores, 123", string? Bairro = "Centro", int? Cidade = 1, string? CEP = "01234-567", string? Fax = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string? Fone = "(11) 99999-9999", string? Data = "27/05/2022", string? HomePage = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string? EMail = "test@email.com", string? Assistido = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string? AssRG = "12.345.678-9", string? AssCPF = "544.506.718-13", string? AssEndereco = "Rua das Flores, 123", string? CNH = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
    {
        _mockFPreClientes.Setup(f => f.FInativo).Returns(Inativo ?? false);
        _mockFPreClientes.Setup(f => f.FQuemIndicou).Returns(QuemIndicou ?? string.Empty);
        _mockFPreClientes.Setup(f => f.FNome).Returns(Nome ?? string.Empty);
        _mockFPreClientes.Setup(f => f.FAdv).Returns(Adv ?? 0);
        _mockFPreClientes.Setup(f => f.FIDRep).Returns(IDRep ?? 0);
        _mockFPreClientes.Setup(f => f.FJuridica).Returns(Juridica ?? false);
        _mockFPreClientes.Setup(f => f.FNomeFantasia).Returns(NomeFantasia ?? string.Empty);
        _mockFPreClientes.Setup(f => f.FClass).Returns(Class ?? string.Empty);
        _mockFPreClientes.Setup(f => f.FTipo).Returns(Tipo ?? false);
        _mockFPreClientes.Setup(f => f.FDtNasc).Returns(DtNasc ?? string.Empty);
        _mockFPreClientes.Setup(f => f.FInscEst).Returns(InscEst ?? string.Empty);
        _mockFPreClientes.Setup(f => f.FQualificacao).Returns(Qualificacao ?? string.Empty);
        _mockFPreClientes.Setup(f => f.FSexo).Returns(Sexo ?? false);
        _mockFPreClientes.Setup(f => f.FIdade).Returns(Idade ?? 0);
        _mockFPreClientes.Setup(f => f.FCNPJ).Returns(CNPJ ?? string.Empty);
        _mockFPreClientes.Setup(f => f.FCPF).Returns(CPF ?? string.Empty);
        _mockFPreClientes.Setup(f => f.FRG).Returns(RG ?? string.Empty);
        _mockFPreClientes.Setup(f => f.FTipoCaptacao).Returns(TipoCaptacao ?? false);
        _mockFPreClientes.Setup(f => f.FObservacao).Returns(Observacao ?? string.Empty);
        _mockFPreClientes.Setup(f => f.FEndereco).Returns(Endereco ?? string.Empty);
        _mockFPreClientes.Setup(f => f.FBairro).Returns(Bairro ?? string.Empty);
        _mockFPreClientes.Setup(f => f.FCidade).Returns(Cidade ?? 0);
        _mockFPreClientes.Setup(f => f.FCEP).Returns(CEP ?? string.Empty);
        _mockFPreClientes.Setup(f => f.FFax).Returns(Fax ?? string.Empty);
        _mockFPreClientes.Setup(f => f.FFone).Returns(Fone ?? string.Empty);
        _mockFPreClientes.Setup(f => f.FData).Returns(Data ?? string.Empty);
        _mockFPreClientes.Setup(f => f.FHomePage).Returns(HomePage ?? string.Empty);
        _mockFPreClientes.Setup(f => f.FEMail).Returns(EMail ?? string.Empty);
        _mockFPreClientes.Setup(f => f.FAssistido).Returns(Assistido ?? string.Empty);
        _mockFPreClientes.Setup(f => f.FAssRG).Returns(AssRG ?? string.Empty);
        _mockFPreClientes.Setup(f => f.FAssCPF).Returns(AssCPF ?? string.Empty);
        _mockFPreClientes.Setup(f => f.FAssEndereco).Returns(AssEndereco ?? string.Empty);
        _mockFPreClientes.Setup(f => f.FCNH).Returns(CNH ?? string.Empty);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFPreClientesFactory>();
        // Act
        var preclientesWhere = new PreClientesWhere(mockFactory.Object);
        // Assert
        preclientesWhere.Should().NotBeNull();
        preclientesWhere.Should().BeAssignableTo<IPreClientesWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFPreClientesFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new PreClientesWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnPreClientesResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFPreClientes();
        _mockPreClientesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPreClientes.Object);
        // Act
        var result = _preclientesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.Inativo.Should().Be(false);
        result.QuemIndicou.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Nome.Should().Be("João");
        result.Adv.Should().Be(1);
        result.IDRep.Should().Be(1);
        result.Juridica.Should().Be(true);
        result.NomeFantasia.Should().Be("João");
        result.Class.Should().Be("A");
        result.Tipo.Should().Be(false);
        result.DtNasc.Should().Be("24/04/1975");
        result.InscEst.Should().Be("AAAAAAAAAAAAA");
        result.Qualificacao.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Sexo.Should().Be(true);
        result.Idade.Should().Be(1);
        result.CNPJ.Should().Be("93016944000138");
        result.CPF.Should().Be("544.506.718-13");
        result.RG.Should().Be("12.345.678-9");
        result.TipoCaptacao.Should().Be(false);
        result.Observacao.Should().Be("Observação teste");
        result.Endereco.Should().Be("Rua das Flores, 123");
        result.Bairro.Should().Be("Centro");
        result.Cidade.Should().Be(1);
        result.CEP.Should().Be("01234-567");
        result.Fax.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.Fone.Should().Be("(11) 99999-9999");
        result.Data.Should().Be("27/05/2022");
        result.HomePage.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.EMail.Should().Be("test@email.com");
        result.Assistido.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.AssRG.Should().Be("12.345.678-9");
        result.AssCPF.Should().Be("544.506.718-13");
        result.AssEndereco.Should().Be("Rua das Flores, 123");
        result.CNH.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFPreClientes(Inativo: null, QuemIndicou: null, Nome: null, Adv: null, IDRep: null, Juridica: null, NomeFantasia: null, Class: null, Tipo: null, DtNasc: null, InscEst: null, Qualificacao: null, Sexo: null, Idade: null, CNPJ: null, CPF: null, RG: null, TipoCaptacao: null, Observacao: null, Endereco: null, Bairro: null, Cidade: null, CEP: null, Fax: null, Fone: null, Data: null, HomePage: null, EMail: null, Assistido: null, AssRG: null, AssCPF: null, AssEndereco: null, CNH: null);
        _mockPreClientesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPreClientes.Object);
        // Act
        var result = _preclientesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Inativo.Should().Be(false);
        result.QuemIndicou.Should().Be(string.Empty);
        result.Nome.Should().Be(string.Empty);
        result.Adv.Should().Be(0);
        result.IDRep.Should().Be(0);
        result.Juridica.Should().Be(false);
        result.NomeFantasia.Should().Be(string.Empty);
        result.Class.Should().Be(string.Empty);
        result.Tipo.Should().Be(false);
        result.DtNasc.Should().Be(string.Empty);
        result.InscEst.Should().Be(string.Empty);
        result.Qualificacao.Should().Be(string.Empty);
        result.Sexo.Should().Be(false);
        result.Idade.Should().Be(0);
        result.CNPJ.Should().Be(string.Empty);
        result.CPF.Should().Be(string.Empty);
        result.RG.Should().Be(string.Empty);
        result.TipoCaptacao.Should().Be(false);
        result.Observacao.Should().Be(string.Empty);
        result.Endereco.Should().Be(string.Empty);
        result.Bairro.Should().Be(string.Empty);
        result.Cidade.Should().Be(0);
        result.CEP.Should().Be(string.Empty);
        result.Fax.Should().Be(string.Empty);
        result.Fone.Should().Be(string.Empty);
        result.Data.Should().Be(string.Empty);
        result.HomePage.Should().Be(string.Empty);
        result.EMail.Should().Be(string.Empty);
        result.Assistido.Should().Be(string.Empty);
        result.AssRG.Should().Be(string.Empty);
        result.AssCPF.Should().Be(string.Empty);
        result.AssEndereco.Should().Be(string.Empty);
        result.CNH.Should().Be(string.Empty);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFPreClientes();
        _mockPreClientesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFPreClientes.Object);
        // Act
        var result = _preclientesWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockPreClientesFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFPreClientes();
        _mockPreClientesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPreClientes.Object);
        // Act
        var result = _preclientesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockPreClientesFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFPreClientes();
        _mockPreClientesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPreClientes.Object);
        // Act
        var result = _preclientesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockPreClientesFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFPreClientes();
        _mockPreClientesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPreClientes.Object);
        // Act
        _preclientesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockPreClientesFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFPreClientesInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFPreClientes.Setup(f => f.Dispose());
        SetupMockFPreClientes();
        _mockPreClientesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPreClientes.Object);
        // Act
        _preclientesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFPreClientes.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockPreClientesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _preclientesWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFPreClientes(Inativo: false, QuemIndicou: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", Nome: "João", Adv: 1, IDRep: 1, Juridica: true, NomeFantasia: "João", Class: "A", Tipo: false, DtNasc: "24/04/1975", InscEst: "AAAAAAAAAAAAA", Qualificacao: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", Sexo: true, Idade: 1, CNPJ: "93016944000138", CPF: "544.506.718-13", RG: "12.345.678-9", TipoCaptacao: false, Observacao: "Observação teste", Endereco: "Rua das Flores, 123", Bairro: "Centro", Cidade: 1, CEP: "01234-567", Fax: "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", Fone: "(11) 99999-9999", Data: "27/05/2022", HomePage: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", EMail: "test@email.com", Assistido: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", AssRG: "12.345.678-9", AssCPF: "544.506.718-13", AssEndereco: "Rua das Flores, 123", CNH: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _mockPreClientesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPreClientes.Object);
        // Act
        var result = _preclientesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.Inativo.Should().Be(false);
        result.QuemIndicou.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Nome.Should().Be("João");
        result.Adv.Should().Be(1);
        result.IDRep.Should().Be(1);
        result.Juridica.Should().Be(true);
        result.NomeFantasia.Should().Be("João");
        result.Class.Should().Be("A");
        result.Tipo.Should().Be(false);
        result.DtNasc.Should().Be("24/04/1975");
        result.InscEst.Should().Be("AAAAAAAAAAAAA");
        result.Qualificacao.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Sexo.Should().Be(true);
        result.Idade.Should().Be(1);
        result.CNPJ.Should().Be("93016944000138");
        result.CPF.Should().Be("544.506.718-13");
        result.RG.Should().Be("12.345.678-9");
        result.TipoCaptacao.Should().Be(false);
        result.Observacao.Should().Be("Observação teste");
        result.Endereco.Should().Be("Rua das Flores, 123");
        result.Bairro.Should().Be("Centro");
        result.Cidade.Should().Be(1);
        result.CEP.Should().Be("01234-567");
        result.Fax.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.Fone.Should().Be("(11) 99999-9999");
        result.Data.Should().Be("27/05/2022");
        result.HomePage.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.EMail.Should().Be("test@email.com");
        result.Assistido.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.AssRG.Should().Be("12.345.678-9");
        result.AssCPF.Should().Be("544.506.718-13");
        result.AssEndereco.Should().Be("Rua das Flores, 123");
        result.CNH.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "Nome = @{DBPreClientesDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBPreClientesDicInfo.CampoNome}", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"),
        };
        SetupMockFPreClientes();
        _mockPreClientesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPreClientes.Object);
        // Act
        _preclientesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockPreClientesFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBPreClientesDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#region DateTime Tests
    [Fact]
    public void Read_WithValidDateDtNascFields_ShouldParseAndSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var testDate = "31/12/2024";
        SetupMockFPreClientes(DtNasc: testDate);
        _mockPreClientesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPreClientes.Object);
        // Act
        var result = _preclientesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtNasc.Should().Be("31/12/2024");
    }

    [Fact]
    public void Read_WithInvalidDateDtNascStrings_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFPreClientes(DtNasc: "invalid-date");
        _mockPreClientesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPreClientes.Object);
        // Act
        var result = _preclientesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtNasc.Should().Be("");
    }

    [Fact]
    public void Read_WithNullDateDtNascFields_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFPreClientes(DtNasc: null);
        _mockPreClientesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPreClientes.Object);
        // Act
        var result = _preclientesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtNasc.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("31/12/2024")]
    [InlineData("2025/01/01T23:59:59")]
    [InlineData("2000-02-29")] // Leap year
    [InlineData("2025/01/02T14:30:45.123")]
    public void Read_WithValidDateDtNascFormats_ShouldParseCorrectly(string dateString)
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedDate = DateTime.Parse(dateString);
        SetupMockFPreClientes(DtNasc: dateString);
        _mockPreClientesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPreClientes.Object);
        // Act
        var result = _preclientesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtNasc.Should().Be(dateString);
    }
#endregion
#endregion
}