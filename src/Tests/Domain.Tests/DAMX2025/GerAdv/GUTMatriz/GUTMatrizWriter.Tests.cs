// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class GUTMatrizWriterTests
{
    private readonly Mock<IFGUTMatrizFactory> _mockGUTMatrizFactory;
    private readonly Mock<FGUTMatriz> _mockFGUTMatriz;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly GUTMatrizWriter _gutmatrizWriter;
    public GUTMatrizWriterTests()
    {
        _mockGUTMatrizFactory = new Mock<IFGUTMatrizFactory>();
        _mockFGUTMatriz = new Mock<FGUTMatriz>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _gutmatrizWriter = new GUTMatrizWriter(_mockGUTMatrizFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var gutmatriz = CreateValidGUTMatrizModel();
        gutmatriz.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockGUTMatrizFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFGUTMatriz.Object);
        _mockFGUTMatriz.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _gutmatrizWriter.WriteAsync(gutmatriz, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFGUTMatriz.Object);
        _mockGUTMatrizFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockGUTMatrizFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFGUTMatriz.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var gutmatriz = CreateValidGUTMatrizModel();
        gutmatriz.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockGUTMatrizFactory.Setup(x => x.CreateFromIdAsync(gutmatriz.Id, _mockConnection.Object)).ReturnsAsync(_mockFGUTMatriz.Object);
        _mockFGUTMatriz.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _gutmatrizWriter.WriteAsync(gutmatriz, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFGUTMatriz.Object);
        _mockGUTMatrizFactory.Verify(x => x.CreateFromIdAsync(gutmatriz.Id, _mockConnection.Object), Times.Once);
        _mockGUTMatrizFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFGUTMatriz.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var gutmatriz = CreateValidGUTMatrizModel();
        var auditorQuem = 99;
        _mockGUTMatrizFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFGUTMatriz.Object);
        _mockFGUTMatriz.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _gutmatrizWriter.WriteAsync(gutmatriz, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFGUTMatriz.Object);
        _mockFGUTMatriz.VerifySet(x => x.FDescricao = gutmatriz.Descricao, Times.Once);
        _mockFGUTMatriz.VerifySet(x => x.FGUTTipo = gutmatriz.GUTTipo, Times.Once);
        _mockFGUTMatriz.VerifySet(x => x.FValor = gutmatriz.Valor, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var gutmatriz = CreateValidGUTMatrizModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockGUTMatrizFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _gutmatrizWriter.WriteAsync(gutmatriz, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var gutmatriz = CreateValidGUTMatrizModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockGUTMatrizFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFGUTMatriz.Object);
        _mockFGUTMatriz.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _gutmatrizWriter.WriteAsync(gutmatriz, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var gutmatrizResponse = new GUTMatrizResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockGUTMatrizFactory.Setup(x => x.DeleteAsync(operadorId, gutmatrizResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _gutmatrizWriter.Delete(gutmatrizResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockGUTMatrizFactory.Verify(x => x.DeleteAsync(operadorId, gutmatrizResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var gutmatrizResponse = new GUTMatrizResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockGUTMatrizFactory.Setup(x => x.DeleteAsync(operadorId, gutmatrizResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _gutmatrizWriter.Delete(gutmatrizResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var gutmatrizResponse = new GUTMatrizResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockGUTMatrizFactory.Setup(x => x.DeleteAsync(operadorId, gutmatrizResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _gutmatrizWriter.Delete(gutmatrizResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new GUTMatrizWriter(_mockGUTMatrizFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new GUTMatrizWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.GUTMatriz CreateValidGUTMatrizModel()
    {
        return new Models.GUTMatriz
        {
            Id = 0,
            Descricao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            GUTTipo = 1,
            Valor = 1
        };
    }
#endregion
}