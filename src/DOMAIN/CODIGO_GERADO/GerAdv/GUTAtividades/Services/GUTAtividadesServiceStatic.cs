// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class GUTAtividadesService
{
    public (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterGUTAtividades? filtro)
    {
        if (filtro == null)
            return null;
        var parameters = new List<SqlParameter>();
        if (!string.IsNullOrWhiteSpace(filtro.Nome))
        {
            parameters.Add(new($"@{(DBGUTAtividadesDicInfo.Nome)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Nome)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Observacao))
        {
            parameters.Add(new($"@{(DBGUTAtividadesDicInfo.Observacao)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Observacao)));
        }

        if (filtro.GUTGrupo != int.MinValue)
        {
            parameters.Add(new($"@{(DBGUTAtividadesDicInfo.GUTGrupo)}", filtro.GUTGrupo));
            if (filtro.GUTGrupo_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBGUTAtividadesDicInfo.GUTGrupo)}_end", filtro.GUTGrupo_end));
            }
        }

        if (filtro.GUTPeriodicidade != int.MinValue)
        {
            parameters.Add(new($"@{(DBGUTAtividadesDicInfo.GUTPeriodicidade)}", filtro.GUTPeriodicidade));
            if (filtro.GUTPeriodicidade_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBGUTAtividadesDicInfo.GUTPeriodicidade)}_end", filtro.GUTPeriodicidade_end));
            }
        }

        if (filtro.Operador != int.MinValue)
        {
            parameters.Add(new($"@{(DBGUTAtividadesDicInfo.Operador)}", filtro.Operador));
            if (filtro.Operador_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBGUTAtividadesDicInfo.Operador)}_end", filtro.Operador_end));
            }
        }

        if (!string.IsNullOrWhiteSpace(filtro.GUID))
        {
            parameters.Add(new($"@{(DBGUTAtividadesDicInfo.GUID)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.GUID)));
        }

        if (filtro.Concluido != int.MinValue)
        {
            parameters.Add(new($"@{(DBGUTAtividadesDicInfo.Concluido)}", filtro.Concluido));
        }

        if (!filtro.DataConcluido.IsEmptyDX())
        {
            if (DateTime.TryParse(filtro.DataConcluido, out var dataParam1))
                parameters.Add(new($"@{(DBGUTAtividadesDicInfo.DataConcluido)}", dataParam1));
            if (!filtro.DataConcluido_end.IsEmptyDX())
            {
                if (DateTime.TryParse(filtro.DataConcluido_end, out var dataParam2))
                    parameters.Add(new($"@{(DBGUTAtividadesDicInfo.DataConcluido)}_end", dataParam2));
            }
        }

        if (filtro.DiasParaIniciar != int.MinValue)
        {
            parameters.Add(new($"@{(DBGUTAtividadesDicInfo.DiasParaIniciar)}", filtro.DiasParaIniciar));
            if (filtro.DiasParaIniciar_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBGUTAtividadesDicInfo.DiasParaIniciar)}_end", filtro.DiasParaIniciar_end));
            }
        }

        if (filtro.MinutosParaRealizar != int.MinValue)
        {
            parameters.Add(new($"@{(DBGUTAtividadesDicInfo.MinutosParaRealizar)}", filtro.MinutosParaRealizar));
            if (filtro.MinutosParaRealizar_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBGUTAtividadesDicInfo.MinutosParaRealizar)}_end", filtro.MinutosParaRealizar_end));
            }
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{(DBGUTAtividadesDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
            if (filtro.Codigo_filtro_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBGUTAtividadesDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
            }
        }

        if (filtro.LogicalOperator.IsEmptyX() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        cWhere.Append(filtro.Nome.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].[{DBGUTAtividadesDicInfo.Nome}]  {DevourerConsts.MsiCollate} like @{(DBGUTAtividadesDicInfo.Nome)}");
        cWhere.Append(filtro.Observacao.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].[{DBGUTAtividadesDicInfo.Observacao}]  {DevourerConsts.MsiCollate} like @{(DBGUTAtividadesDicInfo.Observacao)}");
        if (!(filtro.GUTGrupo.IsEmptyX()) && filtro.GUTGrupo_end.IsEmptyX())
        {
            cWhere.Append(filtro.GUTGrupo.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].[{DBGUTAtividadesDicInfo.GUTGrupo}] = @{(DBGUTAtividadesDicInfo.GUTGrupo)}");
        }
        else if (!(filtro.GUTGrupo.IsEmptyX()) && !(filtro.GUTGrupo_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].{DBGUTAtividadesDicInfo.GUTGrupo} BETWEEN @{(DBGUTAtividadesDicInfo.GUTGrupo)} AND @{(DBGUTAtividadesDicInfo.GUTGrupo)}_end");
        }

        if (!(filtro.GUTPeriodicidade.IsEmptyX()) && filtro.GUTPeriodicidade_end.IsEmptyX())
        {
            cWhere.Append(filtro.GUTPeriodicidade.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].[{DBGUTAtividadesDicInfo.GUTPeriodicidade}] = @{(DBGUTAtividadesDicInfo.GUTPeriodicidade)}");
        }
        else if (!(filtro.GUTPeriodicidade.IsEmptyX()) && !(filtro.GUTPeriodicidade_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].{DBGUTAtividadesDicInfo.GUTPeriodicidade} BETWEEN @{(DBGUTAtividadesDicInfo.GUTPeriodicidade)} AND @{(DBGUTAtividadesDicInfo.GUTPeriodicidade)}_end");
        }

        if (!(filtro.Operador.IsEmptyX()) && filtro.Operador_end.IsEmptyX())
        {
            cWhere.Append(filtro.Operador.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].[{DBGUTAtividadesDicInfo.Operador}] = @{(DBGUTAtividadesDicInfo.Operador)}");
        }
        else if (!(filtro.Operador.IsEmptyX()) && !(filtro.Operador_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].{DBGUTAtividadesDicInfo.Operador} BETWEEN @{(DBGUTAtividadesDicInfo.Operador)} AND @{(DBGUTAtividadesDicInfo.Operador)}_end");
        }

        cWhere.Append(filtro.GUID.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].[{DBGUTAtividadesDicInfo.GUID}]  {DevourerConsts.MsiCollate} like @{(DBGUTAtividadesDicInfo.GUID)}");
        cWhere.Append(filtro.Concluido == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].[{DBGUTAtividadesDicInfo.Concluido}] = @{(DBGUTAtividadesDicInfo.Concluido)}");
        if (!(filtro.DataConcluido.IsEmptyDX()) && filtro.DataConcluido_end.IsEmptyDX())
        {
            cWhere.Append(filtro.DataConcluido.IsEmptyDX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBGUTAtividadesDicInfo.PTabelaNome}].[{DBGUTAtividadesDicInfo.DataConcluido}], 103) = CONVERT(DATE, @{(DBGUTAtividadesDicInfo.DataConcluido)}, 103)");
        }
        else if (!(filtro.DataConcluido.IsEmptyDX()) && !(filtro.DataConcluido_end.IsEmptyDX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].{DBGUTAtividadesDicInfo.DataConcluido} BETWEEN @{(DBGUTAtividadesDicInfo.DataConcluido)} AND @{(DBGUTAtividadesDicInfo.DataConcluido)}_end");
        }

        if (!(filtro.DiasParaIniciar.IsEmptyX()) && filtro.DiasParaIniciar_end.IsEmptyX())
        {
            cWhere.Append(filtro.DiasParaIniciar.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].[{DBGUTAtividadesDicInfo.DiasParaIniciar}] = @{(DBGUTAtividadesDicInfo.DiasParaIniciar)}");
        }
        else if (!(filtro.DiasParaIniciar.IsEmptyX()) && !(filtro.DiasParaIniciar_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].{DBGUTAtividadesDicInfo.DiasParaIniciar} BETWEEN @{(DBGUTAtividadesDicInfo.DiasParaIniciar)} AND @{(DBGUTAtividadesDicInfo.DiasParaIniciar)}_end");
        }

        if (!(filtro.MinutosParaRealizar.IsEmptyX()) && filtro.MinutosParaRealizar_end.IsEmptyX())
        {
            cWhere.Append(filtro.MinutosParaRealizar.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].[{DBGUTAtividadesDicInfo.MinutosParaRealizar}] = @{(DBGUTAtividadesDicInfo.MinutosParaRealizar)}");
        }
        else if (!(filtro.MinutosParaRealizar.IsEmptyX()) && !(filtro.MinutosParaRealizar_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].{DBGUTAtividadesDicInfo.MinutosParaRealizar} BETWEEN @{(DBGUTAtividadesDicInfo.MinutosParaRealizar)} AND @{(DBGUTAtividadesDicInfo.MinutosParaRealizar)}_end");
        }

        if (!(filtro.Codigo_filtro.IsEmptyX()) && filtro.Codigo_filtro_end.IsEmptyX())
        {
            cWhere.Append(filtro.Codigo_filtro.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].[{DBGUTAtividadesDicInfo.CampoCodigo}] = @{(DBGUTAtividadesDicInfo.CampoCodigo)}");
        }
        else if (!(filtro.Codigo_filtro.IsEmptyX()) && !(filtro.Codigo_filtro_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTAtividadesDicInfo.PTabelaNome}].{DBGUTAtividadesDicInfo.CampoCodigo} BETWEEN @{(DBGUTAtividadesDicInfo.CampoCodigo)} AND @{(DBGUTAtividadesDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private string GetFilterHash(Filters.FilterGUTAtividades? filtro)
    {
        if (filtro == null)
            return string.Empty;
        var json = JsonSerializer.Serialize(filtro);
        using var sha256 = SHA256.Create();
        var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(json));
        return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
    }

    public async Task<IEnumerable<NomeID>> GetListN([FromQuery] int max, [FromBody] Filters.FilterGUTAtividades? filtro, [FromRoute, Required] string uri, CancellationToken token)
    {
        // Tracking: 20250606-0
        ThrowIfDisposed();
        var filtroResult = filtro == null ? null : WFiltro(filtro!);
        string where = filtroResult?.where ?? string.Empty;
        List<SqlParameter> parameters = filtroResult?.parametros ?? [];
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new Exception($"Coneão nula.");
        }

        var keyCache = await reader.ReadStringAuditor(max, uri, "", [], oCnn);
        var cacheKey = $"{uri}-GUTAtividades-{max}-{where.GetHashCode()}-GetListN-{keyCache}";
        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId)
        };
        return await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataListNAsync(max, uri, where, parameters, cancel), entryOptions, cancellationToken: token) ?? [];
    }

    private async Task<IEnumerable<NomeID>> GetDataListNAsync(int max, string uri, string where, List<SqlParameter> parameters, CancellationToken token)
    {
        var result = new List<NomeID>(max);
        var lista = await reader.ListarN(max, uri, where, parameters, DBGUTAtividadesDicInfo.CampoNome);
        foreach (var item in lista)
        {
            if (token.IsCancellationRequested)
                break;
            if (item?.FNome != null)
            {
                result.Add(new NomeID { Nome = item.FNome, ID = item.ID });
            }
        }

        return result;
    }

    private async Task<IEnumerable<GUTAtividadesResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}