// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class UltimosProcessosService
{
    private static (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterUltimosProcessos filtro)
    {
        var parameters = new List<SqlParameter>();
        if (filtro.Processo != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBUltimosProcessosDicInfo.Processo)}", filtro.Processo));
        }

        if (filtro.Processo_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBUltimosProcessosDicInfo.Processo)}_end", filtro.Processo_end));
        }

        if (!filtro.Quando.IsEmpty())
        {
            if (DateTime.TryParse(filtro.Quando, out var dataParam))
                parameters.Add(new($"@{nameof(DBUltimosProcessosDicInfo.Quando)}", dataParam));
        }

        if (!filtro.Quando_end.IsEmpty())
        {
            if (DateTime.TryParse(filtro.Quando_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBUltimosProcessosDicInfo.Quando)}_end", dataParam));
        }

        if (filtro.Quem != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBUltimosProcessosDicInfo.Quem)}", filtro.Quem));
        }

        if (filtro.Quem_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBUltimosProcessosDicInfo.Quem)}_end", filtro.Quem_end));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBUltimosProcessosDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
        }

        if (filtro.Codigo_filtro_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBUltimosProcessosDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
        }

        if (filtro.LogicalOperator.IsEmpty() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        if (!filtro.Processo.IsEmpty() && filtro.Processo_end.IsEmpty())
        {
            cWhere.Append(filtro.Processo <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBUltimosProcessosDicInfo.PTabelaNome}].[{DBUltimosProcessosDicInfo.Processo}] >= @{nameof(DBUltimosProcessosDicInfo.Processo)}");
        }
        else
        {
            cWhere.Append((filtro.Processo <= 0 && filtro.Processo_end <= 0) ? string.Empty : (!(filtro.Processo <= 0) && !(filtro.Processo_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBUltimosProcessosDicInfo.Processo} BETWEEN @{nameof(DBUltimosProcessosDicInfo.Processo)} AND @{nameof(DBUltimosProcessosDicInfo.Processo)}_end" : !(filtro.Processo <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBUltimosProcessosDicInfo.Processo} = @{nameof(DBUltimosProcessosDicInfo.Processo)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBUltimosProcessosDicInfo.Processo} <= @{nameof(DBUltimosProcessosDicInfo.Processo)}_end");
        }

        if (!filtro.Quando.IsEmpty() && filtro.Quando_end.IsEmpty())
        {
            cWhere.Append(filtro.Quando.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBUltimosProcessosDicInfo.PTabelaNome}].[{DBUltimosProcessosDicInfo.Quando}], 103) >= CONVERT(DATE, @{nameof(DBUltimosProcessosDicInfo.Quando)}, 103)");
        }
        else
        {
            cWhere.Append((filtro.Quando.IsEmpty() && filtro.Quando_end.IsEmpty()) ? string.Empty : (!(filtro.Quando.IsEmpty()) && !(filtro.Quando_end.IsEmpty())) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBUltimosProcessosDicInfo.Quando} BETWEEN @{nameof(DBUltimosProcessosDicInfo.Quando)} AND @{nameof(DBUltimosProcessosDicInfo.Quando)}_end" : !(filtro.Quando.IsEmpty()) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBUltimosProcessosDicInfo.Quando} = @{nameof(DBUltimosProcessosDicInfo.Quando)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBUltimosProcessosDicInfo.Quando} <= @{nameof(DBUltimosProcessosDicInfo.Quando)}_end");
        }

        if (!filtro.Quem.IsEmpty() && filtro.Quem_end.IsEmpty())
        {
            cWhere.Append(filtro.Quem <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBUltimosProcessosDicInfo.PTabelaNome}].[{DBUltimosProcessosDicInfo.Quem}] >= @{nameof(DBUltimosProcessosDicInfo.Quem)}");
        }
        else
        {
            cWhere.Append((filtro.Quem <= 0 && filtro.Quem_end <= 0) ? string.Empty : (!(filtro.Quem <= 0) && !(filtro.Quem_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBUltimosProcessosDicInfo.Quem} BETWEEN @{nameof(DBUltimosProcessosDicInfo.Quem)} AND @{nameof(DBUltimosProcessosDicInfo.Quem)}_end" : !(filtro.Quem <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBUltimosProcessosDicInfo.Quem} = @{nameof(DBUltimosProcessosDicInfo.Quem)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBUltimosProcessosDicInfo.Quem} <= @{nameof(DBUltimosProcessosDicInfo.Quem)}_end");
        }

        if (!filtro.Codigo_filtro.IsEmpty() && filtro.Codigo_filtro_end.IsEmpty())
        {
            cWhere.Append(filtro.Codigo_filtro <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBUltimosProcessosDicInfo.PTabelaNome}].[{DBUltimosProcessosDicInfo.CampoCodigo}] >= @{nameof(DBUltimosProcessosDicInfo.CampoCodigo)}");
        }
        else
        {
            cWhere.Append((filtro.Codigo_filtro <= 0 && filtro.Codigo_filtro_end <= 0) ? string.Empty : (!(filtro.Codigo_filtro <= 0) && !(filtro.Codigo_filtro_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBUltimosProcessosDicInfo.CampoCodigo} BETWEEN @{nameof(DBUltimosProcessosDicInfo.CampoCodigo)} AND @{nameof(DBUltimosProcessosDicInfo.CampoCodigo)}_end" : !(filtro.Codigo_filtro <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBUltimosProcessosDicInfo.CampoCodigo} = @{nameof(DBUltimosProcessosDicInfo.CampoCodigo)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBUltimosProcessosDicInfo.CampoCodigo} <= @{nameof(DBUltimosProcessosDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private static string ApplyWildCard(char wildcardChar, string value)
    {
        if (wildcardChar == '\0' || wildcardChar == ' ')
        {
            return value;
        }

        var result = $"{wildcardChar}{value.Replace(" ", wildcardChar.ToString())}{wildcardChar}";
        return result;
    }

    private async Task<IEnumerable<UltimosProcessosResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}