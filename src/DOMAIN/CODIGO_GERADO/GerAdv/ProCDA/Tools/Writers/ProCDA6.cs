// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Writers;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IProCDAWriter
{
    Task<FProCDA> WriteAsync(Models.ProCDA procda, int auditorQuem, MsiSqlConnection oCnn);
    Task Delete(ProCDAResponse procda, int operadorId, MsiSqlConnection oCnn);
}

public class ProCDAWriter(IFProCDAFactory procdaFactory) : IProCDAWriter
{
    private readonly IFProCDAFactory _procdaFactory = procdaFactory ?? throw new ArgumentNullException(nameof(procdaFactory));
    public virtual async Task Delete(ProCDAResponse procda, int operadorId, MsiSqlConnection oCnn)
    {
        await _procdaFactory.DeleteAsync(operadorId, procda.Id, oCnn);
    }

    public virtual async Task<FProCDA> WriteAsync(Models.ProCDA procda, int auditorQuem, MsiSqlConnection oCnn)
    {
        using var dbRec = await (procda.Id.IsEmptyIDNumber() ? _procdaFactory.CreateAsync() : _procdaFactory.CreateFromIdAsync(procda.Id, oCnn));
        dbRec.FProcesso = procda.Processo;
        dbRec.FNome = procda.Nome;
        dbRec.FNroInterno = procda.NroInterno;
        dbRec.FGUID = procda.GUID;
        dbRec.AuditorQuem = auditorQuem;
        await dbRec.UpdateAsync(oCnn);
        return dbRec;
    }
}