// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface ITipoModeloDocumentoValidation
{
    Task<bool> ValidateReg(Models.TipoModeloDocumento reg, ITipoModeloDocumentoService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, ITipoModeloDocumentoService service, IModelosDocumentosService modelosdocumentosService, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class TipoModeloDocumentoValidation : ITipoModeloDocumentoValidation
{
    public async Task<bool> CanDelete(int id, ITipoModeloDocumentoService service, IModelosDocumentosService modelosdocumentosService, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        var modelosdocumentosExists0 = await modelosdocumentosService.Filter(new Filters.FilterModelosDocumentos { TipoModeloDocumento = id }, uri);
        if (modelosdocumentosExists0 != null && modelosdocumentosExists0.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Modelos Documentos associados a ele.");
        return true;
    }

    private bool ValidSizes(Models.TipoModeloDocumento reg)
    {
        if (reg.Nome != null && reg.Nome.Length > 50)
            throw new SGValidationException($"Nome deve ter no máximo 50 caracteres.");
        if (reg.GUID != null && reg.GUID.Length > 100)
            throw new SGValidationException($"GUID deve ter no máximo 100 caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.TipoModeloDocumento reg, ITipoModeloDocumentoService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Nome))
            throw new SGValidationException("Nome é obrigatório");
        if (await IsDuplicado(reg, service, uri))
            throw new SGValidationException($"Tipo Modelo Documento '{reg.Nome}'  - Nome");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        return true;
    }

    private async Task<bool> IsDuplicado(Models.TipoModeloDocumento reg, ITipoModeloDocumentoService service, string uri)
    {
        var existingTipoModeloDocumento = (await service.Filter(new Filters.FilterTipoModeloDocumento { Nome = reg.Nome }, uri)).FirstOrDefault(); // TRACK 10042025
        return existingTipoModeloDocumento != null && existingTipoModeloDocumento.Id > 0 && existingTipoModeloDocumento.Id != reg.Id;
    }
}