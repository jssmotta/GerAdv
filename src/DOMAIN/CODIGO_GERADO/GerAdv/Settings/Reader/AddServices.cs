#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Readers;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public static class AddServices
{
    public static void Add(WebApplicationBuilder builder)
    {
        builder.Services.AddSingleton<IAcaoReader, Acao>();
        builder.Services.AddSingleton<IAdvogadosReader, Advogados>();
        builder.Services.AddSingleton<IAgendaReader, Agenda>();
        builder.Services.AddSingleton<IAgenda2AgendaReader, Agenda2Agenda>();
        builder.Services.AddSingleton<IAgendaFinanceiroReader, AgendaFinanceiro>();
        builder.Services.AddSingleton<IAgendaQuemReader, AgendaQuem>();
        builder.Services.AddSingleton<IAgendaRecordsReader, AgendaRecords>();
        builder.Services.AddSingleton<IAgendaRepetirReader, AgendaRepetir>();
        builder.Services.AddSingleton<IAgendaRepetirDiasReader, AgendaRepetirDias>();
        builder.Services.AddSingleton<IAgendaStatusReader, AgendaStatus>();
        builder.Services.AddSingleton<IAlarmSMSReader, AlarmSMS>();
        builder.Services.AddSingleton<IAlertasReader, Alertas>();
        builder.Services.AddSingleton<IAlertasEnviadosReader, AlertasEnviados>();
        builder.Services.AddSingleton<IAndamentosMDReader, AndamentosMD>();
        builder.Services.AddSingleton<IAndCompReader, AndComp>();
        builder.Services.AddSingleton<IAnexamentoRegistrosReader, AnexamentoRegistros>();
        builder.Services.AddSingleton<IApensoReader, Apenso>();
        builder.Services.AddSingleton<IApenso2Reader, Apenso2>();
        builder.Services.AddSingleton<IAreaReader, Area>();
        builder.Services.AddSingleton<IAreasJusticaReader, AreasJustica>();
        builder.Services.AddSingleton<IAtividadesReader, Atividades>();
        builder.Services.AddSingleton<IAuditor4KReader, Auditor4K>();
        builder.Services.AddSingleton<IBensClassificacaoReader, BensClassificacao>();
        builder.Services.AddSingleton<IBensMateriaisReader, BensMateriais>();
        builder.Services.AddSingleton<ICargosReader, Cargos>();
        builder.Services.AddSingleton<ICargosEscReader, CargosEsc>();
        builder.Services.AddSingleton<ICargosEscClassReader, CargosEscClass>();
        builder.Services.AddSingleton<ICidadeReader, Cidade>();
        builder.Services.AddSingleton<IClientesReader, Clientes>();
        builder.Services.AddSingleton<IClientesSociosReader, ClientesSocios>();
        builder.Services.AddSingleton<IColaboradoresReader, Colaboradores>();
        builder.Services.AddSingleton<IContaCorrenteReader, ContaCorrente>();
        builder.Services.AddSingleton<IContatoCRMReader, ContatoCRM>();
        builder.Services.AddSingleton<IContatoCRMOperadorReader, ContatoCRMOperador>();
        builder.Services.AddSingleton<IContatoCRMViewReader, ContatoCRMView>();
        builder.Services.AddSingleton<IContratosReader, Contratos>();
        builder.Services.AddSingleton<IDadosProcuracaoReader, DadosProcuracao>();
        builder.Services.AddSingleton<IDiario2Reader, Diario2>();
        builder.Services.AddSingleton<IDivisaoTribunalReader, DivisaoTribunal>();
        builder.Services.AddSingleton<IDocsRecebidosItensReader, DocsRecebidosItens>();
        builder.Services.AddSingleton<IDocumentosReader, Documentos>();
        builder.Services.AddSingleton<IEMPClassRiscosReader, EMPClassRiscos>();
        builder.Services.AddSingleton<IEnderecosReader, Enderecos>();
        builder.Services.AddSingleton<IEnderecoSistemaReader, EnderecoSistema>();
        builder.Services.AddSingleton<IEndTitReader, EndTit>();
        builder.Services.AddSingleton<IEnquadramentoEmpresaReader, EnquadramentoEmpresa>();
        builder.Services.AddSingleton<IEscritoriosReader, Escritorios>();
        builder.Services.AddSingleton<IEventoPrazoAgendaReader, EventoPrazoAgenda>();
        builder.Services.AddSingleton<IFaseReader, Fase>();
        builder.Services.AddSingleton<IFornecedoresReader, Fornecedores>();
        builder.Services.AddSingleton<IForoReader, Foro>();
        builder.Services.AddSingleton<IFuncaoReader, Funcao>();
        builder.Services.AddSingleton<IFuncionariosReader, Funcionarios>();
        builder.Services.AddSingleton<IGraphReader, Graph>();
        builder.Services.AddSingleton<IGruposEmpresasReader, GruposEmpresas>();
        builder.Services.AddSingleton<IGruposEmpresasCliReader, GruposEmpresasCli>();
        builder.Services.AddSingleton<IGUTAtividadesReader, GUTAtividades>();
        builder.Services.AddSingleton<IGUTAtividadesMatrizReader, GUTAtividadesMatriz>();
        builder.Services.AddSingleton<IGUTMatrizReader, GUTMatriz>();
        builder.Services.AddSingleton<IGUTPeriodicidadeReader, GUTPeriodicidade>();
        builder.Services.AddSingleton<IGUTPeriodicidadeStatusReader, GUTPeriodicidadeStatus>();
        builder.Services.AddSingleton<IGUTTipoReader, GUTTipo>();
        builder.Services.AddSingleton<IHistoricoReader, Historico>();
        builder.Services.AddSingleton<IHonorariosDadosContratoReader, HonorariosDadosContrato>();
        builder.Services.AddSingleton<IHorasTrabReader, HorasTrab>();
        builder.Services.AddSingleton<IInstanciaReader, Instancia>();
        builder.Services.AddSingleton<IJusticaReader, Justica>();
        builder.Services.AddSingleton<ILigacoesReader, Ligacoes>();
        builder.Services.AddSingleton<ILivroCaixaReader, LivroCaixa>();
        builder.Services.AddSingleton<ILivroCaixaClientesReader, LivroCaixaClientes>();
        builder.Services.AddSingleton<IModelosDocumentosReader, ModelosDocumentos>();
        builder.Services.AddSingleton<INECompromissosReader, NECompromissos>();
        builder.Services.AddSingleton<INENotasReader, NENotas>();
        builder.Services.AddSingleton<INEPalavrasChavesReader, NEPalavrasChaves>();
        builder.Services.AddSingleton<IObjetosReader, Objetos>();
        builder.Services.AddSingleton<IOperadorReader, Operador>();
        builder.Services.AddSingleton<IOperadorEMailPopupReader, OperadorEMailPopup>();
        builder.Services.AddSingleton<IOperadoresReader, Operadores>();
        builder.Services.AddSingleton<IOperadorGrupoReader, OperadorGrupo>();
        builder.Services.AddSingleton<IOperadorGruposReader, OperadorGrupos>();
        builder.Services.AddSingleton<IOperadorGruposAgendaReader, OperadorGruposAgenda>();
        builder.Services.AddSingleton<IOperadorGruposAgendaOperadoresReader, OperadorGruposAgendaOperadores>();
        builder.Services.AddSingleton<IOponentesReader, Oponentes>();
        builder.Services.AddSingleton<IOponentesRepLegalReader, OponentesRepLegal>();
        builder.Services.AddSingleton<IOutrasPartesClienteReader, OutrasPartesCliente>();
        builder.Services.AddSingleton<IPaisesReader, Paises>();
        builder.Services.AddSingleton<IParceriaProcReader, ParceriaProc>();
        builder.Services.AddSingleton<IParteClienteOutrasReader, ParteClienteOutras>();
        builder.Services.AddSingleton<IPenhoraReader, Penhora>();
        builder.Services.AddSingleton<IPenhoraStatusReader, PenhoraStatus>();
        builder.Services.AddSingleton<IPoderJudiciarioAssociadoReader, PoderJudiciarioAssociado>();
        builder.Services.AddSingleton<IPontoVirtualReader, PontoVirtual>();
        builder.Services.AddSingleton<IPontoVirtualAcessosReader, PontoVirtualAcessos>();
        builder.Services.AddSingleton<IPosicaoOutrasPartesReader, PosicaoOutrasPartes>();
        builder.Services.AddSingleton<IPrecatoriaReader, Precatoria>();
        builder.Services.AddSingleton<IPreClientesReader, PreClientes>();
        builder.Services.AddSingleton<IPrepostosReader, Prepostos>();
        builder.Services.AddSingleton<IProCDAReader, ProCDA>();
        builder.Services.AddSingleton<IProcessosReader, Processos>();
        builder.Services.AddSingleton<IProcessosObsReportReader, ProcessosObsReport>();
        builder.Services.AddSingleton<IProcessosParadosReader, ProcessosParados>();
        builder.Services.AddSingleton<IProcessOutputEngineReader, ProcessOutputEngine>();
        builder.Services.AddSingleton<IProcessOutPutIDsReader, ProcessOutPutIDs>();
        builder.Services.AddSingleton<IProcessOutputRequestReader, ProcessOutputRequest>();
        builder.Services.AddSingleton<IProcessOutputSourcesReader, ProcessOutputSources>();
        builder.Services.AddSingleton<IProDepositosReader, ProDepositos>();
        builder.Services.AddSingleton<IProDespesasReader, ProDespesas>();
        builder.Services.AddSingleton<IProObservacoesReader, ProObservacoes>();
        builder.Services.AddSingleton<IProPartesReader, ProPartes>();
        builder.Services.AddSingleton<IProProcuradoresReader, ProProcuradores>();
        builder.Services.AddSingleton<IProResumosReader, ProResumos>();
        builder.Services.AddSingleton<IProSucumbenciaReader, ProSucumbencia>();
        builder.Services.AddSingleton<IProTipoBaixaReader, ProTipoBaixa>();
        builder.Services.AddSingleton<IProValoresReader, ProValores>();
        builder.Services.AddSingleton<IRamalReader, Ramal>();
        builder.Services.AddSingleton<IRecadosReader, Recados>();
        builder.Services.AddSingleton<IRegimeTributacaoReader, RegimeTributacao>();
        builder.Services.AddSingleton<IReuniaoReader, Reuniao>();
        builder.Services.AddSingleton<IReuniaoPessoasReader, ReuniaoPessoas>();
        builder.Services.AddSingleton<IRitoReader, Rito>();
        builder.Services.AddSingleton<IServicosReader, Servicos>();
        builder.Services.AddSingleton<ISetorReader, Setor>();
        builder.Services.AddSingleton<ISituacaoReader, Situacao>();
        builder.Services.AddSingleton<ISMSAliceReader, SMSAlice>();
        builder.Services.AddSingleton<IStatusAndamentoReader, StatusAndamento>();
        builder.Services.AddSingleton<IStatusBiuReader, StatusBiu>();
        builder.Services.AddSingleton<IStatusHTrabReader, StatusHTrab>();
        builder.Services.AddSingleton<IStatusInstanciaReader, StatusInstancia>();
        builder.Services.AddSingleton<IStatusTarefasReader, StatusTarefas>();
        builder.Services.AddSingleton<ITerceirosReader, Terceiros>();
        builder.Services.AddSingleton<ITipoCompromissoReader, TipoCompromisso>();
        builder.Services.AddSingleton<ITipoContatoCRMReader, TipoContatoCRM>();
        builder.Services.AddSingleton<ITipoEMailReader, TipoEMail>();
        builder.Services.AddSingleton<ITipoEnderecoReader, TipoEndereco>();
        builder.Services.AddSingleton<ITipoEnderecoSistemaReader, TipoEnderecoSistema>();
        builder.Services.AddSingleton<ITipoModeloDocumentoReader, TipoModeloDocumento>();
        builder.Services.AddSingleton<ITipoOrigemSucumbenciaReader, TipoOrigemSucumbencia>();
        builder.Services.AddSingleton<ITipoProDespositoReader, TipoProDesposito>();
        builder.Services.AddSingleton<ITipoRecursoReader, TipoRecurso>();
        builder.Services.AddSingleton<ITiposAcaoReader, TiposAcao>();
        builder.Services.AddSingleton<ITipoStatusBiuReader, TipoStatusBiu>();
        builder.Services.AddSingleton<ITipoValorProcessoReader, TipoValorProcesso>();
        builder.Services.AddSingleton<ITribEnderecosReader, TribEnderecos>();
        builder.Services.AddSingleton<ITribunalReader, Tribunal>();
        builder.Services.AddSingleton<IUFReader, UF>();
        builder.Services.AddSingleton<IUltimosProcessosReader, UltimosProcessos>();
        builder.Services.AddSingleton<IViaRecebimentoReader, ViaRecebimento>();
        builder.Services.AddSingleton<IAgendaRelatorioReader, AgendaRelatorio>();
        builder.Services.AddSingleton<IAgendaSemanaReader, AgendaSemana>();
    }
}