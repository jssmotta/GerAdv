// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IDadosProcuracaoValidation
{
    Task<bool> ValidateReg(Models.DadosProcuracao reg, IDadosProcuracaoService service, IClientesReader clientesReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int? id, IDadosProcuracaoService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class DadosProcuracaoValidation : IDadosProcuracaoValidation
{
    public async Task<bool> CanDelete(int? id, IDadosProcuracaoService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id == null || id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id ?? default, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.DadosProcuracao reg)
    {
        if (reg.EstadoCivil != null && reg.EstadoCivil.Length > DBDadosProcuracaoDicInfo.PrcEstadoCivil.FTamanho)
            throw new SGValidationException($"EstadoCivil deve ter no máximo {DBDadosProcuracaoDicInfo.PrcEstadoCivil.FTamanho} caracteres.");
        if (reg.Nacionalidade != null && reg.Nacionalidade.Length > DBDadosProcuracaoDicInfo.PrcNacionalidade.FTamanho)
            throw new SGValidationException($"Nacionalidade deve ter no máximo {DBDadosProcuracaoDicInfo.PrcNacionalidade.FTamanho} caracteres.");
        if (reg.Profissao != null && reg.Profissao.Length > DBDadosProcuracaoDicInfo.PrcProfissao.FTamanho)
            throw new SGValidationException($"Profissao deve ter no máximo {DBDadosProcuracaoDicInfo.PrcProfissao.FTamanho} caracteres.");
        if (reg.CTPS != null && reg.CTPS.Length > DBDadosProcuracaoDicInfo.PrcCTPS.FTamanho)
            throw new SGValidationException($"CTPS deve ter no máximo {DBDadosProcuracaoDicInfo.PrcCTPS.FTamanho} caracteres.");
        if (reg.PisPasep != null && reg.PisPasep.Length > DBDadosProcuracaoDicInfo.PrcPisPasep.FTamanho)
            throw new SGValidationException($"PisPasep deve ter no máximo {DBDadosProcuracaoDicInfo.PrcPisPasep.FTamanho} caracteres.");
        if (reg.GUID != null && reg.GUID.Length > DBDadosProcuracaoDicInfo.PrcGUID.FTamanho)
            throw new SGValidationException($"GUID deve ter no máximo {DBDadosProcuracaoDicInfo.PrcGUID.FTamanho} caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.DadosProcuracao reg, IDadosProcuracaoService service, IClientesReader clientesReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.Cliente == 0)
            throw new SGValidationException("Cliente é obrigatório.");
        if (reg.GUID.IsEmpty())
            throw new SGValidationException("GUID é obrigatório.");
        // Clientes
        {
            var regClientes = await clientesReader.Read(reg.Cliente, oCnn);
            if (regClientes == null || regClientes.Id != reg.Cliente)
            {
                throw new SGValidationException($"Clientes não encontrado ({regClientes?.Id}).");
            }
        }

        return true;
    }
}