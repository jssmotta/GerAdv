// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
'use client';
import { CRUD_CONSTANTS } from '@/app/tools/crud';
import { AgendaRelatorioApi, AgendaRelatorioApiError } from '../Apis/ApiAgendaRelatorio';
import { FilterAgendaRelatorio } from '../Filters/AgendaRelatorio';
import { IAgendaRelatorio } from '../Interfaces/interface.AgendaRelatorio';
import { AgendaRelatorioEmpty } from '../../Models/AgendaRelatorio';

export class AgendaRelatorioValidator {
  static validateAgendaRelatorio(agendarelatorio: IAgendaRelatorio): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];

    // Atualmente não há validações de regras de negócio específicas
    // Todas as validações são feitas nos inputs correspondentes
    
    return {
      isValid: errors.length === 0,
      errors
    };
  }
}

export interface IAgendaRelatorioService {
  fetchAgendaRelatorioById: (id: number) => Promise<IAgendaRelatorio>;
  saveAgendaRelatorio: (agendarelatorio: IAgendaRelatorio) => Promise<IAgendaRelatorio>;  
  
  getAll: (filtro?: FilterAgendaRelatorio) => Promise<IAgendaRelatorio[]>;
  deleteAgendaRelatorio: (id: number) => Promise<void>;
  validateAgendaRelatorio: (agendarelatorio: IAgendaRelatorio) => { isValid: boolean; errors: string[] };
}

export class AgendaRelatorioService implements IAgendaRelatorioService {
  constructor(private api: AgendaRelatorioApi) {}

  async fetchAgendaRelatorioById(id: number): Promise<IAgendaRelatorio> {
    if (id <= 0) {
      throw new AgendaRelatorioApiError('ID inválido', 400, 'INVALID_ID');
    }

    try {
      return AgendaRelatorioEmpty();

    } catch (error) {
      if (error instanceof AgendaRelatorioApiError) {
        throw error;
      }
      throw new AgendaRelatorioApiError('Erro ao buscar agendarelatorio', 500, 'FETCH_ERROR', error);
    }
  }

  async saveAgendaRelatorio(agendarelatorio: IAgendaRelatorio): Promise<IAgendaRelatorio> {    
    const validation = this.validateAgendaRelatorio(agendarelatorio);
    if (!validation.isValid) {
      throw new AgendaRelatorioApiError(
        `Dados inválidos: ${validation.errors.join(', ')}`,
        400,
        'VALIDATION_ERROR'
      );
    }

    try {
      const response = await this.api.addAndUpdate(agendarelatorio);
      return response.data;
    } catch (error) {
      if (error instanceof AgendaRelatorioApiError) {
        throw error;
      }
      throw new AgendaRelatorioApiError('Erro ao salvar agendarelatorio', 500, 'SAVE_ERROR', error);
    }
  }

  
  

   async getAll(
    filtro?: FilterAgendaRelatorio,
    onOnlineData?: (data: IAgendaRelatorio[]) => void
  ): Promise<IAgendaRelatorio[]> {
    try {
      // Carrega dados offline primeiro
      const preloadResponse = await this.api.filterPreload(0, filtro ?? {});
      const offlineData = preloadResponse?.data || [];

      if (onOnlineData) {
        // Busca dados online em background e envia via callback
        this.api.filter(0, filtro ?? {})
          .then(response => {
            if (response?.data) {
              onOnlineData(response.data);
            }
          })
          .catch(error => {
            console.log('Error fetching online AgendaRelatorio');
          });
        // Retorna offline imediatamente
        return offlineData;
      } else {
        // Se não há callback, aguarda dados online e retorna
        try {
          const onlineResponse = await this.api.filter(0, filtro ?? {});
          return onlineResponse?.data || offlineData;
        } catch (error) {
          console.log('Error fetching online AgendaRelatorio');
          return offlineData;
        }
      }
    } catch (error) {
      console.log('Error fetching all AgendaRelatorio:');
      return [];
    }
  }


  async deleteAgendaRelatorio(id: number): Promise<void> {
    if (id <= 0) {
      throw new AgendaRelatorioApiError('ID inválido para exclusão', 400, 'INVALID_ID');
    }

    try {
      await this.api.delete(id);
    } catch (error) {
      if (error instanceof AgendaRelatorioApiError) {
        throw error;
      }
      throw new AgendaRelatorioApiError('Erro ao excluir agendarelatorio', 500, 'DELETE_ERROR', error);
    }
  }

  validateAgendaRelatorio(agendarelatorio: IAgendaRelatorio): { isValid: boolean; errors: string[] } {
    return AgendaRelatorioValidator.validateAgendaRelatorio(agendarelatorio);
  }
}