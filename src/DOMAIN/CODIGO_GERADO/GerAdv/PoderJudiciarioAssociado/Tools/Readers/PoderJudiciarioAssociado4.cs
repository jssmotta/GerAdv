// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Readers;
public partial class PoderJudiciarioAssociadoReader(IFPoderJudiciarioAssociadoFactory poderjudiciarioassociadoFactory) : IPoderJudiciarioAssociadoReader
{
    private readonly IFPoderJudiciarioAssociadoFactory _poderjudiciarioassociadoFactory = poderjudiciarioassociadoFactory;
    public async Task<IEnumerable<DBNomeID>> ListarN(int max, string uri, string cWhere, List<SqlParameter> parameters, string order) => await DevourerSqlData.ListarNomeID(BuildSqlQuery("pjaCodigo, pjaGUID", cWhere, order, max), parameters, uri, caching: DevourerOne.PCachingDefault, max: max);
    public async Task<IEnumerable<PoderJudiciarioAssociadoResponseAll>> Listar(int max, string uri, string cWhere, List<SqlParameter> parameters, string order, CancellationToken cancellationToken) => await ListarTabela(BuildSqlQuery(DBPoderJudiciarioAssociado.CamposSqlX, cWhere, order, max), parameters, uri, caching: DevourerOne.PCachingDefault, max: max, cancellationToken: cancellationToken);
    private async Task<IEnumerable<PoderJudiciarioAssociadoResponseAll>> ListarTabela(string sql, List<SqlParameter> parameters, string uri, bool caching = DevourerOne.PCachingDefault, int max = 200, CancellationToken cancellationToken = default)
    {
        var result = new List<PoderJudiciarioAssociadoResponseAll>(max);
        await using var connection = Configuracoes.GetConnectionByUri(uri);
        await using var cmd = new SqlCommand(cmdText: ConfiguracoesDBT.CmdSql(sql), connection: connection?.InnerConnection)
        {
            CommandTimeout = 30
        };
        foreach (var param in parameters)
        {
            if (!cmd.Parameters.Contains(param.ParameterName))
            {
                var newParam = new SqlParameter(param.ParameterName, param.Value)
                {
                    SqlDbType = param.SqlDbType,
                    Direction = param.Direction,
                    Size = param.Size,
                    Precision = param.Precision,
                    Scale = param.Scale
                };
                cmd.Parameters.Add(newParam);
            }
        }

        await using var reader = await cmd.ExecuteReaderAsync(CommandBehavior.SingleResult);
        while (await reader.ReadAsync())
        {
            if (cancellationToken.IsCancellationRequested)
                return result;
            result.Add(ReadAll(_poderjudiciarioassociadoFactory.CreateFromReader(reader), reader)!);
        }

        return result;
    }

    public async Task<PoderJudiciarioAssociadoResponse?> Read(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _poderjudiciarioassociadoFactory.CreateFromIdAsync(id, oCnn);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public async Task<Models.PoderJudiciarioAssociado?> ReadM(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _poderjudiciarioassociadoFactory.CreateFromIdAsync(id, oCnn);
        var poderjudiciarioassociado = new Models.PoderJudiciarioAssociado
        {
            Id = dbRec.ID,
            Justica = dbRec.FJustica,
            JusticaNome = dbRec.FJusticaNome ?? string.Empty,
            Area = dbRec.FArea,
            AreaNome = dbRec.FAreaNome ?? string.Empty,
            Tribunal = dbRec.FTribunal,
            TribunalNome = dbRec.FTribunalNome ?? string.Empty,
            Foro = dbRec.FForo,
            ForoNome = dbRec.FForoNome ?? string.Empty,
            Cidade = dbRec.FCidade,
            SubDivisaoNome = dbRec.FSubDivisaoNome ?? string.Empty,
            CidadeNome = dbRec.FCidadeNome ?? string.Empty,
            SubDivisao = dbRec.FSubDivisao,
            Tipo = dbRec.FTipo,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        return poderjudiciarioassociado;
    }

    public PoderJudiciarioAssociadoResponse? Read(FPoderJudiciarioAssociado dbRec, MsiSqlConnection oCnn)
    {
        return Read(dbRec);
    }

    public PoderJudiciarioAssociadoResponse? Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn)
    {
        using var dbRec = _poderjudiciarioassociadoFactory.CreateFromParameters(parameters, oCnn, sqlWhere: where);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public PoderJudiciarioAssociadoResponse? Read(FPoderJudiciarioAssociado dbRec) // Track 001.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var poderjudiciarioassociado = new PoderJudiciarioAssociadoResponse
        {
            Id = dbRec.ID,
            Justica = dbRec.FJustica,
            JusticaNome = dbRec.FJusticaNome ?? string.Empty,
            Area = dbRec.FArea,
            AreaNome = dbRec.FAreaNome ?? string.Empty,
            Tribunal = dbRec.FTribunal,
            TribunalNome = dbRec.FTribunalNome ?? string.Empty,
            Foro = dbRec.FForo,
            ForoNome = dbRec.FForoNome ?? string.Empty,
            Cidade = dbRec.FCidade,
            SubDivisaoNome = dbRec.FSubDivisaoNome ?? string.Empty,
            CidadeNome = dbRec.FCidadeNome ?? string.Empty,
            SubDivisao = dbRec.FSubDivisao,
            Tipo = dbRec.FTipo,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        return poderjudiciarioassociado;
    }

    public PoderJudiciarioAssociadoResponse? Read(SG.GerAdv.DBPoderJudiciarioAssociado dbRec) // Track 002.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var poderjudiciarioassociado = new PoderJudiciarioAssociadoResponse
        {
            Id = dbRec.ID,
            Justica = dbRec.FJustica,
            JusticaNome = dbRec.FJusticaNome ?? string.Empty,
            Area = dbRec.FArea,
            AreaNome = dbRec.FAreaNome ?? string.Empty,
            Tribunal = dbRec.FTribunal,
            TribunalNome = dbRec.FTribunalNome ?? string.Empty,
            Foro = dbRec.FForo,
            ForoNome = dbRec.FForoNome ?? string.Empty,
            Cidade = dbRec.FCidade,
            SubDivisaoNome = dbRec.FSubDivisaoNome ?? string.Empty,
            CidadeNome = dbRec.FCidadeNome ?? string.Empty,
            SubDivisao = dbRec.FSubDivisao,
            Tipo = dbRec.FTipo,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        return poderjudiciarioassociado;
    }

    public PoderJudiciarioAssociadoResponseAll? ReadAll(FPoderJudiciarioAssociado dbRec, IDataRecord dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var poderjudiciarioassociado = new PoderJudiciarioAssociadoResponseAll
        {
            Id = dbRec.ID,
            Justica = dbRec.FJustica,
            JusticaNome = dbRec.FJusticaNome ?? string.Empty,
            Area = dbRec.FArea,
            AreaNome = dbRec.FAreaNome ?? string.Empty,
            Tribunal = dbRec.FTribunal,
            TribunalNome = dbRec.FTribunalNome ?? string.Empty,
            Foro = dbRec.FForo,
            ForoNome = dbRec.FForoNome ?? string.Empty,
            Cidade = dbRec.FCidade,
            SubDivisaoNome = dbRec.FSubDivisaoNome ?? string.Empty,
            CidadeNome = dbRec.FCidadeNome ?? string.Empty,
            SubDivisao = dbRec.FSubDivisao,
            Tipo = dbRec.FTipo,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        try
        {
            poderjudiciarioassociado.NomeJustica = dr[DBJusticaDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            poderjudiciarioassociado.DescricaoArea = dr[DBAreaDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            poderjudiciarioassociado.NomeTribunal = dr[DBTribunalDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            poderjudiciarioassociado.NomeForo = dr[DBForoDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            poderjudiciarioassociado.NomeCidade = dr[DBCidadeDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return poderjudiciarioassociado;
    }

    public PoderJudiciarioAssociadoResponseAll? ReadAll(SG.GerAdv.DBPoderJudiciarioAssociado dbRec, DataRow dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var poderjudiciarioassociado = new PoderJudiciarioAssociadoResponseAll
        {
            Id = dbRec.ID,
            Justica = dbRec.FJustica,
            JusticaNome = dbRec.FJusticaNome ?? string.Empty,
            Area = dbRec.FArea,
            AreaNome = dbRec.FAreaNome ?? string.Empty,
            Tribunal = dbRec.FTribunal,
            TribunalNome = dbRec.FTribunalNome ?? string.Empty,
            Foro = dbRec.FForo,
            ForoNome = dbRec.FForoNome ?? string.Empty,
            Cidade = dbRec.FCidade,
            SubDivisaoNome = dbRec.FSubDivisaoNome ?? string.Empty,
            CidadeNome = dbRec.FCidadeNome ?? string.Empty,
            SubDivisao = dbRec.FSubDivisao,
            Tipo = dbRec.FTipo,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        try
        {
            poderjudiciarioassociado.NomeJustica = dr[DBJusticaDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            poderjudiciarioassociado.DescricaoArea = dr[DBAreaDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            poderjudiciarioassociado.NomeTribunal = dr[DBTribunalDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            poderjudiciarioassociado.NomeForo = dr[DBForoDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            poderjudiciarioassociado.NomeCidade = dr[DBCidadeDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return poderjudiciarioassociado;
    }
}