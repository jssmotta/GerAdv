// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class FuncionariosWriterTests
{
    private readonly Mock<IFFuncionariosFactory> _mockFuncionariosFactory;
    private readonly Mock<FFuncionarios> _mockFFuncionarios;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly FuncionariosWriter _funcionariosWriter;
    public FuncionariosWriterTests()
    {
        _mockFuncionariosFactory = new Mock<IFFuncionariosFactory>();
        _mockFFuncionarios = new Mock<FFuncionarios>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _funcionariosWriter = new FuncionariosWriter(_mockFuncionariosFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var funcionarios = CreateValidFuncionariosModel();
        funcionarios.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockFuncionariosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFFuncionarios.Object);
        _mockFFuncionarios.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _funcionariosWriter.WriteAsync(funcionarios, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFFuncionarios.Object);
        _mockFuncionariosFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockFuncionariosFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFFuncionarios.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var funcionarios = CreateValidFuncionariosModel();
        funcionarios.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockFuncionariosFactory.Setup(x => x.CreateFromIdAsync(funcionarios.Id, _mockConnection.Object)).ReturnsAsync(_mockFFuncionarios.Object);
        _mockFFuncionarios.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _funcionariosWriter.WriteAsync(funcionarios, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFFuncionarios.Object);
        _mockFuncionariosFactory.Verify(x => x.CreateFromIdAsync(funcionarios.Id, _mockConnection.Object), Times.Once);
        _mockFuncionariosFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFFuncionarios.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var funcionarios = CreateValidFuncionariosModel();
        var auditorQuem = 99;
        _mockFuncionariosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFFuncionarios.Object);
        _mockFFuncionarios.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _funcionariosWriter.WriteAsync(funcionarios, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFFuncionarios.Object);
        _mockFFuncionarios.VerifySet(x => x.FEMailPro = funcionarios.EMailPro, Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FCargo = funcionarios.Cargo, Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FNome = funcionarios.Nome, Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FFuncao = funcionarios.Funcao, Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FSexo = funcionarios.Sexo, Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FRegistro = funcionarios.Registro, Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FCPF = It.IsAny<string>(), Times.Once); // CPF é limpo pelo ClearInputCpf()
        _mockFFuncionarios.VerifySet(x => x.FRG = funcionarios.RG, Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FTipo = funcionarios.Tipo, Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FObservacao = funcionarios.Observacao, Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FEndereco = funcionarios.Endereco, Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FBairro = funcionarios.Bairro, Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FCidade = funcionarios.Cidade, Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FCEP = It.IsAny<string>(), Times.Once); // CEP é limpo pelo ClearInputCep()
        _mockFFuncionarios.VerifySet(x => x.FContato = funcionarios.Contato, Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FFax = funcionarios.Fax, Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FFone = funcionarios.Fone, Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FEMail = funcionarios.EMail, Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FPeriodo_Ini = funcionarios.Periodo_Ini.ToString(), Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FPeriodo_Fim = funcionarios.Periodo_Fim.ToString(), Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FCTPSNumero = funcionarios.CTPSNumero, Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FCTPSSerie = funcionarios.CTPSSerie, Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FPIS = funcionarios.PIS, Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FSalario = funcionarios.Salario, Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FCTPSDtEmissao = funcionarios.CTPSDtEmissao.ToString(), Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FDtNasc = funcionarios.DtNasc.ToString(), Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FData = funcionarios.Data, Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FLiberaAgenda = funcionarios.LiberaAgenda, Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FPasta = funcionarios.Pasta, Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FClass = funcionarios.Class, Times.Once);
        _mockFFuncionarios.VerifySet(x => x.FGUID = funcionarios.GUID, Times.Once);
        _mockFFuncionarios.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithNullPeriodo_Ini_ShouldNotSetFPeriodo_Ini()
    {
        // Arrange
        var funcionarios = CreateValidFuncionariosModel();
        funcionarios.Periodo_Ini = null;
        var auditorQuem = 123;
        _mockFuncionariosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFFuncionarios.Object);
        _mockFFuncionarios.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _funcionariosWriter.WriteAsync(funcionarios, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFFuncionarios.VerifySet(x => x.FPeriodo_Ini = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WithNullPeriodo_Fim_ShouldNotSetFPeriodo_Fim()
    {
        // Arrange
        var funcionarios = CreateValidFuncionariosModel();
        funcionarios.Periodo_Fim = null;
        var auditorQuem = 123;
        _mockFuncionariosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFFuncionarios.Object);
        _mockFFuncionarios.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _funcionariosWriter.WriteAsync(funcionarios, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFFuncionarios.VerifySet(x => x.FPeriodo_Fim = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WithNullCTPSDtEmissao_ShouldNotSetFCTPSDtEmissao()
    {
        // Arrange
        var funcionarios = CreateValidFuncionariosModel();
        funcionarios.CTPSDtEmissao = null;
        var auditorQuem = 123;
        _mockFuncionariosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFFuncionarios.Object);
        _mockFFuncionarios.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _funcionariosWriter.WriteAsync(funcionarios, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFFuncionarios.VerifySet(x => x.FCTPSDtEmissao = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WithNullDtNasc_ShouldNotSetFDtNasc()
    {
        // Arrange
        var funcionarios = CreateValidFuncionariosModel();
        funcionarios.DtNasc = null;
        var auditorQuem = 123;
        _mockFuncionariosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFFuncionarios.Object);
        _mockFFuncionarios.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _funcionariosWriter.WriteAsync(funcionarios, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFFuncionarios.VerifySet(x => x.FDtNasc = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var funcionarios = CreateValidFuncionariosModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockFuncionariosFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _funcionariosWriter.WriteAsync(funcionarios, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var funcionarios = CreateValidFuncionariosModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockFuncionariosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFFuncionarios.Object);
        _mockFFuncionarios.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _funcionariosWriter.WriteAsync(funcionarios, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var funcionariosResponse = new FuncionariosResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockFuncionariosFactory.Setup(x => x.DeleteAsync(operadorId, funcionariosResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _funcionariosWriter.Delete(funcionariosResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockFuncionariosFactory.Verify(x => x.DeleteAsync(operadorId, funcionariosResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var funcionariosResponse = new FuncionariosResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockFuncionariosFactory.Setup(x => x.DeleteAsync(operadorId, funcionariosResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _funcionariosWriter.Delete(funcionariosResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var funcionariosResponse = new FuncionariosResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockFuncionariosFactory.Setup(x => x.DeleteAsync(operadorId, funcionariosResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _funcionariosWriter.Delete(funcionariosResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new FuncionariosWriter(_mockFuncionariosFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new FuncionariosWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.Funcionarios CreateValidFuncionariosModel()
    {
        return new Models.Funcionarios
        {
            Id = 0,
            EMailPro = "test@email.com",
            Cargo = 1,
            Nome = "João",
            Funcao = 1,
            Sexo = false,
            Registro = "AAAAAAAAAAAAAAAAAA",
            CPF = "544.506.718-13",
            RG = "12.345.678-9",
            Tipo = false,
            Observacao = "Observação teste",
            Endereco = "Rua das Flores, 123",
            Bairro = "Centro",
            Cidade = 1,
            CEP = "01234-567",
            Contato = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Fax = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Fone = "(11) 99999-9999",
            EMail = "test@email.com",
            Periodo_Ini = "24/04/1975",
            Periodo_Fim = "24/04/1975",
            CTPSNumero = "AAAAAAAAAAAAA",
            CTPSSerie = "AAAAAAAA",
            PIS = "AAAAAAAAAAAAAAAAAA",
            Salario = 0m,
            CTPSDtEmissao = "24/04/1975",
            DtNasc = "24/04/1975",
            Data = "27/05/2022",
            LiberaAgenda = false,
            Pasta = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Class = "A",
            GUID = Guid.NewGuid().ToString()
        };
    }
#endregion
}