// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class ReuniaoWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFReuniaoFactory> _mockReuniaoFactory;
    private readonly Mock<FReuniao> _mockFReuniao;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly ReuniaoWhere _reuniaoWhere;
    public ReuniaoWhereTests()
    {
        _mockReuniaoFactory = new Mock<IFReuniaoFactory>();
        _mockFReuniao = new Mock<FReuniao>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _reuniaoWhere = new ReuniaoWhere(_mockReuniaoFactory.Object);
    }

    public void Dispose()
    {
        _mockReuniaoFactory?.Reset();
        _mockFReuniao?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "27/05/2022")
        };
    }

    private void SetupMockFReuniao(int? Cliente = 1, int? IDAgenda = 1, string? Data = "27/05/2022", string? Pauta = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string? ATA = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string? HoraInicial = "04:04", string? HoraFinal = "27/05/2022", bool? Externa = false, string? HoraSaida = "04:04", string? HoraRetorno = "04:04", string? PrincipaisDecisoes = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    {
        _mockFReuniao.Setup(f => f.FCliente).Returns(Cliente ?? 0);
        _mockFReuniao.Setup(f => f.FIDAgenda).Returns(IDAgenda ?? 0);
        _mockFReuniao.Setup(f => f.FData).Returns(Data ?? string.Empty);
        _mockFReuniao.Setup(f => f.FPauta).Returns(Pauta ?? string.Empty);
        _mockFReuniao.Setup(f => f.FATA).Returns(ATA ?? string.Empty);
        _mockFReuniao.Setup(f => f.FHoraInicial).Returns(HoraInicial ?? string.Empty);
        _mockFReuniao.Setup(f => f.FHoraFinal).Returns(HoraFinal ?? string.Empty);
        _mockFReuniao.Setup(f => f.FExterna).Returns(Externa ?? false);
        _mockFReuniao.Setup(f => f.FHoraSaida).Returns(HoraSaida ?? string.Empty);
        _mockFReuniao.Setup(f => f.FHoraRetorno).Returns(HoraRetorno ?? string.Empty);
        _mockFReuniao.Setup(f => f.FPrincipaisDecisoes).Returns(PrincipaisDecisoes ?? string.Empty);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFReuniaoFactory>();
        // Act
        var reuniaoWhere = new ReuniaoWhere(mockFactory.Object);
        // Assert
        reuniaoWhere.Should().NotBeNull();
        reuniaoWhere.Should().BeAssignableTo<IReuniaoWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFReuniaoFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new ReuniaoWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnReuniaoResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFReuniao();
        _mockReuniaoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFReuniao.Object);
        // Act
        var result = _reuniaoWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.Cliente.Should().Be(1);
        result.IDAgenda.Should().Be(1);
        result.Data.Should().Be("27/05/2022");
        result.Pauta.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.ATA.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.HoraInicial.Should().Be("04:04");
        result.HoraFinal.Should().Be("27/05/2022");
        result.Externa.Should().Be(false);
        result.HoraSaida.Should().Be("04:04");
        result.HoraRetorno.Should().Be("04:04");
        result.PrincipaisDecisoes.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFReuniao(Cliente: null, IDAgenda: null, Data: null, Pauta: null, ATA: null, HoraInicial: null, HoraFinal: null, Externa: null, HoraSaida: null, HoraRetorno: null, PrincipaisDecisoes: null);
        _mockReuniaoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFReuniao.Object);
        // Act
        var result = _reuniaoWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Cliente.Should().Be(0);
        result.IDAgenda.Should().Be(0);
        result.Data.Should().Be(string.Empty);
        result.Pauta.Should().Be(string.Empty);
        result.ATA.Should().Be(string.Empty);
        result.HoraInicial.Should().Be(string.Empty);
        result.HoraFinal.Should().Be(string.Empty);
        result.Externa.Should().Be(false);
        result.HoraSaida.Should().Be(string.Empty);
        result.HoraRetorno.Should().Be(string.Empty);
        result.PrincipaisDecisoes.Should().Be(string.Empty);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFReuniao();
        _mockReuniaoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFReuniao.Object);
        // Act
        var result = _reuniaoWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockReuniaoFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFReuniao();
        _mockReuniaoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFReuniao.Object);
        // Act
        var result = _reuniaoWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockReuniaoFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFReuniao();
        _mockReuniaoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFReuniao.Object);
        // Act
        var result = _reuniaoWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockReuniaoFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFReuniao();
        _mockReuniaoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFReuniao.Object);
        // Act
        _reuniaoWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockReuniaoFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFReuniaoInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFReuniao.Setup(f => f.Dispose());
        SetupMockFReuniao();
        _mockReuniaoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFReuniao.Object);
        // Act
        _reuniaoWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFReuniao.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockReuniaoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _reuniaoWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFReuniao(Cliente: 1, IDAgenda: 1, Data: "27/05/2022", PautaoraInicial: "04:04", HoraFinal: "27/05/2022", Externa: false, HoraSaida: "04:04", HoraRetorno: "04:04", PrincipaisDecisoes: "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _mockReuniaoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFReuniao.Object);
        // Act
        var result = _reuniaoWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.Cliente.Should().Be(1);
        result.IDAgenda.Should().Be(1);
        result.Data.Should().Be("27/05/2022");
        result.Pauta.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.ATA.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.HoraInicial.Should().Be("04:04");
        result.HoraFinal.Should().Be("27/05/2022");
        result.Externa.Should().Be(false);
        result.HoraSaida.Should().Be("04:04");
        result.HoraRetorno.Should().Be("04:04");
        result.PrincipaisDecisoes.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "Data = @{DBReuniaoDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBReuniaoDicInfo.CampoNome}", "27/05/2022"),
        };
        SetupMockFReuniao();
        _mockReuniaoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFReuniao.Object);
        // Act
        _reuniaoWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockReuniaoFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBReuniaoDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }
#region DateTime Tests
#endregion
#endregion
}