// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface ITribunalValidation
{
    Task<bool> ValidateReg(Models.Tribunal reg, ITribunalService service, IAreaReader areaReader, IJusticaReader justicaReader, IInstanciaReader instanciaReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, ITribunalService service, IDivisaoTribunalService divisaotribunalService, IPoderJudiciarioAssociadoService poderjudiciarioassociadoService, ITribEnderecosService tribenderecosService, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class TribunalValidation : ITribunalValidation
{
    public async Task<bool> CanDelete(int id, ITribunalService service, IDivisaoTribunalService divisaotribunalService, IPoderJudiciarioAssociadoService poderjudiciarioassociadoService, ITribEnderecosService tribenderecosService, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        var divisaotribunalExists0 = await divisaotribunalService.Filter(new Filters.FilterDivisaoTribunal { Tribunal = id }, uri);
        if (divisaotribunalExists0 != null && divisaotribunalExists0.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Divisao Tribunal associados a ele.");
        var poderjudiciarioassociadoExists1 = await poderjudiciarioassociadoService.Filter(new Filters.FilterPoderJudiciarioAssociado { Tribunal = id }, uri);
        if (poderjudiciarioassociadoExists1 != null && poderjudiciarioassociadoExists1.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Poder Judiciario Associado associados a ele.");
        var tribenderecosExists2 = await tribenderecosService.Filter(new Filters.FilterTribEnderecos { Tribunal = id }, uri);
        if (tribenderecosExists2 != null && tribenderecosExists2.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Trib Endereços associados a ele.");
        return true;
    }

    private bool ValidSizes(Models.Tribunal reg)
    {
        if (reg.Nome.Length > 50)
            throw new SGValidationException($"Nome deve ter no máximo 50 caracteres.");
        if (reg.Descricao.Length > 50)
            throw new SGValidationException($"Descricao deve ter no máximo 50 caracteres.");
        if (reg.Sigla.Length > 20)
            throw new SGValidationException($"Sigla deve ter no máximo 20 caracteres.");
        if (reg.Web.Length > 255)
            throw new SGValidationException($"Web deve ter no máximo 255 caracteres.");
        if (reg.GUID.Length > 100)
            throw new SGValidationException($"GUID deve ter no máximo 100 caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.Tribunal reg, ITribunalService service, IAreaReader areaReader, IJusticaReader justicaReader, IInstanciaReader instanciaReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Nome))
            throw new SGValidationException("Nome é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.Area == 0)
            throw new SGValidationException("Area é obrigatório.");
        // Area
        {
            var regArea = await areaReader.Read(reg.Area, oCnn);
            if (regArea == null || regArea.Id != reg.Area)
            {
                throw new SGValidationException($"Área não encontrado ({regArea?.Id}).");
            }
        }

        // Justica
        if (!reg.Justica.IsEmptyIDNumber())
        {
            var regJustica = await justicaReader.Read(reg.Justica, oCnn);
            if (regJustica == null || regJustica.Id != reg.Justica)
            {
                throw new SGValidationException($"Justiça não encontrado ({regJustica?.Id}).");
            }
        }

        // Instancia
        if (!reg.Instancia.IsEmptyIDNumber())
        {
            var regInstancia = await instanciaReader.Read(reg.Instancia, oCnn);
            if (regInstancia == null || regInstancia.Id != reg.Instancia)
            {
                throw new SGValidationException($"Instancia não encontrado ({regInstancia?.Id}).");
            }
        }

        return true;
    }
}