// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class EscritoriosWriterTests
{
    private readonly Mock<IFEscritoriosFactory> _mockEscritoriosFactory;
    private readonly Mock<FEscritorios> _mockFEscritorios;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly EscritoriosWriter _escritoriosWriter;
    public EscritoriosWriterTests()
    {
        _mockEscritoriosFactory = new Mock<IFEscritoriosFactory>();
        _mockFEscritorios = new Mock<FEscritorios>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _escritoriosWriter = new EscritoriosWriter(_mockEscritoriosFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var escritorios = CreateValidEscritoriosModel();
        escritorios.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockEscritoriosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFEscritorios.Object);
        _mockFEscritorios.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _escritoriosWriter.WriteAsync(escritorios, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFEscritorios.Object);
        _mockEscritoriosFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockEscritoriosFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFEscritorios.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var escritorios = CreateValidEscritoriosModel();
        escritorios.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockEscritoriosFactory.Setup(x => x.CreateFromIdAsync(escritorios.Id, _mockConnection.Object)).ReturnsAsync(_mockFEscritorios.Object);
        _mockFEscritorios.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _escritoriosWriter.WriteAsync(escritorios, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFEscritorios.Object);
        _mockEscritoriosFactory.Verify(x => x.CreateFromIdAsync(escritorios.Id, _mockConnection.Object), Times.Once);
        _mockEscritoriosFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFEscritorios.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var escritorios = CreateValidEscritoriosModel();
        var auditorQuem = 99;
        _mockEscritoriosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFEscritorios.Object);
        _mockFEscritorios.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _escritoriosWriter.WriteAsync(escritorios, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFEscritorios.Object);
        _mockFEscritorios.VerifySet(x => x.FGUID = escritorios.GUID, Times.Once);
        _mockFEscritorios.VerifySet(x => x.FCNPJ = It.IsAny<string>(), Times.Once); // CNPJ é limpo pelo ClearInputCnpj()
        _mockFEscritorios.VerifySet(x => x.FCasa = escritorios.Casa, Times.Once);
        _mockFEscritorios.VerifySet(x => x.FParceria = escritorios.Parceria, Times.Once);
        _mockFEscritorios.VerifySet(x => x.FNome = escritorios.Nome, Times.Once);
        _mockFEscritorios.VerifySet(x => x.FOAB = escritorios.OAB, Times.Once);
        _mockFEscritorios.VerifySet(x => x.FEndereco = escritorios.Endereco, Times.Once);
        _mockFEscritorios.VerifySet(x => x.FCidade = escritorios.Cidade, Times.Once);
        _mockFEscritorios.VerifySet(x => x.FBairro = escritorios.Bairro, Times.Once);
        _mockFEscritorios.VerifySet(x => x.FCEP = It.IsAny<string>(), Times.Once); // CEP é limpo pelo ClearInputCep()
        _mockFEscritorios.VerifySet(x => x.FFone = escritorios.Fone, Times.Once);
        _mockFEscritorios.VerifySet(x => x.FFax = escritorios.Fax, Times.Once);
        _mockFEscritorios.VerifySet(x => x.FSite = escritorios.Site, Times.Once);
        _mockFEscritorios.VerifySet(x => x.FEMail = escritorios.EMail, Times.Once);
        _mockFEscritorios.VerifySet(x => x.FOBS = escritorios.OBS, Times.Once);
        _mockFEscritorios.VerifySet(x => x.FAdvResponsavel = escritorios.AdvResponsavel, Times.Once);
        _mockFEscritorios.VerifySet(x => x.FSecretaria = escritorios.Secretaria, Times.Once);
        _mockFEscritorios.VerifySet(x => x.FInscEst = escritorios.InscEst, Times.Once);
        _mockFEscritorios.VerifySet(x => x.FCorrespondente = escritorios.Correspondente, Times.Once);
        _mockFEscritorios.VerifySet(x => x.FTop = escritorios.Top, Times.Once);
        _mockFEscritorios.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var escritorios = CreateValidEscritoriosModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockEscritoriosFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _escritoriosWriter.WriteAsync(escritorios, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var escritorios = CreateValidEscritoriosModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockEscritoriosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFEscritorios.Object);
        _mockFEscritorios.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _escritoriosWriter.WriteAsync(escritorios, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var escritoriosResponse = new EscritoriosResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockEscritoriosFactory.Setup(x => x.DeleteAsync(operadorId, escritoriosResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _escritoriosWriter.Delete(escritoriosResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockEscritoriosFactory.Verify(x => x.DeleteAsync(operadorId, escritoriosResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var escritoriosResponse = new EscritoriosResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockEscritoriosFactory.Setup(x => x.DeleteAsync(operadorId, escritoriosResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _escritoriosWriter.Delete(escritoriosResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var escritoriosResponse = new EscritoriosResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockEscritoriosFactory.Setup(x => x.DeleteAsync(operadorId, escritoriosResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _escritoriosWriter.Delete(escritoriosResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new EscritoriosWriter(_mockEscritoriosFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new EscritoriosWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.Escritorios CreateValidEscritoriosModel()
    {
        return new Models.Escritorios
        {
            Id = 0,
            GUID = Guid.NewGuid().ToString(),
            CNPJ = "93016944000138",
            Casa = false,
            Parceria = false,
            Nome = "João",
            OAB = "AAAAAAAAAAAAA",
            Endereco = "Rua das Flores, 123",
            Cidade = 1,
            Bairro = "Centro",
            CEP = "01234-567",
            Fone = "(11) 99999-9999",
            Fax = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Site = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            EMail = "test@email.com",
            OBS = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            AdvResponsavel = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Secretaria = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            InscEst = "AAAAAAAAAAAAA",
            Correspondente = false,
            Top = false
        };
    }
#endregion
}