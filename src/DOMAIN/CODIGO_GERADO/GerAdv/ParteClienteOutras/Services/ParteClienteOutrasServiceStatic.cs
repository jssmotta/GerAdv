// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class ParteClienteOutrasService
{
    private (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterParteClienteOutras filtro)
    {
        var parameters = new List<SqlParameter>();
        if (filtro.Cliente != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBParteClienteOutrasDicInfo.Cliente)}", filtro.Cliente));
        }

        if (filtro.Processo != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBParteClienteOutrasDicInfo.Processo)}", filtro.Processo));
        }

        if (filtro.Processo_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBParteClienteOutrasDicInfo.Processo)}_end", filtro.Processo_end));
        }

        if (filtro.PrimeiraReclamada != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBParteClienteOutrasDicInfo.PrimeiraReclamada)}", filtro.PrimeiraReclamada));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBParteClienteOutrasDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
        }

        if (filtro.Codigo_filtro_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBParteClienteOutrasDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
        }

        if (filtro.LogicalOperator.IsEmptyX() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        cWhere.Append(filtro.Cliente.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBParteClienteOutrasDicInfo.PTabelaNome}].[{DBParteClienteOutrasDicInfo.Cliente}] = @{nameof(DBParteClienteOutrasDicInfo.Cliente)}");
        if (!(filtro.Processo.IsEmptyX()) && filtro.Processo_end.IsEmptyX())
        {
            cWhere.Append(filtro.Processo.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBParteClienteOutrasDicInfo.PTabelaNome}].[{DBParteClienteOutrasDicInfo.Processo}] = @{nameof(DBParteClienteOutrasDicInfo.Processo)}");
        }
        else if (!(filtro.Processo.IsEmptyX()) && !(filtro.Processo_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBParteClienteOutrasDicInfo.PTabelaNome}].{DBParteClienteOutrasDicInfo.Processo} BETWEEN @{nameof(DBParteClienteOutrasDicInfo.Processo)} AND @{nameof(DBParteClienteOutrasDicInfo.Processo)}_end");
        }

        cWhere.Append(filtro.PrimeiraReclamada == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBParteClienteOutrasDicInfo.PTabelaNome}].[{DBParteClienteOutrasDicInfo.PrimeiraReclamada}] = @{nameof(DBParteClienteOutrasDicInfo.PrimeiraReclamada)}");
        if (!(filtro.Codigo_filtro.IsEmptyX()) && filtro.Codigo_filtro_end.IsEmptyX())
        {
            cWhere.Append(filtro.Codigo_filtro.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBParteClienteOutrasDicInfo.PTabelaNome}].[{DBParteClienteOutrasDicInfo.CampoCodigo}] = @{nameof(DBParteClienteOutrasDicInfo.CampoCodigo)}");
        }
        else if (!(filtro.Codigo_filtro.IsEmptyX()) && !(filtro.Codigo_filtro_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBParteClienteOutrasDicInfo.PTabelaNome}].{DBParteClienteOutrasDicInfo.CampoCodigo} BETWEEN @{nameof(DBParteClienteOutrasDicInfo.CampoCodigo)} AND @{nameof(DBParteClienteOutrasDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private string ApplyWildCard(char wildcardChar, string value)
    {
        if (wildcardChar == '\0' || wildcardChar == ' ')
        {
            return value;
        }

        var result = $"{wildcardChar}{value.Replace(" ", wildcardChar.ToString())}{wildcardChar}";
        return result;
    }

    private string GetFilterHash(Filters.FilterParteClienteOutras? filtro)
    {
        if (filtro == null)
            return string.Empty;
        var json = JsonSerializer.Serialize(filtro);
        using var sha256 = SHA256.Create();
        var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(json));
        return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
    }

    private async Task<IEnumerable<ParteClienteOutrasResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}