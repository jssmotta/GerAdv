// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class OperadoresWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFOperadoresFactory> _mockOperadoresFactory;
    private readonly Mock<FOperadores> _mockFOperadores;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly OperadoresWhere _operadoresWhere;
    public OperadoresWhereTests()
    {
        _mockOperadoresFactory = new Mock<IFOperadoresFactory>();
        _mockFOperadores = new Mock<FOperadores>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _operadoresWhere = new OperadoresWhere(_mockOperadoresFactory.Object);
    }

    public void Dispose()
    {
        _mockOperadoresFactory?.Reset();
        _mockFOperadores?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
        };
    }

    private void SetupMockFOperadores(bool? Enviado = false, bool? Casa = true, int? CasaID = 1, int? CasaCodigo = 1, bool? IsNovo = false, int? Cliente = 1, int? Grupo = 1, string? Nome = "João", string? EMail = "test@email.com", string? Senha = "AAAAAAAA", bool? Ativado = true, bool? AtualizarSenha = false)
    {
        _mockFOperadores.Setup(f => f.FEnviado).Returns(Enviado ?? false);
        _mockFOperadores.Setup(f => f.FCasa).Returns(Casa ?? false);
        _mockFOperadores.Setup(f => f.FCasaID).Returns(CasaID ?? 0);
        _mockFOperadores.Setup(f => f.FCasaCodigo).Returns(CasaCodigo ?? 0);
        _mockFOperadores.Setup(f => f.FIsNovo).Returns(IsNovo ?? false);
        _mockFOperadores.Setup(f => f.FCliente).Returns(Cliente ?? 0);
        _mockFOperadores.Setup(f => f.FGrupo).Returns(Grupo ?? 0);
        _mockFOperadores.Setup(f => f.FNome).Returns(Nome ?? string.Empty);
        _mockFOperadores.Setup(f => f.FEMail).Returns(EMail ?? string.Empty);
        _mockFOperadores.Setup(f => f.FSenha).Returns(Senha ?? string.Empty);
        _mockFOperadores.Setup(f => f.FAtivado).Returns(Ativado ?? false);
        _mockFOperadores.Setup(f => f.FAtualizarSenha).Returns(AtualizarSenha ?? false);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFOperadoresFactory>();
        // Act
        var operadoresWhere = new OperadoresWhere(mockFactory.Object);
        // Assert
        operadoresWhere.Should().NotBeNull();
        operadoresWhere.Should().BeAssignableTo<IOperadoresWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFOperadoresFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new OperadoresWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnOperadoresResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFOperadores();
        _mockOperadoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOperadores.Object);
        // Act
        var result = _operadoresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.Enviado.Should().Be(false);
        result.Casa.Should().Be(true);
        result.CasaID.Should().Be(1);
        result.CasaCodigo.Should().Be(1);
        result.IsNovo.Should().Be(false);
        result.Cliente.Should().Be(1);
        result.Grupo.Should().Be(1);
        result.Nome.Should().Be("João");
        result.EMail.Should().Be("test@email.com");
        result.Senha.Should().Be("AAAAAAAA");
        result.Ativado.Should().Be(true);
        result.AtualizarSenha.Should().Be(false);
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFOperadores(Enviado: null, Casa: null, CasaID: null, CasaCodigo: null, IsNovo: null, Cliente: null, Grupo: null, Nome: null, EMail: null, Senha: null, Ativado: null, AtualizarSenha: null);
        _mockOperadoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOperadores.Object);
        // Act
        var result = _operadoresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Enviado.Should().Be(false);
        result.Casa.Should().Be(false);
        result.CasaID.Should().Be(0);
        result.CasaCodigo.Should().Be(0);
        result.IsNovo.Should().Be(false);
        result.Cliente.Should().Be(0);
        result.Grupo.Should().Be(0);
        result.Nome.Should().Be(string.Empty);
        result.EMail.Should().Be(string.Empty);
        result.Senha.Should().Be(string.Empty);
        result.Ativado.Should().Be(false);
        result.AtualizarSenha.Should().Be(false);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFOperadores();
        _mockOperadoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFOperadores.Object);
        // Act
        var result = _operadoresWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockOperadoresFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFOperadores();
        _mockOperadoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOperadores.Object);
        // Act
        var result = _operadoresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockOperadoresFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFOperadores();
        _mockOperadoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOperadores.Object);
        // Act
        var result = _operadoresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockOperadoresFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFOperadores();
        _mockOperadoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOperadores.Object);
        // Act
        _operadoresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockOperadoresFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFOperadoresInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFOperadores.Setup(f => f.Dispose());
        SetupMockFOperadores();
        _mockOperadoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOperadores.Object);
        // Act
        _operadoresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFOperadores.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockOperadoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _operadoresWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFOperadores(Enviado: false, Casa: true, CasaID: 1, CasaCodigo: 1, IsNovo: false, Cliente: 1, Grupo: 1, Nome: "João", EMail: "test@email.com", Senha: "AAAAAAAA", Ativado: true, AtualizarSenha: false);
        _mockOperadoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOperadores.Object);
        // Act
        var result = _operadoresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.Enviado.Should().Be(false);
        result.Casa.Should().Be(true);
        result.CasaID.Should().Be(1);
        result.CasaCodigo.Should().Be(1);
        result.IsNovo.Should().Be(false);
        result.Cliente.Should().Be(1);
        result.Grupo.Should().Be(1);
        result.Nome.Should().Be("João");
        result.EMail.Should().Be("test@email.com");
        result.Senha.Should().Be("AAAAAAAA");
        result.Ativado.Should().Be(true);
        result.AtualizarSenha.Should().Be(false);
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "Nome = @{DBOperadoresDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBOperadoresDicInfo.CampoNome}", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"),
        };
        SetupMockFOperadores();
        _mockOperadoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOperadores.Object);
        // Act
        _operadoresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockOperadoresFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBOperadoresDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }
#region DateTime Tests
#endregion
#endregion
}