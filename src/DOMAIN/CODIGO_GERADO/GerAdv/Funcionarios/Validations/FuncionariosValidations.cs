// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IFuncionariosValidation
{
    Task<bool> ValidateReg(Models.Funcionarios reg, IFuncionariosService service, ICargosReader cargosReader, IFuncaoReader funcaoReader, ICidadeReader cidadeReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, IFuncionariosService service, IAgendaService agendaService, IAgendaFinanceiroService agendafinanceiroService, IAgendaQuemService agendaquemService, IAgendaRepetirService agendarepetirService, IHorasTrabService horastrabService, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class FuncionariosValidation : IFuncionariosValidation
{
    public async Task<bool> CanDelete(int id, IFuncionariosService service, IAgendaService agendaService, IAgendaFinanceiroService agendafinanceiroService, IAgendaQuemService agendaquemService, IAgendaRepetirService agendarepetirService, IHorasTrabService horastrabService, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        var agendaExists0 = await agendaService.Filter(new Filters.FilterAgenda { Funcionario = id }, uri);
        if (agendaExists0 != null && agendaExists0.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Compromisso associados a ele.");
        var agendafinanceiroExists1 = await agendafinanceiroService.Filter(new Filters.FilterAgendaFinanceiro { Funcionario = id }, uri);
        if (agendafinanceiroExists1 != null && agendafinanceiroExists1.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Agenda Financeiro associados a ele.");
        var agendaquemExists2 = await agendaquemService.Filter(new Filters.FilterAgendaQuem { Funcionario = id }, uri);
        if (agendaquemExists2 != null && agendaquemExists2.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Agenda Quem associados a ele.");
        var agendarepetirExists3 = await agendarepetirService.Filter(new Filters.FilterAgendaRepetir { Funcionario = id }, uri);
        if (agendarepetirExists3 != null && agendarepetirExists3.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Agenda Repetir associados a ele.");
        var horastrabExists4 = await horastrabService.Filter(new Filters.FilterHorasTrab { Funcionario = id }, uri);
        if (horastrabExists4 != null && horastrabExists4.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Horas Trab associados a ele.");
        return true;
    }

    private bool ValidSizes(Models.Funcionarios reg)
    {
        if (reg.EMailPro.Length > 255)
            throw new SGValidationException($"EMailPro deve ter no máximo 255 caracteres.");
        if (reg.Nome.Length > 60)
            throw new SGValidationException($"Nome deve ter no máximo 60 caracteres.");
        if (reg.Registro.Length > 20)
            throw new SGValidationException($"Registro deve ter no máximo 20 caracteres.");
        if (reg.CPF.Length > 11)
            throw new SGValidationException($"CPF deve ter no máximo 11 caracteres.");
        if (reg.RG.Length > 30)
            throw new SGValidationException($"RG deve ter no máximo 30 caracteres.");
        if (reg.Endereco.Length > 80)
            throw new SGValidationException($"Endereco deve ter no máximo 80 caracteres.");
        if (reg.Bairro.Length > 50)
            throw new SGValidationException($"Bairro deve ter no máximo 50 caracteres.");
        if (reg.CEP.Length > 10)
            throw new SGValidationException($"CEP deve ter no máximo 10 caracteres.");
        if (reg.CTPSNumero.Length > 15)
            throw new SGValidationException($"CTPSNumero deve ter no máximo 15 caracteres.");
        if (reg.CTPSSerie.Length > 10)
            throw new SGValidationException($"CTPSSerie deve ter no máximo 10 caracteres.");
        if (reg.PIS.Length > 20)
            throw new SGValidationException($"PIS deve ter no máximo 20 caracteres.");
        if (reg.Pasta.Length > 200)
            throw new SGValidationException($"Pasta deve ter no máximo 200 caracteres.");
        if (reg.Class.Length > 1)
            throw new SGValidationException($"Class deve ter no máximo 1 caracteres.");
        if (reg.GUID.Length > 150)
            throw new SGValidationException($"GUID deve ter no máximo 150 caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.Funcionarios reg, IFuncionariosService service, ICargosReader cargosReader, IFuncaoReader funcaoReader, ICidadeReader cidadeReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Nome))
            throw new SGValidationException("Nome é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.EMail.Length > 0 && !reg.EMail.IsValidEmail())
            throw new SGValidationException($"EMail em formato inválido.");
        if (!string.IsNullOrWhiteSpace(reg.CPF))
        {
            var testaCpf = await IsCpfDuplicado(reg, service, uri);
            if (testaCpf.Item1 && testaCpf.Item2 != null)
            {
                throw new SGValidationException($"Colaborador ({testaCpf.Item2.Nome}) com cpf '{reg.CPF.MaskCpf()}' já cadastrado.");
            }
            else if (testaCpf.Item1)
            {
                throw new SGValidationException($"Colaborador com cpf '{reg.CPF.MaskCpf()}' já cadastrado.");
            }
        }

        // Cargos
        if (!reg.Cargo.IsEmptyIDNumber())
        {
            var regCargos = await cargosReader.Read(reg.Cargo, oCnn);
            if (regCargos == null || regCargos.Id != reg.Cargo)
            {
                throw new SGValidationException($"Cargos não encontrado ({regCargos?.Id}).");
            }
        }

        // Funcao
        if (!reg.Funcao.IsEmptyIDNumber())
        {
            var regFuncao = await funcaoReader.Read(reg.Funcao, oCnn);
            if (regFuncao == null || regFuncao.Id != reg.Funcao)
            {
                throw new SGValidationException($"Função não encontrado ({regFuncao?.Id}).");
            }
        }

        // Cidade
        if (!reg.Cidade.IsEmptyIDNumber())
        {
            var regCidade = await cidadeReader.Read(reg.Cidade, oCnn);
            if (regCidade == null || regCidade.Id != reg.Cidade)
            {
                throw new SGValidationException($"Cidade não encontrado ({regCidade?.Id}).");
            }
        }

        return true;
    }

    private async Task<(bool, FuncionariosResponseAll? )> IsCpfDuplicado(Models.Funcionarios reg, IFuncionariosService service, string uri)
    {
        if (reg.CPF.Length == 0)
            return (false, null);
        var existingFuncionarios = (await service.Filter(new Filters.FilterFuncionarios { CPF = reg.CPF.ClearInputCpf() }, uri)).FirstOrDefault();
        return (existingFuncionarios != null && existingFuncionarios.Id > 0 && existingFuncionarios.Id != reg.Id, existingFuncionarios);
    }
}