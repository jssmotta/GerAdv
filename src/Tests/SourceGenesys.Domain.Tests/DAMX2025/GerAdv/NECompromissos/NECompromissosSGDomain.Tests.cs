// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBNECompromissos - Nome da classe (ex: DBClientes)
/// NECompromissos - Nome da tabela (ex: Clientes)
/// ncp - Prefixo dos campos (ex: cli)
/// ncpCodigo - Nome do campo código (ex: cliCodigo)
///  - Nome do campo nome (ex: cliNome)
/// DBNECompromissos.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBNECompromissosTests : IDisposable
{
    private readonly DBNECompromissos _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBNECompromissosTests()
    {
        _instance = new DBNECompromissos();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("ncpCodigo", typeof(int));
        dt.Columns.Add("ncpQuemCad", typeof(int));
        dt.Columns.Add("ncpDtCad", typeof(DateTime));
        dt.Columns.Add("ncpQuemAtu", typeof(int));
        dt.Columns.Add("ncpDtAtu", typeof(DateTime));
        dt.Columns.Add("ncpVisto", typeof(bool));
        dt.Columns.Add("ncpPalavraChave", typeof(int));
        dt.Columns.Add("ncpProvisionar", typeof(string));
        dt.Columns.Add("ncpTipoCompromisso", typeof(int));
        dt.Columns.Add("ncpTextoCompromisso", typeof(string));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("NECompromissos", DBNECompromissos.PTabelaNome);
        Assert.Equal(" NECompromissos.* ", DBNECompromissos.CamposSqlX);
        Assert.Equal("ncpCodigo", DBNECompromissos.CampoCodigo);
        Assert.Equal("", DBNECompromissos.CampoNome);
        Assert.Equal("ncp", DBNECompromissos.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBNECompromissos();
        Assert.Equal(0, instance.ID);
        Assert.Equal("NECompromissos", instance.ITabelaName());
        Assert.Equal("ncp", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBNECompromissos((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBNECompromissos((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["ncpCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBNECompromissos(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("NECompromissos", cadastro.ITabelaName());
        Assert.Equal("ncpCodigo", cadastro.ICampoCodigo());
        Assert.Equal("", cadastro.ICampoNome());
        Assert.Equal("ncp", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBNECompromissos.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBNECompromissos.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBNECompromissos.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBNECompromissos();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBNECompromissos();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnFalse()
    {
        Assert.False(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void PalavraChave_ShouldAcceptIntegerValues(int value)
    {
        _instance.FPalavraChave = value;
        Assert.Equal(value, _instance.FPalavraChave);
    }

    [Fact]
    public void PalavraChave_DefaultValue_ShouldBeZero()
    {
        var instance = new DBNECompromissos();
        Assert.Equal(0, instance.FPalavraChave);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Provisionar_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FProvisionar = value;
        Assert.Equal(value, _instance.FProvisionar);
    }

    [Fact]
    public void Provisionar_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBNECompromissos();
        Assert.False(instance.FProvisionar);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Provisionar_ShouldAcceptIntegerValues(int value)
{
    _instance.FProvisionar = value;
    Assert.Equal(value, _instance.FProvisionar);
}

[Fact]
public void Provisionar_DefaultValue_ShouldBeZero()
{
    var instance = new DBNECompromissos();
    Assert.Equal(0, instance.Provisionar);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Provisionar_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FProvisionar = dateString;
    Assert.Equal(dateString, _instance.FProvisionar);
}

[Fact]
public void Provisionar_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBNECompromissos();
    Assert.Equal(string.Empty, instance.Provisionar);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Provisionar_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FProvisionar = input;
        Assert.Equal(expected, _instance.FProvisionar);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FProvisionar = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Provisionar_ValidEmail_ShouldAccept(string email)
{
    _instance.FProvisionar = email;
    Assert.Equal(email, _instance.FProvisionar);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Provisionar_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FProvisionar = email);
}
*/
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void TipoCompromisso_ShouldAcceptIntegerValues(int value)
    {
        _instance.FTipoCompromisso = value;
        Assert.Equal(value, _instance.FTipoCompromisso);
    }

    [Fact]
    public void TipoCompromisso_DefaultValue_ShouldBeZero()
    {
        var instance = new DBNECompromissos();
        Assert.Equal(0, instance.FTipoCompromisso);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void TextoCompromisso_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FTextoCompromisso = input;
        Assert.Equal(expected, _instance.FTextoCompromisso);
    }

    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}