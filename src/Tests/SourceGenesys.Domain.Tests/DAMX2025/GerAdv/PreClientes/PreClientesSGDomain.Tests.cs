// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBPreClientes - Nome da classe (ex: DBClientes)
/// PreClientes - Nome da tabela (ex: Clientes)
/// cli - Prefixo dos campos (ex: cli)
/// cliCodigo - Nome do campo código (ex: cliCodigo)
/// cliNome - Nome do campo nome (ex: cliNome)
/// DBPreClientes.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBPreClientesTests : IDisposable
{
    private readonly DBPreClientes _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBPreClientesTests()
    {
        _instance = new DBPreClientes();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("cliCodigo", typeof(int));
        dt.Columns.Add("cliQuemCad", typeof(int));
        dt.Columns.Add("cliDtCad", typeof(DateTime));
        dt.Columns.Add("cliQuemAtu", typeof(int));
        dt.Columns.Add("cliDtAtu", typeof(DateTime));
        dt.Columns.Add("cliVisto", typeof(bool));
        dt.Columns.Add("cliInativo", typeof(string));
        dt.Columns.Add("cliQuemIndicou", typeof(string));
        dt.Columns.Add("cliNome", typeof(string));
        dt.Columns.Add("cliAdv", typeof(int));
        dt.Columns.Add("cliIDRep", typeof(int));
        dt.Columns.Add("cliJuridica", typeof(string));
        dt.Columns.Add("cliNomeFantasia", typeof(string));
        dt.Columns.Add("cliClass", typeof(string));
        dt.Columns.Add("cliTipo", typeof(string));
        dt.Columns.Add("cliDtNasc", typeof(DateTime));
        dt.Columns.Add("cliInscEst", typeof(string));
        dt.Columns.Add("cliQualificacao", typeof(string));
        dt.Columns.Add("cliSexo", typeof(string));
        dt.Columns.Add("cliIdade", typeof(int));
        dt.Columns.Add("cliCNPJ", typeof(string));
        dt.Columns.Add("cliCPF", typeof(string));
        dt.Columns.Add("cliRG", typeof(string));
        dt.Columns.Add("cliTipoCaptacao", typeof(string));
        dt.Columns.Add("cliObservacao", typeof(string));
        dt.Columns.Add("cliEndereco", typeof(string));
        dt.Columns.Add("cliBairro", typeof(string));
        dt.Columns.Add("cliCidade", typeof(int));
        dt.Columns.Add("cliCEP", typeof(string));
        dt.Columns.Add("cliFax", typeof(string));
        dt.Columns.Add("cliFone", typeof(string));
        dt.Columns.Add("cliData", typeof(string));
        dt.Columns.Add("cliHomePage", typeof(string));
        dt.Columns.Add("cliEMail", typeof(string));
        dt.Columns.Add("cliAssistido", typeof(string));
        dt.Columns.Add("cliAssRG", typeof(string));
        dt.Columns.Add("cliAssCPF", typeof(string));
        dt.Columns.Add("cliAssEndereco", typeof(string));
        dt.Columns.Add("cliCNH", typeof(string));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("PreClientes", DBPreClientes.PTabelaNome);
        Assert.Equal(" PreClientes.* ", DBPreClientes.CamposSqlX);
        Assert.Equal("cliCodigo", DBPreClientes.CampoCodigo);
        Assert.Equal("cliNome", DBPreClientes.CampoNome);
        Assert.Equal("cli", DBPreClientes.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBPreClientes();
        Assert.Equal(0, instance.ID);
        Assert.Equal("PreClientes", instance.ITabelaName());
        Assert.Equal("cli", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBPreClientes((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBPreClientes((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["cliCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBPreClientes(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("PreClientes", cadastro.ITabelaName());
        Assert.Equal("cliCodigo", cadastro.ICampoCodigo());
        Assert.Equal("cliNome", cadastro.ICampoNome());
        Assert.Equal("cli", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBPreClientes.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBPreClientes.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBPreClientes.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBPreClientes();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBPreClientes();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnTrue()
    {
        Assert.True(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Inativo_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FInativo = value;
        Assert.Equal(value, _instance.FInativo);
    }

    [Fact]
    public void Inativo_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBPreClientes();
        Assert.False(instance.FInativo);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void QuemIndicou_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FQuemIndicou = input;
        Assert.Equal(expected, _instance.FQuemIndicou);
    }

    [Fact]
    public void QuemIndicou_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FQuemIndicou = longString;
        Assert.True(_instance.FQuemIndicou.Length <= 80);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Nome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNome = input;
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void Nome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FNome = longString;
        Assert.True(_instance.FNome.Length <= 80);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Adv_ShouldAcceptIntegerValues(int value)
    {
        _instance.FAdv = value;
        Assert.Equal(value, _instance.FAdv);
    }

    [Fact]
    public void Adv_DefaultValue_ShouldBeZero()
    {
        var instance = new DBPreClientes();
        Assert.Equal(0, instance.FAdv);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void IDRep_ShouldAcceptIntegerValues(int value)
    {
        _instance.FIDRep = value;
        Assert.Equal(value, _instance.FIDRep);
    }

    [Fact]
    public void IDRep_DefaultValue_ShouldBeZero()
    {
        var instance = new DBPreClientes();
        Assert.Equal(0, instance.FIDRep);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Juridica_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FJuridica = value;
        Assert.Equal(value, _instance.FJuridica);
    }

    [Fact]
    public void Juridica_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBPreClientes();
        Assert.False(instance.FJuridica);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void NomeFantasia_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNomeFantasia = input;
        Assert.Equal(expected, _instance.FNomeFantasia);
    }

    [Fact]
    public void NomeFantasia_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FNomeFantasia = longString;
        Assert.True(_instance.FNomeFantasia.Length <= 80);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData(" A", "A")]
    public void Class_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FClass = input;
        Assert.Equal(expected, _instance.FClass);
    }

    [Fact]
    public void Class_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 1 + 10);
        _instance.FClass = longString;
        Assert.True(_instance.FClass.Length <= 1);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Tipo_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FTipo = value;
        Assert.Equal(value, _instance.FTipo);
    }

    [Fact]
    public void Tipo_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBPreClientes();
        Assert.False(instance.FTipo);
    }

    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void DtNasc_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FDtNasc = dateString;
        Assert.Equal(dateString, _instance.FDtNasc);
    }

    [Fact]
    public void DtNasc_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBPreClientes();
        Assert.Equal(string.Empty, instance.FDtNasc);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void InscEst_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FInscEst = input;
        Assert.Equal(expected, _instance.FInscEst);
    }

    [Fact]
    public void InscEst_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 15 + 10);
        _instance.FInscEst = longString;
        Assert.True(_instance.FInscEst.Length <= 15);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Qualificacao_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FQualificacao = input;
        Assert.Equal(expected, _instance.FQualificacao);
    }

    [Fact]
    public void Qualificacao_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FQualificacao = longString;
        Assert.True(_instance.FQualificacao.Length <= 100);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Sexo_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FSexo = value;
        Assert.Equal(value, _instance.FSexo);
    }

    [Fact]
    public void Sexo_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBPreClientes();
        Assert.False(instance.FSexo);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Idade_ShouldAcceptIntegerValues(int value)
    {
        _instance.FIdade = value;
        Assert.Equal(value, _instance.FIdade);
    }

    [Fact]
    public void Idade_DefaultValue_ShouldBeZero()
    {
        var instance = new DBPreClientes();
        Assert.Equal(0, instance.FIdade);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void RG_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FRG = input;
        Assert.Equal(expected, _instance.FRG);
    }

    [Fact]
    public void RG_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 30 + 10);
        _instance.FRG = longString;
        Assert.True(_instance.FRG.Length <= 30);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void TipoCaptacao_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FTipoCaptacao = value;
        Assert.Equal(value, _instance.FTipoCaptacao);
    }

    [Fact]
    public void TipoCaptacao_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBPreClientes();
        Assert.False(instance.FTipoCaptacao);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Observacao_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FObservacao = input;
        Assert.Equal(expected, _instance.FObservacao);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Endereco_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FEndereco = input;
        Assert.Equal(expected, _instance.FEndereco);
    }

    [Fact]
    public void Endereco_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FEndereco = longString;
        Assert.True(_instance.FEndereco.Length <= 80);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Bairro_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FBairro = input;
        Assert.Equal(expected, _instance.FBairro);
    }

    [Fact]
    public void Bairro_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FBairro = longString;
        Assert.True(_instance.FBairro.Length <= 50);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cidade_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCidade = value;
        Assert.Equal(value, _instance.FCidade);
    }

    [Fact]
    public void Cidade_DefaultValue_ShouldBeZero()
    {
        var instance = new DBPreClientes();
        Assert.Equal(0, instance.FCidade);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Fax_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FFax = input;
        Assert.Equal(expected, _instance.FFax);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Fone_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FFone = input;
        Assert.Equal(expected, _instance.FFone);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void HomePage_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FHomePage = input;
        Assert.Equal(expected, _instance.FHomePage);
    }

    [Fact]
    public void HomePage_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 60 + 10);
        _instance.FHomePage = longString;
        Assert.True(_instance.FHomePage.Length <= 60);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Assistido_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FAssistido = input;
        Assert.Equal(expected, _instance.FAssistido);
    }

    [Fact]
    public void Assistido_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FAssistido = longString;
        Assert.True(_instance.FAssistido.Length <= 50);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void AssRG_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FAssRG = input;
        Assert.Equal(expected, _instance.FAssRG);
    }

    [Fact]
    public void AssRG_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 30 + 10);
        _instance.FAssRG = longString;
        Assert.True(_instance.FAssRG.Length <= 30);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void AssCPF_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FAssCPF = input;
        Assert.Equal(expected, _instance.FAssCPF);
    }

    [Fact]
    public void AssCPF_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 12 + 10);
        _instance.FAssCPF = longString;
        Assert.True(_instance.FAssCPF.Length <= 12);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void AssEndereco_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FAssEndereco = input;
        Assert.Equal(expected, _instance.FAssEndereco);
    }

    [Fact]
    public void AssEndereco_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 70 + 10);
        _instance.FAssEndereco = longString;
        Assert.True(_instance.FAssEndereco.Length <= 70);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void CNH_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FCNH = input;
        Assert.Equal(expected, _instance.FCNH);
    }

    [Fact]
    public void CNH_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FCNH = longString;
        Assert.True(_instance.FCNH.Length <= 100);
    }

    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}