// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class ProcessOutputRequestValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFProcessOutputRequestFactory> _mockProcessOutputRequestFactory;
    private readonly Mock<IProcessOutputRequestReader> _mockReader;
    private readonly ProcessOutputRequestValidation _validation;
    private readonly Mock<IProcessOutputRequestService> _mockProcessOutputRequestService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IProcessOutputEngineReader> _mockProcessOutputEngineReader;
    private readonly Mock<IOperadorReader> _mockOperadorReader;
    private readonly ProcessOutputRequestService _service;
    private readonly string _validUri = "test-uri";
    public ProcessOutputRequestValidationTests()
    {
        _mockProcessOutputRequestFactory = new Mock<IFProcessOutputRequestFactory>();
        _mockReader = new Mock<IProcessOutputRequestReader>();
        _validation = new ProcessOutputRequestValidation();
        _mockProcessOutputRequestService = new Mock<IProcessOutputRequestService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockProcessOutputEngineReader = new Mock<IProcessOutputEngineReader>();
        _mockOperadorReader = new Mock<IOperadorReader>();
    }

#region Class Structure Tests
    [Fact]
    public void ProcessOutputRequestValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IProcessOutputRequestValidation>();
    }

    [Fact]
    public void ProcessOutputRequestValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(ProcessOutputRequestValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void ProcessOutputRequestValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(ProcessOutputRequestValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.ProcessOutputRequest CreateValidProcessOutputRequest()
    {
        return new Models.ProcessOutputRequest
        {
            Id = 1,
            ProcessOutputEngine = 1,
            Operador = 1,
            Processo = 1,
            UltimoIdTabelaExo = 1
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockProcessOutputRequestService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterProcessOutputRequest>(), It.IsAny<string>())).ReturnsAsync(new List<ProcessOutputRequestResponseAll>());
        // Setup other mocks but don't override the ProcessOutputRequests service mock
        _mockProcessOutputEngineReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.ProcessOutputEngineResponse { Id = id }));
        _mockOperadorReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.OperadorResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockProcessOutputRequestService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterProcessOutputRequest>(), It.IsAny<string>())).ReturnsAsync(new List<ProcessOutputRequestResponseAll>());
        // Setup other mocks but don't override the ProcessOutputRequests service mock
        _mockProcessOutputEngineReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.ProcessOutputEngineResponse { Id = 0 }));
        _mockOperadorReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.OperadorResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var processoutputrequest = new Models.ProcessOutputRequest
        {
            Id = 1,
            ProcessOutputEngine = 1,
            Operador = 1,
            Processo = 1,
            UltimoIdTabelaExo = 1
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(processoutputrequest, _mockProcessOutputRequestService.Object, _mockProcessOutputEngineReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockProcessOutputRequestService.Object, _mockProcessOutputEngineReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region Foreign Key Validation Tests - ProcessOutputEngine
    [Fact]
    public async Task ValidateReg_WithInvalidProcessOutputEngine_ShouldThrowSGValidationException()
    {
        // Arrange
        var processoutputrequest = CreateValidProcessOutputRequest();
        processoutputrequest.ProcessOutputEngine = 999;
        _mockProcessOutputEngineReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.ProcessOutputEngineResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(processoutputrequest, _mockProcessOutputRequestService.Object, _mockProcessOutputEngineReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedProcessOutputEngineId_ShouldThrowSGValidationException()
    {
        // Arrange
        var processoutputrequest = CreateValidProcessOutputRequest();
        processoutputrequest.ProcessOutputEngine = 999;
        var reg888 = new Models.Response.ProcessOutputEngineResponse
        {
            Id = 888
        }; // Different ID
        _mockProcessOutputEngineReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(processoutputrequest, _mockProcessOutputRequestService.Object, _mockProcessOutputEngineReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidProcessOutputEngine_ShouldPass()
    {
        // Arrange
        var processoutputrequest = CreateValidProcessOutputRequest();
        processoutputrequest.ProcessOutputEngine = 123;
        var reg123 = new Models.Response.ProcessOutputEngineResponse
        {
            Id = 123
        };
        _mockProcessOutputEngineReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(processoutputrequest, _mockProcessOutputRequestService.Object, _mockProcessOutputEngineReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region Foreign Key Validation Tests - Operador
    [Fact]
    public async Task ValidateReg_WithInvalidOperador_ShouldThrowSGValidationException()
    {
        // Arrange
        var processoutputrequest = CreateValidProcessOutputRequest();
        processoutputrequest.Operador = 999;
        _mockOperadorReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.OperadorResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(processoutputrequest, _mockProcessOutputRequestService.Object, _mockProcessOutputEngineReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedOperadorId_ShouldThrowSGValidationException()
    {
        // Arrange
        var processoutputrequest = CreateValidProcessOutputRequest();
        processoutputrequest.Operador = 999;
        var reg888 = new Models.Response.OperadorResponse
        {
            Id = 888
        }; // Different ID
        _mockOperadorReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(processoutputrequest, _mockProcessOutputRequestService.Object, _mockProcessOutputEngineReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidOperador_ShouldPass()
    {
        // Arrange
        var processoutputrequest = CreateValidProcessOutputRequest();
        processoutputrequest.Operador = 123;
        var reg123 = new Models.Response.OperadorResponse
        {
            Id = 123
        };
        _mockOperadorReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(processoutputrequest, _mockProcessOutputRequestService.Object, _mockProcessOutputEngineReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}