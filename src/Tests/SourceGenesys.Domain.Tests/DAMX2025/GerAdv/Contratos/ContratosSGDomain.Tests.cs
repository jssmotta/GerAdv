// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBContratos - Nome da classe (ex: DBClientes)
/// Contratos - Nome da tabela (ex: Clientes)
/// ctt - Prefixo dos campos (ex: cli)
/// cttCodigo - Nome do campo código (ex: cliCodigo)
///  - Nome do campo nome (ex: cliNome)
/// DBContratos.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBContratosTests : IDisposable
{
    private readonly DBContratos _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBContratosTests()
    {
        _instance = new DBContratos();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("cttCodigo", typeof(int));
        dt.Columns.Add("cttQuemCad", typeof(int));
        dt.Columns.Add("cttDtCad", typeof(DateTime));
        dt.Columns.Add("cttQuemAtu", typeof(int));
        dt.Columns.Add("cttDtAtu", typeof(DateTime));
        dt.Columns.Add("cttVisto", typeof(bool));
        dt.Columns.Add("cttProcesso", typeof(int));
        dt.Columns.Add("cttCliente", typeof(int));
        dt.Columns.Add("cttAdvogado", typeof(int));
        dt.Columns.Add("cttDia", typeof(int));
        dt.Columns.Add("cttValor", typeof(decimal));
        dt.Columns.Add("cttDataInicio", typeof(DateTime));
        dt.Columns.Add("cttDataTermino", typeof(DateTime));
        dt.Columns.Add("cttOcultarRelatorio", typeof(string));
        dt.Columns.Add("cttPercEscritorio", typeof(decimal));
        dt.Columns.Add("cttValorConsultoria", typeof(decimal));
        dt.Columns.Add("cttGUID", typeof(string));
        dt.Columns.Add("cttTipoCobranca", typeof(int));
        dt.Columns.Add("cttProtestar", typeof(string));
        dt.Columns.Add("cttJuros", typeof(string));
        dt.Columns.Add("cttValorRealizavel", typeof(decimal));
        dt.Columns.Add("cttDOCUMENTO", typeof(string));
        dt.Columns.Add("cttEMail1", typeof(string));
        dt.Columns.Add("cttEMail2", typeof(string));
        dt.Columns.Add("cttEMail3", typeof(string));
        dt.Columns.Add("cttPessoa1", typeof(string));
        dt.Columns.Add("cttPessoa2", typeof(string));
        dt.Columns.Add("cttPessoa3", typeof(string));
        dt.Columns.Add("cttOBS", typeof(string));
        dt.Columns.Add("cttClienteContrato", typeof(int));
        dt.Columns.Add("cttIdExtrangeiro", typeof(int));
        dt.Columns.Add("cttChaveContrato", typeof(string));
        dt.Columns.Add("cttAvulso", typeof(string));
        dt.Columns.Add("cttSuspenso", typeof(string));
        dt.Columns.Add("cttMulta", typeof(string));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("Contratos", DBContratos.PTabelaNome);
        Assert.Equal(" Contratos.* ", DBContratos.CamposSqlX);
        Assert.Equal("cttCodigo", DBContratos.CampoCodigo);
        Assert.Equal("", DBContratos.CampoNome);
        Assert.Equal("ctt", DBContratos.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBContratos();
        Assert.Equal(0, instance.ID);
        Assert.Equal("Contratos", instance.ITabelaName());
        Assert.Equal("ctt", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBContratos((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBContratos((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["cttCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBContratos(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("Contratos", cadastro.ITabelaName());
        Assert.Equal("cttCodigo", cadastro.ICampoCodigo());
        Assert.Equal("", cadastro.ICampoNome());
        Assert.Equal("ctt", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBContratos.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBContratos.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBContratos.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBContratos();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBContratos();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnFalse()
    {
        Assert.False(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Processo_ShouldAcceptIntegerValues(int value)
    {
        _instance.FProcesso = value;
        Assert.Equal(value, _instance.FProcesso);
    }

    [Fact]
    public void Processo_DefaultValue_ShouldBeZero()
    {
        var instance = new DBContratos();
        Assert.Equal(0, instance.FProcesso);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cliente_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCliente = value;
        Assert.Equal(value, _instance.FCliente);
    }

    [Fact]
    public void Cliente_DefaultValue_ShouldBeZero()
    {
        var instance = new DBContratos();
        Assert.Equal(0, instance.FCliente);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Advogado_ShouldAcceptIntegerValues(int value)
    {
        _instance.FAdvogado = value;
        Assert.Equal(value, _instance.FAdvogado);
    }

    [Fact]
    public void Advogado_DefaultValue_ShouldBeZero()
    {
        var instance = new DBContratos();
        Assert.Equal(0, instance.FAdvogado);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Dia_ShouldAcceptIntegerValues(int value)
    {
        _instance.FDia = value;
        Assert.Equal(value, _instance.FDia);
    }

    [Fact]
    public void Dia_DefaultValue_ShouldBeZero()
    {
        var instance = new DBContratos();
        Assert.Equal(0, instance.FDia);
    }

    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void DataInicio_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FDataInicio = dateString;
        Assert.Equal(dateString, _instance.FDataInicio);
    }

    [Fact]
    public void DataInicio_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBContratos();
        Assert.Equal(string.Empty, instance.FDataInicio);
    }

    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void DataTermino_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FDataTermino = dateString;
        Assert.Equal(dateString, _instance.FDataTermino);
    }

    [Fact]
    public void DataTermino_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBContratos();
        Assert.Equal(string.Empty, instance.FDataTermino);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void OcultarRelatorio_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FOcultarRelatorio = value;
        Assert.Equal(value, _instance.FOcultarRelatorio);
    }

    [Fact]
    public void OcultarRelatorio_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBContratos();
        Assert.False(instance.FOcultarRelatorio);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void GUID_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FGUID = input;
        Assert.Equal(expected, _instance.FGUID);
    }

    [Fact]
    public void GUID_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FGUID = longString;
        Assert.True(_instance.FGUID.Length <= 100);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void TipoCobranca_ShouldAcceptIntegerValues(int value)
    {
        _instance.FTipoCobranca = value;
        Assert.Equal(value, _instance.FTipoCobranca);
    }

    [Fact]
    public void TipoCobranca_DefaultValue_ShouldBeZero()
    {
        var instance = new DBContratos();
        Assert.Equal(0, instance.FTipoCobranca);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Protestar_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FProtestar = input;
        Assert.Equal(expected, _instance.FProtestar);
    }

    [Fact]
    public void Protestar_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FProtestar = longString;
        Assert.True(_instance.FProtestar.Length <= 50);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Juros_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FJuros = input;
        Assert.Equal(expected, _instance.FJuros);
    }

    [Fact]
    public void Juros_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 5 + 10);
        _instance.FJuros = longString;
        Assert.True(_instance.FJuros.Length <= 5);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void DOCUMENTO_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FDOCUMENTO = input;
        Assert.Equal(expected, _instance.FDOCUMENTO);
    }

    [Fact]
    public void DOCUMENTO_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 15 + 10);
        _instance.FDOCUMENTO = longString;
        Assert.True(_instance.FDOCUMENTO.Length <= 15);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void EMail1_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FEMail1 = input;
        Assert.Equal(expected, _instance.FEMail1);
    }

    [Fact]
    public void EMail1_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 300 + 10);
        _instance.FEMail1 = longString;
        Assert.True(_instance.FEMail1.Length <= 300);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void EMail2_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FEMail2 = input;
        Assert.Equal(expected, _instance.FEMail2);
    }

    [Fact]
    public void EMail2_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 300 + 10);
        _instance.FEMail2 = longString;
        Assert.True(_instance.FEMail2.Length <= 300);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void EMail3_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FEMail3 = input;
        Assert.Equal(expected, _instance.FEMail3);
    }

    [Fact]
    public void EMail3_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 300 + 10);
        _instance.FEMail3 = longString;
        Assert.True(_instance.FEMail3.Length <= 300);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Pessoa1_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FPessoa1 = input;
        Assert.Equal(expected, _instance.FPessoa1);
    }

    [Fact]
    public void Pessoa1_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FPessoa1 = longString;
        Assert.True(_instance.FPessoa1.Length <= 100);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Pessoa2_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FPessoa2 = input;
        Assert.Equal(expected, _instance.FPessoa2);
    }

    [Fact]
    public void Pessoa2_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FPessoa2 = longString;
        Assert.True(_instance.FPessoa2.Length <= 100);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Pessoa3_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FPessoa3 = input;
        Assert.Equal(expected, _instance.FPessoa3);
    }

    [Fact]
    public void Pessoa3_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FPessoa3 = longString;
        Assert.True(_instance.FPessoa3.Length <= 100);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void OBS_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FOBS = input;
        Assert.Equal(expected, _instance.FOBS);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void ClienteContrato_ShouldAcceptIntegerValues(int value)
    {
        _instance.FClienteContrato = value;
        Assert.Equal(value, _instance.FClienteContrato);
    }

    [Fact]
    public void ClienteContrato_DefaultValue_ShouldBeZero()
    {
        var instance = new DBContratos();
        Assert.Equal(0, instance.FClienteContrato);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void IdExtrangeiro_ShouldAcceptIntegerValues(int value)
    {
        _instance.FIdExtrangeiro = value;
        Assert.Equal(value, _instance.FIdExtrangeiro);
    }

    [Fact]
    public void IdExtrangeiro_DefaultValue_ShouldBeZero()
    {
        var instance = new DBContratos();
        Assert.Equal(0, instance.FIdExtrangeiro);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void ChaveContrato_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FChaveContrato = input;
        Assert.Equal(expected, _instance.FChaveContrato);
    }

    [Fact]
    public void ChaveContrato_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FChaveContrato = longString;
        Assert.True(_instance.FChaveContrato.Length <= 50);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Avulso_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FAvulso = value;
        Assert.Equal(value, _instance.FAvulso);
    }

    [Fact]
    public void Avulso_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBContratos();
        Assert.False(instance.FAvulso);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Suspenso_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FSuspenso = value;
        Assert.Equal(value, _instance.FSuspenso);
    }

    [Fact]
    public void Suspenso_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBContratos();
        Assert.False(instance.FSuspenso);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Multa_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FMulta = input;
        Assert.Equal(expected, _instance.FMulta);
    }

    [Fact]
    public void Multa_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 10 + 10);
        _instance.FMulta = longString;
        Assert.True(_instance.FMulta.Length <= 10);
    }

    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}