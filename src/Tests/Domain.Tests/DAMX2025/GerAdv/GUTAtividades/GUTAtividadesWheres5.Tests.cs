// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class GUTAtividadesWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFGUTAtividadesFactory> _mockGUTAtividadesFactory;
    private readonly Mock<FGUTAtividades> _mockFGUTAtividades;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly GUTAtividadesWhere _gutatividadesWhere;
    public GUTAtividadesWhereTests()
    {
        _mockGUTAtividadesFactory = new Mock<IFGUTAtividadesFactory>();
        _mockFGUTAtividades = new Mock<FGUTAtividades>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _gutatividadesWhere = new GUTAtividadesWhere(_mockGUTAtividadesFactory.Object);
    }

    public void Dispose()
    {
        _mockGUTAtividadesFactory?.Reset();
        _mockFGUTAtividades?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
        };
    }

    private void SetupMockFGUTAtividades(string? Nome = "João", string? Observacao = "Observação teste", int? GUTGrupo = 1, int? GUTPeriodicidade = 1, int? Operador = 1, bool? Concluido = false, string? DataConcluido = "24/04/1975", int? DiasParaIniciar = 1, int? MinutosParaRealizar = 1)
    {
        _mockFGUTAtividades.Setup(f => f.FNome).Returns(Nome ?? string.Empty);
        _mockFGUTAtividades.Setup(f => f.FObservacao).Returns(Observacao ?? string.Empty);
        _mockFGUTAtividades.Setup(f => f.FGUTGrupo).Returns(GUTGrupo ?? 0);
        _mockFGUTAtividades.Setup(f => f.FGUTPeriodicidade).Returns(GUTPeriodicidade ?? 0);
        _mockFGUTAtividades.Setup(f => f.FOperador).Returns(Operador ?? 0);
        _mockFGUTAtividades.Setup(f => f.FConcluido).Returns(Concluido ?? false);
        _mockFGUTAtividades.Setup(f => f.FDataConcluido).Returns(DataConcluido ?? string.Empty);
        _mockFGUTAtividades.Setup(f => f.FDiasParaIniciar).Returns(DiasParaIniciar ?? 0);
        _mockFGUTAtividades.Setup(f => f.FMinutosParaRealizar).Returns(MinutosParaRealizar ?? 0);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFGUTAtividadesFactory>();
        // Act
        var gutatividadesWhere = new GUTAtividadesWhere(mockFactory.Object);
        // Assert
        gutatividadesWhere.Should().NotBeNull();
        gutatividadesWhere.Should().BeAssignableTo<IGUTAtividadesWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFGUTAtividadesFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new GUTAtividadesWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnGUTAtividadesResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFGUTAtividades();
        _mockGUTAtividadesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFGUTAtividades.Object);
        // Act
        var result = _gutatividadesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.Nome.Should().Be("João");
        result.Observacao.Should().Be("Observação teste");
        result.GUTGrupo.Should().Be(1);
        result.GUTPeriodicidade.Should().Be(1);
        result.Operador.Should().Be(1);
        result.Concluido.Should().Be(false);
        result.DataConcluido.Should().Be("24/04/1975");
        result.DiasParaIniciar.Should().Be(1);
        result.MinutosParaRealizar.Should().Be(1);
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFGUTAtividades(Nome: null, Observacao: null, GUTGrupo: null, GUTPeriodicidade: null, Operador: null, Concluido: null, DataConcluido: null, DiasParaIniciar: null, MinutosParaRealizar: null);
        _mockGUTAtividadesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFGUTAtividades.Object);
        // Act
        var result = _gutatividadesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Nome.Should().Be(string.Empty);
        result.Observacao.Should().Be(string.Empty);
        result.GUTGrupo.Should().Be(0);
        result.GUTPeriodicidade.Should().Be(0);
        result.Operador.Should().Be(0);
        result.Concluido.Should().Be(false);
        result.DataConcluido.Should().Be(string.Empty);
        result.DiasParaIniciar.Should().Be(0);
        result.MinutosParaRealizar.Should().Be(0);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFGUTAtividades();
        _mockGUTAtividadesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFGUTAtividades.Object);
        // Act
        var result = _gutatividadesWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockGUTAtividadesFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFGUTAtividades();
        _mockGUTAtividadesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFGUTAtividades.Object);
        // Act
        var result = _gutatividadesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockGUTAtividadesFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFGUTAtividades();
        _mockGUTAtividadesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFGUTAtividades.Object);
        // Act
        var result = _gutatividadesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockGUTAtividadesFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFGUTAtividades();
        _mockGUTAtividadesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFGUTAtividades.Object);
        // Act
        _gutatividadesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockGUTAtividadesFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFGUTAtividadesInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFGUTAtividades.Setup(f => f.Dispose());
        SetupMockFGUTAtividades();
        _mockGUTAtividadesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFGUTAtividades.Object);
        // Act
        _gutatividadesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFGUTAtividades.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockGUTAtividadesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _gutatividadesWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFGUTAtividades(Nome: "João", Observacao: "Observação teste", GUTGrupo: 1, GUTPeriodicidade: 1, Operador: 1, Concluido: false, DataConcluido: "24/04/1975", DiasParaIniciar: 1, MinutosParaRealizar: 1);
        _mockGUTAtividadesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFGUTAtividades.Object);
        // Act
        var result = _gutatividadesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.Nome.Should().Be("João");
        result.Observacao.Should().Be("Observação teste");
        result.GUTGrupo.Should().Be(1);
        result.GUTPeriodicidade.Should().Be(1);
        result.Operador.Should().Be(1);
        result.Concluido.Should().Be(false);
        result.DataConcluido.Should().Be("24/04/1975");
        result.DiasParaIniciar.Should().Be(1);
        result.MinutosParaRealizar.Should().Be(1);
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "Nome = @{DBGUTAtividadesDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBGUTAtividadesDicInfo.CampoNome}", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"),
        };
        SetupMockFGUTAtividades();
        _mockGUTAtividadesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFGUTAtividades.Object);
        // Act
        _gutatividadesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockGUTAtividadesFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBGUTAtividadesDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#region DateTime Tests
    [Fact]
    public void Read_WithValidDateDataConcluidoFields_ShouldParseAndSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var testDate = "31/12/2024";
        SetupMockFGUTAtividades(DataConcluido: testDate);
        _mockGUTAtividadesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFGUTAtividades.Object);
        // Act
        var result = _gutatividadesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataConcluido.Should().Be("31/12/2024");
    }

    [Fact]
    public void Read_WithInvalidDateDataConcluidoStrings_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFGUTAtividades(DataConcluido: "invalid-date");
        _mockGUTAtividadesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFGUTAtividades.Object);
        // Act
        var result = _gutatividadesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataConcluido.Should().Be("");
    }

    [Fact]
    public void Read_WithNullDateDataConcluidoFields_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFGUTAtividades(DataConcluido: null);
        _mockGUTAtividadesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFGUTAtividades.Object);
        // Act
        var result = _gutatividadesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataConcluido.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("31/12/2024")]
    [InlineData("2025/01/01T23:59:59")]
    [InlineData("2000-02-29")] // Leap year
    [InlineData("2025/01/02T14:30:45.123")]
    public void Read_WithValidDateDataConcluidoFormats_ShouldParseCorrectly(string dateString)
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedDate = DateTime.Parse(dateString);
        SetupMockFGUTAtividades(DataConcluido: dateString);
        _mockGUTAtividadesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFGUTAtividades.Object);
        // Act
        var result = _gutatividadesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataConcluido.Should().Be(dateString);
    }
#endregion
#endregion
}