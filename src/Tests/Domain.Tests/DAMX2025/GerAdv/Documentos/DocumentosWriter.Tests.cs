// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class DocumentosWriterTests
{
    private readonly Mock<IFDocumentosFactory> _mockDocumentosFactory;
    private readonly Mock<FDocumentos> _mockFDocumentos;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DocumentosWriter _documentosWriter;
    public DocumentosWriterTests()
    {
        _mockDocumentosFactory = new Mock<IFDocumentosFactory>();
        _mockFDocumentos = new Mock<FDocumentos>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _documentosWriter = new DocumentosWriter(_mockDocumentosFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var documentos = CreateValidDocumentosModel();
        documentos.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockDocumentosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFDocumentos.Object);
        _mockFDocumentos.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _documentosWriter.WriteAsync(documentos, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFDocumentos.Object);
        _mockDocumentosFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockDocumentosFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFDocumentos.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var documentos = CreateValidDocumentosModel();
        documentos.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockDocumentosFactory.Setup(x => x.CreateFromIdAsync(documentos.Id, _mockConnection.Object)).ReturnsAsync(_mockFDocumentos.Object);
        _mockFDocumentos.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _documentosWriter.WriteAsync(documentos, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFDocumentos.Object);
        _mockDocumentosFactory.Verify(x => x.CreateFromIdAsync(documentos.Id, _mockConnection.Object), Times.Once);
        _mockDocumentosFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFDocumentos.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var documentos = CreateValidDocumentosModel();
        var auditorQuem = 99;
        _mockDocumentosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFDocumentos.Object);
        _mockFDocumentos.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _documentosWriter.WriteAsync(documentos, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFDocumentos.Object);
        _mockFDocumentos.VerifySet(x => x.FGUID = documentos.GUID, Times.Once);
        _mockFDocumentos.VerifySet(x => x.FProcesso = documentos.Processo, Times.Once);
        _mockFDocumentos.VerifySet(x => x.FData = documentos.Data, Times.Once);
        _mockFDocumentos.VerifySet(x => x.FObservacao = documentos.Observacao, Times.Once);
        _mockFDocumentos.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var documentos = CreateValidDocumentosModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockDocumentosFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _documentosWriter.WriteAsync(documentos, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var documentos = CreateValidDocumentosModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockDocumentosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFDocumentos.Object);
        _mockFDocumentos.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _documentosWriter.WriteAsync(documentos, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var documentosResponse = new DocumentosResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockDocumentosFactory.Setup(x => x.DeleteAsync(operadorId, documentosResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _documentosWriter.Delete(documentosResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockDocumentosFactory.Verify(x => x.DeleteAsync(operadorId, documentosResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var documentosResponse = new DocumentosResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockDocumentosFactory.Setup(x => x.DeleteAsync(operadorId, documentosResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _documentosWriter.Delete(documentosResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var documentosResponse = new DocumentosResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockDocumentosFactory.Setup(x => x.DeleteAsync(operadorId, documentosResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _documentosWriter.Delete(documentosResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new DocumentosWriter(_mockDocumentosFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new DocumentosWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.Documentos CreateValidDocumentosModel()
    {
        return new Models.Documentos
        {
            Id = 0,
            GUID = Guid.NewGuid().ToString(),
            Processo = 1,
            Data = "27/05/2022",
            Observacao = "Observação teste"
        };
    }
#endregion
}