// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class ForoValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFForoFactory> _mockForoFactory;
    private readonly Mock<IForoReader> _mockReader;
    private readonly ForoValidation _validation;
    private readonly Mock<IForoService> _mockForoService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<ICidadeReader> _mockCidadeReader;
    private readonly ForoService _service;
    private readonly string _validUri = "test-uri";
    public ForoValidationTests()
    {
        _mockForoFactory = new Mock<IFForoFactory>();
        _mockReader = new Mock<IForoReader>();
        _validation = new ForoValidation();
        _mockForoService = new Mock<IForoService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockCidadeReader = new Mock<ICidadeReader>();
    }

#region Class Structure Tests
    [Fact]
    public void ForoValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IForoValidation>();
    }

    [Fact]
    public void ForoValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(ForoValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void ForoValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(ForoValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.Foro CreateValidForo()
    {
        return new Models.Foro
        {
            Id = 1,
            EMail = "test@email.com",
            Nome = "João",
            Unico = false,
            Cidade = 0,
            Site = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Endereco = "Rua das Flores, 123",
            Bairro = "Centro",
            Fone = "(11) 99999-9999",
            Fax = "(11) 88888-9999",
            CEP = "01234-567",
            OBS = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            UnicoConfirmado = true,
            Web = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockForoService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterForo>(), It.IsAny<string>())).ReturnsAsync(new List<ForoResponseAll>());
        // Setup other mocks but don't override the Foros service mock
        _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.CidadeResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockForoService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterForo>(), It.IsAny<string>())).ReturnsAsync(new List<ForoResponseAll>());
        // Setup other mocks but don't override the Foros service mock
        _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.CidadeResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var foro = new Models.Foro
        {
            Id = 1,
            EMail = null,
            Nome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Unico = false,
            Site = null,
            Endereco = null,
            Bairro = null,
            Fone = null,
            Fax = null,
            CEP = null,
            OBS = null,
            UnicoConfirmado = true,
            Web = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(foro, _mockForoService.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockForoService.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region EMail Validation Tests
    [Fact]
    public async Task ValidateReg_WithInvalidEMail_ShouldThrowSGValidationException()
    {
        // Arrange
        var foro = CreateValidForo();
        foro.EMail = "invalid-email";
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(foro, _mockForoService.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("formato inválido.");
    }

    [Fact]
    public async Task ValidateReg_WithValidEMail_ShouldPass()
    {
        // Arrange
        var foro = CreateValidForo();
        foro.EMail = "menphis@example.com";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(foro, _mockForoService.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithEmptyEMail_ShouldPass()
    {
        // Arrange
        var foro = CreateValidForo();
        foro.EMail = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(foro, _mockForoService.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region Foreign Key Validation Tests - Cidade
    [Fact]
    public async Task ValidateReg_WithInvalidCidade_ShouldThrowSGValidationException()
    {
        // Arrange
        var foro = CreateValidForo();
        foro.Cidade = 999;
        _mockCidadeReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.CidadeResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(foro, _mockForoService.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedCidadeId_ShouldThrowSGValidationException()
    {
        // Arrange
        var foro = CreateValidForo();
        foro.Cidade = 999;
        var reg888 = new Models.Response.CidadeResponse
        {
            Id = 888
        }; // Different ID
        _mockCidadeReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(foro, _mockForoService.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidCidade_ShouldPass()
    {
        // Arrange
        var foro = CreateValidForo();
        foro.Cidade = 123;
        var reg123 = new Models.Response.CidadeResponse
        {
            Id = 123
        };
        _mockCidadeReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(foro, _mockForoService.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyCidade_ShouldPass()
    {
        // Arrange
        var foro = CreateValidForo();
        foro.Cidade = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(foro, _mockForoService.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockCidadeReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}