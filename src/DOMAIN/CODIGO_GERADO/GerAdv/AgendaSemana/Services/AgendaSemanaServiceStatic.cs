// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class AgendaSemanaService
{
    private static (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterAgendaSemana filtro)
    {
        var parameters = new List<SqlParameter>();
        if (!string.IsNullOrEmpty(filtro.ParaNome))
        {
            parameters.Add(new($"@{nameof(DBAgendaSemanaDicInfo.ParaNome)}", ApplyWildCard(filtro.WildcardChar, filtro.ParaNome)));
        }

        if (!string.IsNullOrEmpty(filtro.Data))
        {
            parameters.Add(new($"@{nameof(DBAgendaSemanaDicInfo.Data)}", ApplyWildCard(filtro.WildcardChar, filtro.Data)));
        }

        if (filtro.Funcionario != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAgendaSemanaDicInfo.Funcionario)}", filtro.Funcionario));
        }

        if (filtro.Advogado != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAgendaSemanaDicInfo.Advogado)}", filtro.Advogado));
        }

        if (filtro.TipoCompromisso != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAgendaSemanaDicInfo.TipoCompromisso)}", filtro.TipoCompromisso));
        }

        if (!string.IsNullOrEmpty(filtro.Compromisso))
        {
            parameters.Add(new($"@{nameof(DBAgendaSemanaDicInfo.Compromisso)}", ApplyWildCard(filtro.WildcardChar, filtro.Compromisso)));
        }

        if (filtro.Concluido != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAgendaSemanaDicInfo.Concluido)}", filtro.Concluido));
        }

        if (filtro.Liberado != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAgendaSemanaDicInfo.Liberado)}", filtro.Liberado));
        }

        if (filtro.Importante != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAgendaSemanaDicInfo.Importante)}", filtro.Importante));
        }

        if (!string.IsNullOrEmpty(filtro.Nome))
        {
            parameters.Add(new($"@{nameof(DBAgendaSemanaDicInfo.Nome)}", ApplyWildCard(filtro.WildcardChar, filtro.Nome)));
        }

        if (filtro.Cliente != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAgendaSemanaDicInfo.Cliente)}", filtro.Cliente));
        }

        if (!string.IsNullOrEmpty(filtro.NomeCliente))
        {
            parameters.Add(new($"@{nameof(DBAgendaSemanaDicInfo.NomeCliente)}", ApplyWildCard(filtro.WildcardChar, filtro.NomeCliente)));
        }

        if (!string.IsNullOrEmpty(filtro.Tipo))
        {
            parameters.Add(new($"@{nameof(DBAgendaSemanaDicInfo.Tipo)}", ApplyWildCard(filtro.WildcardChar, filtro.Tipo)));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAgendaSemanaDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
        }

        if (filtro.Codigo_filtro_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAgendaSemanaDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
        }

        if (filtro.LogicalOperator.IsEmpty() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        cWhere.Append(filtro.ParaNome.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAgendaSemanaDicInfo.PTabelaNome}].[{DBAgendaSemanaDicInfo.ParaNome}]  {DevourerConsts.MsiCollate} like @{nameof(DBAgendaSemanaDicInfo.ParaNome)}");
        cWhere.Append(filtro.Data.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAgendaSemanaDicInfo.PTabelaNome}].[{DBAgendaSemanaDicInfo.Data}]  {DevourerConsts.MsiCollate} like @{nameof(DBAgendaSemanaDicInfo.Data)}");
        cWhere.Append(filtro.Funcionario <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAgendaSemanaDicInfo.PTabelaNome}].[{DBAgendaSemanaDicInfo.Funcionario}] = @{nameof(DBAgendaSemanaDicInfo.Funcionario)}");
        cWhere.Append(filtro.Advogado <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAgendaSemanaDicInfo.PTabelaNome}].[{DBAgendaSemanaDicInfo.Advogado}] = @{nameof(DBAgendaSemanaDicInfo.Advogado)}");
        cWhere.Append(filtro.TipoCompromisso <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAgendaSemanaDicInfo.PTabelaNome}].[{DBAgendaSemanaDicInfo.TipoCompromisso}] = @{nameof(DBAgendaSemanaDicInfo.TipoCompromisso)}");
        cWhere.Append(filtro.Compromisso.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAgendaSemanaDicInfo.PTabelaNome}].[{DBAgendaSemanaDicInfo.Compromisso}]  {DevourerConsts.MsiCollate} like @{nameof(DBAgendaSemanaDicInfo.Compromisso)}");
        cWhere.Append(filtro.Concluido == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAgendaSemanaDicInfo.PTabelaNome}].[{DBAgendaSemanaDicInfo.Concluido}] = @{nameof(DBAgendaSemanaDicInfo.Concluido)}");
        cWhere.Append(filtro.Liberado == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAgendaSemanaDicInfo.PTabelaNome}].[{DBAgendaSemanaDicInfo.Liberado}] = @{nameof(DBAgendaSemanaDicInfo.Liberado)}");
        cWhere.Append(filtro.Importante == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAgendaSemanaDicInfo.PTabelaNome}].[{DBAgendaSemanaDicInfo.Importante}] = @{nameof(DBAgendaSemanaDicInfo.Importante)}");
        cWhere.Append(filtro.Nome.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAgendaSemanaDicInfo.PTabelaNome}].[{DBAgendaSemanaDicInfo.Nome}]  {DevourerConsts.MsiCollate} like @{nameof(DBAgendaSemanaDicInfo.Nome)}");
        cWhere.Append(filtro.Cliente <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAgendaSemanaDicInfo.PTabelaNome}].[{DBAgendaSemanaDicInfo.Cliente}] = @{nameof(DBAgendaSemanaDicInfo.Cliente)}");
        cWhere.Append(filtro.NomeCliente.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAgendaSemanaDicInfo.PTabelaNome}].[{DBAgendaSemanaDicInfo.NomeCliente}]  {DevourerConsts.MsiCollate} like @{nameof(DBAgendaSemanaDicInfo.NomeCliente)}");
        cWhere.Append(filtro.Tipo.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAgendaSemanaDicInfo.PTabelaNome}].[{DBAgendaSemanaDicInfo.Tipo}]  {DevourerConsts.MsiCollate} like @{nameof(DBAgendaSemanaDicInfo.Tipo)}");
        if (!filtro.Codigo_filtro.IsEmpty() && filtro.Codigo_filtro_end.IsEmpty())
        {
            cWhere.Append(filtro.Codigo_filtro <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAgendaSemanaDicInfo.PTabelaNome}].[{DBAgendaSemanaDicInfo.CampoCodigo}] >= @{nameof(DBAgendaSemanaDicInfo.CampoCodigo)}");
        }
        else
        {
            cWhere.Append((filtro.Codigo_filtro <= 0 && filtro.Codigo_filtro_end <= 0) ? string.Empty : (!(filtro.Codigo_filtro <= 0) && !(filtro.Codigo_filtro_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAgendaSemanaDicInfo.CampoCodigo} BETWEEN @{nameof(DBAgendaSemanaDicInfo.CampoCodigo)} AND @{nameof(DBAgendaSemanaDicInfo.CampoCodigo)}_end" : !(filtro.Codigo_filtro <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAgendaSemanaDicInfo.CampoCodigo} = @{nameof(DBAgendaSemanaDicInfo.CampoCodigo)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAgendaSemanaDicInfo.CampoCodigo} <= @{nameof(DBAgendaSemanaDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private static string ApplyWildCard(char wildcardChar, string value)
    {
        if (wildcardChar == '\0' || wildcardChar == ' ')
        {
            return value;
        }

        var result = $"{wildcardChar}{value.Replace(" ", wildcardChar.ToString())}{wildcardChar}";
        return result;
    }

    private async Task<IEnumerable<AgendaSemanaResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}