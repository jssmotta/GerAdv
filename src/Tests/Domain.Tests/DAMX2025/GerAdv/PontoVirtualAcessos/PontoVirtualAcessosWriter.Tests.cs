// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class PontoVirtualAcessosWriterTests
{
    private readonly Mock<IFPontoVirtualAcessosFactory> _mockPontoVirtualAcessosFactory;
    private readonly Mock<FPontoVirtualAcessos> _mockFPontoVirtualAcessos;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly PontoVirtualAcessosWriter _pontovirtualacessosWriter;
    public PontoVirtualAcessosWriterTests()
    {
        _mockPontoVirtualAcessosFactory = new Mock<IFPontoVirtualAcessosFactory>();
        _mockFPontoVirtualAcessos = new Mock<FPontoVirtualAcessos>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _pontovirtualacessosWriter = new PontoVirtualAcessosWriter(_mockPontoVirtualAcessosFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var pontovirtualacessos = CreateValidPontoVirtualAcessosModel();
        pontovirtualacessos.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockPontoVirtualAcessosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFPontoVirtualAcessos.Object);
        _mockFPontoVirtualAcessos.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _pontovirtualacessosWriter.WriteAsync(pontovirtualacessos, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFPontoVirtualAcessos.Object);
        _mockPontoVirtualAcessosFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockPontoVirtualAcessosFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFPontoVirtualAcessos.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var pontovirtualacessos = CreateValidPontoVirtualAcessosModel();
        pontovirtualacessos.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockPontoVirtualAcessosFactory.Setup(x => x.CreateFromIdAsync(pontovirtualacessos.Id, _mockConnection.Object)).ReturnsAsync(_mockFPontoVirtualAcessos.Object);
        _mockFPontoVirtualAcessos.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _pontovirtualacessosWriter.WriteAsync(pontovirtualacessos, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFPontoVirtualAcessos.Object);
        _mockPontoVirtualAcessosFactory.Verify(x => x.CreateFromIdAsync(pontovirtualacessos.Id, _mockConnection.Object), Times.Once);
        _mockPontoVirtualAcessosFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFPontoVirtualAcessos.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var pontovirtualacessos = CreateValidPontoVirtualAcessosModel();
        var auditorQuem = 99;
        _mockPontoVirtualAcessosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFPontoVirtualAcessos.Object);
        _mockFPontoVirtualAcessos.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _pontovirtualacessosWriter.WriteAsync(pontovirtualacessos, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFPontoVirtualAcessos.Object);
        _mockFPontoVirtualAcessos.VerifySet(x => x.FOperador = pontovirtualacessos.Operador, Times.Once);
        _mockFPontoVirtualAcessos.VerifySet(x => x.FDataHora = pontovirtualacessos.DataHora, Times.Once);
        _mockFPontoVirtualAcessos.VerifySet(x => x.FTipo = pontovirtualacessos.Tipo, Times.Once);
        _mockFPontoVirtualAcessos.VerifySet(x => x.FOrigem = pontovirtualacessos.Origem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var pontovirtualacessos = CreateValidPontoVirtualAcessosModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockPontoVirtualAcessosFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _pontovirtualacessosWriter.WriteAsync(pontovirtualacessos, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var pontovirtualacessos = CreateValidPontoVirtualAcessosModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockPontoVirtualAcessosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFPontoVirtualAcessos.Object);
        _mockFPontoVirtualAcessos.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _pontovirtualacessosWriter.WriteAsync(pontovirtualacessos, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var pontovirtualacessosResponse = new PontoVirtualAcessosResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockPontoVirtualAcessosFactory.Setup(x => x.DeleteAsync(operadorId, pontovirtualacessosResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _pontovirtualacessosWriter.Delete(pontovirtualacessosResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockPontoVirtualAcessosFactory.Verify(x => x.DeleteAsync(operadorId, pontovirtualacessosResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var pontovirtualacessosResponse = new PontoVirtualAcessosResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockPontoVirtualAcessosFactory.Setup(x => x.DeleteAsync(operadorId, pontovirtualacessosResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _pontovirtualacessosWriter.Delete(pontovirtualacessosResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var pontovirtualacessosResponse = new PontoVirtualAcessosResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockPontoVirtualAcessosFactory.Setup(x => x.DeleteAsync(operadorId, pontovirtualacessosResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _pontovirtualacessosWriter.Delete(pontovirtualacessosResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new PontoVirtualAcessosWriter(_mockPontoVirtualAcessosFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new PontoVirtualAcessosWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.PontoVirtualAcessos CreateValidPontoVirtualAcessosModel()
    {
        return new Models.PontoVirtualAcessos
        {
            Id = 0,
            Operador = 1,
            DataHora = "27/05/2022",
            Tipo = false,
            Origem = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
    }
#endregion
}