// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class ProcessosParadosService
{
    private static (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterProcessosParados filtro)
    {
        var parameters = new List<SqlParameter>();
        if (filtro.Processo != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.Processo)}", filtro.Processo));
        }

        if (filtro.Processo_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.Processo)}_end", filtro.Processo_end));
        }

        if (filtro.Semana != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.Semana)}", filtro.Semana));
        }

        if (filtro.Semana_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.Semana)}_end", filtro.Semana_end));
        }

        if (filtro.Ano != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.Ano)}", filtro.Ano));
        }

        if (filtro.Ano_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.Ano)}_end", filtro.Ano_end));
        }

        if (!filtro.DataHora.IsEmpty())
        {
            if (DateTime.TryParse(filtro.DataHora, out var dataParam))
                parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.DataHora)}", dataParam));
        }

        if (!filtro.DataHora_end.IsEmpty())
        {
            if (DateTime.TryParse(filtro.DataHora_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.DataHora)}_end", dataParam));
        }

        if (filtro.Operador != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.Operador)}", filtro.Operador));
        }

        if (!filtro.DataHistorico.IsEmpty())
        {
            if (DateTime.TryParse(filtro.DataHistorico, out var dataParam))
                parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.DataHistorico)}", dataParam));
        }

        if (!filtro.DataHistorico_end.IsEmpty())
        {
            if (DateTime.TryParse(filtro.DataHistorico_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.DataHistorico)}_end", dataParam));
        }

        if (!filtro.DataNENotas.IsEmpty())
        {
            if (DateTime.TryParse(filtro.DataNENotas, out var dataParam))
                parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.DataNENotas)}", dataParam));
        }

        if (!filtro.DataNENotas_end.IsEmpty())
        {
            if (DateTime.TryParse(filtro.DataNENotas_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.DataNENotas)}_end", dataParam));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
        }

        if (filtro.Codigo_filtro_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
        }

        if (filtro.LogicalOperator.IsEmpty() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        if (!filtro.Processo.IsEmpty() && filtro.Processo_end.IsEmpty())
        {
            cWhere.Append(filtro.Processo <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessosParadosDicInfo.PTabelaNome}].[{DBProcessosParadosDicInfo.Processo}] >= @{nameof(DBProcessosParadosDicInfo.Processo)}");
        }
        else
        {
            cWhere.Append((filtro.Processo <= 0 && filtro.Processo_end <= 0) ? string.Empty : (!(filtro.Processo <= 0) && !(filtro.Processo_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProcessosParadosDicInfo.Processo} BETWEEN @{nameof(DBProcessosParadosDicInfo.Processo)} AND @{nameof(DBProcessosParadosDicInfo.Processo)}_end" : !(filtro.Processo <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProcessosParadosDicInfo.Processo} = @{nameof(DBProcessosParadosDicInfo.Processo)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProcessosParadosDicInfo.Processo} <= @{nameof(DBProcessosParadosDicInfo.Processo)}_end");
        }

        if (!filtro.Semana.IsEmpty() && filtro.Semana_end.IsEmpty())
        {
            cWhere.Append(filtro.Semana <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessosParadosDicInfo.PTabelaNome}].[{DBProcessosParadosDicInfo.Semana}] >= @{nameof(DBProcessosParadosDicInfo.Semana)}");
        }
        else
        {
            cWhere.Append((filtro.Semana <= 0 && filtro.Semana_end <= 0) ? string.Empty : (!(filtro.Semana <= 0) && !(filtro.Semana_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProcessosParadosDicInfo.Semana} BETWEEN @{nameof(DBProcessosParadosDicInfo.Semana)} AND @{nameof(DBProcessosParadosDicInfo.Semana)}_end" : !(filtro.Semana <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProcessosParadosDicInfo.Semana} = @{nameof(DBProcessosParadosDicInfo.Semana)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProcessosParadosDicInfo.Semana} <= @{nameof(DBProcessosParadosDicInfo.Semana)}_end");
        }

        if (!filtro.Ano.IsEmpty() && filtro.Ano_end.IsEmpty())
        {
            cWhere.Append(filtro.Ano <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessosParadosDicInfo.PTabelaNome}].[{DBProcessosParadosDicInfo.Ano}] >= @{nameof(DBProcessosParadosDicInfo.Ano)}");
        }
        else
        {
            cWhere.Append((filtro.Ano <= 0 && filtro.Ano_end <= 0) ? string.Empty : (!(filtro.Ano <= 0) && !(filtro.Ano_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProcessosParadosDicInfo.Ano} BETWEEN @{nameof(DBProcessosParadosDicInfo.Ano)} AND @{nameof(DBProcessosParadosDicInfo.Ano)}_end" : !(filtro.Ano <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProcessosParadosDicInfo.Ano} = @{nameof(DBProcessosParadosDicInfo.Ano)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProcessosParadosDicInfo.Ano} <= @{nameof(DBProcessosParadosDicInfo.Ano)}_end");
        }

        if (!filtro.DataHora.IsEmpty() && filtro.DataHora_end.IsEmpty())
        {
            cWhere.Append(filtro.DataHora.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"FORMAT([{DBProcessosParadosDicInfo.PTabelaNome}].[{DBProcessosParadosDicInfo.DataHora}], 'HH:mm') >= FORMAT(@{nameof(DBProcessosParadosDicInfo.DataHora)}, 'HH:mm')");
        }
        else
        {
            cWhere.Append((filtro.DataHora.IsEmpty() && filtro.DataHora_end.IsEmpty()) ? string.Empty : (!(filtro.DataHora.IsEmpty()) && !(filtro.DataHora_end.IsEmpty())) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"FORMAT({DBProcessosParadosDicInfo.DataHora}, 'HH:mm') BETWEEN FORMAT(@{nameof(DBProcessosParadosDicInfo.DataHora)}, 'HH:mm') AND FORMAT(@{nameof(DBProcessosParadosDicInfo.DataHora)}_end, 'HH:mm')" : !(filtro.DataHora.IsEmpty()) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"FORMAT({DBProcessosParadosDicInfo.DataHora}, 'HH:mm') = FORMAT(@{nameof(DBProcessosParadosDicInfo.DataHora)}, 'HH:mm')" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"FORMAT({DBProcessosParadosDicInfo.DataHora}, 'HH:mm') <= FORMAT(@{nameof(DBProcessosParadosDicInfo.DataHora)}_end, 'HH:mm')");
        }

        cWhere.Append(filtro.Operador <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessosParadosDicInfo.PTabelaNome}].[{DBProcessosParadosDicInfo.Operador}] = @{nameof(DBProcessosParadosDicInfo.Operador)}");
        if (!filtro.DataHistorico.IsEmpty() && filtro.DataHistorico_end.IsEmpty())
        {
            cWhere.Append(filtro.DataHistorico.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBProcessosParadosDicInfo.PTabelaNome}].[{DBProcessosParadosDicInfo.DataHistorico}], 103) >= CONVERT(DATE, @{nameof(DBProcessosParadosDicInfo.DataHistorico)}, 103)");
        }
        else
        {
            cWhere.Append((filtro.DataHistorico.IsEmpty() && filtro.DataHistorico_end.IsEmpty()) ? string.Empty : (!(filtro.DataHistorico.IsEmpty()) && !(filtro.DataHistorico_end.IsEmpty())) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProcessosParadosDicInfo.DataHistorico} BETWEEN @{nameof(DBProcessosParadosDicInfo.DataHistorico)} AND @{nameof(DBProcessosParadosDicInfo.DataHistorico)}_end" : !(filtro.DataHistorico.IsEmpty()) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProcessosParadosDicInfo.DataHistorico} = @{nameof(DBProcessosParadosDicInfo.DataHistorico)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProcessosParadosDicInfo.DataHistorico} <= @{nameof(DBProcessosParadosDicInfo.DataHistorico)}_end");
        }

        if (!filtro.DataNENotas.IsEmpty() && filtro.DataNENotas_end.IsEmpty())
        {
            cWhere.Append(filtro.DataNENotas.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBProcessosParadosDicInfo.PTabelaNome}].[{DBProcessosParadosDicInfo.DataNENotas}], 103) >= CONVERT(DATE, @{nameof(DBProcessosParadosDicInfo.DataNENotas)}, 103)");
        }
        else
        {
            cWhere.Append((filtro.DataNENotas.IsEmpty() && filtro.DataNENotas_end.IsEmpty()) ? string.Empty : (!(filtro.DataNENotas.IsEmpty()) && !(filtro.DataNENotas_end.IsEmpty())) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProcessosParadosDicInfo.DataNENotas} BETWEEN @{nameof(DBProcessosParadosDicInfo.DataNENotas)} AND @{nameof(DBProcessosParadosDicInfo.DataNENotas)}_end" : !(filtro.DataNENotas.IsEmpty()) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProcessosParadosDicInfo.DataNENotas} = @{nameof(DBProcessosParadosDicInfo.DataNENotas)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProcessosParadosDicInfo.DataNENotas} <= @{nameof(DBProcessosParadosDicInfo.DataNENotas)}_end");
        }

        if (!filtro.Codigo_filtro.IsEmpty() && filtro.Codigo_filtro_end.IsEmpty())
        {
            cWhere.Append(filtro.Codigo_filtro <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessosParadosDicInfo.PTabelaNome}].[{DBProcessosParadosDicInfo.CampoCodigo}] >= @{nameof(DBProcessosParadosDicInfo.CampoCodigo)}");
        }
        else
        {
            cWhere.Append((filtro.Codigo_filtro <= 0 && filtro.Codigo_filtro_end <= 0) ? string.Empty : (!(filtro.Codigo_filtro <= 0) && !(filtro.Codigo_filtro_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProcessosParadosDicInfo.CampoCodigo} BETWEEN @{nameof(DBProcessosParadosDicInfo.CampoCodigo)} AND @{nameof(DBProcessosParadosDicInfo.CampoCodigo)}_end" : !(filtro.Codigo_filtro <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProcessosParadosDicInfo.CampoCodigo} = @{nameof(DBProcessosParadosDicInfo.CampoCodigo)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProcessosParadosDicInfo.CampoCodigo} <= @{nameof(DBProcessosParadosDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private static string ApplyWildCard(char wildcardChar, string value)
    {
        if (wildcardChar == '\0' || wildcardChar == ' ')
        {
            return value;
        }

        var result = $"{wildcardChar}{value.Replace(" ", wildcardChar.ToString())}{wildcardChar}";
        return result;
    }

    private async Task<IEnumerable<ProcessosParadosResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}