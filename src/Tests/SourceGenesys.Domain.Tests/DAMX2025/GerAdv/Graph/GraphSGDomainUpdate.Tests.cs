// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// ============================================
// ARQUIVO: DBUpdateTests.cs.txt (Principal)
// ============================================
namespace MenphisSI.GerAdv.Tests;
public class DBGraphUpdate : IDisposable
{
    private readonly DBGraph _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBGraphUpdate()
    {
        _instance = new DBGraph();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void DefaultConstructor_ShouldCreateInstance_WithDefaultValues()
    {
        // Act
        var graph = new DBGraph();
        // Assert
        graph.Should().NotBeNull();
        graph.ITabelaName().Should().Be("Graph");
        graph.ID.Should().Be(0);
    }

    [Fact]
    public void AllProperties_WithValidValues_ShouldSetCorrectly()
    {
        // Arrange
        var graph = new DBGraph
        {
            FTabela = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FGUID = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        };
        // Assert - All properties should be set graph.FTabela.Should().Be( "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        graph.FGUID.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public void StringProperties_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var graph = new DBGraph();
        var longString = new string ('X', 300);
        graph.FTabela = longString; // MAX: 80
        graph.FGUID = longString; // MAX: 150
        // Assert - All properties should be set graph.FTabela.Should().HaveLength(80);
        graph.FGUID.Should().HaveLength(150);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FTabela_Property_ShouldAcceptValidNames(string Tabela)
    {
        // Arrange
        var graph = new DBGraph
        {
            // Act
            FTabela = Tabela
        };
        // Assert
        graph.FTabela.Should().Be(Tabela);
    }

    [Fact]
    public void FTabela_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var graph = new DBGraph
        {
            // Act
            FTabela = null
        };
        // Assert
        graph.FTabela.Should().Be(string.Empty);
    }

    [Fact]
    public void FTabela_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var graph = new DBGraph();
        var longName = new string ('A', 80 + 10); // Exceeds 80 character limit
        // Act
        graph.FTabela = longName;
        // Assert
        graph.FTabela.Should().HaveLength(80);
    }

    [Fact]
    public void FTabela_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FTabela = null;
        // Act
        var result = _instance.FTabela;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FTabela_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FTabela = expectedValue;
        // Act
        var result = _instance.FTabela;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FTabela_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBGraph).GetField("pFldFTabela", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FTabela = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FTabela);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FTabela_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBGraph).GetField("pFldFTabela", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FTabela = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FTabela);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FTabela_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBGraph).GetField("pFldFTabela", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FTabela = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FTabela);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FTabela_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBGraph).GetField("pFldFTabela", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FTabela = value;
        // Act
        _instance.FTabela = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FTabela_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBGraph).GetField("pFldFTabela", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FTabela = "Original Value";
        // Act
        _instance.FTabela = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FTabela_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBGraph).GetField("pFldFTabela", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FTabela = "First Value";
        // Act
        _instance.FTabela = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FTabela_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBGraph).GetField("pFldFTabela", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FTabela = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FTabela);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FTabela_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FTabela = input;
        // Assert
        Assert.Equal(expected, _instance.FTabela);
    }

    [Fact]
    public void FTabela_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBGraph).GetField("pFldFTabela", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FTabela = null;
        // Act
        _instance.FTabela = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FTabela_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBGraph).GetField("pFldFTabela", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FTabela = "Existing Value";
        // Act
        _instance.FTabela = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

#region Testes de GUID
    [Fact]
    public void GUID_DefaultValue_ShouldBeEmpty()
    {
        Assert.Equal(string.Empty, _instance.FGUID);
    }

    [Fact]
    public void GUID_SetValidGUID_ShouldStore()
    {
        var guid = Guid.NewGuid().ToString();
        _instance.FGUID = guid;
        Assert.Equal(guid, _instance.FGUID);
    }

#endregion
    [Fact]
    public void TabelaNome_Property_ShouldReturnCorrectTableName()
    {
        // Arrange
        var graph = new DBGraph();
        // Act & Assert
        graph.TabelaNome.Should().Be("Graph");
    }

    public virtual void Dispose()
    {
    // Cleanup resources if needed
    }
}