// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Factory;
public partial class FPenhoraStatus : MenphisSI.SG.GerAdv.DBPenhoraStatus, IDBPenhoraStatus
{
    // DI-compatible default constructor
    public FPenhoraStatus() : base()
    {
    }

    // Factory method for creating instances with SqlDataReader
    public static FPenhoraStatus CreateFromReader(SqlDataReader? dbRec)
    {
        return new FPenhoraStatus(dbRec);
    }

    // Factory method for creating instances with DataRow
    public static FPenhoraStatus CreateFromDataRow(DataRow? dbRec)
    {
        return new FPenhoraStatus(dbRec);
    }

    private FPenhoraStatus(SqlDataReader? dbRec) : base(dbRec)
    {
    }

    private FPenhoraStatus(DataRow? dbRec) : base(dbRec)
    {
    }

    public async Task<FPenhoraStatus> CreateFromIdAsync(int id, MsiSqlConnection oCnn)
    {
        var fPenhoraStatus = new FPenhoraStatus();
        await fPenhoraStatus.CarregarAsync(id, oCnn);
        return fPenhoraStatus;
    }

    private FPenhoraStatus(List<SqlParameter> parameters, in string? cNome = "", MsiSqlConnection? oCnn = null, string? fullSql = "", string sqlWhere = "", in string join = "") : base(parameters, cNome, oCnn, fullSql, sqlWhere, join)
    {
    }

    // Factory method for creating instances with parameters
    public static FPenhoraStatus CreateFromParameters(List<SqlParameter> parameters, MsiSqlConnection oCnn, in string? cNome = "", string? fullSql = "", string sqlWhere = "", in string join = "")
    {
        return new FPenhoraStatus(parameters, cNome, oCnn, fullSql, sqlWhere, join);
    }

    // Initialize method to load data with parameters after DI construction
    public void Initialize(List<SqlParameter> parameters, MsiSqlConnection oCnn, in string? cNome = "", string? fullSql = "", string sqlWhere = "", in string join = "")
    {
        if (oCnn is null)
            return;
        if (string.IsNullOrEmpty(fullSql) && !string.IsNullOrEmpty(cNome))
        {
            if (cNome is null)
                return;
            sqlWhere = cNome;
        }

        if (!string.IsNullOrEmpty(sqlWhere) || !string.IsNullOrEmpty(fullSql))
        {
            using var ds = ConfiguracoesDBT.GetDataTable(parameters, string.IsNullOrEmpty(fullSql) ? $"SET NOCOUNT ON; SELECT TOP (1) {CamposSqlX} FROM {PTabelaNome.dbo(oCnn)} {join} WHERE {sqlWhere};" : fullSql, CommandBehavior.SingleRow, oCnn);
            if (ds != null)
                CarregarDadosBd(ds.Rows.Count == 0 ? null : ds.Rows[0]);
        }
        else
        {
            using var cmd = new SqlCommand($"SET NOCOUNT ON; SELECT TOP (1) {CamposSqlX} FROM {PTabelaNome.dbo(oCnn)} WHERE [{CampoNome}] COLLATE SQL_Latin1_General_CP1_CI_AI like @CampoNome", oCnn?.InnerConnection);
            cmd.Parameters.AddWithValue("@CampoNome", cNome?.Trim() ?? string.Empty);
            using var ds = ConfiguracoesDBT.GetDataTable(cmd, CommandBehavior.SingleRow, oCnn);
            if (ds != null)
                CarregarDadosBd(ds.Rows.Count == 0 ? null : ds.Rows[0]);
        }
    }
}