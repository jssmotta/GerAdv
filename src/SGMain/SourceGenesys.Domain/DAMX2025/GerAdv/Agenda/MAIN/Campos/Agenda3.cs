// 100% auto-generated by Source Genesys Core
// copyright Â© 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming 1
public partial class DBAgenda
{
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool pFldFIDCOB, pFldFClienteAvisado, pFldFRevisarP2, pFldFIDNE, pFldFCidade, pFldFOculto, pFldFCartaPrecatoria, pFldFRevisar, pFldFHrFinal, pFldFAdvogado, pFldFEventoGerador, pFldFEventoData, pFldFFuncionario, pFldFData, pFldFEventoPrazo, pFldFHora, pFldFCompromisso, pFldFTipoCompromisso, pFldFCliente, pFldFLiberado, pFldFImportante, pFldFConcluido, pFldFArea, pFldFJustica, pFldFProcesso, pFldFIDHistorico, pFldFIDInsProcesso, pFldFUsuario, pFldFPreposto, pFldFQuemID, pFldFQuemCodigo, pFldFGUID, pFldFStatus, pFldFValor, pFldFDecisao, pFldFSempre, pFldFPrazoDias, pFldFProtocoloIntegrado, pFldFDataInicioPrazo, pFldFUsuarioCiente;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected int m_FIDCOB, m_FIDNE, m_FCidade, m_FOculto, m_FCartaPrecatoria, m_FAdvogado, m_FEventoGerador, m_FFuncionario, m_FEventoPrazo, m_FTipoCompromisso, m_FCliente, m_FArea, m_FJustica, m_FProcesso, m_FIDHistorico, m_FIDInsProcesso, m_FUsuario, m_FPreposto, m_FQuemID, m_FQuemCodigo, m_FSempre, m_FPrazoDias, m_FProtocoloIntegrado;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected string? m_FCompromisso, m_FGUID, m_FStatus, m_FDecisao;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected DateTime? m_FHrFinal, m_FEventoData, m_FData, m_FHora, m_FDataInicioPrazo;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool m_FClienteAvisado, m_FRevisarP2, m_FRevisar, m_FLiberado, m_FImportante, m_FConcluido, m_FUsuarioCiente;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected decimal m_FValor;
    public virtual int FIDCOB
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FIDCOB;
        set
        {
            pFldFIDCOB = pFldFIDCOB || value != m_FIDCOB;
            if (pFldFIDCOB)
                m_FIDCOB = value;
        }
    }

    public virtual bool FClienteAvisado
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FClienteAvisado;
        set
        {
            pFldFClienteAvisado = pFldFClienteAvisado || value != m_FClienteAvisado;
            if (pFldFClienteAvisado)
                m_FClienteAvisado = value;
        }
    }

    public virtual bool FRevisarP2
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FRevisarP2;
        set
        {
            pFldFRevisarP2 = pFldFRevisarP2 || value != m_FRevisarP2;
            if (pFldFRevisarP2)
                m_FRevisarP2 = value;
        }
    }

    public virtual int FIDNE
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FIDNE;
        set
        {
            pFldFIDNE = pFldFIDNE || value != m_FIDNE;
            if (pFldFIDNE)
                m_FIDNE = value;
        }
    }

    public virtual int FCidade
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCidade;
        set
        {
            pFldFCidade = pFldFCidade || value != m_FCidade;
            if (pFldFCidade)
                m_FCidade = value;
        }
    }

    public virtual int FOculto
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FOculto;
        set
        {
            pFldFOculto = pFldFOculto || value != m_FOculto;
            if (pFldFOculto)
                m_FOculto = value;
        }
    }

    public virtual int FCartaPrecatoria
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCartaPrecatoria;
        set
        {
            pFldFCartaPrecatoria = pFldFCartaPrecatoria || value != m_FCartaPrecatoria;
            if (pFldFCartaPrecatoria)
                m_FCartaPrecatoria = value;
        }
    }

    public virtual bool FRevisar
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FRevisar;
        set
        {
            pFldFRevisar = pFldFRevisar || value != m_FRevisar;
            if (pFldFRevisar)
                m_FRevisar = value;
        }
    }

    public virtual string? FHrFinal
    {
        // fdDate2 TRACE CODE
        get => $"{m_FHrFinal:HH:mm}";
        set
        {
            if (string.IsNullOrEmpty(value))
            {
                pFldFHrFinal = pFldFHrFinal || m_FHrFinal != null;
                m_FHrFinal = null;
                return;
            }

            if (value.IsEquals(DevourerOne.PNow))
            {
                pFldFHrFinal = true;
                m_FHrFinal = DevourerOne.DateTimeUtc;
            }
            else
            {
                if (value.IsEquals($"{m_FHrFinal:HH:mm}"))
                    return;
                if (!DateTime.TryParse(value, out var dateTime))
                    return;
                pFldFHrFinal = true;
                m_FHrFinal = dateTime;
            }
        }
    }

    public virtual int FAdvogado
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAdvogado;
        set
        {
            pFldFAdvogado = pFldFAdvogado || value != m_FAdvogado;
            if (pFldFAdvogado)
                m_FAdvogado = value;
        }
    }

    public virtual int FEventoGerador
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEventoGerador;
        set
        {
            pFldFEventoGerador = pFldFEventoGerador || value != m_FEventoGerador;
            if (pFldFEventoGerador)
                m_FEventoGerador = value;
        }
    }

    public virtual string? FEventoData
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEventoData is null || m_FEventoData == DevourerOne.DDataZerada ? string.Empty : m_FEventoData.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFEventoData, m_FEventoData, value)is not (true, var changed, var data))
                return;
            (pFldFEventoData, m_FEventoData) = (changed, data);
        }
    }

    public virtual int FFuncionario
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FFuncionario;
        set
        {
            pFldFFuncionario = pFldFFuncionario || value != m_FFuncionario;
            if (pFldFFuncionario)
                m_FFuncionario = value;
        }
    }

    public virtual string? FData
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FData is null || m_FData == DevourerOne.DDataZerada ? string.Empty : m_FData.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFData, m_FData, value)is not (true, var changed, var data))
                return;
            (pFldFData, m_FData) = (changed, data);
        }
    }

    public virtual int FEventoPrazo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEventoPrazo;
        set
        {
            pFldFEventoPrazo = pFldFEventoPrazo || value != m_FEventoPrazo;
            if (pFldFEventoPrazo)
                m_FEventoPrazo = value;
        }
    }

    public virtual string? FHora
    {
        // fdDate2 TRACE CODE
        get => $"{m_FHora:HH:mm}";
        set
        {
            if (string.IsNullOrEmpty(value))
            {
                pFldFHora = pFldFHora || m_FHora != null;
                m_FHora = null;
                return;
            }

            if (value.IsEquals(DevourerOne.PNow))
            {
                pFldFHora = true;
                m_FHora = DevourerOne.DateTimeUtc;
            }
            else
            {
                if (value.IsEquals($"{m_FHora:HH:mm}"))
                    return;
                if (!DateTime.TryParse(value, out var dateTime))
                    return;
                pFldFHora = true;
                m_FHora = dateTime;
            }
        }
    }

    // Tracking Code: 20250503
    public virtual string? FCompromisso
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCompromisso ?? string.Empty;
        set
        {
            pFldFCompromisso = pFldFCompromisso || !(m_FCompromisso ?? string.Empty).Equals(value);
            if (pFldFCompromisso)
                m_FCompromisso = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public virtual int FTipoCompromisso
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FTipoCompromisso;
        set
        {
            pFldFTipoCompromisso = pFldFTipoCompromisso || value != m_FTipoCompromisso;
            if (pFldFTipoCompromisso)
                m_FTipoCompromisso = value;
        }
    }

    public virtual int FCliente
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCliente;
        set
        {
            pFldFCliente = pFldFCliente || value != m_FCliente;
            if (pFldFCliente)
                m_FCliente = value;
        }
    }

    public virtual bool FLiberado
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FLiberado;
        set
        {
            pFldFLiberado = pFldFLiberado || value != m_FLiberado;
            if (pFldFLiberado)
                m_FLiberado = value;
        }
    }

    public virtual bool FImportante
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FImportante;
        set
        {
            pFldFImportante = pFldFImportante || value != m_FImportante;
            if (pFldFImportante)
                m_FImportante = value;
        }
    }

    public virtual bool FConcluido
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FConcluido;
        set
        {
            pFldFConcluido = pFldFConcluido || value != m_FConcluido;
            if (pFldFConcluido)
                m_FConcluido = value;
        }
    }

    public virtual int FArea
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FArea;
        set
        {
            pFldFArea = pFldFArea || value != m_FArea;
            if (pFldFArea)
                m_FArea = value;
        }
    }

    public virtual int FJustica
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FJustica;
        set
        {
            pFldFJustica = pFldFJustica || value != m_FJustica;
            if (pFldFJustica)
                m_FJustica = value;
        }
    }

    public virtual int FProcesso
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FProcesso;
        set
        {
            pFldFProcesso = pFldFProcesso || value != m_FProcesso;
            if (pFldFProcesso)
                m_FProcesso = value;
        }
    }

    public virtual int FIDHistorico
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FIDHistorico;
        set
        {
            pFldFIDHistorico = pFldFIDHistorico || value != m_FIDHistorico;
            if (pFldFIDHistorico)
                m_FIDHistorico = value;
        }
    }

    public virtual int FIDInsProcesso
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FIDInsProcesso;
        set
        {
            pFldFIDInsProcesso = pFldFIDInsProcesso || value != m_FIDInsProcesso;
            if (pFldFIDInsProcesso)
                m_FIDInsProcesso = value;
        }
    }

    public virtual int FUsuario
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FUsuario;
        set
        {
            pFldFUsuario = pFldFUsuario || value != m_FUsuario;
            if (pFldFUsuario)
                m_FUsuario = value;
        }
    }

    public virtual int FPreposto
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPreposto;
        set
        {
            pFldFPreposto = pFldFPreposto || value != m_FPreposto;
            if (pFldFPreposto)
                m_FPreposto = value;
        }
    }

    public virtual int FQuemID
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FQuemID;
        set
        {
            pFldFQuemID = pFldFQuemID || value != m_FQuemID;
            if (pFldFQuemID)
                m_FQuemID = value;
        }
    }

    public virtual int FQuemCodigo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FQuemCodigo;
        set
        {
            pFldFQuemCodigo = pFldFQuemCodigo || value != m_FQuemCodigo;
            if (pFldFQuemCodigo)
                m_FQuemCodigo = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(100, ErrorMessage = "A propriedade FGUID da tabela Agenda deve ter no mÃ¡ximo 100 caracteres.")]
    public virtual string? FGUID
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FGUID ?? string.Empty;
        set
        {
            pFldFGUID = pFldFGUID || !(m_FGUID ?? string.Empty).Equals(value);
            if (pFldFGUID)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FGUID = trimmed.Length > 100 ? trimmed.AsSpan(0, 100).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    public virtual string? FStatus
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FStatus ?? string.Empty;
        set
        {
            pFldFStatus = pFldFStatus || !(m_FStatus ?? string.Empty).Equals(value);
            if (pFldFStatus)
                m_FStatus = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public virtual decimal FValor
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FValor;
        set
        {
            if (value == m_FValor)
                return;
            pFldFValor = true;
            m_FValor = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(2048, ErrorMessage = "A propriedade FDecisao da tabela Agenda deve ter no mÃ¡ximo 2048 caracteres.")]
    public virtual string? FDecisao
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDecisao ?? string.Empty;
        set
        {
            pFldFDecisao = pFldFDecisao || !(m_FDecisao ?? string.Empty).Equals(value);
            if (pFldFDecisao)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FDecisao = trimmed.Length > 2048 ? trimmed.AsSpan(0, 2048).ToString() : trimmed;
            }
        }
    }

    public virtual int FSempre
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FSempre;
        set
        {
            pFldFSempre = pFldFSempre || value != m_FSempre;
            if (pFldFSempre)
                m_FSempre = value;
        }
    }

    public virtual int FPrazoDias
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPrazoDias;
        set
        {
            pFldFPrazoDias = pFldFPrazoDias || value != m_FPrazoDias;
            if (pFldFPrazoDias)
                m_FPrazoDias = value;
        }
    }

    public virtual int FProtocoloIntegrado
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FProtocoloIntegrado;
        set
        {
            pFldFProtocoloIntegrado = pFldFProtocoloIntegrado || value != m_FProtocoloIntegrado;
            if (pFldFProtocoloIntegrado)
                m_FProtocoloIntegrado = value;
        }
    }

    public virtual string? FDataInicioPrazo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDataInicioPrazo is null || m_FDataInicioPrazo == DevourerOne.DDataZerada ? string.Empty : m_FDataInicioPrazo.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFDataInicioPrazo, m_FDataInicioPrazo, value)is not (true, var changed, var data))
                return;
            (pFldFDataInicioPrazo, m_FDataInicioPrazo) = (changed, data);
        }
    }

    public virtual bool FUsuarioCiente
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FUsuarioCiente;
        set
        {
            pFldFUsuarioCiente = pFldFUsuarioCiente || value != m_FUsuarioCiente;
            if (pFldFUsuarioCiente)
                m_FUsuarioCiente = value;
        }
    }

    public void SetAuditor(int usuarioId) => AuditorQuem = usuarioId;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITabelaName() => PTabelaNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoCodigo() => CampoCodigo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoNome() => CampoNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string IPrefixo() => PTabelaPrefixo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITypeFieldCode() => "int";
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IdIsIdentity() => false;
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetID() => ID;
}