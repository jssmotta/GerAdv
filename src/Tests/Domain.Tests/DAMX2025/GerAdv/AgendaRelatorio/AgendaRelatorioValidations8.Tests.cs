// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class AgendaRelatorioValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFAgendaRelatorioFactory> _mockAgendaRelatorioFactory;
    private readonly Mock<IAgendaRelatorioReader> _mockReader;
    private readonly AgendaRelatorioValidation _validation;
    private readonly Mock<IAgendaRelatorioService> _mockAgendaRelatorioService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly AgendaRelatorioService _service;
    private readonly string _validUri = "test-uri";
    public AgendaRelatorioValidationTests()
    {
        _mockAgendaRelatorioFactory = new Mock<IFAgendaRelatorioFactory>();
        _mockReader = new Mock<IAgendaRelatorioReader>();
        _validation = new AgendaRelatorioValidation();
        _mockAgendaRelatorioService = new Mock<IAgendaRelatorioService>();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

#region Class Structure Tests
    [Fact]
    public void AgendaRelatorioValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IAgendaRelatorioValidation>();
    }

    [Fact]
    public void AgendaRelatorioValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(AgendaRelatorioValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void AgendaRelatorioValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(AgendaRelatorioValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.AgendaRelatorio CreateValidAgendaRelatorio()
    {
        return new Models.AgendaRelatorio
        {
            Id = 1,
            vqaData = "24/04/1975",
            vqaProcesso = 0,
            xxxParaNome = "João",
            xxxParaPessoas = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            xxxBoxAudiencia = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            xxxBoxAudienciaMobile = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            xxxNomeAdvogado = "João",
            xxxNomeForo = "João",
            xxxNomeJustica = "João",
            xxxNomeArea = "João"
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockAgendaRelatorioService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterAgendaRelatorio>(), It.IsAny<string>())).ReturnsAsync(new List<AgendaRelatorioResponseAll>());
    // Setup other mocks but don't override the AgendaRelatorios service mock
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockAgendaRelatorioService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterAgendaRelatorio>(), It.IsAny<string>())).ReturnsAsync(new List<AgendaRelatorioResponseAll>());
    // Setup other mocks but don't override the AgendaRelatorios service mock
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var agendarelatorio = new Models.AgendaRelatorio
        {
            Id = 1,
            vqaData = null,
            xxxParaNome = null,
            xxxParaPessoas = null,
            xxxBoxAudiencia = null,
            xxxBoxAudienciaMobile = null,
            xxxNomeAdvogado = null,
            xxxNomeForo = null,
            xxxNomeJustica = null,
            xxxNomeArea = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agendarelatorio, _mockAgendaRelatorioService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockAgendaRelatorioService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}