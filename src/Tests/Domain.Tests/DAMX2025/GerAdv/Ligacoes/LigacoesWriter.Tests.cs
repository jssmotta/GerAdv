// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class LigacoesWriterTests
{
    private readonly Mock<IFLigacoesFactory> _mockLigacoesFactory;
    private readonly Mock<FLigacoes> _mockFLigacoes;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly LigacoesWriter _ligacoesWriter;
    public LigacoesWriterTests()
    {
        _mockLigacoesFactory = new Mock<IFLigacoesFactory>();
        _mockFLigacoes = new Mock<FLigacoes>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _ligacoesWriter = new LigacoesWriter(_mockLigacoesFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var ligacoes = CreateValidLigacoesModel();
        ligacoes.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockLigacoesFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFLigacoes.Object);
        _mockFLigacoes.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _ligacoesWriter.WriteAsync(ligacoes, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFLigacoes.Object);
        _mockLigacoesFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockLigacoesFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFLigacoes.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var ligacoes = CreateValidLigacoesModel();
        ligacoes.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockLigacoesFactory.Setup(x => x.CreateFromIdAsync(ligacoes.Id, _mockConnection.Object)).ReturnsAsync(_mockFLigacoes.Object);
        _mockFLigacoes.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _ligacoesWriter.WriteAsync(ligacoes, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFLigacoes.Object);
        _mockLigacoesFactory.Verify(x => x.CreateFromIdAsync(ligacoes.Id, _mockConnection.Object), Times.Once);
        _mockLigacoesFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFLigacoes.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var ligacoes = CreateValidLigacoesModel();
        var auditorQuem = 99;
        _mockLigacoesFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFLigacoes.Object);
        _mockFLigacoes.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _ligacoesWriter.WriteAsync(ligacoes, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFLigacoes.Object);
        _mockFLigacoes.VerifySet(x => x.FAssunto = ligacoes.Assunto, Times.Once);
        _mockFLigacoes.VerifySet(x => x.FAgeClienteAvisado = ligacoes.AgeClienteAvisado, Times.Once);
        _mockFLigacoes.VerifySet(x => x.FCelular = ligacoes.Celular, Times.Once);
        _mockFLigacoes.VerifySet(x => x.FCliente = ligacoes.Cliente, Times.Once);
        _mockFLigacoes.VerifySet(x => x.FContato = ligacoes.Contato, Times.Once);
        _mockFLigacoes.VerifySet(x => x.FDataRealizada = ligacoes.DataRealizada.ToString(), Times.Once);
        _mockFLigacoes.VerifySet(x => x.FQuemID = ligacoes.QuemID, Times.Once);
        _mockFLigacoes.VerifySet(x => x.FTelefonista = ligacoes.Telefonista, Times.Once);
        _mockFLigacoes.VerifySet(x => x.FUltimoAviso = ligacoes.UltimoAviso.ToString(), Times.Once);
        _mockFLigacoes.VerifySet(x => x.FHoraFinal = ligacoes.HoraFinal, Times.Once);
        _mockFLigacoes.VerifySet(x => x.FNome = ligacoes.Nome, Times.Once);
        _mockFLigacoes.VerifySet(x => x.FQuemCodigo = ligacoes.QuemCodigo, Times.Once);
        _mockFLigacoes.VerifySet(x => x.FSolicitante = ligacoes.Solicitante, Times.Once);
        _mockFLigacoes.VerifySet(x => x.FPara = ligacoes.Para, Times.Once);
        _mockFLigacoes.VerifySet(x => x.FFone = ligacoes.Fone, Times.Once);
        _mockFLigacoes.VerifySet(x => x.FRamal = ligacoes.Ramal, Times.Once);
        _mockFLigacoes.VerifySet(x => x.FParticular = ligacoes.Particular, Times.Once);
        _mockFLigacoes.VerifySet(x => x.FRealizada = ligacoes.Realizada, Times.Once);
        _mockFLigacoes.VerifySet(x => x.FStatus = ligacoes.Status, Times.Once);
        _mockFLigacoes.VerifySet(x => x.FData = ligacoes.Data, Times.Once);
        _mockFLigacoes.VerifySet(x => x.FHora = ligacoes.Hora, Times.Once);
        _mockFLigacoes.VerifySet(x => x.FUrgente = ligacoes.Urgente, Times.Once);
        _mockFLigacoes.VerifySet(x => x.FGUID = ligacoes.GUID, Times.Once);
        _mockFLigacoes.VerifySet(x => x.FLigarPara = ligacoes.LigarPara, Times.Once);
        _mockFLigacoes.VerifySet(x => x.FProcesso = ligacoes.Processo, Times.Once);
        _mockFLigacoes.VerifySet(x => x.FStartScreen = ligacoes.StartScreen, Times.Once);
        _mockFLigacoes.VerifySet(x => x.FEmotion = ligacoes.Emotion, Times.Once);
        _mockFLigacoes.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithNullDataRealizada_ShouldNotSetFDataRealizada()
    {
        // Arrange
        var ligacoes = CreateValidLigacoesModel();
        ligacoes.DataRealizada = null;
        var auditorQuem = 123;
        _mockLigacoesFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFLigacoes.Object);
        _mockFLigacoes.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _ligacoesWriter.WriteAsync(ligacoes, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFLigacoes.VerifySet(x => x.FDataRealizada = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WithNullUltimoAviso_ShouldNotSetFUltimoAviso()
    {
        // Arrange
        var ligacoes = CreateValidLigacoesModel();
        ligacoes.UltimoAviso = null;
        var auditorQuem = 123;
        _mockLigacoesFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFLigacoes.Object);
        _mockFLigacoes.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _ligacoesWriter.WriteAsync(ligacoes, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFLigacoes.VerifySet(x => x.FUltimoAviso = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var ligacoes = CreateValidLigacoesModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockLigacoesFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _ligacoesWriter.WriteAsync(ligacoes, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var ligacoes = CreateValidLigacoesModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockLigacoesFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFLigacoes.Object);
        _mockFLigacoes.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _ligacoesWriter.WriteAsync(ligacoes, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var ligacoesResponse = new LigacoesResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockLigacoesFactory.Setup(x => x.DeleteAsync(operadorId, ligacoesResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _ligacoesWriter.Delete(ligacoesResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockLigacoesFactory.Verify(x => x.DeleteAsync(operadorId, ligacoesResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var ligacoesResponse = new LigacoesResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockLigacoesFactory.Setup(x => x.DeleteAsync(operadorId, ligacoesResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _ligacoesWriter.Delete(ligacoesResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var ligacoesResponse = new LigacoesResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockLigacoesFactory.Setup(x => x.DeleteAsync(operadorId, ligacoesResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _ligacoesWriter.Delete(ligacoesResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new LigacoesWriter(_mockLigacoesFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new LigacoesWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.Ligacoes CreateValidLigacoesModel()
    {
        return new Models.Ligacoes
        {
            Id = 0,
            Assunto = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            AgeClienteAvisado = 1,
            Celular = false,
            Cliente = 1,
            Contato = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            DataRealizada = "24/04/1975",
            QuemID = 1,
            Telefonista = 1,
            UltimoAviso = "24/04/1975",
            HoraFinal = "04:04",
            Nome = "João",
            QuemCodigo = 1,
            Solicitante = 1,
            Para = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Fone = "(11) 99999-9999",
            Ramal = 1,
            Particular = false,
            Realizada = false,
            Status = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Data = "27/05/2022",
            Hora = "04:04",
            Urgente = false,
            GUID = Guid.NewGuid().ToString(),
            LigarPara = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Processo = 1,
            StartScreen = false,
            Emotion = 1
        };
    }
#endregion
}