// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBAgenda - Nome da classe (ex: DBClientes)
/// Agenda - Nome da tabela (ex: Clientes)
/// age - Prefixo dos campos (ex: cli)
/// ageCodigo - Nome do campo código (ex: cliCodigo)
/// ageData - Nome do campo nome (ex: cliNome)
/// DBAgenda.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBAgendaTests : IDisposable
{
    private readonly DBAgenda _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBAgendaTests()
    {
        _instance = new DBAgenda();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("ageCodigo", typeof(int));
        dt.Columns.Add("ageQuemCad", typeof(int));
        dt.Columns.Add("ageDtCad", typeof(DateTime));
        dt.Columns.Add("ageQuemAtu", typeof(int));
        dt.Columns.Add("ageDtAtu", typeof(DateTime));
        dt.Columns.Add("ageVisto", typeof(bool));
        dt.Columns.Add("ageIDCOB", typeof(int));
        dt.Columns.Add("ageClienteAvisado", typeof(string));
        dt.Columns.Add("ageRevisarP2", typeof(string));
        dt.Columns.Add("ageIDNE", typeof(int));
        dt.Columns.Add("ageCidade", typeof(int));
        dt.Columns.Add("ageOculto", typeof(int));
        dt.Columns.Add("ageCartaPrecatoria", typeof(int));
        dt.Columns.Add("ageRevisar", typeof(string));
        dt.Columns.Add("ageHrFinal", typeof(string));
        dt.Columns.Add("ageAdvogado", typeof(int));
        dt.Columns.Add("ageEventoGerador", typeof(int));
        dt.Columns.Add("ageEventoData", typeof(DateTime));
        dt.Columns.Add("ageFuncionario", typeof(int));
        dt.Columns.Add("ageData", typeof(string));
        dt.Columns.Add("ageEventoPrazo", typeof(int));
        dt.Columns.Add("ageHora", typeof(string));
        dt.Columns.Add("ageCompromisso", typeof(string));
        dt.Columns.Add("ageTipoCompromisso", typeof(int));
        dt.Columns.Add("ageCliente", typeof(int));
        dt.Columns.Add("ageLiberado", typeof(string));
        dt.Columns.Add("ageImportante", typeof(string));
        dt.Columns.Add("ageConcluido", typeof(string));
        dt.Columns.Add("ageArea", typeof(int));
        dt.Columns.Add("ageJustica", typeof(int));
        dt.Columns.Add("ageProcesso", typeof(int));
        dt.Columns.Add("ageIDHistorico", typeof(int));
        dt.Columns.Add("ageIDInsProcesso", typeof(int));
        dt.Columns.Add("ageUsuario", typeof(int));
        dt.Columns.Add("agePreposto", typeof(int));
        dt.Columns.Add("ageQuemID", typeof(int));
        dt.Columns.Add("ageQuemCodigo", typeof(int));
        dt.Columns.Add("ageGUID", typeof(string));
        dt.Columns.Add("ageStatus", typeof(string));
        dt.Columns.Add("ageValor", typeof(decimal));
        dt.Columns.Add("ageDecisao", typeof(string));
        dt.Columns.Add("ageSempre", typeof(int));
        dt.Columns.Add("agePrazoDias", typeof(int));
        dt.Columns.Add("ageProtocoloIntegrado", typeof(int));
        dt.Columns.Add("ageDataInicioPrazo", typeof(DateTime));
        dt.Columns.Add("ageUsuarioCiente", typeof(string));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("Agenda", DBAgenda.PTabelaNome);
        Assert.Equal(" Agenda.* ", DBAgenda.CamposSqlX);
        Assert.Equal("ageCodigo", DBAgenda.CampoCodigo);
        Assert.Equal("ageData", DBAgenda.CampoNome);
        Assert.Equal("age", DBAgenda.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBAgenda();
        Assert.Equal(0, instance.ID);
        Assert.Equal("Agenda", instance.ITabelaName());
        Assert.Equal("age", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBAgenda((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBAgenda((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["ageCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBAgenda(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("Agenda", cadastro.ITabelaName());
        Assert.Equal("ageCodigo", cadastro.ICampoCodigo());
        Assert.Equal("ageData", cadastro.ICampoNome());
        Assert.Equal("age", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBAgenda.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBAgenda.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBAgenda.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBAgenda();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBAgenda();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnTrue()
    {
        Assert.True(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void IDCOB_ShouldAcceptIntegerValues(int value)
    {
        _instance.FIDCOB = value;
        Assert.Equal(value, _instance.FIDCOB);
    }

    [Fact]
    public void IDCOB_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgenda();
        Assert.Equal(0, instance.FIDCOB);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void ClienteAvisado_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FClienteAvisado = value;
        Assert.Equal(value, _instance.FClienteAvisado);
    }

    [Fact]
    public void ClienteAvisado_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBAgenda();
        Assert.False(instance.FClienteAvisado);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void ClienteAvisado_ShouldAcceptIntegerValues(int value)
{
    _instance.FClienteAvisado = value;
    Assert.Equal(value, _instance.FClienteAvisado);
}

[Fact]
public void ClienteAvisado_DefaultValue_ShouldBeZero()
{
    var instance = new DBAgenda();
    Assert.Equal(0, instance.ClienteAvisado);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void ClienteAvisado_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FClienteAvisado = dateString;
    Assert.Equal(dateString, _instance.FClienteAvisado);
}

[Fact]
public void ClienteAvisado_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBAgenda();
    Assert.Equal(string.Empty, instance.ClienteAvisado);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void ClienteAvisado_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FClienteAvisado = input;
        Assert.Equal(expected, _instance.FClienteAvisado);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FClienteAvisado = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void ClienteAvisado_ValidEmail_ShouldAccept(string email)
{
    _instance.FClienteAvisado = email;
    Assert.Equal(email, _instance.FClienteAvisado);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void ClienteAvisado_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FClienteAvisado = email);
}
*/
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void RevisarP2_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FRevisarP2 = value;
        Assert.Equal(value, _instance.FRevisarP2);
    }

    [Fact]
    public void RevisarP2_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBAgenda();
        Assert.False(instance.FRevisarP2);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void RevisarP2_ShouldAcceptIntegerValues(int value)
{
    _instance.FRevisarP2 = value;
    Assert.Equal(value, _instance.FRevisarP2);
}

[Fact]
public void RevisarP2_DefaultValue_ShouldBeZero()
{
    var instance = new DBAgenda();
    Assert.Equal(0, instance.RevisarP2);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void RevisarP2_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FRevisarP2 = dateString;
    Assert.Equal(dateString, _instance.FRevisarP2);
}

[Fact]
public void RevisarP2_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBAgenda();
    Assert.Equal(string.Empty, instance.RevisarP2);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void RevisarP2_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FRevisarP2 = input;
        Assert.Equal(expected, _instance.FRevisarP2);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FRevisarP2 = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void RevisarP2_ValidEmail_ShouldAccept(string email)
{
    _instance.FRevisarP2 = email;
    Assert.Equal(email, _instance.FRevisarP2);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void RevisarP2_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FRevisarP2 = email);
}
*/
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void IDNE_ShouldAcceptIntegerValues(int value)
    {
        _instance.FIDNE = value;
        Assert.Equal(value, _instance.FIDNE);
    }

    [Fact]
    public void IDNE_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgenda();
        Assert.Equal(0, instance.FIDNE);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cidade_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCidade = value;
        Assert.Equal(value, _instance.FCidade);
    }

    [Fact]
    public void Cidade_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgenda();
        Assert.Equal(0, instance.FCidade);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Oculto_ShouldAcceptIntegerValues(int value)
    {
        _instance.FOculto = value;
        Assert.Equal(value, _instance.FOculto);
    }

    [Fact]
    public void Oculto_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgenda();
        Assert.Equal(0, instance.FOculto);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void CartaPrecatoria_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCartaPrecatoria = value;
        Assert.Equal(value, _instance.FCartaPrecatoria);
    }

    [Fact]
    public void CartaPrecatoria_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgenda();
        Assert.Equal(0, instance.FCartaPrecatoria);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Revisar_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FRevisar = value;
        Assert.Equal(value, _instance.FRevisar);
    }

    [Fact]
    public void Revisar_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBAgenda();
        Assert.False(instance.FRevisar);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Revisar_ShouldAcceptIntegerValues(int value)
{
    _instance.FRevisar = value;
    Assert.Equal(value, _instance.FRevisar);
}

[Fact]
public void Revisar_DefaultValue_ShouldBeZero()
{
    var instance = new DBAgenda();
    Assert.Equal(0, instance.Revisar);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Revisar_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FRevisar = dateString;
    Assert.Equal(dateString, _instance.FRevisar);
}

[Fact]
public void Revisar_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBAgenda();
    Assert.Equal(string.Empty, instance.Revisar);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Revisar_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FRevisar = input;
        Assert.Equal(expected, _instance.FRevisar);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FRevisar = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Revisar_ValidEmail_ShouldAccept(string email)
{
    _instance.FRevisar = email;
    Assert.Equal(email, _instance.FRevisar);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Revisar_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FRevisar = email);
}
*/
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Advogado_ShouldAcceptIntegerValues(int value)
    {
        _instance.FAdvogado = value;
        Assert.Equal(value, _instance.FAdvogado);
    }

    [Fact]
    public void Advogado_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgenda();
        Assert.Equal(0, instance.FAdvogado);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void EventoGerador_ShouldAcceptIntegerValues(int value)
    {
        _instance.FEventoGerador = value;
        Assert.Equal(value, _instance.FEventoGerador);
    }

    [Fact]
    public void EventoGerador_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgenda();
        Assert.Equal(0, instance.FEventoGerador);
    }

    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void EventoData_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FEventoData = dateString;
        Assert.Equal(dateString, _instance.FEventoData);
    }

    [Fact]
    public void EventoData_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBAgenda();
        Assert.Equal(string.Empty, instance.FEventoData);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Funcionario_ShouldAcceptIntegerValues(int value)
    {
        _instance.FFuncionario = value;
        Assert.Equal(value, _instance.FFuncionario);
    }

    [Fact]
    public void Funcionario_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgenda();
        Assert.Equal(0, instance.FFuncionario);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void EventoPrazo_ShouldAcceptIntegerValues(int value)
    {
        _instance.FEventoPrazo = value;
        Assert.Equal(value, _instance.FEventoPrazo);
    }

    [Fact]
    public void EventoPrazo_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgenda();
        Assert.Equal(0, instance.FEventoPrazo);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Compromisso_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FCompromisso = input;
        Assert.Equal(expected, _instance.FCompromisso);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void TipoCompromisso_ShouldAcceptIntegerValues(int value)
    {
        _instance.FTipoCompromisso = value;
        Assert.Equal(value, _instance.FTipoCompromisso);
    }

    [Fact]
    public void TipoCompromisso_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgenda();
        Assert.Equal(0, instance.FTipoCompromisso);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cliente_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCliente = value;
        Assert.Equal(value, _instance.FCliente);
    }

    [Fact]
    public void Cliente_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgenda();
        Assert.Equal(0, instance.FCliente);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Liberado_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FLiberado = value;
        Assert.Equal(value, _instance.FLiberado);
    }

    [Fact]
    public void Liberado_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBAgenda();
        Assert.False(instance.FLiberado);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Liberado_ShouldAcceptIntegerValues(int value)
{
    _instance.FLiberado = value;
    Assert.Equal(value, _instance.FLiberado);
}

[Fact]
public void Liberado_DefaultValue_ShouldBeZero()
{
    var instance = new DBAgenda();
    Assert.Equal(0, instance.Liberado);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Liberado_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FLiberado = dateString;
    Assert.Equal(dateString, _instance.FLiberado);
}

[Fact]
public void Liberado_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBAgenda();
    Assert.Equal(string.Empty, instance.Liberado);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Liberado_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FLiberado = input;
        Assert.Equal(expected, _instance.FLiberado);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FLiberado = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Liberado_ValidEmail_ShouldAccept(string email)
{
    _instance.FLiberado = email;
    Assert.Equal(email, _instance.FLiberado);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Liberado_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FLiberado = email);
}
*/
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Importante_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FImportante = value;
        Assert.Equal(value, _instance.FImportante);
    }

    [Fact]
    public void Importante_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBAgenda();
        Assert.False(instance.FImportante);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Importante_ShouldAcceptIntegerValues(int value)
{
    _instance.FImportante = value;
    Assert.Equal(value, _instance.FImportante);
}

[Fact]
public void Importante_DefaultValue_ShouldBeZero()
{
    var instance = new DBAgenda();
    Assert.Equal(0, instance.Importante);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Importante_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FImportante = dateString;
    Assert.Equal(dateString, _instance.FImportante);
}

[Fact]
public void Importante_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBAgenda();
    Assert.Equal(string.Empty, instance.Importante);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Importante_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FImportante = input;
        Assert.Equal(expected, _instance.FImportante);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FImportante = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Importante_ValidEmail_ShouldAccept(string email)
{
    _instance.FImportante = email;
    Assert.Equal(email, _instance.FImportante);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Importante_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FImportante = email);
}
*/
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Concluido_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FConcluido = value;
        Assert.Equal(value, _instance.FConcluido);
    }

    [Fact]
    public void Concluido_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBAgenda();
        Assert.False(instance.FConcluido);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Concluido_ShouldAcceptIntegerValues(int value)
{
    _instance.FConcluido = value;
    Assert.Equal(value, _instance.FConcluido);
}

[Fact]
public void Concluido_DefaultValue_ShouldBeZero()
{
    var instance = new DBAgenda();
    Assert.Equal(0, instance.Concluido);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Concluido_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FConcluido = dateString;
    Assert.Equal(dateString, _instance.FConcluido);
}

[Fact]
public void Concluido_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBAgenda();
    Assert.Equal(string.Empty, instance.Concluido);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Concluido_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FConcluido = input;
        Assert.Equal(expected, _instance.FConcluido);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FConcluido = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Concluido_ValidEmail_ShouldAccept(string email)
{
    _instance.FConcluido = email;
    Assert.Equal(email, _instance.FConcluido);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Concluido_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FConcluido = email);
}
*/
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Area_ShouldAcceptIntegerValues(int value)
    {
        _instance.FArea = value;
        Assert.Equal(value, _instance.FArea);
    }

    [Fact]
    public void Area_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgenda();
        Assert.Equal(0, instance.FArea);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Justica_ShouldAcceptIntegerValues(int value)
    {
        _instance.FJustica = value;
        Assert.Equal(value, _instance.FJustica);
    }

    [Fact]
    public void Justica_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgenda();
        Assert.Equal(0, instance.FJustica);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Processo_ShouldAcceptIntegerValues(int value)
    {
        _instance.FProcesso = value;
        Assert.Equal(value, _instance.FProcesso);
    }

    [Fact]
    public void Processo_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgenda();
        Assert.Equal(0, instance.FProcesso);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void IDHistorico_ShouldAcceptIntegerValues(int value)
    {
        _instance.FIDHistorico = value;
        Assert.Equal(value, _instance.FIDHistorico);
    }

    [Fact]
    public void IDHistorico_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgenda();
        Assert.Equal(0, instance.FIDHistorico);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void IDInsProcesso_ShouldAcceptIntegerValues(int value)
    {
        _instance.FIDInsProcesso = value;
        Assert.Equal(value, _instance.FIDInsProcesso);
    }

    [Fact]
    public void IDInsProcesso_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgenda();
        Assert.Equal(0, instance.FIDInsProcesso);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Usuario_ShouldAcceptIntegerValues(int value)
    {
        _instance.FUsuario = value;
        Assert.Equal(value, _instance.FUsuario);
    }

    [Fact]
    public void Usuario_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgenda();
        Assert.Equal(0, instance.FUsuario);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Preposto_ShouldAcceptIntegerValues(int value)
    {
        _instance.FPreposto = value;
        Assert.Equal(value, _instance.FPreposto);
    }

    [Fact]
    public void Preposto_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgenda();
        Assert.Equal(0, instance.FPreposto);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void QuemID_ShouldAcceptIntegerValues(int value)
    {
        _instance.FQuemID = value;
        Assert.Equal(value, _instance.FQuemID);
    }

    [Fact]
    public void QuemID_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgenda();
        Assert.Equal(0, instance.FQuemID);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void QuemCodigo_ShouldAcceptIntegerValues(int value)
    {
        _instance.FQuemCodigo = value;
        Assert.Equal(value, _instance.FQuemCodigo);
    }

    [Fact]
    public void QuemCodigo_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgenda();
        Assert.Equal(0, instance.FQuemCodigo);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void GUID_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FGUID = input;
        Assert.Equal(expected, _instance.FGUID);
    }

    [Fact]
    public void GUID_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FGUID = longString;
        Assert.True(_instance.FGUID.Length <= 100);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Status_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FStatus = input;
        Assert.Equal(expected, _instance.FStatus);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Decisao_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FDecisao = input;
        Assert.Equal(expected, _instance.FDecisao);
    }

    [Fact]
    public void Decisao_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 2048 + 10);
        _instance.FDecisao = longString;
        Assert.True(_instance.FDecisao.Length <= 2048);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Sempre_ShouldAcceptIntegerValues(int value)
    {
        _instance.FSempre = value;
        Assert.Equal(value, _instance.FSempre);
    }

    [Fact]
    public void Sempre_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgenda();
        Assert.Equal(0, instance.FSempre);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void PrazoDias_ShouldAcceptIntegerValues(int value)
    {
        _instance.FPrazoDias = value;
        Assert.Equal(value, _instance.FPrazoDias);
    }

    [Fact]
    public void PrazoDias_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgenda();
        Assert.Equal(0, instance.FPrazoDias);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void ProtocoloIntegrado_ShouldAcceptIntegerValues(int value)
    {
        _instance.FProtocoloIntegrado = value;
        Assert.Equal(value, _instance.FProtocoloIntegrado);
    }

    [Fact]
    public void ProtocoloIntegrado_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgenda();
        Assert.Equal(0, instance.FProtocoloIntegrado);
    }

    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void DataInicioPrazo_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FDataInicioPrazo = dateString;
        Assert.Equal(dateString, _instance.FDataInicioPrazo);
    }

    [Fact]
    public void DataInicioPrazo_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBAgenda();
        Assert.Equal(string.Empty, instance.FDataInicioPrazo);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void UsuarioCiente_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FUsuarioCiente = value;
        Assert.Equal(value, _instance.FUsuarioCiente);
    }

    [Fact]
    public void UsuarioCiente_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBAgenda();
        Assert.False(instance.FUsuarioCiente);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void UsuarioCiente_ShouldAcceptIntegerValues(int value)
{
    _instance.FUsuarioCiente = value;
    Assert.Equal(value, _instance.FUsuarioCiente);
}

[Fact]
public void UsuarioCiente_DefaultValue_ShouldBeZero()
{
    var instance = new DBAgenda();
    Assert.Equal(0, instance.UsuarioCiente);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void UsuarioCiente_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FUsuarioCiente = dateString;
    Assert.Equal(dateString, _instance.FUsuarioCiente);
}

[Fact]
public void UsuarioCiente_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBAgenda();
    Assert.Equal(string.Empty, instance.UsuarioCiente);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void UsuarioCiente_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FUsuarioCiente = input;
        Assert.Equal(expected, _instance.FUsuarioCiente);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FUsuarioCiente = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void UsuarioCiente_ValidEmail_ShouldAccept(string email)
{
    _instance.FUsuarioCiente = email;
    Assert.Equal(email, _instance.FUsuarioCiente);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void UsuarioCiente_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FUsuarioCiente = email);
}
*/
    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}