// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class AlarmSMSService
{
    private static (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterAlarmSMS filtro)
    {
        var parameters = new List<SqlParameter>();
        if (!string.IsNullOrEmpty(filtro.Descricao))
        {
            parameters.Add(new($"@{nameof(DBAlarmSMSDicInfo.Descricao)}", ApplyWildCard(filtro.WildcardChar, filtro.Descricao)));
        }

        if (filtro.Minuto != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAlarmSMSDicInfo.Minuto)}", filtro.Minuto));
        }

        if (filtro.Minuto_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAlarmSMSDicInfo.Minuto)}_end", filtro.Minuto_end));
        }

        if (filtro.D1 != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAlarmSMSDicInfo.D1)}", filtro.D1));
        }

        if (filtro.D2 != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAlarmSMSDicInfo.D2)}", filtro.D2));
        }

        if (filtro.D3 != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAlarmSMSDicInfo.D3)}", filtro.D3));
        }

        if (filtro.D4 != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAlarmSMSDicInfo.D4)}", filtro.D4));
        }

        if (filtro.D5 != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAlarmSMSDicInfo.D5)}", filtro.D5));
        }

        if (filtro.D6 != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAlarmSMSDicInfo.D6)}", filtro.D6));
        }

        if (filtro.D7 != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAlarmSMSDicInfo.D7)}", filtro.D7));
        }

        if (!string.IsNullOrEmpty(filtro.EMail))
        {
            parameters.Add(new($"@{nameof(DBAlarmSMSDicInfo.EMail)}", ApplyWildCard(filtro.WildcardChar, filtro.EMail)));
        }

        if (filtro.Desativar != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAlarmSMSDicInfo.Desativar)}", filtro.Desativar));
        }

        if (!filtro.Today.IsEmpty())
        {
            if (DateTime.TryParse(filtro.Today, out var dataParam))
                parameters.Add(new($"@{nameof(DBAlarmSMSDicInfo.Today)}", dataParam));
        }

        if (!filtro.Today_end.IsEmpty())
        {
            if (DateTime.TryParse(filtro.Today_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBAlarmSMSDicInfo.Today)}_end", dataParam));
        }

        if (filtro.ExcetoDiasFelizes != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAlarmSMSDicInfo.ExcetoDiasFelizes)}", filtro.ExcetoDiasFelizes));
        }

        if (filtro.Desktop != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAlarmSMSDicInfo.Desktop)}", filtro.Desktop));
        }

        if (!filtro.AlertarDataHora.IsEmpty())
        {
            if (DateTime.TryParse(filtro.AlertarDataHora, out var dataParam))
                parameters.Add(new($"@{nameof(DBAlarmSMSDicInfo.AlertarDataHora)}", dataParam));
        }

        if (!filtro.AlertarDataHora_end.IsEmpty())
        {
            if (DateTime.TryParse(filtro.AlertarDataHora_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBAlarmSMSDicInfo.AlertarDataHora)}_end", dataParam));
        }

        if (filtro.Operador != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAlarmSMSDicInfo.Operador)}", filtro.Operador));
        }

        if (!string.IsNullOrEmpty(filtro.GuidExo))
        {
            parameters.Add(new($"@{nameof(DBAlarmSMSDicInfo.GuidExo)}", ApplyWildCard(filtro.WildcardChar, filtro.GuidExo)));
        }

        if (filtro.Agenda != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAlarmSMSDicInfo.Agenda)}", filtro.Agenda));
        }

        if (filtro.Recado != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAlarmSMSDicInfo.Recado)}", filtro.Recado));
        }

        if (filtro.Emocao != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAlarmSMSDicInfo.Emocao)}", filtro.Emocao));
        }

        if (filtro.Emocao_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAlarmSMSDicInfo.Emocao)}_end", filtro.Emocao_end));
        }

        if (!string.IsNullOrEmpty(filtro.GUID))
        {
            parameters.Add(new($"@{nameof(DBAlarmSMSDicInfo.GUID)}", ApplyWildCard(filtro.WildcardChar, filtro.GUID)));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAlarmSMSDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
        }

        if (filtro.Codigo_filtro_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAlarmSMSDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
        }

        if (filtro.LogicalOperator.IsEmpty() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        cWhere.Append(filtro.Descricao.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAlarmSMSDicInfo.PTabelaNome}].[{DBAlarmSMSDicInfo.Descricao}]  {DevourerConsts.MsiCollate} like @{nameof(DBAlarmSMSDicInfo.Descricao)}");
        if (!filtro.Minuto.IsEmpty() && filtro.Minuto_end.IsEmpty())
        {
            cWhere.Append(filtro.Minuto <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAlarmSMSDicInfo.PTabelaNome}].[{DBAlarmSMSDicInfo.Minuto}] >= @{nameof(DBAlarmSMSDicInfo.Minuto)}");
        }
        else
        {
            cWhere.Append((filtro.Minuto <= 0 && filtro.Minuto_end <= 0) ? string.Empty : (!(filtro.Minuto <= 0) && !(filtro.Minuto_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAlarmSMSDicInfo.Minuto} BETWEEN @{nameof(DBAlarmSMSDicInfo.Minuto)} AND @{nameof(DBAlarmSMSDicInfo.Minuto)}_end" : !(filtro.Minuto <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAlarmSMSDicInfo.Minuto} = @{nameof(DBAlarmSMSDicInfo.Minuto)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAlarmSMSDicInfo.Minuto} <= @{nameof(DBAlarmSMSDicInfo.Minuto)}_end");
        }

        cWhere.Append(filtro.D1 == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAlarmSMSDicInfo.PTabelaNome}].[{DBAlarmSMSDicInfo.D1}] = @{nameof(DBAlarmSMSDicInfo.D1)}");
        cWhere.Append(filtro.D2 == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAlarmSMSDicInfo.PTabelaNome}].[{DBAlarmSMSDicInfo.D2}] = @{nameof(DBAlarmSMSDicInfo.D2)}");
        cWhere.Append(filtro.D3 == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAlarmSMSDicInfo.PTabelaNome}].[{DBAlarmSMSDicInfo.D3}] = @{nameof(DBAlarmSMSDicInfo.D3)}");
        cWhere.Append(filtro.D4 == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAlarmSMSDicInfo.PTabelaNome}].[{DBAlarmSMSDicInfo.D4}] = @{nameof(DBAlarmSMSDicInfo.D4)}");
        cWhere.Append(filtro.D5 == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAlarmSMSDicInfo.PTabelaNome}].[{DBAlarmSMSDicInfo.D5}] = @{nameof(DBAlarmSMSDicInfo.D5)}");
        cWhere.Append(filtro.D6 == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAlarmSMSDicInfo.PTabelaNome}].[{DBAlarmSMSDicInfo.D6}] = @{nameof(DBAlarmSMSDicInfo.D6)}");
        cWhere.Append(filtro.D7 == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAlarmSMSDicInfo.PTabelaNome}].[{DBAlarmSMSDicInfo.D7}] = @{nameof(DBAlarmSMSDicInfo.D7)}");
        cWhere.Append(filtro.EMail.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAlarmSMSDicInfo.PTabelaNome}].[{DBAlarmSMSDicInfo.EMail}]  {DevourerConsts.MsiCollate} like @{nameof(DBAlarmSMSDicInfo.EMail)}");
        cWhere.Append(filtro.Desativar == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAlarmSMSDicInfo.PTabelaNome}].[{DBAlarmSMSDicInfo.Desativar}] = @{nameof(DBAlarmSMSDicInfo.Desativar)}");
        if (!filtro.Today.IsEmpty() && filtro.Today_end.IsEmpty())
        {
            cWhere.Append(filtro.Today.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBAlarmSMSDicInfo.PTabelaNome}].[{DBAlarmSMSDicInfo.Today}], 103) >= CONVERT(DATE, @{nameof(DBAlarmSMSDicInfo.Today)}, 103)");
        }
        else
        {
            cWhere.Append((filtro.Today.IsEmpty() && filtro.Today_end.IsEmpty()) ? string.Empty : (!(filtro.Today.IsEmpty()) && !(filtro.Today_end.IsEmpty())) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAlarmSMSDicInfo.Today} BETWEEN @{nameof(DBAlarmSMSDicInfo.Today)} AND @{nameof(DBAlarmSMSDicInfo.Today)}_end" : !(filtro.Today.IsEmpty()) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAlarmSMSDicInfo.Today} = @{nameof(DBAlarmSMSDicInfo.Today)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAlarmSMSDicInfo.Today} <= @{nameof(DBAlarmSMSDicInfo.Today)}_end");
        }

        cWhere.Append(filtro.ExcetoDiasFelizes == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAlarmSMSDicInfo.PTabelaNome}].[{DBAlarmSMSDicInfo.ExcetoDiasFelizes}] = @{nameof(DBAlarmSMSDicInfo.ExcetoDiasFelizes)}");
        cWhere.Append(filtro.Desktop == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAlarmSMSDicInfo.PTabelaNome}].[{DBAlarmSMSDicInfo.Desktop}] = @{nameof(DBAlarmSMSDicInfo.Desktop)}");
        if (!filtro.AlertarDataHora.IsEmpty() && filtro.AlertarDataHora_end.IsEmpty())
        {
            cWhere.Append(filtro.AlertarDataHora.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"FORMAT([{DBAlarmSMSDicInfo.PTabelaNome}].[{DBAlarmSMSDicInfo.AlertarDataHora}], 'HH:mm') >= FORMAT(@{nameof(DBAlarmSMSDicInfo.AlertarDataHora)}, 'HH:mm')");
        }
        else
        {
            cWhere.Append((filtro.AlertarDataHora.IsEmpty() && filtro.AlertarDataHora_end.IsEmpty()) ? string.Empty : (!(filtro.AlertarDataHora.IsEmpty()) && !(filtro.AlertarDataHora_end.IsEmpty())) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"FORMAT({DBAlarmSMSDicInfo.AlertarDataHora}, 'HH:mm') BETWEEN FORMAT(@{nameof(DBAlarmSMSDicInfo.AlertarDataHora)}, 'HH:mm') AND FORMAT(@{nameof(DBAlarmSMSDicInfo.AlertarDataHora)}_end, 'HH:mm')" : !(filtro.AlertarDataHora.IsEmpty()) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"FORMAT({DBAlarmSMSDicInfo.AlertarDataHora}, 'HH:mm') = FORMAT(@{nameof(DBAlarmSMSDicInfo.AlertarDataHora)}, 'HH:mm')" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"FORMAT({DBAlarmSMSDicInfo.AlertarDataHora}, 'HH:mm') <= FORMAT(@{nameof(DBAlarmSMSDicInfo.AlertarDataHora)}_end, 'HH:mm')");
        }

        cWhere.Append(filtro.Operador <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAlarmSMSDicInfo.PTabelaNome}].[{DBAlarmSMSDicInfo.Operador}] = @{nameof(DBAlarmSMSDicInfo.Operador)}");
        cWhere.Append(filtro.GuidExo.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAlarmSMSDicInfo.PTabelaNome}].[{DBAlarmSMSDicInfo.GuidExo}]  {DevourerConsts.MsiCollate} like @{nameof(DBAlarmSMSDicInfo.GuidExo)}");
        cWhere.Append(filtro.Agenda <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAlarmSMSDicInfo.PTabelaNome}].[{DBAlarmSMSDicInfo.Agenda}] = @{nameof(DBAlarmSMSDicInfo.Agenda)}");
        cWhere.Append(filtro.Recado <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAlarmSMSDicInfo.PTabelaNome}].[{DBAlarmSMSDicInfo.Recado}] = @{nameof(DBAlarmSMSDicInfo.Recado)}");
        if (!filtro.Emocao.IsEmpty() && filtro.Emocao_end.IsEmpty())
        {
            cWhere.Append(filtro.Emocao <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAlarmSMSDicInfo.PTabelaNome}].[{DBAlarmSMSDicInfo.Emocao}] >= @{nameof(DBAlarmSMSDicInfo.Emocao)}");
        }
        else
        {
            cWhere.Append((filtro.Emocao <= 0 && filtro.Emocao_end <= 0) ? string.Empty : (!(filtro.Emocao <= 0) && !(filtro.Emocao_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAlarmSMSDicInfo.Emocao} BETWEEN @{nameof(DBAlarmSMSDicInfo.Emocao)} AND @{nameof(DBAlarmSMSDicInfo.Emocao)}_end" : !(filtro.Emocao <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAlarmSMSDicInfo.Emocao} = @{nameof(DBAlarmSMSDicInfo.Emocao)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAlarmSMSDicInfo.Emocao} <= @{nameof(DBAlarmSMSDicInfo.Emocao)}_end");
        }

        cWhere.Append(filtro.GUID.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAlarmSMSDicInfo.PTabelaNome}].[{DBAlarmSMSDicInfo.GUID}]  {DevourerConsts.MsiCollate} like @{nameof(DBAlarmSMSDicInfo.GUID)}");
        if (!filtro.Codigo_filtro.IsEmpty() && filtro.Codigo_filtro_end.IsEmpty())
        {
            cWhere.Append(filtro.Codigo_filtro <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAlarmSMSDicInfo.PTabelaNome}].[{DBAlarmSMSDicInfo.CampoCodigo}] >= @{nameof(DBAlarmSMSDicInfo.CampoCodigo)}");
        }
        else
        {
            cWhere.Append((filtro.Codigo_filtro <= 0 && filtro.Codigo_filtro_end <= 0) ? string.Empty : (!(filtro.Codigo_filtro <= 0) && !(filtro.Codigo_filtro_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAlarmSMSDicInfo.CampoCodigo} BETWEEN @{nameof(DBAlarmSMSDicInfo.CampoCodigo)} AND @{nameof(DBAlarmSMSDicInfo.CampoCodigo)}_end" : !(filtro.Codigo_filtro <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAlarmSMSDicInfo.CampoCodigo} = @{nameof(DBAlarmSMSDicInfo.CampoCodigo)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAlarmSMSDicInfo.CampoCodigo} <= @{nameof(DBAlarmSMSDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private static string ApplyWildCard(char wildcardChar, string value)
    {
        if (wildcardChar == '\0' || wildcardChar == ' ')
        {
            return value;
        }

        var result = $"{wildcardChar}{value.Replace(" ", wildcardChar.ToString())}{wildcardChar}";
        return result;
    }

    public async Task<IEnumerable<NomeID>> GetListN([FromQuery] int max, [FromBody] Filters.FilterAlarmSMS? filtro, [FromRoute, Required] string uri, CancellationToken token)
    {
        // Tracking: 20250606-0
        ThrowIfDisposed();
        var filtroResult = filtro == null ? null : WFiltro(filtro!);
        string where = filtroResult?.where ?? string.Empty;
        List<SqlParameter> parameters = filtroResult?.parametros ?? [];
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new Exception($"Coneão nula.");
        }

        var keyCache = await reader.ReadStringAuditor(uri, "", [], oCnn);
        var cacheKey = $"{uri}-AlarmSMS-{max}-{where.GetHashCode()}-GetListN-{keyCache}";
        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId)
        };
        return await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataListNAsync(max, uri, where, parameters, cancel), entryOptions, cancellationToken: token) ?? [];
    }

    private async Task<IEnumerable<NomeID>> GetDataListNAsync(int max, string uri, string where, List<SqlParameter> parameters, CancellationToken token)
    {
        var result = new List<NomeID>(max);
        var lista = await reader.ListarN(max, uri, where, parameters, DBAlarmSMSDicInfo.CampoNome);
        foreach (var item in lista)
        {
            if (token.IsCancellationRequested)
                break;
            if (item?.FNome != null)
            {
                result.Add(new NomeID { Nome = item.FNome, ID = item.ID });
            }
        }

        return result;
    }

    private async Task<IEnumerable<AlarmSMSResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}