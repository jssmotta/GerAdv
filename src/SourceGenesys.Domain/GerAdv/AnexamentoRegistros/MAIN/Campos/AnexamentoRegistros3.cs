// 100% auto-generated by Source Genesys Core
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming
public partial class DBAnexamentoRegistros
{
    [XmlIgnore]
    private protected bool pFldFCliente, pFldFGUIDReg, pFldFCodigoReg, pFldFIDReg, pFldFData;
    [XmlIgnore]
    private protected int m_FCliente, m_FCodigoReg, m_FIDReg;
    [XmlIgnore]
    private protected string? m_FGUIDReg;
    [XmlIgnore]
    private protected DateTime? m_FData;
    public int FCliente
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCliente;
        set
        {
            pFldFCliente = pFldFCliente || value != m_FCliente;
            if (pFldFCliente)
                m_FCliente = value;
        }
    }

    [StringLength(100, ErrorMessage = "A propriedade FGUIDReg da tabela AnexamentoRegistros deve ter no máximo 100 caracteres.")]
    public string? FGUIDReg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FGUIDReg ?? string.Empty;
        set
        {
            pFldFGUIDReg = pFldFGUIDReg || !(m_FGUIDReg ?? string.Empty).Equals(value);
            if (pFldFGUIDReg)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FGUIDReg = trimmed.Length > 100 ? trimmed.AsSpan(0, 100).ToString() : trimmed;
            }
        }
    }

    public int FCodigoReg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCodigoReg;
        set
        {
            pFldFCodigoReg = pFldFCodigoReg || value != m_FCodigoReg;
            if (pFldFCodigoReg)
                m_FCodigoReg = value;
        }
    }

    public int FIDReg
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FIDReg;
        set
        {
            pFldFIDReg = pFldFIDReg || value != m_FIDReg;
            if (pFldFIDReg)
                m_FIDReg = value;
        }
    }

    public string? FData
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FData is null || m_FData == DevourerOne.DDataZerada ? string.Empty : m_FData.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFData, m_FData, value)is not (true, var changed, var data))
                return;
            (pFldFData, m_FData) = (changed, data);
        }
    }

    public bool IVisto() => m_FVisto;
    public int IQuemCad() => m_FQuemCad;
    public int IQuemAtu() => m_FQuemAtu;
    public DateTime IDtCad() => MDtCad;
    public DateTime IDtAtu() => MDtAtu;
    public string IDtCadDataX_DataHora() => MDtCadDataX_DataHora;
    public string IDtAtuDataX_DataHora() => MDtAtuDataX_DataHora;
    public void SetAuditor(int usuarioId) => AuditorQuem = usuarioId;
    public string IMDtCadDataX_DataHora() => MDtAtuDataX_DataHora;
    public string ITabelaName() => PTabelaNome;
    public string ICampoCodigo() => CampoCodigo;
    public string ICampoNome() => CampoNome;
    public string IPrefixo() => PTabelaPrefixo;
    public ImmutableArray<DBInfoSystem> IFieldsRaw() => throw new NotImplementedException();
    public ImmutableArray<DBInfoSystem> IPkFields() => throw new NotImplementedException();
    public ImmutableArray<DBInfoSystem> IPkIndicesFields() => throw new NotImplementedException();
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetID() => ID;
}