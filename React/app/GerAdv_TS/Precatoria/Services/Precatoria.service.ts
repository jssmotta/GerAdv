// 100% auto-generated by Source Genesys WebApi Front & Back Creator
                     // copyright © 2000-2025 Menphis - Sistemas Inteligentes
                     // This file is part of the Source Genesys project                     
                    'use client';
import { CRUD_CONSTANTS } from '@/app/tools/crud';
import { PrecatoriaApi, PrecatoriaApiError } from '../Apis/ApiPrecatoria';
import { FilterPrecatoria } from '../Filters/Precatoria';
import { IPrecatoria } from '../Interfaces/interface.Precatoria';
import { PrecatoriaEmpty } from '../../Models/Precatoria';

export class PrecatoriaValidator {
  static validatePrecatoria(precatoria: IPrecatoria): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];

    // Atualmente não há validações de regras de negócio específicas
    // Todas as validações são feitas nos inputs correspondentes
    
    return {
      isValid: errors.length === 0,
      errors
    };
  }
}

export interface IPrecatoriaService {
  fetchPrecatoriaById: (id: number) => Promise<IPrecatoria>;
  savePrecatoria: (precatoria: IPrecatoria) => Promise<IPrecatoria>;  
  
  getAll: (filtro?: FilterPrecatoria) => Promise<IPrecatoria[]>;
  deletePrecatoria: (id: number) => Promise<void>;
  validatePrecatoria: (precatoria: IPrecatoria) => { isValid: boolean; errors: string[] };
}

export class PrecatoriaService implements IPrecatoriaService {
  constructor(private api: PrecatoriaApi) {}

  async fetchPrecatoriaById(id: number): Promise<IPrecatoria> {
    if (id <= 0) {
      throw new PrecatoriaApiError('ID inválido', 400, 'INVALID_ID');
    }

    try {
      
      const response = await this.api.getById(id);
      return response.data;

    } catch (error) {
      if (error instanceof PrecatoriaApiError) {
        throw error;
      }
      throw new PrecatoriaApiError('Erro ao buscar precatoria', 500, 'FETCH_ERROR', error);
    }
  }

  async savePrecatoria(precatoria: IPrecatoria): Promise<IPrecatoria> {    
    const validation = this.validatePrecatoria(precatoria);
    if (!validation.isValid) {
      throw new PrecatoriaApiError(
        `Dados inválidos: ${validation.errors.join(', ')}`,
        400,
        'VALIDATION_ERROR'
      );
    }

    try {
      const response = await this.api.addAndUpdate(precatoria);
      return response.data;
    } catch (error) {
      if (error instanceof PrecatoriaApiError) {
        throw error;
      }
      throw new PrecatoriaApiError('Erro ao salvar precatoria', 500, 'SAVE_ERROR', error);
    }
  }

  
  

   async getAll(
    filtro?: FilterPrecatoria,
    onOnlineData?: (data: IPrecatoria[]) => void
  ): Promise<IPrecatoria[]> {
    try {
      // Carrega dados offline primeiro
      const preloadResponse = await this.api.filterPreload(filtro ?? {});
      const offlineData = preloadResponse?.data || [];

      if (onOnlineData) {
        // Busca dados online em background e envia via callback
        this.api.filter(filtro ?? {})
          .then(response => {
            if (response?.data) {
              onOnlineData(response.data);
            }
          })
          .catch(error => {
            console.log('Error fetching online Precatoria');
          });
        // Retorna offline imediatamente
        return offlineData;
      } else {
        // Se não há callback, aguarda dados online e retorna
        try {
          const onlineResponse = await this.api.filter(filtro ?? {});
          return onlineResponse?.data || offlineData;
        } catch (error) {
          console.log('Error fetching online Precatoria');
          return offlineData;
        }
      }
    } catch (error) {
      console.log('Error fetching all Precatoria:');
      return [];
    }
  }


  async deletePrecatoria(id: number): Promise<void> {
    if (id <= 0) {
      throw new PrecatoriaApiError('ID inválido para exclusão', 400, 'INVALID_ID');
    }

    try {
      await this.api.delete(id);
    } catch (error) {
      if (error instanceof PrecatoriaApiError) {
        throw error;
      }
      throw new PrecatoriaApiError('Erro ao excluir precatoria', 500, 'DELETE_ERROR', error);
    }
  }

  validatePrecatoria(precatoria: IPrecatoria): { isValid: boolean; errors: string[] } {
    return PrecatoriaValidator.validatePrecatoria(precatoria);
  }
}