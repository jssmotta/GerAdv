// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// ============================================
// ARQUIVO: DBUpdateTests.cs.txt (Principal)
// ============================================
namespace MenphisSI.GerAdv.Tests;
public class DBPontoVirtualUpdate : IDisposable
{
    private readonly DBPontoVirtual _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBPontoVirtualUpdate()
    {
        _instance = new DBPontoVirtual();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void DefaultConstructor_ShouldCreateInstance_WithDefaultValues()
    {
        // Act
        var pontovirtual = new DBPontoVirtual();
        // Assert
        pontovirtual.Should().NotBeNull();
        pontovirtual.ITabelaName().Should().Be("PontoVirtual");
        pontovirtual.ID.Should().Be(0);
    }

    [Fact]
    public void AllProperties_WithValidValues_ShouldSetCorrectly()
    {
        // Arrange
        var pontovirtual = new DBPontoVirtual
        {
            FKey = "AAAAAAAAAAAAAAAAAAAAAAA",
        };
    // Assert - All properties should be set pontovirtual.FKey.Should().Be( "AAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public void StringProperties_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var pontovirtual = new DBPontoVirtual();
        var longString = new string ('X', 300);
        pontovirtual.FKey = longString; // MAX: 23
    // Assert - All properties should be set pontovirtual.FKey.Should().HaveLength(23);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCc")]
    public void FKey_Property_ShouldAcceptValidNames(string Key)
    {
        // Arrange
        var pontovirtual = new DBPontoVirtual
        {
            // Act
            FKey = Key
        };
        // Assert
        pontovirtual.FKey.Should().Be(Key);
    }

    [Fact]
    public void FKey_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var pontovirtual = new DBPontoVirtual
        {
            // Act
            FKey = null
        };
        // Assert
        pontovirtual.FKey.Should().Be(string.Empty);
    }

    [Fact]
    public void FKey_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var pontovirtual = new DBPontoVirtual();
        var longName = new string ('A', 23 + 10); // Exceeds 23 character limit
        // Act
        pontovirtual.FKey = longName;
        // Assert
        pontovirtual.FKey.Should().HaveLength(23);
    }

    [Fact]
    public void FKey_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FKey = null;
        // Act
        var result = _instance.FKey;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FKey_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FKey = expectedValue;
        // Act
        var result = _instance.FKey;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FKey_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPontoVirtual).GetField("pFldFKey", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FKey = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FKey);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FKey_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPontoVirtual).GetField("pFldFKey", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FKey = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FKey);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FKey_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPontoVirtual).GetField("pFldFKey", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FKey = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FKey);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FKey_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPontoVirtual).GetField("pFldFKey", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FKey = value;
        // Act
        _instance.FKey = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FKey_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPontoVirtual).GetField("pFldFKey", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FKey = "Original Value";
        // Act
        _instance.FKey = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FKey_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPontoVirtual).GetField("pFldFKey", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FKey = "First Value";
        // Act
        _instance.FKey = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FKey_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPontoVirtual).GetField("pFldFKey", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FKey = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FKey);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCc")]
    public void FKey_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FKey = input;
        // Assert
        Assert.Equal(expected, _instance.FKey);
    }

    [Fact]
    public void FKey_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPontoVirtual).GetField("pFldFKey", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FKey = null;
        // Act
        _instance.FKey = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FKey_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPontoVirtual).GetField("pFldFKey", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FKey = "Existing Value";
        // Act
        _instance.FKey = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void TabelaNome_Property_ShouldReturnCorrectTableName()
    {
        // Arrange
        var pontovirtual = new DBPontoVirtual();
        // Act & Assert
        pontovirtual.TabelaNome.Should().Be("PontoVirtual");
    }

    public virtual void Dispose()
    {
    // Cleanup resources if needed
    }
}