// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using MenphisSI.DB;
using System.Data;

namespace MenphisSI.GerAdv.Factory.Tests;
public class FTiposAcaoFactoryTests : IDisposable
{
    private FTiposAcaoFactory _factory;
    private Mock<MsiSqlConnection> _mockConnection;
    private Mock<SqlDataReader> _mockReader;
    private DataRow _validDataRow;
    public FTiposAcaoFactoryTests()
    {
        _factory = new FTiposAcaoFactory();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockReader = new Mock<SqlDataReader>();
        // Prepare a real DataRow with the expected schema (at minimum CampoCodigo: "ageCodigo")
        var dt = new DataTable();
        dt.Columns.Add("ageCodigo", typeof(int));
        var row = dt.NewRow();
        // Set as DBNull to allow constructor to return early without requiring all columns
        row["ageCodigo"] = DBNull.Value;
        dt.Rows.Add(row);
        _validDataRow = dt.Rows[0];
    }

    [Fact]
    public void Create_ShouldReturnNewInstance()
    {
        // Act
        var result = _factory.Create();
        // Assert
        result.Should().NotBeNull();
        result.Should().BeOfType<FTiposAcao>();
    }

    [Fact]
    public void CreateFromReader_WithNullReader_ShouldHandleGracefully()
    {
        // Act
        var result = _factory.CreateFromReader(null);
        // Assert
        result.Should().NotBeNull();
    }

    [Fact]
    public void CreateFromDataRow_WithValidDataRow_ShouldReturnInstance()
    {
        // Arrange
        // _validDataRow already prepared in constructor
        // Act
        var result = _factory.CreateFromDataRow(_validDataRow);
        // Assert
        result.Should().NotBeNull();
        result.Should().BeOfType<FTiposAcao>();
    }

    [Fact]
    public void CreateFromDataRow_WithNullDataRow_ShouldHandleGracefully()
    {
        // Act
        var result = _factory.CreateFromDataRow(null);
        // Assert
        result.Should().NotBeNull();
    }

    [Fact]
    public async Task CreateFromIdAsync_WithValidId_ShouldReturnInstance()
    {
        // Arrange
        var testId = 1;
        SetupMockConnection();
        // Act & Assert
        // The CarregarAsync method will likely throw an exception in a test environment
        // because it requires real database access and throws InvalidOperationException when DataTable is null
        var exception = await Record.ExceptionAsync(async () =>
        {
            await _factory.CreateFromIdAsync(testId, _mockConnection.Object);
        });
        // Assert
        // The method should either return a valid instance or throw an expected exception
        exception.Should().NotBeNull();
        exception.Should().BeOfType<DataAccessException>();
    }

    [Fact]
    public async Task CreateFromIdAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        // Arrange
        var testId = 0; // Invalid ID
        SetupMockConnection();
        // Act
        var result = await _factory.CreateFromIdAsync(testId, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.Should().BeOfType<FTiposAcao>();
        result.ID.Should().Be(0); // Should remain 0 since CarregarAsync returns early for invalid IDs
    }

    [Fact]
    public async Task CreateFromIdAsync_WithNullConnection_ShouldReturnEmptyInstance()
    {
        // Arrange
        var testId = 1;
        // Act
        var result = await _factory.CreateFromIdAsync(testId, null);
        // Assert
        result.Should().NotBeNull();
        result.Should().BeOfType<FTiposAcao>();
        result.ID.Should().Be(0); // Should remain 0 since CarregarAsync returns early for null connection
    }

    [Fact]
    public async Task CreateAsync_ShouldReturnNewInstanceAsync()
    {
        // Act
        var result = await _factory.CreateAsync();
        // Assert
        result.Should().NotBeNull();
        result.Should().BeOfType<FTiposAcao>();
    }

    [Fact]
    public void CreateFromParameters_WithName_ShouldReturnInstance()
    {
        // Arrange
        var parameters = new List<SqlParameter>();
        var testName = "TestName";
        SetupMockConnection();
        // Act & Assert
        // The CreateFromParameters method calls the constructor which performs database operations
        // In a test environment with mocked connections, this will throw an exception
        var exception = Record.Exception(() =>
        {
            var result = _factory.CreateFromParameters(parameters, _mockConnection.Object, testName);
            return result;
        });
        // Assert
        // The method should throw an exception when using mocked connections
        exception.Should().NotBeNull();
        exception.Should().BeOfType<Exception>();
        var messageContainsEnglish = exception.Message.Contains("Connection property has not been initialized");
        var messageContainsPortuguese = exception.Message.Contains("propriedade Connection não foi inicializada");
        (messageContainsEnglish || messageContainsPortuguese).Should().BeTrue("because the exception message should indicate connection not initialized in either English or Portuguese");
    }

    [Fact]
    public void CreateFromParameters_WithNullConnection_ShouldReturnInstance()
    {
        // Arrange
        var parameters = new List<SqlParameter>();
        var testName = "TestName";
        // Act
        var result = _factory.CreateFromParameters(parameters, null, testName);
        // Assert
        result.Should().NotBeNull();
        result.Should().BeOfType<FTiposAcao>();
        result.ID.Should().Be(0); // Should remain 0 since the constructor returns early for null connection
    }

    [Fact]
    public void CreateFromParameters_WithNullParameters_ShouldReturnInstance()
    {
        // Arrange
        List<SqlParameter>? parameters = null;
        var testName = "TestName";
        SetupMockConnection();
        // Act & Assert
        // Should handle null parameters gracefully but will still throw NullReferenceException
        var exception = Record.Exception(() =>
        {
            var result = _factory.CreateFromParameters(parameters, _mockConnection.Object, testName);
            return result;
        });
        // Assert
        exception.Should().NotBeNull();
    }

    [Fact]
    public void Dispose_ShouldSetDisposedFlag()
    {
        // Arrange
        var factory = new FTiposAcaoFactory();
        // Act
        factory.Dispose();
        // Assert - Trying to use after dispose should throw
        Action act = () => factory.Create();
        act.Should().Throw<ObjectDisposedException>();
    }

    [Fact]
    public void Dispose_CalledMultipleTimes_ShouldNotThrow()
    {
        // Arrange
        var factory = new FTiposAcaoFactory();
        // Act & Assert
        Action act = () =>
        {
            factory.Dispose();
            factory.Dispose();
        };
        act.Should().NotThrow();
    }

#region Helper Methods    
    private void SetupMockConnection()
    {
        _mockConnection.Setup(c => c.State).Returns(ConnectionState.Open);
    // Add additional connection setup as needed
    }

#endregion
    public virtual void Dispose()
    {
        _factory?.Dispose();
    }
}