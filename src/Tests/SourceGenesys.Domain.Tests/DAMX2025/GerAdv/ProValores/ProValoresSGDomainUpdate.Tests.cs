// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// ============================================
// ARQUIVO: DBUpdateTests.cs.txt (Principal)
// ============================================
namespace MenphisSI.GerAdv.Tests;
public class DBProValoresUpdate : IDisposable
{
    private readonly DBProValores _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBProValoresUpdate()
    {
        _instance = new DBProValores();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void DefaultConstructor_ShouldCreateInstance_WithDefaultValues()
    {
        // Act
        var provalores = new DBProValores();
        // Assert
        provalores.Should().NotBeNull();
        provalores.ITabelaName().Should().Be("ProValores");
        provalores.ID.Should().Be(0);
    }

    [Fact]
    public void AllProperties_WithValidValues_ShouldSetCorrectly()
    {
        // Arrange
        var provalores = new DBProValores
        {
            FIndice = "AAAAAAAAAAAAAAAAAAAA",
            FGuid = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        };
        // Assert - All properties should be set provalores.FIndice.Should().Be( "AAAAAAAAAAAAAAAAAAAA");
        provalores.FGuid.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FGuid_Property_ShouldAcceptValidNames(string Guid)
    {
        // Arrange
        var provalores = new DBProValores
        {
            // Act
            FGuid = Guid
        };
        // Assert
        provalores.FGuid.Should().Be(Guid);
    }

    [Fact]
    public void FGuid_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var provalores = new DBProValores
        {
            // Act
            FGuid = null
        };
        // Assert
        provalores.FGuid.Should().Be(string.Empty);
    }

    [Fact]
    public void FGuid_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var provalores = new DBProValores();
        var longName = new string ('A', 50 + 10); // Exceeds 50 character limit
        // Act
        provalores.FGuid = longName;
        // Assert
        provalores.FGuid.Should().HaveLength(50);
    }

    [Fact]
    public void FGuid_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FGuid = null;
        // Act
        var result = _instance.FGuid;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FGuid_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FGuid = expectedValue;
        // Act
        var result = _instance.FGuid;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FGuid_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBProValores).GetField("pFldFGuid", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FGuid = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FGuid);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FGuid_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBProValores).GetField("pFldFGuid", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FGuid = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FGuid);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FGuid_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBProValores).GetField("pFldFGuid", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FGuid = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FGuid);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FGuid_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBProValores).GetField("pFldFGuid", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FGuid = value;
        // Act
        _instance.FGuid = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FGuid_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBProValores).GetField("pFldFGuid", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FGuid = "Original Value";
        // Act
        _instance.FGuid = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FGuid_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBProValores).GetField("pFldFGuid", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FGuid = "First Value";
        // Act
        _instance.FGuid = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FGuid_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBProValores).GetField("pFldFGuid", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FGuid = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FGuid);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FGuid_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FGuid = input;
        // Assert
        Assert.Equal(expected, _instance.FGuid);
    }

    [Fact]
    public void FGuid_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBProValores).GetField("pFldFGuid", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FGuid = null;
        // Act
        _instance.FGuid = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FGuid_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBProValores).GetField("pFldFGuid", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FGuid = "Existing Value";
        // Act
        _instance.FGuid = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCc")]
    public void FIndice_Property_ShouldAcceptValidNames(string Indice)
    {
        // Arrange
        var provalores = new DBProValores
        {
            // Act
            FIndice = Indice
        };
        // Assert
        provalores.FIndice.Should().Be(Indice);
    }

    [Fact]
    public void FIndice_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var provalores = new DBProValores
        {
            // Act
            FIndice = null
        };
        // Assert
        provalores.FIndice.Should().Be(string.Empty);
    }

    [Fact]
    public void FIndice_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var provalores = new DBProValores();
        var longName = new string ('A', 20 + 10); // Exceeds 20 character limit
        // Act
        provalores.FIndice = longName;
        // Assert
        provalores.FIndice.Should().HaveLength(20);
    }

    [Fact]
    public void FIndice_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FIndice = null;
        // Act
        var result = _instance.FIndice;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FIndice_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FIndice = expectedValue;
        // Act
        var result = _instance.FIndice;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FIndice_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBProValores).GetField("pFldFIndice", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FIndice = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FIndice);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FIndice_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBProValores).GetField("pFldFIndice", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FIndice = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FIndice);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FIndice_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBProValores).GetField("pFldFIndice", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FIndice = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FIndice);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FIndice_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBProValores).GetField("pFldFIndice", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FIndice = value;
        // Act
        _instance.FIndice = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FIndice_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBProValores).GetField("pFldFIndice", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FIndice = "Original Value";
        // Act
        _instance.FIndice = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FIndice_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBProValores).GetField("pFldFIndice", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FIndice = "First Value";
        // Act
        _instance.FIndice = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FIndice_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBProValores).GetField("pFldFIndice", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FIndice = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FIndice);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCc")]
    public void FIndice_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FIndice = input;
        // Assert
        Assert.Equal(expected, _instance.FIndice);
    }

    [Fact]
    public void FIndice_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBProValores).GetField("pFldFIndice", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FIndice = null;
        // Act
        _instance.FIndice = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FIndice_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBProValores).GetField("pFldFIndice", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FIndice = "Existing Value";
        // Act
        _instance.FIndice = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData(1000.50)]
    [InlineData(0)]
    [InlineData(-100.25)]
    public void FValorOriginal_Property_ShouldAcceptDecimalValues(decimal ValorOriginal)
    {
        // Arrange
        var provalores = new DBProValores();
        // Act
        provalores.FValorOriginal = ValorOriginal;
        // Assert
        provalores.FValorOriginal.Should().Be(ValorOriginal);
    }

    [Theory]
    [InlineData(1000.50)]
    [InlineData(0)]
    [InlineData(-100.25)]
    public void FPercMulta_Property_ShouldAcceptDecimalValues(decimal PercMulta)
    {
        // Arrange
        var provalores = new DBProValores();
        // Act
        provalores.FPercMulta = PercMulta;
        // Assert
        provalores.FPercMulta.Should().Be(PercMulta);
    }

    [Theory]
    [InlineData(1000.50)]
    [InlineData(0)]
    [InlineData(-100.25)]
    public void FValorMulta_Property_ShouldAcceptDecimalValues(decimal ValorMulta)
    {
        // Arrange
        var provalores = new DBProValores();
        // Act
        provalores.FValorMulta = ValorMulta;
        // Assert
        provalores.FValorMulta.Should().Be(ValorMulta);
    }

    [Theory]
    [InlineData(1000.50)]
    [InlineData(0)]
    [InlineData(-100.25)]
    public void FPercJuros_Property_ShouldAcceptDecimalValues(decimal PercJuros)
    {
        // Arrange
        var provalores = new DBProValores();
        // Act
        provalores.FPercJuros = PercJuros;
        // Assert
        provalores.FPercJuros.Should().Be(PercJuros);
    }

    [Theory]
    [InlineData(1000.50)]
    [InlineData(0)]
    [InlineData(-100.25)]
    public void FValorOriginalCorrigidoIndice_Property_ShouldAcceptDecimalValues(decimal ValorOriginalCorrigidoIndice)
    {
        // Arrange
        var provalores = new DBProValores();
        // Act
        provalores.FValorOriginalCorrigidoIndice = ValorOriginalCorrigidoIndice;
        // Assert
        provalores.FValorOriginalCorrigidoIndice.Should().Be(ValorOriginalCorrigidoIndice);
    }

    [Theory]
    [InlineData(1000.50)]
    [InlineData(0)]
    [InlineData(-100.25)]
    public void FValorMultaCorrigido_Property_ShouldAcceptDecimalValues(decimal ValorMultaCorrigido)
    {
        // Arrange
        var provalores = new DBProValores();
        // Act
        provalores.FValorMultaCorrigido = ValorMultaCorrigido;
        // Assert
        provalores.FValorMultaCorrigido.Should().Be(ValorMultaCorrigido);
    }

    [Theory]
    [InlineData(1000.50)]
    [InlineData(0)]
    [InlineData(-100.25)]
    public void FValorJurosCorrigido_Property_ShouldAcceptDecimalValues(decimal ValorJurosCorrigido)
    {
        // Arrange
        var provalores = new DBProValores();
        // Act
        provalores.FValorJurosCorrigido = ValorJurosCorrigido;
        // Assert
        provalores.FValorJurosCorrigido.Should().Be(ValorJurosCorrigido);
    }

    [Theory]
    [InlineData(1000.50)]
    [InlineData(0)]
    [InlineData(-100.25)]
    public void FValorFinal_Property_ShouldAcceptDecimalValues(decimal ValorFinal)
    {
        // Arrange
        var provalores = new DBProValores();
        // Act
        provalores.FValorFinal = ValorFinal;
        // Assert
        provalores.FValorFinal.Should().Be(ValorFinal);
    }

    [Fact]
    public void TabelaNome_Property_ShouldReturnCorrectTableName()
    {
        // Arrange
        var provalores = new DBProValores();
        // Act & Assert
        provalores.TabelaNome.Should().Be("ProValores");
    }

    public virtual void Dispose()
    {
    // Cleanup resources if needed
    }
}