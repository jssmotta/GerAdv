// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class FornecedoresWriterTests
{
    private readonly Mock<IFFornecedoresFactory> _mockFornecedoresFactory;
    private readonly Mock<FFornecedores> _mockFFornecedores;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly FornecedoresWriter _fornecedoresWriter;
    public FornecedoresWriterTests()
    {
        _mockFornecedoresFactory = new Mock<IFFornecedoresFactory>();
        _mockFFornecedores = new Mock<FFornecedores>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _fornecedoresWriter = new FornecedoresWriter(_mockFornecedoresFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var fornecedores = CreateValidFornecedoresModel();
        fornecedores.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockFornecedoresFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFFornecedores.Object);
        _mockFFornecedores.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _fornecedoresWriter.WriteAsync(fornecedores, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFFornecedores.Object);
        _mockFornecedoresFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockFornecedoresFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFFornecedores.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var fornecedores = CreateValidFornecedoresModel();
        fornecedores.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockFornecedoresFactory.Setup(x => x.CreateFromIdAsync(fornecedores.Id, _mockConnection.Object)).ReturnsAsync(_mockFFornecedores.Object);
        _mockFFornecedores.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _fornecedoresWriter.WriteAsync(fornecedores, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFFornecedores.Object);
        _mockFornecedoresFactory.Verify(x => x.CreateFromIdAsync(fornecedores.Id, _mockConnection.Object), Times.Once);
        _mockFornecedoresFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFFornecedores.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var fornecedores = CreateValidFornecedoresModel();
        var auditorQuem = 99;
        _mockFornecedoresFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFFornecedores.Object);
        _mockFFornecedores.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _fornecedoresWriter.WriteAsync(fornecedores, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFFornecedores.Object);
        _mockFFornecedores.VerifySet(x => x.FGrupo = fornecedores.Grupo, Times.Once);
        _mockFFornecedores.VerifySet(x => x.FNome = fornecedores.Nome, Times.Once);
        _mockFFornecedores.VerifySet(x => x.FSubGrupo = fornecedores.SubGrupo, Times.Once);
        _mockFFornecedores.VerifySet(x => x.FTipo = fornecedores.Tipo, Times.Once);
        _mockFFornecedores.VerifySet(x => x.FSexo = fornecedores.Sexo, Times.Once);
        _mockFFornecedores.VerifySet(x => x.FCNPJ = It.IsAny<string>(), Times.Once); // CNPJ é limpo pelo ClearInputCnpj()
        _mockFFornecedores.VerifySet(x => x.FInscEst = fornecedores.InscEst, Times.Once);
        _mockFFornecedores.VerifySet(x => x.FCPF = It.IsAny<string>(), Times.Once); // CPF é limpo pelo ClearInputCpf()
        _mockFFornecedores.VerifySet(x => x.FRG = fornecedores.RG, Times.Once);
        _mockFFornecedores.VerifySet(x => x.FEndereco = fornecedores.Endereco, Times.Once);
        _mockFFornecedores.VerifySet(x => x.FBairro = fornecedores.Bairro, Times.Once);
        _mockFFornecedores.VerifySet(x => x.FCEP = It.IsAny<string>(), Times.Once); // CEP é limpo pelo ClearInputCep()
        _mockFFornecedores.VerifySet(x => x.FCidade = fornecedores.Cidade, Times.Once);
        _mockFFornecedores.VerifySet(x => x.FFone = fornecedores.Fone, Times.Once);
        _mockFFornecedores.VerifySet(x => x.FFax = fornecedores.Fax, Times.Once);
        _mockFFornecedores.VerifySet(x => x.FEmail = fornecedores.Email, Times.Once);
        _mockFFornecedores.VerifySet(x => x.FSite = fornecedores.Site, Times.Once);
        _mockFFornecedores.VerifySet(x => x.FObs = fornecedores.Obs, Times.Once);
        _mockFFornecedores.VerifySet(x => x.FProdutos = fornecedores.Produtos, Times.Once);
        _mockFFornecedores.VerifySet(x => x.FContatos = fornecedores.Contatos, Times.Once);
        _mockFFornecedores.VerifySet(x => x.FGUID = fornecedores.GUID, Times.Once);
        _mockFFornecedores.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var fornecedores = CreateValidFornecedoresModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockFornecedoresFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _fornecedoresWriter.WriteAsync(fornecedores, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var fornecedores = CreateValidFornecedoresModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockFornecedoresFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFFornecedores.Object);
        _mockFFornecedores.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _fornecedoresWriter.WriteAsync(fornecedores, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var fornecedoresResponse = new FornecedoresResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockFornecedoresFactory.Setup(x => x.DeleteAsync(operadorId, fornecedoresResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _fornecedoresWriter.Delete(fornecedoresResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockFornecedoresFactory.Verify(x => x.DeleteAsync(operadorId, fornecedoresResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var fornecedoresResponse = new FornecedoresResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockFornecedoresFactory.Setup(x => x.DeleteAsync(operadorId, fornecedoresResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _fornecedoresWriter.Delete(fornecedoresResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var fornecedoresResponse = new FornecedoresResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockFornecedoresFactory.Setup(x => x.DeleteAsync(operadorId, fornecedoresResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _fornecedoresWriter.Delete(fornecedoresResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new FornecedoresWriter(_mockFornecedoresFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new FornecedoresWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.Fornecedores CreateValidFornecedoresModel()
    {
        return new Models.Fornecedores
        {
            Id = 0,
            Grupo = 1,
            Nome = "João",
            SubGrupo = 1,
            Tipo = false,
            Sexo = false,
            CNPJ = "93016944000138",
            InscEst = "AAAAAAAAAAAAA",
            CPF = "544.506.718-13",
            RG = "12.345.678-9",
            Endereco = "Rua das Flores, 123",
            Bairro = "Centro",
            CEP = "01234-567",
            Cidade = 1,
            Fone = "(11) 99999-9999",
            Fax = "(11) 88888-9999",
            Email = "test@email.com",
            Site = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Obs = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Produtos = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Contatos = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            GUID = Guid.NewGuid().ToString()
        };
    }
#endregion
}