// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class ClientesWriterTests
{
    private readonly Mock<IFClientesFactory> _mockClientesFactory;
    private readonly Mock<FClientes> _mockFClientes;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly ClientesWriter _clientesWriter;
    public ClientesWriterTests()
    {
        _mockClientesFactory = new Mock<IFClientesFactory>();
        _mockFClientes = new Mock<FClientes>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _clientesWriter = new ClientesWriter(_mockClientesFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var clientes = CreateValidClientesModel();
        clientes.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockClientesFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFClientes.Object);
        _mockFClientes.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _clientesWriter.WriteAsync(clientes, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFClientes.Object);
        _mockClientesFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockClientesFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFClientes.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var clientes = CreateValidClientesModel();
        clientes.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockClientesFactory.Setup(x => x.CreateFromIdAsync(clientes.Id, _mockConnection.Object)).ReturnsAsync(_mockFClientes.Object);
        _mockFClientes.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _clientesWriter.WriteAsync(clientes, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFClientes.Object);
        _mockClientesFactory.Verify(x => x.CreateFromIdAsync(clientes.Id, _mockConnection.Object), Times.Once);
        _mockClientesFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFClientes.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var clientes = CreateValidClientesModel();
        var auditorQuem = 99;
        _mockClientesFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFClientes.Object);
        _mockFClientes.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _clientesWriter.WriteAsync(clientes, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFClientes.Object);
        _mockFClientes.VerifySet(x => x.FEmpresa = clientes.Empresa, Times.Once);
        _mockFClientes.VerifySet(x => x.FIcone = clientes.Icone, Times.Once);
        _mockFClientes.VerifySet(x => x.FNomeMae = clientes.NomeMae, Times.Once);
        _mockFClientes.VerifySet(x => x.FRGDataExp = clientes.RGDataExp.ToString(), Times.Once);
        _mockFClientes.VerifySet(x => x.FInativo = clientes.Inativo, Times.Once);
        _mockFClientes.VerifySet(x => x.FQuemIndicou = clientes.QuemIndicou, Times.Once);
        _mockFClientes.VerifySet(x => x.FSendEMail = clientes.SendEMail, Times.Once);
        _mockFClientes.VerifySet(x => x.FNome = clientes.Nome, Times.Once);
        _mockFClientes.VerifySet(x => x.FAdv = clientes.Adv, Times.Once);
        _mockFClientes.VerifySet(x => x.FIDRep = clientes.IDRep, Times.Once);
        _mockFClientes.VerifySet(x => x.FJuridica = clientes.Juridica, Times.Once);
        _mockFClientes.VerifySet(x => x.FNomeFantasia = clientes.NomeFantasia, Times.Once);
        _mockFClientes.VerifySet(x => x.FClass = clientes.Class, Times.Once);
        _mockFClientes.VerifySet(x => x.FTipo = clientes.Tipo, Times.Once);
        _mockFClientes.VerifySet(x => x.FDtNasc = clientes.DtNasc.ToString(), Times.Once);
        _mockFClientes.VerifySet(x => x.FInscEst = clientes.InscEst, Times.Once);
        _mockFClientes.VerifySet(x => x.FQualificacao = clientes.Qualificacao, Times.Once);
        _mockFClientes.VerifySet(x => x.FSexo = clientes.Sexo, Times.Once);
        _mockFClientes.VerifySet(x => x.FIdade = clientes.Idade, Times.Once);
        _mockFClientes.VerifySet(x => x.FCNPJ = It.IsAny<string>(), Times.Once); // CNPJ é limpo pelo ClearInputCnpj()
        _mockFClientes.VerifySet(x => x.FCPF = It.IsAny<string>(), Times.Once); // CPF é limpo pelo ClearInputCpf()
        _mockFClientes.VerifySet(x => x.FRG = clientes.RG, Times.Once);
        _mockFClientes.VerifySet(x => x.FTipoCaptacao = clientes.TipoCaptacao, Times.Once);
        _mockFClientes.VerifySet(x => x.FObservacao = clientes.Observacao, Times.Once);
        _mockFClientes.VerifySet(x => x.FEndereco = clientes.Endereco, Times.Once);
        _mockFClientes.VerifySet(x => x.FBairro = clientes.Bairro, Times.Once);
        _mockFClientes.VerifySet(x => x.FCidade = clientes.Cidade, Times.Once);
        _mockFClientes.VerifySet(x => x.FCEP = It.IsAny<string>(), Times.Once); // CEP é limpo pelo ClearInputCep()
        _mockFClientes.VerifySet(x => x.FFax = clientes.Fax, Times.Once);
        _mockFClientes.VerifySet(x => x.FFone = clientes.Fone, Times.Once);
        _mockFClientes.VerifySet(x => x.FData = clientes.Data, Times.Once);
        _mockFClientes.VerifySet(x => x.FHomePage = clientes.HomePage, Times.Once);
        _mockFClientes.VerifySet(x => x.FEMail = clientes.EMail, Times.Once);
        _mockFClientes.VerifySet(x => x.FObito = clientes.Obito, Times.Once);
        _mockFClientes.VerifySet(x => x.FNomePai = clientes.NomePai, Times.Once);
        _mockFClientes.VerifySet(x => x.FRGOExpeditor = clientes.RGOExpeditor, Times.Once);
        _mockFClientes.VerifySet(x => x.FRegimeTributacao = clientes.RegimeTributacao, Times.Once);
        _mockFClientes.VerifySet(x => x.FEnquadramentoEmpresa = clientes.EnquadramentoEmpresa, Times.Once);
        _mockFClientes.VerifySet(x => x.FReportECBOnly = clientes.ReportECBOnly, Times.Once);
        _mockFClientes.VerifySet(x => x.FProBono = clientes.ProBono, Times.Once);
        _mockFClientes.VerifySet(x => x.FCNH = clientes.CNH, Times.Once);
        _mockFClientes.VerifySet(x => x.FPessoaContato = clientes.PessoaContato, Times.Once);
        _mockFClientes.VerifySet(x => x.FGUID = clientes.GUID, Times.Once);
        _mockFClientes.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithNullRGDataExp_ShouldNotSetFRGDataExp()
    {
        // Arrange
        var clientes = CreateValidClientesModel();
        clientes.RGDataExp = null;
        var auditorQuem = 123;
        _mockClientesFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFClientes.Object);
        _mockFClientes.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _clientesWriter.WriteAsync(clientes, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFClientes.VerifySet(x => x.FRGDataExp = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WithNullDtNasc_ShouldNotSetFDtNasc()
    {
        // Arrange
        var clientes = CreateValidClientesModel();
        clientes.DtNasc = null;
        var auditorQuem = 123;
        _mockClientesFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFClientes.Object);
        _mockFClientes.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _clientesWriter.WriteAsync(clientes, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFClientes.VerifySet(x => x.FDtNasc = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var clientes = CreateValidClientesModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockClientesFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _clientesWriter.WriteAsync(clientes, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var clientes = CreateValidClientesModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockClientesFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFClientes.Object);
        _mockFClientes.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _clientesWriter.WriteAsync(clientes, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var clientesResponse = new ClientesResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockClientesFactory.Setup(x => x.DeleteAsync(operadorId, clientesResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _clientesWriter.Delete(clientesResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockClientesFactory.Verify(x => x.DeleteAsync(operadorId, clientesResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var clientesResponse = new ClientesResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockClientesFactory.Setup(x => x.DeleteAsync(operadorId, clientesResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _clientesWriter.Delete(clientesResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var clientesResponse = new ClientesResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockClientesFactory.Setup(x => x.DeleteAsync(operadorId, clientesResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _clientesWriter.Delete(clientesResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new ClientesWriter(_mockClientesFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new ClientesWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.Clientes CreateValidClientesModel()
    {
        return new Models.Clientes
        {
            Id = 0,
            Empresa = 1,
            Icone = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            NomeMae = "João",
            RGDataExp = "24/04/1975",
            Inativo = false,
            QuemIndicou = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            SendEMail = false,
            Nome = "João",
            Adv = 1,
            IDRep = 1,
            Juridica = false,
            NomeFantasia = "João",
            Class = "A",
            Tipo = false,
            DtNasc = "24/04/1975",
            InscEst = "AAAAAAAAAAAAA",
            Qualificacao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Sexo = false,
            Idade = 1,
            CNPJ = "93016944000138",
            CPF = "544.506.718-13",
            RG = "12.345.678-9",
            TipoCaptacao = false,
            Observacao = "Observação teste",
            Endereco = "Rua das Flores, 123",
            Bairro = "Centro",
            Cidade = 1,
            CEP = "01234-567",
            Fax = "(11) 88888-9999",
            Fone = "(11) 99999-9999",
            Data = "27/05/2022",
            HomePage = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            EMail = "test@email.com",
            Obito = false,
            NomePai = "João",
            RGOExpeditor = "12.345.678-9",
            RegimeTributacao = 1,
            EnquadramentoEmpresa = 1,
            ReportECBOnly = false,
            ProBono = false,
            CNH = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            PessoaContato = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            GUID = Guid.NewGuid().ToString()
        };
    }
#endregion
}