// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class NECompromissosValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFNECompromissosFactory> _mockNECompromissosFactory;
    private readonly Mock<INECompromissosReader> _mockReader;
    private readonly NECompromissosValidation _validation;
    private readonly Mock<INECompromissosService> _mockNECompromissosService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<ITipoCompromissoReader> _mockTipoCompromissoReader;
    private readonly NECompromissosService _service;
    private readonly string _validUri = "test-uri";
    public NECompromissosValidationTests()
    {
        _mockNECompromissosFactory = new Mock<IFNECompromissosFactory>();
        _mockReader = new Mock<INECompromissosReader>();
        _validation = new NECompromissosValidation();
        _mockNECompromissosService = new Mock<INECompromissosService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockTipoCompromissoReader = new Mock<ITipoCompromissoReader>();
    }

#region Class Structure Tests
    [Fact]
    public void NECompromissosValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<INECompromissosValidation>();
    }

    [Fact]
    public void NECompromissosValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(NECompromissosValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void NECompromissosValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(NECompromissosValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.NECompromissos CreateValidNECompromissos()
    {
        return new Models.NECompromissos
        {
            Id = 1,
            PalavraChave = 0,
            Provisionar = false,
            TipoCompromisso = 0,
            TextoCompromisso = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM"
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockNECompromissosService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterNECompromissos>(), It.IsAny<string>())).ReturnsAsync(new List<NECompromissosResponseAll>());
        // Setup other mocks but don't override the NECompromissoss service mock
        _mockTipoCompromissoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.TipoCompromissoResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockNECompromissosService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterNECompromissos>(), It.IsAny<string>())).ReturnsAsync(new List<NECompromissosResponseAll>());
        // Setup other mocks but don't override the NECompromissoss service mock
        _mockTipoCompromissoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.TipoCompromissoResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var necompromissos = new Models.NECompromissos
        {
            Id = 1,
            Provisionar = false,
            TextoCompromisso = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(necompromissos, _mockNECompromissosService.Object, _mockTipoCompromissoReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockNECompromissosService.Object, _mockTipoCompromissoReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region Foreign Key Validation Tests - TipoCompromisso
    [Fact]
    public async Task ValidateReg_WithInvalidTipoCompromisso_ShouldThrowSGValidationException()
    {
        // Arrange
        var necompromissos = CreateValidNECompromissos();
        necompromissos.TipoCompromisso = 999;
        _mockTipoCompromissoReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.TipoCompromissoResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(necompromissos, _mockNECompromissosService.Object, _mockTipoCompromissoReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedTipoCompromissoId_ShouldThrowSGValidationException()
    {
        // Arrange
        var necompromissos = CreateValidNECompromissos();
        necompromissos.TipoCompromisso = 999;
        var reg888 = new Models.Response.TipoCompromissoResponse
        {
            Id = 888
        }; // Different ID
        _mockTipoCompromissoReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(necompromissos, _mockNECompromissosService.Object, _mockTipoCompromissoReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidTipoCompromisso_ShouldPass()
    {
        // Arrange
        var necompromissos = CreateValidNECompromissos();
        necompromissos.TipoCompromisso = 123;
        var reg123 = new Models.Response.TipoCompromissoResponse
        {
            Id = 123
        };
        _mockTipoCompromissoReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(necompromissos, _mockNECompromissosService.Object, _mockTipoCompromissoReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyTipoCompromisso_ShouldPass()
    {
        // Arrange
        var necompromissos = CreateValidNECompromissos();
        necompromissos.TipoCompromisso = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(necompromissos, _mockNECompromissosService.Object, _mockTipoCompromissoReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockTipoCompromissoReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}