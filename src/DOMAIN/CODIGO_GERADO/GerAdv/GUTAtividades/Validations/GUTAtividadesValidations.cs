// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IGUTAtividadesValidation
{
    Task<bool> ValidateReg(Models.GUTAtividades reg, IGUTAtividadesService service, IGUTPeriodicidadeReader gutperiodicidadeReader, IOperadorReader operadorReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, IGUTAtividadesService service, IGUTAtividadesMatrizService gutatividadesmatrizService, IGUTPeriodicidadeStatusService gutperiodicidadestatusService, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class GUTAtividadesValidation : IGUTAtividadesValidation
{
    public async Task<bool> CanDelete(int id, IGUTAtividadesService service, IGUTAtividadesMatrizService gutatividadesmatrizService, IGUTPeriodicidadeStatusService gutperiodicidadestatusService, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        var gutatividadesmatrizExists0 = await gutatividadesmatrizService.Filter(new Filters.FilterGUTAtividadesMatriz { GUTAtividade = id }, uri);
        if (gutatividadesmatrizExists0 != null && gutatividadesmatrizExists0.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela G U T Atividades Matriz associados a ele.");
        var gutperiodicidadestatusExists1 = await gutperiodicidadestatusService.Filter(new Filters.FilterGUTPeriodicidadeStatus { GUTAtividade = id }, uri);
        if (gutperiodicidadestatusExists1 != null && gutperiodicidadestatusExists1.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela G U T Periodicidade Status associados a ele.");
        return true;
    }

    private bool ValidSizes(Models.GUTAtividades reg)
    {
        if (reg.Nome != null && reg.Nome.Length > 255)
            throw new SGValidationException($"Nome deve ter no máximo 255 caracteres.");
        if (reg.GUID != null && reg.GUID.Length > 50)
            throw new SGValidationException($"GUID deve ter no máximo 50 caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.GUTAtividades reg, IGUTAtividadesService service, IGUTPeriodicidadeReader gutperiodicidadeReader, IOperadorReader operadorReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Nome))
            throw new SGValidationException("Nome é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.GUTPeriodicidade == 0)
            throw new SGValidationException("GUTPeriodicidade é obrigatório.");
        if (reg.GUID.IsEmpty())
            throw new SGValidationException("GUID é obrigatório.");
        // GUTPeriodicidade
        {
            var regGUTPeriodicidade = await gutperiodicidadeReader.Read(reg.GUTPeriodicidade, oCnn);
            if (regGUTPeriodicidade == null || regGUTPeriodicidade.Id != reg.GUTPeriodicidade)
            {
                throw new SGValidationException($"G U T Periodicidade não encontrado ({regGUTPeriodicidade?.Id}).");
            }
        }

        // Operador
        if (!reg.Operador.IsEmptyIDNumber())
        {
            var regOperador = await operadorReader.Read(reg.Operador, oCnn);
            if (regOperador == null || regOperador.Id != reg.Operador)
            {
                throw new SGValidationException($"Operador não encontrado ({regOperador?.Id}).");
            }
        }

        return true;
    }
}