// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class GraphValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFGraphFactory> _mockGraphFactory;
    private readonly Mock<IGraphReader> _mockReader;
    private readonly GraphValidation _validation;
    private readonly Mock<IGraphService> _mockGraphService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly GraphService _service;
    private readonly string _validUri = "test-uri";
    public GraphValidationTests()
    {
        _mockGraphFactory = new Mock<IFGraphFactory>();
        _mockReader = new Mock<IGraphReader>();
        _validation = new GraphValidation();
        _mockGraphService = new Mock<IGraphService>();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

#region Class Structure Tests
    [Fact]
    public void GraphValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IGraphValidation>();
    }

    [Fact]
    public void GraphValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(GraphValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void GraphValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(GraphValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.Graph CreateValidGraph()
    {
        return new Models.Graph
        {
            Id = 1,
            Tabela = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            TabelaId = 1
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockGraphService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterGraph>(), It.IsAny<string>())).ReturnsAsync(new List<GraphResponseAll>());
    // Setup other mocks but don't override the Graphs service mock
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockGraphService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterGraph>(), It.IsAny<string>())).ReturnsAsync(new List<GraphResponseAll>());
    // Setup other mocks but don't override the Graphs service mock
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var graph = new Models.Graph
        {
            Id = 1,
            Tabela = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            TabelaId = 1
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(graph, _mockGraphService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockGraphService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region ValidateReg Required Tabela Method Tests
    [Fact]
    public async Task ValidateReg_WithEmptyTabela_ShouldThrowSGValidationException()
    {
        // Arrange
        var graph = CreateValidGraph();
        graph.Tabela = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(graph, _mockGraphService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullTabela_ShouldThrowSGValidationException()
    {
        // Arrange
        var graph = CreateValidGraph();
        graph.Tabela = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(graph, _mockGraphService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataTabela_ShouldReturnTrue()
    {
        // Arrange
        var graph = CreateValidGraph();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(graph, _mockGraphService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceTabela_ShouldThrowSGValidationException()
    {
        // Arrange
        var graph = CreateValidGraph();
        graph.Tabela = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(graph, _mockGraphService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
#region ValidateReg Required GUID Method Tests
    [Fact]
    public async Task ValidateReg_WithEmptyGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var graph = CreateValidGraph();
        graph.GUID = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(graph, _mockGraphService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var graph = CreateValidGraph();
        graph.GUID = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(graph, _mockGraphService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataGUID_ShouldReturnTrue()
    {
        // Arrange
        var graph = CreateValidGraph();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(graph, _mockGraphService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var graph = CreateValidGraph();
        graph.GUID = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(graph, _mockGraphService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}