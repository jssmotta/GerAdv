// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class AlertasEnviadosService
{
    private (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterAlertasEnviados filtro)
    {
        var parameters = new List<SqlParameter>();
        if (filtro.Operador != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAlertasEnviadosDicInfo.Operador)}", filtro.Operador));
        }

        if (filtro.Alerta != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAlertasEnviadosDicInfo.Alerta)}", filtro.Alerta));
        }

        if (!filtro.DataAlertado.IsEmptyDX())
        {
            if (DateTime.TryParse(filtro.DataAlertado, out var dataParam))
                parameters.Add(new($"@{nameof(DBAlertasEnviadosDicInfo.DataAlertado)}", dataParam));
        }

        if (!filtro.DataAlertado_end.IsEmptyDX())
        {
            if (DateTime.TryParse(filtro.DataAlertado_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBAlertasEnviadosDicInfo.DataAlertado)}_end", dataParam));
        }

        if (filtro.Visualizado != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAlertasEnviadosDicInfo.Visualizado)}", filtro.Visualizado));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAlertasEnviadosDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
        }

        if (filtro.Codigo_filtro_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAlertasEnviadosDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
        }

        if (filtro.LogicalOperator.IsEmptyX() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        cWhere.Append(filtro.Operador.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAlertasEnviadosDicInfo.PTabelaNome}].[{DBAlertasEnviadosDicInfo.Operador}] = @{nameof(DBAlertasEnviadosDicInfo.Operador)}");
        cWhere.Append(filtro.Alerta.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAlertasEnviadosDicInfo.PTabelaNome}].[{DBAlertasEnviadosDicInfo.Alerta}] = @{nameof(DBAlertasEnviadosDicInfo.Alerta)}");
        if (!(filtro.DataAlertado.IsEmptyDX()) && filtro.DataAlertado_end.IsEmptyDX())
        {
            cWhere.Append(filtro.DataAlertado.IsEmptyDX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBAlertasEnviadosDicInfo.PTabelaNome}].[{DBAlertasEnviadosDicInfo.DataAlertado}], 103) = CONVERT(DATE, @{nameof(DBAlertasEnviadosDicInfo.DataAlertado)}, 103)");
        }
        else if (!(filtro.DataAlertado.IsEmptyDX()) && !(filtro.DataAlertado_end.IsEmptyDX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAlertasEnviadosDicInfo.PTabelaNome}].{DBAlertasEnviadosDicInfo.DataAlertado} BETWEEN @{nameof(DBAlertasEnviadosDicInfo.DataAlertado)} AND @{nameof(DBAlertasEnviadosDicInfo.DataAlertado)}_end");
        }

        cWhere.Append(filtro.Visualizado == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAlertasEnviadosDicInfo.PTabelaNome}].[{DBAlertasEnviadosDicInfo.Visualizado}] = @{nameof(DBAlertasEnviadosDicInfo.Visualizado)}");
        if (!(filtro.Codigo_filtro.IsEmptyX()) && filtro.Codigo_filtro_end.IsEmptyX())
        {
            cWhere.Append(filtro.Codigo_filtro.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAlertasEnviadosDicInfo.PTabelaNome}].[{DBAlertasEnviadosDicInfo.CampoCodigo}] = @{nameof(DBAlertasEnviadosDicInfo.CampoCodigo)}");
        }
        else if (!(filtro.Codigo_filtro.IsEmptyX()) && !(filtro.Codigo_filtro_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAlertasEnviadosDicInfo.PTabelaNome}].{DBAlertasEnviadosDicInfo.CampoCodigo} BETWEEN @{nameof(DBAlertasEnviadosDicInfo.CampoCodigo)} AND @{nameof(DBAlertasEnviadosDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private string ApplyWildCard(char wildcardChar, string value)
    {
        if (wildcardChar == '\0' || wildcardChar == ' ')
        {
            return value;
        }

        var result = $"{wildcardChar}{value.Replace(" ", wildcardChar.ToString())}{wildcardChar}";
        return result;
    }

    private string GetFilterHash(Filters.FilterAlertasEnviados? filtro)
    {
        if (filtro == null)
            return string.Empty;
        var json = JsonSerializer.Serialize(filtro);
        using var sha256 = SHA256.Create();
        var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(json));
        return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
    }

    private async Task<IEnumerable<AlertasEnviadosResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}