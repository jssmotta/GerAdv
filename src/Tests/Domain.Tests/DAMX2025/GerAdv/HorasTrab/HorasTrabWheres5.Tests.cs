// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class HorasTrabWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFHorasTrabFactory> _mockHorasTrabFactory;
    private readonly Mock<FHorasTrab> _mockFHorasTrab;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly HorasTrabWhere _horastrabWhere;
    public HorasTrabWhereTests()
    {
        _mockHorasTrabFactory = new Mock<IFHorasTrabFactory>();
        _mockFHorasTrab = new Mock<FHorasTrab>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _horastrabWhere = new HorasTrabWhere(_mockHorasTrabFactory.Object);
    }

    public void Dispose()
    {
        _mockHorasTrabFactory?.Reset();
        _mockFHorasTrab?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "27/05/2022")
        };
    }

    private void SetupMockFHorasTrab(int? IDContatoCRM = 1, bool? Honorario = false, int? IDAgenda = 1, string? Data = "27/05/2022", int? Cliente = 1, int? Status = 1, int? Processo = 1, int? Advogado = 1, int? Funcionario = 1, string? HrIni = "AAA", string? HrFim = "AAA", decimal? Tempo = 0m, decimal? Valor = 0m, string? OBS = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string? Anexo = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string? AnexoComp = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string? AnexoUNC = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", int? Servico = 1)
    {
        _mockFHorasTrab.Setup(f => f.FIDContatoCRM).Returns(IDContatoCRM ?? 0);
        _mockFHorasTrab.Setup(f => f.FHonorario).Returns(Honorario ?? false);
        _mockFHorasTrab.Setup(f => f.FIDAgenda).Returns(IDAgenda ?? 0);
        _mockFHorasTrab.Setup(f => f.FData).Returns(Data ?? string.Empty);
        _mockFHorasTrab.Setup(f => f.FCliente).Returns(Cliente ?? 0);
        _mockFHorasTrab.Setup(f => f.FStatus).Returns(Status ?? 0);
        _mockFHorasTrab.Setup(f => f.FProcesso).Returns(Processo ?? 0);
        _mockFHorasTrab.Setup(f => f.FAdvogado).Returns(Advogado ?? 0);
        _mockFHorasTrab.Setup(f => f.FFuncionario).Returns(Funcionario ?? 0);
        _mockFHorasTrab.Setup(f => f.FHrIni).Returns(HrIni ?? string.Empty);
        _mockFHorasTrab.Setup(f => f.FHrFim).Returns(HrFim ?? string.Empty);
        _mockFHorasTrab.Setup(f => f.FTempo).Returns(Tempo ?? 0m);
        _mockFHorasTrab.Setup(f => f.FValor).Returns(Valor ?? 0m);
        _mockFHorasTrab.Setup(f => f.FOBS).Returns(OBS ?? string.Empty);
        _mockFHorasTrab.Setup(f => f.FAnexo).Returns(Anexo ?? string.Empty);
        _mockFHorasTrab.Setup(f => f.FAnexoComp).Returns(AnexoComp ?? string.Empty);
        _mockFHorasTrab.Setup(f => f.FAnexoUNC).Returns(AnexoUNC ?? string.Empty);
        _mockFHorasTrab.Setup(f => f.FServico).Returns(Servico ?? 0);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFHorasTrabFactory>();
        // Act
        var horastrabWhere = new HorasTrabWhere(mockFactory.Object);
        // Assert
        horastrabWhere.Should().NotBeNull();
        horastrabWhere.Should().BeAssignableTo<IHorasTrabWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFHorasTrabFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new HorasTrabWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnHorasTrabResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFHorasTrab();
        _mockHorasTrabFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFHorasTrab.Object);
        // Act
        var result = _horastrabWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.IDContatoCRM.Should().Be(1);
        result.Honorario.Should().Be(false);
        result.IDAgenda.Should().Be(1);
        result.Data.Should().Be("27/05/2022");
        result.Cliente.Should().Be(1);
        result.Status.Should().Be(1);
        result.Processo.Should().Be(1);
        result.Advogado.Should().Be(1);
        result.Funcionario.Should().Be(1);
        result.HrIni.Should().Be("AAA");
        result.HrFim.Should().Be("AAA");
        result.Tempo.Should().Be(0m);
        result.Valor.Should().Be(0m);
        result.OBS.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.Anexo.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.AnexoComp.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.AnexoUNC.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Servico.Should().Be(1);
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFHorasTrab(IDContatoCRM: null, Honorario: null, IDAgenda: null, Data: null, Cliente: null, Status: null, Processo: null, Advogado: null, Funcionario: null, HrIni: null, HrFim: null, Tempo: null, Valor: null, OBS: null, Anexo: null, AnexoComp: null, AnexoUNC: null, Servico: null);
        _mockHorasTrabFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFHorasTrab.Object);
        // Act
        var result = _horastrabWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.IDContatoCRM.Should().Be(0);
        result.Honorario.Should().Be(false);
        result.IDAgenda.Should().Be(0);
        result.Data.Should().Be(string.Empty);
        result.Cliente.Should().Be(0);
        result.Status.Should().Be(0);
        result.Processo.Should().Be(0);
        result.Advogado.Should().Be(0);
        result.Funcionario.Should().Be(0);
        result.HrIni.Should().Be(string.Empty);
        result.HrFim.Should().Be(string.Empty);
        result.Tempo.Should().Be(0m);
        result.Valor.Should().Be(0m);
        result.OBS.Should().Be(string.Empty);
        result.Anexo.Should().Be(string.Empty);
        result.AnexoComp.Should().Be(string.Empty);
        result.AnexoUNC.Should().Be(string.Empty);
        result.Servico.Should().Be(0);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFHorasTrab();
        _mockHorasTrabFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFHorasTrab.Object);
        // Act
        var result = _horastrabWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockHorasTrabFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFHorasTrab();
        _mockHorasTrabFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFHorasTrab.Object);
        // Act
        var result = _horastrabWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockHorasTrabFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFHorasTrab();
        _mockHorasTrabFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFHorasTrab.Object);
        // Act
        var result = _horastrabWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockHorasTrabFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFHorasTrab();
        _mockHorasTrabFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFHorasTrab.Object);
        // Act
        _horastrabWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockHorasTrabFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFHorasTrabInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFHorasTrab.Setup(f => f.Dispose());
        SetupMockFHorasTrab();
        _mockHorasTrabFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFHorasTrab.Object);
        // Act
        _horastrabWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFHorasTrab.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockHorasTrabFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _horastrabWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFHorasTrab(IDContatoCRM: 1, Honorario: false, IDAgenda: 1, Data: "27/05/2022", Cliente: 1, Status: 1, Processo: 1, Advogado: 1, Funcionario: 1, HrIni: "AAA", HrFim: "AAA", Tempo: 0m, Valor: 0m, OBS: "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", Anexo: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", AnexoComp: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", AnexoUNC: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", Servico: 1);
        _mockHorasTrabFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFHorasTrab.Object);
        // Act
        var result = _horastrabWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.IDContatoCRM.Should().Be(1);
        result.Honorario.Should().Be(false);
        result.IDAgenda.Should().Be(1);
        result.Data.Should().Be("27/05/2022");
        result.Cliente.Should().Be(1);
        result.Status.Should().Be(1);
        result.Processo.Should().Be(1);
        result.Advogado.Should().Be(1);
        result.Funcionario.Should().Be(1);
        result.HrIni.Should().Be("AAA");
        result.HrFim.Should().Be("AAA");
        result.Tempo.Should().Be(0m);
        result.Valor.Should().Be(0m);
        result.OBS.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.Anexo.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.AnexoComp.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.AnexoUNC.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Servico.Should().Be(1);
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "Data = @{DBHorasTrabDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBHorasTrabDicInfo.CampoNome}", "27/05/2022"),
        };
        SetupMockFHorasTrab();
        _mockHorasTrabFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFHorasTrab.Object);
        // Act
        _horastrabWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockHorasTrabFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBHorasTrabDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }
#region DateTime Tests
#endregion
#endregion
}