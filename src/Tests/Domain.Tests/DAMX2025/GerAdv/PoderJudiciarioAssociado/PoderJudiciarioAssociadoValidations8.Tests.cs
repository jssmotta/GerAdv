// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class PoderJudiciarioAssociadoValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFPoderJudiciarioAssociadoFactory> _mockPoderJudiciarioAssociadoFactory;
    private readonly Mock<IPoderJudiciarioAssociadoReader> _mockReader;
    private readonly PoderJudiciarioAssociadoValidation _validation;
    private readonly Mock<IPoderJudiciarioAssociadoService> _mockPoderJudiciarioAssociadoService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IJusticaReader> _mockJusticaReader;
    private readonly Mock<IAreaReader> _mockAreaReader;
    private readonly Mock<ITribunalReader> _mockTribunalReader;
    private readonly Mock<IForoReader> _mockForoReader;
    private readonly Mock<ICidadeReader> _mockCidadeReader;
    private readonly PoderJudiciarioAssociadoService _service;
    private readonly string _validUri = "test-uri";
    public PoderJudiciarioAssociadoValidationTests()
    {
        _mockPoderJudiciarioAssociadoFactory = new Mock<IFPoderJudiciarioAssociadoFactory>();
        _mockReader = new Mock<IPoderJudiciarioAssociadoReader>();
        _validation = new PoderJudiciarioAssociadoValidation();
        _mockPoderJudiciarioAssociadoService = new Mock<IPoderJudiciarioAssociadoService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockJusticaReader = new Mock<IJusticaReader>();
        _mockAreaReader = new Mock<IAreaReader>();
        _mockTribunalReader = new Mock<ITribunalReader>();
        _mockForoReader = new Mock<IForoReader>();
        _mockCidadeReader = new Mock<ICidadeReader>();
    }

#region Class Structure Tests
    [Fact]
    public void PoderJudiciarioAssociadoValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IPoderJudiciarioAssociadoValidation>();
    }

    [Fact]
    public void PoderJudiciarioAssociadoValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(PoderJudiciarioAssociadoValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void PoderJudiciarioAssociadoValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(PoderJudiciarioAssociadoValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.PoderJudiciarioAssociado CreateValidPoderJudiciarioAssociado()
    {
        return new Models.PoderJudiciarioAssociado
        {
            Id = 1,
            Justica = 0,
            JusticaNome = "João",
            Area = 0,
            AreaNome = "João",
            Tribunal = 0,
            TribunalNome = "João",
            Foro = 0,
            ForoNome = "João",
            Cidade = 0,
            SubDivisaoNome = "João",
            CidadeNome = "João",
            SubDivisao = 0,
            Tipo = 0
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockPoderJudiciarioAssociadoService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterPoderJudiciarioAssociado>(), It.IsAny<string>())).ReturnsAsync(new List<PoderJudiciarioAssociadoResponseAll>());
        // Setup other mocks but don't override the PoderJudiciarioAssociados service mock
        _mockJusticaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.JusticaResponse { Id = id }));
        _mockAreaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.AreaResponse { Id = id }));
        _mockTribunalReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.TribunalResponse { Id = id }));
        _mockForoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.ForoResponse { Id = id }));
        _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.CidadeResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockPoderJudiciarioAssociadoService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterPoderJudiciarioAssociado>(), It.IsAny<string>())).ReturnsAsync(new List<PoderJudiciarioAssociadoResponseAll>());
        // Setup other mocks but don't override the PoderJudiciarioAssociados service mock
        _mockJusticaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.JusticaResponse { Id = 0 }));
        _mockAreaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.AreaResponse { Id = 0 }));
        _mockTribunalReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.TribunalResponse { Id = 0 }));
        _mockForoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.ForoResponse { Id = 0 }));
        _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.CidadeResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var poderjudiciarioassociado = new Models.PoderJudiciarioAssociado
        {
            Id = 1,
            JusticaNome = null,
            AreaNome = null,
            TribunalNome = null,
            ForoNome = null,
            SubDivisaoNome = null,
            CidadeNome = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(poderjudiciarioassociado, _mockPoderJudiciarioAssociadoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _mockTribunalReader.Object, _mockForoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockPoderJudiciarioAssociadoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _mockTribunalReader.Object, _mockForoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region Foreign Key Validation Tests - Justica
    [Fact]
    public async Task ValidateReg_WithInvalidJustica_ShouldThrowSGValidationException()
    {
        // Arrange
        var poderjudiciarioassociado = CreateValidPoderJudiciarioAssociado();
        poderjudiciarioassociado.Justica = 999;
        _mockJusticaReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.JusticaResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(poderjudiciarioassociado, _mockPoderJudiciarioAssociadoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _mockTribunalReader.Object, _mockForoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedJusticaId_ShouldThrowSGValidationException()
    {
        // Arrange
        var poderjudiciarioassociado = CreateValidPoderJudiciarioAssociado();
        poderjudiciarioassociado.Justica = 999;
        var reg888 = new Models.Response.JusticaResponse
        {
            Id = 888
        }; // Different ID
        _mockJusticaReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(poderjudiciarioassociado, _mockPoderJudiciarioAssociadoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _mockTribunalReader.Object, _mockForoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidJustica_ShouldPass()
    {
        // Arrange
        var poderjudiciarioassociado = CreateValidPoderJudiciarioAssociado();
        poderjudiciarioassociado.Justica = 123;
        var reg123 = new Models.Response.JusticaResponse
        {
            Id = 123
        };
        _mockJusticaReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(poderjudiciarioassociado, _mockPoderJudiciarioAssociadoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _mockTribunalReader.Object, _mockForoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyJustica_ShouldPass()
    {
        // Arrange
        var poderjudiciarioassociado = CreateValidPoderJudiciarioAssociado();
        poderjudiciarioassociado.Justica = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(poderjudiciarioassociado, _mockPoderJudiciarioAssociadoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _mockTribunalReader.Object, _mockForoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockJusticaReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - Area
    [Fact]
    public async Task ValidateReg_WithInvalidArea_ShouldThrowSGValidationException()
    {
        // Arrange
        var poderjudiciarioassociado = CreateValidPoderJudiciarioAssociado();
        poderjudiciarioassociado.Area = 999;
        _mockAreaReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.AreaResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(poderjudiciarioassociado, _mockPoderJudiciarioAssociadoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _mockTribunalReader.Object, _mockForoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedAreaId_ShouldThrowSGValidationException()
    {
        // Arrange
        var poderjudiciarioassociado = CreateValidPoderJudiciarioAssociado();
        poderjudiciarioassociado.Area = 999;
        var reg888 = new Models.Response.AreaResponse
        {
            Id = 888
        }; // Different ID
        _mockAreaReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(poderjudiciarioassociado, _mockPoderJudiciarioAssociadoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _mockTribunalReader.Object, _mockForoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidArea_ShouldPass()
    {
        // Arrange
        var poderjudiciarioassociado = CreateValidPoderJudiciarioAssociado();
        poderjudiciarioassociado.Area = 123;
        var reg123 = new Models.Response.AreaResponse
        {
            Id = 123
        };
        _mockAreaReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(poderjudiciarioassociado, _mockPoderJudiciarioAssociadoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _mockTribunalReader.Object, _mockForoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyArea_ShouldPass()
    {
        // Arrange
        var poderjudiciarioassociado = CreateValidPoderJudiciarioAssociado();
        poderjudiciarioassociado.Area = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(poderjudiciarioassociado, _mockPoderJudiciarioAssociadoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _mockTribunalReader.Object, _mockForoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockAreaReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - Tribunal
    [Fact]
    public async Task ValidateReg_WithInvalidTribunal_ShouldThrowSGValidationException()
    {
        // Arrange
        var poderjudiciarioassociado = CreateValidPoderJudiciarioAssociado();
        poderjudiciarioassociado.Tribunal = 999;
        _mockTribunalReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.TribunalResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(poderjudiciarioassociado, _mockPoderJudiciarioAssociadoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _mockTribunalReader.Object, _mockForoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedTribunalId_ShouldThrowSGValidationException()
    {
        // Arrange
        var poderjudiciarioassociado = CreateValidPoderJudiciarioAssociado();
        poderjudiciarioassociado.Tribunal = 999;
        var reg888 = new Models.Response.TribunalResponse
        {
            Id = 888
        }; // Different ID
        _mockTribunalReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(poderjudiciarioassociado, _mockPoderJudiciarioAssociadoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _mockTribunalReader.Object, _mockForoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidTribunal_ShouldPass()
    {
        // Arrange
        var poderjudiciarioassociado = CreateValidPoderJudiciarioAssociado();
        poderjudiciarioassociado.Tribunal = 123;
        var reg123 = new Models.Response.TribunalResponse
        {
            Id = 123
        };
        _mockTribunalReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(poderjudiciarioassociado, _mockPoderJudiciarioAssociadoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _mockTribunalReader.Object, _mockForoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyTribunal_ShouldPass()
    {
        // Arrange
        var poderjudiciarioassociado = CreateValidPoderJudiciarioAssociado();
        poderjudiciarioassociado.Tribunal = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(poderjudiciarioassociado, _mockPoderJudiciarioAssociadoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _mockTribunalReader.Object, _mockForoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockTribunalReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - Foro
    [Fact]
    public async Task ValidateReg_WithInvalidForo_ShouldThrowSGValidationException()
    {
        // Arrange
        var poderjudiciarioassociado = CreateValidPoderJudiciarioAssociado();
        poderjudiciarioassociado.Foro = 999;
        _mockForoReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.ForoResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(poderjudiciarioassociado, _mockPoderJudiciarioAssociadoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _mockTribunalReader.Object, _mockForoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedForoId_ShouldThrowSGValidationException()
    {
        // Arrange
        var poderjudiciarioassociado = CreateValidPoderJudiciarioAssociado();
        poderjudiciarioassociado.Foro = 999;
        var reg888 = new Models.Response.ForoResponse
        {
            Id = 888
        }; // Different ID
        _mockForoReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(poderjudiciarioassociado, _mockPoderJudiciarioAssociadoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _mockTribunalReader.Object, _mockForoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidForo_ShouldPass()
    {
        // Arrange
        var poderjudiciarioassociado = CreateValidPoderJudiciarioAssociado();
        poderjudiciarioassociado.Foro = 123;
        var reg123 = new Models.Response.ForoResponse
        {
            Id = 123
        };
        _mockForoReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(poderjudiciarioassociado, _mockPoderJudiciarioAssociadoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _mockTribunalReader.Object, _mockForoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyForo_ShouldPass()
    {
        // Arrange
        var poderjudiciarioassociado = CreateValidPoderJudiciarioAssociado();
        poderjudiciarioassociado.Foro = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(poderjudiciarioassociado, _mockPoderJudiciarioAssociadoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _mockTribunalReader.Object, _mockForoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockForoReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - Cidade
    [Fact]
    public async Task ValidateReg_WithInvalidCidade_ShouldThrowSGValidationException()
    {
        // Arrange
        var poderjudiciarioassociado = CreateValidPoderJudiciarioAssociado();
        poderjudiciarioassociado.Cidade = 999;
        _mockCidadeReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.CidadeResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(poderjudiciarioassociado, _mockPoderJudiciarioAssociadoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _mockTribunalReader.Object, _mockForoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedCidadeId_ShouldThrowSGValidationException()
    {
        // Arrange
        var poderjudiciarioassociado = CreateValidPoderJudiciarioAssociado();
        poderjudiciarioassociado.Cidade = 999;
        var reg888 = new Models.Response.CidadeResponse
        {
            Id = 888
        }; // Different ID
        _mockCidadeReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(poderjudiciarioassociado, _mockPoderJudiciarioAssociadoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _mockTribunalReader.Object, _mockForoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidCidade_ShouldPass()
    {
        // Arrange
        var poderjudiciarioassociado = CreateValidPoderJudiciarioAssociado();
        poderjudiciarioassociado.Cidade = 123;
        var reg123 = new Models.Response.CidadeResponse
        {
            Id = 123
        };
        _mockCidadeReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(poderjudiciarioassociado, _mockPoderJudiciarioAssociadoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _mockTribunalReader.Object, _mockForoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyCidade_ShouldPass()
    {
        // Arrange
        var poderjudiciarioassociado = CreateValidPoderJudiciarioAssociado();
        poderjudiciarioassociado.Cidade = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(poderjudiciarioassociado, _mockPoderJudiciarioAssociadoService.Object, _mockJusticaReader.Object, _mockAreaReader.Object, _mockTribunalReader.Object, _mockForoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockCidadeReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}