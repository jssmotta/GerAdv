// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IProProcuradoresValidation
{
    Task<bool> ValidateReg(Models.ProProcuradores reg, IProProcuradoresService service, IAdvogadosReader advogadosReader, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
    Task<bool> CanDelete(int? id, IProProcuradoresService service, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
}

public class ProProcuradoresValidation : IProProcuradoresValidation
{
    public async Task<bool> CanDelete(int? id, IProProcuradoresService service, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (id == null || id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id ?? default, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.ProProcuradores reg)
    {
        if (reg.Nome != null && reg.Nome.Length > DBProProcuradoresDicInfo.PapNome.FTamanho)
            throw new SGValidationException($"Nome deve ter no máximo {DBProProcuradoresDicInfo.PapNome.FTamanho} caracteres.");
        if (reg.GUID != null && reg.GUID.Length > DBProProcuradoresDicInfo.PapGUID.FTamanho)
            throw new SGValidationException($"GUID deve ter no máximo {DBProProcuradoresDicInfo.PapGUID.FTamanho} caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.ProProcuradores reg, IProProcuradoresService service, IAdvogadosReader advogadosReader, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Nome))
            throw new SGValidationException("Nome é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        // Advogados
        if (!reg.Advogado.IsEmptyIDNumber())
        {
            var regAdvogados = await advogadosReader.Read(reg.Advogado, oCnn);
            if (regAdvogados == null || regAdvogados.Id != reg.Advogado)
            {
                throw new SGValidationException($"Advogados não encontrado ({regAdvogados?.Id}).");
            }
        }

        return true;
    }
}