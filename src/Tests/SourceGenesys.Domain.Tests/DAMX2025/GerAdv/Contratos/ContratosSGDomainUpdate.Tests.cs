// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// ============================================
// ARQUIVO: DBUpdateTests.cs.txt (Principal)
// ============================================
namespace MenphisSI.GerAdv.Tests;
public class DBContratosUpdate : IDisposable
{
    private readonly DBContratos _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBContratosUpdate()
    {
        _instance = new DBContratos();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void DefaultConstructor_ShouldCreateInstance_WithDefaultValues()
    {
        // Act
        var contratos = new DBContratos();
        // Assert
        contratos.Should().NotBeNull();
        contratos.ITabelaName().Should().Be("Contratos");
        contratos.ID.Should().Be(0);
    }

    [Fact]
    public void AllProperties_WithValidValues_ShouldSetCorrectly()
    {
        // Arrange
        var contratos = new DBContratos
        {
            FGUID = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FProtestar = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FJuros = "AAAAA",
            FDOCUMENTO = "AAAAAAAAAAAAAAA",
            FEMail1 = "menphis@menphis.com.br",
            FEMail2 = "menphis@menphis.com.br",
            FEMail3 = "menphis@menphis.com.br",
            FPessoa1 = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FPessoa2 = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FPessoa3 = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FOBS = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FChaveContrato = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FMulta = "AAAAAAAAAA",
        };
        // Assert - All properties should be set contratos.FGUID.Should().Be( "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        contratos.FProtestar.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        contratos.FJuros.Should().Be("AAAAA");
        contratos.FDOCUMENTO.Should().Be("AAAAAAAAAAAAAAA");
        contratos.FEMail1.Should().Be("menphis@menphis.com.br");
        contratos.FEMail2.Should().Be("menphis@menphis.com.br");
        contratos.FEMail3.Should().Be("menphis@menphis.com.br");
        contratos.FPessoa1.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        contratos.FPessoa2.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        contratos.FPessoa3.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        contratos.FOBS.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        contratos.FChaveContrato.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        contratos.FMulta.Should().Be("AAAAAAAAAA");
    }

    [Fact]
    public void StringProperties_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var contratos = new DBContratos();
        var longString = new string ('X', 300);
        contratos.FGUID = longString; // MAX: 100
        contratos.FProtestar = longString; // MAX: 50
        contratos.FJuros = longString; // MAX: 5
        contratos.FDOCUMENTO = longString; // MAX: 15
        contratos.FPessoa1 = longString; // MAX: 100
        contratos.FPessoa2 = longString; // MAX: 100
        contratos.FPessoa3 = longString; // MAX: 100
        contratos.FChaveContrato = longString; // MAX: 50
        contratos.FMulta = longString; // MAX: 10
        // Assert - All properties should be set contratos.FGUID.Should().HaveLength(100);
        contratos.FProtestar.Should().HaveLength(50);
        contratos.FJuros.Should().HaveLength(5);
        contratos.FDOCUMENTO.Should().HaveLength(15);
        contratos.FPessoa1.Should().HaveLength(100);
        contratos.FPessoa2.Should().HaveLength(100);
        contratos.FPessoa3.Should().HaveLength(100);
        contratos.FChaveContrato.Should().HaveLength(50);
        contratos.FMulta.Should().HaveLength(10);
    }

    [Theory]
    [InlineData(1000.50)]
    [InlineData(0)]
    [InlineData(-100.25)]
    public void FValor_Property_ShouldAcceptDecimalValues(decimal Valor)
    {
        // Arrange
        var contratos = new DBContratos();
        // Act
        contratos.FValor = Valor;
        // Assert
        contratos.FValor.Should().Be(Valor);
    }

    [Theory]
    [InlineData(1000.50)]
    [InlineData(0)]
    [InlineData(-100.25)]
    public void FPercEscritorio_Property_ShouldAcceptDecimalValues(decimal PercEscritorio)
    {
        // Arrange
        var contratos = new DBContratos();
        // Act
        contratos.FPercEscritorio = PercEscritorio;
        // Assert
        contratos.FPercEscritorio.Should().Be(PercEscritorio);
    }

    [Theory]
    [InlineData(1000.50)]
    [InlineData(0)]
    [InlineData(-100.25)]
    public void FValorConsultoria_Property_ShouldAcceptDecimalValues(decimal ValorConsultoria)
    {
        // Arrange
        var contratos = new DBContratos();
        // Act
        contratos.FValorConsultoria = ValorConsultoria;
        // Assert
        contratos.FValorConsultoria.Should().Be(ValorConsultoria);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FProtestar_Property_ShouldAcceptValidNames(string Protestar)
    {
        // Arrange
        var contratos = new DBContratos
        {
            // Act
            FProtestar = Protestar
        };
        // Assert
        contratos.FProtestar.Should().Be(Protestar);
    }

    [Fact]
    public void FProtestar_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var contratos = new DBContratos
        {
            // Act
            FProtestar = null
        };
        // Assert
        contratos.FProtestar.Should().Be(string.Empty);
    }

    [Fact]
    public void FProtestar_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var contratos = new DBContratos();
        var longName = new string ('A', 50 + 10); // Exceeds 50 character limit
        // Act
        contratos.FProtestar = longName;
        // Assert
        contratos.FProtestar.Should().HaveLength(50);
    }

    [Fact]
    public void FProtestar_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FProtestar = null;
        // Act
        var result = _instance.FProtestar;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FProtestar_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FProtestar = expectedValue;
        // Act
        var result = _instance.FProtestar;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FProtestar_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFProtestar", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FProtestar = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FProtestar);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FProtestar_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFProtestar", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FProtestar = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FProtestar);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FProtestar_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFProtestar", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FProtestar = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FProtestar);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FProtestar_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFProtestar", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FProtestar = value;
        // Act
        _instance.FProtestar = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FProtestar_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFProtestar", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FProtestar = "Original Value";
        // Act
        _instance.FProtestar = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FProtestar_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFProtestar", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FProtestar = "First Value";
        // Act
        _instance.FProtestar = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FProtestar_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFProtestar", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FProtestar = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FProtestar);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FProtestar_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FProtestar = input;
        // Assert
        Assert.Equal(expected, _instance.FProtestar);
    }

    [Fact]
    public void FProtestar_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFProtestar", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FProtestar = null;
        // Act
        _instance.FProtestar = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FProtestar_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFProtestar", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FProtestar = "Existing Value";
        // Act
        _instance.FProtestar = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAA")]
    [InlineData("BB")]
    [InlineData("CCCc")]
    public void FJuros_Property_ShouldAcceptValidNames(string Juros)
    {
        // Arrange
        var contratos = new DBContratos
        {
            // Act
            FJuros = Juros
        };
        // Assert
        contratos.FJuros.Should().Be(Juros);
    }

    [Fact]
    public void FJuros_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var contratos = new DBContratos
        {
            // Act
            FJuros = null
        };
        // Assert
        contratos.FJuros.Should().Be(string.Empty);
    }

    [Fact]
    public void FJuros_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var contratos = new DBContratos();
        var longName = new string ('A', 5 + 10); // Exceeds 5 character limit
        // Act
        contratos.FJuros = longName;
        // Assert
        contratos.FJuros.Should().HaveLength(5);
    }

    [Fact]
    public void FJuros_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FJuros = null;
        // Act
        var result = _instance.FJuros;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FJuros_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test ".Trim();
        _instance.FJuros = expectedValue;
        // Act
        var result = _instance.FJuros;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FJuros_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFJuros", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FJuros = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FJuros);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FJuros_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFJuros", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FJuros = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FJuros);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FJuros_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFJuros", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAA  ";
        var expectedValue = "AAA";
        // Act
        _instance.FJuros = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FJuros);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FJuros_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFJuros", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FJuros = value;
        // Act
        _instance.FJuros = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FJuros_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFJuros", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FJuros = "Original Value";
        // Act
        _instance.FJuros = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FJuros_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFJuros", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FJuros = "First Value";
        // Act
        _instance.FJuros = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FJuros_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFJuros", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FJuros = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FJuros);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAA", "AAA")]
    [InlineData("  BB  ", "BB")]
    [InlineData("CCCc", "CCCc")]
    public void FJuros_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FJuros = input;
        // Assert
        Assert.Equal(expected, _instance.FJuros);
    }

    [Fact]
    public void FJuros_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFJuros", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FJuros = null;
        // Act
        _instance.FJuros = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FJuros_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFJuros", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FJuros = "Existing Value";
        // Act
        _instance.FJuros = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData(1000.50)]
    [InlineData(0)]
    [InlineData(-100.25)]
    public void FValorRealizavel_Property_ShouldAcceptDecimalValues(decimal ValorRealizavel)
    {
        // Arrange
        var contratos = new DBContratos();
        // Act
        contratos.FValorRealizavel = ValorRealizavel;
        // Assert
        contratos.FValorRealizavel.Should().Be(ValorRealizavel);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCc")]
    public void FDOCUMENTO_Property_ShouldAcceptValidNames(string DOCUMENTO)
    {
        // Arrange
        var contratos = new DBContratos
        {
            // Act
            FDOCUMENTO = DOCUMENTO
        };
        // Assert
        contratos.FDOCUMENTO.Should().Be(DOCUMENTO);
    }

    [Fact]
    public void FDOCUMENTO_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var contratos = new DBContratos
        {
            // Act
            FDOCUMENTO = null
        };
        // Assert
        contratos.FDOCUMENTO.Should().Be(string.Empty);
    }

    [Fact]
    public void FDOCUMENTO_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var contratos = new DBContratos();
        var longName = new string ('A', 15 + 10); // Exceeds 15 character limit
        // Act
        contratos.FDOCUMENTO = longName;
        // Assert
        contratos.FDOCUMENTO.Should().HaveLength(15);
    }

    [Fact]
    public void FDOCUMENTO_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FDOCUMENTO = null;
        // Act
        var result = _instance.FDOCUMENTO;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FDOCUMENTO_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FDOCUMENTO = expectedValue;
        // Act
        var result = _instance.FDOCUMENTO;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FDOCUMENTO_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFDOCUMENTO", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FDOCUMENTO = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FDOCUMENTO);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FDOCUMENTO_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFDOCUMENTO", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FDOCUMENTO = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FDOCUMENTO);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FDOCUMENTO_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFDOCUMENTO", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAA";
        // Act
        _instance.FDOCUMENTO = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FDOCUMENTO);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FDOCUMENTO_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFDOCUMENTO", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FDOCUMENTO = value;
        // Act
        _instance.FDOCUMENTO = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FDOCUMENTO_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFDOCUMENTO", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FDOCUMENTO = "Original Value";
        // Act
        _instance.FDOCUMENTO = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FDOCUMENTO_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFDOCUMENTO", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FDOCUMENTO = "First Value";
        // Act
        _instance.FDOCUMENTO = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FDOCUMENTO_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFDOCUMENTO", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FDOCUMENTO = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FDOCUMENTO);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAA", "AAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBB  ", "BBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCc", "CCCCCCCCCCCCCc")]
    public void FDOCUMENTO_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FDOCUMENTO = input;
        // Assert
        Assert.Equal(expected, _instance.FDOCUMENTO);
    }

    [Fact]
    public void FDOCUMENTO_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFDOCUMENTO", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FDOCUMENTO = null;
        // Act
        _instance.FDOCUMENTO = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FDOCUMENTO_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFDOCUMENTO", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FDOCUMENTO = "Existing Value";
        // Act
        _instance.FDOCUMENTO = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("menphis@menphis.com.br")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FEMail1_Property_ShouldAcceptValidNames(string EMail1)
    {
        // Arrange
        var contratos = new DBContratos
        {
            // Act
            FEMail1 = EMail1
        };
        // Assert
        contratos.FEMail1.Should().Be(EMail1);
    }

    [Fact]
    public void FEMail1_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var contratos = new DBContratos
        {
            // Act
            FEMail1 = null
        };
        // Assert
        contratos.FEMail1.Should().Be(string.Empty);
    }

    [Fact]
    public void FEMail1_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var contratos = new DBContratos();
        var longName = new string ('A', 300 + 10); // Exceeds 300 character limit
        // Act
        contratos.FEMail1 = longName;
        // Assert
        contratos.FEMail1.Should().HaveLength(300);
    }

    [Fact]
    public void FEMail1_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FEMail1 = null;
        // Act
        var result = _instance.FEMail1;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FEMail1_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FEMail1 = expectedValue;
        // Act
        var result = _instance.FEMail1;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FEMail1_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFEMail1", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEMail1 = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FEMail1);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEMail1_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFEMail1", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEMail1 = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FEMail1);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FEMail1_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFEMail1", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  menphis@menphis.com.br  ";
        var expectedValue = "menphis@menphis.com.br";
        // Act
        _instance.FEMail1 = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FEMail1);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEMail1_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFEMail1", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FEMail1 = value;
        // Act
        _instance.FEMail1 = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEMail1_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFEMail1", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEMail1 = "Original Value";
        // Act
        _instance.FEMail1 = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEMail1_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFEMail1", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEMail1 = "First Value";
        // Act
        _instance.FEMail1 = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEMail1_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFEMail1", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEMail1 = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FEMail1);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("menphis@menphis.com.br", "menphis@menphis.com.br")]
    [InlineData
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FEMail1_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FEMail1 = input;
        // Assert
        Assert.Equal(expected, _instance.FEMail1);
    }

    [Fact]
    public void FEMail1_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFEMail1", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEMail1 = null;
        // Act
        _instance.FEMail1 = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEMail1_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFEMail1", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEMail1 = "Existing Value";
        // Act
        _instance.FEMail1 = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("menphis@menphis.com.br")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FEMail2_Property_ShouldAcceptValidNames(string EMail2)
    {
        // Arrange
        var contratos = new DBContratos
        {
            // Act
            FEMail2 = EMail2
        };
        // Assert
        contratos.FEMail2.Should().Be(EMail2);
    }

    [Fact]
    public void FEMail2_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var contratos = new DBContratos
        {
            // Act
            FEMail2 = null
        };
        // Assert
        contratos.FEMail2.Should().Be(string.Empty);
    }

    [Fact]
    public void FEMail2_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var contratos = new DBContratos();
        var longName = new string ('A', 300 + 10); // Exceeds 300 character limit
        // Act
        contratos.FEMail2 = longName;
        // Assert
        contratos.FEMail2.Should().HaveLength(300);
    }

    [Fact]
    public void FEMail2_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FEMail2 = null;
        // Act
        var result = _instance.FEMail2;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FEMail2_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FEMail2 = expectedValue;
        // Act
        var result = _instance.FEMail2;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FEMail2_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFEMail2", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEMail2 = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FEMail2);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEMail2_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFEMail2", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEMail2 = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FEMail2);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FEMail2_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFEMail2", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  menphis@menphis.com.br  ";
        var expectedValue = "menphis@menphis.com.br";
        // Act
        _instance.FEMail2 = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FEMail2);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEMail2_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFEMail2", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FEMail2 = value;
        // Act
        _instance.FEMail2 = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEMail2_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFEMail2", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEMail2 = "Original Value";
        // Act
        _instance.FEMail2 = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEMail2_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFEMail2", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEMail2 = "First Value";
        // Act
        _instance.FEMail2 = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEMail2_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFEMail2", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEMail2 = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FEMail2);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("menphis@menphis.com.br", "menphis@menphis.com.br")]
    [InlineData
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FEMail2_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FEMail2 = input;
        // Assert
        Assert.Equal(expected, _instance.FEMail2);
    }

    [Fact]
    public void FEMail2_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFEMail2", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEMail2 = null;
        // Act
        _instance.FEMail2 = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEMail2_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFEMail2", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEMail2 = "Existing Value";
        // Act
        _instance.FEMail2 = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("menphis@menphis.com.br")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FEMail3_Property_ShouldAcceptValidNames(string EMail3)
    {
        // Arrange
        var contratos = new DBContratos
        {
            // Act
            FEMail3 = EMail3
        };
        // Assert
        contratos.FEMail3.Should().Be(EMail3);
    }

    [Fact]
    public void FEMail3_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var contratos = new DBContratos
        {
            // Act
            FEMail3 = null
        };
        // Assert
        contratos.FEMail3.Should().Be(string.Empty);
    }

    [Fact]
    public void FEMail3_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var contratos = new DBContratos();
        var longName = new string ('A', 300 + 10); // Exceeds 300 character limit
        // Act
        contratos.FEMail3 = longName;
        // Assert
        contratos.FEMail3.Should().HaveLength(300);
    }

    [Fact]
    public void FEMail3_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FEMail3 = null;
        // Act
        var result = _instance.FEMail3;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FEMail3_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FEMail3 = expectedValue;
        // Act
        var result = _instance.FEMail3;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FEMail3_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFEMail3", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEMail3 = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FEMail3);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEMail3_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFEMail3", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEMail3 = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FEMail3);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FEMail3_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFEMail3", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  menphis@menphis.com.br  ";
        var expectedValue = "menphis@menphis.com.br";
        // Act
        _instance.FEMail3 = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FEMail3);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEMail3_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFEMail3", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FEMail3 = value;
        // Act
        _instance.FEMail3 = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEMail3_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFEMail3", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEMail3 = "Original Value";
        // Act
        _instance.FEMail3 = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEMail3_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFEMail3", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEMail3 = "First Value";
        // Act
        _instance.FEMail3 = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEMail3_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFEMail3", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEMail3 = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FEMail3);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("menphis@menphis.com.br", "menphis@menphis.com.br")]
    [InlineData
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FEMail3_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FEMail3 = input;
        // Assert
        Assert.Equal(expected, _instance.FEMail3);
    }

    [Fact]
    public void FEMail3_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFEMail3", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEMail3 = null;
        // Act
        _instance.FEMail3 = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEMail3_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFEMail3", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEMail3 = "Existing Value";
        // Act
        _instance.FEMail3 = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FPessoa1_Property_ShouldAcceptValidNames(string Pessoa1)
    {
        // Arrange
        var contratos = new DBContratos
        {
            // Act
            FPessoa1 = Pessoa1
        };
        // Assert
        contratos.FPessoa1.Should().Be(Pessoa1);
    }

    [Fact]
    public void FPessoa1_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var contratos = new DBContratos
        {
            // Act
            FPessoa1 = null
        };
        // Assert
        contratos.FPessoa1.Should().Be(string.Empty);
    }

    [Fact]
    public void FPessoa1_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var contratos = new DBContratos();
        var longName = new string ('A', 100 + 10); // Exceeds 100 character limit
        // Act
        contratos.FPessoa1 = longName;
        // Assert
        contratos.FPessoa1.Should().HaveLength(100);
    }

    [Fact]
    public void FPessoa1_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FPessoa1 = null;
        // Act
        var result = _instance.FPessoa1;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FPessoa1_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FPessoa1 = expectedValue;
        // Act
        var result = _instance.FPessoa1;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FPessoa1_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFPessoa1", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FPessoa1 = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FPessoa1);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPessoa1_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFPessoa1", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FPessoa1 = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FPessoa1);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FPessoa1_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFPessoa1", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FPessoa1 = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FPessoa1);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPessoa1_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFPessoa1", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FPessoa1 = value;
        // Act
        _instance.FPessoa1 = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPessoa1_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFPessoa1", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPessoa1 = "Original Value";
        // Act
        _instance.FPessoa1 = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPessoa1_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFPessoa1", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPessoa1 = "First Value";
        // Act
        _instance.FPessoa1 = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPessoa1_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFPessoa1", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FPessoa1 = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FPessoa1);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FPessoa1_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FPessoa1 = input;
        // Assert
        Assert.Equal(expected, _instance.FPessoa1);
    }

    [Fact]
    public void FPessoa1_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFPessoa1", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPessoa1 = null;
        // Act
        _instance.FPessoa1 = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPessoa1_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFPessoa1", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPessoa1 = "Existing Value";
        // Act
        _instance.FPessoa1 = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FPessoa2_Property_ShouldAcceptValidNames(string Pessoa2)
    {
        // Arrange
        var contratos = new DBContratos
        {
            // Act
            FPessoa2 = Pessoa2
        };
        // Assert
        contratos.FPessoa2.Should().Be(Pessoa2);
    }

    [Fact]
    public void FPessoa2_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var contratos = new DBContratos
        {
            // Act
            FPessoa2 = null
        };
        // Assert
        contratos.FPessoa2.Should().Be(string.Empty);
    }

    [Fact]
    public void FPessoa2_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var contratos = new DBContratos();
        var longName = new string ('A', 100 + 10); // Exceeds 100 character limit
        // Act
        contratos.FPessoa2 = longName;
        // Assert
        contratos.FPessoa2.Should().HaveLength(100);
    }

    [Fact]
    public void FPessoa2_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FPessoa2 = null;
        // Act
        var result = _instance.FPessoa2;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FPessoa2_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FPessoa2 = expectedValue;
        // Act
        var result = _instance.FPessoa2;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FPessoa2_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFPessoa2", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FPessoa2 = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FPessoa2);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPessoa2_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFPessoa2", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FPessoa2 = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FPessoa2);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FPessoa2_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFPessoa2", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FPessoa2 = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FPessoa2);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPessoa2_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFPessoa2", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FPessoa2 = value;
        // Act
        _instance.FPessoa2 = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPessoa2_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFPessoa2", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPessoa2 = "Original Value";
        // Act
        _instance.FPessoa2 = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPessoa2_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFPessoa2", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPessoa2 = "First Value";
        // Act
        _instance.FPessoa2 = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPessoa2_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFPessoa2", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FPessoa2 = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FPessoa2);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FPessoa2_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FPessoa2 = input;
        // Assert
        Assert.Equal(expected, _instance.FPessoa2);
    }

    [Fact]
    public void FPessoa2_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFPessoa2", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPessoa2 = null;
        // Act
        _instance.FPessoa2 = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPessoa2_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFPessoa2", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPessoa2 = "Existing Value";
        // Act
        _instance.FPessoa2 = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FPessoa3_Property_ShouldAcceptValidNames(string Pessoa3)
    {
        // Arrange
        var contratos = new DBContratos
        {
            // Act
            FPessoa3 = Pessoa3
        };
        // Assert
        contratos.FPessoa3.Should().Be(Pessoa3);
    }

    [Fact]
    public void FPessoa3_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var contratos = new DBContratos
        {
            // Act
            FPessoa3 = null
        };
        // Assert
        contratos.FPessoa3.Should().Be(string.Empty);
    }

    [Fact]
    public void FPessoa3_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var contratos = new DBContratos();
        var longName = new string ('A', 100 + 10); // Exceeds 100 character limit
        // Act
        contratos.FPessoa3 = longName;
        // Assert
        contratos.FPessoa3.Should().HaveLength(100);
    }

    [Fact]
    public void FPessoa3_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FPessoa3 = null;
        // Act
        var result = _instance.FPessoa3;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FPessoa3_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FPessoa3 = expectedValue;
        // Act
        var result = _instance.FPessoa3;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FPessoa3_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFPessoa3", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FPessoa3 = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FPessoa3);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPessoa3_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFPessoa3", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FPessoa3 = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FPessoa3);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FPessoa3_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFPessoa3", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FPessoa3 = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FPessoa3);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPessoa3_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFPessoa3", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FPessoa3 = value;
        // Act
        _instance.FPessoa3 = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPessoa3_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFPessoa3", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPessoa3 = "Original Value";
        // Act
        _instance.FPessoa3 = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPessoa3_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFPessoa3", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPessoa3 = "First Value";
        // Act
        _instance.FPessoa3 = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPessoa3_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFPessoa3", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FPessoa3 = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FPessoa3);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FPessoa3_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FPessoa3 = input;
        // Assert
        Assert.Equal(expected, _instance.FPessoa3);
    }

    [Fact]
    public void FPessoa3_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFPessoa3", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPessoa3 = null;
        // Act
        _instance.FPessoa3 = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPessoa3_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFPessoa3", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPessoa3 = "Existing Value";
        // Act
        _instance.FPessoa3 = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FOBS_Property_ShouldAcceptValidNames(string OBS)
    {
        // Arrange
        var contratos = new DBContratos
        {
            // Act
            FOBS = OBS
        };
        // Assert
        contratos.FOBS.Should().Be(OBS);
    }

    [Fact]
    public void FOBS_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var contratos = new DBContratos
        {
            // Act
            FOBS = null
        };
        // Assert
        contratos.FOBS.Should().Be(string.Empty);
    }

    [Fact]
    public void FOBS_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FOBS = null;
        // Act
        var result = _instance.FOBS;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FOBS_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FOBS = expectedValue;
        // Act
        var result = _instance.FOBS;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FOBS_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFOBS", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FOBS = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FOBS);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FOBS_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFOBS", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FOBS = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FOBS);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FOBS_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFOBS", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  ";
        var expectedValue = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM";
        // Act
        _instance.FOBS = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FOBS);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FOBS_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFOBS", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FOBS = value;
        // Act
        _instance.FOBS = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FOBS_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFOBS", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FOBS = "Original Value";
        // Act
        _instance.FOBS = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FOBS_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFOBS", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FOBS = "First Value";
        // Act
        _instance.FOBS = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FOBS_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFOBS", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FOBS = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FOBS);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData
    [InlineData
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FOBS_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FOBS = input;
        // Assert
        Assert.Equal(expected, _instance.FOBS);
    }

    [Fact]
    public void FOBS_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFOBS", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FOBS = null;
        // Act
        _instance.FOBS = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FOBS_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFOBS", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FOBS = "Existing Value";
        // Act
        _instance.FOBS = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FChaveContrato_Property_ShouldAcceptValidNames(string ChaveContrato)
    {
        // Arrange
        var contratos = new DBContratos
        {
            // Act
            FChaveContrato = ChaveContrato
        };
        // Assert
        contratos.FChaveContrato.Should().Be(ChaveContrato);
    }

    [Fact]
    public void FChaveContrato_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var contratos = new DBContratos
        {
            // Act
            FChaveContrato = null
        };
        // Assert
        contratos.FChaveContrato.Should().Be(string.Empty);
    }

    [Fact]
    public void FChaveContrato_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var contratos = new DBContratos();
        var longName = new string ('A', 50 + 10); // Exceeds 50 character limit
        // Act
        contratos.FChaveContrato = longName;
        // Assert
        contratos.FChaveContrato.Should().HaveLength(50);
    }

    [Fact]
    public void FChaveContrato_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FChaveContrato = null;
        // Act
        var result = _instance.FChaveContrato;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FChaveContrato_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FChaveContrato = expectedValue;
        // Act
        var result = _instance.FChaveContrato;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FChaveContrato_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFChaveContrato", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FChaveContrato = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FChaveContrato);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FChaveContrato_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFChaveContrato", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FChaveContrato = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FChaveContrato);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FChaveContrato_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFChaveContrato", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FChaveContrato = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FChaveContrato);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FChaveContrato_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFChaveContrato", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FChaveContrato = value;
        // Act
        _instance.FChaveContrato = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FChaveContrato_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFChaveContrato", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FChaveContrato = "Original Value";
        // Act
        _instance.FChaveContrato = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FChaveContrato_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFChaveContrato", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FChaveContrato = "First Value";
        // Act
        _instance.FChaveContrato = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FChaveContrato_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFChaveContrato", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FChaveContrato = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FChaveContrato);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FChaveContrato_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FChaveContrato = input;
        // Assert
        Assert.Equal(expected, _instance.FChaveContrato);
    }

    [Fact]
    public void FChaveContrato_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFChaveContrato", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FChaveContrato = null;
        // Act
        _instance.FChaveContrato = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FChaveContrato_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFChaveContrato", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FChaveContrato = "Existing Value";
        // Act
        _instance.FChaveContrato = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAA")]
    [InlineData("BBBBBBB")]
    [InlineData("CCCCCCCCc")]
    public void FMulta_Property_ShouldAcceptValidNames(string Multa)
    {
        // Arrange
        var contratos = new DBContratos
        {
            // Act
            FMulta = Multa
        };
        // Assert
        contratos.FMulta.Should().Be(Multa);
    }

    [Fact]
    public void FMulta_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var contratos = new DBContratos
        {
            // Act
            FMulta = null
        };
        // Assert
        contratos.FMulta.Should().Be(string.Empty);
    }

    [Fact]
    public void FMulta_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var contratos = new DBContratos();
        var longName = new string ('A', 10 + 10); // Exceeds 10 character limit
        // Act
        contratos.FMulta = longName;
        // Assert
        contratos.FMulta.Should().HaveLength(10);
    }

    [Fact]
    public void FMulta_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FMulta = null;
        // Act
        var result = _instance.FMulta;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FMulta_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FMulta = expectedValue;
        // Act
        var result = _instance.FMulta;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FMulta_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFMulta", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FMulta = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FMulta);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FMulta_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFMulta", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FMulta = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FMulta);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FMulta_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFMulta", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAA  ";
        var expectedValue = "AAAAAAAA";
        // Act
        _instance.FMulta = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FMulta);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FMulta_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFMulta", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FMulta = value;
        // Act
        _instance.FMulta = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FMulta_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFMulta", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FMulta = "Original Value";
        // Act
        _instance.FMulta = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FMulta_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFMulta", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FMulta = "First Value";
        // Act
        _instance.FMulta = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FMulta_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFMulta", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FMulta = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FMulta);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAA", "AAAAAAAA")]
    [InlineData("  BBBBBBB  ", "BBBBBBB")]
    [InlineData("CCCCCCCCc", "CCCCCCCCc")]
    public void FMulta_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FMulta = input;
        // Assert
        Assert.Equal(expected, _instance.FMulta);
    }

    [Fact]
    public void FMulta_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFMulta", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FMulta = null;
        // Act
        _instance.FMulta = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FMulta_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContratos).GetField("pFldFMulta", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FMulta = "Existing Value";
        // Act
        _instance.FMulta = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

#region Testes de GUID
    [Fact]
    public void GUID_DefaultValue_ShouldBeEmpty()
    {
        Assert.Equal(string.Empty, _instance.FGUID);
    }

    [Fact]
    public void GUID_SetValidGUID_ShouldStore()
    {
        var guid = Guid.NewGuid().ToString();
        _instance.FGUID = guid;
        Assert.Equal(guid, _instance.FGUID);
    }

#endregion
    [Fact]
    public void TabelaNome_Property_ShouldReturnCorrectTableName()
    {
        // Arrange
        var contratos = new DBContratos();
        // Act & Assert
        contratos.TabelaNome.Should().Be("Contratos");
    }

    public virtual void Dispose()
    {
    // Cleanup resources if needed
    }
}