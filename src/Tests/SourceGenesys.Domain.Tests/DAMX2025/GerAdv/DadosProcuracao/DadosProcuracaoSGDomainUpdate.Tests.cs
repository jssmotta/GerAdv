// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// ============================================
// ARQUIVO: DBUpdateTests.cs.txt (Principal)
// ============================================
namespace MenphisSI.GerAdv.Tests;
public class DBDadosProcuracaoUpdate : IDisposable
{
    private readonly DBDadosProcuracao _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBDadosProcuracaoUpdate()
    {
        _instance = new DBDadosProcuracao();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void DefaultConstructor_ShouldCreateInstance_WithDefaultValues()
    {
        // Act
        var dadosprocuracao = new DBDadosProcuracao();
        // Assert
        dadosprocuracao.Should().NotBeNull();
        dadosprocuracao.ITabelaName().Should().Be("DadosProcuracao");
        dadosprocuracao.ID.Should().Be(0);
    }

    [Fact]
    public void AllProperties_WithValidValues_ShouldSetCorrectly()
    {
        // Arrange
        var dadosprocuracao = new DBDadosProcuracao
        {
            FGUID = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FEstadoCivil = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FNacionalidade = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FProfissao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FCTPS = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FPisPasep = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FRemuneracao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FObjeto = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        };
        // Assert - All properties should be set dadosprocuracao.FGUID.Should().Be( "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        dadosprocuracao.FEstadoCivil.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        dadosprocuracao.FNacionalidade.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        dadosprocuracao.FProfissao.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        dadosprocuracao.FCTPS.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        dadosprocuracao.FPisPasep.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        dadosprocuracao.FRemuneracao.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        dadosprocuracao.FObjeto.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public void StringProperties_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var dadosprocuracao = new DBDadosProcuracao();
        var longString = new string ('X', 300);
        dadosprocuracao.FGUID = longString; // MAX: 100
        dadosprocuracao.FEstadoCivil = longString; // MAX: 100
        dadosprocuracao.FNacionalidade = longString; // MAX: 100
        dadosprocuracao.FProfissao = longString; // MAX: 100
        dadosprocuracao.FCTPS = longString; // MAX: 100
        dadosprocuracao.FPisPasep = longString; // MAX: 100
        // Assert - All properties should be set dadosprocuracao.FGUID.Should().HaveLength(100);
        dadosprocuracao.FEstadoCivil.Should().HaveLength(100);
        dadosprocuracao.FNacionalidade.Should().HaveLength(100);
        dadosprocuracao.FProfissao.Should().HaveLength(100);
        dadosprocuracao.FCTPS.Should().HaveLength(100);
        dadosprocuracao.FPisPasep.Should().HaveLength(100);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FEstadoCivil_Property_ShouldAcceptValidNames(string EstadoCivil)
    {
        // Arrange
        var dadosprocuracao = new DBDadosProcuracao
        {
            // Act
            FEstadoCivil = EstadoCivil
        };
        // Assert
        dadosprocuracao.FEstadoCivil.Should().Be(EstadoCivil);
    }

    [Fact]
    public void FEstadoCivil_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var dadosprocuracao = new DBDadosProcuracao
        {
            // Act
            FEstadoCivil = null
        };
        // Assert
        dadosprocuracao.FEstadoCivil.Should().Be(string.Empty);
    }

    [Fact]
    public void FEstadoCivil_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var dadosprocuracao = new DBDadosProcuracao();
        var longName = new string ('A', 100 + 10); // Exceeds 100 character limit
        // Act
        dadosprocuracao.FEstadoCivil = longName;
        // Assert
        dadosprocuracao.FEstadoCivil.Should().HaveLength(100);
    }

    [Fact]
    public void FEstadoCivil_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FEstadoCivil = null;
        // Act
        var result = _instance.FEstadoCivil;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FEstadoCivil_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FEstadoCivil = expectedValue;
        // Act
        var result = _instance.FEstadoCivil;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FEstadoCivil_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFEstadoCivil", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEstadoCivil = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FEstadoCivil);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEstadoCivil_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFEstadoCivil", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEstadoCivil = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FEstadoCivil);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FEstadoCivil_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFEstadoCivil", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FEstadoCivil = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FEstadoCivil);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEstadoCivil_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFEstadoCivil", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FEstadoCivil = value;
        // Act
        _instance.FEstadoCivil = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEstadoCivil_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFEstadoCivil", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEstadoCivil = "Original Value";
        // Act
        _instance.FEstadoCivil = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEstadoCivil_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFEstadoCivil", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEstadoCivil = "First Value";
        // Act
        _instance.FEstadoCivil = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEstadoCivil_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFEstadoCivil", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEstadoCivil = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FEstadoCivil);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FEstadoCivil_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FEstadoCivil = input;
        // Assert
        Assert.Equal(expected, _instance.FEstadoCivil);
    }

    [Fact]
    public void FEstadoCivil_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFEstadoCivil", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEstadoCivil = null;
        // Act
        _instance.FEstadoCivil = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEstadoCivil_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFEstadoCivil", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEstadoCivil = "Existing Value";
        // Act
        _instance.FEstadoCivil = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNacionalidade_Property_ShouldAcceptValidNames(string Nacionalidade)
    {
        // Arrange
        var dadosprocuracao = new DBDadosProcuracao
        {
            // Act
            FNacionalidade = Nacionalidade
        };
        // Assert
        dadosprocuracao.FNacionalidade.Should().Be(Nacionalidade);
    }

    [Fact]
    public void FNacionalidade_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var dadosprocuracao = new DBDadosProcuracao
        {
            // Act
            FNacionalidade = null
        };
        // Assert
        dadosprocuracao.FNacionalidade.Should().Be(string.Empty);
    }

    [Fact]
    public void FNacionalidade_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var dadosprocuracao = new DBDadosProcuracao();
        var longName = new string ('A', 100 + 10); // Exceeds 100 character limit
        // Act
        dadosprocuracao.FNacionalidade = longName;
        // Assert
        dadosprocuracao.FNacionalidade.Should().HaveLength(100);
    }

    [Fact]
    public void FNacionalidade_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FNacionalidade = null;
        // Act
        var result = _instance.FNacionalidade;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FNacionalidade_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FNacionalidade = expectedValue;
        // Act
        var result = _instance.FNacionalidade;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FNacionalidade_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFNacionalidade", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNacionalidade = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FNacionalidade);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNacionalidade_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFNacionalidade", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNacionalidade = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FNacionalidade);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FNacionalidade_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFNacionalidade", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FNacionalidade = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FNacionalidade);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNacionalidade_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFNacionalidade", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FNacionalidade = value;
        // Act
        _instance.FNacionalidade = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNacionalidade_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFNacionalidade", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNacionalidade = "Original Value";
        // Act
        _instance.FNacionalidade = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNacionalidade_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFNacionalidade", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNacionalidade = "First Value";
        // Act
        _instance.FNacionalidade = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNacionalidade_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFNacionalidade", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNacionalidade = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FNacionalidade);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNacionalidade_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FNacionalidade = input;
        // Assert
        Assert.Equal(expected, _instance.FNacionalidade);
    }

    [Fact]
    public void FNacionalidade_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFNacionalidade", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNacionalidade = null;
        // Act
        _instance.FNacionalidade = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNacionalidade_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFNacionalidade", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNacionalidade = "Existing Value";
        // Act
        _instance.FNacionalidade = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FProfissao_Property_ShouldAcceptValidNames(string Profissao)
    {
        // Arrange
        var dadosprocuracao = new DBDadosProcuracao
        {
            // Act
            FProfissao = Profissao
        };
        // Assert
        dadosprocuracao.FProfissao.Should().Be(Profissao);
    }

    [Fact]
    public void FProfissao_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var dadosprocuracao = new DBDadosProcuracao
        {
            // Act
            FProfissao = null
        };
        // Assert
        dadosprocuracao.FProfissao.Should().Be(string.Empty);
    }

    [Fact]
    public void FProfissao_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var dadosprocuracao = new DBDadosProcuracao();
        var longName = new string ('A', 100 + 10); // Exceeds 100 character limit
        // Act
        dadosprocuracao.FProfissao = longName;
        // Assert
        dadosprocuracao.FProfissao.Should().HaveLength(100);
    }

    [Fact]
    public void FProfissao_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FProfissao = null;
        // Act
        var result = _instance.FProfissao;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FProfissao_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FProfissao = expectedValue;
        // Act
        var result = _instance.FProfissao;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FProfissao_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFProfissao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FProfissao = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FProfissao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FProfissao_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFProfissao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FProfissao = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FProfissao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FProfissao_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFProfissao", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FProfissao = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FProfissao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FProfissao_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFProfissao", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FProfissao = value;
        // Act
        _instance.FProfissao = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FProfissao_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFProfissao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FProfissao = "Original Value";
        // Act
        _instance.FProfissao = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FProfissao_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFProfissao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FProfissao = "First Value";
        // Act
        _instance.FProfissao = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FProfissao_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFProfissao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FProfissao = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FProfissao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FProfissao_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FProfissao = input;
        // Assert
        Assert.Equal(expected, _instance.FProfissao);
    }

    [Fact]
    public void FProfissao_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFProfissao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FProfissao = null;
        // Act
        _instance.FProfissao = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FProfissao_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFProfissao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FProfissao = "Existing Value";
        // Act
        _instance.FProfissao = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FCTPS_Property_ShouldAcceptValidNames(string CTPS)
    {
        // Arrange
        var dadosprocuracao = new DBDadosProcuracao
        {
            // Act
            FCTPS = CTPS
        };
        // Assert
        dadosprocuracao.FCTPS.Should().Be(CTPS);
    }

    [Fact]
    public void FCTPS_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var dadosprocuracao = new DBDadosProcuracao
        {
            // Act
            FCTPS = null
        };
        // Assert
        dadosprocuracao.FCTPS.Should().Be(string.Empty);
    }

    [Fact]
    public void FCTPS_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var dadosprocuracao = new DBDadosProcuracao();
        var longName = new string ('A', 100 + 10); // Exceeds 100 character limit
        // Act
        dadosprocuracao.FCTPS = longName;
        // Assert
        dadosprocuracao.FCTPS.Should().HaveLength(100);
    }

    [Fact]
    public void FCTPS_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FCTPS = null;
        // Act
        var result = _instance.FCTPS;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FCTPS_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FCTPS = expectedValue;
        // Act
        var result = _instance.FCTPS;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FCTPS_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFCTPS", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FCTPS = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FCTPS);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCTPS_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFCTPS", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FCTPS = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FCTPS);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FCTPS_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFCTPS", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FCTPS = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FCTPS);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCTPS_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFCTPS", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FCTPS = value;
        // Act
        _instance.FCTPS = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCTPS_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFCTPS", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCTPS = "Original Value";
        // Act
        _instance.FCTPS = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCTPS_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFCTPS", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCTPS = "First Value";
        // Act
        _instance.FCTPS = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCTPS_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFCTPS", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FCTPS = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FCTPS);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FCTPS_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FCTPS = input;
        // Assert
        Assert.Equal(expected, _instance.FCTPS);
    }

    [Fact]
    public void FCTPS_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFCTPS", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCTPS = null;
        // Act
        _instance.FCTPS = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCTPS_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFCTPS", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCTPS = "Existing Value";
        // Act
        _instance.FCTPS = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FPisPasep_Property_ShouldAcceptValidNames(string PisPasep)
    {
        // Arrange
        var dadosprocuracao = new DBDadosProcuracao
        {
            // Act
            FPisPasep = PisPasep
        };
        // Assert
        dadosprocuracao.FPisPasep.Should().Be(PisPasep);
    }

    [Fact]
    public void FPisPasep_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var dadosprocuracao = new DBDadosProcuracao
        {
            // Act
            FPisPasep = null
        };
        // Assert
        dadosprocuracao.FPisPasep.Should().Be(string.Empty);
    }

    [Fact]
    public void FPisPasep_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var dadosprocuracao = new DBDadosProcuracao();
        var longName = new string ('A', 100 + 10); // Exceeds 100 character limit
        // Act
        dadosprocuracao.FPisPasep = longName;
        // Assert
        dadosprocuracao.FPisPasep.Should().HaveLength(100);
    }

    [Fact]
    public void FPisPasep_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FPisPasep = null;
        // Act
        var result = _instance.FPisPasep;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FPisPasep_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FPisPasep = expectedValue;
        // Act
        var result = _instance.FPisPasep;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FPisPasep_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFPisPasep", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FPisPasep = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FPisPasep);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPisPasep_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFPisPasep", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FPisPasep = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FPisPasep);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FPisPasep_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFPisPasep", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FPisPasep = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FPisPasep);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPisPasep_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFPisPasep", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FPisPasep = value;
        // Act
        _instance.FPisPasep = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPisPasep_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFPisPasep", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPisPasep = "Original Value";
        // Act
        _instance.FPisPasep = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPisPasep_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFPisPasep", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPisPasep = "First Value";
        // Act
        _instance.FPisPasep = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPisPasep_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFPisPasep", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FPisPasep = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FPisPasep);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FPisPasep_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FPisPasep = input;
        // Assert
        Assert.Equal(expected, _instance.FPisPasep);
    }

    [Fact]
    public void FPisPasep_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFPisPasep", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPisPasep = null;
        // Act
        _instance.FPisPasep = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FPisPasep_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFPisPasep", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FPisPasep = "Existing Value";
        // Act
        _instance.FPisPasep = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FRemuneracao_Property_ShouldAcceptValidNames(string Remuneracao)
    {
        // Arrange
        var dadosprocuracao = new DBDadosProcuracao
        {
            // Act
            FRemuneracao = Remuneracao
        };
        // Assert
        dadosprocuracao.FRemuneracao.Should().Be(Remuneracao);
    }

    [Fact]
    public void FRemuneracao_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var dadosprocuracao = new DBDadosProcuracao
        {
            // Act
            FRemuneracao = null
        };
        // Assert
        dadosprocuracao.FRemuneracao.Should().Be(string.Empty);
    }

    [Fact]
    public void FRemuneracao_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FRemuneracao = null;
        // Act
        var result = _instance.FRemuneracao;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FRemuneracao_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FRemuneracao = expectedValue;
        // Act
        var result = _instance.FRemuneracao;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FRemuneracao_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFRemuneracao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FRemuneracao = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FRemuneracao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRemuneracao_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFRemuneracao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FRemuneracao = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FRemuneracao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FRemuneracao_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFRemuneracao", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  ";
        var expectedValue = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM";
        // Act
        _instance.FRemuneracao = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FRemuneracao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRemuneracao_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFRemuneracao", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FRemuneracao = value;
        // Act
        _instance.FRemuneracao = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRemuneracao_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFRemuneracao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRemuneracao = "Original Value";
        // Act
        _instance.FRemuneracao = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRemuneracao_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFRemuneracao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRemuneracao = "First Value";
        // Act
        _instance.FRemuneracao = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRemuneracao_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFRemuneracao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FRemuneracao = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FRemuneracao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData
    [InlineData("  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  ", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FRemuneracao_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FRemuneracao = input;
        // Assert
        Assert.Equal(expected, _instance.FRemuneracao);
    }

    [Fact]
    public void FRemuneracao_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFRemuneracao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRemuneracao = null;
        // Act
        _instance.FRemuneracao = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRemuneracao_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFRemuneracao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRemuneracao = "Existing Value";
        // Act
        _instance.FRemuneracao = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FObjeto_Property_ShouldAcceptValidNames(string Objeto)
    {
        // Arrange
        var dadosprocuracao = new DBDadosProcuracao
        {
            // Act
            FObjeto = Objeto
        };
        // Assert
        dadosprocuracao.FObjeto.Should().Be(Objeto);
    }

    [Fact]
    public void FObjeto_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var dadosprocuracao = new DBDadosProcuracao
        {
            // Act
            FObjeto = null
        };
        // Assert
        dadosprocuracao.FObjeto.Should().Be(string.Empty);
    }

    [Fact]
    public void FObjeto_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FObjeto = null;
        // Act
        var result = _instance.FObjeto;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FObjeto_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FObjeto = expectedValue;
        // Act
        var result = _instance.FObjeto;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FObjeto_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFObjeto", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FObjeto = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FObjeto);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObjeto_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFObjeto", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FObjeto = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FObjeto);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FObjeto_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFObjeto", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  ";
        var expectedValue = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM";
        // Act
        _instance.FObjeto = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FObjeto);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObjeto_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFObjeto", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FObjeto = value;
        // Act
        _instance.FObjeto = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObjeto_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFObjeto", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObjeto = "Original Value";
        // Act
        _instance.FObjeto = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObjeto_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFObjeto", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObjeto = "First Value";
        // Act
        _instance.FObjeto = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObjeto_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFObjeto", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FObjeto = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FObjeto);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData
    [InlineData
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FObjeto_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FObjeto = input;
        // Assert
        Assert.Equal(expected, _instance.FObjeto);
    }

    [Fact]
    public void FObjeto_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFObjeto", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObjeto = null;
        // Act
        _instance.FObjeto = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObjeto_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDadosProcuracao).GetField("pFldFObjeto", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObjeto = "Existing Value";
        // Act
        _instance.FObjeto = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

#region Testes de GUID
    [Fact]
    public void GUID_DefaultValue_ShouldBeEmpty()
    {
        Assert.Equal(string.Empty, _instance.FGUID);
    }

    [Fact]
    public void GUID_SetValidGUID_ShouldStore()
    {
        var guid = Guid.NewGuid().ToString();
        _instance.FGUID = guid;
        Assert.Equal(guid, _instance.FGUID);
    }

#endregion
    [Fact]
    public void TabelaNome_Property_ShouldReturnCorrectTableName()
    {
        // Arrange
        var dadosprocuracao = new DBDadosProcuracao();
        // Act & Assert
        dadosprocuracao.TabelaNome.Should().Be("DadosProcuracao");
    }

    public virtual void Dispose()
    {
    // Cleanup resources if needed
    }
}