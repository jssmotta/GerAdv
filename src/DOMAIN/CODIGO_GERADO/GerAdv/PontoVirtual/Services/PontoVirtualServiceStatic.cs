// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class PontoVirtualService
{
    private static (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterPontoVirtual filtro)
    {
        var parameters = new List<SqlParameter>();
        if (!filtro.HoraEntrada.IsEmpty())
        {
            if (DateTime.TryParse(filtro.HoraEntrada, out var dataParam))
                parameters.Add(new($"@{nameof(DBPontoVirtualDicInfo.HoraEntrada)}", dataParam));
        }

        if (!filtro.HoraEntrada_end.IsEmpty())
        {
            if (DateTime.TryParse(filtro.HoraEntrada_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBPontoVirtualDicInfo.HoraEntrada)}_end", dataParam));
        }

        if (!filtro.HoraSaida.IsEmpty())
        {
            if (DateTime.TryParse(filtro.HoraSaida, out var dataParam))
                parameters.Add(new($"@{nameof(DBPontoVirtualDicInfo.HoraSaida)}", dataParam));
        }

        if (!filtro.HoraSaida_end.IsEmpty())
        {
            if (DateTime.TryParse(filtro.HoraSaida_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBPontoVirtualDicInfo.HoraSaida)}_end", dataParam));
        }

        if (filtro.Operador != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBPontoVirtualDicInfo.Operador)}", filtro.Operador));
        }

        if (!string.IsNullOrEmpty(filtro.Key))
        {
            parameters.Add(new($"@{nameof(DBPontoVirtualDicInfo.Key)}", ApplyWildCard(filtro.WildcardChar, filtro.Key)));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBPontoVirtualDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
        }

        if (filtro.Codigo_filtro_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBPontoVirtualDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
        }

        if (filtro.LogicalOperator.IsEmpty() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        if (!filtro.HoraEntrada.IsEmpty() && filtro.HoraEntrada_end.IsEmpty())
        {
            cWhere.Append(filtro.HoraEntrada.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBPontoVirtualDicInfo.PTabelaNome}].[{DBPontoVirtualDicInfo.HoraEntrada}], 103) >= CONVERT(DATE, @{nameof(DBPontoVirtualDicInfo.HoraEntrada)}, 103)");
        }
        else
        {
            cWhere.Append((filtro.HoraEntrada.IsEmpty() && filtro.HoraEntrada_end.IsEmpty()) ? string.Empty : (!(filtro.HoraEntrada.IsEmpty()) && !(filtro.HoraEntrada_end.IsEmpty())) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBPontoVirtualDicInfo.HoraEntrada} BETWEEN @{nameof(DBPontoVirtualDicInfo.HoraEntrada)} AND @{nameof(DBPontoVirtualDicInfo.HoraEntrada)}_end" : !(filtro.HoraEntrada.IsEmpty()) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBPontoVirtualDicInfo.HoraEntrada} = @{nameof(DBPontoVirtualDicInfo.HoraEntrada)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBPontoVirtualDicInfo.HoraEntrada} <= @{nameof(DBPontoVirtualDicInfo.HoraEntrada)}_end");
        }

        if (!filtro.HoraSaida.IsEmpty() && filtro.HoraSaida_end.IsEmpty())
        {
            cWhere.Append(filtro.HoraSaida.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBPontoVirtualDicInfo.PTabelaNome}].[{DBPontoVirtualDicInfo.HoraSaida}], 103) >= CONVERT(DATE, @{nameof(DBPontoVirtualDicInfo.HoraSaida)}, 103)");
        }
        else
        {
            cWhere.Append((filtro.HoraSaida.IsEmpty() && filtro.HoraSaida_end.IsEmpty()) ? string.Empty : (!(filtro.HoraSaida.IsEmpty()) && !(filtro.HoraSaida_end.IsEmpty())) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBPontoVirtualDicInfo.HoraSaida} BETWEEN @{nameof(DBPontoVirtualDicInfo.HoraSaida)} AND @{nameof(DBPontoVirtualDicInfo.HoraSaida)}_end" : !(filtro.HoraSaida.IsEmpty()) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBPontoVirtualDicInfo.HoraSaida} = @{nameof(DBPontoVirtualDicInfo.HoraSaida)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBPontoVirtualDicInfo.HoraSaida} <= @{nameof(DBPontoVirtualDicInfo.HoraSaida)}_end");
        }

        cWhere.Append(filtro.Operador <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBPontoVirtualDicInfo.PTabelaNome}].[{DBPontoVirtualDicInfo.Operador}] = @{nameof(DBPontoVirtualDicInfo.Operador)}");
        cWhere.Append(filtro.Key.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBPontoVirtualDicInfo.PTabelaNome}].[{DBPontoVirtualDicInfo.Key}]  {DevourerConsts.MsiCollate} like @{nameof(DBPontoVirtualDicInfo.Key)}");
        if (!filtro.Codigo_filtro.IsEmpty() && filtro.Codigo_filtro_end.IsEmpty())
        {
            cWhere.Append(filtro.Codigo_filtro <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBPontoVirtualDicInfo.PTabelaNome}].[{DBPontoVirtualDicInfo.CampoCodigo}] >= @{nameof(DBPontoVirtualDicInfo.CampoCodigo)}");
        }
        else
        {
            cWhere.Append((filtro.Codigo_filtro <= 0 && filtro.Codigo_filtro_end <= 0) ? string.Empty : (!(filtro.Codigo_filtro <= 0) && !(filtro.Codigo_filtro_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBPontoVirtualDicInfo.CampoCodigo} BETWEEN @{nameof(DBPontoVirtualDicInfo.CampoCodigo)} AND @{nameof(DBPontoVirtualDicInfo.CampoCodigo)}_end" : !(filtro.Codigo_filtro <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBPontoVirtualDicInfo.CampoCodigo} = @{nameof(DBPontoVirtualDicInfo.CampoCodigo)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBPontoVirtualDicInfo.CampoCodigo} <= @{nameof(DBPontoVirtualDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private static string ApplyWildCard(char wildcardChar, string value)
    {
        if (wildcardChar == '\0' || wildcardChar == ' ')
        {
            return value;
        }

        var result = $"{wildcardChar}{value.Replace(" ", wildcardChar.ToString())}{wildcardChar}";
        return result;
    }

    private async Task<IEnumerable<PontoVirtualResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}