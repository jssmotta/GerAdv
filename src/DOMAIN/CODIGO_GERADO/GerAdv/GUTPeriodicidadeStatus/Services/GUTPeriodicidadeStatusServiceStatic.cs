// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class GUTPeriodicidadeStatusService
{
    public (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterGUTPeriodicidadeStatus? filtro)
    {
        if (filtro == null)
            return null;
        var parameters = new List<SqlParameter>();
        if (filtro.GUTAtividade != int.MinValue)
        {
            parameters.Add(new($"@{(DBGUTPeriodicidadeStatusDicInfo.GUTAtividade)}", filtro.GUTAtividade));
            if (filtro.GUTAtividade_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBGUTPeriodicidadeStatusDicInfo.GUTAtividade)}_end", filtro.GUTAtividade_end));
            }
        }

        if (!filtro.DataRealizado.IsEmptyDX())
        {
            if (DateTime.TryParse(filtro.DataRealizado, out var dataParam1))
                parameters.Add(new($"@{(DBGUTPeriodicidadeStatusDicInfo.DataRealizado)}", dataParam1));
            if (!filtro.DataRealizado_end.IsEmptyDX())
            {
                if (DateTime.TryParse(filtro.DataRealizado_end, out var dataParam2))
                    parameters.Add(new($"@{(DBGUTPeriodicidadeStatusDicInfo.DataRealizado)}_end", dataParam2));
            }
        }

        if (!string.IsNullOrWhiteSpace(filtro.GUID))
        {
            parameters.Add(new($"@{(DBGUTPeriodicidadeStatusDicInfo.GUID)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.GUID)));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{(DBGUTPeriodicidadeStatusDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
            if (filtro.Codigo_filtro_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBGUTPeriodicidadeStatusDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
            }
        }

        if (filtro.LogicalOperator.IsEmptyX() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        if (!(filtro.GUTAtividade.IsEmptyX()) && filtro.GUTAtividade_end.IsEmptyX())
        {
            cWhere.Append(filtro.GUTAtividade.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTPeriodicidadeStatusDicInfo.PTabelaNome}].[{DBGUTPeriodicidadeStatusDicInfo.GUTAtividade}] = @{(DBGUTPeriodicidadeStatusDicInfo.GUTAtividade)}");
        }
        else if (!(filtro.GUTAtividade.IsEmptyX()) && !(filtro.GUTAtividade_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTPeriodicidadeStatusDicInfo.PTabelaNome}].{DBGUTPeriodicidadeStatusDicInfo.GUTAtividade} BETWEEN @{(DBGUTPeriodicidadeStatusDicInfo.GUTAtividade)} AND @{(DBGUTPeriodicidadeStatusDicInfo.GUTAtividade)}_end");
        }

        if (!(filtro.DataRealizado.IsEmptyDX()) && filtro.DataRealizado_end.IsEmptyDX())
        {
            cWhere.Append(filtro.DataRealizado.IsEmptyDX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBGUTPeriodicidadeStatusDicInfo.PTabelaNome}].[{DBGUTPeriodicidadeStatusDicInfo.DataRealizado}], 103) = CONVERT(DATE, @{(DBGUTPeriodicidadeStatusDicInfo.DataRealizado)}, 103)");
        }
        else if (!(filtro.DataRealizado.IsEmptyDX()) && !(filtro.DataRealizado_end.IsEmptyDX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTPeriodicidadeStatusDicInfo.PTabelaNome}].{DBGUTPeriodicidadeStatusDicInfo.DataRealizado} BETWEEN @{(DBGUTPeriodicidadeStatusDicInfo.DataRealizado)} AND @{(DBGUTPeriodicidadeStatusDicInfo.DataRealizado)}_end");
        }

        cWhere.Append(filtro.GUID.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTPeriodicidadeStatusDicInfo.PTabelaNome}].[{DBGUTPeriodicidadeStatusDicInfo.GUID}]  {DevourerConsts.MsiCollate} like @{(DBGUTPeriodicidadeStatusDicInfo.GUID)}");
        if (!(filtro.Codigo_filtro.IsEmptyX()) && filtro.Codigo_filtro_end.IsEmptyX())
        {
            cWhere.Append(filtro.Codigo_filtro.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTPeriodicidadeStatusDicInfo.PTabelaNome}].[{DBGUTPeriodicidadeStatusDicInfo.CampoCodigo}] = @{(DBGUTPeriodicidadeStatusDicInfo.CampoCodigo)}");
        }
        else if (!(filtro.Codigo_filtro.IsEmptyX()) && !(filtro.Codigo_filtro_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBGUTPeriodicidadeStatusDicInfo.PTabelaNome}].{DBGUTPeriodicidadeStatusDicInfo.CampoCodigo} BETWEEN @{(DBGUTPeriodicidadeStatusDicInfo.CampoCodigo)} AND @{(DBGUTPeriodicidadeStatusDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private string GetFilterHash(Filters.FilterGUTPeriodicidadeStatus? filtro)
    {
        if (filtro == null)
            return string.Empty;
        var json = JsonSerializer.Serialize(filtro);
        using var sha256 = SHA256.Create();
        var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(json));
        return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
    }

    private async Task<IEnumerable<GUTPeriodicidadeStatusResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter>? parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}