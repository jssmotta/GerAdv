// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class TipoStatusBiuValidationTests : IDisposable
{
    private readonly TipoStatusBiuValidation _validation;
    private readonly Mock<ITipoStatusBiuService> _mockTipoStatusBiuService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly TipoStatusBiuService _service;
    private readonly string _validUri = "test-uri";
    public TipoStatusBiuValidationTests()
    {
        _validation = new TipoStatusBiuValidation();
        _mockTipoStatusBiuService = new Mock<ITipoStatusBiuService>();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

#region Class Structure Tests
    [Fact]
    public void TipoStatusBiuValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<ITipoStatusBiuValidation>();
    }

    [Fact]
    public void TipoStatusBiuValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(TipoStatusBiuValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void TipoStatusBiuValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(TipoStatusBiuValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private static Models.TipoStatusBiu CreateValidTipoStatusBiu()
    {
        return new Models.TipoStatusBiu
        {
            Id = 1,
            Nome = "João"
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockTipoStatusBiuService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterTipoStatusBiu>(), It.IsAny<string>())).ReturnsAsync([]);
    // Setup other mocks but don't override the TipoStatusBius service mock
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockTipoStatusBiuService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterTipoStatusBiu>(), It.IsAny<string>())).ReturnsAsync([]);
    // Setup other mocks but don't override the TipoStatusBius service mock
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var tipostatusbiu = new Models.TipoStatusBiu
        {
            Id = 1,
            Nome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(tipostatusbiu, _mockTipoStatusBiuService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockTipoStatusBiuService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region ValidateReg Required Nome Method Tests 
    [Fact]
    public async Task ValidateReg_WithEmptyNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var tipostatusbiu = CreateValidTipoStatusBiu();
        tipostatusbiu.Nome = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(tipostatusbiu, _mockTipoStatusBiuService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var tipostatusbiu = CreateValidTipoStatusBiu();
        tipostatusbiu.Nome = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(tipostatusbiu, _mockTipoStatusBiuService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataNome_ShouldReturnTrue()
    {
        // Arrange
        var tipostatusbiu = CreateValidTipoStatusBiu();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(tipostatusbiu, _mockTipoStatusBiuService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var tipostatusbiu = CreateValidTipoStatusBiu();
        tipostatusbiu.Nome = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(tipostatusbiu, _mockTipoStatusBiuService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}