// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IRecadosValidation
{
    Task<bool> ValidateReg(Models.Recados reg, IRecadosService service, IProcessosReader processosReader, IClientesReader clientesReader, IHistoricoReader historicoReader, IContatoCRMReader contatocrmReader, ILigacoesReader ligacoesReader, IAgendaReader agendaReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, IRecadosService service, IAlarmSMSService alarmsmsService, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class RecadosValidation : IRecadosValidation
{
    public async Task<bool> CanDelete(int id, IRecadosService service, IAlarmSMSService alarmsmsService, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        var alarmsmsExists0 = await alarmsmsService.Filter(new Filters.FilterAlarmSMS { Recado = id }, uri);
        if (alarmsmsExists0 != null && alarmsmsExists0.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Alarm S M S associados a ele.");
        return true;
    }

    private bool ValidSizes(Models.Recados reg)
    {
        if (reg.ClienteNome.Length > 255)
            throw new SGValidationException($"ClienteNome deve ter no máximo 255 caracteres.");
        if (reg.De.Length > 50)
            throw new SGValidationException($"De deve ter no máximo 50 caracteres.");
        if (reg.Para.Length > 50)
            throw new SGValidationException($"Para deve ter no máximo 50 caracteres.");
        if (reg.Assunto.Length > 255)
            throw new SGValidationException($"Assunto deve ter no máximo 255 caracteres.");
        if (reg.AguardarRetornoPara.Length > 255)
            throw new SGValidationException($"AguardarRetornoPara deve ter no máximo 255 caracteres.");
        if (reg.GUID.Length > 100)
            throw new SGValidationException($"GUID deve ter no máximo 100 caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.Recados reg, IRecadosService service, IProcessosReader processosReader, IClientesReader clientesReader, IHistoricoReader historicoReader, IContatoCRMReader contatocrmReader, ILigacoesReader ligacoesReader, IAgendaReader agendaReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.Hora.IsEmpty())
            throw new SGValidationException("Hora é obrigatório.");
        if (!DateTime.TryParse(reg.Hora, out _))
        {
            throw new SGValidationException($"Hora inválida: {reg.Hora}");
        }

        if (reg.Hora.IsEmpty())
            throw new SGValidationException("Hora é obrigatório.");
        if (reg.Data.IsEmpty())
            throw new SGValidationException("Data é obrigatório.");
        if (!DateTime.TryParse(reg.Data, out _))
        {
            throw new SGValidationException($"Data inválida: {reg.Data}");
        }

        if (reg.Data.IsEmpty())
            throw new SGValidationException("Data é obrigatório.");
        // Processos
        if (!reg.Processo.IsEmptyIDNumber())
        {
            var regProcessos = await processosReader.Read(reg.Processo, oCnn);
            if (regProcessos == null || regProcessos.Id != reg.Processo)
            {
                throw new SGValidationException($"Processos não encontrado ({regProcessos?.Id}).");
            }
        }

        // Clientes
        if (!reg.Cliente.IsEmptyIDNumber())
        {
            var regClientes = await clientesReader.Read(reg.Cliente, oCnn);
            if (regClientes == null || regClientes.Id != reg.Cliente)
            {
                throw new SGValidationException($"Clientes não encontrado ({regClientes?.Id}).");
            }
        }

        // Historico
        if (!reg.Historico.IsEmptyIDNumber())
        {
            var regHistorico = await historicoReader.Read(reg.Historico, oCnn);
            if (regHistorico == null || regHistorico.Id != reg.Historico)
            {
                throw new SGValidationException($"Historico não encontrado ({regHistorico?.Id}).");
            }
        }

        // ContatoCRM
        if (!reg.ContatoCRM.IsEmptyIDNumber())
        {
            var regContatoCRM = await contatocrmReader.Read(reg.ContatoCRM, oCnn);
            if (regContatoCRM == null || regContatoCRM.Id != reg.ContatoCRM)
            {
                throw new SGValidationException($"Contato C R M não encontrado ({regContatoCRM?.Id}).");
            }
        }

        // Ligacoes
        if (!reg.Ligacoes.IsEmptyIDNumber())
        {
            var regLigacoes = await ligacoesReader.Read(reg.Ligacoes, oCnn);
            if (regLigacoes == null || regLigacoes.Id != reg.Ligacoes)
            {
                throw new SGValidationException($"Ligacoes não encontrado ({regLigacoes?.Id}).");
            }
        }

        // Agenda
        if (!reg.Agenda.IsEmptyIDNumber())
        {
            var regAgenda = await agendaReader.Read(reg.Agenda, oCnn);
            if (regAgenda == null || regAgenda.Id != reg.Agenda)
            {
                throw new SGValidationException($"Compromisso não encontrado ({regAgenda?.Id}).");
            }
        }

        return true;
    }
}