// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class SMSAliceService(IOptions<AppSettings> appSettings, IFSMSAliceFactory smsaliceFactory, ISMSAliceReader reader, ISMSAliceValidation validation, ISMSAliceWriter writer, IOperadorReader operadorReader, ITipoEMailReader tipoemailReader, IHttpContextAccessor httpContextAccessor, HybridCache cache, IMemoryCache memory) : ISMSAliceService, IDisposable
{
    private readonly IHttpContextAccessor _httpContextAccessor = httpContextAccessor;
    private readonly IOptions<AppSettings> _appSettings = appSettings;
    private readonly HybridCache _cache = cache;
    private readonly IMemoryCache _memoryCache = memory;
    private bool _disposed;
    private readonly IFSMSAliceFactory smsaliceFactory = smsaliceFactory;
    private readonly ISMSAliceReader reader = reader;
    private readonly ISMSAliceValidation validation = validation;
    private readonly ISMSAliceWriter writer = writer;
    private readonly IOperadorReader operadorReader = operadorReader;
    private readonly ITipoEMailReader tipoemailReader = tipoemailReader;
    public async Task<IEnumerable<SMSAliceResponseAll>> GetAll(int max, [FromRoute, Required] string uri, CancellationToken token = default)
    {
        max = Math.Min(Math.Max(max, 1), BaseConsts.PMaxItens);
        ThrowIfDisposed();
        if (!Uris.ValidaUri(uri, _appSettings))
        {
            throw new Exception("SMSAlice: URI inválida");
        }

        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromMinutes(BaseConsts.PMaxMinutesCache),
            LocalCacheExpiration = TimeSpan.FromMinutes(BaseConsts.PMaxMinutesCache)
        };
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        var keyCache = await reader.ReadStringAuditor(max, uri, "", [], oCnn);
        var cacheKey = $"{uri}-SMSAlice-Filter-{max}-{keyCache}";
        var result = await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataAllAsync(max, string.Empty, [], uri, cancel), entryOptions, cancellationToken: token);
        return result;
    }

    public async Task<IEnumerable<SMSAliceResponseAll>> Filter([FromQuery] int max, [FromBody] Filters.FilterSMSAlice filtro, [FromRoute, Required] string uri)
    {
        ThrowIfDisposed();
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        if (max <= 0)
        {
            max = BaseConsts.PMaxItens;
        }

        var filtroResult = filtro == null ? null : WFiltro(filtro!);
        string where = filtroResult?.where ?? string.Empty;
        List<SqlParameter> parameters = filtroResult?.parametros ?? [];
        var filterHash = GetFilterHash(filtro);
        var keyCache = await reader.ReadStringAuditor(max, uri, where, parameters, oCnn);
        var cacheKey = $"{uri}-{max}SMSAlice-Filter-{where.GetHashCode2()}{filterHash}{keyCache}";
        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxGetListSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxGetListSecondsCacheId)
        };
        var result = await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataAllAsync(max, string.IsNullOrEmpty(where) ? string.Empty : TSql.Where + where, parameters, uri, cancel), entryOptions, cancellationToken: new());
        return result;
    }

    public async Task<SMSAliceResponse?> GetById([FromQuery] int id, [FromRoute, Required] string uri, CancellationToken token)
    {
        ThrowIfDisposed();
        if (id < 1)
        {
            return new SMSAliceResponse();
        }

        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId)
        };
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        try
        {
            var keyCache = await reader.ReadStringAuditor(id, uri, oCnn);
            var result = await _cache.GetOrCreateAsync($"{uri}-SMSAlice-GetById-{id}-{keyCache}", async cancel => await GetDataByIdAsync(id, oCnn, cancel), entryOptions, cancellationToken: token);
            return result;
        }
        catch (Exception)
        {
            throw new Exception($"SMSAlice - {uri}-: GetById");
        }
    }

    private async Task<SMSAliceResponse?> GetDataByIdAsync(int id, MsiSqlConnection? oCnn, CancellationToken token) => await reader.Read(id, oCnn);
    public async Task<SMSAliceResponse?> AddAndUpdate([FromBody] Models.SMSAlice? regSMSAlice, [FromRoute, Required] string uri)
    {
        ThrowIfDisposed();
        if (regSMSAlice == null)
        {
            return null;
        }

        if (!Uris.ValidaUri(uri, _appSettings))
        {
            throw new Exception("SMSAlice: URI inválida");
        }

        using var oCnn = Configuracoes.GetConnectionByUriRw(uri);
        if (oCnn == null)
        {
            return null;
        }

        try
        {
            var validade = await validation.ValidateReg(regSMSAlice, this, operadorReader, tipoemailReader, uri, oCnn);
            if (!validade)
            {
                throw new Exception("Erro inesperado ao validar 0x0!");
            }
        }
        catch (SGValidationException ex)
        {
            throw new Exception(ex.Message);
        }
        catch (Exception)
        {
            throw new Exception("Erro inesperado ao validar 0x1!");
        }

        int operadorId = _httpContextAccessor.HttpContext == null ? regSMSAlice.Operador : UserTools.GetAuthenticatedUserId(_httpContextAccessor);
        using var saved = await writer.WriteAsync(regSMSAlice, operadorId, oCnn);
        return reader.Read(saved, oCnn);
    }

    public async Task<SMSAliceResponse?> Validation([FromBody] Models.SMSAlice? regSMSAlice, [FromRoute, Required] string uri)
    {
        ThrowIfDisposed();
        if (regSMSAlice == null)
        {
            return null;
        }

        if (!Uris.ValidaUri(uri, _appSettings))
        {
            throw new Exception("SMSAlice: URI inválida");
        }

        using var oCnn = Configuracoes.GetConnectionByUriRw(uri);
        if (oCnn == null)
        {
            return null;
        }

        try
        {
            var validade = await validation.ValidateReg(regSMSAlice, this, operadorReader, tipoemailReader, uri, oCnn);
            if (!validade)
            {
                throw new Exception("Erro inesperado ao validar 0x0!");
            }
        }
        catch (SGValidationException ex)
        {
            throw new Exception(ex.Message);
        }
        catch (Exception)
        {
            throw new Exception("Erro inesperado ao validar 0x1!");
        }

        if (regSMSAlice.Id.IsEmptyIDNumber())
        {
            return new SMSAliceResponse();
        }

        return await reader.Read(regSMSAlice.Id, oCnn);
    }

    public async Task<SMSAliceResponse?> Delete([FromQuery] int? id, [FromRoute, Required] string uri)
    {
        if (id == null || id.IsEmptyIDNumber())
        {
            return null;
        }

        ThrowIfDisposed();
        if (!Uris.ValidaUri(uri, _appSettings))
        {
            throw new Exception("SMSAlice: URI inválida");
        }

        var nOperador = UserTools.GetAuthenticatedUserId(_httpContextAccessor);
        using var oCnn = Configuracoes.GetConnectionByUriRw(uri);
        if (oCnn == null)
        {
            return null;
        }

        try
        {
            var deleteValidation = await validation.CanDelete(id, this, uri, oCnn);
            if (!deleteValidation)
            {
                throw new Exception("Erro inesperado ao validar 0x0!");
            }
        }
        catch (SGValidationException ex)
        {
            throw new Exception(ex.Message);
        }
        catch (Exception)
        {
            throw new Exception("Erro inesperado ao validar 0x1!");
        }

        var smsalice = await reader.Read(id ?? default, oCnn);
        try
        {
            if (smsalice != null)
            {
                await writer.Delete(smsalice, nOperador, oCnn);
                if (_memoryCache is MemoryCache memCache)
                {
                    memCache.Compact(1.0);
                }
            }
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }

        return smsalice;
    }

    public virtual void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (_disposed)
            return;
        if (disposing)
        {
        //_cache?.Dispose();
        }

        _disposed = true;
    }

    private void ThrowIfDisposed()
    {
        if (_disposed)
        {
            throw new ObjectDisposedException(GetType().Name);
        }
    }
}