// 100% auto-generated by Source Genesys Core
// copyright Â© 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming
public partial class DBProValores
{
    public DBProValores(DataRow? dbRec)
    {
        if (dbRec is null)
            return;
        InitFromRecord(name =>
        {
            try
            {
                return dbRec[name];
            }
            catch
            {
                return DBNull.Value;
            }
        });
    }

    public DBProValores(SqlDataReader? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do ProValores: {ex.Message}", ex);
        }
    }

    private void InitFromRecord(Func<string, object?> getValue)
    {
        if (DBNull.Value.Equals(getValue(CampoCodigo)))
            return;
        ID = Convert.ToInt32(getValue(CampoCodigo));
        // Checkpoint Carregar 
        try
        {
            if (!DBNull.Value.Equals(getValue(DBProValoresDicInfo.Data)))
                m_FData = Convert.ToDateTime(getValue(DBProValoresDicInfo.Data));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBProValoresDicInfo.DataUltimaCorrecao)))
                m_FDataUltimaCorrecao = Convert.ToDateTime(getValue(DBProValoresDicInfo.DataUltimaCorrecao));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBProValoresDicInfo.DtAtu)))
                m_FDtAtu = Convert.ToDateTime(getValue(DBProValoresDicInfo.DtAtu));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBProValoresDicInfo.DtCad)))
                m_FDtCad = Convert.ToDateTime(getValue(DBProValoresDicInfo.DtCad));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBProValoresDicInfo.Ignorar)))
                m_FIgnorar = Convert.ToBoolean(getValue(DBProValoresDicInfo.Ignorar));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBProValoresDicInfo.PercJuros)))
                m_FPercJuros = Convert.ToDecimal(getValue(DBProValoresDicInfo.PercJuros));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBProValoresDicInfo.PercMulta)))
                m_FPercMulta = Convert.ToDecimal(getValue(DBProValoresDicInfo.PercMulta));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBProValoresDicInfo.Processo)))
                m_FProcesso = Convert.ToInt32(getValue(DBProValoresDicInfo.Processo));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBProValoresDicInfo.QuemAtu)))
                m_FQuemAtu = Convert.ToInt32(getValue(DBProValoresDicInfo.QuemAtu));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBProValoresDicInfo.QuemCad)))
                m_FQuemCad = Convert.ToInt32(getValue(DBProValoresDicInfo.QuemCad));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBProValoresDicInfo.TipoValorProcesso)))
                m_FTipoValorProcesso = Convert.ToInt32(getValue(DBProValoresDicInfo.TipoValorProcesso));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBProValoresDicInfo.ValorFinal)))
                m_FValorFinal = Convert.ToDecimal(getValue(DBProValoresDicInfo.ValorFinal));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBProValoresDicInfo.ValorJurosCorrigido)))
                m_FValorJurosCorrigido = Convert.ToDecimal(getValue(DBProValoresDicInfo.ValorJurosCorrigido));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBProValoresDicInfo.ValorMulta)))
                m_FValorMulta = Convert.ToDecimal(getValue(DBProValoresDicInfo.ValorMulta));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBProValoresDicInfo.ValorMultaCorrigido)))
                m_FValorMultaCorrigido = Convert.ToDecimal(getValue(DBProValoresDicInfo.ValorMultaCorrigido));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBProValoresDicInfo.ValorOriginal)))
                m_FValorOriginal = Convert.ToDecimal(getValue(DBProValoresDicInfo.ValorOriginal));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBProValoresDicInfo.ValorOriginalCorrigidoIndice)))
                m_FValorOriginalCorrigidoIndice = Convert.ToDecimal(getValue(DBProValoresDicInfo.ValorOriginalCorrigidoIndice));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBProValoresDicInfo.Visto)))
                m_FVisto = Convert.ToBoolean(getValue(DBProValoresDicInfo.Visto));
        }
        catch
        {
        }

        try
        {
            m_FGUID = getValue(DBProValoresDicInfo.GUID)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FIndice = getValue(DBProValoresDicInfo.Indice)?.ToString() ?? string.Empty;
        }
        catch
        {
        }
    }

    public void CarregarDadosBd(DataRow? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do ProValores: {ex.Message}", ex);
        }
    }

    public void CarregarDadosBd(SqlDataReader? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do ProValores: {ex.Message}", ex);
        }
    }
}