// 100% auto-generated by Source Genesys Core
// copyright Â© 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming 1
public partial class DBModelosDocumentos
{
    public DBModelosDocumentos(DataRow? dbRec)
    {
        if (dbRec is null)
            return;
        InitFromRecord(name =>
        {
            try
            {
                return dbRec[name];
            }
            catch
            {
                return DBNull.Value;
            }
        });
    }

    public DBModelosDocumentos(SqlDataReader? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do ModelosDocumentos: {ex.Message}", ex);
        }
    }

    private void InitFromRecord(Func<string, object?> getValue)
    {
        if (DBNull.Value.Equals(getValue(CampoCodigo)))
            return;
        ID = Convert.ToInt32(getValue(CampoCodigo));
        // Checkpoint Carregar 
        try
        {
            if (!DBNull.Value.Equals(getValue(DBModelosDocumentosDicInfo.DtAtu)))
                m_FDtAtu = Convert.ToDateTime(getValue(DBModelosDocumentosDicInfo.DtAtu));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBModelosDocumentosDicInfo.DtCad)))
                m_FDtCad = Convert.ToDateTime(getValue(DBModelosDocumentosDicInfo.DtCad));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBModelosDocumentosDicInfo.QuemAtu)))
                m_FQuemAtu = Convert.ToInt32(getValue(DBModelosDocumentosDicInfo.QuemAtu));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBModelosDocumentosDicInfo.QuemCad)))
                m_FQuemCad = Convert.ToInt32(getValue(DBModelosDocumentosDicInfo.QuemCad));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBModelosDocumentosDicInfo.TipoModeloDocumento)))
                m_FTipoModeloDocumento = Convert.ToInt32(getValue(DBModelosDocumentosDicInfo.TipoModeloDocumento));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBModelosDocumentosDicInfo.Visto)))
                m_FVisto = Convert.ToBoolean(getValue(DBModelosDocumentosDicInfo.Visto));
        }
        catch
        {
        }

        try
        {
            m_FAssinatura = getValue(DBModelosDocumentosDicInfo.Assinatura)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FCSS = getValue(DBModelosDocumentosDicInfo.CSS)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FExtra1 = getValue(DBModelosDocumentosDicInfo.Extra1)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FExtra2 = getValue(DBModelosDocumentosDicInfo.Extra2)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FExtra3 = getValue(DBModelosDocumentosDicInfo.Extra3)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FFooter = getValue(DBModelosDocumentosDicInfo.Footer)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FGUID = getValue(DBModelosDocumentosDicInfo.GUID)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FHeader = getValue(DBModelosDocumentosDicInfo.Header)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FNome = getValue(DBModelosDocumentosDicInfo.Nome)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FObjeto = getValue(DBModelosDocumentosDicInfo.Objeto)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FOutorgados = getValue(DBModelosDocumentosDicInfo.Outorgados)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FOutorgante = getValue(DBModelosDocumentosDicInfo.Outorgante)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FPoderes = getValue(DBModelosDocumentosDicInfo.Poderes)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FRemuneracao = getValue(DBModelosDocumentosDicInfo.Remuneracao)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FTestemunhas = getValue(DBModelosDocumentosDicInfo.Testemunhas)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FTitulo = getValue(DBModelosDocumentosDicInfo.Titulo)?.ToString() ?? string.Empty;
        }
        catch
        {
        }
    }

    public void CarregarDadosBd(DataRow? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do ModelosDocumentos: {ex.Message}", ex);
        }
    }

    public void CarregarDadosBd(SqlDataReader? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do ModelosDocumentos: {ex.Message}", ex);
        }
    }
}