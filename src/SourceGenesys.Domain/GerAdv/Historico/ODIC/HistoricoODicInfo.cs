// 100% auto-generated by Source Genesys Core
// copyright Â© 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#if (!MenphisSI_SG_GerAdv_DicOff)
// ReSharper disable once CheckNamespace
namespace MenphisSI.SG.GerAdv.DicInfo;
[Serializable]
public partial class DBHistoricoODicInfo : IODicInfo
{
    public ImmutableArray<DBInfoSystem> IListFields() => List;
    public ImmutableArray<DBInfoSystem> IFieldsRaw() => ListWithoutAuditor;
    public ImmutableArray<DBInfoSystem> IPkFields() => ListPk();
    public ImmutableArray<DBInfoSystem> IPkIndicesFields() => ListPkIndices();
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITabelaNome() => DBHistoricoDicInfo.TabelaNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoCodigo() => DBHistoricoDicInfo.CampoCodigo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string IPrefixo() => DBHistoricoDicInfo.TablePrefix;
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => false;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoNome() => DBHistoricoDicInfo.CampoNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string NameSpace() => nameof(GerAdv);
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TemAuditor() => true;
    private static readonly FrozenDictionary<string, DBInfoSystem> _fieldLookup = List.ToFrozenDictionary(f => f.FNome, StringComparer.OrdinalIgnoreCase);
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public DBInfoSystem? GetInfoSystemByNameField(string campo) => _fieldLookup.GetValueOrDefault(campo);
    public static string TCampoCodigo => DBHistoricoDicInfo.CampoCodigo;
    public static string TCampoNome => DBHistoricoDicInfo.CampoNome;
    public static string TTabelaNome => DBHistoricoDicInfo.TabelaNome;
    public static string TTablePrefix => DBHistoricoDicInfo.TablePrefix;
    public static ImmutableArray<DBInfoSystem> List => [DBHistoricoDicInfo.HisExtraID, DBHistoricoDicInfo.HisIDNE, DBHistoricoDicInfo.HisExtraGUID, DBHistoricoDicInfo.HisLiminarOrigem, DBHistoricoDicInfo.HisNaoPublicavel, DBHistoricoDicInfo.HisProcesso, DBHistoricoDicInfo.HisPrecatoria, DBHistoricoDicInfo.HisApenso, DBHistoricoDicInfo.HisIDInstProcesso, DBHistoricoDicInfo.HisFase, DBHistoricoDicInfo.HisData, DBHistoricoDicInfo.HisObservacao, DBHistoricoDicInfo.HisAgendado, DBHistoricoDicInfo.HisConcluido, DBHistoricoDicInfo.HisMesmaAgenda, DBHistoricoDicInfo.HisSAD, DBHistoricoDicInfo.HisResumido, DBHistoricoDicInfo.HisStatusAndamento, DBHistoricoDicInfo.HisTop, DBHistoricoDicInfo.HisGUID, DBHistoricoDicInfo.HisQuemCad, DBHistoricoDicInfo.HisDtCad, DBHistoricoDicInfo.HisQuemAtu, DBHistoricoDicInfo.HisDtAtu, DBHistoricoDicInfo.HisVisto];
    public static ImmutableArray<DBInfoSystem> ListWithoutAuditor => [DBHistoricoDicInfo.HisExtraID, DBHistoricoDicInfo.HisIDNE, DBHistoricoDicInfo.HisExtraGUID, DBHistoricoDicInfo.HisLiminarOrigem, DBHistoricoDicInfo.HisNaoPublicavel, DBHistoricoDicInfo.HisProcesso, DBHistoricoDicInfo.HisPrecatoria, DBHistoricoDicInfo.HisApenso, DBHistoricoDicInfo.HisIDInstProcesso, DBHistoricoDicInfo.HisFase, DBHistoricoDicInfo.HisData, DBHistoricoDicInfo.HisObservacao, DBHistoricoDicInfo.HisAgendado, DBHistoricoDicInfo.HisConcluido, DBHistoricoDicInfo.HisMesmaAgenda, DBHistoricoDicInfo.HisSAD, DBHistoricoDicInfo.HisResumido, DBHistoricoDicInfo.HisStatusAndamento, DBHistoricoDicInfo.HisTop, DBHistoricoDicInfo.HisGUID];

    public static ImmutableArray<DBInfoSystem> ListPk()
    {
        ImmutableArray<string> campos = ImmutableArray.CreateRange(["hisCodigo"]);
        var result = campos.Where(campo => !campo.Equals(DBHistoricoDicInfo.CampoCodigo)).Select(campo => List.FirstOrDefault(t => t.FNome == campo)).Where(item => item != null).Cast<DBInfoSystem>().Distinct().ToList();
        return result.Count > 0 ? [..result] : ImmutableArray<DBInfoSystem>.Empty;
    }

    public static ImmutableArray<DBInfoSystem> ListPkIndices()
    {
        ImmutableArray<string> campos = ImmutableArray.CreateRange(["hisCodigo"]);
        var result = campos.Where(campo => !campo.Equals(DBHistoricoDicInfo.CampoCodigo)).Select(campo => List.FirstOrDefault(t => t.FNome == campo)).Where(item => item != null).Cast<DBInfoSystem>().Distinct().ToList();
        return result.Count > 0 ? [..result] : ImmutableArray<DBInfoSystem>.Empty;
    }
}
#endif
