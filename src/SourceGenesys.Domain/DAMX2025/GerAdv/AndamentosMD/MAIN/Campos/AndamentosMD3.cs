// 100% auto-generated by Source Genesys Core
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming
public partial class DBAndamentosMD
{
    [XmlIgnore]
    private protected bool pFldFNome, pFldFProcesso, pFldFAndamento, pFldFPathFull, pFldFUNC;
    [XmlIgnore]
    private protected int m_FProcesso, m_FAndamento;
    [XmlIgnore]
    private protected string? m_FNome, m_FPathFull, m_FUNC;
    [StringLength(255, ErrorMessage = "A propriedade FNome da tabela AndamentosMD deve ter no máximo 255 caracteres.")]
    public string? FNome
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNome ?? string.Empty;
        set
        {
            pFldFNome = pFldFNome || !(m_FNome ?? string.Empty).Equals(value);
            if (pFldFNome)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FNome = trimmed.Length > 255 ? trimmed.AsSpan(0, 255).ToString() : trimmed;
            }
        }
    }

    public int FProcesso
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FProcesso;
        set
        {
            pFldFProcesso = pFldFProcesso || value != m_FProcesso;
            if (pFldFProcesso)
                m_FProcesso = value;
        }
    }

    public int FAndamento
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAndamento;
        set
        {
            pFldFAndamento = pFldFAndamento || value != m_FAndamento;
            if (pFldFAndamento)
                m_FAndamento = value;
        }
    }

    public string? FPathFull
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPathFull ?? string.Empty;
        set
        {
            pFldFPathFull = pFldFPathFull || !(m_FPathFull ?? string.Empty).Equals(value);
            if (pFldFPathFull)
                m_FPathFull = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public string? FUNC
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FUNC ?? string.Empty;
        set
        {
            pFldFUNC = pFldFUNC || !(m_FUNC ?? string.Empty).Equals(value);
            if (pFldFUNC)
                m_FUNC = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public bool IVisto() => m_FVisto;
    public int IQuemCad() => m_FQuemCad;
    public int IQuemAtu() => m_FQuemAtu;
    public DateTime IDtCad() => MDtCad;
    public DateTime IDtAtu() => MDtAtu;
    public string IDtCadDataX_DataHora() => MDtCadDataX_DataHora;
    public string IDtAtuDataX_DataHora() => MDtAtuDataX_DataHora;
    public void SetAuditor(int usuarioId) => AuditorQuem = usuarioId;
    public string IMDtCadDataX_DataHora() => MDtAtuDataX_DataHora;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITabelaName() => PTabelaNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoCodigo() => CampoCodigo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoNome() => CampoNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string IPrefixo() => PTabelaPrefixo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITypeFieldCode() => "int";
    public ImmutableArray<DBInfoSystem> IFieldsRaw() => throw new NotImplementedException();
    public ImmutableArray<DBInfoSystem> IPkFields() => throw new NotImplementedException();
    public ImmutableArray<DBInfoSystem> IPkIndicesFields() => throw new NotImplementedException();
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetID() => ID;
}