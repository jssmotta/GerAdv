// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface ITribEnderecosValidation
{
    Task<bool> ValidateReg(Models.TribEnderecos reg, ITribEnderecosService service, ITribunalReader tribunalReader, ICidadeReader cidadeReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int? id, ITribEnderecosService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class TribEnderecosValidation : ITribEnderecosValidation
{
    public async Task<bool> CanDelete(int? id, ITribEnderecosService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id == null || id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id ?? default, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.TribEnderecos reg)
    {
        if (reg.Endereco != null && reg.Endereco.Length > DBTribEnderecosDicInfo.TreEndereco.FTamanho)
            throw new SGValidationException($"Endereco deve ter no máximo {DBTribEnderecosDicInfo.TreEndereco.FTamanho} caracteres.");
        if (reg.CEP != null && reg.CEP.ClearInputCepCpfCnpj().Length > DBTribEnderecosDicInfo.TreCEP.FTamanho)
            throw new SGValidationException($"CEP deve ter no máximo {DBTribEnderecosDicInfo.TreCEP.FTamanho} caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.TribEnderecos reg, ITribEnderecosService service, ITribunalReader tribunalReader, ICidadeReader cidadeReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        // Tribunal
        if (!reg.Tribunal.IsEmptyIDNumber())
        {
            var regTribunal = await tribunalReader.Read(reg.Tribunal, oCnn);
            if (regTribunal == null || regTribunal.Id != reg.Tribunal)
            {
                throw new SGValidationException($"Tribunal não encontrado ({regTribunal?.Id}).");
            }
        }

        // Cidade
        if (!reg.Cidade.IsEmptyIDNumber())
        {
            var regCidade = await cidadeReader.Read(reg.Cidade, oCnn);
            if (regCidade == null || regCidade.Id != reg.Cidade)
            {
                throw new SGValidationException($"Cidade não encontrado ({regCidade?.Id}).");
            }
        }

        return true;
    }
}