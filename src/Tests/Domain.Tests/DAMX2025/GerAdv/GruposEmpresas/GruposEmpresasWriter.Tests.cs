// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class GruposEmpresasWriterTests
{
    private readonly Mock<IFGruposEmpresasFactory> _mockGruposEmpresasFactory;
    private readonly Mock<FGruposEmpresas> _mockFGruposEmpresas;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly GruposEmpresasWriter _gruposempresasWriter;
    public GruposEmpresasWriterTests()
    {
        _mockGruposEmpresasFactory = new Mock<IFGruposEmpresasFactory>();
        _mockFGruposEmpresas = new Mock<FGruposEmpresas>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _gruposempresasWriter = new GruposEmpresasWriter(_mockGruposEmpresasFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var gruposempresas = CreateValidGruposEmpresasModel();
        gruposempresas.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockGruposEmpresasFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFGruposEmpresas.Object);
        _mockFGruposEmpresas.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _gruposempresasWriter.WriteAsync(gruposempresas, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFGruposEmpresas.Object);
        _mockGruposEmpresasFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockGruposEmpresasFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFGruposEmpresas.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var gruposempresas = CreateValidGruposEmpresasModel();
        gruposempresas.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockGruposEmpresasFactory.Setup(x => x.CreateFromIdAsync(gruposempresas.Id, _mockConnection.Object)).ReturnsAsync(_mockFGruposEmpresas.Object);
        _mockFGruposEmpresas.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _gruposempresasWriter.WriteAsync(gruposempresas, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFGruposEmpresas.Object);
        _mockGruposEmpresasFactory.Verify(x => x.CreateFromIdAsync(gruposempresas.Id, _mockConnection.Object), Times.Once);
        _mockGruposEmpresasFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFGruposEmpresas.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var gruposempresas = CreateValidGruposEmpresasModel();
        var auditorQuem = 99;
        _mockGruposEmpresasFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFGruposEmpresas.Object);
        _mockFGruposEmpresas.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _gruposempresasWriter.WriteAsync(gruposempresas, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFGruposEmpresas.Object);
        _mockFGruposEmpresas.VerifySet(x => x.FEMail = gruposempresas.EMail, Times.Once);
        _mockFGruposEmpresas.VerifySet(x => x.FInativo = gruposempresas.Inativo, Times.Once);
        _mockFGruposEmpresas.VerifySet(x => x.FOponente = gruposempresas.Oponente, Times.Once);
        _mockFGruposEmpresas.VerifySet(x => x.FDescricao = gruposempresas.Descricao, Times.Once);
        _mockFGruposEmpresas.VerifySet(x => x.FObservacoes = gruposempresas.Observacoes, Times.Once);
        _mockFGruposEmpresas.VerifySet(x => x.FCliente = gruposempresas.Cliente, Times.Once);
        _mockFGruposEmpresas.VerifySet(x => x.FGUID = gruposempresas.GUID, Times.Once);
        _mockFGruposEmpresas.VerifySet(x => x.FIcone = gruposempresas.Icone, Times.Once);
        _mockFGruposEmpresas.VerifySet(x => x.FDespesaUnificada = gruposempresas.DespesaUnificada, Times.Once);
        _mockFGruposEmpresas.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var gruposempresas = CreateValidGruposEmpresasModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockGruposEmpresasFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _gruposempresasWriter.WriteAsync(gruposempresas, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var gruposempresas = CreateValidGruposEmpresasModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockGruposEmpresasFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFGruposEmpresas.Object);
        _mockFGruposEmpresas.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _gruposempresasWriter.WriteAsync(gruposempresas, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var gruposempresasResponse = new GruposEmpresasResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockGruposEmpresasFactory.Setup(x => x.DeleteAsync(operadorId, gruposempresasResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _gruposempresasWriter.Delete(gruposempresasResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockGruposEmpresasFactory.Verify(x => x.DeleteAsync(operadorId, gruposempresasResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var gruposempresasResponse = new GruposEmpresasResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockGruposEmpresasFactory.Setup(x => x.DeleteAsync(operadorId, gruposempresasResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _gruposempresasWriter.Delete(gruposempresasResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var gruposempresasResponse = new GruposEmpresasResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockGruposEmpresasFactory.Setup(x => x.DeleteAsync(operadorId, gruposempresasResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _gruposempresasWriter.Delete(gruposempresasResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new GruposEmpresasWriter(_mockGruposEmpresasFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new GruposEmpresasWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.GruposEmpresas CreateValidGruposEmpresasModel()
    {
        return new Models.GruposEmpresas
        {
            Id = 0,
            EMail = "test@email.com",
            Inativo = false,
            Oponente = 1,
            Descricao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Observacoes = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Cliente = 1,
            GUID = Guid.NewGuid().ToString(),
            Icone = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            DespesaUnificada = false
        };
    }
#endregion
}