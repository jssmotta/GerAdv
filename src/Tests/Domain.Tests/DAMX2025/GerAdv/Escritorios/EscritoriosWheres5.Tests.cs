// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class EscritoriosWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFEscritoriosFactory> _mockEscritoriosFactory;
    private readonly Mock<FEscritorios> _mockFEscritorios;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly EscritoriosWhere _escritoriosWhere;
    public EscritoriosWhereTests()
    {
        _mockEscritoriosFactory = new Mock<IFEscritoriosFactory>();
        _mockFEscritorios = new Mock<FEscritorios>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _escritoriosWhere = new EscritoriosWhere(_mockEscritoriosFactory.Object);
    }

    public void Dispose()
    {
        _mockEscritoriosFactory?.Reset();
        _mockFEscritorios?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
        };
    }

    private void SetupMockFEscritorios(string? CNPJ = "93016944000138", bool? Casa = false, bool? Parceria = true, string? Nome = "João", string? OAB = "AAAAAAAAAAAAA", string? Endereco = "Rua das Flores, 123", int? Cidade = 1, string? Bairro = "Centro", string? CEP = "01234-567", string? Fone = "(11) 99999-9999", string? Fax = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string? Site = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string? EMail = "test@email.com", string? OBS = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string? AdvResponsavel = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string? Secretaria = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string? InscEst = "AAAAAAAAAAAAA", bool? Correspondente = false, bool? Top = true)
    {
        _mockFEscritorios.Setup(f => f.FCNPJ).Returns(CNPJ ?? string.Empty);
        _mockFEscritorios.Setup(f => f.FCasa).Returns(Casa ?? false);
        _mockFEscritorios.Setup(f => f.FParceria).Returns(Parceria ?? false);
        _mockFEscritorios.Setup(f => f.FNome).Returns(Nome ?? string.Empty);
        _mockFEscritorios.Setup(f => f.FOAB).Returns(OAB ?? string.Empty);
        _mockFEscritorios.Setup(f => f.FEndereco).Returns(Endereco ?? string.Empty);
        _mockFEscritorios.Setup(f => f.FCidade).Returns(Cidade ?? 0);
        _mockFEscritorios.Setup(f => f.FBairro).Returns(Bairro ?? string.Empty);
        _mockFEscritorios.Setup(f => f.FCEP).Returns(CEP ?? string.Empty);
        _mockFEscritorios.Setup(f => f.FFone).Returns(Fone ?? string.Empty);
        _mockFEscritorios.Setup(f => f.FFax).Returns(Fax ?? string.Empty);
        _mockFEscritorios.Setup(f => f.FSite).Returns(Site ?? string.Empty);
        _mockFEscritorios.Setup(f => f.FEMail).Returns(EMail ?? string.Empty);
        _mockFEscritorios.Setup(f => f.FOBS).Returns(OBS ?? string.Empty);
        _mockFEscritorios.Setup(f => f.FAdvResponsavel).Returns(AdvResponsavel ?? string.Empty);
        _mockFEscritorios.Setup(f => f.FSecretaria).Returns(Secretaria ?? string.Empty);
        _mockFEscritorios.Setup(f => f.FInscEst).Returns(InscEst ?? string.Empty);
        _mockFEscritorios.Setup(f => f.FCorrespondente).Returns(Correspondente ?? false);
        _mockFEscritorios.Setup(f => f.FTop).Returns(Top ?? false);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFEscritoriosFactory>();
        // Act
        var escritoriosWhere = new EscritoriosWhere(mockFactory.Object);
        // Assert
        escritoriosWhere.Should().NotBeNull();
        escritoriosWhere.Should().BeAssignableTo<IEscritoriosWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFEscritoriosFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new EscritoriosWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnEscritoriosResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFEscritorios();
        _mockEscritoriosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFEscritorios.Object);
        // Act
        var result = _escritoriosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.CNPJ.Should().Be("93016944000138");
        result.Casa.Should().Be(false);
        result.Parceria.Should().Be(true);
        result.Nome.Should().Be("João");
        result.OAB.Should().Be("AAAAAAAAAAAAA");
        result.Endereco.Should().Be("Rua das Flores, 123");
        result.Cidade.Should().Be(1);
        result.Bairro.Should().Be("Centro");
        result.CEP.Should().Be("01234-567");
        result.Fone.Should().Be("(11) 99999-9999");
        result.Fax.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.Site.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.EMail.Should().Be("test@email.com");
        result.OBS.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.AdvResponsavel.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Secretaria.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.InscEst.Should().Be("AAAAAAAAAAAAA");
        result.Correspondente.Should().Be(false);
        result.Top.Should().Be(true);
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFEscritorios(CNPJ: null, Casa: null, Parceria: null, Nome: null, OAB: null, Endereco: null, Cidade: null, Bairro: null, CEP: null, Fone: null, Fax: null, Site: null, EMail: null, OBS: null, AdvResponsavel: null, Secretaria: null, InscEst: null, Correspondente: null, Top: null);
        _mockEscritoriosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFEscritorios.Object);
        // Act
        var result = _escritoriosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.CNPJ.Should().Be(string.Empty);
        result.Casa.Should().Be(false);
        result.Parceria.Should().Be(false);
        result.Nome.Should().Be(string.Empty);
        result.OAB.Should().Be(string.Empty);
        result.Endereco.Should().Be(string.Empty);
        result.Cidade.Should().Be(0);
        result.Bairro.Should().Be(string.Empty);
        result.CEP.Should().Be(string.Empty);
        result.Fone.Should().Be(string.Empty);
        result.Fax.Should().Be(string.Empty);
        result.Site.Should().Be(string.Empty);
        result.EMail.Should().Be(string.Empty);
        result.OBS.Should().Be(string.Empty);
        result.AdvResponsavel.Should().Be(string.Empty);
        result.Secretaria.Should().Be(string.Empty);
        result.InscEst.Should().Be(string.Empty);
        result.Correspondente.Should().Be(false);
        result.Top.Should().Be(false);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFEscritorios();
        _mockEscritoriosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFEscritorios.Object);
        // Act
        var result = _escritoriosWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockEscritoriosFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFEscritorios();
        _mockEscritoriosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFEscritorios.Object);
        // Act
        var result = _escritoriosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockEscritoriosFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFEscritorios();
        _mockEscritoriosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFEscritorios.Object);
        // Act
        var result = _escritoriosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockEscritoriosFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFEscritorios();
        _mockEscritoriosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFEscritorios.Object);
        // Act
        _escritoriosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockEscritoriosFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFEscritoriosInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFEscritorios.Setup(f => f.Dispose());
        SetupMockFEscritorios();
        _mockEscritoriosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFEscritorios.Object);
        // Act
        _escritoriosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFEscritorios.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockEscritoriosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _escritoriosWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFEscritorios(CNPJ: "93016944000138", Casa: false, Parceria: true, Nome: "João", OAB: "AAAAAAAAAAAAA", Endereco: "Rua das Flores, 123", Cidade: 1, Bairro: "Centro", CEP: "01234-567", Fone: "(11) 99999-9999", Fax: "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", Site: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", EMail: "test@email.com", OBS: "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", AdvResponsavel: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", Secretaria: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", InscEst: "AAAAAAAAAAAAA", Correspondente: false, Top: true);
        _mockEscritoriosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFEscritorios.Object);
        // Act
        var result = _escritoriosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.CNPJ.Should().Be("93016944000138");
        result.Casa.Should().Be(false);
        result.Parceria.Should().Be(true);
        result.Nome.Should().Be("João");
        result.OAB.Should().Be("AAAAAAAAAAAAA");
        result.Endereco.Should().Be("Rua das Flores, 123");
        result.Cidade.Should().Be(1);
        result.Bairro.Should().Be("Centro");
        result.CEP.Should().Be("01234-567");
        result.Fone.Should().Be("(11) 99999-9999");
        result.Fax.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.Site.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.EMail.Should().Be("test@email.com");
        result.OBS.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.AdvResponsavel.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Secretaria.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.InscEst.Should().Be("AAAAAAAAAAAAA");
        result.Correspondente.Should().Be(false);
        result.Top.Should().Be(true);
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "Nome = @{DBEscritoriosDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBEscritoriosDicInfo.CampoNome}", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"),
        };
        SetupMockFEscritorios();
        _mockEscritoriosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFEscritorios.Object);
        // Act
        _escritoriosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockEscritoriosFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBEscritoriosDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }
#region DateTime Tests
#endregion
#endregion
}