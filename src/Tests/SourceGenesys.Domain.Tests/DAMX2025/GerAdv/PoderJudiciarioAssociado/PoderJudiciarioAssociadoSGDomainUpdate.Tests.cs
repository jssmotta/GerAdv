// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// ============================================
// ARQUIVO: DBUpdateTests.cs.txt (Principal)
// ============================================
namespace MenphisSI.GerAdv.Tests;
public class DBPoderJudiciarioAssociadoUpdate : IDisposable
{
    private readonly DBPoderJudiciarioAssociado _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBPoderJudiciarioAssociadoUpdate()
    {
        _instance = new DBPoderJudiciarioAssociado();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void DefaultConstructor_ShouldCreateInstance_WithDefaultValues()
    {
        // Act
        var poderjudiciarioassociado = new DBPoderJudiciarioAssociado();
        // Assert
        poderjudiciarioassociado.Should().NotBeNull();
        poderjudiciarioassociado.ITabelaName().Should().Be("PoderJudiciarioAssociado");
        poderjudiciarioassociado.ID.Should().Be(0);
    }

    [Fact]
    public void AllProperties_WithValidValues_ShouldSetCorrectly()
    {
        // Arrange
        var poderjudiciarioassociado = new DBPoderJudiciarioAssociado
        {
            FJusticaNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FAreaNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FTribunalNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FForoNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FSubDivisaoNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FCidadeNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FGUID = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        };
        // Assert - All properties should be set poderjudiciarioassociado.FJusticaNome.Should().Be( "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        poderjudiciarioassociado.FAreaNome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        poderjudiciarioassociado.FTribunalNome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        poderjudiciarioassociado.FForoNome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        poderjudiciarioassociado.FSubDivisaoNome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        poderjudiciarioassociado.FCidadeNome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        poderjudiciarioassociado.FGUID.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public void StringProperties_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var poderjudiciarioassociado = new DBPoderJudiciarioAssociado();
        var longString = new string ('X', 300);
        poderjudiciarioassociado.FJusticaNome = longString; // MAX: 255
        poderjudiciarioassociado.FAreaNome = longString; // MAX: 255
        poderjudiciarioassociado.FTribunalNome = longString; // MAX: 255
        poderjudiciarioassociado.FForoNome = longString; // MAX: 255
        poderjudiciarioassociado.FSubDivisaoNome = longString; // MAX: 255
        poderjudiciarioassociado.FCidadeNome = longString; // MAX: 255
        poderjudiciarioassociado.FGUID = longString; // MAX: 100
        // Assert - All properties should be set poderjudiciarioassociado.FJusticaNome.Should().HaveLength(255);
        poderjudiciarioassociado.FAreaNome.Should().HaveLength(255);
        poderjudiciarioassociado.FTribunalNome.Should().HaveLength(255);
        poderjudiciarioassociado.FForoNome.Should().HaveLength(255);
        poderjudiciarioassociado.FSubDivisaoNome.Should().HaveLength(255);
        poderjudiciarioassociado.FCidadeNome.Should().HaveLength(255);
        poderjudiciarioassociado.FGUID.Should().HaveLength(100);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FJusticaNome_Property_ShouldAcceptValidNames(string JusticaNome)
    {
        // Arrange
        var poderjudiciarioassociado = new DBPoderJudiciarioAssociado
        {
            // Act
            FJusticaNome = JusticaNome
        };
        // Assert
        poderjudiciarioassociado.FJusticaNome.Should().Be(JusticaNome);
    }

    [Fact]
    public void FJusticaNome_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var poderjudiciarioassociado = new DBPoderJudiciarioAssociado
        {
            // Act
            FJusticaNome = null
        };
        // Assert
        poderjudiciarioassociado.FJusticaNome.Should().Be(string.Empty);
    }

    [Fact]
    public void FJusticaNome_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var poderjudiciarioassociado = new DBPoderJudiciarioAssociado();
        var longName = new string ('A', 255 + 10); // Exceeds 255 character limit
        // Act
        poderjudiciarioassociado.FJusticaNome = longName;
        // Assert
        poderjudiciarioassociado.FJusticaNome.Should().HaveLength(255);
    }

    [Fact]
    public void FJusticaNome_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FJusticaNome = null;
        // Act
        var result = _instance.FJusticaNome;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FJusticaNome_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FJusticaNome = expectedValue;
        // Act
        var result = _instance.FJusticaNome;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FJusticaNome_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFJusticaNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FJusticaNome = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FJusticaNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FJusticaNome_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFJusticaNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FJusticaNome = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FJusticaNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FJusticaNome_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFJusticaNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FJusticaNome = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FJusticaNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FJusticaNome_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFJusticaNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FJusticaNome = value;
        // Act
        _instance.FJusticaNome = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FJusticaNome_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFJusticaNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FJusticaNome = "Original Value";
        // Act
        _instance.FJusticaNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FJusticaNome_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFJusticaNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FJusticaNome = "First Value";
        // Act
        _instance.FJusticaNome = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FJusticaNome_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFJusticaNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FJusticaNome = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FJusticaNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FJusticaNome_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FJusticaNome = input;
        // Assert
        Assert.Equal(expected, _instance.FJusticaNome);
    }

    [Fact]
    public void FJusticaNome_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFJusticaNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FJusticaNome = null;
        // Act
        _instance.FJusticaNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FJusticaNome_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFJusticaNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FJusticaNome = "Existing Value";
        // Act
        _instance.FJusticaNome = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FAreaNome_Property_ShouldAcceptValidNames(string AreaNome)
    {
        // Arrange
        var poderjudiciarioassociado = new DBPoderJudiciarioAssociado
        {
            // Act
            FAreaNome = AreaNome
        };
        // Assert
        poderjudiciarioassociado.FAreaNome.Should().Be(AreaNome);
    }

    [Fact]
    public void FAreaNome_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var poderjudiciarioassociado = new DBPoderJudiciarioAssociado
        {
            // Act
            FAreaNome = null
        };
        // Assert
        poderjudiciarioassociado.FAreaNome.Should().Be(string.Empty);
    }

    [Fact]
    public void FAreaNome_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var poderjudiciarioassociado = new DBPoderJudiciarioAssociado();
        var longName = new string ('A', 255 + 10); // Exceeds 255 character limit
        // Act
        poderjudiciarioassociado.FAreaNome = longName;
        // Assert
        poderjudiciarioassociado.FAreaNome.Should().HaveLength(255);
    }

    [Fact]
    public void FAreaNome_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FAreaNome = null;
        // Act
        var result = _instance.FAreaNome;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FAreaNome_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FAreaNome = expectedValue;
        // Act
        var result = _instance.FAreaNome;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FAreaNome_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFAreaNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAreaNome = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FAreaNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAreaNome_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFAreaNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAreaNome = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FAreaNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FAreaNome_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFAreaNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FAreaNome = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FAreaNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAreaNome_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFAreaNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FAreaNome = value;
        // Act
        _instance.FAreaNome = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAreaNome_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFAreaNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAreaNome = "Original Value";
        // Act
        _instance.FAreaNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAreaNome_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFAreaNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAreaNome = "First Value";
        // Act
        _instance.FAreaNome = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAreaNome_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFAreaNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAreaNome = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FAreaNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FAreaNome_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FAreaNome = input;
        // Assert
        Assert.Equal(expected, _instance.FAreaNome);
    }

    [Fact]
    public void FAreaNome_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFAreaNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAreaNome = null;
        // Act
        _instance.FAreaNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAreaNome_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFAreaNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAreaNome = "Existing Value";
        // Act
        _instance.FAreaNome = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FTribunalNome_Property_ShouldAcceptValidNames(string TribunalNome)
    {
        // Arrange
        var poderjudiciarioassociado = new DBPoderJudiciarioAssociado
        {
            // Act
            FTribunalNome = TribunalNome
        };
        // Assert
        poderjudiciarioassociado.FTribunalNome.Should().Be(TribunalNome);
    }

    [Fact]
    public void FTribunalNome_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var poderjudiciarioassociado = new DBPoderJudiciarioAssociado
        {
            // Act
            FTribunalNome = null
        };
        // Assert
        poderjudiciarioassociado.FTribunalNome.Should().Be(string.Empty);
    }

    [Fact]
    public void FTribunalNome_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var poderjudiciarioassociado = new DBPoderJudiciarioAssociado();
        var longName = new string ('A', 255 + 10); // Exceeds 255 character limit
        // Act
        poderjudiciarioassociado.FTribunalNome = longName;
        // Assert
        poderjudiciarioassociado.FTribunalNome.Should().HaveLength(255);
    }

    [Fact]
    public void FTribunalNome_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FTribunalNome = null;
        // Act
        var result = _instance.FTribunalNome;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FTribunalNome_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FTribunalNome = expectedValue;
        // Act
        var result = _instance.FTribunalNome;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FTribunalNome_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFTribunalNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FTribunalNome = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FTribunalNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FTribunalNome_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFTribunalNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FTribunalNome = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FTribunalNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FTribunalNome_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFTribunalNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FTribunalNome = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FTribunalNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FTribunalNome_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFTribunalNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FTribunalNome = value;
        // Act
        _instance.FTribunalNome = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FTribunalNome_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFTribunalNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FTribunalNome = "Original Value";
        // Act
        _instance.FTribunalNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FTribunalNome_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFTribunalNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FTribunalNome = "First Value";
        // Act
        _instance.FTribunalNome = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FTribunalNome_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFTribunalNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FTribunalNome = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FTribunalNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FTribunalNome_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FTribunalNome = input;
        // Assert
        Assert.Equal(expected, _instance.FTribunalNome);
    }

    [Fact]
    public void FTribunalNome_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFTribunalNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FTribunalNome = null;
        // Act
        _instance.FTribunalNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FTribunalNome_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFTribunalNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FTribunalNome = "Existing Value";
        // Act
        _instance.FTribunalNome = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FForoNome_Property_ShouldAcceptValidNames(string ForoNome)
    {
        // Arrange
        var poderjudiciarioassociado = new DBPoderJudiciarioAssociado
        {
            // Act
            FForoNome = ForoNome
        };
        // Assert
        poderjudiciarioassociado.FForoNome.Should().Be(ForoNome);
    }

    [Fact]
    public void FForoNome_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var poderjudiciarioassociado = new DBPoderJudiciarioAssociado
        {
            // Act
            FForoNome = null
        };
        // Assert
        poderjudiciarioassociado.FForoNome.Should().Be(string.Empty);
    }

    [Fact]
    public void FForoNome_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var poderjudiciarioassociado = new DBPoderJudiciarioAssociado();
        var longName = new string ('A', 255 + 10); // Exceeds 255 character limit
        // Act
        poderjudiciarioassociado.FForoNome = longName;
        // Assert
        poderjudiciarioassociado.FForoNome.Should().HaveLength(255);
    }

    [Fact]
    public void FForoNome_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FForoNome = null;
        // Act
        var result = _instance.FForoNome;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FForoNome_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FForoNome = expectedValue;
        // Act
        var result = _instance.FForoNome;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FForoNome_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFForoNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FForoNome = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FForoNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FForoNome_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFForoNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FForoNome = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FForoNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FForoNome_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFForoNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FForoNome = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FForoNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FForoNome_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFForoNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FForoNome = value;
        // Act
        _instance.FForoNome = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FForoNome_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFForoNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FForoNome = "Original Value";
        // Act
        _instance.FForoNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FForoNome_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFForoNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FForoNome = "First Value";
        // Act
        _instance.FForoNome = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FForoNome_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFForoNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FForoNome = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FForoNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FForoNome_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FForoNome = input;
        // Assert
        Assert.Equal(expected, _instance.FForoNome);
    }

    [Fact]
    public void FForoNome_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFForoNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FForoNome = null;
        // Act
        _instance.FForoNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FForoNome_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFForoNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FForoNome = "Existing Value";
        // Act
        _instance.FForoNome = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FSubDivisaoNome_Property_ShouldAcceptValidNames(string SubDivisaoNome)
    {
        // Arrange
        var poderjudiciarioassociado = new DBPoderJudiciarioAssociado
        {
            // Act
            FSubDivisaoNome = SubDivisaoNome
        };
        // Assert
        poderjudiciarioassociado.FSubDivisaoNome.Should().Be(SubDivisaoNome);
    }

    [Fact]
    public void FSubDivisaoNome_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var poderjudiciarioassociado = new DBPoderJudiciarioAssociado
        {
            // Act
            FSubDivisaoNome = null
        };
        // Assert
        poderjudiciarioassociado.FSubDivisaoNome.Should().Be(string.Empty);
    }

    [Fact]
    public void FSubDivisaoNome_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var poderjudiciarioassociado = new DBPoderJudiciarioAssociado();
        var longName = new string ('A', 255 + 10); // Exceeds 255 character limit
        // Act
        poderjudiciarioassociado.FSubDivisaoNome = longName;
        // Assert
        poderjudiciarioassociado.FSubDivisaoNome.Should().HaveLength(255);
    }

    [Fact]
    public void FSubDivisaoNome_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FSubDivisaoNome = null;
        // Act
        var result = _instance.FSubDivisaoNome;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FSubDivisaoNome_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FSubDivisaoNome = expectedValue;
        // Act
        var result = _instance.FSubDivisaoNome;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FSubDivisaoNome_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFSubDivisaoNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FSubDivisaoNome = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FSubDivisaoNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSubDivisaoNome_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFSubDivisaoNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FSubDivisaoNome = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FSubDivisaoNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FSubDivisaoNome_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFSubDivisaoNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FSubDivisaoNome = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FSubDivisaoNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSubDivisaoNome_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFSubDivisaoNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FSubDivisaoNome = value;
        // Act
        _instance.FSubDivisaoNome = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSubDivisaoNome_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFSubDivisaoNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSubDivisaoNome = "Original Value";
        // Act
        _instance.FSubDivisaoNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSubDivisaoNome_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFSubDivisaoNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSubDivisaoNome = "First Value";
        // Act
        _instance.FSubDivisaoNome = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSubDivisaoNome_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFSubDivisaoNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FSubDivisaoNome = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FSubDivisaoNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FSubDivisaoNome_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FSubDivisaoNome = input;
        // Assert
        Assert.Equal(expected, _instance.FSubDivisaoNome);
    }

    [Fact]
    public void FSubDivisaoNome_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFSubDivisaoNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSubDivisaoNome = null;
        // Act
        _instance.FSubDivisaoNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSubDivisaoNome_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFSubDivisaoNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSubDivisaoNome = "Existing Value";
        // Act
        _instance.FSubDivisaoNome = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FCidadeNome_Property_ShouldAcceptValidNames(string CidadeNome)
    {
        // Arrange
        var poderjudiciarioassociado = new DBPoderJudiciarioAssociado
        {
            // Act
            FCidadeNome = CidadeNome
        };
        // Assert
        poderjudiciarioassociado.FCidadeNome.Should().Be(CidadeNome);
    }

    [Fact]
    public void FCidadeNome_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var poderjudiciarioassociado = new DBPoderJudiciarioAssociado
        {
            // Act
            FCidadeNome = null
        };
        // Assert
        poderjudiciarioassociado.FCidadeNome.Should().Be(string.Empty);
    }

    [Fact]
    public void FCidadeNome_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var poderjudiciarioassociado = new DBPoderJudiciarioAssociado();
        var longName = new string ('A', 255 + 10); // Exceeds 255 character limit
        // Act
        poderjudiciarioassociado.FCidadeNome = longName;
        // Assert
        poderjudiciarioassociado.FCidadeNome.Should().HaveLength(255);
    }

    [Fact]
    public void FCidadeNome_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FCidadeNome = null;
        // Act
        var result = _instance.FCidadeNome;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FCidadeNome_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FCidadeNome = expectedValue;
        // Act
        var result = _instance.FCidadeNome;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FCidadeNome_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFCidadeNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FCidadeNome = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FCidadeNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCidadeNome_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFCidadeNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FCidadeNome = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FCidadeNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FCidadeNome_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFCidadeNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FCidadeNome = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FCidadeNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCidadeNome_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFCidadeNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FCidadeNome = value;
        // Act
        _instance.FCidadeNome = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCidadeNome_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFCidadeNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCidadeNome = "Original Value";
        // Act
        _instance.FCidadeNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCidadeNome_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFCidadeNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCidadeNome = "First Value";
        // Act
        _instance.FCidadeNome = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCidadeNome_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFCidadeNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FCidadeNome = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FCidadeNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FCidadeNome_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FCidadeNome = input;
        // Assert
        Assert.Equal(expected, _instance.FCidadeNome);
    }

    [Fact]
    public void FCidadeNome_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFCidadeNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCidadeNome = null;
        // Act
        _instance.FCidadeNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCidadeNome_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBPoderJudiciarioAssociado).GetField("pFldFCidadeNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCidadeNome = "Existing Value";
        // Act
        _instance.FCidadeNome = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

#region Testes de GUID
    [Fact]
    public void GUID_DefaultValue_ShouldBeEmpty()
    {
        Assert.Equal(string.Empty, _instance.FGUID);
    }

    [Fact]
    public void GUID_SetValidGUID_ShouldStore()
    {
        var guid = Guid.NewGuid().ToString();
        _instance.FGUID = guid;
        Assert.Equal(guid, _instance.FGUID);
    }

#endregion
    [Fact]
    public void TabelaNome_Property_ShouldReturnCorrectTableName()
    {
        // Arrange
        var poderjudiciarioassociado = new DBPoderJudiciarioAssociado();
        // Act & Assert
        poderjudiciarioassociado.TabelaNome.Should().Be("PoderJudiciarioAssociado");
    }

    public virtual void Dispose()
    {
    // Cleanup resources if needed
    }
}