// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class Agenda2AgendaService
{
    private static (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterAgenda2Agenda filtro)
    {
        var parameters = new List<SqlParameter>();
        if (filtro.Master != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAgenda2AgendaDicInfo.Master)}", filtro.Master));
        }

        if (filtro.Master_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAgenda2AgendaDicInfo.Master)}_end", filtro.Master_end));
        }

        if (filtro.Agenda != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAgenda2AgendaDicInfo.Agenda)}", filtro.Agenda));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAgenda2AgendaDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
        }

        if (filtro.Codigo_filtro_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAgenda2AgendaDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
        }

        if (filtro.LogicalOperator.IsEmpty() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        if (!filtro.Master.IsEmpty() && filtro.Master_end.IsEmpty())
        {
            cWhere.Append(filtro.Master <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAgenda2AgendaDicInfo.PTabelaNome}].[{DBAgenda2AgendaDicInfo.Master}] >= @{nameof(DBAgenda2AgendaDicInfo.Master)}");
        }
        else
        {
            cWhere.Append((filtro.Master <= 0 && filtro.Master_end <= 0) ? string.Empty : (!(filtro.Master <= 0) && !(filtro.Master_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAgenda2AgendaDicInfo.Master} BETWEEN @{nameof(DBAgenda2AgendaDicInfo.Master)} AND @{nameof(DBAgenda2AgendaDicInfo.Master)}_end" : !(filtro.Master <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAgenda2AgendaDicInfo.Master} = @{nameof(DBAgenda2AgendaDicInfo.Master)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAgenda2AgendaDicInfo.Master} <= @{nameof(DBAgenda2AgendaDicInfo.Master)}_end");
        }

        cWhere.Append(filtro.Agenda <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAgenda2AgendaDicInfo.PTabelaNome}].[{DBAgenda2AgendaDicInfo.Agenda}] = @{nameof(DBAgenda2AgendaDicInfo.Agenda)}");
        if (!filtro.Codigo_filtro.IsEmpty() && filtro.Codigo_filtro_end.IsEmpty())
        {
            cWhere.Append(filtro.Codigo_filtro <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAgenda2AgendaDicInfo.PTabelaNome}].[{DBAgenda2AgendaDicInfo.CampoCodigo}] >= @{nameof(DBAgenda2AgendaDicInfo.CampoCodigo)}");
        }
        else
        {
            cWhere.Append((filtro.Codigo_filtro <= 0 && filtro.Codigo_filtro_end <= 0) ? string.Empty : (!(filtro.Codigo_filtro <= 0) && !(filtro.Codigo_filtro_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAgenda2AgendaDicInfo.CampoCodigo} BETWEEN @{nameof(DBAgenda2AgendaDicInfo.CampoCodigo)} AND @{nameof(DBAgenda2AgendaDicInfo.CampoCodigo)}_end" : !(filtro.Codigo_filtro <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAgenda2AgendaDicInfo.CampoCodigo} = @{nameof(DBAgenda2AgendaDicInfo.CampoCodigo)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAgenda2AgendaDicInfo.CampoCodigo} <= @{nameof(DBAgenda2AgendaDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private static string ApplyWildCard(char wildcardChar, string value)
    {
        if (wildcardChar == '\0' || wildcardChar == ' ')
        {
            return value;
        }

        var result = $"{wildcardChar}{value.Replace(" ", wildcardChar.ToString())}{wildcardChar}";
        return result;
    }

    private async Task<IEnumerable<Agenda2AgendaResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}