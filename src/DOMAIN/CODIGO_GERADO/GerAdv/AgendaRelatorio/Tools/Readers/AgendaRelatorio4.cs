// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Readers;
public partial class AgendaRelatorioReader(IFAgendaRelatorioFactory agendarelatorioFactory) : IAgendaRelatorioReader
{
    private readonly IFAgendaRelatorioFactory _agendarelatorioFactory = agendarelatorioFactory;
    public async Task<IEnumerable<AgendaRelatorioResponseAll>> Listar(int max, string uri, string cWhere, List<SqlParameter> parameters, string order, CancellationToken cancellationToken) => await ListarTabela(BuildSqlQuery(DBAgendaRelatorio.CamposSqlX, cWhere, order, max), parameters, uri, caching: DevourerOne.PCachingDefault, max: max, cancellationToken: cancellationToken);
    private async Task<IEnumerable<AgendaRelatorioResponseAll>> ListarTabela(string sql, List<SqlParameter> parameters, string uri, bool caching = DevourerOne.PCachingDefault, int max = 200, CancellationToken cancellationToken = default)
    {
        var result = new List<AgendaRelatorioResponseAll>(max);
        await using var connection = Configuracoes.GetConnectionByUri(uri);
        await using var cmd = new SqlCommand(cmdText: ConfiguracoesDBT.CmdSql(sql), connection: connection?.InnerConnection)
        {
            CommandTimeout = 30
        };
        foreach (var param in parameters)
        {
            if (!cmd.Parameters.Contains(param.ParameterName))
            {
                var newParam = new SqlParameter(param.ParameterName, param.Value)
                {
                    SqlDbType = param.SqlDbType,
                    Direction = param.Direction,
                    Size = param.Size,
                    Precision = param.Precision,
                    Scale = param.Scale
                };
                cmd.Parameters.Add(newParam);
            }
        }

        await using var reader = await cmd.ExecuteReaderAsync(CommandBehavior.SingleResult);
        while (await reader.ReadAsync())
        {
            if (cancellationToken.IsCancellationRequested)
                return result;
            result.Add(ReadAll(_agendarelatorioFactory.CreateFromReader(reader), reader)!);
        }

        return result;
    }

    public AgendaRelatorioResponse? Read(SG.GerAdv.DBAgendaRelatorio dbRec) // Track 002.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var agendarelatorio = new AgendaRelatorioResponse
        {
            Id = dbRec.ID,
            Data = dbRec.FData ?? string.Empty,
            Processo = dbRec.FProcesso,
            ParaNome = dbRec.FParaNome ?? string.Empty,
            ParaPessoas = dbRec.FParaPessoas ?? string.Empty,
            BoxAudiencia = dbRec.FBoxAudiencia ?? string.Empty,
            BoxAudienciaMobile = dbRec.FBoxAudienciaMobile ?? string.Empty,
            NomeAdvogado = dbRec.FNomeAdvogado ?? string.Empty,
            NomeForo = dbRec.FNomeForo ?? string.Empty,
            NomeJustica = dbRec.FNomeJustica ?? string.Empty,
            NomeArea = dbRec.FNomeArea ?? string.Empty,
        };
        return agendarelatorio;
    }

    public AgendaRelatorioResponseAll? ReadAll(SG.GerAdv.DBAgendaRelatorio dbRec, IDataRecord dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var agendarelatorio = new AgendaRelatorioResponseAll
        {
            Id = dbRec.ID,
            Data = dbRec.FData ?? string.Empty,
            Processo = dbRec.FProcesso,
            ParaNome = dbRec.FParaNome ?? string.Empty,
            ParaPessoas = dbRec.FParaPessoas ?? string.Empty,
            BoxAudiencia = dbRec.FBoxAudiencia ?? string.Empty,
            BoxAudienciaMobile = dbRec.FBoxAudienciaMobile ?? string.Empty,
            NomeAdvogado = dbRec.FNomeAdvogado ?? string.Empty,
            NomeForo = dbRec.FNomeForo ?? string.Empty,
            NomeJustica = dbRec.FNomeJustica ?? string.Empty,
            NomeArea = dbRec.FNomeArea ?? string.Empty,
        };
        try
        {
            agendarelatorio.NroPastaProcessos = dr[DBProcessosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return agendarelatorio;
    }
}