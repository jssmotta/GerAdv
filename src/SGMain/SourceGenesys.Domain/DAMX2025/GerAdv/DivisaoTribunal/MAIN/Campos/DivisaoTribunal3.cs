// 100% auto-generated by Source Genesys Core
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming 1
public partial class DBDivisaoTribunal
{
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool pFldFGUID, pFldFNumCodigo, pFldFJustica, pFldFNomeEspecial, pFldFArea, pFldFCidade, pFldFForo, pFldFTribunal, pFldFCodigoDiv, pFldFEndereco, pFldFFone, pFldFFax, pFldFCEP, pFldFObs, pFldFEMail, pFldFAndar, pFldFEtiqueta, pFldFBold;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected int m_FNumCodigo, m_FJustica, m_FArea, m_FCidade, m_FForo, m_FTribunal;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected string? m_FGUID, m_FNomeEspecial, m_FCodigoDiv, m_FEndereco, m_FFone, m_FFax, m_FCEP, m_FObs, m_FEMail, m_FAndar;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool m_FEtiqueta, m_FBold;
    // Tracking Code: 20250503
    [StringLength(100, ErrorMessage = "A propriedade FGUID da tabela DivisaoTribunal deve ter no máximo 100 caracteres.")]
    public virtual string? FGUID
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FGUID ?? string.Empty;
        set
        {
            pFldFGUID = pFldFGUID || !(m_FGUID ?? string.Empty).Equals(value);
            if (pFldFGUID)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FGUID = trimmed.Length > 100 ? trimmed.AsSpan(0, 100).ToString() : trimmed;
            }
        }
    }

    public virtual int FNumCodigo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNumCodigo;
        set
        {
            pFldFNumCodigo = pFldFNumCodigo || value != m_FNumCodigo;
            if (pFldFNumCodigo)
                m_FNumCodigo = value;
        }
    }

    public virtual int FJustica
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FJustica;
        set
        {
            pFldFJustica = pFldFJustica || value != m_FJustica;
            if (pFldFJustica)
                m_FJustica = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(255, ErrorMessage = "A propriedade FNomeEspecial da tabela DivisaoTribunal deve ter no máximo 255 caracteres.")]
    public virtual string? FNomeEspecial
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNomeEspecial ?? string.Empty;
        set
        {
            pFldFNomeEspecial = pFldFNomeEspecial || !(m_FNomeEspecial ?? string.Empty).Equals(value);
            if (pFldFNomeEspecial)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FNomeEspecial = trimmed.Length > 255 ? trimmed.AsSpan(0, 255).ToString() : trimmed;
            }
        }
    }

    public virtual int FArea
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FArea;
        set
        {
            pFldFArea = pFldFArea || value != m_FArea;
            if (pFldFArea)
                m_FArea = value;
        }
    }

    public virtual int FCidade
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCidade;
        set
        {
            pFldFCidade = pFldFCidade || value != m_FCidade;
            if (pFldFCidade)
                m_FCidade = value;
        }
    }

    public virtual int FForo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FForo;
        set
        {
            pFldFForo = pFldFForo || value != m_FForo;
            if (pFldFForo)
                m_FForo = value;
        }
    }

    public virtual int FTribunal
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FTribunal;
        set
        {
            pFldFTribunal = pFldFTribunal || value != m_FTribunal;
            if (pFldFTribunal)
                m_FTribunal = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(5, ErrorMessage = "A propriedade FCodigoDiv da tabela DivisaoTribunal deve ter no máximo 5 caracteres.")]
    public virtual string? FCodigoDiv
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCodigoDiv ?? string.Empty;
        set
        {
            pFldFCodigoDiv = pFldFCodigoDiv || !(m_FCodigoDiv ?? string.Empty).Equals(value);
            if (pFldFCodigoDiv)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FCodigoDiv = trimmed.Length > 5 ? trimmed.AsSpan(0, 5).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(40, ErrorMessage = "A propriedade FEndereco da tabela DivisaoTribunal deve ter no máximo 40 caracteres.")]
    public virtual string? FEndereco
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEndereco ?? string.Empty;
        set
        {
            pFldFEndereco = pFldFEndereco || !(m_FEndereco ?? string.Empty).Equals(value);
            if (pFldFEndereco)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FEndereco = trimmed.Length > 40 ? trimmed.AsSpan(0, 40).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    public virtual string? FFone
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FFone ?? string.Empty;
        set
        {
            pFldFFone = pFldFFone || !(m_FFone ?? string.Empty).Equals(value);
            if (pFldFFone)
                m_FFone = value.trim().FixAbc() ?? string.Empty;
        }
    }

    // Tracking Code: 20250503
    public virtual string? FFax
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FFax ?? string.Empty;
        set
        {
            pFldFFax = pFldFFax || !(m_FFax ?? string.Empty).Equals(value);
            if (pFldFFax)
                m_FFax = value.trim().FixAbc() ?? string.Empty;
        }
    }

    // Tracking Code: 20250503
    [StringLength(10, ErrorMessage = "A propriedade FCEP da tabela DivisaoTribunal deve ter no máximo 10 caracteres.")]
    public virtual string? FCEP
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCEP ?? string.Empty;
        set
        {
            pFldFCEP = pFldFCEP || !(m_FCEP ?? string.Empty).Equals(value);
            if (pFldFCEP)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FCEP = trimmed.Length > 10 ? trimmed.AsSpan(0, 10).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    public virtual string? FObs
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FObs ?? string.Empty;
        set
        {
            pFldFObs = pFldFObs || !(m_FObs ?? string.Empty).Equals(value);
            if (pFldFObs)
                m_FObs = value.trim().FixAbc() ?? string.Empty;
        }
    }

    // Tracking Code: 20250503
    [StringLength(150, ErrorMessage = "A propriedade FEMail da tabela DivisaoTribunal deve ter no máximo 150 caracteres.")]
    public virtual string? FEMail
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEMail ?? string.Empty;
        set
        {
            pFldFEMail = pFldFEMail || !(m_FEMail ?? string.Empty).Equals(value);
            if (pFldFEMail)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FEMail = trimmed.Length > 150 ? trimmed.AsSpan(0, 150).ToString() : trimmed;
                if (m_FEMail.IsValidEmail())
                    return;
                throw new ArgumentException("E-mail inválido ou não informado corretamente.", nameof(value));
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(12, ErrorMessage = "A propriedade FAndar da tabela DivisaoTribunal deve ter no máximo 12 caracteres.")]
    public virtual string? FAndar
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAndar ?? string.Empty;
        set
        {
            pFldFAndar = pFldFAndar || !(m_FAndar ?? string.Empty).Equals(value);
            if (pFldFAndar)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FAndar = trimmed.Length > 12 ? trimmed.AsSpan(0, 12).ToString() : trimmed;
            }
        }
    }

    public virtual bool FEtiqueta
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEtiqueta;
        set
        {
            pFldFEtiqueta = pFldFEtiqueta || value != m_FEtiqueta;
            if (pFldFEtiqueta)
                m_FEtiqueta = value;
        }
    }

    public virtual bool FBold
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FBold;
        set
        {
            pFldFBold = pFldFBold || value != m_FBold;
            if (pFldFBold)
                m_FBold = value;
        }
    }

    public void SetAuditor(int usuarioId) => AuditorQuem = usuarioId;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITabelaName() => PTabelaNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoCodigo() => CampoCodigo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoNome() => CampoNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string IPrefixo() => PTabelaPrefixo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITypeFieldCode() => "int";
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IdIsIdentity() => false;
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => false;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetID() => ID;
}