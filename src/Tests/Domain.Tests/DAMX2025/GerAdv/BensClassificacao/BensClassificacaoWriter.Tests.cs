// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class BensClassificacaoWriterTests
{
    private readonly Mock<IFBensClassificacaoFactory> _mockBensClassificacaoFactory;
    private readonly Mock<FBensClassificacao> _mockFBensClassificacao;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly BensClassificacaoWriter _bensclassificacaoWriter;
    public BensClassificacaoWriterTests()
    {
        _mockBensClassificacaoFactory = new Mock<IFBensClassificacaoFactory>();
        _mockFBensClassificacao = new Mock<FBensClassificacao>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _bensclassificacaoWriter = new BensClassificacaoWriter(_mockBensClassificacaoFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var bensclassificacao = CreateValidBensClassificacaoModel();
        bensclassificacao.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockBensClassificacaoFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFBensClassificacao.Object);
        _mockFBensClassificacao.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _bensclassificacaoWriter.WriteAsync(bensclassificacao, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFBensClassificacao.Object);
        _mockBensClassificacaoFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockBensClassificacaoFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFBensClassificacao.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var bensclassificacao = CreateValidBensClassificacaoModel();
        bensclassificacao.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockBensClassificacaoFactory.Setup(x => x.CreateFromIdAsync(bensclassificacao.Id, _mockConnection.Object)).ReturnsAsync(_mockFBensClassificacao.Object);
        _mockFBensClassificacao.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _bensclassificacaoWriter.WriteAsync(bensclassificacao, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFBensClassificacao.Object);
        _mockBensClassificacaoFactory.Verify(x => x.CreateFromIdAsync(bensclassificacao.Id, _mockConnection.Object), Times.Once);
        _mockBensClassificacaoFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFBensClassificacao.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var bensclassificacao = CreateValidBensClassificacaoModel();
        var auditorQuem = 99;
        _mockBensClassificacaoFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFBensClassificacao.Object);
        _mockFBensClassificacao.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _bensclassificacaoWriter.WriteAsync(bensclassificacao, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFBensClassificacao.Object);
        _mockFBensClassificacao.VerifySet(x => x.FNome = bensclassificacao.Nome, Times.Once);
        _mockFBensClassificacao.VerifySet(x => x.FGUID = bensclassificacao.GUID, Times.Once);
        _mockFBensClassificacao.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var bensclassificacao = CreateValidBensClassificacaoModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockBensClassificacaoFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _bensclassificacaoWriter.WriteAsync(bensclassificacao, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var bensclassificacao = CreateValidBensClassificacaoModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockBensClassificacaoFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFBensClassificacao.Object);
        _mockFBensClassificacao.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _bensclassificacaoWriter.WriteAsync(bensclassificacao, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var bensclassificacaoResponse = new BensClassificacaoResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockBensClassificacaoFactory.Setup(x => x.DeleteAsync(operadorId, bensclassificacaoResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _bensclassificacaoWriter.Delete(bensclassificacaoResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockBensClassificacaoFactory.Verify(x => x.DeleteAsync(operadorId, bensclassificacaoResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var bensclassificacaoResponse = new BensClassificacaoResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockBensClassificacaoFactory.Setup(x => x.DeleteAsync(operadorId, bensclassificacaoResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _bensclassificacaoWriter.Delete(bensclassificacaoResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var bensclassificacaoResponse = new BensClassificacaoResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockBensClassificacaoFactory.Setup(x => x.DeleteAsync(operadorId, bensclassificacaoResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _bensclassificacaoWriter.Delete(bensclassificacaoResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new BensClassificacaoWriter(_mockBensClassificacaoFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new BensClassificacaoWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.BensClassificacao CreateValidBensClassificacaoModel()
    {
        return new Models.BensClassificacao
        {
            Id = 0,
            Nome = "João",
            GUID = Guid.NewGuid().ToString()
        };
    }
#endregion
}