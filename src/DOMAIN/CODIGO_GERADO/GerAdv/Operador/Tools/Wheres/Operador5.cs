// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Wheres;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IOperadorWhere
{
    OperadorResponse Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn);
}

public partial class OperadorWhere(IFOperadorFactory operadorFactory) : IOperadorWhere
{
    private readonly IFOperadorFactory _operadorFactory = operadorFactory ?? throw new ArgumentNullException(nameof(operadorFactory));
    public OperadorResponse Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn)
    {
        using var dbRec = _operadorFactory.CreateFromParameters(parameters, oCnn, sqlWhere: where);
        var operador = new OperadorResponse
        {
            Id = dbRec.ID,
            EMail = dbRec.FEMail ?? string.Empty,
            Pasta = dbRec.FPasta ?? string.Empty,
            Telefonista = dbRec.FTelefonista,
            Master = dbRec.FMaster,
            Nome = dbRec.FNome ?? string.Empty,
            Nick = dbRec.FNick ?? string.Empty,
            Ramal = dbRec.FRamal ?? string.Empty,
            CadID = dbRec.FCadID,
            CadCod = dbRec.FCadCod,
            Excluido = dbRec.FExcluido,
            Situacao = dbRec.FSituacao,
            Computador = dbRec.FComputador,
            MinhaDescricao = dbRec.FMinhaDescricao ?? string.Empty,
            EMailNet = dbRec.FEMailNet ?? string.Empty,
            OnlineIP = dbRec.FOnlineIP ?? string.Empty,
            OnLine = dbRec.FOnLine,
            SysOp = dbRec.FSysOp,
            StatusId = dbRec.FStatusId,
            StatusMessage = dbRec.FStatusMessage ?? string.Empty,
            IsFinanceiro = dbRec.FIsFinanceiro,
            GUID = dbRec.FGUID ?? string.Empty,
            Top = dbRec.FTop,
            Sexo = dbRec.FSexo,
            Basico = dbRec.FBasico,
            Externo = dbRec.FExterno,
            EMailConfirmado = dbRec.FEMailConfirmado,
            SuporteNomeSolicitante = dbRec.FSuporteNomeSolicitante ?? string.Empty,
            SuporteIpUltimoAcesso = dbRec.FSuporteIpUltimoAcesso ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FUltimoLogoff, out DateTime XUltimoLogoff))
        {
            operador.UltimoLogoff = dbRec.FUltimoLogoff;
            operador.UltimoLogoff_date = XUltimoLogoff;
        }

        if (DateTime.TryParse(dbRec.FDataLimiteReset, out DateTime XDataLimiteReset))
        {
            operador.DataLimiteReset = dbRec.FDataLimiteReset;
            operador.DataLimiteReset_date = XDataLimiteReset;
        }

        if (DateTime.TryParse(dbRec.FSuporteMaxAge, out DateTime XSuporteMaxAge))
        {
            operador.SuporteMaxAge = dbRec.FSuporteMaxAge;
            operador.SuporteMaxAge_date = XSuporteMaxAge;
        }

        if (DateTime.TryParse(dbRec.FSuporteUltimoAcesso, out DateTime XSuporteUltimoAcesso))
        {
            operador.SuporteUltimoAcesso = dbRec.FSuporteUltimoAcesso;
            operador.SuporteUltimoAcesso_date = XSuporteUltimoAcesso;
        }

        return operador;
    }
}