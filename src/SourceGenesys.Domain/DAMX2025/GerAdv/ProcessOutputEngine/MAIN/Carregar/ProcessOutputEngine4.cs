// 100% auto-generated by Source Genesys Core
// copyright Â© 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming
public partial class DBProcessOutputEngine
{
    public DBProcessOutputEngine(DataRow? dbRec)
    {
        if (dbRec is null)
            return;
        InitFromRecord(name =>
        {
            try
            {
                return dbRec[name];
            }
            catch
            {
                return DBNull.Value;
            }
        });
    }

    public DBProcessOutputEngine(SqlDataReader? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do ProcessOutputEngine: {ex.Message}", ex);
        }
    }

    private void InitFromRecord(Func<string, object?> getValue)
    {
        if (DBNull.Value.Equals(getValue(CampoCodigo)))
            return;
        ID = Convert.ToInt32(getValue(CampoCodigo));
        // Checkpoint Carregar 
        try
        {
            if (!DBNull.Value.Equals(getValue(DBProcessOutputEngineDicInfo.Administrador)))
                m_FAdministrador = Convert.ToBoolean(getValue(DBProcessOutputEngineDicInfo.Administrador));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBProcessOutputEngineDicInfo.DisabledItem)))
                m_FDisabledItem = Convert.ToBoolean(getValue(DBProcessOutputEngineDicInfo.DisabledItem));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBProcessOutputEngineDicInfo.IDModulo)))
                m_FIDModulo = Convert.ToInt32(getValue(DBProcessOutputEngineDicInfo.IDModulo));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBProcessOutputEngineDicInfo.IsOnlyProcesso)))
                m_FIsOnlyProcesso = Convert.ToBoolean(getValue(DBProcessOutputEngineDicInfo.IsOnlyProcesso));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBProcessOutputEngineDicInfo.MyID)))
                m_FMyID = Convert.ToInt32(getValue(DBProcessOutputEngineDicInfo.MyID));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBProcessOutputEngineDicInfo.OutputSource)))
                m_FOutputSource = Convert.ToInt32(getValue(DBProcessOutputEngineDicInfo.OutputSource));
        }
        catch
        {
        }

        try
        {
            m_FCampo = getValue(DBProcessOutputEngineDicInfo.Campo)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FDatabase = getValue(DBProcessOutputEngineDicInfo.Database)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FGUID = getValue(DBProcessOutputEngineDicInfo.GUID)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FNome = getValue(DBProcessOutputEngineDicInfo.Nome)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FOutput = getValue(DBProcessOutputEngineDicInfo.Output)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FTabela = getValue(DBProcessOutputEngineDicInfo.Tabela)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FValor = getValue(DBProcessOutputEngineDicInfo.Valor)?.ToString() ?? string.Empty;
        }
        catch
        {
        }
    }

    public void CarregarDadosBd(DataRow? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do ProcessOutputEngine: {ex.Message}", ex);
        }
    }

    public void CarregarDadosBd(SqlDataReader? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do ProcessOutputEngine: {ex.Message}", ex);
        }
    }
}