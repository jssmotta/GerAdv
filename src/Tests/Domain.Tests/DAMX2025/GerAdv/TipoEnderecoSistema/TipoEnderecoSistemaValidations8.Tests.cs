// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class TipoEnderecoSistemaValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFTipoEnderecoSistemaFactory> _mockTipoEnderecoSistemaFactory;
    private readonly Mock<ITipoEnderecoSistemaReader> _mockReader;
    private readonly TipoEnderecoSistemaValidation _validation;
    private readonly Mock<ITipoEnderecoSistemaService> _mockTipoEnderecoSistemaService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly TipoEnderecoSistemaService _service;
    private readonly string _validUri = "test-uri";
    public TipoEnderecoSistemaValidationTests()
    {
        _mockTipoEnderecoSistemaFactory = new Mock<IFTipoEnderecoSistemaFactory>();
        _mockReader = new Mock<ITipoEnderecoSistemaReader>();
        _validation = new TipoEnderecoSistemaValidation();
        _mockTipoEnderecoSistemaService = new Mock<ITipoEnderecoSistemaService>();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

#region Class Structure Tests
    [Fact]
    public void TipoEnderecoSistemaValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<ITipoEnderecoSistemaValidation>();
    }

    [Fact]
    public void TipoEnderecoSistemaValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(TipoEnderecoSistemaValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void TipoEnderecoSistemaValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(TipoEnderecoSistemaValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.TipoEnderecoSistema CreateValidTipoEnderecoSistema()
    {
        return new Models.TipoEnderecoSistema
        {
            Id = 1,
            Nome = "João"
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockTipoEnderecoSistemaService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterTipoEnderecoSistema>(), It.IsAny<string>())).ReturnsAsync(new List<TipoEnderecoSistemaResponseAll>());
    // Setup other mocks but don't override the TipoEnderecoSistemas service mock
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockTipoEnderecoSistemaService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterTipoEnderecoSistema>(), It.IsAny<string>())).ReturnsAsync(new List<TipoEnderecoSistemaResponseAll>());
    // Setup other mocks but don't override the TipoEnderecoSistemas service mock
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var tipoenderecosistema = new Models.TipoEnderecoSistema
        {
            Id = 1,
            Nome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(tipoenderecosistema, _mockTipoEnderecoSistemaService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockTipoEnderecoSistemaService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region ValidateReg Required Nome Method Tests
    [Fact]
    public async Task ValidateReg_WithEmptyNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var tipoenderecosistema = CreateValidTipoEnderecoSistema();
        tipoenderecosistema.Nome = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(tipoenderecosistema, _mockTipoEnderecoSistemaService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var tipoenderecosistema = CreateValidTipoEnderecoSistema();
        tipoenderecosistema.Nome = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(tipoenderecosistema, _mockTipoEnderecoSistemaService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataNome_ShouldReturnTrue()
    {
        // Arrange
        var tipoenderecosistema = CreateValidTipoEnderecoSistema();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(tipoenderecosistema, _mockTipoEnderecoSistemaService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var tipoenderecosistema = CreateValidTipoEnderecoSistema();
        tipoenderecosistema.Nome = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(tipoenderecosistema, _mockTipoEnderecoSistemaService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
#region ValidateReg Required GUID Method Tests
    [Fact]
    public async Task ValidateReg_WithEmptyGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var tipoenderecosistema = CreateValidTipoEnderecoSistema();
        tipoenderecosistema.GUID = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(tipoenderecosistema, _mockTipoEnderecoSistemaService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var tipoenderecosistema = CreateValidTipoEnderecoSistema();
        tipoenderecosistema.GUID = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(tipoenderecosistema, _mockTipoEnderecoSistemaService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataGUID_ShouldReturnTrue()
    {
        // Arrange
        var tipoenderecosistema = CreateValidTipoEnderecoSistema();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(tipoenderecosistema, _mockTipoEnderecoSistemaService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var tipoenderecosistema = CreateValidTipoEnderecoSistema();
        tipoenderecosistema.GUID = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(tipoenderecosistema, _mockTipoEnderecoSistemaService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}