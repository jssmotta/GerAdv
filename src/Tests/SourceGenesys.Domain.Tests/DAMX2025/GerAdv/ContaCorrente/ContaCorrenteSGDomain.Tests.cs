// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBContaCorrente - Nome da classe (ex: DBClientes)
/// ContaCorrente - Nome da tabela (ex: Clientes)
/// cto - Prefixo dos campos (ex: cli)
/// ctoCodigo - Nome do campo código (ex: cliCodigo)
/// ctoData - Nome do campo nome (ex: cliNome)
/// DBContaCorrente.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBContaCorrenteTests : IDisposable
{
    private readonly DBContaCorrente _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBContaCorrenteTests()
    {
        _instance = new DBContaCorrente();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("ctoCodigo", typeof(int));
        dt.Columns.Add("ctoQuemCad", typeof(int));
        dt.Columns.Add("ctoDtCad", typeof(DateTime));
        dt.Columns.Add("ctoQuemAtu", typeof(int));
        dt.Columns.Add("ctoDtAtu", typeof(DateTime));
        dt.Columns.Add("ctoVisto", typeof(bool));
        dt.Columns.Add("ctoCIAcordo", typeof(int));
        dt.Columns.Add("ctoGUID", typeof(string));
        dt.Columns.Add("ctoQuitado", typeof(string));
        dt.Columns.Add("ctoIDContrato", typeof(int));
        dt.Columns.Add("ctoQuitadoID", typeof(int));
        dt.Columns.Add("ctoDebitoID", typeof(int));
        dt.Columns.Add("ctoLivroCaixaID", typeof(int));
        dt.Columns.Add("ctoSucumbencia", typeof(string));
        dt.Columns.Add("ctoDistRegra", typeof(string));
        dt.Columns.Add("ctoDtOriginal", typeof(DateTime));
        dt.Columns.Add("ctoProcesso", typeof(int));
        dt.Columns.Add("ctoParcelaX", typeof(int));
        dt.Columns.Add("ctoValor", typeof(decimal));
        dt.Columns.Add("ctoData", typeof(string));
        dt.Columns.Add("ctoCliente", typeof(int));
        dt.Columns.Add("ctoHistorico", typeof(string));
        dt.Columns.Add("ctoContrato", typeof(string));
        dt.Columns.Add("ctoPago", typeof(string));
        dt.Columns.Add("ctoDistribuir", typeof(string));
        dt.Columns.Add("ctoLC", typeof(string));
        dt.Columns.Add("ctoIDHTrab", typeof(int));
        dt.Columns.Add("ctoNroParcelas", typeof(int));
        dt.Columns.Add("ctoValorPrincipal", typeof(decimal));
        dt.Columns.Add("ctoParcelaPrincipalID", typeof(int));
        dt.Columns.Add("ctoHide", typeof(string));
        dt.Columns.Add("ctoDataPgto", typeof(DateTime));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("ContaCorrente", DBContaCorrente.PTabelaNome);
        Assert.Equal(" ContaCorrente.* ", DBContaCorrente.CamposSqlX);
        Assert.Equal("ctoCodigo", DBContaCorrente.CampoCodigo);
        Assert.Equal("ctoData", DBContaCorrente.CampoNome);
        Assert.Equal("cto", DBContaCorrente.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBContaCorrente();
        Assert.Equal(0, instance.ID);
        Assert.Equal("ContaCorrente", instance.ITabelaName());
        Assert.Equal("cto", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBContaCorrente((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBContaCorrente((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["ctoCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBContaCorrente(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("ContaCorrente", cadastro.ITabelaName());
        Assert.Equal("ctoCodigo", cadastro.ICampoCodigo());
        Assert.Equal("ctoData", cadastro.ICampoNome());
        Assert.Equal("cto", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBContaCorrente.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBContaCorrente.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBContaCorrente.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBContaCorrente();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBContaCorrente();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnTrue()
    {
        Assert.True(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void CIAcordo_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCIAcordo = value;
        Assert.Equal(value, _instance.FCIAcordo);
    }

    [Fact]
    public void CIAcordo_DefaultValue_ShouldBeZero()
    {
        var instance = new DBContaCorrente();
        Assert.Equal(0, instance.FCIAcordo);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void GUID_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FGUID = input;
        Assert.Equal(expected, _instance.FGUID);
    }

    [Fact]
    public void GUID_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FGUID = longString;
        Assert.True(_instance.FGUID.Length <= 100);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Quitado_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FQuitado = value;
        Assert.Equal(value, _instance.FQuitado);
    }

    [Fact]
    public void Quitado_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBContaCorrente();
        Assert.False(instance.FQuitado);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Quitado_ShouldAcceptIntegerValues(int value)
{
    _instance.FQuitado = value;
    Assert.Equal(value, _instance.FQuitado);
}

[Fact]
public void Quitado_DefaultValue_ShouldBeZero()
{
    var instance = new DBContaCorrente();
    Assert.Equal(0, instance.Quitado);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Quitado_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FQuitado = dateString;
    Assert.Equal(dateString, _instance.FQuitado);
}

[Fact]
public void Quitado_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBContaCorrente();
    Assert.Equal(string.Empty, instance.Quitado);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Quitado_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FQuitado = input;
        Assert.Equal(expected, _instance.FQuitado);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FQuitado = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Quitado_ValidEmail_ShouldAccept(string email)
{
    _instance.FQuitado = email;
    Assert.Equal(email, _instance.FQuitado);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Quitado_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FQuitado = email);
}
*/
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void IDContrato_ShouldAcceptIntegerValues(int value)
    {
        _instance.FIDContrato = value;
        Assert.Equal(value, _instance.FIDContrato);
    }

    [Fact]
    public void IDContrato_DefaultValue_ShouldBeZero()
    {
        var instance = new DBContaCorrente();
        Assert.Equal(0, instance.FIDContrato);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void QuitadoID_ShouldAcceptIntegerValues(int value)
    {
        _instance.FQuitadoID = value;
        Assert.Equal(value, _instance.FQuitadoID);
    }

    [Fact]
    public void QuitadoID_DefaultValue_ShouldBeZero()
    {
        var instance = new DBContaCorrente();
        Assert.Equal(0, instance.FQuitadoID);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void DebitoID_ShouldAcceptIntegerValues(int value)
    {
        _instance.FDebitoID = value;
        Assert.Equal(value, _instance.FDebitoID);
    }

    [Fact]
    public void DebitoID_DefaultValue_ShouldBeZero()
    {
        var instance = new DBContaCorrente();
        Assert.Equal(0, instance.FDebitoID);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void LivroCaixaID_ShouldAcceptIntegerValues(int value)
    {
        _instance.FLivroCaixaID = value;
        Assert.Equal(value, _instance.FLivroCaixaID);
    }

    [Fact]
    public void LivroCaixaID_DefaultValue_ShouldBeZero()
    {
        var instance = new DBContaCorrente();
        Assert.Equal(0, instance.FLivroCaixaID);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Sucumbencia_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FSucumbencia = value;
        Assert.Equal(value, _instance.FSucumbencia);
    }

    [Fact]
    public void Sucumbencia_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBContaCorrente();
        Assert.False(instance.FSucumbencia);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Sucumbencia_ShouldAcceptIntegerValues(int value)
{
    _instance.FSucumbencia = value;
    Assert.Equal(value, _instance.FSucumbencia);
}

[Fact]
public void Sucumbencia_DefaultValue_ShouldBeZero()
{
    var instance = new DBContaCorrente();
    Assert.Equal(0, instance.Sucumbencia);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Sucumbencia_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FSucumbencia = dateString;
    Assert.Equal(dateString, _instance.FSucumbencia);
}

[Fact]
public void Sucumbencia_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBContaCorrente();
    Assert.Equal(string.Empty, instance.Sucumbencia);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Sucumbencia_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FSucumbencia = input;
        Assert.Equal(expected, _instance.FSucumbencia);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FSucumbencia = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Sucumbencia_ValidEmail_ShouldAccept(string email)
{
    _instance.FSucumbencia = email;
    Assert.Equal(email, _instance.FSucumbencia);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Sucumbencia_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FSucumbencia = email);
}
*/
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void DistRegra_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FDistRegra = value;
        Assert.Equal(value, _instance.FDistRegra);
    }

    [Fact]
    public void DistRegra_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBContaCorrente();
        Assert.False(instance.FDistRegra);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void DistRegra_ShouldAcceptIntegerValues(int value)
{
    _instance.FDistRegra = value;
    Assert.Equal(value, _instance.FDistRegra);
}

[Fact]
public void DistRegra_DefaultValue_ShouldBeZero()
{
    var instance = new DBContaCorrente();
    Assert.Equal(0, instance.DistRegra);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void DistRegra_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FDistRegra = dateString;
    Assert.Equal(dateString, _instance.FDistRegra);
}

[Fact]
public void DistRegra_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBContaCorrente();
    Assert.Equal(string.Empty, instance.DistRegra);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void DistRegra_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FDistRegra = input;
        Assert.Equal(expected, _instance.FDistRegra);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FDistRegra = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void DistRegra_ValidEmail_ShouldAccept(string email)
{
    _instance.FDistRegra = email;
    Assert.Equal(email, _instance.FDistRegra);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void DistRegra_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FDistRegra = email);
}
*/
    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void DtOriginal_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FDtOriginal = dateString;
        Assert.Equal(dateString, _instance.FDtOriginal);
    }

    [Fact]
    public void DtOriginal_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBContaCorrente();
        Assert.Equal(string.Empty, instance.FDtOriginal);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Processo_ShouldAcceptIntegerValues(int value)
    {
        _instance.FProcesso = value;
        Assert.Equal(value, _instance.FProcesso);
    }

    [Fact]
    public void Processo_DefaultValue_ShouldBeZero()
    {
        var instance = new DBContaCorrente();
        Assert.Equal(0, instance.FProcesso);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void ParcelaX_ShouldAcceptIntegerValues(int value)
    {
        _instance.FParcelaX = value;
        Assert.Equal(value, _instance.FParcelaX);
    }

    [Fact]
    public void ParcelaX_DefaultValue_ShouldBeZero()
    {
        var instance = new DBContaCorrente();
        Assert.Equal(0, instance.FParcelaX);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cliente_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCliente = value;
        Assert.Equal(value, _instance.FCliente);
    }

    [Fact]
    public void Cliente_DefaultValue_ShouldBeZero()
    {
        var instance = new DBContaCorrente();
        Assert.Equal(0, instance.FCliente);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Historico_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FHistorico = input;
        Assert.Equal(expected, _instance.FHistorico);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Contrato_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FContrato = value;
        Assert.Equal(value, _instance.FContrato);
    }

    [Fact]
    public void Contrato_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBContaCorrente();
        Assert.False(instance.FContrato);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Contrato_ShouldAcceptIntegerValues(int value)
{
    _instance.FContrato = value;
    Assert.Equal(value, _instance.FContrato);
}

[Fact]
public void Contrato_DefaultValue_ShouldBeZero()
{
    var instance = new DBContaCorrente();
    Assert.Equal(0, instance.Contrato);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Contrato_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FContrato = dateString;
    Assert.Equal(dateString, _instance.FContrato);
}

[Fact]
public void Contrato_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBContaCorrente();
    Assert.Equal(string.Empty, instance.Contrato);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Contrato_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FContrato = input;
        Assert.Equal(expected, _instance.FContrato);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FContrato = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Contrato_ValidEmail_ShouldAccept(string email)
{
    _instance.FContrato = email;
    Assert.Equal(email, _instance.FContrato);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Contrato_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FContrato = email);
}
*/
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Pago_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FPago = value;
        Assert.Equal(value, _instance.FPago);
    }

    [Fact]
    public void Pago_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBContaCorrente();
        Assert.False(instance.FPago);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Pago_ShouldAcceptIntegerValues(int value)
{
    _instance.FPago = value;
    Assert.Equal(value, _instance.FPago);
}

[Fact]
public void Pago_DefaultValue_ShouldBeZero()
{
    var instance = new DBContaCorrente();
    Assert.Equal(0, instance.Pago);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Pago_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FPago = dateString;
    Assert.Equal(dateString, _instance.FPago);
}

[Fact]
public void Pago_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBContaCorrente();
    Assert.Equal(string.Empty, instance.Pago);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Pago_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FPago = input;
        Assert.Equal(expected, _instance.FPago);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FPago = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Pago_ValidEmail_ShouldAccept(string email)
{
    _instance.FPago = email;
    Assert.Equal(email, _instance.FPago);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Pago_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FPago = email);
}
*/
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Distribuir_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FDistribuir = value;
        Assert.Equal(value, _instance.FDistribuir);
    }

    [Fact]
    public void Distribuir_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBContaCorrente();
        Assert.False(instance.FDistribuir);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Distribuir_ShouldAcceptIntegerValues(int value)
{
    _instance.FDistribuir = value;
    Assert.Equal(value, _instance.FDistribuir);
}

[Fact]
public void Distribuir_DefaultValue_ShouldBeZero()
{
    var instance = new DBContaCorrente();
    Assert.Equal(0, instance.Distribuir);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Distribuir_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FDistribuir = dateString;
    Assert.Equal(dateString, _instance.FDistribuir);
}

[Fact]
public void Distribuir_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBContaCorrente();
    Assert.Equal(string.Empty, instance.Distribuir);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Distribuir_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FDistribuir = input;
        Assert.Equal(expected, _instance.FDistribuir);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FDistribuir = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Distribuir_ValidEmail_ShouldAccept(string email)
{
    _instance.FDistribuir = email;
    Assert.Equal(email, _instance.FDistribuir);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Distribuir_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FDistribuir = email);
}
*/
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void LC_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FLC = value;
        Assert.Equal(value, _instance.FLC);
    }

    [Fact]
    public void LC_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBContaCorrente();
        Assert.False(instance.FLC);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void LC_ShouldAcceptIntegerValues(int value)
{
    _instance.FLC = value;
    Assert.Equal(value, _instance.FLC);
}

[Fact]
public void LC_DefaultValue_ShouldBeZero()
{
    var instance = new DBContaCorrente();
    Assert.Equal(0, instance.LC);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void LC_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FLC = dateString;
    Assert.Equal(dateString, _instance.FLC);
}

[Fact]
public void LC_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBContaCorrente();
    Assert.Equal(string.Empty, instance.LC);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void LC_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FLC = input;
        Assert.Equal(expected, _instance.FLC);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FLC = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void LC_ValidEmail_ShouldAccept(string email)
{
    _instance.FLC = email;
    Assert.Equal(email, _instance.FLC);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void LC_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FLC = email);
}
*/
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void IDHTrab_ShouldAcceptIntegerValues(int value)
    {
        _instance.FIDHTrab = value;
        Assert.Equal(value, _instance.FIDHTrab);
    }

    [Fact]
    public void IDHTrab_DefaultValue_ShouldBeZero()
    {
        var instance = new DBContaCorrente();
        Assert.Equal(0, instance.FIDHTrab);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void NroParcelas_ShouldAcceptIntegerValues(int value)
    {
        _instance.FNroParcelas = value;
        Assert.Equal(value, _instance.FNroParcelas);
    }

    [Fact]
    public void NroParcelas_DefaultValue_ShouldBeZero()
    {
        var instance = new DBContaCorrente();
        Assert.Equal(0, instance.FNroParcelas);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void ParcelaPrincipalID_ShouldAcceptIntegerValues(int value)
    {
        _instance.FParcelaPrincipalID = value;
        Assert.Equal(value, _instance.FParcelaPrincipalID);
    }

    [Fact]
    public void ParcelaPrincipalID_DefaultValue_ShouldBeZero()
    {
        var instance = new DBContaCorrente();
        Assert.Equal(0, instance.FParcelaPrincipalID);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Hide_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FHide = value;
        Assert.Equal(value, _instance.FHide);
    }

    [Fact]
    public void Hide_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBContaCorrente();
        Assert.False(instance.FHide);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Hide_ShouldAcceptIntegerValues(int value)
{
    _instance.FHide = value;
    Assert.Equal(value, _instance.FHide);
}

[Fact]
public void Hide_DefaultValue_ShouldBeZero()
{
    var instance = new DBContaCorrente();
    Assert.Equal(0, instance.Hide);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Hide_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FHide = dateString;
    Assert.Equal(dateString, _instance.FHide);
}

[Fact]
public void Hide_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBContaCorrente();
    Assert.Equal(string.Empty, instance.Hide);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Hide_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FHide = input;
        Assert.Equal(expected, _instance.FHide);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FHide = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Hide_ValidEmail_ShouldAccept(string email)
{
    _instance.FHide = email;
    Assert.Equal(email, _instance.FHide);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Hide_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FHide = email);
}
*/
    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void DataPgto_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FDataPgto = dateString;
        Assert.Equal(dateString, _instance.FDataPgto);
    }

    [Fact]
    public void DataPgto_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBContaCorrente();
        Assert.Equal(string.Empty, instance.FDataPgto);
    }

    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}