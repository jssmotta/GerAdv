// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// ============================================
// ARQUIVO: DBUpdateTests.cs.txt (Principal)
// ============================================
namespace MenphisSI.GerAdv.Tests;
public class DBClientesSociosUpdate : IDisposable
{
    private readonly DBClientesSocios _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBClientesSociosUpdate()
    {
        _instance = new DBClientesSocios();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void DefaultConstructor_ShouldCreateInstance_WithDefaultValues()
    {
        // Act
        var clientessocios = new DBClientesSocios();
        // Assert
        clientessocios.Should().NotBeNull();
        clientessocios.ITabelaName().Should().Be("ClientesSocios");
        clientessocios.ID.Should().Be(0);
    }

    [Fact]
    public void AllProperties_WithValidValues_ShouldSetCorrectly()
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            FGUID = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FQualificacao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FSite = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FRepresentanteLegal = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FEndereco = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FBairro = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FCEP = "AAAAAAAAAA",
            FRG = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FCPF = "40392285029",
            FFone = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FParticipacao = "AAAAAAAAAA",
            FCargo = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FEMail = "menphis@menphis.com.br",
            FObs = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FCNH = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FCNPJ = "93016944000138",
            FInscEst = "AAAAAAAAAAAAAAA",
            FSocioEmpresaAdminNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FEnderecoSocio = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FBairroSocio = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FCEPSocio = "AAAAAAAAAA",
            FFax
            FClass = "A",
        };
        // Assert - All properties should be set clientessocios.FGUID.Should().Be( "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        clientessocios.FQualificacao.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        clientessocios.FNome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        clientessocios.FSite.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        clientessocios.FRepresentanteLegal.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        clientessocios.FEndereco.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        clientessocios.FBairro.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        clientessocios.FCEP.Should().Be("AAAAAAAAAA");
        clientessocios.FRG.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        clientessocios.FCPF.Should().Be("40392285029");
        clientessocios.FFone.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        clientessocios.FParticipacao.Should().Be("AAAAAAAAAA");
        clientessocios.FCargo.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        clientessocios.FEMail.Should().Be("menphis@menphis.com.br");
        clientessocios.FObs.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        clientessocios.FCNH.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        clientessocios.FCNPJ.Should().Be("93016944000138");
        clientessocios.FInscEst.Should().Be("AAAAAAAAAAAAAAA");
        clientessocios.FSocioEmpresaAdminNome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        clientessocios.FEnderecoSocio.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        clientessocios.FBairroSocio.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        clientessocios.FCEPSocio.Should().Be("AAAAAAAAAA");
        clientessocios.FFax.Should().Be
        clientessocios.FClass.Should().Be("A");
    }

    [Fact]
    public void StringProperties_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var clientessocios = new DBClientesSocios();
        var longString = new string ('X', 300);
        clientessocios.FGUID = longString; // MAX: 150
        clientessocios.FQualificacao = longString; // MAX: 100
        clientessocios.FNome = longString; // MAX: 50
        clientessocios.FSite = longString; // MAX: 150
        clientessocios.FRepresentanteLegal = longString; // MAX: 50
        clientessocios.FEndereco = longString; // MAX: 80
        clientessocios.FBairro = longString; // MAX: 50
        clientessocios.FCEP = longString; // MAX: 10
        clientessocios.FRG = longString; // MAX: 30
        clientessocios.FParticipacao = longString; // MAX: 10
        clientessocios.FCargo = longString; // MAX: 50
        clientessocios.FCNH = longString; // MAX: 100
        clientessocios.FInscEst = longString; // MAX: 15
        clientessocios.FSocioEmpresaAdminNome = longString; // MAX: 80
        clientessocios.FEnderecoSocio = longString; // MAX: 80
        clientessocios.FBairroSocio = longString; // MAX: 50
        clientessocios.FCEPSocio = longString; // MAX: 10
        clientessocios.FFax = longString; // MAX: 2048
        clientessocios.FClass = longString; // MAX: 1
        // Assert - All properties should be set clientessocios.FGUID.Should().HaveLength(150);
        clientessocios.FQualificacao.Should().HaveLength(100);
        clientessocios.FNome.Should().HaveLength(50);
        clientessocios.FSite.Should().HaveLength(150);
        clientessocios.FRepresentanteLegal.Should().HaveLength(50);
        clientessocios.FEndereco.Should().HaveLength(80);
        clientessocios.FBairro.Should().HaveLength(50);
        clientessocios.FCEP.Should().HaveLength(10);
        clientessocios.FRG.Should().HaveLength(30);
        clientessocios.FParticipacao.Should().HaveLength(10);
        clientessocios.FCargo.Should().HaveLength(50);
        clientessocios.FCNH.Should().HaveLength(100);
        clientessocios.FInscEst.Should().HaveLength(15);
        clientessocios.FSocioEmpresaAdminNome.Should().HaveLength(80);
        clientessocios.FEnderecoSocio.Should().HaveLength(80);
        clientessocios.FBairroSocio.Should().HaveLength(50);
        clientessocios.FCEPSocio.Should().HaveLength(10);
        clientessocios.FFax.Should().HaveLength(300);
        clientessocios.FClass.Should().HaveLength(1);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FQualificacao_Property_ShouldAcceptValidNames(string Qualificacao)
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FQualificacao = Qualificacao
        };
        // Assert
        clientessocios.FQualificacao.Should().Be(Qualificacao);
    }

    [Fact]
    public void FQualificacao_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FQualificacao = null
        };
        // Assert
        clientessocios.FQualificacao.Should().Be(string.Empty);
    }

    [Fact]
    public void FQualificacao_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var clientessocios = new DBClientesSocios();
        var longName = new string ('A', 100 + 10); // Exceeds 100 character limit
        // Act
        clientessocios.FQualificacao = longName;
        // Assert
        clientessocios.FQualificacao.Should().HaveLength(100);
    }

    [Fact]
    public void FQualificacao_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FQualificacao = null;
        // Act
        var result = _instance.FQualificacao;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FQualificacao_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FQualificacao = expectedValue;
        // Act
        var result = _instance.FQualificacao;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FQualificacao_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFQualificacao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FQualificacao = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FQualificacao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FQualificacao_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFQualificacao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FQualificacao = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FQualificacao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FQualificacao_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFQualificacao", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FQualificacao = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FQualificacao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FQualificacao_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFQualificacao", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FQualificacao = value;
        // Act
        _instance.FQualificacao = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FQualificacao_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFQualificacao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FQualificacao = "Original Value";
        // Act
        _instance.FQualificacao = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FQualificacao_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFQualificacao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FQualificacao = "First Value";
        // Act
        _instance.FQualificacao = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FQualificacao_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFQualificacao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FQualificacao = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FQualificacao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FQualificacao_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FQualificacao = input;
        // Assert
        Assert.Equal(expected, _instance.FQualificacao);
    }

    [Fact]
    public void FQualificacao_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFQualificacao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FQualificacao = null;
        // Act
        _instance.FQualificacao = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FQualificacao_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFQualificacao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FQualificacao = "Existing Value";
        // Act
        _instance.FQualificacao = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("João Silva", "84210454079", "joao@test.com")]
    [InlineData("Maria Santos", "42276926015", "maria@test.com")]
    public void Properties_WithValidData_ShouldSetCorrectly(string nome, string cpf, string email)
    {
        // Arrange
        var clientessocios = new DBClientesSocios();
        // Act
        clientessocios.FNome = nome;
        clientessocios.FCPF = cpf;
        clientessocios.FEMail = email;
        // Assert
        clientessocios.FNome.Should().Be(nome);
        clientessocios.FCPF.Should().Be(cpf);
        clientessocios.FEMail.Should().Be(email);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNome_Property_ShouldAcceptValidNames(string Nome)
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FNome = Nome
        };
        // Assert
        clientessocios.FNome.Should().Be(Nome);
    }

    [Fact]
    public void FNome_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FNome = null
        };
        // Assert
        clientessocios.FNome.Should().Be(string.Empty);
    }

    [Fact]
    public void SqlWhereConstructor_WithNullConnection_ShouldNotThrow()
    {
        // Arrange
        var sqlWhere = "cscCodigo = 1";
        // Act & Assert
        var ClientesSocios = new DBClientesSocios(sqlWhere, null);
        ClientesSocios.Should().NotBeNull();
    }

    [Fact]
    public void ParameterizedConstructor_WithNullConnection_ShouldReturnEarly()
    {
        // Arrange
        var parameters = new List<SqlParameter>();
        var nome = "TesteNome";
        // Act
        var clientessocios = new DBClientesSocios(parameters, nome, null);
        // Assert
        clientessocios.Should().NotBeNull();
        clientessocios.ID.Should().Be(0); // Should not have loaded any data
    }

    [Fact]
    public void FNome_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var clientessocios = new DBClientesSocios();
        var longName = new string ('A', 50 + 10); // Exceeds 50 character limit
        // Act
        clientessocios.FNome = longName;
        // Assert
        clientessocios.FNome.Should().HaveLength(50);
    }

    [Fact]
    public void FNome_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FNome = null;
        // Act
        var result = _instance.FNome;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FNome_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FNome = expectedValue;
        // Act
        var result = _instance.FNome;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FNome_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNome = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNome = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FNome = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FNome = value;
        // Act
        _instance.FNome = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = "Original Value";
        // Act
        _instance.FNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = "First Value";
        // Act
        _instance.FNome = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNome = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNome_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FNome = input;
        // Assert
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void FNome_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = null;
        // Act
        _instance.FNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = "Existing Value";
        // Act
        _instance.FNome = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FSite_Property_ShouldAcceptValidNames(string Site)
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FSite = Site
        };
        // Assert
        clientessocios.FSite.Should().Be(Site);
    }

    [Fact]
    public void FSite_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FSite = null
        };
        // Assert
        clientessocios.FSite.Should().Be(string.Empty);
    }

    [Fact]
    public void FSite_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var clientessocios = new DBClientesSocios();
        var longName = new string ('A', 150 + 10); // Exceeds 150 character limit
        // Act
        clientessocios.FSite = longName;
        // Assert
        clientessocios.FSite.Should().HaveLength(150);
    }

    [Fact]
    public void FSite_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FSite = null;
        // Act
        var result = _instance.FSite;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FSite_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FSite = expectedValue;
        // Act
        var result = _instance.FSite;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FSite_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFSite", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FSite = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FSite);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSite_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFSite", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FSite = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FSite);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FSite_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFSite", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FSite = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FSite);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSite_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFSite", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FSite = value;
        // Act
        _instance.FSite = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSite_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFSite", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSite = "Original Value";
        // Act
        _instance.FSite = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSite_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFSite", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSite = "First Value";
        // Act
        _instance.FSite = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSite_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFSite", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FSite = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FSite);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FSite_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FSite = input;
        // Assert
        Assert.Equal(expected, _instance.FSite);
    }

    [Fact]
    public void FSite_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFSite", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSite = null;
        // Act
        _instance.FSite = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSite_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFSite", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSite = "Existing Value";
        // Act
        _instance.FSite = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FRepresentanteLegal_Property_ShouldAcceptValidNames(string RepresentanteLegal)
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FRepresentanteLegal = RepresentanteLegal
        };
        // Assert
        clientessocios.FRepresentanteLegal.Should().Be(RepresentanteLegal);
    }

    [Fact]
    public void FRepresentanteLegal_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FRepresentanteLegal = null
        };
        // Assert
        clientessocios.FRepresentanteLegal.Should().Be(string.Empty);
    }

    [Fact]
    public void FRepresentanteLegal_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var clientessocios = new DBClientesSocios();
        var longName = new string ('A', 50 + 10); // Exceeds 50 character limit
        // Act
        clientessocios.FRepresentanteLegal = longName;
        // Assert
        clientessocios.FRepresentanteLegal.Should().HaveLength(50);
    }

    [Fact]
    public void FRepresentanteLegal_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FRepresentanteLegal = null;
        // Act
        var result = _instance.FRepresentanteLegal;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FRepresentanteLegal_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FRepresentanteLegal = expectedValue;
        // Act
        var result = _instance.FRepresentanteLegal;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FRepresentanteLegal_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFRepresentanteLegal", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FRepresentanteLegal = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FRepresentanteLegal);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRepresentanteLegal_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFRepresentanteLegal", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FRepresentanteLegal = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FRepresentanteLegal);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FRepresentanteLegal_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFRepresentanteLegal", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FRepresentanteLegal = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FRepresentanteLegal);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRepresentanteLegal_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFRepresentanteLegal", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FRepresentanteLegal = value;
        // Act
        _instance.FRepresentanteLegal = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRepresentanteLegal_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFRepresentanteLegal", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRepresentanteLegal = "Original Value";
        // Act
        _instance.FRepresentanteLegal = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRepresentanteLegal_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFRepresentanteLegal", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRepresentanteLegal = "First Value";
        // Act
        _instance.FRepresentanteLegal = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRepresentanteLegal_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFRepresentanteLegal", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FRepresentanteLegal = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FRepresentanteLegal);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FRepresentanteLegal_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FRepresentanteLegal = input;
        // Assert
        Assert.Equal(expected, _instance.FRepresentanteLegal);
    }

    [Fact]
    public void FRepresentanteLegal_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFRepresentanteLegal", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRepresentanteLegal = null;
        // Act
        _instance.FRepresentanteLegal = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRepresentanteLegal_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFRepresentanteLegal", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRepresentanteLegal = "Existing Value";
        // Act
        _instance.FRepresentanteLegal = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FEndereco_Property_ShouldAcceptValidNames(string Endereco)
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FEndereco = Endereco
        };
        // Assert
        clientessocios.FEndereco.Should().Be(Endereco);
    }

    [Fact]
    public void FEndereco_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FEndereco = null
        };
        // Assert
        clientessocios.FEndereco.Should().Be(string.Empty);
    }

    [Fact]
    public void FEndereco_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var clientessocios = new DBClientesSocios();
        var longName = new string ('A', 80 + 10); // Exceeds 80 character limit
        // Act
        clientessocios.FEndereco = longName;
        // Assert
        clientessocios.FEndereco.Should().HaveLength(80);
    }

    [Fact]
    public void FEndereco_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FEndereco = null;
        // Act
        var result = _instance.FEndereco;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FEndereco_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FEndereco = expectedValue;
        // Act
        var result = _instance.FEndereco;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FEndereco_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEndereco = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FEndereco);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEndereco = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FEndereco);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FEndereco = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FEndereco);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FEndereco = value;
        // Act
        _instance.FEndereco = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEndereco = "Original Value";
        // Act
        _instance.FEndereco = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEndereco = "First Value";
        // Act
        _instance.FEndereco = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEndereco = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FEndereco);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FEndereco_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FEndereco = input;
        // Assert
        Assert.Equal(expected, _instance.FEndereco);
    }

    [Fact]
    public void FEndereco_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEndereco = null;
        // Act
        _instance.FEndereco = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEndereco = "Existing Value";
        // Act
        _instance.FEndereco = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FBairro_Property_ShouldAcceptValidNames(string Bairro)
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FBairro = Bairro
        };
        // Assert
        clientessocios.FBairro.Should().Be(Bairro);
    }

    [Fact]
    public void FBairro_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FBairro = null
        };
        // Assert
        clientessocios.FBairro.Should().Be(string.Empty);
    }

    [Fact]
    public void FBairro_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var clientessocios = new DBClientesSocios();
        var longName = new string ('A', 50 + 10); // Exceeds 50 character limit
        // Act
        clientessocios.FBairro = longName;
        // Assert
        clientessocios.FBairro.Should().HaveLength(50);
    }

    [Fact]
    public void FBairro_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FBairro = null;
        // Act
        var result = _instance.FBairro;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FBairro_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FBairro = expectedValue;
        // Act
        var result = _instance.FBairro;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FBairro_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FBairro = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FBairro);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairro_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FBairro = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FBairro);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FBairro_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FBairro = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FBairro);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairro_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FBairro = value;
        // Act
        _instance.FBairro = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairro_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FBairro = "Original Value";
        // Act
        _instance.FBairro = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairro_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FBairro = "First Value";
        // Act
        _instance.FBairro = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairro_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FBairro = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FBairro);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FBairro_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FBairro = input;
        // Assert
        Assert.Equal(expected, _instance.FBairro);
    }

    [Fact]
    public void FBairro_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FBairro = null;
        // Act
        _instance.FBairro = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairro_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FBairro = "Existing Value";
        // Act
        _instance.FBairro = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FRG_Property_ShouldAcceptValidNames(string RG)
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FRG = RG
        };
        // Assert
        clientessocios.FRG.Should().Be(RG);
    }

    [Fact]
    public void FRG_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FRG = null
        };
        // Assert
        clientessocios.FRG.Should().Be(string.Empty);
    }

    [Fact]
    public void FRG_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var clientessocios = new DBClientesSocios();
        var longName = new string ('A', 30 + 10); // Exceeds 30 character limit
        // Act
        clientessocios.FRG = longName;
        // Assert
        clientessocios.FRG.Should().HaveLength(30);
    }

    [Fact]
    public void FRG_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FRG = null;
        // Act
        var result = _instance.FRG;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FRG_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FRG = expectedValue;
        // Act
        var result = _instance.FRG;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FRG_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FRG = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FRG);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRG_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FRG = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FRG);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FRG_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FRG = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FRG);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRG_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FRG = value;
        // Act
        _instance.FRG = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRG_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRG = "Original Value";
        // Act
        _instance.FRG = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRG_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRG = "First Value";
        // Act
        _instance.FRG = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRG_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FRG = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FRG);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FRG_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FRG = input;
        // Assert
        Assert.Equal(expected, _instance.FRG);
    }

    [Fact]
    public void FRG_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRG = null;
        // Act
        _instance.FRG = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRG_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRG = "Existing Value";
        // Act
        _instance.FRG = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FFone_Property_ShouldAcceptValidNames(string Fone)
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FFone = Fone
        };
        // Assert
        clientessocios.FFone.Should().Be(Fone);
    }

    [Fact]
    public void FFone_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FFone = null
        };
        // Assert
        clientessocios.FFone.Should().Be(string.Empty);
    }

    [Fact]
    public void FFone_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FFone = null;
        // Act
        var result = _instance.FFone;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FFone_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FFone = expectedValue;
        // Act
        var result = _instance.FFone;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FFone_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFone = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FFone);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFone = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FFone);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FFone_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  ";
        var expectedValue = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM";
        // Act
        _instance.FFone = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FFone);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FFone = value;
        // Act
        _instance.FFone = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFone = "Original Value";
        // Act
        _instance.FFone = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFone = "First Value";
        // Act
        _instance.FFone = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFone = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FFone);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData
    [InlineData
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FFone_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FFone = input;
        // Assert
        Assert.Equal(expected, _instance.FFone);
    }

    [Fact]
    public void FFone_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFone = null;
        // Act
        _instance.FFone = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFone = "Existing Value";
        // Act
        _instance.FFone = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAA")]
    [InlineData("BBBBBBB")]
    [InlineData("CCCCCCCCc")]
    public void FParticipacao_Property_ShouldAcceptValidNames(string Participacao)
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FParticipacao = Participacao
        };
        // Assert
        clientessocios.FParticipacao.Should().Be(Participacao);
    }

    [Fact]
    public void FParticipacao_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FParticipacao = null
        };
        // Assert
        clientessocios.FParticipacao.Should().Be(string.Empty);
    }

    [Fact]
    public void FParticipacao_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var clientessocios = new DBClientesSocios();
        var longName = new string ('A', 10 + 10); // Exceeds 10 character limit
        // Act
        clientessocios.FParticipacao = longName;
        // Assert
        clientessocios.FParticipacao.Should().HaveLength(10);
    }

    [Fact]
    public void FParticipacao_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FParticipacao = null;
        // Act
        var result = _instance.FParticipacao;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FParticipacao_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FParticipacao = expectedValue;
        // Act
        var result = _instance.FParticipacao;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FParticipacao_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFParticipacao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FParticipacao = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FParticipacao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FParticipacao_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFParticipacao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FParticipacao = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FParticipacao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FParticipacao_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFParticipacao", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAA  ";
        var expectedValue = "AAAAAAAA";
        // Act
        _instance.FParticipacao = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FParticipacao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FParticipacao_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFParticipacao", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FParticipacao = value;
        // Act
        _instance.FParticipacao = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FParticipacao_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFParticipacao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FParticipacao = "Original Value";
        // Act
        _instance.FParticipacao = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FParticipacao_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFParticipacao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FParticipacao = "First Value";
        // Act
        _instance.FParticipacao = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FParticipacao_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFParticipacao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FParticipacao = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FParticipacao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAA", "AAAAAAAA")]
    [InlineData("  BBBBBBB  ", "BBBBBBB")]
    [InlineData("CCCCCCCCc", "CCCCCCCCc")]
    public void FParticipacao_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FParticipacao = input;
        // Assert
        Assert.Equal(expected, _instance.FParticipacao);
    }

    [Fact]
    public void FParticipacao_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFParticipacao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FParticipacao = null;
        // Act
        _instance.FParticipacao = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FParticipacao_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFParticipacao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FParticipacao = "Existing Value";
        // Act
        _instance.FParticipacao = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FCargo_Property_ShouldAcceptValidNames(string Cargo)
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FCargo = Cargo
        };
        // Assert
        clientessocios.FCargo.Should().Be(Cargo);
    }

    [Fact]
    public void FCargo_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FCargo = null
        };
        // Assert
        clientessocios.FCargo.Should().Be(string.Empty);
    }

    [Fact]
    public void FCargo_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var clientessocios = new DBClientesSocios();
        var longName = new string ('A', 50 + 10); // Exceeds 50 character limit
        // Act
        clientessocios.FCargo = longName;
        // Assert
        clientessocios.FCargo.Should().HaveLength(50);
    }

    [Fact]
    public void FCargo_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FCargo = null;
        // Act
        var result = _instance.FCargo;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FCargo_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FCargo = expectedValue;
        // Act
        var result = _instance.FCargo;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FCargo_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFCargo", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FCargo = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FCargo);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCargo_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFCargo", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FCargo = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FCargo);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FCargo_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFCargo", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FCargo = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FCargo);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCargo_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFCargo", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FCargo = value;
        // Act
        _instance.FCargo = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCargo_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFCargo", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCargo = "Original Value";
        // Act
        _instance.FCargo = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCargo_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFCargo", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCargo = "First Value";
        // Act
        _instance.FCargo = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCargo_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFCargo", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FCargo = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FCargo);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FCargo_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FCargo = input;
        // Assert
        Assert.Equal(expected, _instance.FCargo);
    }

    [Fact]
    public void FCargo_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFCargo", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCargo = null;
        // Act
        _instance.FCargo = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCargo_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFCargo", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCargo = "Existing Value";
        // Act
        _instance.FCargo = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FObs_Property_ShouldAcceptValidNames(string Obs)
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FObs = Obs
        };
        // Assert
        clientessocios.FObs.Should().Be(Obs);
    }

    [Fact]
    public void FObs_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FObs = null
        };
        // Assert
        clientessocios.FObs.Should().Be(string.Empty);
    }

    [Fact]
    public void FObs_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FObs = null;
        // Act
        var result = _instance.FObs;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FObs_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FObs = expectedValue;
        // Act
        var result = _instance.FObs;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FObs_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFObs", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FObs = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FObs);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObs_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFObs", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FObs = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FObs);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FObs_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFObs", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  ";
        var expectedValue = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM";
        // Act
        _instance.FObs = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FObs);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObs_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFObs", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FObs = value;
        // Act
        _instance.FObs = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObs_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFObs", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObs = "Original Value";
        // Act
        _instance.FObs = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObs_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFObs", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObs = "First Value";
        // Act
        _instance.FObs = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObs_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFObs", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FObs = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FObs);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData
    [InlineData
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FObs_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FObs = input;
        // Assert
        Assert.Equal(expected, _instance.FObs);
    }

    [Fact]
    public void FObs_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFObs", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObs = null;
        // Act
        _instance.FObs = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObs_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFObs", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObs = "Existing Value";
        // Act
        _instance.FObs = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FCNH_Property_ShouldAcceptValidNames(string CNH)
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FCNH = CNH
        };
        // Assert
        clientessocios.FCNH.Should().Be(CNH);
    }

    [Fact]
    public void FCNH_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FCNH = null
        };
        // Assert
        clientessocios.FCNH.Should().Be(string.Empty);
    }

    [Fact]
    public void FCNH_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var clientessocios = new DBClientesSocios();
        var longName = new string ('A', 100 + 10); // Exceeds 100 character limit
        // Act
        clientessocios.FCNH = longName;
        // Assert
        clientessocios.FCNH.Should().HaveLength(100);
    }

    [Fact]
    public void FCNH_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FCNH = null;
        // Act
        var result = _instance.FCNH;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FCNH_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FCNH = expectedValue;
        // Act
        var result = _instance.FCNH;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FCNH_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFCNH", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FCNH = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FCNH);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCNH_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFCNH", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FCNH = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FCNH);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FCNH_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFCNH", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FCNH = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FCNH);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCNH_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFCNH", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FCNH = value;
        // Act
        _instance.FCNH = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCNH_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFCNH", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCNH = "Original Value";
        // Act
        _instance.FCNH = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCNH_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFCNH", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCNH = "First Value";
        // Act
        _instance.FCNH = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCNH_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFCNH", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FCNH = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FCNH);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FCNH_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FCNH = input;
        // Assert
        Assert.Equal(expected, _instance.FCNH);
    }

    [Fact]
    public void FCNH_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFCNH", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCNH = null;
        // Act
        _instance.FCNH = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCNH_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFCNH", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCNH = "Existing Value";
        // Act
        _instance.FCNH = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCc")]
    public void FInscEst_Property_ShouldAcceptValidNames(string InscEst)
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FInscEst = InscEst
        };
        // Assert
        clientessocios.FInscEst.Should().Be(InscEst);
    }

    [Fact]
    public void FInscEst_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FInscEst = null
        };
        // Assert
        clientessocios.FInscEst.Should().Be(string.Empty);
    }

    [Fact]
    public void FInscEst_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var clientessocios = new DBClientesSocios();
        var longName = new string ('A', 15 + 10); // Exceeds 15 character limit
        // Act
        clientessocios.FInscEst = longName;
        // Assert
        clientessocios.FInscEst.Should().HaveLength(15);
    }

    [Fact]
    public void FInscEst_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FInscEst = null;
        // Act
        var result = _instance.FInscEst;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FInscEst_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FInscEst = expectedValue;
        // Act
        var result = _instance.FInscEst;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FInscEst_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFInscEst", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FInscEst = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FInscEst);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FInscEst_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFInscEst", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FInscEst = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FInscEst);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FInscEst_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFInscEst", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAA";
        // Act
        _instance.FInscEst = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FInscEst);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FInscEst_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFInscEst", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FInscEst = value;
        // Act
        _instance.FInscEst = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FInscEst_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFInscEst", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FInscEst = "Original Value";
        // Act
        _instance.FInscEst = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FInscEst_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFInscEst", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FInscEst = "First Value";
        // Act
        _instance.FInscEst = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FInscEst_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFInscEst", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FInscEst = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FInscEst);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAA", "AAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBB  ", "BBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCc", "CCCCCCCCCCCCCc")]
    public void FInscEst_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FInscEst = input;
        // Assert
        Assert.Equal(expected, _instance.FInscEst);
    }

    [Fact]
    public void FInscEst_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFInscEst", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FInscEst = null;
        // Act
        _instance.FInscEst = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FInscEst_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFInscEst", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FInscEst = "Existing Value";
        // Act
        _instance.FInscEst = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FSocioEmpresaAdminNome_Property_ShouldAcceptValidNames(string SocioEmpresaAdminNome)
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FSocioEmpresaAdminNome = SocioEmpresaAdminNome
        };
        // Assert
        clientessocios.FSocioEmpresaAdminNome.Should().Be(SocioEmpresaAdminNome);
    }

    [Fact]
    public void FSocioEmpresaAdminNome_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FSocioEmpresaAdminNome = null
        };
        // Assert
        clientessocios.FSocioEmpresaAdminNome.Should().Be(string.Empty);
    }

    [Fact]
    public void FSocioEmpresaAdminNome_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var clientessocios = new DBClientesSocios();
        var longName = new string ('A', 80 + 10); // Exceeds 80 character limit
        // Act
        clientessocios.FSocioEmpresaAdminNome = longName;
        // Assert
        clientessocios.FSocioEmpresaAdminNome.Should().HaveLength(80);
    }

    [Fact]
    public void FSocioEmpresaAdminNome_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FSocioEmpresaAdminNome = null;
        // Act
        var result = _instance.FSocioEmpresaAdminNome;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FSocioEmpresaAdminNome_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FSocioEmpresaAdminNome = expectedValue;
        // Act
        var result = _instance.FSocioEmpresaAdminNome;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FSocioEmpresaAdminNome_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFSocioEmpresaAdminNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FSocioEmpresaAdminNome = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FSocioEmpresaAdminNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSocioEmpresaAdminNome_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFSocioEmpresaAdminNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FSocioEmpresaAdminNome = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FSocioEmpresaAdminNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FSocioEmpresaAdminNome_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFSocioEmpresaAdminNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FSocioEmpresaAdminNome = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FSocioEmpresaAdminNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSocioEmpresaAdminNome_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFSocioEmpresaAdminNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FSocioEmpresaAdminNome = value;
        // Act
        _instance.FSocioEmpresaAdminNome = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSocioEmpresaAdminNome_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFSocioEmpresaAdminNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSocioEmpresaAdminNome = "Original Value";
        // Act
        _instance.FSocioEmpresaAdminNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSocioEmpresaAdminNome_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFSocioEmpresaAdminNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSocioEmpresaAdminNome = "First Value";
        // Act
        _instance.FSocioEmpresaAdminNome = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSocioEmpresaAdminNome_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFSocioEmpresaAdminNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FSocioEmpresaAdminNome = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FSocioEmpresaAdminNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FSocioEmpresaAdminNome_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FSocioEmpresaAdminNome = input;
        // Assert
        Assert.Equal(expected, _instance.FSocioEmpresaAdminNome);
    }

    [Fact]
    public void FSocioEmpresaAdminNome_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFSocioEmpresaAdminNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSocioEmpresaAdminNome = null;
        // Act
        _instance.FSocioEmpresaAdminNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSocioEmpresaAdminNome_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFSocioEmpresaAdminNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSocioEmpresaAdminNome = "Existing Value";
        // Act
        _instance.FSocioEmpresaAdminNome = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FEnderecoSocio_Property_ShouldAcceptValidNames(string EnderecoSocio)
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FEnderecoSocio = EnderecoSocio
        };
        // Assert
        clientessocios.FEnderecoSocio.Should().Be(EnderecoSocio);
    }

    [Fact]
    public void FEnderecoSocio_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FEnderecoSocio = null
        };
        // Assert
        clientessocios.FEnderecoSocio.Should().Be(string.Empty);
    }

    [Fact]
    public void FEnderecoSocio_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var clientessocios = new DBClientesSocios();
        var longName = new string ('A', 80 + 10); // Exceeds 80 character limit
        // Act
        clientessocios.FEnderecoSocio = longName;
        // Assert
        clientessocios.FEnderecoSocio.Should().HaveLength(80);
    }

    [Fact]
    public void FEnderecoSocio_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FEnderecoSocio = null;
        // Act
        var result = _instance.FEnderecoSocio;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FEnderecoSocio_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FEnderecoSocio = expectedValue;
        // Act
        var result = _instance.FEnderecoSocio;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FEnderecoSocio_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFEnderecoSocio", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEnderecoSocio = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FEnderecoSocio);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEnderecoSocio_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFEnderecoSocio", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEnderecoSocio = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FEnderecoSocio);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FEnderecoSocio_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFEnderecoSocio", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FEnderecoSocio = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FEnderecoSocio);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEnderecoSocio_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFEnderecoSocio", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FEnderecoSocio = value;
        // Act
        _instance.FEnderecoSocio = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEnderecoSocio_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFEnderecoSocio", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEnderecoSocio = "Original Value";
        // Act
        _instance.FEnderecoSocio = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEnderecoSocio_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFEnderecoSocio", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEnderecoSocio = "First Value";
        // Act
        _instance.FEnderecoSocio = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEnderecoSocio_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFEnderecoSocio", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEnderecoSocio = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FEnderecoSocio);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FEnderecoSocio_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FEnderecoSocio = input;
        // Assert
        Assert.Equal(expected, _instance.FEnderecoSocio);
    }

    [Fact]
    public void FEnderecoSocio_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFEnderecoSocio", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEnderecoSocio = null;
        // Act
        _instance.FEnderecoSocio = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEnderecoSocio_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFEnderecoSocio", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEnderecoSocio = "Existing Value";
        // Act
        _instance.FEnderecoSocio = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FBairroSocio_Property_ShouldAcceptValidNames(string BairroSocio)
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FBairroSocio = BairroSocio
        };
        // Assert
        clientessocios.FBairroSocio.Should().Be(BairroSocio);
    }

    [Fact]
    public void FBairroSocio_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FBairroSocio = null
        };
        // Assert
        clientessocios.FBairroSocio.Should().Be(string.Empty);
    }

    [Fact]
    public void FBairroSocio_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var clientessocios = new DBClientesSocios();
        var longName = new string ('A', 50 + 10); // Exceeds 50 character limit
        // Act
        clientessocios.FBairroSocio = longName;
        // Assert
        clientessocios.FBairroSocio.Should().HaveLength(50);
    }

    [Fact]
    public void FBairroSocio_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FBairroSocio = null;
        // Act
        var result = _instance.FBairroSocio;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FBairroSocio_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FBairroSocio = expectedValue;
        // Act
        var result = _instance.FBairroSocio;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FBairroSocio_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFBairroSocio", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FBairroSocio = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FBairroSocio);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairroSocio_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFBairroSocio", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FBairroSocio = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FBairroSocio);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FBairroSocio_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFBairroSocio", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FBairroSocio = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FBairroSocio);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairroSocio_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFBairroSocio", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FBairroSocio = value;
        // Act
        _instance.FBairroSocio = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairroSocio_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFBairroSocio", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FBairroSocio = "Original Value";
        // Act
        _instance.FBairroSocio = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairroSocio_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFBairroSocio", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FBairroSocio = "First Value";
        // Act
        _instance.FBairroSocio = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairroSocio_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFBairroSocio", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FBairroSocio = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FBairroSocio);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FBairroSocio_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FBairroSocio = input;
        // Assert
        Assert.Equal(expected, _instance.FBairroSocio);
    }

    [Fact]
    public void FBairroSocio_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFBairroSocio", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FBairroSocio = null;
        // Act
        _instance.FBairroSocio = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairroSocio_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFBairroSocio", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FBairroSocio = "Existing Value";
        // Act
        _instance.FBairroSocio = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAA")]
    [InlineData("BBBBBBB")]
    [InlineData("CCCCCCCCc")]
    public void FCEPSocio_Property_ShouldAcceptValidNames(string CEPSocio)
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FCEPSocio = CEPSocio
        };
        // Assert
        clientessocios.FCEPSocio.Should().Be(CEPSocio);
    }

    [Fact]
    public void FCEPSocio_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FCEPSocio = null
        };
        // Assert
        clientessocios.FCEPSocio.Should().Be(string.Empty);
    }

    [Fact]
    public void FCEPSocio_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var clientessocios = new DBClientesSocios();
        var longName = new string ('A', 10 + 10); // Exceeds 10 character limit
        // Act
        clientessocios.FCEPSocio = longName;
        // Assert
        clientessocios.FCEPSocio.Should().HaveLength(10);
    }

    [Fact]
    public void FCEPSocio_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FCEPSocio = null;
        // Act
        var result = _instance.FCEPSocio;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FCEPSocio_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FCEPSocio = expectedValue;
        // Act
        var result = _instance.FCEPSocio;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FCEPSocio_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFCEPSocio", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FCEPSocio = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FCEPSocio);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCEPSocio_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFCEPSocio", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FCEPSocio = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FCEPSocio);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FCEPSocio_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFCEPSocio", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAA  ";
        var expectedValue = "AAAAAAAA";
        // Act
        _instance.FCEPSocio = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FCEPSocio);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCEPSocio_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFCEPSocio", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FCEPSocio = value;
        // Act
        _instance.FCEPSocio = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCEPSocio_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFCEPSocio", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCEPSocio = "Original Value";
        // Act
        _instance.FCEPSocio = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCEPSocio_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFCEPSocio", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCEPSocio = "First Value";
        // Act
        _instance.FCEPSocio = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCEPSocio_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFCEPSocio", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FCEPSocio = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FCEPSocio);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAA", "AAAAAAAA")]
    [InlineData("  BBBBBBB  ", "BBBBBBB")]
    [InlineData("CCCCCCCCc", "CCCCCCCCc")]
    public void FCEPSocio_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FCEPSocio = input;
        // Assert
        Assert.Equal(expected, _instance.FCEPSocio);
    }

    [Fact]
    public void FCEPSocio_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFCEPSocio", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCEPSocio = null;
        // Act
        _instance.FCEPSocio = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCEPSocio_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFCEPSocio", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCEPSocio = "Existing Value";
        // Act
        _instance.FCEPSocio = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineDatac")]
    public void FFax_Property_ShouldAcceptValidNames(string Fax)
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FFax = Fax
        };
        // Assert
        clientessocios.FFax.Should().Be(Fax);
    }

    [Fact]
    public void FFax_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var clientessocios = new DBClientesSocios
        {
            // Act
            FFax = null
        };
        // Assert
        clientessocios.FFax.Should().Be(string.Empty);
    }

    [Fact]
    public void FFax_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var clientessocios = new DBClientesSocios();
        var longName = new string ('A', 2048 + 10); // Exceeds 2048 character limit
        // Act
        clientessocios.FFax = longName;
        // Assert
        clientessocios.FFax.Should().HaveLength(2048);
    }

    [Fact]
    public void FFax_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FFax = null;
        // Act
        var result = _instance.FFax;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FFax_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FFax = expectedValue;
        // Act
        var result = _instance.FFax;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FFax_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFax = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FFax);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFax = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FFax);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FFax_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue
        var expectedValue
        // Act
        _instance.FFax = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FFax);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FFax = value;
        // Act
        _instance.FFax = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFax = "Original Value";
        // Act
        _instance.FFax = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFax = "First Value";
        // Act
        _instance.FFax = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFax = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FFax);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData
    [InlineData
    [InlineDatacc")]
    public void FFax_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FFax = input;
        // Assert
        Assert.Equal(expected, _instance.FFax);
    }

    [Fact]
    public void FFax_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFax = null;
        // Act
        _instance.FFax = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBClientesSocios).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFax = "Existing Value";
        // Act
        _instance.FFax = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

#region Testes de GUID
    [Fact]
    public void GUID_DefaultValue_ShouldBeEmpty()
    {
        Assert.Equal(string.Empty, _instance.FGUID);
    }

    [Fact]
    public void GUID_SetValidGUID_ShouldStore()
    {
        var guid = Guid.NewGuid().ToString();
        _instance.FGUID = guid;
        Assert.Equal(guid, _instance.FGUID);
    }

#endregion
    [Fact]
    public void TabelaNome_Property_ShouldReturnCorrectTableName()
    {
        // Arrange
        var clientessocios = new DBClientesSocios();
        // Act & Assert
        clientessocios.TabelaNome.Should().Be("ClientesSocios");
    }

    public virtual void Dispose()
    {
    // Cleanup resources if needed
    }
}