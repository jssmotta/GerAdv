// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IGruposEmpresasValidation
{
    Task<bool> ValidateReg(Models.GruposEmpresas reg, IGruposEmpresasService service, IOponentesReader oponentesReader, IClientesReader clientesReader, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
    Task<bool> CanDelete(int? id, IGruposEmpresasService service, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
}

public class GruposEmpresasValidation : IGruposEmpresasValidation
{
    public async Task<bool> CanDelete(int? id, IGruposEmpresasService service, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (id == null || id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id ?? default, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.GruposEmpresas reg)
    {
        if (reg.Descricao != null && reg.Descricao.Length > DBGruposEmpresasDicInfo.GrpDescricao.FTamanho)
            throw new SGValidationException($"Descricao deve ter no máximo {DBGruposEmpresasDicInfo.GrpDescricao.FTamanho} caracteres.");
        if (reg.Icone != null && reg.Icone.Length > DBGruposEmpresasDicInfo.GrpIcone.FTamanho)
            throw new SGValidationException($"Icone deve ter no máximo {DBGruposEmpresasDicInfo.GrpIcone.FTamanho} caracteres.");
        if (reg.GUID != null && reg.GUID.Length > DBGruposEmpresasDicInfo.GrpGUID.FTamanho)
            throw new SGValidationException($"GUID deve ter no máximo {DBGruposEmpresasDicInfo.GrpGUID.FTamanho} caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.GruposEmpresas reg, IGruposEmpresasService service, IOponentesReader oponentesReader, IClientesReader clientesReader, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Descricao))
            throw new SGValidationException("Descrição é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.EMail != null && reg.EMail.Length > 0 && !reg.EMail.IsValidEmail())
            throw new SGValidationException($"EMail em formato inválido.");
        // Oponentes
        if (!reg.Oponente.IsEmptyIDNumber())
        {
            var regOponentes = await oponentesReader.Read(reg.Oponente, oCnn);
            if (regOponentes == null || regOponentes.Id != reg.Oponente)
            {
                throw new SGValidationException($"Oponentes não encontrado ({regOponentes?.Id}).");
            }
        }

        // Clientes
        if (!reg.Cliente.IsEmptyIDNumber())
        {
            var regClientes = await clientesReader.Read(reg.Cliente, oCnn);
            if (regClientes == null || regClientes.Id != reg.Cliente)
            {
                throw new SGValidationException($"Clientes não encontrado ({regClientes?.Id}).");
            }
        }

        return true;
    }
}