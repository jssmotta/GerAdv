// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class ApensoService
{
    private static (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterApenso filtro)
    {
        var parameters = new List<SqlParameter>();
        if (filtro.Processo != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBApensoDicInfo.Processo)}", filtro.Processo));
        }

        if (!string.IsNullOrEmpty(filtro.ApensoX))
        {
            parameters.Add(new($"@{nameof(DBApensoDicInfo.Apenso)}", ApplyWildCard(filtro.WildcardChar, filtro.ApensoX)));
        }

        if (!string.IsNullOrEmpty(filtro.Acao))
        {
            parameters.Add(new($"@{nameof(DBApensoDicInfo.Acao)}", ApplyWildCard(filtro.WildcardChar, filtro.Acao)));
        }

        if (!filtro.DtDist.IsEmpty())
        {
            if (DateTime.TryParse(filtro.DtDist, out var dataParam))
                parameters.Add(new($"@{nameof(DBApensoDicInfo.DtDist)}", dataParam));
        }

        if (!filtro.DtDist_end.IsEmpty())
        {
            if (DateTime.TryParse(filtro.DtDist_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBApensoDicInfo.DtDist)}_end", dataParam));
        }

        if (!string.IsNullOrEmpty(filtro.OBS))
        {
            parameters.Add(new($"@{nameof(DBApensoDicInfo.OBS)}", ApplyWildCard(filtro.WildcardChar, filtro.OBS)));
        }

        if (filtro.ValorCausa != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBApensoDicInfo.ValorCausa)}", filtro.ValorCausa));
        }

        if (filtro.ValorCausa_end != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBApensoDicInfo.ValorCausa)}_end", filtro.ValorCausa_end));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBApensoDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
        }

        if (filtro.Codigo_filtro_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBApensoDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
        }

        if (filtro.LogicalOperator.IsEmpty() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        cWhere.Append(filtro.Processo <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBApensoDicInfo.PTabelaNome}].[{DBApensoDicInfo.Processo}] = @{nameof(DBApensoDicInfo.Processo)}");
        cWhere.Append(filtro.ApensoX.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBApensoDicInfo.PTabelaNome}].[{DBApensoDicInfo.Apenso}]  {DevourerConsts.MsiCollate} like @{nameof(DBApensoDicInfo.Apenso)}");
        cWhere.Append(filtro.Acao.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBApensoDicInfo.PTabelaNome}].[{DBApensoDicInfo.Acao}]  {DevourerConsts.MsiCollate} like @{nameof(DBApensoDicInfo.Acao)}");
        if (!filtro.DtDist.IsEmpty() && filtro.DtDist_end.IsEmpty())
        {
            cWhere.Append(filtro.DtDist.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBApensoDicInfo.PTabelaNome}].[{DBApensoDicInfo.DtDist}], 103) >= CONVERT(DATE, @{nameof(DBApensoDicInfo.DtDist)}, 103)");
        }
        else
        {
            cWhere.Append((filtro.DtDist.IsEmpty() && filtro.DtDist_end.IsEmpty()) ? string.Empty : (!(filtro.DtDist.IsEmpty()) && !(filtro.DtDist_end.IsEmpty())) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBApensoDicInfo.DtDist} BETWEEN @{nameof(DBApensoDicInfo.DtDist)} AND @{nameof(DBApensoDicInfo.DtDist)}_end" : !(filtro.DtDist.IsEmpty()) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBApensoDicInfo.DtDist} = @{nameof(DBApensoDicInfo.DtDist)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBApensoDicInfo.DtDist} <= @{nameof(DBApensoDicInfo.DtDist)}_end");
        }

        cWhere.Append(filtro.OBS.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBApensoDicInfo.PTabelaNome}].[{DBApensoDicInfo.OBS}]  {DevourerConsts.MsiCollate} like @{nameof(DBApensoDicInfo.OBS)}");
        if (!filtro.ValorCausa.IsEmpty() && filtro.ValorCausa_end.IsEmpty())
        {
            cWhere.Append(filtro.ValorCausa == decimal.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBApensoDicInfo.PTabelaNome}].[{DBApensoDicInfo.ValorCausa}] >= @{nameof(DBApensoDicInfo.ValorCausa)}");
        }
        else
        {
            cWhere.Append((filtro.ValorCausa == decimal.MinValue && filtro.ValorCausa_end == decimal.MinValue) ? string.Empty : (!(filtro.ValorCausa == decimal.MinValue) && !(filtro.ValorCausa_end == decimal.MinValue)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBApensoDicInfo.ValorCausa} BETWEEN @{nameof(DBApensoDicInfo.ValorCausa)} AND @{nameof(DBApensoDicInfo.ValorCausa)}_end" : !(filtro.ValorCausa == decimal.MinValue) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBApensoDicInfo.ValorCausa} = @{nameof(DBApensoDicInfo.ValorCausa)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBApensoDicInfo.ValorCausa} <= @{nameof(DBApensoDicInfo.ValorCausa)}_end");
        }

        if (!filtro.Codigo_filtro.IsEmpty() && filtro.Codigo_filtro_end.IsEmpty())
        {
            cWhere.Append(filtro.Codigo_filtro <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBApensoDicInfo.PTabelaNome}].[{DBApensoDicInfo.CampoCodigo}] >= @{nameof(DBApensoDicInfo.CampoCodigo)}");
        }
        else
        {
            cWhere.Append((filtro.Codigo_filtro <= 0 && filtro.Codigo_filtro_end <= 0) ? string.Empty : (!(filtro.Codigo_filtro <= 0) && !(filtro.Codigo_filtro_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBApensoDicInfo.CampoCodigo} BETWEEN @{nameof(DBApensoDicInfo.CampoCodigo)} AND @{nameof(DBApensoDicInfo.CampoCodigo)}_end" : !(filtro.Codigo_filtro <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBApensoDicInfo.CampoCodigo} = @{nameof(DBApensoDicInfo.CampoCodigo)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBApensoDicInfo.CampoCodigo} <= @{nameof(DBApensoDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private static string ApplyWildCard(char wildcardChar, string value)
    {
        if (wildcardChar == '\0' || wildcardChar == ' ')
        {
            return value;
        }

        var result = $"{wildcardChar}{value.Replace(" ", wildcardChar.ToString())}{wildcardChar}";
        return result;
    }

    private async Task<IEnumerable<ApensoResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}