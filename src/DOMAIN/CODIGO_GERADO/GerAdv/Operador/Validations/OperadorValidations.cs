// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IOperadorValidation
{
    Task<bool> ValidateReg(Models.Operador reg, IOperadorService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, IOperadorService service, IAgendaService agendaService, IAlertasService alertasService, IAlertasEnviadosService alertasenviadosService, IDiario2Service diario2Service, IGUTAtividadesService gutatividadesService, IOperadorEMailPopupService operadoremailpopupService, IOperadorGrupoService operadorgrupoService, IOperadorGruposAgendaService operadorgruposagendaService, IPontoVirtualService pontovirtualService, IPontoVirtualAcessosService pontovirtualacessosService, IProcessosParadosService processosparadosService, IProcessOutputRequestService processoutputrequestService, ISMSAliceService smsaliceService, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class OperadorValidation : IOperadorValidation
{
    public async Task<bool> CanDelete(int id, IOperadorService service, IAgendaService agendaService, IAlertasService alertasService, IAlertasEnviadosService alertasenviadosService, IDiario2Service diario2Service, IGUTAtividadesService gutatividadesService, IOperadorEMailPopupService operadoremailpopupService, IOperadorGrupoService operadorgrupoService, IOperadorGruposAgendaService operadorgruposagendaService, IPontoVirtualService pontovirtualService, IPontoVirtualAcessosService pontovirtualacessosService, IProcessosParadosService processosparadosService, IProcessOutputRequestService processoutputrequestService, ISMSAliceService smsaliceService, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        var agendaExists0 = await agendaService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterAgenda { Usuario = id }, uri);
        if (agendaExists0 != null && agendaExists0.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Compromisso associados a ele.");
        var alertasExists1 = await alertasService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterAlertas { Operador = id }, uri);
        if (alertasExists1 != null && alertasExists1.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Alertas associados a ele.");
        var alertasenviadosExists2 = await alertasenviadosService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterAlertasEnviados { Operador = id }, uri);
        if (alertasenviadosExists2 != null && alertasenviadosExists2.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Alertas Enviados associados a ele.");
        var diario2Exists3 = await diario2Service.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterDiario2 { Operador = id }, uri);
        if (diario2Exists3 != null && diario2Exists3.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Diario2 associados a ele.");
        var gutatividadesExists4 = await gutatividadesService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterGUTAtividades { Operador = id }, uri);
        if (gutatividadesExists4 != null && gutatividadesExists4.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela G U T Atividades associados a ele.");
        var operadoremailpopupExists5 = await operadoremailpopupService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterOperadorEMailPopup { Operador = id }, uri);
        if (operadoremailpopupExists5 != null && operadoremailpopupExists5.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Operador E Mail Popup associados a ele.");
        var operadorgrupoExists6 = await operadorgrupoService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterOperadorGrupo { Operador = id }, uri);
        if (operadorgrupoExists6 != null && operadorgrupoExists6.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Operador Grupo associados a ele.");
        var operadorgruposagendaExists7 = await operadorgruposagendaService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterOperadorGruposAgenda { Operador = id }, uri);
        if (operadorgruposagendaExists7 != null && operadorgruposagendaExists7.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Operador Grupos Agenda associados a ele.");
        var pontovirtualExists8 = await pontovirtualService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterPontoVirtual { Operador = id }, uri);
        if (pontovirtualExists8 != null && pontovirtualExists8.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Ponto Virtual associados a ele.");
        var pontovirtualacessosExists9 = await pontovirtualacessosService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterPontoVirtualAcessos { Operador = id }, uri);
        if (pontovirtualacessosExists9 != null && pontovirtualacessosExists9.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Ponto Virtual Acessos associados a ele.");
        var processosparadosExists10 = await processosparadosService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterProcessosParados { Operador = id }, uri);
        if (processosparadosExists10 != null && processosparadosExists10.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Processos Parados associados a ele.");
        var processoutputrequestExists11 = await processoutputrequestService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterProcessOutputRequest { Operador = id }, uri);
        if (processoutputrequestExists11 != null && processoutputrequestExists11.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Process Output Request associados a ele.");
        var smsaliceExists12 = await smsaliceService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterSMSAlice { Operador = id }, uri);
        if (smsaliceExists12 != null && smsaliceExists12.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela S M S Alice associados a ele.");
        return true;
    }

    private bool ValidSizes(Models.Operador reg)
    {
        if (reg.Nome != null && reg.Nome.Length > 40)
            throw new SGValidationException($"Nome deve ter no máximo 40 caracteres.");
        if (reg.Nick != null && reg.Nick.Length > 50)
            throw new SGValidationException($"Nick deve ter no máximo 50 caracteres.");
        if (reg.Ramal != null && reg.Ramal.Length > 20)
            throw new SGValidationException($"Ramal deve ter no máximo 20 caracteres.");
        if (reg.MinhaDescricao != null && reg.MinhaDescricao.Length > 255)
            throw new SGValidationException($"MinhaDescricao deve ter no máximo 255 caracteres.");
        if (reg.OnlineIP != null && reg.OnlineIP.Length > 50)
            throw new SGValidationException($"OnlineIP deve ter no máximo 50 caracteres.");
        if (reg.StatusMessage != null && reg.StatusMessage.Length > 1024)
            throw new SGValidationException($"StatusMessage deve ter no máximo 1024 caracteres.");
        if (reg.Senha256 != null && reg.Senha256.Length > 4000)
            throw new SGValidationException($"Senha256 deve ter no máximo 4000 caracteres.");
        if (reg.SuporteSenha256 != null && reg.SuporteSenha256.Length > 4000)
            throw new SGValidationException($"SuporteSenha256 deve ter no máximo 4000 caracteres.");
        if (reg.SuporteNomeSolicitante != null && reg.SuporteNomeSolicitante.Length > 100)
            throw new SGValidationException($"SuporteNomeSolicitante deve ter no máximo 100 caracteres.");
        if (reg.SuporteIpUltimoAcesso != null && reg.SuporteIpUltimoAcesso.Length > 80)
            throw new SGValidationException($"SuporteIpUltimoAcesso deve ter no máximo 80 caracteres.");
        if (reg.GUID != null && reg.GUID.Length > 50)
            throw new SGValidationException($"GUID deve ter no máximo 50 caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.Operador reg, IOperadorService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Nome))
            throw new SGValidationException("Nome é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.EMail.Length > 0 && !reg.EMail.IsValidEmail())
            throw new SGValidationException($"EMail em formato inválido.");
        if (reg.EMailNet.Length > 0 && !reg.EMailNet.IsValidEmail())
            throw new SGValidationException($"EMailNet em formato inválido.");
        await Task.Delay(0);
        return true;
    }
}