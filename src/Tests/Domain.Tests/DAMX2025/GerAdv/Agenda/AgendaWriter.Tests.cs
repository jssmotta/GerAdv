// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class AgendaWriterTests
{
    private readonly Mock<IFAgendaFactory> _mockAgendaFactory;
    private readonly Mock<FAgenda> _mockFAgenda;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly AgendaWriter _agendaWriter;
    public AgendaWriterTests()
    {
        _mockAgendaFactory = new Mock<IFAgendaFactory>();
        _mockFAgenda = new Mock<FAgenda>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _agendaWriter = new AgendaWriter(_mockAgendaFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var agenda = CreateValidAgendaModel();
        agenda.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockAgendaFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFAgenda.Object);
        _mockFAgenda.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _agendaWriter.WriteAsync(agenda, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFAgenda.Object);
        _mockAgendaFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockAgendaFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFAgenda.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var agenda = CreateValidAgendaModel();
        agenda.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockAgendaFactory.Setup(x => x.CreateFromIdAsync(agenda.Id, _mockConnection.Object)).ReturnsAsync(_mockFAgenda.Object);
        _mockFAgenda.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _agendaWriter.WriteAsync(agenda, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFAgenda.Object);
        _mockAgendaFactory.Verify(x => x.CreateFromIdAsync(agenda.Id, _mockConnection.Object), Times.Once);
        _mockAgendaFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFAgenda.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var agenda = CreateValidAgendaModel();
        var auditorQuem = 99;
        _mockAgendaFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFAgenda.Object);
        _mockFAgenda.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _agendaWriter.WriteAsync(agenda, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFAgenda.Object);
        _mockFAgenda.VerifySet(x => x.FIDCOB = agenda.IDCOB, Times.Once);
        _mockFAgenda.VerifySet(x => x.FClienteAvisado = agenda.ClienteAvisado, Times.Once);
        _mockFAgenda.VerifySet(x => x.FRevisarP2 = agenda.RevisarP2, Times.Once);
        _mockFAgenda.VerifySet(x => x.FIDNE = agenda.IDNE, Times.Once);
        _mockFAgenda.VerifySet(x => x.FCidade = agenda.Cidade, Times.Once);
        _mockFAgenda.VerifySet(x => x.FOculto = agenda.Oculto, Times.Once);
        _mockFAgenda.VerifySet(x => x.FCartaPrecatoria = agenda.CartaPrecatoria, Times.Once);
        _mockFAgenda.VerifySet(x => x.FRevisar = agenda.Revisar, Times.Once);
        _mockFAgenda.VerifySet(x => x.FHrFinal = agenda.HrFinal, Times.Once);
        _mockFAgenda.VerifySet(x => x.FAdvogado = agenda.Advogado, Times.Once);
        _mockFAgenda.VerifySet(x => x.FEventoGerador = agenda.EventoGerador, Times.Once);
        _mockFAgenda.VerifySet(x => x.FEventoData = agenda.EventoData.ToString(), Times.Once);
        _mockFAgenda.VerifySet(x => x.FFuncionario = agenda.Funcionario, Times.Once);
        _mockFAgenda.VerifySet(x => x.FData = agenda.Data, Times.Once);
        _mockFAgenda.VerifySet(x => x.FEventoPrazo = agenda.EventoPrazo, Times.Once);
        _mockFAgenda.VerifySet(x => x.FHora = agenda.Hora, Times.Once);
        _mockFAgenda.VerifySet(x => x.FCompromisso = agenda.Compromisso, Times.Once);
        _mockFAgenda.VerifySet(x => x.FTipoCompromisso = agenda.TipoCompromisso, Times.Once);
        _mockFAgenda.VerifySet(x => x.FCliente = agenda.Cliente, Times.Once);
        _mockFAgenda.VerifySet(x => x.FLiberado = agenda.Liberado, Times.Once);
        _mockFAgenda.VerifySet(x => x.FImportante = agenda.Importante, Times.Once);
        _mockFAgenda.VerifySet(x => x.FConcluido = agenda.Concluido, Times.Once);
        _mockFAgenda.VerifySet(x => x.FArea = agenda.Area, Times.Once);
        _mockFAgenda.VerifySet(x => x.FJustica = agenda.Justica, Times.Once);
        _mockFAgenda.VerifySet(x => x.FProcesso = agenda.Processo, Times.Once);
        _mockFAgenda.VerifySet(x => x.FIDHistorico = agenda.IDHistorico, Times.Once);
        _mockFAgenda.VerifySet(x => x.FIDInsProcesso = agenda.IDInsProcesso, Times.Once);
        _mockFAgenda.VerifySet(x => x.FUsuario = agenda.Usuario, Times.Once);
        _mockFAgenda.VerifySet(x => x.FPreposto = agenda.Preposto, Times.Once);
        _mockFAgenda.VerifySet(x => x.FQuemID = agenda.QuemID, Times.Once);
        _mockFAgenda.VerifySet(x => x.FQuemCodigo = agenda.QuemCodigo, Times.Once);
        _mockFAgenda.VerifySet(x => x.FGUID = agenda.GUID, Times.Once);
        _mockFAgenda.VerifySet(x => x.FStatus = agenda.Status, Times.Once);
        _mockFAgenda.VerifySet(x => x.FValor = agenda.Valor, Times.Once);
        _mockFAgenda.VerifySet(x => x.FDecisao = agenda.Decisao, Times.Once);
        _mockFAgenda.VerifySet(x => x.FSempre = agenda.Sempre, Times.Once);
        _mockFAgenda.VerifySet(x => x.FPrazoDias = agenda.PrazoDias, Times.Once);
        _mockFAgenda.VerifySet(x => x.FProtocoloIntegrado = agenda.ProtocoloIntegrado, Times.Once);
        _mockFAgenda.VerifySet(x => x.FDataInicioPrazo = agenda.DataInicioPrazo.ToString(), Times.Once);
        _mockFAgenda.VerifySet(x => x.FUsuarioCiente = agenda.UsuarioCiente, Times.Once);
        _mockFAgenda.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithNullEventoData_ShouldNotSetFEventoData()
    {
        // Arrange
        var agenda = CreateValidAgendaModel();
        agenda.EventoData = null;
        var auditorQuem = 123;
        _mockAgendaFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFAgenda.Object);
        _mockFAgenda.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _agendaWriter.WriteAsync(agenda, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFAgenda.VerifySet(x => x.FEventoData = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WithNullDataInicioPrazo_ShouldNotSetFDataInicioPrazo()
    {
        // Arrange
        var agenda = CreateValidAgendaModel();
        agenda.DataInicioPrazo = null;
        var auditorQuem = 123;
        _mockAgendaFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFAgenda.Object);
        _mockFAgenda.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _agendaWriter.WriteAsync(agenda, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFAgenda.VerifySet(x => x.FDataInicioPrazo = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var agenda = CreateValidAgendaModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockAgendaFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _agendaWriter.WriteAsync(agenda, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var agenda = CreateValidAgendaModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockAgendaFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFAgenda.Object);
        _mockFAgenda.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _agendaWriter.WriteAsync(agenda, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var agendaResponse = new AgendaResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockAgendaFactory.Setup(x => x.DeleteAsync(operadorId, agendaResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _agendaWriter.Delete(agendaResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockAgendaFactory.Verify(x => x.DeleteAsync(operadorId, agendaResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var agendaResponse = new AgendaResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockAgendaFactory.Setup(x => x.DeleteAsync(operadorId, agendaResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _agendaWriter.Delete(agendaResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var agendaResponse = new AgendaResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockAgendaFactory.Setup(x => x.DeleteAsync(operadorId, agendaResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _agendaWriter.Delete(agendaResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new AgendaWriter(_mockAgendaFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new AgendaWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.Agenda CreateValidAgendaModel()
    {
        return new Models.Agenda
        {
            Id = 0,
            IDCOB = 1,
            ClienteAvisado = false,
            RevisarP2 = false,
            IDNE = 1,
            Cidade = 1,
            Oculto = 1,
            CartaPrecatoria = 1,
            Revisar = false,
            HrFinal = "27/05/2022",
            Advogado = 1,
            EventoGerador = 1,
            EventoData = "24/04/1975",
            Funcionario = 1,
            Data = "27/05/2022",
            EventoPrazo = 1,
            Hora = "04:04",
            Compromisso = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            TipoCompromisso = 1,
            Cliente = 1,
            Liberado = false,
            Importante = false,
            Concluido = false,
            Area = 1,
            Justica = 1,
            Processo = 1,
            IDHistorico = 1,
            IDInsProcesso = 1,
            Usuario = 1,
            Preposto = 1,
            QuemID = 1,
            QuemCodigo = 1,
            GUID = Guid.NewGuid().ToString(),
            Status = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Valor = 0m,
            Decisao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Sempre = 1,
            PrazoDias = 1,
            ProtocoloIntegrado = 1,
            DataInicioPrazo = "24/04/1975",
            UsuarioCiente = false
        };
    }
#endregion
}