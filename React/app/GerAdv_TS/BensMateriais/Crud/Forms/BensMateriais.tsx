// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// Tracking: Forms.tsx.txt
'use client';
import { IBensMateriais } from '@/app/GerAdv_TS/BensMateriais/Interfaces/interface.BensMateriais';
import { useRouter } from 'next/navigation';
import React, { useEffect, useState, useRef } from 'react';
import { useSystemContext } from '@/app/context/SystemContext';
import { getParamFromUrl } from '@/app/tools/helpers';
import '@/app/styles/CrudFormsBase.css';
import '@/app/styles/CrudFormsMobile.css';
import '@/app/styles/CrudForms.css'; // [ INDEX_SIZE ]
import ButtonSalvarCrud from '@/app/components/Cruds/ButtonSalvarCrud';
import { useIsMobile } from '@/app/context/MobileContext';
import DeleteButton from '@/app/components/Cruds/DeleteButton';
import { BensMateriaisApi } from '../../Apis/ApiBensMateriais';
import { useValidationsBensMateriais } from '../../Hooks/hookBensMateriais';
import BensClassificacaoComboBox from '@/app/GerAdv_TS/BensClassificacao/ComboBox/BensClassificacao';
import FornecedoresComboBox from '@/app/GerAdv_TS/Fornecedores/ComboBox/Fornecedores';
import CidadeComboBox from '@/app/GerAdv_TS/Cidade/ComboBox/Cidade';
import { BensClassificacaoApi } from '@/app/GerAdv_TS/BensClassificacao/Apis/ApiBensClassificacao';
import { FornecedoresApi } from '@/app/GerAdv_TS/Fornecedores/Apis/ApiFornecedores';
import { CidadeApi } from '@/app/GerAdv_TS/Cidade/Apis/ApiCidade';
import InputName from '@/app/components/Inputs/InputName';
import InputInput from '@/app/components/Inputs/InputInput'
import InputCheckbox from '@/app/components/Inputs/InputCheckbox';
interface BensMateriaisFormProps {
  bensmateriaisData: IBensMateriais;
  onChange: (e: any) => void;
  onSubmit: (e: React.FormEvent) => void;
  onClose: () => void;
  onError?: () => void;
  onReload?: () => void;
  onSuccess?: (registro?: any) => void;
}

export const BensMateriaisForm: React.FC<BensMateriaisFormProps> = ({
  bensmateriaisData, 
  onChange, 
  onSubmit, 
  onClose, 
  onError, 
  onReload, 
  onSuccess, 
}) => {
const router = useRouter();
const { systemContext } = useSystemContext();
const isMobile = useIsMobile();
const dadoApi = new BensMateriaisApi(systemContext?.Uri ?? '', systemContext?.Token ?? '');
const [isSubmitting, setIsSubmitting] = useState(false);
const initialized = useRef(false);
const validationForm = useValidationsBensMateriais();
const [nomeBensClassificacao, setNomeBensClassificacao] = useState('');
const bensclassificacaoApi = new BensClassificacaoApi(systemContext?.Uri ?? '', systemContext?.Token ?? '');
const [nomeFornecedores, setNomeFornecedores] = useState('');
const fornecedoresApi = new FornecedoresApi(systemContext?.Uri ?? '', systemContext?.Token ?? '');
const [nomeCidade, setNomeCidade] = useState('');
const cidadeApi = new CidadeApi(systemContext?.Uri ?? '', systemContext?.Token ?? '');

if (getParamFromUrl('bensclassificacao') > 0) {
  if (bensmateriaisData.id === 0 && bensmateriaisData.bensclassificacao == 0) {
    bensclassificacaoApi
    .getById(getParamFromUrl('bensclassificacao'))
    .then((response) => {
      setNomeBensClassificacao(response.data.nome);
    })
    .catch((error) => {
      console.log('Error unexpected');
    });

    bensmateriaisData.bensclassificacao = getParamFromUrl('bensclassificacao');
  }
}

if (getParamFromUrl('fornecedores') > 0) {
  if (bensmateriaisData.id === 0 && bensmateriaisData.fornecedor == 0) {
    fornecedoresApi
    .getById(getParamFromUrl('fornecedores'))
    .then((response) => {
      setNomeFornecedores(response.data.nome);
    })
    .catch((error) => {
      console.log('Error unexpected');
    });

    bensmateriaisData.fornecedor = getParamFromUrl('fornecedores');
  }
}

if (getParamFromUrl('cidade') > 0) {
  if (bensmateriaisData.id === 0 && bensmateriaisData.cidade == 0) {
    cidadeApi
    .getById(getParamFromUrl('cidade'))
    .then((response) => {
      setNomeCidade(response.data.nome);
    })
    .catch((error) => {
      console.log('Error unexpected');
    });

    bensmateriaisData.cidade = getParamFromUrl('cidade');
  }
}
const addValorBensClassificacao = (e: any) => {
  if (e?.id>0)
    onChange({ target: { name: 'bensclassificacao', value: e.id } });
  };
  const addValorFornecedor = (e: any) => {
    if (e?.id>0)
      onChange({ target: { name: 'fornecedor', value: e.id } });
    };
    const addValorCidade = (e: any) => {
      if (e?.id>0)
        onChange({ target: { name: 'cidade', value: e.id } });
      };
      const onConfirm = (e: React.FormEvent) => {
        e.preventDefault();
        if (e.stopPropagation) e.stopPropagation();

          if (!isSubmitting) {
            setIsSubmitting(true);

            try {
              onSubmit(e);
            } catch (error) {
            console.log('Erro ao submeter formulário de BensMateriais:');
            setIsSubmitting(false);
            if (onError) onError();
            }
          }
        };
        const handleCancel = () => {
          if (onReload) {
            onReload(); // Recarrega os dados originais
          } else {
          onClose(); // Comportamento padrão se não há callback de recarga
        }
      };

      const handleDirectSave = () => {
        if (!isSubmitting) {
          setIsSubmitting(true);

          try {
            const syntheticEvent = {
              preventDefault: () => { }, 
              target: document.getElementById(`BensMateriaisForm-${bensmateriaisData.id}`)
            } as unknown as React.FormEvent;

            onSubmit(syntheticEvent);
          } catch (error) {
          console.log('Erro ao salvar BensMateriais diretamente');
          setIsSubmitting(false);
          if (onError) onError();
          }
        }
      };
      useEffect(() => {
        const el = document.querySelector('.nameFormMobile');
        if (el) {
          el.textContent = bensmateriaisData?.id == 0 ? 'Editar BensMateriais' : 'Adicionar Bens Materiais';
        }
      }, [bensmateriaisData.id]);
      return (
      <>
      {!isMobile ? <style jsx global>{`
        @media (max-width: 1366px) {
          html {
            zoom: 0.8 !important;
          }
        }
        `}</style> : null}

        <div className={isMobile ? 'form-container form-container-BensMateriais' : 'form-container form-container-BensMateriais'}>

          <form className='formInputCadInc' id={`BensMateriaisForm-${bensmateriaisData.id}`} onSubmit={onConfirm}>
            {!isMobile && (
              <ButtonSalvarCrud isMobile={false} validationForm={validationForm} entity='BensMateriais' data={bensmateriaisData} isSubmitting={isSubmitting} onClose={onClose} formId={`BensMateriaisForm-${bensmateriaisData.id}`} preventPropagation={true} onSave={handleDirectSave} onCancel={handleCancel} />
              )}
              <div className='grid-container'>

                <InputName
                type='text'
                id='nome'
                label='Nome'
                dataForm={bensmateriaisData}
                className='inputIncNome'
                name='nome'
                value={bensmateriaisData.nome}
                placeholder={`Informe Nome`}
                onChange={onChange}
                required
                />

                <BensClassificacaoComboBox
                name={'bensclassificacao'}
                dataForm={bensmateriaisData}
                value={bensmateriaisData.bensclassificacao}
                setValue={addValorBensClassificacao}
                label={'Bens Classificacao'}
                />

                <InputInput
                type='text'
                maxLength={2048}
                id='datacompra'
                label='DataCompra'
                dataForm={bensmateriaisData}
                className='inputIncNome'
                name='datacompra'
                value={bensmateriaisData.datacompra}
                onChange={onChange}
                />


                <InputInput
                type='text'
                maxLength={2048}
                id='datafimdagarantia'
                label='DataFimDaGarantia'
                dataForm={bensmateriaisData}
                className='inputIncNome'
                name='datafimdagarantia'
                value={bensmateriaisData.datafimdagarantia}
                onChange={onChange}
                />


                <InputInput
                type='text'
                maxLength={255}
                id='nfnro'
                label='NFNRO'
                dataForm={bensmateriaisData}
                className='inputIncNome'
                name='nfnro'
                value={bensmateriaisData.nfnro}
                onChange={onChange}
                />


                <FornecedoresComboBox
                name={'fornecedor'}
                dataForm={bensmateriaisData}
                value={bensmateriaisData.fornecedor}
                setValue={addValorFornecedor}
                label={'Fornecedor'}
                />

                <InputInput
                type='text'
                maxLength={2048}
                id='valorbem'
                label='ValorBem'
                dataForm={bensmateriaisData}
                className='inputIncNome'
                name='valorbem'
                value={bensmateriaisData.valorbem}
                onChange={onChange}
                />


                <InputInput
                type='text'
                maxLength={100}
                id='nroserieproduto'
                label='NroSerieProduto'
                dataForm={bensmateriaisData}
                className='inputIncNome'
                name='nroserieproduto'
                value={bensmateriaisData.nroserieproduto}
                onChange={onChange}
                />


                <InputInput
                type='text'
                maxLength={100}
                id='comprador'
                label='Comprador'
                dataForm={bensmateriaisData}
                className='inputIncNome'
                name='comprador'
                value={bensmateriaisData.comprador}
                onChange={onChange}
                />

              </div><div className='grid-container'>
                <CidadeComboBox
                name={'cidade'}
                dataForm={bensmateriaisData}
                value={bensmateriaisData.cidade}
                setValue={addValorCidade}
                label={'Cidade'}
                />
                <InputCheckbox dataForm={bensmateriaisData} label='GarantiaLoja' name='garantialoja' checked={bensmateriaisData.garantialoja} onChange={onChange} />

                <InputInput
                type='text'
                maxLength={2048}
                id='dataterminodagarantiadaloja'
                label='DataTerminoDaGarantiaDaLoja'
                dataForm={bensmateriaisData}
                className='inputIncNome'
                name='dataterminodagarantiadaloja'
                value={bensmateriaisData.dataterminodagarantiadaloja}
                onChange={onChange}
                />


                <InputInput
                type='text'
                maxLength={2147483647}
                id='observacoes'
                label='Observacoes'
                dataForm={bensmateriaisData}
                className='inputIncNome'
                name='observacoes'
                value={bensmateriaisData.observacoes}
                onChange={onChange}
                />


                <InputInput
                type='text'
                maxLength={255}
                id='nomevendedor'
                label='NomeVendedor'
                dataForm={bensmateriaisData}
                className='inputIncNome'
                name='nomevendedor'
                value={bensmateriaisData.nomevendedor}
                onChange={onChange}
                />

              </div>
            </form>


            {isMobile && (
              <ButtonSalvarCrud isMobile={true} validationForm={validationForm} entity='BensMateriais' data={bensmateriaisData} isSubmitting={isSubmitting} onClose={onClose} formId={`BensMateriaisForm-${bensmateriaisData.id}`} preventPropagation={true} onSave={handleDirectSave} onCancel={handleCancel} />
              )}
              <DeleteButton page={'/pages/bensmateriais'} id={bensmateriaisData.id} closeModel={onClose} dadoApi={dadoApi} />
            </div>
            <div className='form-spacer'></div>
            </>
          );
        };