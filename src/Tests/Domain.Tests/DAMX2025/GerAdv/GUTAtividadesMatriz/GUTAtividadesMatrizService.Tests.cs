// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class GUTAtividadesMatrizServiceTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFGUTAtividadesMatrizFactory> _mockGUTAtividadesMatrizFactory;
    private readonly Mock<IGUTAtividadesMatrizReader> _mockReader;
    private readonly Mock<IGUTAtividadesMatrizValidation> _mockValidation;
    private readonly Mock<IGUTAtividadesMatrizWriter> _mockWriter;
    private readonly Mock<IGUTMatrizReader> _mockGUTMatrizReader;
    private readonly Mock<IGUTAtividadesReader> _mockGUTAtividadesReader;
    private readonly Mock<IHttpContextAccessor> _mockHttpContextAccessor;
    private readonly Mock<HybridCache> _mockCache;
    private readonly Mock<IMemoryCache> _mockMemoryCache;
    private readonly GUTAtividadesMatrizService _service;
    private readonly string _validUri = "test-uri";
    public GUTAtividadesMatrizServiceTests()
    {
        _mockAppSettings = new Mock<IOptions<AppSettings>>();
        _mockGUTAtividadesMatrizFactory = new Mock<IFGUTAtividadesMatrizFactory>();
        _mockReader = new Mock<IGUTAtividadesMatrizReader>();
        _mockValidation = new Mock<IGUTAtividadesMatrizValidation>();
        _mockWriter = new Mock<IGUTAtividadesMatrizWriter>();
        _mockGUTMatrizReader = new Mock<IGUTMatrizReader>();
        _mockGUTAtividadesReader = new Mock<IGUTAtividadesReader>();
        _mockHttpContextAccessor = new Mock<IHttpContextAccessor>();
        _mockCache = new Mock<HybridCache>();
        _mockMemoryCache = new Mock<IMemoryCache>();
        var appSettings = new AppSettings();
        _mockAppSettings.Setup(x => x.Value).Returns(appSettings);
        _service = new GUTAtividadesMatrizService(_mockAppSettings.Object, _mockGUTAtividadesMatrizFactory.Object, _mockReader.Object, _mockValidation.Object, _mockWriter.Object, _mockGUTMatrizReader.Object, _mockGUTAtividadesReader.Object, _mockHttpContextAccessor.Object, _mockCache.Object, _mockMemoryCache.Object);
    }

    [Fact]
    public void Constructor_WithValidParameters_InitializesService()
    {
        // Arrange & Act
        var service = new GUTAtividadesMatrizService(_mockAppSettings.Object, _mockGUTAtividadesMatrizFactory.Object, _mockReader.Object, _mockValidation.Object, _mockWriter.Object, _mockGUTMatrizReader.Object, _mockGUTAtividadesReader.Object, _mockHttpContextAccessor.Object, _mockCache.Object, _mockMemoryCache.Object);
        // Assert
        Assert.NotNull(service);
    }

    [Fact]
    public async Task AddAndUpdate_WithNullInput_ReturnsNull()
    {
        // Act
        var result = await _service.AddAndUpdate(null, _validUri);
        // Assert
        Assert.Null(result);
    }

    [Fact]
    public async Task Delete_WithZeroId_ReturnsNull()
    {
        // Arrange
        var id = 0;
        // Act  
        var result = await _service.Delete(id, _validUri);
        // Assert
        Assert.Null(result);
    }

    [Fact]
    public async Task Delete_WithNegativeId_ReturnsNull()
    {
        // Arrange
        var id = -5;
        // Act
        var result = await _service.Delete(id, _validUri);
        // Assert
        Assert.Null(result);
    }

    [Fact]
    public async Task GetById_WithZeroId_ReturnsDefaultResponse()
    {
        // Arrange
        var id = 0;
        // Act
        var result = await _service.GetById(id, _validUri, CancellationToken.None);
        // Assert
        Assert.NotNull(result);
        Assert.Equal(0, result.Id);
    }

    [Fact]
    public async Task GetById_WithNegativeId_ReturnsDefaultResponse()
    {
        // Arrange
        var id = -1;
        // Act
        var result = await _service.GetById(id, _validUri, CancellationToken.None);
        // Assert
        Assert.NotNull(result);
        Assert.Equal(0, result.Id);
    }

    [Fact]
    public void Dispose_CalledOnce_DisposesCorrectly()
    {
        // Act
        _service.Dispose();
        // Assert - Should not throw any exception
        Assert.True(true);
    }

    [Fact]
    public void Dispose_CalledTwice_DoesNotThrow()
    {
        // Act
        _service.Dispose();
        _service.Dispose();
        // Assert - Should not throw any exception
        Assert.True(true);
    }

    [Fact]
    public async Task ThrowIfDisposed_AfterDispose_ThrowsObjectDisposedException()
    {
        // Arrange
        _service.Dispose();
        // Act & Assert
        await Assert.ThrowsAsync<ObjectDisposedException>(() => _service.GetAll(10, _validUri));
    }

    [Fact]
    public async Task Filter_WithNullFilter_ReturnsEmptyResult()
    {
        // Arrange
        var max = 10;
        var invalidUri = "invalid-uri";
        // Act & Assert
        await Assert.ThrowsAsync<Exception>(() => _service.Filter(max, null, invalidUri));
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}