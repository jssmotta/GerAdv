// 100% auto-generated by Source Genesys WebApi Front & Back Creator
                     // copyright © 2000-2025 Menphis - Sistemas Inteligentes
                     // This file is part of the Source Genesys project                     
                    // GridsMobile.tsx
'use client';
import React from 'react';
import { Grid, GridColumn } from '@progress/kendo-react-grid';
import { IOperador } from '../../Interfaces/interface.Operador';
import { useRouter } from 'next/navigation';
import { useMemo, useCallback } from 'react';
import { applyFilter, CRUD_CONSTANTS, formatCurrency, formatDateBrowser } from '@/app/tools/crud';
import { SvgIcon } from '@progress/kendo-react-common';
import { fileExcelIcon, filePdfIcon, pencilIcon, trashIcon, searchIcon } from '@progress/kendo-svg-icons';
import { useGridFilter } from '@/app/hooks/useGridFilter';
import { useGridSort } from '@/app/hooks/useGridSort';
import { useGridPagination } from '@/app/hooks/useGridPagination';
import '@/app/styles/MobileCrudGrid.css';
interface OperadorGridProps {
  data: IOperador[];
  onRowClick: (operador: IOperador) => void;
  onDeleteClick: (e: any) => void;
  setSelectedId: (id: number | null) => void;
}
export const OperadorGridMobileComponent = React.memo(
({
  data, 
  onRowClick, 
  onDeleteClick, 
  setSelectedId, 

}: OperadorGridProps) => {
const router = useRouter();

const RowNumberCell = (props: any) => <td>{props.dataIndex + 1}</td>;
// Hook para paginação
const { page, handlePageChange } = useGridPagination({
  initialSkip: 0, 
  initialTake: 10, 
});
// Configuração dos filtros iniciais
const initialFilters = {
  nome: '',
};
// Lógica de filtro customizada usando useCallback
const filterLogic = useCallback((data: IOperador, filters: Record<string, any>) => {
  const nomeMatches = applyFilter(data, 'nome', filters.nome);
  return nomeMatches
  ;
}, []);
// Hook para filtros
const { columnFilters, filteredData, handleFilterChange } = useGridFilter({
  data, 
  initialFilters, 
  filterLogic, 
});
// Hook para ordenação
const { sort, sortedData, handleSortChange } = useGridSort({
  data: filteredData, 
});
const handleRowClick = (e: any) => {
  onRowClick(e.dataItem);
};

const openSearchCellAgenda = (id: number) => {
  router.push(`/pages/agenda/?operador=${id}`);
};
const SearchFromCellAgenda = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellAgenda(props.dataItem.id)}><span title='Pesquisar relacionados em Compromisso'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellAlertas = (id: number) => {
  router.push(`/pages/alertas/?operador=${id}`);
};
const SearchFromCellAlertas = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellAlertas(props.dataItem.id)}><span title='Pesquisar relacionados em Alertas'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellAlertasEnviados = (id: number) => {
  router.push(`/pages/alertasenviados/?operador=${id}`);
};
const SearchFromCellAlertasEnviados = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellAlertasEnviados(props.dataItem.id)}><span title='Pesquisar relacionados em Alertas Enviados'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellDiario2 = (id: number) => {
  router.push(`/pages/diario2/?operador=${id}`);
};
const SearchFromCellDiario2 = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellDiario2(props.dataItem.id)}><span title='Pesquisar relacionados em Diario2'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellGUTAtividades = (id: number) => {
  router.push(`/pages/gutatividades/?operador=${id}`);
};
const SearchFromCellGUTAtividades = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellGUTAtividades(props.dataItem.id)}><span title='Pesquisar relacionados em G U T Atividades'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellOperadorEMailPopup = (id: number) => {
  router.push(`/pages/operadoremailpopup/?operador=${id}`);
};
const SearchFromCellOperadorEMailPopup = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellOperadorEMailPopup(props.dataItem.id)}><span title='Pesquisar relacionados em Operador E Mail Popup'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellOperadorGrupo = (id: number) => {
  router.push(`/pages/operadorgrupo/?operador=${id}`);
};
const SearchFromCellOperadorGrupo = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellOperadorGrupo(props.dataItem.id)}><span title='Pesquisar relacionados em Operador Grupo'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellOperadorGruposAgenda = (id: number) => {
  router.push(`/pages/operadorgruposagenda/?operador=${id}`);
};
const SearchFromCellOperadorGruposAgenda = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellOperadorGruposAgenda(props.dataItem.id)}><span title='Pesquisar relacionados em Operador Grupos Agenda'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellPontoVirtual = (id: number) => {
  router.push(`/pages/pontovirtual/?operador=${id}`);
};
const SearchFromCellPontoVirtual = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellPontoVirtual(props.dataItem.id)}><span title='Pesquisar relacionados em Ponto Virtual'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellPontoVirtualAcessos = (id: number) => {
  router.push(`/pages/pontovirtualacessos/?operador=${id}`);
};
const SearchFromCellPontoVirtualAcessos = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellPontoVirtualAcessos(props.dataItem.id)}><span title='Pesquisar relacionados em Ponto Virtual Acessos'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellProcessosParados = (id: number) => {
  router.push(`/pages/processosparados/?operador=${id}`);
};
const SearchFromCellProcessosParados = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellProcessosParados(props.dataItem.id)}><span title='Pesquisar relacionados em Processos Parados'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellProcessOutputRequest = (id: number) => {
  router.push(`/pages/processoutputrequest/?operador=${id}`);
};
const SearchFromCellProcessOutputRequest = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellProcessOutputRequest(props.dataItem.id)}><span title='Pesquisar relacionados em Process Output Request'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellSMSAlice = (id: number) => {
  router.push(`/pages/smsalice/?operador=${id}`);
};
const SearchFromCellSMSAlice = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellSMSAlice(props.dataItem.id)}><span title='Pesquisar relacionados em S M S Alice'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellStatusBiu = (id: number) => {
  router.push(`/pages/statusbiu/?operador=${id}`);
};
const SearchFromCellStatusBiu = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellStatusBiu(props.dataItem.id)}><span title='Pesquisar relacionados em Status Biu'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const gridColumns = useMemo(() => [
  <GridColumn field='index' title='#' sortable={false} filterable={false} width='55px' cells={{ data: RowNumberCell }} />,
  <GridColumn field='nome' title='Nome' />,
  <GridColumn format='{0:n0}' field='index' title='#' sortable={false} filterable={false} width='55px' cells={{ data: RowNumberCell }} />, <GridColumn
  field='id_edit_Agenda'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Compromisso'
  cells={{ data: SearchFromCellAgenda }}
  />, 
  <GridColumn
  field='id_edit_Alertas'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Alertas'
  cells={{ data: SearchFromCellAlertas }}
  />, 
  <GridColumn
  field='id_edit_AlertasEnviados'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Alertas Enviados'
  cells={{ data: SearchFromCellAlertasEnviados }}
  />, 
  <GridColumn
  field='id_edit_Diario2'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Diario2'
  cells={{ data: SearchFromCellDiario2 }}
  />, 
  <GridColumn
  field='id_edit_GUTAtividades'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='G U T Atividades'
  cells={{ data: SearchFromCellGUTAtividades }}
  />, 
  <GridColumn
  field='id_edit_OperadorEMailPopup'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Operador E Mail Popup'
  cells={{ data: SearchFromCellOperadorEMailPopup }}
  />, 
  <GridColumn
  field='id_edit_OperadorGrupo'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Operador Grupo'
  cells={{ data: SearchFromCellOperadorGrupo }}
  />, 
  <GridColumn
  field='id_edit_OperadorGruposAgenda'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Operador Grupos Agenda'
  cells={{ data: SearchFromCellOperadorGruposAgenda }}
  />, 
  <GridColumn
  field='id_edit_PontoVirtual'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Ponto Virtual'
  cells={{ data: SearchFromCellPontoVirtual }}
  />, 
  <GridColumn
  field='id_edit_PontoVirtualAcessos'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Ponto Virtual Acessos'
  cells={{ data: SearchFromCellPontoVirtualAcessos }}
  />, 
  <GridColumn
  field='id_edit_ProcessosParados'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Processos Parados'
  cells={{ data: SearchFromCellProcessosParados }}
  />, 
  <GridColumn
  field='id_edit_ProcessOutputRequest'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Process Output Request'
  cells={{ data: SearchFromCellProcessOutputRequest }}
  />, 
  <GridColumn
  field='id_edit_SMSAlice'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='S M S Alice'
  cells={{ data: SearchFromCellSMSAlice }}
  />, 
  <GridColumn
  field='id_edit_StatusBiu'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Status Biu'
  cells={{ data: SearchFromCellStatusBiu }}
  />, 
  ], []);
  const DeleteRow = (e: any) => {
    return (
    <td>
      <span onClick={() => onDeleteClick(e) } title='Excluit item' ><SvgIcon icon={trashIcon} /></span>
    </td>
  );
};
return (
<>
<Grid
className='grid-mobile-crud grid-mobile-operador'
data={sortedData.slice(page.skip, page.skip + page.take)}
skip={page.skip}
take={page.take}
total={sortedData.length}
pageable={{
  pageSizes: Array.from(CRUD_CONSTANTS.PAGINATION.PAGE_SIZES), 
  buttonCount: CRUD_CONSTANTS.PAGINATION.BUTTON_COUNT, 
}}
onPageChange={handlePageChange}
sortable={true}
sort={sort}
onSortChange={handleSortChange}
resizable={true}
reorderable={true}
filterable={true}
onFilterChange={handleFilterChange}
onRowClick={(e) => handleRowClick(e)}>
{gridColumns}
</Grid>
</>
);
}
);