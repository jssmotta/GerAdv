// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class ProObservacoesWriterTests
{
    private readonly Mock<IFProObservacoesFactory> _mockProObservacoesFactory;
    private readonly Mock<FProObservacoes> _mockFProObservacoes;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly ProObservacoesWriter _proobservacoesWriter;
    public ProObservacoesWriterTests()
    {
        _mockProObservacoesFactory = new Mock<IFProObservacoesFactory>();
        _mockFProObservacoes = new Mock<FProObservacoes>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _proobservacoesWriter = new ProObservacoesWriter(_mockProObservacoesFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var proobservacoes = CreateValidProObservacoesModel();
        proobservacoes.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockProObservacoesFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFProObservacoes.Object);
        _mockFProObservacoes.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _proobservacoesWriter.WriteAsync(proobservacoes, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFProObservacoes.Object);
        _mockProObservacoesFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockProObservacoesFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFProObservacoes.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var proobservacoes = CreateValidProObservacoesModel();
        proobservacoes.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockProObservacoesFactory.Setup(x => x.CreateFromIdAsync(proobservacoes.Id, _mockConnection.Object)).ReturnsAsync(_mockFProObservacoes.Object);
        _mockFProObservacoes.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _proobservacoesWriter.WriteAsync(proobservacoes, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFProObservacoes.Object);
        _mockProObservacoesFactory.Verify(x => x.CreateFromIdAsync(proobservacoes.Id, _mockConnection.Object), Times.Once);
        _mockProObservacoesFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFProObservacoes.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var proobservacoes = CreateValidProObservacoesModel();
        var auditorQuem = 99;
        _mockProObservacoesFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFProObservacoes.Object);
        _mockFProObservacoes.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _proobservacoesWriter.WriteAsync(proobservacoes, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFProObservacoes.Object);
        _mockFProObservacoes.VerifySet(x => x.FProcesso = proobservacoes.Processo, Times.Once);
        _mockFProObservacoes.VerifySet(x => x.FNome = proobservacoes.Nome, Times.Once);
        _mockFProObservacoes.VerifySet(x => x.FObservacoes = proobservacoes.Observacoes, Times.Once);
        _mockFProObservacoes.VerifySet(x => x.FData = proobservacoes.Data, Times.Once);
        _mockFProObservacoes.VerifySet(x => x.FGUID = proobservacoes.GUID, Times.Once);
        _mockFProObservacoes.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var proobservacoes = CreateValidProObservacoesModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockProObservacoesFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _proobservacoesWriter.WriteAsync(proobservacoes, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var proobservacoes = CreateValidProObservacoesModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockProObservacoesFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFProObservacoes.Object);
        _mockFProObservacoes.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _proobservacoesWriter.WriteAsync(proobservacoes, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var proobservacoesResponse = new ProObservacoesResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockProObservacoesFactory.Setup(x => x.DeleteAsync(operadorId, proobservacoesResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _proobservacoesWriter.Delete(proobservacoesResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockProObservacoesFactory.Verify(x => x.DeleteAsync(operadorId, proobservacoesResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var proobservacoesResponse = new ProObservacoesResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockProObservacoesFactory.Setup(x => x.DeleteAsync(operadorId, proobservacoesResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _proobservacoesWriter.Delete(proobservacoesResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var proobservacoesResponse = new ProObservacoesResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockProObservacoesFactory.Setup(x => x.DeleteAsync(operadorId, proobservacoesResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _proobservacoesWriter.Delete(proobservacoesResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new ProObservacoesWriter(_mockProObservacoesFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new ProObservacoesWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.ProObservacoes CreateValidProObservacoesModel()
    {
        return new Models.ProObservacoes
        {
            Id = 0,
            Processo = 1,
            Nome = "João",
            Observacoes = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Data = "27/05/2022",
            GUID = Guid.NewGuid().ToString()
        };
    }
#endregion
}