// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IProDepositosValidation
{
    Task<bool> ValidateReg(Models.ProDepositos reg, IProDepositosService service, IProcessosReader processosReader, IFaseReader faseReader, ITipoProDespositoReader tipoprodespositoReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, IProDepositosService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class ProDepositosValidation : IProDepositosValidation
{
    public async Task<bool> CanDelete(int id, IProDepositosService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.ProDepositos reg)
    {
        return true;
    }

    public async Task<bool> ValidateReg(Models.ProDepositos reg, IProDepositosService service, IProcessosReader processosReader, IFaseReader faseReader, ITipoProDespositoReader tipoprodespositoReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Data))
            throw new SGValidationException("Data é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.Processo == 0)
            throw new SGValidationException("Processo é obrigatório.");
        if (reg.Fase == 0)
            throw new SGValidationException("Fase é obrigatório.");
        if (reg.Data.IsEmpty())
            throw new SGValidationException("Data é obrigatório.");
        if (reg.Valor.IsEmpty())
            throw new SGValidationException("Valor é obrigatório.");
        if (reg.TipoProDesposito == 0)
            throw new SGValidationException("TipoProDesposito é obrigatório.");
        // Processos
        {
            var regProcessos = await processosReader.Read(reg.Processo, oCnn);
            if (regProcessos == null || regProcessos.Id != reg.Processo)
            {
                throw new SGValidationException($"Processos não encontrado ({regProcessos?.Id}).");
            }
        }

        // Fase
        {
            var regFase = await faseReader.Read(reg.Fase, oCnn);
            if (regFase == null || regFase.Id != reg.Fase)
            {
                throw new SGValidationException($"Fase não encontrado ({regFase?.Id}).");
            }
        }

        // TipoProDesposito
        {
            var regTipoProDesposito = await tipoprodespositoReader.Read(reg.TipoProDesposito, oCnn);
            if (regTipoProDesposito == null || regTipoProDesposito.Id != reg.TipoProDesposito)
            {
                throw new SGValidationException($"Tipo Pro Desposito não encontrado ({regTipoProDesposito?.Id}).");
            }
        }

        return true;
    }
}