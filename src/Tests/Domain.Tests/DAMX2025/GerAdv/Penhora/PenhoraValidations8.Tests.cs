// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class PenhoraValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFPenhoraFactory> _mockPenhoraFactory;
    private readonly Mock<IPenhoraReader> _mockReader;
    private readonly PenhoraValidation _validation;
    private readonly Mock<IPenhoraService> _mockPenhoraService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IPenhoraStatusReader> _mockPenhoraStatusReader;
    private readonly PenhoraService _service;
    private readonly string _validUri = "test-uri";
    public PenhoraValidationTests()
    {
        _mockPenhoraFactory = new Mock<IFPenhoraFactory>();
        _mockReader = new Mock<IPenhoraReader>();
        _validation = new PenhoraValidation();
        _mockPenhoraService = new Mock<IPenhoraService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockPenhoraStatusReader = new Mock<IPenhoraStatusReader>();
    }

#region Class Structure Tests
    [Fact]
    public void PenhoraValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IPenhoraValidation>();
    }

    [Fact]
    public void PenhoraValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(PenhoraValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void PenhoraValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(PenhoraValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.Penhora CreateValidPenhora()
    {
        return new Models.Penhora
        {
            Id = 1,
            Processo = 0,
            Nome = "João",
            Descricao = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            DataPenhora = "24/04/1975",
            PenhoraStatus = 0,
            Master = 0
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockPenhoraService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterPenhora>(), It.IsAny<string>())).ReturnsAsync(new List<PenhoraResponseAll>());
        // Setup other mocks but don't override the Penhoras service mock
        _mockPenhoraStatusReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.PenhoraStatusResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockPenhoraService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterPenhora>(), It.IsAny<string>())).ReturnsAsync(new List<PenhoraResponseAll>());
        // Setup other mocks but don't override the Penhoras service mock
        _mockPenhoraStatusReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.PenhoraStatusResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var penhora = new Models.Penhora
        {
            Id = 1,
            Nome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Descricao = null,
            DataPenhora = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(penhora, _mockPenhoraService.Object, _mockPenhoraStatusReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockPenhoraService.Object, _mockPenhoraStatusReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region DataPenhora Validation Tests
    [Theory]
    [InlineData("01/01/1899")]
    [InlineData("31/12/1899")]
    public async Task ValidateReg_WithDataPenhoraBeforeMinDate_ShouldThrowSGValidationException(string invalidDate)
    {
        // Arrange
        var penhora = CreateValidPenhora();
        penhora.DataPenhora = invalidDate;
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(penhora, _mockPenhoraService.Object, _mockPenhoraStatusReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("01/01/1900.");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataPenhora_ShouldPass()
    {
        // Arrange
        var penhora = CreateValidPenhora();
        penhora.DataPenhora = "01/01/1990";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(penhora, _mockPenhoraService.Object, _mockPenhoraStatusReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullDataPenhora_ShouldPass()
    {
        // Arrange
        var penhora = CreateValidPenhora();
        penhora.DataPenhora = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(penhora, _mockPenhoraService.Object, _mockPenhoraStatusReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithInvalidDateDataPenhoraFormat_ShouldPass()
    {
        // Arrange
        var penhora = CreateValidPenhora();
        penhora.DataPenhora = "invalid-date";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(penhora, _mockPenhoraService.Object, _mockPenhoraStatusReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue(); // Invalid format is ignored, not validated
    }

    [Fact]
    public async Task ValidateReg_WithEmptyDataPenhora_ShouldPass()
    {
        // Arrange
        var penhora = CreateValidPenhora();
        penhora.DataPenhora = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(penhora, _mockPenhoraService.Object, _mockPenhoraStatusReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region Foreign Key Validation Tests - PenhoraStatus
    [Fact]
    public async Task ValidateReg_WithInvalidPenhoraStatus_ShouldThrowSGValidationException()
    {
        // Arrange
        var penhora = CreateValidPenhora();
        penhora.PenhoraStatus = 999;
        _mockPenhoraStatusReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.PenhoraStatusResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(penhora, _mockPenhoraService.Object, _mockPenhoraStatusReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedPenhoraStatusId_ShouldThrowSGValidationException()
    {
        // Arrange
        var penhora = CreateValidPenhora();
        penhora.PenhoraStatus = 999;
        var reg888 = new Models.Response.PenhoraStatusResponse
        {
            Id = 888
        }; // Different ID
        _mockPenhoraStatusReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(penhora, _mockPenhoraService.Object, _mockPenhoraStatusReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidPenhoraStatus_ShouldPass()
    {
        // Arrange
        var penhora = CreateValidPenhora();
        penhora.PenhoraStatus = 123;
        var reg123 = new Models.Response.PenhoraStatusResponse
        {
            Id = 123
        };
        _mockPenhoraStatusReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(penhora, _mockPenhoraService.Object, _mockPenhoraStatusReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyPenhoraStatus_ShouldPass()
    {
        // Arrange
        var penhora = CreateValidPenhora();
        penhora.PenhoraStatus = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(penhora, _mockPenhoraService.Object, _mockPenhoraStatusReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockPenhoraStatusReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}