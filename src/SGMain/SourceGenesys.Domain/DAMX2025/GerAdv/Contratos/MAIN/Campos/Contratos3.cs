// 100% auto-generated by Source Genesys Core
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming 1
public partial class DBContratos
{
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool pFldFProcesso, pFldFCliente, pFldFAdvogado, pFldFDia, pFldFValor, pFldFDataInicio, pFldFDataTermino, pFldFOcultarRelatorio, pFldFPercEscritorio, pFldFValorConsultoria, pFldFGUID, pFldFTipoCobranca, pFldFProtestar, pFldFJuros, pFldFValorRealizavel, pFldFDOCUMENTO, pFldFEMail1, pFldFEMail2, pFldFEMail3, pFldFPessoa1, pFldFPessoa2, pFldFPessoa3, pFldFOBS, pFldFClienteContrato, pFldFIdExtrangeiro, pFldFChaveContrato, pFldFAvulso, pFldFSuspenso, pFldFMulta, pFldFBold;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected int m_FProcesso, m_FCliente, m_FAdvogado, m_FDia, m_FTipoCobranca, m_FClienteContrato, m_FIdExtrangeiro;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected string? m_FGUID, m_FProtestar, m_FJuros, m_FDOCUMENTO, m_FEMail1, m_FEMail2, m_FEMail3, m_FPessoa1, m_FPessoa2, m_FPessoa3, m_FOBS, m_FChaveContrato, m_FMulta;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected DateTime? m_FDataInicio, m_FDataTermino;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool m_FOcultarRelatorio, m_FAvulso, m_FSuspenso, m_FBold;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected decimal m_FValor, m_FPercEscritorio, m_FValorConsultoria, m_FValorRealizavel;
    public virtual int FProcesso
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FProcesso;
        set
        {
            pFldFProcesso = pFldFProcesso || value != m_FProcesso;
            if (pFldFProcesso)
                m_FProcesso = value;
        }
    }

    public virtual int FCliente
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCliente;
        set
        {
            pFldFCliente = pFldFCliente || value != m_FCliente;
            if (pFldFCliente)
                m_FCliente = value;
        }
    }

    public virtual int FAdvogado
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAdvogado;
        set
        {
            pFldFAdvogado = pFldFAdvogado || value != m_FAdvogado;
            if (pFldFAdvogado)
                m_FAdvogado = value;
        }
    }

    public virtual int FDia
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDia;
        set
        {
            pFldFDia = pFldFDia || value != m_FDia;
            if (pFldFDia)
                m_FDia = value;
        }
    }

    public virtual decimal FValor
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FValor;
        set
        {
            if (value == m_FValor)
                return;
            pFldFValor = true;
            m_FValor = value;
        }
    }

    public virtual string? FDataInicio
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDataInicio is null || m_FDataInicio == DevourerOne.DDataZerada ? string.Empty : m_FDataInicio.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFDataInicio, m_FDataInicio, value)is not (true, var changed, var data))
                return;
            (pFldFDataInicio, m_FDataInicio) = (changed, data);
        }
    }

    public virtual string? FDataTermino
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDataTermino is null || m_FDataTermino == DevourerOne.DDataZerada ? string.Empty : m_FDataTermino.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFDataTermino, m_FDataTermino, value)is not (true, var changed, var data))
                return;
            (pFldFDataTermino, m_FDataTermino) = (changed, data);
        }
    }

    public virtual bool FOcultarRelatorio
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FOcultarRelatorio;
        set
        {
            pFldFOcultarRelatorio = pFldFOcultarRelatorio || value != m_FOcultarRelatorio;
            if (pFldFOcultarRelatorio)
                m_FOcultarRelatorio = value;
        }
    }

    public virtual decimal FPercEscritorio
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPercEscritorio;
        set
        {
            if (value == m_FPercEscritorio)
                return;
            pFldFPercEscritorio = true;
            m_FPercEscritorio = value;
        }
    }

    public virtual decimal FValorConsultoria
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FValorConsultoria;
        set
        {
            if (value == m_FValorConsultoria)
                return;
            pFldFValorConsultoria = true;
            m_FValorConsultoria = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(100, ErrorMessage = "A propriedade FGUID da tabela Contratos deve ter no máximo 100 caracteres.")]
    public virtual string? FGUID
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FGUID ?? string.Empty;
        set
        {
            pFldFGUID = pFldFGUID || !(m_FGUID ?? string.Empty).Equals(value);
            if (pFldFGUID)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FGUID = trimmed.Length > 100 ? trimmed.AsSpan(0, 100).ToString() : trimmed;
            }
        }
    }

    public virtual int FTipoCobranca
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FTipoCobranca;
        set
        {
            pFldFTipoCobranca = pFldFTipoCobranca || value != m_FTipoCobranca;
            if (pFldFTipoCobranca)
                m_FTipoCobranca = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(50, ErrorMessage = "A propriedade FProtestar da tabela Contratos deve ter no máximo 50 caracteres.")]
    public virtual string? FProtestar
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FProtestar ?? string.Empty;
        set
        {
            pFldFProtestar = pFldFProtestar || !(m_FProtestar ?? string.Empty).Equals(value);
            if (pFldFProtestar)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FProtestar = trimmed.Length > 50 ? trimmed.AsSpan(0, 50).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(5, ErrorMessage = "A propriedade FJuros da tabela Contratos deve ter no máximo 5 caracteres.")]
    public virtual string? FJuros
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FJuros ?? string.Empty;
        set
        {
            pFldFJuros = pFldFJuros || !(m_FJuros ?? string.Empty).Equals(value);
            if (pFldFJuros)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FJuros = trimmed.Length > 5 ? trimmed.AsSpan(0, 5).ToString() : trimmed;
            }
        }
    }

    public virtual decimal FValorRealizavel
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FValorRealizavel;
        set
        {
            if (value == m_FValorRealizavel)
                return;
            pFldFValorRealizavel = true;
            m_FValorRealizavel = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(15, ErrorMessage = "A propriedade FDOCUMENTO da tabela Contratos deve ter no máximo 15 caracteres.")]
    public virtual string? FDOCUMENTO
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDOCUMENTO ?? string.Empty;
        set
        {
            pFldFDOCUMENTO = pFldFDOCUMENTO || !(m_FDOCUMENTO ?? string.Empty).Equals(value);
            if (pFldFDOCUMENTO)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FDOCUMENTO = trimmed.Length > 15 ? trimmed.AsSpan(0, 15).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(300, ErrorMessage = "A propriedade FEMail1 da tabela Contratos deve ter no máximo 300 caracteres.")]
    public virtual string? FEMail1
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEMail1 ?? string.Empty;
        set
        {
            pFldFEMail1 = pFldFEMail1 || !(m_FEMail1 ?? string.Empty).Equals(value);
            if (pFldFEMail1)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FEMail1 = trimmed.Length > 300 ? trimmed.AsSpan(0, 300).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(300, ErrorMessage = "A propriedade FEMail2 da tabela Contratos deve ter no máximo 300 caracteres.")]
    public virtual string? FEMail2
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEMail2 ?? string.Empty;
        set
        {
            pFldFEMail2 = pFldFEMail2 || !(m_FEMail2 ?? string.Empty).Equals(value);
            if (pFldFEMail2)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FEMail2 = trimmed.Length > 300 ? trimmed.AsSpan(0, 300).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(300, ErrorMessage = "A propriedade FEMail3 da tabela Contratos deve ter no máximo 300 caracteres.")]
    public virtual string? FEMail3
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEMail3 ?? string.Empty;
        set
        {
            pFldFEMail3 = pFldFEMail3 || !(m_FEMail3 ?? string.Empty).Equals(value);
            if (pFldFEMail3)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FEMail3 = trimmed.Length > 300 ? trimmed.AsSpan(0, 300).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(100, ErrorMessage = "A propriedade FPessoa1 da tabela Contratos deve ter no máximo 100 caracteres.")]
    public virtual string? FPessoa1
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPessoa1 ?? string.Empty;
        set
        {
            pFldFPessoa1 = pFldFPessoa1 || !(m_FPessoa1 ?? string.Empty).Equals(value);
            if (pFldFPessoa1)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FPessoa1 = trimmed.Length > 100 ? trimmed.AsSpan(0, 100).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(100, ErrorMessage = "A propriedade FPessoa2 da tabela Contratos deve ter no máximo 100 caracteres.")]
    public virtual string? FPessoa2
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPessoa2 ?? string.Empty;
        set
        {
            pFldFPessoa2 = pFldFPessoa2 || !(m_FPessoa2 ?? string.Empty).Equals(value);
            if (pFldFPessoa2)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FPessoa2 = trimmed.Length > 100 ? trimmed.AsSpan(0, 100).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(100, ErrorMessage = "A propriedade FPessoa3 da tabela Contratos deve ter no máximo 100 caracteres.")]
    public virtual string? FPessoa3
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPessoa3 ?? string.Empty;
        set
        {
            pFldFPessoa3 = pFldFPessoa3 || !(m_FPessoa3 ?? string.Empty).Equals(value);
            if (pFldFPessoa3)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FPessoa3 = trimmed.Length > 100 ? trimmed.AsSpan(0, 100).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    public virtual string? FOBS
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FOBS ?? string.Empty;
        set
        {
            pFldFOBS = pFldFOBS || !(m_FOBS ?? string.Empty).Equals(value);
            if (pFldFOBS)
                m_FOBS = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public virtual int FClienteContrato
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FClienteContrato;
        set
        {
            pFldFClienteContrato = pFldFClienteContrato || value != m_FClienteContrato;
            if (pFldFClienteContrato)
                m_FClienteContrato = value;
        }
    }

    public virtual int FIdExtrangeiro
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FIdExtrangeiro;
        set
        {
            pFldFIdExtrangeiro = pFldFIdExtrangeiro || value != m_FIdExtrangeiro;
            if (pFldFIdExtrangeiro)
                m_FIdExtrangeiro = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(50, ErrorMessage = "A propriedade FChaveContrato da tabela Contratos deve ter no máximo 50 caracteres.")]
    public virtual string? FChaveContrato
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FChaveContrato ?? string.Empty;
        set
        {
            pFldFChaveContrato = pFldFChaveContrato || !(m_FChaveContrato ?? string.Empty).Equals(value);
            if (pFldFChaveContrato)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FChaveContrato = trimmed.Length > 50 ? trimmed.AsSpan(0, 50).ToString() : trimmed;
            }
        }
    }

    public virtual bool FAvulso
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAvulso;
        set
        {
            pFldFAvulso = pFldFAvulso || value != m_FAvulso;
            if (pFldFAvulso)
                m_FAvulso = value;
        }
    }

    public virtual bool FSuspenso
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FSuspenso;
        set
        {
            pFldFSuspenso = pFldFSuspenso || value != m_FSuspenso;
            if (pFldFSuspenso)
                m_FSuspenso = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(10, ErrorMessage = "A propriedade FMulta da tabela Contratos deve ter no máximo 10 caracteres.")]
    public virtual string? FMulta
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FMulta ?? string.Empty;
        set
        {
            pFldFMulta = pFldFMulta || !(m_FMulta ?? string.Empty).Equals(value);
            if (pFldFMulta)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FMulta = trimmed.Length > 10 ? trimmed.AsSpan(0, 10).ToString() : trimmed;
            }
        }
    }

    public virtual bool FBold
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FBold;
        set
        {
            pFldFBold = pFldFBold || value != m_FBold;
            if (pFldFBold)
                m_FBold = value;
        }
    }

    public void SetAuditor(int usuarioId) => AuditorQuem = usuarioId;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITabelaName() => PTabelaNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoCodigo() => CampoCodigo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoNome() => CampoNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string IPrefixo() => PTabelaPrefixo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITypeFieldCode() => "int";
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IdIsIdentity() => false;
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => false;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetID() => ID;
}