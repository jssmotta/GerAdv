// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IOutrasPartesClienteValidation
{
    Task<bool> ValidateReg(Models.OutrasPartesCliente reg, IOutrasPartesClienteService service, ICidadeReader cidadeReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, IOutrasPartesClienteService service, IParteClienteOutrasService parteclienteoutrasService, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class OutrasPartesClienteValidation : IOutrasPartesClienteValidation
{
    public async Task<bool> CanDelete(int id, IOutrasPartesClienteService service, IParteClienteOutrasService parteclienteoutrasService, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        var parteclienteoutrasExists0 = await parteclienteoutrasService.Filter(new Filters.FilterParteClienteOutras { Cliente = id }, uri);
        if (parteclienteoutrasExists0 != null && parteclienteoutrasExists0.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Parte Cliente Outras associados a ele.");
        return true;
    }

    private bool ValidSizes(Models.OutrasPartesCliente reg)
    {
        if (reg.Nome.Length > 80)
            throw new SGValidationException($"Nome deve ter no máximo 80 caracteres.");
        if (reg.CPF.Length > 11)
            throw new SGValidationException($"CPF deve ter no máximo 11 caracteres.");
        if (reg.RG.Length > 30)
            throw new SGValidationException($"RG deve ter no máximo 30 caracteres.");
        if (reg.CNPJ.Length > 14)
            throw new SGValidationException($"CNPJ deve ter no máximo 14 caracteres.");
        if (reg.InscEst.Length > 15)
            throw new SGValidationException($"InscEst deve ter no máximo 15 caracteres.");
        if (reg.NomeFantasia.Length > 255)
            throw new SGValidationException($"NomeFantasia deve ter no máximo 255 caracteres.");
        if (reg.Endereco.Length > 80)
            throw new SGValidationException($"Endereco deve ter no máximo 80 caracteres.");
        if (reg.CEP.Length > 10)
            throw new SGValidationException($"CEP deve ter no máximo 10 caracteres.");
        if (reg.Bairro.Length > 50)
            throw new SGValidationException($"Bairro deve ter no máximo 50 caracteres.");
        if (reg.Site.Length > 150)
            throw new SGValidationException($"Site deve ter no máximo 150 caracteres.");
        if (reg.Class.Length > 1)
            throw new SGValidationException($"Class deve ter no máximo 1 caracteres.");
        if (reg.GUID.Length > 150)
            throw new SGValidationException($"GUID deve ter no máximo 150 caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.OutrasPartesCliente reg, IOutrasPartesClienteService service, ICidadeReader cidadeReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Nome))
            throw new SGValidationException("Nome é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.EMail.Length > 0 && !reg.EMail.IsValidEmail())
            throw new SGValidationException($"EMail em formato inválido.");
        if (!string.IsNullOrWhiteSpace(reg.CPF))
        {
            var testaCpf = await IsCpfDuplicado(reg, service, uri);
            if (testaCpf.Item1 && testaCpf.Item2 != null)
            {
                throw new SGValidationException($"Outras Partes Cliente ({testaCpf.Item2.Nome}) com cpf '{reg.CPF.MaskCpf()}' já cadastrado.");
            }
            else if (testaCpf.Item1)
            {
                throw new SGValidationException($"Outras Partes Cliente com cpf '{reg.CPF.MaskCpf()}' já cadastrado.");
            }
        }

        if (!string.IsNullOrWhiteSpace(reg.CNPJ) && await IsCnpjDuplicado(reg, service, uri))
            throw new SGValidationException($"Outras Partes Cliente com cnpj {reg.CNPJ.MaskCnpj()} já cadastrado.");
        // Cidade
        if (!reg.Cidade.IsEmptyIDNumber())
        {
            var regCidade = await cidadeReader.Read(reg.Cidade, oCnn);
            if (regCidade == null || regCidade.Id != reg.Cidade)
            {
                throw new SGValidationException($"Cidade não encontrado ({regCidade?.Id}).");
            }
        }

        return true;
    }

    private async Task<bool> IsCnpjDuplicado(Models.OutrasPartesCliente reg, IOutrasPartesClienteService service, string uri)
    {
        if (reg.CNPJ.Length == 0)
            return false;
        var existingOutrasPartesCliente = (await service.Filter(new Filters.FilterOutrasPartesCliente { CNPJ = reg.CNPJ.ClearInputCnpj() }, uri)).FirstOrDefault();
        return existingOutrasPartesCliente != null && existingOutrasPartesCliente.Id > 0 && existingOutrasPartesCliente.Id != reg.Id;
    }

    private async Task<(bool, OutrasPartesClienteResponseAll? )> IsCpfDuplicado(Models.OutrasPartesCliente reg, IOutrasPartesClienteService service, string uri)
    {
        if (reg.CPF.Length == 0)
            return (false, null);
        var existingOutrasPartesCliente = (await service.Filter(new Filters.FilterOutrasPartesCliente { CPF = reg.CPF.ClearInputCpf() }, uri)).FirstOrDefault();
        return (existingOutrasPartesCliente != null && existingOutrasPartesCliente.Id > 0 && existingOutrasPartesCliente.Id != reg.Id, existingOutrasPartesCliente);
    }
}