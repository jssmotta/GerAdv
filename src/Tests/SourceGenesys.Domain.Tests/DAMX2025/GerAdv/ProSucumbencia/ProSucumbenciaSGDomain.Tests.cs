// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBProSucumbencia - Nome da classe (ex: DBClientes)
/// ProSucumbencia - Nome da tabela (ex: Clientes)
/// scb - Prefixo dos campos (ex: cli)
/// scbCodigo - Nome do campo código (ex: cliCodigo)
/// scbData - Nome do campo nome (ex: cliNome)
/// DBProSucumbencia.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBProSucumbenciaTests : IDisposable
{
    private readonly DBProSucumbencia _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBProSucumbenciaTests()
    {
        _instance = new DBProSucumbencia();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("scbCodigo", typeof(int));
        dt.Columns.Add("scbQuemCad", typeof(int));
        dt.Columns.Add("scbDtCad", typeof(DateTime));
        dt.Columns.Add("scbQuemAtu", typeof(int));
        dt.Columns.Add("scbDtAtu", typeof(DateTime));
        dt.Columns.Add("scbVisto", typeof(bool));
        dt.Columns.Add("scbProcesso", typeof(int));
        dt.Columns.Add("scbInstancia", typeof(int));
        dt.Columns.Add("scbData", typeof(string));
        dt.Columns.Add("scbNome", typeof(string));
        dt.Columns.Add("scbTipoOrigemSucumbencia", typeof(int));
        dt.Columns.Add("scbValor", typeof(decimal));
        dt.Columns.Add("scbPercentual", typeof(string));
        dt.Columns.Add("scbGUID", typeof(string));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("ProSucumbencia", DBProSucumbencia.PTabelaNome);
        Assert.Equal(" ProSucumbencia.* ", DBProSucumbencia.CamposSqlX);
        Assert.Equal("scbCodigo", DBProSucumbencia.CampoCodigo);
        Assert.Equal("scbData", DBProSucumbencia.CampoNome);
        Assert.Equal("scb", DBProSucumbencia.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBProSucumbencia();
        Assert.Equal(0, instance.ID);
        Assert.Equal("ProSucumbencia", instance.ITabelaName());
        Assert.Equal("scb", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBProSucumbencia((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBProSucumbencia((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["scbCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBProSucumbencia(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("ProSucumbencia", cadastro.ITabelaName());
        Assert.Equal("scbCodigo", cadastro.ICampoCodigo());
        Assert.Equal("scbData", cadastro.ICampoNome());
        Assert.Equal("scb", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBProSucumbencia.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBProSucumbencia.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBProSucumbencia.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBProSucumbencia();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBProSucumbencia();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnTrue()
    {
        Assert.True(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Processo_ShouldAcceptIntegerValues(int value)
    {
        _instance.FProcesso = value;
        Assert.Equal(value, _instance.FProcesso);
    }

    [Fact]
    public void Processo_DefaultValue_ShouldBeZero()
    {
        var instance = new DBProSucumbencia();
        Assert.Equal(0, instance.FProcesso);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Instancia_ShouldAcceptIntegerValues(int value)
    {
        _instance.FInstancia = value;
        Assert.Equal(value, _instance.FInstancia);
    }

    [Fact]
    public void Instancia_DefaultValue_ShouldBeZero()
    {
        var instance = new DBProSucumbencia();
        Assert.Equal(0, instance.FInstancia);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Nome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNome = input;
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void Nome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 2048 + 10);
        _instance.FNome = longString;
        Assert.True(_instance.FNome.Length <= 2048);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void TipoOrigemSucumbencia_ShouldAcceptIntegerValues(int value)
    {
        _instance.FTipoOrigemSucumbencia = value;
        Assert.Equal(value, _instance.FTipoOrigemSucumbencia);
    }

    [Fact]
    public void TipoOrigemSucumbencia_DefaultValue_ShouldBeZero()
    {
        var instance = new DBProSucumbencia();
        Assert.Equal(0, instance.FTipoOrigemSucumbencia);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Percentual_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FPercentual = input;
        Assert.Equal(expected, _instance.FPercentual);
    }

    [Fact]
    public void Percentual_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 5 + 10);
        _instance.FPercentual = longString;
        Assert.True(_instance.FPercentual.Length <= 5);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void GUID_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FGUID = input;
        Assert.Equal(expected, _instance.FGUID);
    }

    [Fact]
    public void GUID_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 150 + 10);
        _instance.FGUID = longString;
        Assert.True(_instance.FGUID.Length <= 150);
    }

    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}