// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Readers;
public partial class RecadosReader(IFRecadosFactory recadosFactory) : IRecadosReader
{
    private readonly IFRecadosFactory _recadosFactory = recadosFactory;
    public async Task<IEnumerable<RecadosResponseAll>> Listar(int max, string uri, string cWhere, List<SqlParameter> parameters, string order, CancellationToken cancellationToken) => await ListarTabela(BuildSqlQuery(DBRecados.CamposSqlX, cWhere, order, max), parameters, uri, caching: DevourerOne.PCachingDefault, max: max, cancellationToken: cancellationToken);
    private async Task<IEnumerable<RecadosResponseAll>> ListarTabela(string sql, List<SqlParameter> parameters, string uri, bool caching = DevourerOne.PCachingDefault, int max = 200, CancellationToken cancellationToken = default)
    {
        var result = new List<RecadosResponseAll>(max);
        await using var connection = Configuracoes.GetConnectionByUri(uri);
        await using var cmd = new SqlCommand(cmdText: ConfiguracoesDBT.CmdSql(sql), connection: connection?.InnerConnection)
        {
            CommandTimeout = 30
        };
        foreach (var param in parameters)
        {
            if (!cmd.Parameters.Contains(param.ParameterName))
            {
                var newParam = new SqlParameter(param.ParameterName, param.Value)
                {
                    SqlDbType = param.SqlDbType,
                    Direction = param.Direction,
                    Size = param.Size,
                    Precision = param.Precision,
                    Scale = param.Scale
                };
                cmd.Parameters.Add(newParam);
            }
        }

        await using var reader = await cmd.ExecuteReaderAsync(CommandBehavior.SingleResult);
        while (await reader.ReadAsync())
        {
            if (cancellationToken.IsCancellationRequested)
                return result;
            result.Add(ReadAll(_recadosFactory.CreateFromReader(reader), reader)!);
        }

        return result;
    }

    public async Task<RecadosResponse?> Read(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _recadosFactory.CreateFromIdAsync(id, oCnn);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public async Task<Models.Recados?> ReadM(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _recadosFactory.CreateFromIdAsync(id, oCnn);
        var recados = new Models.Recados
        {
            Id = dbRec.ID,
            ClienteNome = dbRec.FClienteNome ?? string.Empty,
            De = dbRec.FDe ?? string.Empty,
            Para = dbRec.FPara ?? string.Empty,
            Assunto = dbRec.FAssunto ?? string.Empty,
            Concluido = dbRec.FConcluido,
            Processo = dbRec.FProcesso,
            Cliente = dbRec.FCliente,
            Recado = dbRec.FRecado ?? string.Empty,
            Urgente = dbRec.FUrgente,
            Importante = dbRec.FImportante,
            Voltara = dbRec.FVoltara,
            Pessoal = dbRec.FPessoal,
            Retornar = dbRec.FRetornar,
            Emotion = dbRec.FEmotion,
            InternetID = dbRec.FInternetID,
            Uploaded = dbRec.FUploaded,
            Natureza = dbRec.FNatureza,
            BIU = dbRec.FBIU,
            AguardarRetorno = dbRec.FAguardarRetorno,
            AguardarRetornoPara = dbRec.FAguardarRetornoPara ?? string.Empty,
            AguardarRetornoOK = dbRec.FAguardarRetornoOK,
            ParaID = dbRec.FParaID,
            NaoPublicavel = dbRec.FNaoPublicavel,
            IsContatoCRM = dbRec.FIsContatoCRM,
            MasterID = dbRec.FMasterID,
            ListaPara = dbRec.FListaPara ?? string.Empty,
            Typed = dbRec.FTyped,
            AssuntoRecado = dbRec.FAssuntoRecado,
            Historico = dbRec.FHistorico,
            ContatoCRM = dbRec.FContatoCRM,
            Ligacoes = dbRec.FLigacoes,
            Agenda = dbRec.FAgenda,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FHora, out DateTime XHora))
        {
            recados.Hora = dbRec.FHora;
            recados.Hora_date = XHora;
        }

        if (DateTime.TryParse(dbRec.FData, out DateTime XData))
        {
            recados.Data = dbRec.FData;
            recados.Data_date = XData;
        }

        if (DateTime.TryParse(dbRec.FRetornoData, out DateTime XRetornoData))
        {
            recados.RetornoData = dbRec.FRetornoData;
            recados.RetornoData_date = XRetornoData;
        }

        return recados;
    }

    public RecadosResponse? Read(FRecados dbRec, MsiSqlConnection oCnn)
    {
        return Read(dbRec);
    }

    public RecadosResponse? Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn)
    {
        using var dbRec = _recadosFactory.CreateFromParameters(parameters, oCnn, sqlWhere: where);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public RecadosResponse? Read(FRecados dbRec) // Track 001.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var recados = new RecadosResponse
        {
            Id = dbRec.ID,
            ClienteNome = dbRec.FClienteNome ?? string.Empty,
            De = dbRec.FDe ?? string.Empty,
            Para = dbRec.FPara ?? string.Empty,
            Assunto = dbRec.FAssunto ?? string.Empty,
            Concluido = dbRec.FConcluido,
            Processo = dbRec.FProcesso,
            Cliente = dbRec.FCliente,
            Recado = dbRec.FRecado ?? string.Empty,
            Urgente = dbRec.FUrgente,
            Importante = dbRec.FImportante,
            Voltara = dbRec.FVoltara,
            Pessoal = dbRec.FPessoal,
            Retornar = dbRec.FRetornar,
            Emotion = dbRec.FEmotion,
            InternetID = dbRec.FInternetID,
            Uploaded = dbRec.FUploaded,
            Natureza = dbRec.FNatureza,
            BIU = dbRec.FBIU,
            AguardarRetorno = dbRec.FAguardarRetorno,
            AguardarRetornoPara = dbRec.FAguardarRetornoPara ?? string.Empty,
            AguardarRetornoOK = dbRec.FAguardarRetornoOK,
            ParaID = dbRec.FParaID,
            NaoPublicavel = dbRec.FNaoPublicavel,
            IsContatoCRM = dbRec.FIsContatoCRM,
            MasterID = dbRec.FMasterID,
            ListaPara = dbRec.FListaPara ?? string.Empty,
            Typed = dbRec.FTyped,
            AssuntoRecado = dbRec.FAssuntoRecado,
            Historico = dbRec.FHistorico,
            ContatoCRM = dbRec.FContatoCRM,
            Ligacoes = dbRec.FLigacoes,
            Agenda = dbRec.FAgenda,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FHora, out DateTime XHora))
        {
            recados.Hora = dbRec.FHora;
            recados.Hora_date = XHora;
        }

        if (DateTime.TryParse(dbRec.FData, out DateTime XData))
        {
            recados.Data = dbRec.FData;
            recados.Data_date = XData;
        }

        if (DateTime.TryParse(dbRec.FRetornoData, out DateTime XRetornoData))
        {
            recados.RetornoData = dbRec.FRetornoData;
            recados.RetornoData_date = XRetornoData;
        }

        return recados;
    }

    public RecadosResponse? Read(SG.GerAdv.DBRecados dbRec) // Track 002.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var recados = new RecadosResponse
        {
            Id = dbRec.ID,
            ClienteNome = dbRec.FClienteNome ?? string.Empty,
            De = dbRec.FDe ?? string.Empty,
            Para = dbRec.FPara ?? string.Empty,
            Assunto = dbRec.FAssunto ?? string.Empty,
            Concluido = dbRec.FConcluido,
            Processo = dbRec.FProcesso,
            Cliente = dbRec.FCliente,
            Recado = dbRec.FRecado ?? string.Empty,
            Urgente = dbRec.FUrgente,
            Importante = dbRec.FImportante,
            Voltara = dbRec.FVoltara,
            Pessoal = dbRec.FPessoal,
            Retornar = dbRec.FRetornar,
            Emotion = dbRec.FEmotion,
            InternetID = dbRec.FInternetID,
            Uploaded = dbRec.FUploaded,
            Natureza = dbRec.FNatureza,
            BIU = dbRec.FBIU,
            AguardarRetorno = dbRec.FAguardarRetorno,
            AguardarRetornoPara = dbRec.FAguardarRetornoPara ?? string.Empty,
            AguardarRetornoOK = dbRec.FAguardarRetornoOK,
            ParaID = dbRec.FParaID,
            NaoPublicavel = dbRec.FNaoPublicavel,
            IsContatoCRM = dbRec.FIsContatoCRM,
            MasterID = dbRec.FMasterID,
            ListaPara = dbRec.FListaPara ?? string.Empty,
            Typed = dbRec.FTyped,
            AssuntoRecado = dbRec.FAssuntoRecado,
            Historico = dbRec.FHistorico,
            ContatoCRM = dbRec.FContatoCRM,
            Ligacoes = dbRec.FLigacoes,
            Agenda = dbRec.FAgenda,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FHora, out DateTime XHora))
        {
            recados.Hora = dbRec.FHora;
            recados.Hora_date = XHora;
        }

        if (DateTime.TryParse(dbRec.FData, out DateTime XData))
        {
            recados.Data = dbRec.FData;
            recados.Data_date = XData;
        }

        if (DateTime.TryParse(dbRec.FRetornoData, out DateTime XRetornoData))
        {
            recados.RetornoData = dbRec.FRetornoData;
            recados.RetornoData_date = XRetornoData;
        }

        return recados;
    }

    public RecadosResponseAll? ReadAll(FRecados dbRec, IDataRecord dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var recados = new RecadosResponseAll
        {
            Id = dbRec.ID,
            ClienteNome = dbRec.FClienteNome ?? string.Empty,
            De = dbRec.FDe ?? string.Empty,
            Para = dbRec.FPara ?? string.Empty,
            Assunto = dbRec.FAssunto ?? string.Empty,
            Concluido = dbRec.FConcluido,
            Processo = dbRec.FProcesso,
            Cliente = dbRec.FCliente,
            Recado = dbRec.FRecado ?? string.Empty,
            Urgente = dbRec.FUrgente,
            Importante = dbRec.FImportante,
            Voltara = dbRec.FVoltara,
            Pessoal = dbRec.FPessoal,
            Retornar = dbRec.FRetornar,
            Emotion = dbRec.FEmotion,
            InternetID = dbRec.FInternetID,
            Uploaded = dbRec.FUploaded,
            Natureza = dbRec.FNatureza,
            BIU = dbRec.FBIU,
            AguardarRetorno = dbRec.FAguardarRetorno,
            AguardarRetornoPara = dbRec.FAguardarRetornoPara ?? string.Empty,
            AguardarRetornoOK = dbRec.FAguardarRetornoOK,
            ParaID = dbRec.FParaID,
            NaoPublicavel = dbRec.FNaoPublicavel,
            IsContatoCRM = dbRec.FIsContatoCRM,
            MasterID = dbRec.FMasterID,
            ListaPara = dbRec.FListaPara ?? string.Empty,
            Typed = dbRec.FTyped,
            AssuntoRecado = dbRec.FAssuntoRecado,
            Historico = dbRec.FHistorico,
            ContatoCRM = dbRec.FContatoCRM,
            Ligacoes = dbRec.FLigacoes,
            Agenda = dbRec.FAgenda,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FHora, out DateTime XHora))
        {
            recados.Hora = dbRec.FHora;
            recados.Hora_date = XHora;
        }

        if (DateTime.TryParse(dbRec.FData, out DateTime XData))
        {
            recados.Data = dbRec.FData;
            recados.Data_date = XData;
        }

        if (DateTime.TryParse(dbRec.FRetornoData, out DateTime XRetornoData))
        {
            recados.RetornoData = dbRec.FRetornoData;
            recados.RetornoData_date = XRetornoData;
        }

        try
        {
            recados.NroPastaProcessos = dr[DBProcessosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            recados.NomeClientes = dr[DBClientesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            recados.NomeLigacoes = dr[DBLigacoesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return recados;
    }

    public RecadosResponseAll? ReadAll(SG.GerAdv.DBRecados dbRec, DataRow dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var recados = new RecadosResponseAll
        {
            Id = dbRec.ID,
            ClienteNome = dbRec.FClienteNome ?? string.Empty,
            De = dbRec.FDe ?? string.Empty,
            Para = dbRec.FPara ?? string.Empty,
            Assunto = dbRec.FAssunto ?? string.Empty,
            Concluido = dbRec.FConcluido,
            Processo = dbRec.FProcesso,
            Cliente = dbRec.FCliente,
            Recado = dbRec.FRecado ?? string.Empty,
            Urgente = dbRec.FUrgente,
            Importante = dbRec.FImportante,
            Voltara = dbRec.FVoltara,
            Pessoal = dbRec.FPessoal,
            Retornar = dbRec.FRetornar,
            Emotion = dbRec.FEmotion,
            InternetID = dbRec.FInternetID,
            Uploaded = dbRec.FUploaded,
            Natureza = dbRec.FNatureza,
            BIU = dbRec.FBIU,
            AguardarRetorno = dbRec.FAguardarRetorno,
            AguardarRetornoPara = dbRec.FAguardarRetornoPara ?? string.Empty,
            AguardarRetornoOK = dbRec.FAguardarRetornoOK,
            ParaID = dbRec.FParaID,
            NaoPublicavel = dbRec.FNaoPublicavel,
            IsContatoCRM = dbRec.FIsContatoCRM,
            MasterID = dbRec.FMasterID,
            ListaPara = dbRec.FListaPara ?? string.Empty,
            Typed = dbRec.FTyped,
            AssuntoRecado = dbRec.FAssuntoRecado,
            Historico = dbRec.FHistorico,
            ContatoCRM = dbRec.FContatoCRM,
            Ligacoes = dbRec.FLigacoes,
            Agenda = dbRec.FAgenda,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FHora, out DateTime XHora))
        {
            recados.Hora = dbRec.FHora;
            recados.Hora_date = XHora;
        }

        if (DateTime.TryParse(dbRec.FData, out DateTime XData))
        {
            recados.Data = dbRec.FData;
            recados.Data_date = XData;
        }

        if (DateTime.TryParse(dbRec.FRetornoData, out DateTime XRetornoData))
        {
            recados.RetornoData = dbRec.FRetornoData;
            recados.RetornoData_date = XRetornoData;
        }

        try
        {
            recados.NroPastaProcessos = dr[DBProcessosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            recados.NomeClientes = dr[DBClientesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            recados.NomeLigacoes = dr[DBLigacoesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return recados;
    }
}