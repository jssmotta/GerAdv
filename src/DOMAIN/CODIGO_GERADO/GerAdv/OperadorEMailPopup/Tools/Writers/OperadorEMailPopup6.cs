// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Writers;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IOperadorEMailPopupWriter
{
    Task<FOperadorEMailPopup> WriteAsync(Models.OperadorEMailPopup operadoremailpopup, int auditorQuem, MsiSqlConnection oCnn);
    Task Delete(OperadorEMailPopupResponse operadoremailpopup, int operadorId, MsiSqlConnection oCnn);
}

public class OperadorEMailPopupWriter(IFOperadorEMailPopupFactory operadoremailpopupFactory) : IOperadorEMailPopupWriter
{
    private readonly IFOperadorEMailPopupFactory _operadoremailpopupFactory = operadoremailpopupFactory;
    public async Task Delete(OperadorEMailPopupResponse operadoremailpopup, int operadorId, MsiSqlConnection oCnn)
    {
        await _operadoremailpopupFactory.DeleteAsync(operadorId, operadoremailpopup.Id, oCnn);
    }

    public async Task<FOperadorEMailPopup> WriteAsync(Models.OperadorEMailPopup operadoremailpopup, int auditorQuem, MsiSqlConnection oCnn)
    {
        using var dbRec = await (operadoremailpopup.Id.IsEmptyIDNumber() ? _operadoremailpopupFactory.CreateAsync() : _operadoremailpopupFactory.CreateFromIdAsync(operadoremailpopup.Id, oCnn));
        dbRec.FOperador = operadoremailpopup.Operador;
        dbRec.FNome = operadoremailpopup.Nome;
        if (operadoremailpopup.Senha.Length > 0)
            dbRec.FSenha = operadoremailpopup.Senha.Encrypt();
        dbRec.FSMTP = operadoremailpopup.SMTP;
        dbRec.FPOP3 = operadoremailpopup.POP3;
        dbRec.FAutenticacao = operadoremailpopup.Autenticacao;
        dbRec.FDescricao = operadoremailpopup.Descricao;
        dbRec.FUsuario = operadoremailpopup.Usuario;
        dbRec.FPortaSmtp = operadoremailpopup.PortaSmtp;
        dbRec.FPortaPop3 = operadoremailpopup.PortaPop3;
        dbRec.FAssinatura = operadoremailpopup.Assinatura;
        if (operadoremailpopup.Senha256.Length > 0)
            dbRec.FSenha256 = operadoremailpopup.Senha256.Encrypt();
        dbRec.FGUID = operadoremailpopup.GUID;
        dbRec.AuditorQuem = auditorQuem;
        await dbRec.UpdateAsync(oCnn);
        return dbRec;
    }
}