// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class BensMateriaisValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFBensMateriaisFactory> _mockBensMateriaisFactory;
    private readonly Mock<IBensMateriaisReader> _mockReader;
    private readonly BensMateriaisValidation _validation;
    private readonly Mock<IBensMateriaisService> _mockBensMateriaisService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IBensClassificacaoReader> _mockBensClassificacaoReader;
    private readonly Mock<IFornecedoresReader> _mockFornecedoresReader;
    private readonly Mock<ICidadeReader> _mockCidadeReader;
    private readonly BensMateriaisService _service;
    private readonly string _validUri = "test-uri";
    public BensMateriaisValidationTests()
    {
        _mockBensMateriaisFactory = new Mock<IFBensMateriaisFactory>();
        _mockReader = new Mock<IBensMateriaisReader>();
        _validation = new BensMateriaisValidation();
        _mockBensMateriaisService = new Mock<IBensMateriaisService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockBensClassificacaoReader = new Mock<IBensClassificacaoReader>();
        _mockFornecedoresReader = new Mock<IFornecedoresReader>();
        _mockCidadeReader = new Mock<ICidadeReader>();
    }

#region Class Structure Tests
    [Fact]
    public void BensMateriaisValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IBensMateriaisValidation>();
    }

    [Fact]
    public void BensMateriaisValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(BensMateriaisValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void BensMateriaisValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(BensMateriaisValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.BensMateriais CreateValidBensMateriais()
    {
        return new Models.BensMateriais
        {
            Id = 1,
            Nome = "João",
            BensClassificacao = 0,
            DataCompra = "24/04/1975",
            DataFimDaGarantia = "24/04/1975",
            NFNRO = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Fornecedor = 0,
            ValorBem = 0m,
            NroSerieProduto = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Comprador = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Cidade = 0,
            GarantiaLoja = false,
            DataTerminoDaGarantiaDaLoja = "24/04/1975",
            Observacoes = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            NomeVendedor = "João"
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockBensMateriaisService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterBensMateriais>(), It.IsAny<string>())).ReturnsAsync(new List<BensMateriaisResponseAll>());
        // Setup other mocks but don't override the BensMateriaiss service mock
        _mockBensClassificacaoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.BensClassificacaoResponse { Id = id }));
        _mockFornecedoresReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.FornecedoresResponse { Id = id }));
        _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.CidadeResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockBensMateriaisService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterBensMateriais>(), It.IsAny<string>())).ReturnsAsync(new List<BensMateriaisResponseAll>());
        // Setup other mocks but don't override the BensMateriaiss service mock
        _mockBensClassificacaoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.BensClassificacaoResponse { Id = 0 }));
        _mockFornecedoresReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.FornecedoresResponse { Id = 0 }));
        _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.CidadeResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var bensmateriais = new Models.BensMateriais
        {
            Id = 1,
            Nome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            DataCompra = null,
            DataFimDaGarantia = null,
            NFNRO = null,
            NroSerieProduto = null,
            Comprador = null,
            GarantiaLoja = false,
            DataTerminoDaGarantiaDaLoja = null,
            Observacoes = null,
            NomeVendedor = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region DataCompra Validation Tests
    [Theory]
    [InlineData("01/01/1899")]
    [InlineData("31/12/1899")]
    public async Task ValidateReg_WithDataCompraBeforeMinDate_ShouldThrowSGValidationException(string invalidDate)
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriais();
        bensmateriais.DataCompra = invalidDate;
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("01/01/1900.");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataCompra_ShouldPass()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriais();
        bensmateriais.DataCompra = "01/01/1990";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullDataCompra_ShouldPass()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriais();
        bensmateriais.DataCompra = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithInvalidDateDataCompraFormat_ShouldPass()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriais();
        bensmateriais.DataCompra = "invalid-date";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue(); // Invalid format is ignored, not validated
    }

    [Fact]
    public async Task ValidateReg_WithEmptyDataCompra_ShouldPass()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriais();
        bensmateriais.DataCompra = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region DataFimDaGarantia Validation Tests
    [Theory]
    [InlineData("01/01/1899")]
    [InlineData("31/12/1899")]
    public async Task ValidateReg_WithDataFimDaGarantiaBeforeMinDate_ShouldThrowSGValidationException(string invalidDate)
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriais();
        bensmateriais.DataFimDaGarantia = invalidDate;
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("01/01/1900.");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataFimDaGarantia_ShouldPass()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriais();
        bensmateriais.DataFimDaGarantia = "01/01/1990";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullDataFimDaGarantia_ShouldPass()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriais();
        bensmateriais.DataFimDaGarantia = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithInvalidDateDataFimDaGarantiaFormat_ShouldPass()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriais();
        bensmateriais.DataFimDaGarantia = "invalid-date";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue(); // Invalid format is ignored, not validated
    }

    [Fact]
    public async Task ValidateReg_WithEmptyDataFimDaGarantia_ShouldPass()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriais();
        bensmateriais.DataFimDaGarantia = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region DataTerminoDaGarantiaDaLoja Validation Tests
    [Theory]
    [InlineData("01/01/1899")]
    [InlineData("31/12/1899")]
    public async Task ValidateReg_WithDataTerminoDaGarantiaDaLojaBeforeMinDate_ShouldThrowSGValidationException(string invalidDate)
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriais();
        bensmateriais.DataTerminoDaGarantiaDaLoja = invalidDate;
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("01/01/1900.");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataTerminoDaGarantiaDaLoja_ShouldPass()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriais();
        bensmateriais.DataTerminoDaGarantiaDaLoja = "01/01/1990";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullDataTerminoDaGarantiaDaLoja_ShouldPass()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriais();
        bensmateriais.DataTerminoDaGarantiaDaLoja = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithInvalidDateDataTerminoDaGarantiaDaLojaFormat_ShouldPass()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriais();
        bensmateriais.DataTerminoDaGarantiaDaLoja = "invalid-date";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue(); // Invalid format is ignored, not validated
    }

    [Fact]
    public async Task ValidateReg_WithEmptyDataTerminoDaGarantiaDaLoja_ShouldPass()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriais();
        bensmateriais.DataTerminoDaGarantiaDaLoja = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region Foreign Key Validation Tests - BensClassificacao
    [Fact]
    public async Task ValidateReg_WithInvalidBensClassificacao_ShouldThrowSGValidationException()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriais();
        bensmateriais.BensClassificacao = 999;
        _mockBensClassificacaoReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.BensClassificacaoResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedBensClassificacaoId_ShouldThrowSGValidationException()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriais();
        bensmateriais.BensClassificacao = 999;
        var reg888 = new Models.Response.BensClassificacaoResponse
        {
            Id = 888
        }; // Different ID
        _mockBensClassificacaoReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidBensClassificacao_ShouldPass()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriais();
        bensmateriais.BensClassificacao = 123;
        var reg123 = new Models.Response.BensClassificacaoResponse
        {
            Id = 123
        };
        _mockBensClassificacaoReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyBensClassificacao_ShouldPass()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriais();
        bensmateriais.BensClassificacao = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockBensClassificacaoReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - Fornecedores
    [Fact]
    public async Task ValidateReg_WithInvalidFornecedores_ShouldThrowSGValidationException()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriais();
        bensmateriais.Fornecedor = 999;
        _mockFornecedoresReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.FornecedoresResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedFornecedoresId_ShouldThrowSGValidationException()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriais();
        bensmateriais.Fornecedor = 999;
        var reg888 = new Models.Response.FornecedoresResponse
        {
            Id = 888
        }; // Different ID
        _mockFornecedoresReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidFornecedores_ShouldPass()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriais();
        bensmateriais.Fornecedor = 123;
        var reg123 = new Models.Response.FornecedoresResponse
        {
            Id = 123
        };
        _mockFornecedoresReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyFornecedores_ShouldPass()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriais();
        bensmateriais.Fornecedor = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockFornecedoresReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - Cidade
    [Fact]
    public async Task ValidateReg_WithInvalidCidade_ShouldThrowSGValidationException()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriais();
        bensmateriais.Cidade = 999;
        _mockCidadeReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.CidadeResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedCidadeId_ShouldThrowSGValidationException()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriais();
        bensmateriais.Cidade = 999;
        var reg888 = new Models.Response.CidadeResponse
        {
            Id = 888
        }; // Different ID
        _mockCidadeReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidCidade_ShouldPass()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriais();
        bensmateriais.Cidade = 123;
        var reg123 = new Models.Response.CidadeResponse
        {
            Id = 123
        };
        _mockCidadeReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyCidade_ShouldPass()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriais();
        bensmateriais.Cidade = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(bensmateriais, _mockBensMateriaisService.Object, _mockBensClassificacaoReader.Object, _mockFornecedoresReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockCidadeReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}