// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class EnquadramentoEmpresaValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFEnquadramentoEmpresaFactory> _mockEnquadramentoEmpresaFactory;
    private readonly Mock<IEnquadramentoEmpresaReader> _mockReader;
    private readonly EnquadramentoEmpresaValidation _validation;
    private readonly Mock<IEnquadramentoEmpresaService> _mockEnquadramentoEmpresaService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly EnquadramentoEmpresaService _service;
    private readonly string _validUri = "test-uri";
    public EnquadramentoEmpresaValidationTests()
    {
        _mockEnquadramentoEmpresaFactory = new Mock<IFEnquadramentoEmpresaFactory>();
        _mockReader = new Mock<IEnquadramentoEmpresaReader>();
        _validation = new EnquadramentoEmpresaValidation();
        _mockEnquadramentoEmpresaService = new Mock<IEnquadramentoEmpresaService>();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

#region Class Structure Tests
    [Fact]
    public void EnquadramentoEmpresaValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IEnquadramentoEmpresaValidation>();
    }

    [Fact]
    public void EnquadramentoEmpresaValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(EnquadramentoEmpresaValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void EnquadramentoEmpresaValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(EnquadramentoEmpresaValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.EnquadramentoEmpresa CreateValidEnquadramentoEmpresa()
    {
        return new Models.EnquadramentoEmpresa
        {
            Id = 1,
            Nome = "João",
            GUID = Guid.NewGuid().ToString()
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockEnquadramentoEmpresaService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterEnquadramentoEmpresa>(), It.IsAny<string>())).ReturnsAsync(new List<EnquadramentoEmpresaResponseAll>());
    // Setup other mocks but don't override the EnquadramentoEmpresas service mock
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockEnquadramentoEmpresaService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterEnquadramentoEmpresa>(), It.IsAny<string>())).ReturnsAsync(new List<EnquadramentoEmpresaResponseAll>());
    // Setup other mocks but don't override the EnquadramentoEmpresas service mock
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var enquadramentoempresa = new Models.EnquadramentoEmpresa
        {
            Id = 1,
            Nome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            GUID = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(enquadramentoempresa, _mockEnquadramentoEmpresaService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockEnquadramentoEmpresaService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region ValidateReg Required Nome Method Tests 
    [Fact]
    public async Task ValidateReg_WithEmptyNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var enquadramentoempresa = CreateValidEnquadramentoEmpresa();
        enquadramentoempresa.Nome = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(enquadramentoempresa, _mockEnquadramentoEmpresaService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var enquadramentoempresa = CreateValidEnquadramentoEmpresa();
        enquadramentoempresa.Nome = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(enquadramentoempresa, _mockEnquadramentoEmpresaService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataNome_ShouldReturnTrue()
    {
        // Arrange
        var enquadramentoempresa = CreateValidEnquadramentoEmpresa();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(enquadramentoempresa, _mockEnquadramentoEmpresaService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var enquadramentoempresa = CreateValidEnquadramentoEmpresa();
        enquadramentoempresa.Nome = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(enquadramentoempresa, _mockEnquadramentoEmpresaService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
#region ValidateReg Required GUID Method Tests 
    [Fact]
    public async Task ValidateReg_WithEmptyGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var enquadramentoempresa = CreateValidEnquadramentoEmpresa();
        enquadramentoempresa.GUID = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(enquadramentoempresa, _mockEnquadramentoEmpresaService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var enquadramentoempresa = CreateValidEnquadramentoEmpresa();
        enquadramentoempresa.GUID = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(enquadramentoempresa, _mockEnquadramentoEmpresaService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataGUID_ShouldReturnTrue()
    {
        // Arrange
        var enquadramentoempresa = CreateValidEnquadramentoEmpresa();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(enquadramentoempresa, _mockEnquadramentoEmpresaService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var enquadramentoempresa = CreateValidEnquadramentoEmpresa();
        enquadramentoempresa.GUID = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(enquadramentoempresa, _mockEnquadramentoEmpresaService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}