// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IServicosValidation
{
    Task<bool> ValidateReg(Models.Servicos reg, IServicosService service, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
    Task<bool> CanDelete(int? id, IServicosService service, IHorasTrabService horastrabService, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
}

public class ServicosValidation : IServicosValidation
{
    public async Task<bool> CanDelete(int? id, IServicosService service, IHorasTrabService horastrabService, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (id == null || id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id ?? default, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        var horastrabExists0 = await horastrabService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterHorasTrab { Servico = id ?? default }, uri);
        if (horastrabExists0 != null && horastrabExists0.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Horas Trab associados a ele.");
        return true;
    }

    private bool ValidSizes(Models.Servicos reg)
    {
        if (reg.Descricao != null && reg.Descricao.Length > DBServicosDicInfo.SerDescricao.FTamanho)
            throw new SGValidationException($"Descricao deve ter no máximo {DBServicosDicInfo.SerDescricao.FTamanho} caracteres.");
        if (reg.GUID != null && reg.GUID.Length > DBServicosDicInfo.SerGUID.FTamanho)
            throw new SGValidationException($"GUID deve ter no máximo {DBServicosDicInfo.SerGUID.FTamanho} caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.Servicos reg, IServicosService service, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Descricao))
            throw new SGValidationException("Descrição é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        await Task.Delay(0);
        return true;
    }
}