// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IPontoVirtualAcessosValidation
{
    Task<bool> ValidateReg(Models.PontoVirtualAcessos reg, IPontoVirtualAcessosService service, IOperadorReader operadorReader, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
    Task<bool> CanDelete(int? id, IPontoVirtualAcessosService service, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
}

public class PontoVirtualAcessosValidation : IPontoVirtualAcessosValidation
{
    public async Task<bool> CanDelete(int? id, IPontoVirtualAcessosService service, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (id == null || id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id ?? default, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.PontoVirtualAcessos reg)
    {
        if (reg.Origem != null && reg.Origem.Length > DBPontoVirtualAcessosDicInfo.PvaOrigem.FTamanho)
            throw new SGValidationException($"Origem deve ter no máximo {DBPontoVirtualAcessosDicInfo.PvaOrigem.FTamanho} caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.PontoVirtualAcessos reg, IPontoVirtualAcessosService service, IOperadorReader operadorReader, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.Operador == 0)
            throw new SGValidationException("Operador é obrigatório.");
        if (reg.DataHora.IsEmpty())
            throw new SGValidationException("DataHora é obrigatório.");
        if (reg.Origem.IsEmpty())
            throw new SGValidationException("Origem é obrigatório.");
        // Operador
        {
            var regOperador = await operadorReader.Read(reg.Operador, oCnn);
            if (regOperador == null || regOperador.Id != reg.Operador)
            {
                throw new SGValidationException($"Operador não encontrado ({regOperador?.Id}).");
            }
        }

        return true;
    }
}