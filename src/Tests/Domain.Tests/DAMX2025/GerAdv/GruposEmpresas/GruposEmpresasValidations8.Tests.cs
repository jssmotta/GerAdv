// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class GruposEmpresasValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFGruposEmpresasFactory> _mockGruposEmpresasFactory;
    private readonly Mock<IGruposEmpresasReader> _mockReader;
    private readonly GruposEmpresasValidation _validation;
    private readonly Mock<IGruposEmpresasService> _mockGruposEmpresasService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IOponentesReader> _mockOponentesReader;
    private readonly Mock<IClientesReader> _mockClientesReader;
    private readonly GruposEmpresasService _service;
    private readonly string _validUri = "test-uri";
    public GruposEmpresasValidationTests()
    {
        _mockGruposEmpresasFactory = new Mock<IFGruposEmpresasFactory>();
        _mockReader = new Mock<IGruposEmpresasReader>();
        _validation = new GruposEmpresasValidation();
        _mockGruposEmpresasService = new Mock<IGruposEmpresasService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockOponentesReader = new Mock<IOponentesReader>();
        _mockClientesReader = new Mock<IClientesReader>();
    }

#region Class Structure Tests
    [Fact]
    public void GruposEmpresasValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IGruposEmpresasValidation>();
    }

    [Fact]
    public void GruposEmpresasValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(GruposEmpresasValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void GruposEmpresasValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(GruposEmpresasValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.GruposEmpresas CreateValidGruposEmpresas()
    {
        return new Models.GruposEmpresas
        {
            Id = 1,
            EMail = "test@email.com",
            Inativo = false,
            Oponente = 0,
            Descricao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Observacoes = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Cliente = 0,
            Icone = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            DespesaUnificada = true
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockGruposEmpresasService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterGruposEmpresas>(), It.IsAny<string>())).ReturnsAsync(new List<GruposEmpresasResponseAll>());
        // Setup other mocks but don't override the GruposEmpresass service mock
        _mockOponentesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.OponentesResponse { Id = id }));
        _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.ClientesResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockGruposEmpresasService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterGruposEmpresas>(), It.IsAny<string>())).ReturnsAsync(new List<GruposEmpresasResponseAll>());
        // Setup other mocks but don't override the GruposEmpresass service mock
        _mockOponentesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.OponentesResponse { Id = 0 }));
        _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.ClientesResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var gruposempresas = new Models.GruposEmpresas
        {
            Id = 1,
            EMail = null,
            Inativo = false,
            Descricao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Observacoes = null,
            Icone = null,
            DespesaUnificada = true
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(gruposempresas, _mockGruposEmpresasService.Object, _mockOponentesReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockGruposEmpresasService.Object, _mockOponentesReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region EMail Validation Tests
    [Fact]
    public async Task ValidateReg_WithInvalidEMail_ShouldThrowSGValidationException()
    {
        // Arrange
        var gruposempresas = CreateValidGruposEmpresas();
        gruposempresas.EMail = "invalid-email";
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(gruposempresas, _mockGruposEmpresasService.Object, _mockOponentesReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("formato inválido.");
    }

    [Fact]
    public async Task ValidateReg_WithValidEMail_ShouldPass()
    {
        // Arrange
        var gruposempresas = CreateValidGruposEmpresas();
        gruposempresas.EMail = "menphis@example.com";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(gruposempresas, _mockGruposEmpresasService.Object, _mockOponentesReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithEmptyEMail_ShouldPass()
    {
        // Arrange
        var gruposempresas = CreateValidGruposEmpresas();
        gruposempresas.EMail = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(gruposempresas, _mockGruposEmpresasService.Object, _mockOponentesReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region Foreign Key Validation Tests - Oponentes
    [Fact]
    public async Task ValidateReg_WithInvalidOponentes_ShouldThrowSGValidationException()
    {
        // Arrange
        var gruposempresas = CreateValidGruposEmpresas();
        gruposempresas.Oponente = 999;
        _mockOponentesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.OponentesResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(gruposempresas, _mockGruposEmpresasService.Object, _mockOponentesReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedOponentesId_ShouldThrowSGValidationException()
    {
        // Arrange
        var gruposempresas = CreateValidGruposEmpresas();
        gruposempresas.Oponente = 999;
        var reg888 = new Models.Response.OponentesResponse
        {
            Id = 888
        }; // Different ID
        _mockOponentesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(gruposempresas, _mockGruposEmpresasService.Object, _mockOponentesReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidOponentes_ShouldPass()
    {
        // Arrange
        var gruposempresas = CreateValidGruposEmpresas();
        gruposempresas.Oponente = 123;
        var reg123 = new Models.Response.OponentesResponse
        {
            Id = 123
        };
        _mockOponentesReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(gruposempresas, _mockGruposEmpresasService.Object, _mockOponentesReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyOponentes_ShouldPass()
    {
        // Arrange
        var gruposempresas = CreateValidGruposEmpresas();
        gruposempresas.Oponente = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(gruposempresas, _mockGruposEmpresasService.Object, _mockOponentesReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockOponentesReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - Clientes
    [Fact]
    public async Task ValidateReg_WithInvalidClientes_ShouldThrowSGValidationException()
    {
        // Arrange
        var gruposempresas = CreateValidGruposEmpresas();
        gruposempresas.Cliente = 999;
        _mockClientesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.ClientesResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(gruposempresas, _mockGruposEmpresasService.Object, _mockOponentesReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedClientesId_ShouldThrowSGValidationException()
    {
        // Arrange
        var gruposempresas = CreateValidGruposEmpresas();
        gruposempresas.Cliente = 999;
        var reg888 = new Models.Response.ClientesResponse
        {
            Id = 888
        }; // Different ID
        _mockClientesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(gruposempresas, _mockGruposEmpresasService.Object, _mockOponentesReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidClientes_ShouldPass()
    {
        // Arrange
        var gruposempresas = CreateValidGruposEmpresas();
        gruposempresas.Cliente = 123;
        var reg123 = new Models.Response.ClientesResponse
        {
            Id = 123
        };
        _mockClientesReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(gruposempresas, _mockGruposEmpresasService.Object, _mockOponentesReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyClientes_ShouldPass()
    {
        // Arrange
        var gruposempresas = CreateValidGruposEmpresas();
        gruposempresas.Cliente = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(gruposempresas, _mockGruposEmpresasService.Object, _mockOponentesReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockClientesReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}