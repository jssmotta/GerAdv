// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBTerceiros - Nome da classe (ex: DBClientes)
/// Terceiros - Nome da tabela (ex: Clientes)
/// ter - Prefixo dos campos (ex: cli)
/// terCodigo - Nome do campo código (ex: cliCodigo)
/// terNome - Nome do campo nome (ex: cliNome)
/// DBTerceiros.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBTerceirosTests : IDisposable
{
    private readonly DBTerceiros _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBTerceirosTests()
    {
        _instance = new DBTerceiros();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("terCodigo", typeof(int));
        dt.Columns.Add("terQuemCad", typeof(int));
        dt.Columns.Add("terDtCad", typeof(DateTime));
        dt.Columns.Add("terQuemAtu", typeof(int));
        dt.Columns.Add("terDtAtu", typeof(DateTime));
        dt.Columns.Add("terVisto", typeof(bool));
        dt.Columns.Add("terProcesso", typeof(int));
        dt.Columns.Add("terNome", typeof(string));
        dt.Columns.Add("terSituacao", typeof(int));
        dt.Columns.Add("terCidade", typeof(int));
        dt.Columns.Add("terEndereco", typeof(string));
        dt.Columns.Add("terBairro", typeof(string));
        dt.Columns.Add("terCEP", typeof(string));
        dt.Columns.Add("terFone", typeof(string));
        dt.Columns.Add("terFax", typeof(string));
        dt.Columns.Add("terOBS", typeof(string));
        dt.Columns.Add("terEMail", typeof(string));
        dt.Columns.Add("terGUID", typeof(string));
        dt.Columns.Add("terClass", typeof(string));
        dt.Columns.Add("terVaraForoComarca", typeof(string));
        dt.Columns.Add("terSexo", typeof(string));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("Terceiros", DBTerceiros.PTabelaNome);
        Assert.Equal(" Terceiros.* ", DBTerceiros.CamposSqlX);
        Assert.Equal("terCodigo", DBTerceiros.CampoCodigo);
        Assert.Equal("terNome", DBTerceiros.CampoNome);
        Assert.Equal("ter", DBTerceiros.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBTerceiros();
        Assert.Equal(0, instance.ID);
        Assert.Equal("Terceiros", instance.ITabelaName());
        Assert.Equal("ter", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBTerceiros((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBTerceiros((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["terCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBTerceiros(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("Terceiros", cadastro.ITabelaName());
        Assert.Equal("terCodigo", cadastro.ICampoCodigo());
        Assert.Equal("terNome", cadastro.ICampoNome());
        Assert.Equal("ter", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBTerceiros.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBTerceiros.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBTerceiros.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBTerceiros();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBTerceiros();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnTrue()
    {
        Assert.True(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Processo_ShouldAcceptIntegerValues(int value)
    {
        _instance.FProcesso = value;
        Assert.Equal(value, _instance.FProcesso);
    }

    [Fact]
    public void Processo_DefaultValue_ShouldBeZero()
    {
        var instance = new DBTerceiros();
        Assert.Equal(0, instance.FProcesso);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Nome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNome = input;
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void Nome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FNome = longString;
        Assert.True(_instance.FNome.Length <= 80);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Situacao_ShouldAcceptIntegerValues(int value)
    {
        _instance.FSituacao = value;
        Assert.Equal(value, _instance.FSituacao);
    }

    [Fact]
    public void Situacao_DefaultValue_ShouldBeZero()
    {
        var instance = new DBTerceiros();
        Assert.Equal(0, instance.FSituacao);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cidade_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCidade = value;
        Assert.Equal(value, _instance.FCidade);
    }

    [Fact]
    public void Cidade_DefaultValue_ShouldBeZero()
    {
        var instance = new DBTerceiros();
        Assert.Equal(0, instance.FCidade);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Endereco_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FEndereco = input;
        Assert.Equal(expected, _instance.FEndereco);
    }

    [Fact]
    public void Endereco_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FEndereco = longString;
        Assert.True(_instance.FEndereco.Length <= 80);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Bairro_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FBairro = input;
        Assert.Equal(expected, _instance.FBairro);
    }

    [Fact]
    public void Bairro_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FBairro = longString;
        Assert.True(_instance.FBairro.Length <= 50);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Fone_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FFone = input;
        Assert.Equal(expected, _instance.FFone);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Fax_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FFax = input;
        Assert.Equal(expected, _instance.FFax);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void OBS_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FOBS = input;
        Assert.Equal(expected, _instance.FOBS);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void GUID_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FGUID = input;
        Assert.Equal(expected, _instance.FGUID);
    }

    [Fact]
    public void GUID_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FGUID = longString;
        Assert.True(_instance.FGUID.Length <= 100);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData(" A", "A")]
    public void Class_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FClass = input;
        Assert.Equal(expected, _instance.FClass);
    }

    [Fact]
    public void Class_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 1 + 10);
        _instance.FClass = longString;
        Assert.True(_instance.FClass.Length <= 1);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void VaraForoComarca_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FVaraForoComarca = input;
        Assert.Equal(expected, _instance.FVaraForoComarca);
    }

    [Fact]
    public void VaraForoComarca_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 255 + 10);
        _instance.FVaraForoComarca = longString;
        Assert.True(_instance.FVaraForoComarca.Length <= 255);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Sexo_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FSexo = value;
        Assert.Equal(value, _instance.FSexo);
    }

    [Fact]
    public void Sexo_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBTerceiros();
        Assert.False(instance.FSexo);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Sexo_ShouldAcceptIntegerValues(int value)
{
    _instance.FSexo = value;
    Assert.Equal(value, _instance.FSexo);
}

[Fact]
public void Sexo_DefaultValue_ShouldBeZero()
{
    var instance = new DBTerceiros();
    Assert.Equal(0, instance.Sexo);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Sexo_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FSexo = dateString;
    Assert.Equal(dateString, _instance.FSexo);
}

[Fact]
public void Sexo_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBTerceiros();
    Assert.Equal(string.Empty, instance.Sexo);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Sexo_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FSexo = input;
        Assert.Equal(expected, _instance.FSexo);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FSexo = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Sexo_ValidEmail_ShouldAccept(string email)
{
    _instance.FSexo = email;
    Assert.Equal(email, _instance.FSexo);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Sexo_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FSexo = email);
}
*/
    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}