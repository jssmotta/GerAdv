// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBAgendaRelatorio - Nome da classe (ex: DBClientes)
/// AgendaRelatorio - Nome da tabela (ex: Clientes)
///  - Prefixo dos campos (ex: cli)
/// vqaCodigo - Nome do campo código (ex: cliCodigo)
/// advNome - Nome do campo nome (ex: cliNome)
/// DBAgendaRelatorio.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBAgendaRelatorioTests : IDisposable
{
    private readonly DBAgendaRelatorio _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBAgendaRelatorioTests()
    {
        _instance = new DBAgendaRelatorio();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("vqaCodigo", typeof(int));
        dt.Columns.Add("vqaData", typeof(DateTime));
        dt.Columns.Add("vqaProcesso", typeof(int));
        dt.Columns.Add("xxxParaNome", typeof(string));
        dt.Columns.Add("xxxParaPessoas", typeof(string));
        dt.Columns.Add("xxxBoxAudiencia", typeof(string));
        dt.Columns.Add("xxxBoxAudienciaMobile", typeof(string));
        dt.Columns.Add("xxxNomeAdvogado", typeof(string));
        dt.Columns.Add("xxxNomeForo", typeof(string));
        dt.Columns.Add("xxxNomeJustica", typeof(string));
        dt.Columns.Add("xxxNomeArea", typeof(string));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("AgendaRelatorio", DBAgendaRelatorio.PTabelaNome);
        Assert.Equal(" AgendaRelatorio.* ", DBAgendaRelatorio.CamposSqlX);
        Assert.Equal("vqaCodigo", DBAgendaRelatorio.CampoCodigo);
        Assert.Equal("advNome", DBAgendaRelatorio.CampoNome);
        Assert.Equal("", DBAgendaRelatorio.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBAgendaRelatorio();
        Assert.Equal(0, instance.ID);
        Assert.Equal("AgendaRelatorio", instance.ITabelaName());
        Assert.Equal("", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBAgendaRelatorio((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBAgendaRelatorio((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["vqaCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBAgendaRelatorio(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBAgendaRelatorio.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBAgendaRelatorio.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBAgendaRelatorio.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBAgendaRelatorio();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBAgendaRelatorio();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnFalse()
    {
        Assert.False(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnFalse()
    {
        Assert.False(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnTrue()
    {
        Assert.True(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData("01/01/2000 00:00:00")]
    [InlineData("31/12/2023 00:00:00")]
    [InlineData("15/08/2024 00:00:00")]
    public void vqaData_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FvqaData = dateString;
        Assert.Equal(dateString, _instance.FvqaData);
    }

    [Fact]
    public void vqaData_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBAgendaRelatorio();
        Assert.Equal(string.Empty, instance.FvqaData);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void vqaProcesso_ShouldAcceptIntegerValues(int value)
    {
        _instance.FvqaProcesso = value;
        Assert.Equal(value, _instance.FvqaProcesso);
    }

    [Fact]
    public void vqaProcesso_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgendaRelatorio();
        Assert.Equal(0, instance.FvqaProcesso);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void xxxParaNome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FxxxParaNome = input;
        Assert.Equal(expected, _instance.FxxxParaNome);
    }

    [Fact]
    public void xxxParaNome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 60 + 10);
        _instance.FxxxParaNome = longString;
        Assert.True(_instance.FxxxParaNome.Length <= 60);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void xxxParaPessoas_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FxxxParaPessoas = input;
        Assert.Equal(expected, _instance.FxxxParaPessoas);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void xxxBoxAudiencia_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FxxxBoxAudiencia = input;
        Assert.Equal(expected, _instance.FxxxBoxAudiencia);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void xxxBoxAudienciaMobile_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FxxxBoxAudienciaMobile = input;
        Assert.Equal(expected, _instance.FxxxBoxAudienciaMobile);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void xxxNomeAdvogado_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FxxxNomeAdvogado = input;
        Assert.Equal(expected, _instance.FxxxNomeAdvogado);
    }

    [Fact]
    public void xxxNomeAdvogado_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FxxxNomeAdvogado = longString;
        Assert.True(_instance.FxxxNomeAdvogado.Length <= 50);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void xxxNomeForo_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FxxxNomeForo = input;
        Assert.Equal(expected, _instance.FxxxNomeForo);
    }

    [Fact]
    public void xxxNomeForo_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 40 + 10);
        _instance.FxxxNomeForo = longString;
        Assert.True(_instance.FxxxNomeForo.Length <= 40);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void xxxNomeJustica_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FxxxNomeJustica = input;
        Assert.Equal(expected, _instance.FxxxNomeJustica);
    }

    [Fact]
    public void xxxNomeJustica_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FxxxNomeJustica = longString;
        Assert.True(_instance.FxxxNomeJustica.Length <= 50);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void xxxNomeArea_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FxxxNomeArea = input;
        Assert.Equal(expected, _instance.FxxxNomeArea);
    }

    [Fact]
    public void xxxNomeArea_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 40 + 10);
        _instance.FxxxNomeArea = longString;
        Assert.True(_instance.FxxxNomeArea.Length <= 40);
    }

    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}