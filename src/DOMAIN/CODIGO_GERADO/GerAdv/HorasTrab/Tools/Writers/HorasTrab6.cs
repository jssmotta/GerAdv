// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Writers;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IHorasTrabWriter
{
    Task<FHorasTrab> WriteAsync(Models.HorasTrab horastrab, int auditorQuem, MsiSqlConnection? oCnn);
    Task Delete(HorasTrabResponse horastrab, int operadorId, MsiSqlConnection? oCnn);
}

public class HorasTrabWriter(IFHorasTrabFactory horastrabFactory) : IHorasTrabWriter
{
    private readonly IFHorasTrabFactory _horastrabFactory = horastrabFactory ?? throw new ArgumentNullException(nameof(horastrabFactory));
    public virtual async Task Delete(HorasTrabResponse horastrab, int operadorId, MsiSqlConnection? oCnn)
    {
        await _horastrabFactory.DeleteAsync(operadorId, horastrab.Id, oCnn);
    }

    public virtual async Task<FHorasTrab> WriteAsync(Models.HorasTrab horastrab, int auditorQuem, MsiSqlConnection? oCnn)
    {
        using var dbRec = await (horastrab.Id.IsEmptyIDNumber() ? _horastrabFactory.CreateAsync() : _horastrabFactory.CreateFromIdAsync(horastrab.Id, oCnn));
        dbRec.FGUID = horastrab.GUID;
        dbRec.FIDContatoCRM = horastrab.IDContatoCRM;
        dbRec.FHonorario = horastrab.Honorario;
        dbRec.FIDAgenda = horastrab.IDAgenda;
        dbRec.FData = horastrab.Data;
        dbRec.FCliente = horastrab.Cliente;
        dbRec.FStatus = horastrab.Status;
        dbRec.FProcesso = horastrab.Processo;
        dbRec.FAdvogado = horastrab.Advogado;
        dbRec.FFuncionario = horastrab.Funcionario;
        dbRec.FHrIni = horastrab.HrIni;
        dbRec.FHrFim = horastrab.HrFim;
        dbRec.FTempo = horastrab.Tempo;
        dbRec.FValor = horastrab.Valor;
        dbRec.FOBS = horastrab.OBS;
        dbRec.FAnexo = horastrab.Anexo;
        dbRec.FAnexoComp = horastrab.AnexoComp;
        dbRec.FAnexoUNC = horastrab.AnexoUNC;
        dbRec.FServico = horastrab.Servico;
        dbRec.AuditorQuem = auditorQuem;
        await dbRec.UpdateAsync(oCnn);
        return dbRec;
    }
}