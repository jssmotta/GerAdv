// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class LivroCaixaWriterTests
{
    private readonly Mock<IFLivroCaixaFactory> _mockLivroCaixaFactory;
    private readonly Mock<FLivroCaixa> _mockFLivroCaixa;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly LivroCaixaWriter _livrocaixaWriter;
    public LivroCaixaWriterTests()
    {
        _mockLivroCaixaFactory = new Mock<IFLivroCaixaFactory>();
        _mockFLivroCaixa = new Mock<FLivroCaixa>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _livrocaixaWriter = new LivroCaixaWriter(_mockLivroCaixaFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var livrocaixa = CreateValidLivroCaixaModel();
        livrocaixa.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockLivroCaixaFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFLivroCaixa.Object);
        _mockFLivroCaixa.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _livrocaixaWriter.WriteAsync(livrocaixa, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFLivroCaixa.Object);
        _mockLivroCaixaFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockLivroCaixaFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFLivroCaixa.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var livrocaixa = CreateValidLivroCaixaModel();
        livrocaixa.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockLivroCaixaFactory.Setup(x => x.CreateFromIdAsync(livrocaixa.Id, _mockConnection.Object)).ReturnsAsync(_mockFLivroCaixa.Object);
        _mockFLivroCaixa.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _livrocaixaWriter.WriteAsync(livrocaixa, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFLivroCaixa.Object);
        _mockLivroCaixaFactory.Verify(x => x.CreateFromIdAsync(livrocaixa.Id, _mockConnection.Object), Times.Once);
        _mockLivroCaixaFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFLivroCaixa.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var livrocaixa = CreateValidLivroCaixaModel();
        var auditorQuem = 99;
        _mockLivroCaixaFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFLivroCaixa.Object);
        _mockFLivroCaixa.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _livrocaixaWriter.WriteAsync(livrocaixa, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFLivroCaixa.Object);
        _mockFLivroCaixa.VerifySet(x => x.FPrevisto = livrocaixa.Previsto, Times.Once);
        _mockFLivroCaixa.VerifySet(x => x.FIDDes = livrocaixa.IDDes, Times.Once);
        _mockFLivroCaixa.VerifySet(x => x.FPessoal = livrocaixa.Pessoal, Times.Once);
        _mockFLivroCaixa.VerifySet(x => x.FAjuste = livrocaixa.Ajuste, Times.Once);
        _mockFLivroCaixa.VerifySet(x => x.FIDHon = livrocaixa.IDHon, Times.Once);
        _mockFLivroCaixa.VerifySet(x => x.FIDHonParc = livrocaixa.IDHonParc, Times.Once);
        _mockFLivroCaixa.VerifySet(x => x.FIDHonSuc = livrocaixa.IDHonSuc, Times.Once);
        _mockFLivroCaixa.VerifySet(x => x.FData = livrocaixa.Data, Times.Once);
        _mockFLivroCaixa.VerifySet(x => x.FProcesso = livrocaixa.Processo, Times.Once);
        _mockFLivroCaixa.VerifySet(x => x.FValor = livrocaixa.Valor, Times.Once);
        _mockFLivroCaixa.VerifySet(x => x.FTipo = livrocaixa.Tipo, Times.Once);
        _mockFLivroCaixa.VerifySet(x => x.FHistorico = livrocaixa.Historico, Times.Once);
        _mockFLivroCaixa.VerifySet(x => x.FGrupo = livrocaixa.Grupo, Times.Once);
        _mockFLivroCaixa.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var livrocaixa = CreateValidLivroCaixaModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockLivroCaixaFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _livrocaixaWriter.WriteAsync(livrocaixa, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var livrocaixa = CreateValidLivroCaixaModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockLivroCaixaFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFLivroCaixa.Object);
        _mockFLivroCaixa.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _livrocaixaWriter.WriteAsync(livrocaixa, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var livrocaixaResponse = new LivroCaixaResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockLivroCaixaFactory.Setup(x => x.DeleteAsync(operadorId, livrocaixaResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _livrocaixaWriter.Delete(livrocaixaResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockLivroCaixaFactory.Verify(x => x.DeleteAsync(operadorId, livrocaixaResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var livrocaixaResponse = new LivroCaixaResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockLivroCaixaFactory.Setup(x => x.DeleteAsync(operadorId, livrocaixaResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _livrocaixaWriter.Delete(livrocaixaResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var livrocaixaResponse = new LivroCaixaResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockLivroCaixaFactory.Setup(x => x.DeleteAsync(operadorId, livrocaixaResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _livrocaixaWriter.Delete(livrocaixaResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new LivroCaixaWriter(_mockLivroCaixaFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new LivroCaixaWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.LivroCaixa CreateValidLivroCaixaModel()
    {
        return new Models.LivroCaixa
        {
            Id = 0,
            Previsto = false,
            IDDes = 1,
            Pessoal = 1,
            Ajuste = false,
            IDHon = 1,
            IDHonParc = 1,
            IDHonSuc = false,
            Data = "27/05/2022",
            Processo = 1,
            Valor = 1m,
            Tipo = false,
            Historico = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Grupo = 1
        };
    }
#endregion
}