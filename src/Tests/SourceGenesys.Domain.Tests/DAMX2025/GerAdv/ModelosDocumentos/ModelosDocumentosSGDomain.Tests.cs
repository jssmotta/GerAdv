// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBModelosDocumentos - Nome da classe (ex: DBClientes)
/// ModelosDocumentos - Nome da tabela (ex: Clientes)
/// mdc - Prefixo dos campos (ex: cli)
/// mdcCodigo - Nome do campo código (ex: cliCodigo)
/// mdcNome - Nome do campo nome (ex: cliNome)
/// DBModelosDocumentos.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBModelosDocumentosTests : IDisposable
{
    private readonly DBModelosDocumentos _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBModelosDocumentosTests()
    {
        _instance = new DBModelosDocumentos();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("mdcCodigo", typeof(int));
        dt.Columns.Add("mdcQuemCad", typeof(int));
        dt.Columns.Add("mdcDtCad", typeof(DateTime));
        dt.Columns.Add("mdcQuemAtu", typeof(int));
        dt.Columns.Add("mdcDtAtu", typeof(DateTime));
        dt.Columns.Add("mdcVisto", typeof(bool));
        dt.Columns.Add("mdcNome", typeof(string));
        dt.Columns.Add("mdcRemuneracao", typeof(string));
        dt.Columns.Add("mdcAssinatura", typeof(string));
        dt.Columns.Add("mdcHeader", typeof(string));
        dt.Columns.Add("mdcFooter", typeof(string));
        dt.Columns.Add("mdcExtra1", typeof(string));
        dt.Columns.Add("mdcExtra2", typeof(string));
        dt.Columns.Add("mdcExtra3", typeof(string));
        dt.Columns.Add("mdcOutorgante", typeof(string));
        dt.Columns.Add("mdcOutorgados", typeof(string));
        dt.Columns.Add("mdcPoderes", typeof(string));
        dt.Columns.Add("mdcObjeto", typeof(string));
        dt.Columns.Add("mdcTitulo", typeof(string));
        dt.Columns.Add("mdcTestemunhas", typeof(string));
        dt.Columns.Add("mdcTipoModeloDocumento", typeof(int));
        dt.Columns.Add("mdcCSS", typeof(string));
        dt.Columns.Add("mdcGUID", typeof(string));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("ModelosDocumentos", DBModelosDocumentos.PTabelaNome);
        Assert.Equal(" ModelosDocumentos.* ", DBModelosDocumentos.CamposSqlX);
        Assert.Equal("mdcCodigo", DBModelosDocumentos.CampoCodigo);
        Assert.Equal("mdcNome", DBModelosDocumentos.CampoNome);
        Assert.Equal("mdc", DBModelosDocumentos.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBModelosDocumentos();
        Assert.Equal(0, instance.ID);
        Assert.Equal("ModelosDocumentos", instance.ITabelaName());
        Assert.Equal("mdc", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBModelosDocumentos((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBModelosDocumentos((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["mdcCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBModelosDocumentos(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("ModelosDocumentos", cadastro.ITabelaName());
        Assert.Equal("mdcCodigo", cadastro.ICampoCodigo());
        Assert.Equal("mdcNome", cadastro.ICampoNome());
        Assert.Equal("mdc", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBModelosDocumentos.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBModelosDocumentos.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBModelosDocumentos.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBModelosDocumentos();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBModelosDocumentos();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnTrue()
    {
        Assert.True(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Nome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNome = input;
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void Nome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FNome = longString;
        Assert.True(_instance.FNome.Length <= 50);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Remuneracao_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FRemuneracao = input;
        Assert.Equal(expected, _instance.FRemuneracao);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Assinatura_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FAssinatura = input;
        Assert.Equal(expected, _instance.FAssinatura);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Header_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FHeader = input;
        Assert.Equal(expected, _instance.FHeader);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Footer_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FFooter = input;
        Assert.Equal(expected, _instance.FFooter);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Extra1_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FExtra1 = input;
        Assert.Equal(expected, _instance.FExtra1);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Extra2_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FExtra2 = input;
        Assert.Equal(expected, _instance.FExtra2);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Extra3_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FExtra3 = input;
        Assert.Equal(expected, _instance.FExtra3);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Outorgante_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FOutorgante = input;
        Assert.Equal(expected, _instance.FOutorgante);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Outorgados_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FOutorgados = input;
        Assert.Equal(expected, _instance.FOutorgados);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Poderes_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FPoderes = input;
        Assert.Equal(expected, _instance.FPoderes);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Objeto_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FObjeto = input;
        Assert.Equal(expected, _instance.FObjeto);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Titulo_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FTitulo = input;
        Assert.Equal(expected, _instance.FTitulo);
    }

    [Fact]
    public void Titulo_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 2000 + 10);
        _instance.FTitulo = longString;
        Assert.True(_instance.FTitulo.Length <= 2000);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Testemunhas_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FTestemunhas = input;
        Assert.Equal(expected, _instance.FTestemunhas);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void TipoModeloDocumento_ShouldAcceptIntegerValues(int value)
    {
        _instance.FTipoModeloDocumento = value;
        Assert.Equal(value, _instance.FTipoModeloDocumento);
    }

    [Fact]
    public void TipoModeloDocumento_DefaultValue_ShouldBeZero()
    {
        var instance = new DBModelosDocumentos();
        Assert.Equal(0, instance.FTipoModeloDocumento);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void CSS_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FCSS = input;
        Assert.Equal(expected, _instance.FCSS);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void GUID_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FGUID = input;
        Assert.Equal(expected, _instance.FGUID);
    }

    [Fact]
    public void GUID_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FGUID = longString;
        Assert.True(_instance.FGUID.Length <= 100);
    }

    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}