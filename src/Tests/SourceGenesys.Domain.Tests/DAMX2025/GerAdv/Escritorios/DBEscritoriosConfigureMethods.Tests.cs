// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
/// <summary>
/// Comprehensive unit tests for ConfigureUpdateFields and ConfigureAuditorFields methods in DBEscritorios class
/// These methods are critical for database update operations and auditing functionality
/// Tests both synchronous and asynchronous Update methods
/// </summary>
public class DBEscritoriosConfigureMethodsTests : IDisposable
{
    private readonly DBEscritorios _escritorios;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBEscritoriosConfigureMethodsTests()
    {
        _escritorios = new DBEscritorios();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void ConfigureUpdateFields_WhenNoFieldsChanged_ShouldNotUpdateDatabase()
    {
        // Arrange
        ResetAllFieldFlags();
        _escritorios.ID = 1; // Update scenario
        // Act
        var result = _escritorios.Update(_mockConnection.Object);
        // Assert - Should return 0 because no fields changed
        result.Should().Be(0);
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WhenNoFieldsChanged_ShouldNotUpdateDatabase()
    {
        // Arrange
        ResetAllFieldFlags();
        _escritorios.ID = 1; // Update scenario
        // Act & Assert - For async, when no fields changed and it's an update, it should return 0 or throw exception
        try
        {
            var result = await _escritorios.UpdateAsync(_mockConnection.Object);
            // If no exception is thrown, verify the result indicates no update was needed
            result.Should().Be(0, "When no fields changed in update scenario, should return 0");
        }
        catch (Exception ex)
        {
            // If exception is thrown due to mocked connection, that's also acceptable
            ex.Should().NotBeNull();
        }
    }

#region Helper Methods
    private void SetFieldFlag(string fieldName, bool value)
    {
        var field = typeof(DBEscritorios).GetField(fieldName, BindingFlags.NonPublic | BindingFlags.Instance);
        field?.SetValue(_escritorios, value);
    }

    private void SetFieldValue(string fieldName, object? value)
    {
        var field = typeof(DBEscritorios).GetField(fieldName, BindingFlags.NonPublic | BindingFlags.Instance);
        try
        {
            field?.SetValue(_escritorios, value);
        }
        catch
        {
            field?.SetValue(_escritorios, Convert.ToDateTime(value));
        }
    }

    private void ResetAllFieldFlags()
    {
        var fieldFlags = new[]
        {
            "pFldFGUID",
            "pFldFCNPJ",
            "pFldFCasa",
            "pFldFParceria",
            "pFldFNome",
            "pFldFOAB",
            "pFldFEndereco",
            "pFldFCidade",
            "pFldFBairro",
            "pFldFCEP",
            "pFldFFone",
            "pFldFFax",
            "pFldFSite",
            "pFldFEMail",
            "pFldFOBS",
            "pFldFAdvResponsavel",
            "pFldFSecretaria",
            "pFldFInscEst",
            "pFldFCorrespondente",
            "pFldFTop",
        };
        foreach (var flag in fieldFlags)
        {
            SetFieldFlag(flag, false);
        }
    }

    private void SetAllFieldFlags(bool value)
    {
        var fieldFlags = new[]
        {
            "pFldFGUID",
            "pFldFCNPJ",
            "pFldFCasa",
            "pFldFParceria",
            "pFldFNome",
            "pFldFOAB",
            "pFldFEndereco",
            "pFldFCidade",
            "pFldFBairro",
            "pFldFCEP",
            "pFldFFone",
            "pFldFFax",
            "pFldFSite",
            "pFldFEMail",
            "pFldFOBS",
            "pFldFAdvResponsavel",
            "pFldFSecretaria",
            "pFldFInscEst",
            "pFldFCorrespondente",
            "pFldFTop",
        };
        foreach (var flag in fieldFlags)
        {
            SetFieldFlag(flag, value);
        }
    }

    private void SetAllFieldValues()
    {
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FCNPJ", "93016944000138");
        SetFieldValue("m_FCasa", false);
        SetFieldValue("m_FParceria", false);
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FOAB", "AAAAAAAAAAAAA");
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FCidade", 123);
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FCEP", "AAAAAAAA");
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FEMail", "menphis@menphis.com.br");
        SetFieldValue("m_FOBS", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        SetFieldValue("m_FAdvResponsavel", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FSecretaria", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        SetFieldValue("m_FCorrespondente", false);
        SetFieldValue("m_FTop", false);
    }

#endregion
#region Fields_All
    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithGUIDFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", value);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsGUID_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsGUID_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithGUIDFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", value);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsGUIDChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncGUID_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncGUID_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertGUID_ShouldSetInsertAuditFields()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 5;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsGUID_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _escritorios.ID = 123; // Update scenario
        _escritorios.AuditorQuem = 7;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsGUID_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _escritorios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsGUID_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _escritorios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsGUID_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _escritorios.ID = 0;
        _escritorios.AuditorQuem = 10;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _escritorios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsGUID_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _escritorios.ID = id;
        _escritorios.AuditorQuem = 15;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _escritorios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncGUID_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 5;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncGUID_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _escritorios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsGUID_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _escritorios.ID = 123;
        _escritorios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _escritorios.FGUID.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsGUID_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _escritorios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _escritorios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsGUID_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", "");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsGUID_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", null);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncGUID_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FGUID", "");
        SetFieldValue("m_FCompromisso", "");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsGUID_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _escritorios.FGUID.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.FCidade.Should().Be(123);
    }

    [Fact]
    public void ConfigureUpdateFieldsCNPJ_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _escritorios.FCNPJ.Should().Be("93016944000138");
        _escritorios.FCidade.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithNomeFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true);
        SetFieldValue("m_FNome", value);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsNome_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true); // At least one field must change
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsNome_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithNomeFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true);
        SetFieldValue("m_FNome", value);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsNomeChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncNome_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true);
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncNome_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true);
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertNome_ShouldSetInsertAuditFields()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 5;
        SetFieldFlag("pFldFNome", true); // At least one field must change
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsNome_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _escritorios.ID = 123; // Update scenario
        _escritorios.AuditorQuem = 7;
        SetFieldFlag("pFldFNome", true); // At least one field must change
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsNome_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFNome", true); // At least one field must change
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _escritorios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsNome_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFNome", true); // At least one field must change
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _escritorios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsNome_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _escritorios.ID = 0;
        _escritorios.AuditorQuem = 10;
        SetFieldFlag("pFldFNome", true); // At least one field must change
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _escritorios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsNome_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _escritorios.ID = id;
        _escritorios.AuditorQuem = 15;
        SetFieldFlag("pFldFNome", true); // At least one field must change
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _escritorios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncNome_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 5;
        SetFieldFlag("pFldFNome", true); // At least one field must change
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncNome_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFNome", true); // At least one field must change
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _escritorios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsNome_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _escritorios.ID = 123;
        _escritorios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _escritorios.FNome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsNome_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _escritorios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _escritorios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFNome", true);
        SetFieldValue("m_FNome", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsNome_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true);
        SetFieldValue("m_FNome", "");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsNome_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true);
        SetFieldValue("m_FNome", null);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncNome_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FNome", "");
        SetFieldValue("m_FCompromisso", "");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsNome_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _escritorios.FNome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.FCidade.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithOABFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFOAB", true);
        SetFieldValue("m_FOAB", value);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsOAB_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFOAB", true); // At least one field must change
        SetFieldValue("m_FOAB", "AAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsOAB_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFOAB", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FOAB", "AAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithOABFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFOAB", true);
        SetFieldValue("m_FOAB", value);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsOABChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFOAB", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FOAB", "AAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncOAB_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFOAB", true);
        SetFieldValue("m_FOAB", "AAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncOAB_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFOAB", true);
        SetFieldValue("m_FOAB", "AAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertOAB_ShouldSetInsertAuditFields()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 5;
        SetFieldFlag("pFldFOAB", true); // At least one field must change
        SetFieldValue("m_FOAB", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsOAB_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _escritorios.ID = 123; // Update scenario
        _escritorios.AuditorQuem = 7;
        SetFieldFlag("pFldFOAB", true); // At least one field must change
        SetFieldValue("m_FOAB", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsOAB_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFOAB", true); // At least one field must change
        SetFieldValue("m_FOAB", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _escritorios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsOAB_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFOAB", true); // At least one field must change
        SetFieldValue("m_FOAB", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _escritorios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsOAB_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _escritorios.ID = 0;
        _escritorios.AuditorQuem = 10;
        SetFieldFlag("pFldFOAB", true); // At least one field must change
        SetFieldValue("m_FOAB", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _escritorios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsOAB_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _escritorios.ID = id;
        _escritorios.AuditorQuem = 15;
        SetFieldFlag("pFldFOAB", true); // At least one field must change
        SetFieldValue("m_FOAB", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _escritorios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncOAB_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 5;
        SetFieldFlag("pFldFOAB", true); // At least one field must change
        SetFieldValue("m_FOAB", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncOAB_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFOAB", true); // At least one field must change
        SetFieldValue("m_FOAB", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _escritorios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsOAB_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _escritorios.ID = 123;
        _escritorios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _escritorios.FOAB.Should().Be("AAAAAAAAAAAAA");
        _escritorios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsOAB_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _escritorios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _escritorios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFOAB", true);
        SetFieldValue("m_FOAB", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsOAB_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFOAB", true);
        SetFieldValue("m_FOAB", "");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsOAB_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFOAB", true);
        SetFieldValue("m_FOAB", null);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncOAB_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFOAB", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FOAB", "");
        SetFieldValue("m_FCompromisso", "");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsOAB_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _escritorios.FOAB.Should().Be("AAAAAAAAAAAAA");
        _escritorios.FCidade.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithEnderecoFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true);
        SetFieldValue("m_FEndereco", value);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsEndereco_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true); // At least one field must change
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsEndereco_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithEnderecoFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true);
        SetFieldValue("m_FEndereco", value);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsEnderecoChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncEndereco_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true);
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncEndereco_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true);
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertEndereco_ShouldSetInsertAuditFields()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 5;
        SetFieldFlag("pFldFEndereco", true); // At least one field must change
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsEndereco_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _escritorios.ID = 123; // Update scenario
        _escritorios.AuditorQuem = 7;
        SetFieldFlag("pFldFEndereco", true); // At least one field must change
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsEndereco_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFEndereco", true); // At least one field must change
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _escritorios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsEndereco_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFEndereco", true); // At least one field must change
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _escritorios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsEndereco_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _escritorios.ID = 0;
        _escritorios.AuditorQuem = 10;
        SetFieldFlag("pFldFEndereco", true); // At least one field must change
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _escritorios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsEndereco_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _escritorios.ID = id;
        _escritorios.AuditorQuem = 15;
        SetFieldFlag("pFldFEndereco", true); // At least one field must change
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _escritorios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncEndereco_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 5;
        SetFieldFlag("pFldFEndereco", true); // At least one field must change
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncEndereco_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFEndereco", true); // At least one field must change
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _escritorios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsEndereco_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _escritorios.ID = 123;
        _escritorios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _escritorios.FEndereco.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsEndereco_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _escritorios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _escritorios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFEndereco", true);
        SetFieldValue("m_FEndereco", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsEndereco_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true);
        SetFieldValue("m_FEndereco", "");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsEndereco_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true);
        SetFieldValue("m_FEndereco", null);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncEndereco_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FEndereco", "");
        SetFieldValue("m_FCompromisso", "");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsEndereco_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _escritorios.FEndereco.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.FCidade.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithBairroFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true);
        SetFieldValue("m_FBairro", value);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsBairro_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true); // At least one field must change
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsBairro_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithBairroFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true);
        SetFieldValue("m_FBairro", value);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsBairroChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncBairro_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true);
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncBairro_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true);
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertBairro_ShouldSetInsertAuditFields()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 5;
        SetFieldFlag("pFldFBairro", true); // At least one field must change
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsBairro_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _escritorios.ID = 123; // Update scenario
        _escritorios.AuditorQuem = 7;
        SetFieldFlag("pFldFBairro", true); // At least one field must change
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsBairro_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFBairro", true); // At least one field must change
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _escritorios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsBairro_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFBairro", true); // At least one field must change
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _escritorios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsBairro_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _escritorios.ID = 0;
        _escritorios.AuditorQuem = 10;
        SetFieldFlag("pFldFBairro", true); // At least one field must change
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _escritorios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsBairro_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _escritorios.ID = id;
        _escritorios.AuditorQuem = 15;
        SetFieldFlag("pFldFBairro", true); // At least one field must change
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _escritorios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncBairro_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 5;
        SetFieldFlag("pFldFBairro", true); // At least one field must change
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncBairro_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFBairro", true); // At least one field must change
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _escritorios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsBairro_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _escritorios.ID = 123;
        _escritorios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _escritorios.FBairro.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsBairro_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _escritorios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _escritorios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFBairro", true);
        SetFieldValue("m_FBairro", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsBairro_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true);
        SetFieldValue("m_FBairro", "");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsBairro_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true);
        SetFieldValue("m_FBairro", null);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncBairro_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FBairro", "");
        SetFieldValue("m_FCompromisso", "");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsBairro_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _escritorios.FBairro.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.FCidade.Should().Be(123);
    }

    [Fact]
    public void ConfigureUpdateFieldsCEP_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _escritorios.FCEP.Should().Be("AAAAAAAA");
        _escritorios.FCidade.Should().Be(123);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithFoneFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true);
        SetFieldValue("m_FFone", value);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsFone_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true); // At least one field must change
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _escritorios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsFone_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithFoneFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true);
        SetFieldValue("m_FFone", value);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsFoneChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncFone_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true);
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _escritorios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncFone_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true);
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertFone_ShouldSetInsertAuditFields()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 5;
        SetFieldFlag("pFldFFone", true); // At least one field must change
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsFone_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _escritorios.ID = 123; // Update scenario
        _escritorios.AuditorQuem = 7;
        SetFieldFlag("pFldFFone", true); // At least one field must change
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsFone_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFFone", true); // At least one field must change
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _escritorios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsFone_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFFone", true); // At least one field must change
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _escritorios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsFone_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _escritorios.ID = 0;
        _escritorios.AuditorQuem = 10;
        SetFieldFlag("pFldFFone", true); // At least one field must change
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _escritorios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsFone_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _escritorios.ID = id;
        _escritorios.AuditorQuem = 15;
        SetFieldFlag("pFldFFone", true); // At least one field must change
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _escritorios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncFone_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 5;
        SetFieldFlag("pFldFFone", true); // At least one field must change
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncFone_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFFone", true); // At least one field must change
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _escritorios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsFone_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _escritorios.ID = 123;
        _escritorios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _escritorios.FFone.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _escritorios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsFone_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _escritorios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _escritorios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFFone", true);
        SetFieldValue("m_FFone", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsFone_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true);
        SetFieldValue("m_FFone", "");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsFone_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true);
        SetFieldValue("m_FFone", null);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncFone_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FFone", "");
        SetFieldValue("m_FCompromisso", "");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsFone_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _escritorios.FFone.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _escritorios.FCidade.Should().Be(123);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithFaxFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true);
        SetFieldValue("m_FFax", value);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsFax_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true); // At least one field must change
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _escritorios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsFax_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithFaxFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true);
        SetFieldValue("m_FFax", value);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsFaxChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncFax_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true);
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _escritorios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncFax_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true);
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertFax_ShouldSetInsertAuditFields()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 5;
        SetFieldFlag("pFldFFax", true); // At least one field must change
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsFax_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _escritorios.ID = 123; // Update scenario
        _escritorios.AuditorQuem = 7;
        SetFieldFlag("pFldFFax", true); // At least one field must change
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsFax_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFFax", true); // At least one field must change
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _escritorios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsFax_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFFax", true); // At least one field must change
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _escritorios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsFax_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _escritorios.ID = 0;
        _escritorios.AuditorQuem = 10;
        SetFieldFlag("pFldFFax", true); // At least one field must change
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _escritorios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsFax_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _escritorios.ID = id;
        _escritorios.AuditorQuem = 15;
        SetFieldFlag("pFldFFax", true); // At least one field must change
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _escritorios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncFax_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 5;
        SetFieldFlag("pFldFFax", true); // At least one field must change
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncFax_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFFax", true); // At least one field must change
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _escritorios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsFax_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _escritorios.ID = 123;
        _escritorios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _escritorios.FFax.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _escritorios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsFax_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _escritorios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _escritorios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFFax", true);
        SetFieldValue("m_FFax", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsFax_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true);
        SetFieldValue("m_FFax", "");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsFax_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true);
        SetFieldValue("m_FFax", null);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncFax_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FFax", "");
        SetFieldValue("m_FCompromisso", "");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsFax_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _escritorios.FFax.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _escritorios.FCidade.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithSiteFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSite", true);
        SetFieldValue("m_FSite", value);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsSite_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSite", true); // At least one field must change
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsSite_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSite", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithSiteFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSite", true);
        SetFieldValue("m_FSite", value);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsSiteChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSite", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncSite_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSite", true);
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncSite_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSite", true);
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertSite_ShouldSetInsertAuditFields()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 5;
        SetFieldFlag("pFldFSite", true); // At least one field must change
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsSite_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _escritorios.ID = 123; // Update scenario
        _escritorios.AuditorQuem = 7;
        SetFieldFlag("pFldFSite", true); // At least one field must change
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsSite_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFSite", true); // At least one field must change
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _escritorios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsSite_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFSite", true); // At least one field must change
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _escritorios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsSite_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _escritorios.ID = 0;
        _escritorios.AuditorQuem = 10;
        SetFieldFlag("pFldFSite", true); // At least one field must change
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _escritorios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsSite_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _escritorios.ID = id;
        _escritorios.AuditorQuem = 15;
        SetFieldFlag("pFldFSite", true); // At least one field must change
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _escritorios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncSite_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 5;
        SetFieldFlag("pFldFSite", true); // At least one field must change
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncSite_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFSite", true); // At least one field must change
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _escritorios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsSite_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _escritorios.ID = 123;
        _escritorios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _escritorios.FSite.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsSite_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _escritorios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _escritorios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFSite", true);
        SetFieldValue("m_FSite", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsSite_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSite", true);
        SetFieldValue("m_FSite", "");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsSite_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSite", true);
        SetFieldValue("m_FSite", null);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncSite_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSite", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FSite", "");
        SetFieldValue("m_FCompromisso", "");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsSite_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _escritorios.FSite.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.FCidade.Should().Be(123);
    }

    [Fact]
    public void ConfigureUpdateFieldsEMail_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _escritorios.FEMail.Should().Be("menphis@menphis.com.br");
        _escritorios.FCidade.Should().Be(123);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithOBSFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFOBS", true);
        SetFieldValue("m_FOBS", value);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsOBS_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFOBS", true); // At least one field must change
        SetFieldValue("m_FOBS", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _escritorios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsOBS_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFOBS", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FOBS", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithOBSFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFOBS", true);
        SetFieldValue("m_FOBS", value);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsOBSChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFOBS", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FOBS", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncOBS_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFOBS", true);
        SetFieldValue("m_FOBS", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _escritorios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncOBS_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFOBS", true);
        SetFieldValue("m_FOBS", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertOBS_ShouldSetInsertAuditFields()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 5;
        SetFieldFlag("pFldFOBS", true); // At least one field must change
        SetFieldValue("m_FOBS", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsOBS_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _escritorios.ID = 123; // Update scenario
        _escritorios.AuditorQuem = 7;
        SetFieldFlag("pFldFOBS", true); // At least one field must change
        SetFieldValue("m_FOBS", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsOBS_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFOBS", true); // At least one field must change
        SetFieldValue("m_FOBS", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _escritorios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsOBS_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFOBS", true); // At least one field must change
        SetFieldValue("m_FOBS", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _escritorios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsOBS_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _escritorios.ID = 0;
        _escritorios.AuditorQuem = 10;
        SetFieldFlag("pFldFOBS", true); // At least one field must change
        SetFieldValue("m_FOBS", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _escritorios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsOBS_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _escritorios.ID = id;
        _escritorios.AuditorQuem = 15;
        SetFieldFlag("pFldFOBS", true); // At least one field must change
        SetFieldValue("m_FOBS", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _escritorios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncOBS_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 5;
        SetFieldFlag("pFldFOBS", true); // At least one field must change
        SetFieldValue("m_FOBS", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncOBS_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFOBS", true); // At least one field must change
        SetFieldValue("m_FOBS", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _escritorios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsOBS_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _escritorios.ID = 123;
        _escritorios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _escritorios.FOBS.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _escritorios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsOBS_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _escritorios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _escritorios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFOBS", true);
        SetFieldValue("m_FOBS", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsOBS_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFOBS", true);
        SetFieldValue("m_FOBS", "");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsOBS_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFOBS", true);
        SetFieldValue("m_FOBS", null);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncOBS_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFOBS", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FOBS", "");
        SetFieldValue("m_FCompromisso", "");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsOBS_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _escritorios.FOBS.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _escritorios.FCidade.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithAdvResponsavelFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFAdvResponsavel", true);
        SetFieldValue("m_FAdvResponsavel", value);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsAdvResponsavel_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFAdvResponsavel", true); // At least one field must change
        SetFieldValue("m_FAdvResponsavel", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsAdvResponsavel_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFAdvResponsavel", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FAdvResponsavel", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithAdvResponsavelFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFAdvResponsavel", true);
        SetFieldValue("m_FAdvResponsavel", value);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsAdvResponsavelChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFAdvResponsavel", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FAdvResponsavel", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncAdvResponsavel_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFAdvResponsavel", true);
        SetFieldValue("m_FAdvResponsavel", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncAdvResponsavel_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFAdvResponsavel", true);
        SetFieldValue("m_FAdvResponsavel", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertAdvResponsavel_ShouldSetInsertAuditFields()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 5;
        SetFieldFlag("pFldFAdvResponsavel", true); // At least one field must change
        SetFieldValue("m_FAdvResponsavel", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsAdvResponsavel_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _escritorios.ID = 123; // Update scenario
        _escritorios.AuditorQuem = 7;
        SetFieldFlag("pFldFAdvResponsavel", true); // At least one field must change
        SetFieldValue("m_FAdvResponsavel", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsAdvResponsavel_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFAdvResponsavel", true); // At least one field must change
        SetFieldValue("m_FAdvResponsavel", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _escritorios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsAdvResponsavel_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFAdvResponsavel", true); // At least one field must change
        SetFieldValue("m_FAdvResponsavel", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _escritorios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsAdvResponsavel_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _escritorios.ID = 0;
        _escritorios.AuditorQuem = 10;
        SetFieldFlag("pFldFAdvResponsavel", true); // At least one field must change
        SetFieldValue("m_FAdvResponsavel", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _escritorios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsAdvResponsavel_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _escritorios.ID = id;
        _escritorios.AuditorQuem = 15;
        SetFieldFlag("pFldFAdvResponsavel", true); // At least one field must change
        SetFieldValue("m_FAdvResponsavel", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _escritorios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncAdvResponsavel_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 5;
        SetFieldFlag("pFldFAdvResponsavel", true); // At least one field must change
        SetFieldValue("m_FAdvResponsavel", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncAdvResponsavel_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFAdvResponsavel", true); // At least one field must change
        SetFieldValue("m_FAdvResponsavel", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _escritorios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsAdvResponsavel_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _escritorios.ID = 123;
        _escritorios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _escritorios.FAdvResponsavel.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsAdvResponsavel_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _escritorios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _escritorios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFAdvResponsavel", true);
        SetFieldValue("m_FAdvResponsavel", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsAdvResponsavel_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFAdvResponsavel", true);
        SetFieldValue("m_FAdvResponsavel", "");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsAdvResponsavel_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFAdvResponsavel", true);
        SetFieldValue("m_FAdvResponsavel", null);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncAdvResponsavel_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFAdvResponsavel", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FAdvResponsavel", "");
        SetFieldValue("m_FCompromisso", "");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsAdvResponsavel_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _escritorios.FAdvResponsavel.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.FCidade.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithSecretariaFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSecretaria", true);
        SetFieldValue("m_FSecretaria", value);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsSecretaria_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSecretaria", true); // At least one field must change
        SetFieldValue("m_FSecretaria", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsSecretaria_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSecretaria", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FSecretaria", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithSecretariaFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSecretaria", true);
        SetFieldValue("m_FSecretaria", value);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsSecretariaChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSecretaria", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FSecretaria", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncSecretaria_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSecretaria", true);
        SetFieldValue("m_FSecretaria", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncSecretaria_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSecretaria", true);
        SetFieldValue("m_FSecretaria", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertSecretaria_ShouldSetInsertAuditFields()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 5;
        SetFieldFlag("pFldFSecretaria", true); // At least one field must change
        SetFieldValue("m_FSecretaria", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsSecretaria_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _escritorios.ID = 123; // Update scenario
        _escritorios.AuditorQuem = 7;
        SetFieldFlag("pFldFSecretaria", true); // At least one field must change
        SetFieldValue("m_FSecretaria", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsSecretaria_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFSecretaria", true); // At least one field must change
        SetFieldValue("m_FSecretaria", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _escritorios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsSecretaria_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFSecretaria", true); // At least one field must change
        SetFieldValue("m_FSecretaria", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _escritorios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsSecretaria_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _escritorios.ID = 0;
        _escritorios.AuditorQuem = 10;
        SetFieldFlag("pFldFSecretaria", true); // At least one field must change
        SetFieldValue("m_FSecretaria", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _escritorios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsSecretaria_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _escritorios.ID = id;
        _escritorios.AuditorQuem = 15;
        SetFieldFlag("pFldFSecretaria", true); // At least one field must change
        SetFieldValue("m_FSecretaria", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _escritorios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncSecretaria_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 5;
        SetFieldFlag("pFldFSecretaria", true); // At least one field must change
        SetFieldValue("m_FSecretaria", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncSecretaria_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFSecretaria", true); // At least one field must change
        SetFieldValue("m_FSecretaria", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _escritorios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsSecretaria_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _escritorios.ID = 123;
        _escritorios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _escritorios.FSecretaria.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsSecretaria_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _escritorios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _escritorios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFSecretaria", true);
        SetFieldValue("m_FSecretaria", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsSecretaria_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSecretaria", true);
        SetFieldValue("m_FSecretaria", "");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsSecretaria_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSecretaria", true);
        SetFieldValue("m_FSecretaria", null);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncSecretaria_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSecretaria", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FSecretaria", "");
        SetFieldValue("m_FCompromisso", "");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsSecretaria_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _escritorios.FSecretaria.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _escritorios.FCidade.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithInscEstFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFInscEst", true);
        SetFieldValue("m_FInscEst", value);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsInscEst_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFInscEst", true); // At least one field must change
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsInscEst_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFInscEst", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithInscEstFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFInscEst", true);
        SetFieldValue("m_FInscEst", value);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsInscEstChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFInscEst", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncInscEst_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFInscEst", true);
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncInscEst_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFInscEst", true);
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertInscEst_ShouldSetInsertAuditFields()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 5;
        SetFieldFlag("pFldFInscEst", true); // At least one field must change
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsInscEst_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _escritorios.ID = 123; // Update scenario
        _escritorios.AuditorQuem = 7;
        SetFieldFlag("pFldFInscEst", true); // At least one field must change
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsInscEst_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFInscEst", true); // At least one field must change
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _escritorios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsInscEst_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFInscEst", true); // At least one field must change
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _escritorios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsInscEst_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _escritorios.ID = 0;
        _escritorios.AuditorQuem = 10;
        SetFieldFlag("pFldFInscEst", true); // At least one field must change
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _escritorios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsInscEst_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _escritorios.ID = id;
        _escritorios.AuditorQuem = 15;
        SetFieldFlag("pFldFInscEst", true); // At least one field must change
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _escritorios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncInscEst_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 5;
        SetFieldFlag("pFldFInscEst", true); // At least one field must change
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _escritorios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncInscEst_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _escritorios.ID = 0; // Insert scenario
        _escritorios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFInscEst", true); // At least one field must change
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _escritorios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsInscEst_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _escritorios.ID = 123;
        _escritorios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _escritorios.FInscEst.Should().Be("AAAAAAAAAAAAA");
        _escritorios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsInscEst_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _escritorios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _escritorios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFInscEst", true);
        SetFieldValue("m_FInscEst", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsInscEst_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFInscEst", true);
        SetFieldValue("m_FInscEst", "");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsInscEst_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFInscEst", true);
        SetFieldValue("m_FInscEst", null);
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncInscEst_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFInscEst", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FInscEst", "");
        SetFieldValue("m_FCompromisso", "");
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _escritorios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsInscEst_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _escritorios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _escritorios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _escritorios.FInscEst.Should().Be("AAAAAAAAAAAAA");
        _escritorios.FCidade.Should().Be(123);
    }

#endregion
    public virtual void Dispose()
    {
        _escritorios?.Dispose();
    }
}