// 100% auto-generated by Source Genesys Core
// copyright Â© 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming
public partial class DBProcessos
{
    [XmlIgnore]
    private protected bool pFldFAdvParc, pFldFAJGPedidoNegado, pFldFAJGCliente, pFldFAJGPedidoNegadoOPO, pFldFNotificarPOE, pFldFValorProvisionado, pFldFAJGOponente, pFldFValorCacheCalculo, pFldFAJGPedidoOPO, pFldFValorCacheCalculoProv, pFldFConsiderarParado, pFldFValorCalculado, pFldFAJGConcedidoOPO, pFldFCobranca, pFldFDataEntrada, pFldFPenhora, pFldFAJGPedido, pFldFTipoBaixa, pFldFClassRisco, pFldFIsApenso, pFldFValorCausaInicial, pFldFAJGConcedido, pFldFObsBCX, pFldFValorCausaDefinitivo, pFldFPercProbExito, pFldFMNA, pFldFPercExito, pFldFNroExtra, pFldFAdvOpo, pFldFExtra, pFldFJustica, pFldFAdvogado, pFldFNroCaixa, pFldFPreposto, pFldFCliente, pFldFOponente, pFldFArea, pFldFCidade, pFldFSituacao, pFldFIDSituacao, pFldFValor, pFldFRito, pFldFFato, pFldFNroPasta, pFldFAtividade, pFldFCaixaMorto, pFldFBaixado, pFldFDtBaixa, pFldFMotivoBaixa, pFldFOBS, pFldFPrinted, pFldFZKey, pFldFZKeyQuem, pFldFZKeyQuando, pFldFResumo, pFldFNaoImprimir, pFldFEletronico, pFldFNroContrato, pFldFPercProbExitoJustificativa, pFldFHonorarioValor, pFldFHonorarioPercentual, pFldFHonorarioSucumbencia, pFldFFaseAuditoria, pFldFValorCondenacao, pFldFValorCondenacaoCalculado, pFldFValorCondenacaoProvisorio;
    [XmlIgnore]
    private protected int m_FAdvParc, m_FTipoBaixa, m_FClassRisco, m_FAdvOpo, m_FJustica, m_FAdvogado, m_FPreposto, m_FCliente, m_FOponente, m_FArea, m_FCidade, m_FSituacao, m_FRito, m_FAtividade, m_FZKeyQuem, m_FFaseAuditoria, m_FValorCondenacaoProvisorio;
    [XmlIgnore]
    private protected string? m_FObsBCX, m_FNroExtra, m_FNroCaixa, m_FFato, m_FNroPasta, m_FCaixaMorto, m_FMotivoBaixa, m_FOBS, m_FZKey, m_FResumo, m_FNroContrato, m_FPercProbExitoJustificativa;
    [XmlIgnore]
    private protected DateTime? m_FDataEntrada, m_FDtBaixa, m_FZKeyQuando;
    [XmlIgnore]
    private protected bool m_FAJGPedidoNegado, m_FAJGCliente, m_FAJGPedidoNegadoOPO, m_FNotificarPOE, m_FAJGOponente, m_FAJGPedidoOPO, m_FConsiderarParado, m_FValorCalculado, m_FAJGConcedidoOPO, m_FCobranca, m_FPenhora, m_FAJGPedido, m_FIsApenso, m_FAJGConcedido, m_FMNA, m_FExtra, m_FIDSituacao, m_FBaixado, m_FPrinted, m_FNaoImprimir, m_FEletronico;
    [XmlIgnore]
    private protected decimal m_FValorProvisionado, m_FValorCacheCalculo, m_FValorCacheCalculoProv, m_FValorCausaInicial, m_FValorCausaDefinitivo, m_FPercProbExito, m_FPercExito, m_FValor, m_FHonorarioValor, m_FHonorarioPercentual, m_FHonorarioSucumbencia, m_FValorCondenacao, m_FValorCondenacaoCalculado;
    public int FAdvParc
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAdvParc;
        set
        {
            pFldFAdvParc = pFldFAdvParc || value != m_FAdvParc;
            if (pFldFAdvParc)
                m_FAdvParc = value;
        }
    }

    public bool FAJGPedidoNegado
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAJGPedidoNegado;
        set
        {
            pFldFAJGPedidoNegado = pFldFAJGPedidoNegado || value != m_FAJGPedidoNegado;
            if (pFldFAJGPedidoNegado)
                m_FAJGPedidoNegado = value;
        }
    }

    public bool FAJGCliente
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAJGCliente;
        set
        {
            pFldFAJGCliente = pFldFAJGCliente || value != m_FAJGCliente;
            if (pFldFAJGCliente)
                m_FAJGCliente = value;
        }
    }

    public bool FAJGPedidoNegadoOPO
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAJGPedidoNegadoOPO;
        set
        {
            pFldFAJGPedidoNegadoOPO = pFldFAJGPedidoNegadoOPO || value != m_FAJGPedidoNegadoOPO;
            if (pFldFAJGPedidoNegadoOPO)
                m_FAJGPedidoNegadoOPO = value;
        }
    }

    public bool FNotificarPOE
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNotificarPOE;
        set
        {
            pFldFNotificarPOE = pFldFNotificarPOE || value != m_FNotificarPOE;
            if (pFldFNotificarPOE)
                m_FNotificarPOE = value;
        }
    }

    public decimal FValorProvisionado
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FValorProvisionado;
        set
        {
            if (value == m_FValorProvisionado)
                return;
            pFldFValorProvisionado = true;
            m_FValorProvisionado = value;
        }
    }

    public bool FAJGOponente
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAJGOponente;
        set
        {
            pFldFAJGOponente = pFldFAJGOponente || value != m_FAJGOponente;
            if (pFldFAJGOponente)
                m_FAJGOponente = value;
        }
    }

    public decimal FValorCacheCalculo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FValorCacheCalculo;
        set
        {
            if (value == m_FValorCacheCalculo)
                return;
            pFldFValorCacheCalculo = true;
            m_FValorCacheCalculo = value;
        }
    }

    public bool FAJGPedidoOPO
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAJGPedidoOPO;
        set
        {
            pFldFAJGPedidoOPO = pFldFAJGPedidoOPO || value != m_FAJGPedidoOPO;
            if (pFldFAJGPedidoOPO)
                m_FAJGPedidoOPO = value;
        }
    }

    public decimal FValorCacheCalculoProv
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FValorCacheCalculoProv;
        set
        {
            if (value == m_FValorCacheCalculoProv)
                return;
            pFldFValorCacheCalculoProv = true;
            m_FValorCacheCalculoProv = value;
        }
    }

    public bool FConsiderarParado
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FConsiderarParado;
        set
        {
            pFldFConsiderarParado = pFldFConsiderarParado || value != m_FConsiderarParado;
            if (pFldFConsiderarParado)
                m_FConsiderarParado = value;
        }
    }

    public bool FValorCalculado
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FValorCalculado;
        set
        {
            pFldFValorCalculado = pFldFValorCalculado || value != m_FValorCalculado;
            if (pFldFValorCalculado)
                m_FValorCalculado = value;
        }
    }

    public bool FAJGConcedidoOPO
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAJGConcedidoOPO;
        set
        {
            pFldFAJGConcedidoOPO = pFldFAJGConcedidoOPO || value != m_FAJGConcedidoOPO;
            if (pFldFAJGConcedidoOPO)
                m_FAJGConcedidoOPO = value;
        }
    }

    public bool FCobranca
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCobranca;
        set
        {
            pFldFCobranca = pFldFCobranca || value != m_FCobranca;
            if (pFldFCobranca)
                m_FCobranca = value;
        }
    }

    public string? FDataEntrada
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDataEntrada is null || m_FDataEntrada == DevourerOne.DDataZerada ? string.Empty : m_FDataEntrada.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFDataEntrada, m_FDataEntrada, value)is not (true, var changed, var data))
                return;
            (pFldFDataEntrada, m_FDataEntrada) = (changed, data);
        }
    }

    public bool FPenhora
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPenhora;
        set
        {
            pFldFPenhora = pFldFPenhora || value != m_FPenhora;
            if (pFldFPenhora)
                m_FPenhora = value;
        }
    }

    public bool FAJGPedido
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAJGPedido;
        set
        {
            pFldFAJGPedido = pFldFAJGPedido || value != m_FAJGPedido;
            if (pFldFAJGPedido)
                m_FAJGPedido = value;
        }
    }

    public int FTipoBaixa
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FTipoBaixa;
        set
        {
            pFldFTipoBaixa = pFldFTipoBaixa || value != m_FTipoBaixa;
            if (pFldFTipoBaixa)
                m_FTipoBaixa = value;
        }
    }

    public int FClassRisco
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FClassRisco;
        set
        {
            pFldFClassRisco = pFldFClassRisco || value != m_FClassRisco;
            if (pFldFClassRisco)
                m_FClassRisco = value;
        }
    }

    public bool FIsApenso
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FIsApenso;
        set
        {
            pFldFIsApenso = pFldFIsApenso || value != m_FIsApenso;
            if (pFldFIsApenso)
                m_FIsApenso = value;
        }
    }

    public decimal FValorCausaInicial
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FValorCausaInicial;
        set
        {
            if (value == m_FValorCausaInicial)
                return;
            pFldFValorCausaInicial = true;
            m_FValorCausaInicial = value;
        }
    }

    public bool FAJGConcedido
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAJGConcedido;
        set
        {
            pFldFAJGConcedido = pFldFAJGConcedido || value != m_FAJGConcedido;
            if (pFldFAJGConcedido)
                m_FAJGConcedido = value;
        }
    }

    public string? FObsBCX
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FObsBCX ?? string.Empty;
        set
        {
            pFldFObsBCX = pFldFObsBCX || !(m_FObsBCX ?? string.Empty).Equals(value);
            if (pFldFObsBCX)
                m_FObsBCX = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public decimal FValorCausaDefinitivo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FValorCausaDefinitivo;
        set
        {
            if (value == m_FValorCausaDefinitivo)
                return;
            pFldFValorCausaDefinitivo = true;
            m_FValorCausaDefinitivo = value;
        }
    }

    public decimal FPercProbExito
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPercProbExito;
        set
        {
            if (value == m_FPercProbExito)
                return;
            pFldFPercProbExito = true;
            m_FPercProbExito = value;
        }
    }

    public bool FMNA
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FMNA;
        set
        {
            pFldFMNA = pFldFMNA || value != m_FMNA;
            if (pFldFMNA)
                m_FMNA = value;
        }
    }

    public decimal FPercExito
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPercExito;
        set
        {
            if (value == m_FPercExito)
                return;
            pFldFPercExito = true;
            m_FPercExito = value;
        }
    }

    [StringLength(35, ErrorMessage = "A propriedade FNroExtra da tabela Processos deve ter no mÃ¡ximo 35 caracteres.")]
    public string? FNroExtra
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNroExtra ?? string.Empty;
        set
        {
            pFldFNroExtra = pFldFNroExtra || !(m_FNroExtra ?? string.Empty).Equals(value);
            if (pFldFNroExtra)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FNroExtra = trimmed.Length > 35 ? trimmed.AsSpan(0, 35).ToString() : trimmed;
            }
        }
    }

    public int FAdvOpo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAdvOpo;
        set
        {
            pFldFAdvOpo = pFldFAdvOpo || value != m_FAdvOpo;
            if (pFldFAdvOpo)
                m_FAdvOpo = value;
        }
    }

    public bool FExtra
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FExtra;
        set
        {
            pFldFExtra = pFldFExtra || value != m_FExtra;
            if (pFldFExtra)
                m_FExtra = value;
        }
    }

    public int FJustica
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FJustica;
        set
        {
            pFldFJustica = pFldFJustica || value != m_FJustica;
            if (pFldFJustica)
                m_FJustica = value;
        }
    }

    public int FAdvogado
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAdvogado;
        set
        {
            pFldFAdvogado = pFldFAdvogado || value != m_FAdvogado;
            if (pFldFAdvogado)
                m_FAdvogado = value;
        }
    }

    [StringLength(20, ErrorMessage = "A propriedade FNroCaixa da tabela Processos deve ter no mÃ¡ximo 20 caracteres.")]
    public string? FNroCaixa
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNroCaixa ?? string.Empty;
        set
        {
            pFldFNroCaixa = pFldFNroCaixa || !(m_FNroCaixa ?? string.Empty).Equals(value);
            if (pFldFNroCaixa)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FNroCaixa = trimmed.Length > 20 ? trimmed.AsSpan(0, 20).ToString() : trimmed;
            }
        }
    }

    public int FPreposto
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPreposto;
        set
        {
            pFldFPreposto = pFldFPreposto || value != m_FPreposto;
            if (pFldFPreposto)
                m_FPreposto = value;
        }
    }

    public int FCliente
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCliente;
        set
        {
            pFldFCliente = pFldFCliente || value != m_FCliente;
            if (pFldFCliente)
                m_FCliente = value;
        }
    }

    public int FOponente
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FOponente;
        set
        {
            pFldFOponente = pFldFOponente || value != m_FOponente;
            if (pFldFOponente)
                m_FOponente = value;
        }
    }

    public int FArea
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FArea;
        set
        {
            pFldFArea = pFldFArea || value != m_FArea;
            if (pFldFArea)
                m_FArea = value;
        }
    }

    public int FCidade
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCidade;
        set
        {
            pFldFCidade = pFldFCidade || value != m_FCidade;
            if (pFldFCidade)
                m_FCidade = value;
        }
    }

    public int FSituacao
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FSituacao;
        set
        {
            pFldFSituacao = pFldFSituacao || value != m_FSituacao;
            if (pFldFSituacao)
                m_FSituacao = value;
        }
    }

    public bool FIDSituacao
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FIDSituacao;
        set
        {
            pFldFIDSituacao = pFldFIDSituacao || value != m_FIDSituacao;
            if (pFldFIDSituacao)
                m_FIDSituacao = value;
        }
    }

    public decimal FValor
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FValor;
        set
        {
            if (value == m_FValor)
                return;
            pFldFValor = true;
            m_FValor = value;
        }
    }

    public int FRito
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FRito;
        set
        {
            pFldFRito = pFldFRito || value != m_FRito;
            if (pFldFRito)
                m_FRito = value;
        }
    }

    public string? FFato
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FFato ?? string.Empty;
        set
        {
            pFldFFato = pFldFFato || !(m_FFato ?? string.Empty).Equals(value);
            if (pFldFFato)
                m_FFato = value.trim().FixAbc() ?? string.Empty;
        }
    }

    [StringLength(10, ErrorMessage = "A propriedade FNroPasta da tabela Processos deve ter no mÃ¡ximo 10 caracteres.")]
    public string? FNroPasta
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNroPasta ?? string.Empty;
        set
        {
            pFldFNroPasta = pFldFNroPasta || !(m_FNroPasta ?? string.Empty).Equals(value);
            if (pFldFNroPasta)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FNroPasta = trimmed.Length > 10 ? trimmed.AsSpan(0, 10).ToString() : trimmed;
            }
        }
    }

    public int FAtividade
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAtividade;
        set
        {
            pFldFAtividade = pFldFAtividade || value != m_FAtividade;
            if (pFldFAtividade)
                m_FAtividade = value;
        }
    }

    [StringLength(10, ErrorMessage = "A propriedade FCaixaMorto da tabela Processos deve ter no mÃ¡ximo 10 caracteres.")]
    public string? FCaixaMorto
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCaixaMorto ?? string.Empty;
        set
        {
            pFldFCaixaMorto = pFldFCaixaMorto || !(m_FCaixaMorto ?? string.Empty).Equals(value);
            if (pFldFCaixaMorto)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FCaixaMorto = trimmed.Length > 10 ? trimmed.AsSpan(0, 10).ToString() : trimmed;
            }
        }
    }

    public bool FBaixado
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FBaixado;
        set
        {
            pFldFBaixado = pFldFBaixado || value != m_FBaixado;
            if (pFldFBaixado)
                m_FBaixado = value;
        }
    }

    public string? FDtBaixa
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDtBaixa is null || m_FDtBaixa == DevourerOne.DDataZerada ? string.Empty : m_FDtBaixa.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFDtBaixa, m_FDtBaixa, value)is not (true, var changed, var data))
                return;
            (pFldFDtBaixa, m_FDtBaixa) = (changed, data);
        }
    }

    public string? FMotivoBaixa
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FMotivoBaixa ?? string.Empty;
        set
        {
            pFldFMotivoBaixa = pFldFMotivoBaixa || !(m_FMotivoBaixa ?? string.Empty).Equals(value);
            if (pFldFMotivoBaixa)
                m_FMotivoBaixa = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public string? FOBS
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FOBS ?? string.Empty;
        set
        {
            pFldFOBS = pFldFOBS || !(m_FOBS ?? string.Empty).Equals(value);
            if (pFldFOBS)
                m_FOBS = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public bool FPrinted
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPrinted;
        set
        {
            pFldFPrinted = pFldFPrinted || value != m_FPrinted;
            if (pFldFPrinted)
                m_FPrinted = value;
        }
    }

    [StringLength(20, ErrorMessage = "A propriedade FZKey da tabela Processos deve ter no mÃ¡ximo 20 caracteres.")]
    public string? FZKey
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FZKey ?? string.Empty;
        set
        {
            pFldFZKey = pFldFZKey || !(m_FZKey ?? string.Empty).Equals(value);
            if (pFldFZKey)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FZKey = trimmed.Length > 20 ? trimmed.AsSpan(0, 20).ToString() : trimmed;
            }
        }
    }

    public int FZKeyQuem
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FZKeyQuem;
        set
        {
            pFldFZKeyQuem = pFldFZKeyQuem || value != m_FZKeyQuem;
            if (pFldFZKeyQuem)
                m_FZKeyQuem = value;
        }
    }

    public string? FZKeyQuando
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FZKeyQuando is null || m_FZKeyQuando == DevourerOne.DDataZerada ? string.Empty : m_FZKeyQuando.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFZKeyQuando, m_FZKeyQuando, value)is not (true, var changed, var data))
                return;
            (pFldFZKeyQuando, m_FZKeyQuando) = (changed, data);
        }
    }

    public string? FResumo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FResumo ?? string.Empty;
        set
        {
            pFldFResumo = pFldFResumo || !(m_FResumo ?? string.Empty).Equals(value);
            if (pFldFResumo)
                m_FResumo = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public bool FNaoImprimir
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNaoImprimir;
        set
        {
            pFldFNaoImprimir = pFldFNaoImprimir || value != m_FNaoImprimir;
            if (pFldFNaoImprimir)
                m_FNaoImprimir = value;
        }
    }

    public bool FEletronico
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEletronico;
        set
        {
            pFldFEletronico = pFldFEletronico || value != m_FEletronico;
            if (pFldFEletronico)
                m_FEletronico = value;
        }
    }

    [StringLength(100, ErrorMessage = "A propriedade FNroContrato da tabela Processos deve ter no mÃ¡ximo 100 caracteres.")]
    public string? FNroContrato
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNroContrato ?? string.Empty;
        set
        {
            pFldFNroContrato = pFldFNroContrato || !(m_FNroContrato ?? string.Empty).Equals(value);
            if (pFldFNroContrato)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FNroContrato = trimmed.Length > 100 ? trimmed.AsSpan(0, 100).ToString() : trimmed;
            }
        }
    }

    [StringLength(1024, ErrorMessage = "A propriedade FPercProbExitoJustificativa da tabela Processos deve ter no mÃ¡ximo 1024 caracteres.")]
    public string? FPercProbExitoJustificativa
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPercProbExitoJustificativa ?? string.Empty;
        set
        {
            pFldFPercProbExitoJustificativa = pFldFPercProbExitoJustificativa || !(m_FPercProbExitoJustificativa ?? string.Empty).Equals(value);
            if (pFldFPercProbExitoJustificativa)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FPercProbExitoJustificativa = trimmed.Length > 1024 ? trimmed.AsSpan(0, 1024).ToString() : trimmed;
            }
        }
    }

    public decimal FHonorarioValor
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FHonorarioValor;
        set
        {
            if (value == m_FHonorarioValor)
                return;
            pFldFHonorarioValor = true;
            m_FHonorarioValor = value;
        }
    }

    public decimal FHonorarioPercentual
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FHonorarioPercentual;
        set
        {
            if (value == m_FHonorarioPercentual)
                return;
            pFldFHonorarioPercentual = true;
            m_FHonorarioPercentual = value;
        }
    }

    public decimal FHonorarioSucumbencia
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FHonorarioSucumbencia;
        set
        {
            if (value == m_FHonorarioSucumbencia)
                return;
            pFldFHonorarioSucumbencia = true;
            m_FHonorarioSucumbencia = value;
        }
    }

    public int FFaseAuditoria
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FFaseAuditoria;
        set
        {
            pFldFFaseAuditoria = pFldFFaseAuditoria || value != m_FFaseAuditoria;
            if (pFldFFaseAuditoria)
                m_FFaseAuditoria = value;
        }
    }

    public decimal FValorCondenacao
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FValorCondenacao;
        set
        {
            if (value == m_FValorCondenacao)
                return;
            pFldFValorCondenacao = true;
            m_FValorCondenacao = value;
        }
    }

    public decimal FValorCondenacaoCalculado
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FValorCondenacaoCalculado;
        set
        {
            if (value == m_FValorCondenacaoCalculado)
                return;
            pFldFValorCondenacaoCalculado = true;
            m_FValorCondenacaoCalculado = value;
        }
    }

    public int FValorCondenacaoProvisorio
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FValorCondenacaoProvisorio;
        set
        {
            pFldFValorCondenacaoProvisorio = pFldFValorCondenacaoProvisorio || value != m_FValorCondenacaoProvisorio;
            if (pFldFValorCondenacaoProvisorio)
                m_FValorCondenacaoProvisorio = value;
        }
    }

    public bool IVisto() => m_FVisto;
    public int IQuemCad() => m_FQuemCad;
    public int IQuemAtu() => m_FQuemAtu;
    public DateTime IDtCad() => MDtCad;
    public DateTime IDtAtu() => MDtAtu;
    public string IDtCadDataX_DataHora() => MDtCadDataX_DataHora;
    public string IDtAtuDataX_DataHora() => MDtAtuDataX_DataHora;
    public void SetAuditor(int usuarioId) => AuditorQuem = usuarioId;
    public string IMDtCadDataX_DataHora() => MDtAtuDataX_DataHora;
    public string ITabelaName() => PTabelaNome;
    public string ICampoCodigo() => CampoCodigo;
    public string ICampoNome() => CampoNome;
    public string IPrefixo() => PTabelaPrefixo;
    public ImmutableArray<DBInfoSystem> IFieldsRaw() => throw new NotImplementedException();
    public ImmutableArray<DBInfoSystem> IPkFields() => throw new NotImplementedException();
    public ImmutableArray<DBInfoSystem> IPkIndicesFields() => throw new NotImplementedException();
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetID() => ID;
}