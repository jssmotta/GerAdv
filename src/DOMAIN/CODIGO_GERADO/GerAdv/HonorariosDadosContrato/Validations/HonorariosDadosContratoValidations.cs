// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IHonorariosDadosContratoValidation
{
    Task<bool> ValidateReg(Models.HonorariosDadosContrato reg, IHonorariosDadosContratoService service, IClientesReader clientesReader, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
    Task<bool> CanDelete(int? id, IHonorariosDadosContratoService service, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
}

public class HonorariosDadosContratoValidation : IHonorariosDadosContratoValidation
{
    public async Task<bool> CanDelete(int? id, IHonorariosDadosContratoService service, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (id == null || id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id ?? default, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.HonorariosDadosContrato reg)
    {
        if (reg.Guid != null && reg.Guid.Length > DBHonorariosDadosContratoDicInfo.HdcGuid.FTamanho)
            throw new SGValidationException($"GUID deve ter no máximo {DBHonorariosDadosContratoDicInfo.HdcGuid.FTamanho} caracteres.");
        if (reg.ArquivoContrato != null && reg.ArquivoContrato.Length > DBHonorariosDadosContratoDicInfo.HdcArquivoContrato.FTamanho)
            throw new SGValidationException($"ArquivoContrato deve ter no máximo {DBHonorariosDadosContratoDicInfo.HdcArquivoContrato.FTamanho} caracteres.");
        if (reg.Observacao != null && reg.Observacao.Length > DBHonorariosDadosContratoDicInfo.HdcObservacao.FTamanho)
            throw new SGValidationException($"Observacao deve ter no máximo {DBHonorariosDadosContratoDicInfo.HdcObservacao.FTamanho} caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.HonorariosDadosContrato reg, IHonorariosDadosContratoService service, IClientesReader clientesReader, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.Cliente == 0)
            throw new SGValidationException("Cliente é obrigatório.");
        if (reg.DataContrato.IsEmpty())
            throw new SGValidationException("DataContrato é obrigatório.");
        if (!DateTime.TryParse(reg.DataContrato, out _))
        {
            throw new SGValidationException($"DataContrato inválida: {reg.DataContrato}");
        }

        if (reg.DataContrato.IsEmpty())
            throw new SGValidationException("DataContrato é obrigatório.");
        if (!string.IsNullOrWhiteSpace(reg.DataContrato))
        {
            if (DateTime.TryParse(reg.DataContrato, out DateTime dataAntiga))
            {
                if (dataAntiga < new DateTime(1900, 1, 1))
                    throw new SGValidationException("DataContrato não pode ser anterior a 01/01/1900.");
            }
        }

        // Clientes
        {
            var regClientes = await clientesReader.Read(reg.Cliente, oCnn);
            if (regClientes == null || regClientes.Id != reg.Cliente)
            {
                throw new SGValidationException($"Clientes não encontrado ({regClientes?.Id}).");
            }
        }

        return true;
    }
}