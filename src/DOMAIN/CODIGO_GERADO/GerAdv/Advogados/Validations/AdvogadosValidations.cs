// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IAdvogadosValidation
{
    Task<bool> ValidateReg(Models.Advogados reg, IAdvogadosService service, ICargosReader cargosReader, IEscritoriosReader escritoriosReader, ICidadeReader cidadeReader, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
    Task<bool> CanDelete(int? id, IAdvogadosService service, IAgendaService agendaService, IContratosService contratosService, IHorasTrabService horastrabService, IParceriaProcService parceriaprocService, IProProcuradoresService proprocuradoresService, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
}

public class AdvogadosValidation : IAdvogadosValidation
{
    public async Task<bool> CanDelete(int? id, IAdvogadosService service, IAgendaService agendaService, IContratosService contratosService, IHorasTrabService horastrabService, IParceriaProcService parceriaprocService, IProProcuradoresService proprocuradoresService, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (id == null || id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id ?? default, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        var agendaExists0 = await agendaService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterAgenda { Advogado = id ?? default }, uri);
        if (agendaExists0 != null && agendaExists0.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Compromisso associados a ele.");
        var contratosExists1 = await contratosService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterContratos { Advogado = id ?? default }, uri);
        if (contratosExists1 != null && contratosExists1.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Contratos associados a ele.");
        var horastrabExists2 = await horastrabService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterHorasTrab { Advogado = id ?? default }, uri);
        if (horastrabExists2 != null && horastrabExists2.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Horas Trab associados a ele.");
        var parceriaprocExists3 = await parceriaprocService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterParceriaProc { Advogado = id ?? default }, uri);
        if (parceriaprocExists3 != null && parceriaprocExists3.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Parceria Proc associados a ele.");
        var proprocuradoresExists4 = await proprocuradoresService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterProProcuradores { Advogado = id ?? default }, uri);
        if (proprocuradoresExists4 != null && proprocuradoresExists4.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Pro Procuradores associados a ele.");
        return true;
    }

    private bool ValidSizes(Models.Advogados reg)
    {
        if (reg.EMailPro != null && reg.EMailPro.Length > DBAdvogadosDicInfo.AdvEMailPro.FTamanho)
            throw new SGValidationException($"EMailPro deve ter no máximo {DBAdvogadosDicInfo.AdvEMailPro.FTamanho} caracteres.");
        if (reg.CPF != null && reg.CPF.ClearInputCepCpfCnpj().Length > DBAdvogadosDicInfo.AdvCPF.FTamanho)
            throw new SGValidationException($"CPF deve ter no máximo {DBAdvogadosDicInfo.AdvCPF.FTamanho} caracteres.");
        if (reg.Nome != null && reg.Nome.Length > DBAdvogadosDicInfo.AdvNome.FTamanho)
            throw new SGValidationException($"Nome deve ter no máximo {DBAdvogadosDicInfo.AdvNome.FTamanho} caracteres.");
        if (reg.RG != null && reg.RG.Length > DBAdvogadosDicInfo.AdvRG.FTamanho)
            throw new SGValidationException($"RG deve ter no máximo {DBAdvogadosDicInfo.AdvRG.FTamanho} caracteres.");
        if (reg.NomeMae != null && reg.NomeMae.Length > DBAdvogadosDicInfo.AdvNomeMae.FTamanho)
            throw new SGValidationException($"NomeMae deve ter no máximo {DBAdvogadosDicInfo.AdvNomeMae.FTamanho} caracteres.");
        if (reg.OAB != null && reg.OAB.Length > DBAdvogadosDicInfo.AdvOAB.FTamanho)
            throw new SGValidationException($"OAB deve ter no máximo {DBAdvogadosDicInfo.AdvOAB.FTamanho} caracteres.");
        if (reg.NomeCompleto != null && reg.NomeCompleto.Length > DBAdvogadosDicInfo.AdvNomeCompleto.FTamanho)
            throw new SGValidationException($"NomeCompleto deve ter no máximo {DBAdvogadosDicInfo.AdvNomeCompleto.FTamanho} caracteres.");
        if (reg.Endereco != null && reg.Endereco.Length > DBAdvogadosDicInfo.AdvEndereco.FTamanho)
            throw new SGValidationException($"Endereco deve ter no máximo {DBAdvogadosDicInfo.AdvEndereco.FTamanho} caracteres.");
        if (reg.CEP != null && reg.CEP.ClearInputCepCpfCnpj().Length > DBAdvogadosDicInfo.AdvCEP.FTamanho)
            throw new SGValidationException($"CEP deve ter no máximo {DBAdvogadosDicInfo.AdvCEP.FTamanho} caracteres.");
        if (reg.Bairro != null && reg.Bairro.Length > DBAdvogadosDicInfo.AdvBairro.FTamanho)
            throw new SGValidationException($"Bairro deve ter no máximo {DBAdvogadosDicInfo.AdvBairro.FTamanho} caracteres.");
        if (reg.CTPSSerie != null && reg.CTPSSerie.Length > DBAdvogadosDicInfo.AdvCTPSSerie.FTamanho)
            throw new SGValidationException($"CTPSSerie deve ter no máximo {DBAdvogadosDicInfo.AdvCTPSSerie.FTamanho} caracteres.");
        if (reg.CTPS != null && reg.CTPS.Length > DBAdvogadosDicInfo.AdvCTPS.FTamanho)
            throw new SGValidationException($"CTPS deve ter no máximo {DBAdvogadosDicInfo.AdvCTPS.FTamanho} caracteres.");
        if (reg.Secretaria != null && reg.Secretaria.Length > DBAdvogadosDicInfo.AdvSecretaria.FTamanho)
            throw new SGValidationException($"Secretaria deve ter no máximo {DBAdvogadosDicInfo.AdvSecretaria.FTamanho} caracteres.");
        if (reg.TextoProcuracao != null && reg.TextoProcuracao.Length > DBAdvogadosDicInfo.AdvTextoProcuracao.FTamanho)
            throw new SGValidationException($"TextoProcuracao deve ter no máximo {DBAdvogadosDicInfo.AdvTextoProcuracao.FTamanho} caracteres.");
        if (reg.Pasta != null && reg.Pasta.Length > DBAdvogadosDicInfo.AdvPasta.FTamanho)
            throw new SGValidationException($"Pasta deve ter no máximo {DBAdvogadosDicInfo.AdvPasta.FTamanho} caracteres.");
        if (reg.Class != null && reg.Class.Length > DBAdvogadosDicInfo.AdvClass.FTamanho)
            throw new SGValidationException($"Class deve ter no máximo {DBAdvogadosDicInfo.AdvClass.FTamanho} caracteres.");
        if (reg.GUID != null && reg.GUID.Length > DBAdvogadosDicInfo.AdvGUID.FTamanho)
            throw new SGValidationException($"GUID deve ter no máximo {DBAdvogadosDicInfo.AdvGUID.FTamanho} caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.Advogados reg, IAdvogadosService service, ICargosReader cargosReader, IEscritoriosReader escritoriosReader, ICidadeReader cidadeReader, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Nome))
            throw new SGValidationException("Nome é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.EMailPro != null && reg.EMailPro.Length > 0 && !reg.EMailPro.IsValidEmail())
            throw new SGValidationException($"EMailPro em formato inválido.");
        if (reg.EMail != null && reg.EMail.Length > 0 && !reg.EMail.IsValidEmail())
            throw new SGValidationException($"EMail em formato inválido.");
        if (!string.IsNullOrWhiteSpace(reg.DtNasc))
        {
            if (DateTime.TryParse(reg.DtNasc, out DateTime dataAniversario))
            {
                if (dataAniversario < new DateTime(1900, 1, 1))
                    throw new SGValidationException("Data Nascimento não pode ser anterior a 01/01/1900.");
                if (dataAniversario > DateTime.Now)
                    throw new SGValidationException("DtNasc não pode ser uma data futura.");
            }
        }

        if (!string.IsNullOrWhiteSpace(reg.DtInicio))
        {
            if (DateTime.TryParse(reg.DtInicio, out DateTime dataAntiga))
            {
                if (dataAntiga < new DateTime(1900, 1, 1))
                    throw new SGValidationException("DtInicio não pode ser anterior a 01/01/1900.");
            }
        }

        if (!string.IsNullOrWhiteSpace(reg.DtFim))
        {
            if (DateTime.TryParse(reg.DtFim, out DateTime dataAntiga))
            {
                if (dataAntiga < new DateTime(1900, 1, 1))
                    throw new SGValidationException("DtFim não pode ser anterior a 01/01/1900.");
            }
        }

        if (reg.CPF != null && reg.CPF.Length > 0 && !reg.CPF.IsValidCpf())
            throw new SGValidationException("CPF inválido.");
        if (!string.IsNullOrWhiteSpace(reg.CPF))
        {
            var testaCpf = await IsCpfDuplicado(reg, service, uri);
            if (testaCpf.Item1 && testaCpf.Item2 != null)
            {
                throw new SGValidationException($"Advogados ({testaCpf.Item2.Nome}) com cpf '{reg.CPF.MaskCpf()}' já cadastrado.");
            }
            else if (testaCpf.Item1)
            {
                throw new SGValidationException($"Advogados com cpf '{reg.CPF.MaskCpf()}' já cadastrado.");
            }
        }

        // Cargos
        if (!reg.Cargo.IsEmptyIDNumber())
        {
            var regCargos = await cargosReader.Read(reg.Cargo, oCnn);
            if (regCargos == null || regCargos.Id != reg.Cargo)
            {
                throw new SGValidationException($"Cargo não encontrado ({regCargos?.Id}).");
            }
        }

        // Escritorios
        if (!reg.Escritorio.IsEmptyIDNumber())
        {
            var regEscritorios = await escritoriosReader.Read(reg.Escritorio, oCnn);
            if (regEscritorios == null || regEscritorios.Id != reg.Escritorio)
            {
                throw new SGValidationException($"Escritorios não encontrado ({regEscritorios?.Id}).");
            }
        }

        // Cidade
        if (!reg.Cidade.IsEmptyIDNumber())
        {
            var regCidade = await cidadeReader.Read(reg.Cidade, oCnn);
            if (regCidade == null || regCidade.Id != reg.Cidade)
            {
                throw new SGValidationException($"Cidade não encontrado ({regCidade?.Id}).");
            }
        }

        return true;
    }

    private async Task<(bool, AdvogadosResponseAll? )> IsCpfDuplicado(Models.Advogados reg, IAdvogadosService service, string uri)
    {
        if (reg.CPF.ClearInputCpf().Length == 0)
            return (false, null);
        var existingAdvogados = (await service.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterAdvogados { CPF = reg.CPF.ClearInputCpf() }, uri)).FirstOrDefault();
        return (existingAdvogados != null && existingAdvogados.Id > 0 && existingAdvogados.Id != reg.Id, existingAdvogados);
    }
}