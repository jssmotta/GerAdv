// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// ============================================
// ARQUIVO: DBUpdateTests.cs.txt (Principal)
// ============================================
namespace MenphisSI.GerAdv.Tests;
public class DBDivisaoTribunalUpdate : IDisposable
{
    private readonly DBDivisaoTribunal _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBDivisaoTribunalUpdate()
    {
        _instance = new DBDivisaoTribunal();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void DefaultConstructor_ShouldCreateInstance_WithDefaultValues()
    {
        // Act
        var divisaotribunal = new DBDivisaoTribunal();
        // Assert
        divisaotribunal.Should().NotBeNull();
        divisaotribunal.ITabelaName().Should().Be("DivisaoTribunal");
        divisaotribunal.ID.Should().Be(0);
    }

    [Fact]
    public void AllProperties_WithValidValues_ShouldSetCorrectly()
    {
        // Arrange
        var divisaotribunal = new DBDivisaoTribunal
        {
            FGUID = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FNomeEspecial = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FCodigoDiv = "AAAAA",
            FEndereco = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FFone = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FFax = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FCEP = "AAAAAAAAAA",
            FObs = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FEMail = "menphis@menphis.com.br",
            FAndar = "AAAAAAAAAAAA",
        };
        // Assert - All properties should be set divisaotribunal.FGUID.Should().Be( "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        divisaotribunal.FNomeEspecial.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        divisaotribunal.FCodigoDiv.Should().Be("AAAAA");
        divisaotribunal.FEndereco.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        divisaotribunal.FFone.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        divisaotribunal.FFax.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        divisaotribunal.FCEP.Should().Be("AAAAAAAAAA");
        divisaotribunal.FObs.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        divisaotribunal.FEMail.Should().Be("menphis@menphis.com.br");
        divisaotribunal.FAndar.Should().Be("AAAAAAAAAAAA");
    }

    [Fact]
    public void StringProperties_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var divisaotribunal = new DBDivisaoTribunal();
        var longString = new string ('X', 300);
        divisaotribunal.FGUID = longString; // MAX: 100
        divisaotribunal.FNomeEspecial = longString; // MAX: 255
        divisaotribunal.FCodigoDiv = longString; // MAX: 5
        divisaotribunal.FEndereco = longString; // MAX: 40
        divisaotribunal.FCEP = longString; // MAX: 10
        divisaotribunal.FAndar = longString; // MAX: 12
        // Assert - All properties should be set divisaotribunal.FGUID.Should().HaveLength(100);
        divisaotribunal.FNomeEspecial.Should().HaveLength(255);
        divisaotribunal.FCodigoDiv.Should().HaveLength(5);
        divisaotribunal.FEndereco.Should().HaveLength(40);
        divisaotribunal.FCEP.Should().HaveLength(10);
        divisaotribunal.FAndar.Should().HaveLength(12);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNomeEspecial_Property_ShouldAcceptValidNames(string NomeEspecial)
    {
        // Arrange
        var divisaotribunal = new DBDivisaoTribunal
        {
            // Act
            FNomeEspecial = NomeEspecial
        };
        // Assert
        divisaotribunal.FNomeEspecial.Should().Be(NomeEspecial);
    }

    [Fact]
    public void FNomeEspecial_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var divisaotribunal = new DBDivisaoTribunal
        {
            // Act
            FNomeEspecial = null
        };
        // Assert
        divisaotribunal.FNomeEspecial.Should().Be(string.Empty);
    }

    [Fact]
    public void FNomeEspecial_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var divisaotribunal = new DBDivisaoTribunal();
        var longName = new string ('A', 255 + 10); // Exceeds 255 character limit
        // Act
        divisaotribunal.FNomeEspecial = longName;
        // Assert
        divisaotribunal.FNomeEspecial.Should().HaveLength(255);
    }

    [Fact]
    public void FNomeEspecial_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FNomeEspecial = null;
        // Act
        var result = _instance.FNomeEspecial;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FNomeEspecial_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FNomeEspecial = expectedValue;
        // Act
        var result = _instance.FNomeEspecial;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FNomeEspecial_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFNomeEspecial", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNomeEspecial = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FNomeEspecial);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNomeEspecial_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFNomeEspecial", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNomeEspecial = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FNomeEspecial);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FNomeEspecial_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFNomeEspecial", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FNomeEspecial = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FNomeEspecial);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNomeEspecial_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFNomeEspecial", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FNomeEspecial = value;
        // Act
        _instance.FNomeEspecial = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNomeEspecial_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFNomeEspecial", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNomeEspecial = "Original Value";
        // Act
        _instance.FNomeEspecial = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNomeEspecial_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFNomeEspecial", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNomeEspecial = "First Value";
        // Act
        _instance.FNomeEspecial = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNomeEspecial_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFNomeEspecial", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNomeEspecial = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FNomeEspecial);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNomeEspecial_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FNomeEspecial = input;
        // Assert
        Assert.Equal(expected, _instance.FNomeEspecial);
    }

    [Fact]
    public void FNomeEspecial_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFNomeEspecial", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNomeEspecial = null;
        // Act
        _instance.FNomeEspecial = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNomeEspecial_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFNomeEspecial", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNomeEspecial = "Existing Value";
        // Act
        _instance.FNomeEspecial = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAA")]
    [InlineData("BB")]
    [InlineData("CCCc")]
    public void FCodigoDiv_Property_ShouldAcceptValidNames(string CodigoDiv)
    {
        // Arrange
        var divisaotribunal = new DBDivisaoTribunal
        {
            // Act
            FCodigoDiv = CodigoDiv
        };
        // Assert
        divisaotribunal.FCodigoDiv.Should().Be(CodigoDiv);
    }

    [Fact]
    public void FCodigoDiv_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var divisaotribunal = new DBDivisaoTribunal
        {
            // Act
            FCodigoDiv = null
        };
        // Assert
        divisaotribunal.FCodigoDiv.Should().Be(string.Empty);
    }

    [Fact]
    public void FCodigoDiv_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var divisaotribunal = new DBDivisaoTribunal();
        var longName = new string ('A', 5 + 10); // Exceeds 5 character limit
        // Act
        divisaotribunal.FCodigoDiv = longName;
        // Assert
        divisaotribunal.FCodigoDiv.Should().HaveLength(5);
    }

    [Fact]
    public void FCodigoDiv_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FCodigoDiv = null;
        // Act
        var result = _instance.FCodigoDiv;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FCodigoDiv_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test ".Trim();
        _instance.FCodigoDiv = expectedValue;
        // Act
        var result = _instance.FCodigoDiv;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FCodigoDiv_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFCodigoDiv", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FCodigoDiv = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FCodigoDiv);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCodigoDiv_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFCodigoDiv", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FCodigoDiv = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FCodigoDiv);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FCodigoDiv_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFCodigoDiv", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAA  ";
        var expectedValue = "AAA";
        // Act
        _instance.FCodigoDiv = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FCodigoDiv);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCodigoDiv_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFCodigoDiv", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FCodigoDiv = value;
        // Act
        _instance.FCodigoDiv = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCodigoDiv_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFCodigoDiv", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCodigoDiv = "Original Value";
        // Act
        _instance.FCodigoDiv = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCodigoDiv_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFCodigoDiv", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCodigoDiv = "First Value";
        // Act
        _instance.FCodigoDiv = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCodigoDiv_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFCodigoDiv", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FCodigoDiv = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FCodigoDiv);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAA", "AAA")]
    [InlineData("  BB  ", "BB")]
    [InlineData("CCCc", "CCCc")]
    public void FCodigoDiv_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FCodigoDiv = input;
        // Assert
        Assert.Equal(expected, _instance.FCodigoDiv);
    }

    [Fact]
    public void FCodigoDiv_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFCodigoDiv", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCodigoDiv = null;
        // Act
        _instance.FCodigoDiv = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FCodigoDiv_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFCodigoDiv", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FCodigoDiv = "Existing Value";
        // Act
        _instance.FCodigoDiv = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FEndereco_Property_ShouldAcceptValidNames(string Endereco)
    {
        // Arrange
        var divisaotribunal = new DBDivisaoTribunal
        {
            // Act
            FEndereco = Endereco
        };
        // Assert
        divisaotribunal.FEndereco.Should().Be(Endereco);
    }

    [Fact]
    public void FEndereco_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var divisaotribunal = new DBDivisaoTribunal
        {
            // Act
            FEndereco = null
        };
        // Assert
        divisaotribunal.FEndereco.Should().Be(string.Empty);
    }

    [Fact]
    public void FEndereco_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var divisaotribunal = new DBDivisaoTribunal();
        var longName = new string ('A', 40 + 10); // Exceeds 40 character limit
        // Act
        divisaotribunal.FEndereco = longName;
        // Assert
        divisaotribunal.FEndereco.Should().HaveLength(40);
    }

    [Fact]
    public void FEndereco_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FEndereco = null;
        // Act
        var result = _instance.FEndereco;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FEndereco_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FEndereco = expectedValue;
        // Act
        var result = _instance.FEndereco;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FEndereco_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEndereco = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FEndereco);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEndereco = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FEndereco);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FEndereco = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FEndereco);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FEndereco = value;
        // Act
        _instance.FEndereco = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEndereco = "Original Value";
        // Act
        _instance.FEndereco = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEndereco = "First Value";
        // Act
        _instance.FEndereco = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEndereco = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FEndereco);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FEndereco_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FEndereco = input;
        // Assert
        Assert.Equal(expected, _instance.FEndereco);
    }

    [Fact]
    public void FEndereco_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEndereco = null;
        // Act
        _instance.FEndereco = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEndereco = "Existing Value";
        // Act
        _instance.FEndereco = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FFone_Property_ShouldAcceptValidNames(string Fone)
    {
        // Arrange
        var divisaotribunal = new DBDivisaoTribunal
        {
            // Act
            FFone = Fone
        };
        // Assert
        divisaotribunal.FFone.Should().Be(Fone);
    }

    [Fact]
    public void FFone_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var divisaotribunal = new DBDivisaoTribunal
        {
            // Act
            FFone = null
        };
        // Assert
        divisaotribunal.FFone.Should().Be(string.Empty);
    }

    [Fact]
    public void FFone_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FFone = null;
        // Act
        var result = _instance.FFone;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FFone_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FFone = expectedValue;
        // Act
        var result = _instance.FFone;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FFone_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFone = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FFone);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFone = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FFone);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FFone_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  ";
        var expectedValue = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM";
        // Act
        _instance.FFone = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FFone);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FFone = value;
        // Act
        _instance.FFone = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFone = "Original Value";
        // Act
        _instance.FFone = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFone = "First Value";
        // Act
        _instance.FFone = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFone = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FFone);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  ", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FFone_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FFone = input;
        // Assert
        Assert.Equal(expected, _instance.FFone);
    }

    [Fact]
    public void FFone_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFone = null;
        // Act
        _instance.FFone = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFone = "Existing Value";
        // Act
        _instance.FFone = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FFax_Property_ShouldAcceptValidNames(string Fax)
    {
        // Arrange
        var divisaotribunal = new DBDivisaoTribunal
        {
            // Act
            FFax = Fax
        };
        // Assert
        divisaotribunal.FFax.Should().Be(Fax);
    }

    [Fact]
    public void FFax_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var divisaotribunal = new DBDivisaoTribunal
        {
            // Act
            FFax = null
        };
        // Assert
        divisaotribunal.FFax.Should().Be(string.Empty);
    }

    [Fact]
    public void FFax_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FFax = null;
        // Act
        var result = _instance.FFax;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FFax_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FFax = expectedValue;
        // Act
        var result = _instance.FFax;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FFax_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFax = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FFax);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFax = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FFax);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FFax_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  ";
        var expectedValue = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM";
        // Act
        _instance.FFax = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FFax);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FFax = value;
        // Act
        _instance.FFax = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFax = "Original Value";
        // Act
        _instance.FFax = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFax = "First Value";
        // Act
        _instance.FFax = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFax = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FFax);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData
    [InlineData("  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  ", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FFax_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FFax = input;
        // Assert
        Assert.Equal(expected, _instance.FFax);
    }

    [Fact]
    public void FFax_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFax = null;
        // Act
        _instance.FFax = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFax = "Existing Value";
        // Act
        _instance.FFax = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FObs_Property_ShouldAcceptValidNames(string Obs)
    {
        // Arrange
        var divisaotribunal = new DBDivisaoTribunal
        {
            // Act
            FObs = Obs
        };
        // Assert
        divisaotribunal.FObs.Should().Be(Obs);
    }

    [Fact]
    public void FObs_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var divisaotribunal = new DBDivisaoTribunal
        {
            // Act
            FObs = null
        };
        // Assert
        divisaotribunal.FObs.Should().Be(string.Empty);
    }

    [Fact]
    public void FObs_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FObs = null;
        // Act
        var result = _instance.FObs;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FObs_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FObs = expectedValue;
        // Act
        var result = _instance.FObs;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FObs_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFObs", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FObs = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FObs);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObs_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFObs", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FObs = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FObs);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FObs_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFObs", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  ";
        var expectedValue = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM";
        // Act
        _instance.FObs = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FObs);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObs_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFObs", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FObs = value;
        // Act
        _instance.FObs = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObs_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFObs", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObs = "Original Value";
        // Act
        _instance.FObs = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObs_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFObs", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObs = "First Value";
        // Act
        _instance.FObs = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObs_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFObs", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FObs = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FObs);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData
    [InlineData
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FObs_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FObs = input;
        // Assert
        Assert.Equal(expected, _instance.FObs);
    }

    [Fact]
    public void FObs_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFObs", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObs = null;
        // Act
        _instance.FObs = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObs_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFObs", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObs = "Existing Value";
        // Act
        _instance.FObs = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAA")]
    [InlineData("BBBBBBBBB")]
    [InlineData("CCCCCCCCCCc")]
    public void FAndar_Property_ShouldAcceptValidNames(string Andar)
    {
        // Arrange
        var divisaotribunal = new DBDivisaoTribunal
        {
            // Act
            FAndar = Andar
        };
        // Assert
        divisaotribunal.FAndar.Should().Be(Andar);
    }

    [Fact]
    public void FAndar_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var divisaotribunal = new DBDivisaoTribunal
        {
            // Act
            FAndar = null
        };
        // Assert
        divisaotribunal.FAndar.Should().Be(string.Empty);
    }

    [Fact]
    public void FAndar_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var divisaotribunal = new DBDivisaoTribunal();
        var longName = new string ('A', 12 + 10); // Exceeds 12 character limit
        // Act
        divisaotribunal.FAndar = longName;
        // Assert
        divisaotribunal.FAndar.Should().HaveLength(12);
    }

    [Fact]
    public void FAndar_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FAndar = null;
        // Act
        var result = _instance.FAndar;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FAndar_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FAndar = expectedValue;
        // Act
        var result = _instance.FAndar;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FAndar_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFAndar", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAndar = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FAndar);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAndar_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFAndar", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAndar = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FAndar);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FAndar_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFAndar", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAA";
        // Act
        _instance.FAndar = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FAndar);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAndar_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFAndar", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FAndar = value;
        // Act
        _instance.FAndar = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAndar_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFAndar", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAndar = "Original Value";
        // Act
        _instance.FAndar = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAndar_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFAndar", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAndar = "First Value";
        // Act
        _instance.FAndar = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAndar_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFAndar", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAndar = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FAndar);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAA", "AAAAAAAAAA")]
    [InlineData("  BBBBBBBBB  ", "BBBBBBBBB")]
    [InlineData("CCCCCCCCCCc", "CCCCCCCCCCc")]
    public void FAndar_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FAndar = input;
        // Assert
        Assert.Equal(expected, _instance.FAndar);
    }

    [Fact]
    public void FAndar_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFAndar", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAndar = null;
        // Act
        _instance.FAndar = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAndar_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBDivisaoTribunal).GetField("pFldFAndar", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAndar = "Existing Value";
        // Act
        _instance.FAndar = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

#region Testes de GUID
    [Fact]
    public void GUID_DefaultValue_ShouldBeEmpty()
    {
        Assert.Equal(string.Empty, _instance.FGUID);
    }

    [Fact]
    public void GUID_SetValidGUID_ShouldStore()
    {
        var guid = Guid.NewGuid().ToString();
        _instance.FGUID = guid;
        Assert.Equal(guid, _instance.FGUID);
    }

#endregion
    [Fact]
    public void TabelaNome_Property_ShouldReturnCorrectTableName()
    {
        // Arrange
        var divisaotribunal = new DBDivisaoTribunal();
        // Act & Assert
        divisaotribunal.TabelaNome.Should().Be("DivisaoTribunal");
    }

    public virtual void Dispose()
    {
    // Cleanup resources if needed
    }
}