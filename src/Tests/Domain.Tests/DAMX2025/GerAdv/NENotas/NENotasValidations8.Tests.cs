// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class NENotasValidationTests : IDisposable
{
    private readonly NENotasValidation _validation;
    private readonly Mock<INENotasService> _mockNENotasService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IInstanciaReader> _mockInstanciaReader;
    private readonly NENotasService _service;
    private readonly string _validUri = "test-uri";
    public NENotasValidationTests()
    {
        _validation = new NENotasValidation();
        _mockNENotasService = new Mock<INENotasService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockInstanciaReader = new Mock<IInstanciaReader>();
    }

#region Class Structure Tests
    [Fact]
    public void NENotasValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<INENotasValidation>();
    }

    [Fact]
    public void NENotasValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(NENotasValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void NENotasValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(NENotasValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private static Models.NENotas CreateValidNENotas()
    {
        return new Models.NENotas
        {
            Id = 1,
            Apenso = 0,
            Precatoria = 0,
            Instancia = 0,
            MovPro = false,
            Nome = "João",
            NotaExpedida = true,
            Revisada = false,
            Processo = 0,
            PalavraChave = 0,
            Data = "27/05/2022",
            NotaPublicada = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM"
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockNENotasService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterNENotas>(), It.IsAny<string>())).ReturnsAsync([]);
        // Setup other mocks but don't override the NENotass service mock
        _ = _mockInstanciaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new InstanciaResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockNENotasService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterNENotas>(), It.IsAny<string>())).ReturnsAsync([]);
        // Setup other mocks but don't override the NENotass service mock
        _ = _mockInstanciaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new InstanciaResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var nenotas = new Models.NENotas
        {
            Id = 1,
            MovPro = false,
            Nome = "AAAAAAAAAAAAAAAAAA",
            NotaExpedida = true,
            Revisada = false,
            Data = null,
            NotaPublicada = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(nenotas, _mockNENotasService.Object, _mockInstanciaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockNENotasService.Object, _mockInstanciaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region Foreign Key Validation Tests - Instancia
    [Fact]
    public async Task ValidateReg_WithInvalidInstancia_ShouldThrowSGValidationException()
    {
        // Arrange
        var nenotas = CreateValidNENotas();
        nenotas.Instancia = 999;
        _mockInstanciaReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.InstanciaResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(nenotas, _mockNENotasService.Object, _mockInstanciaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedInstanciaId_ShouldThrowSGValidationException()
    {
        // Arrange
        var nenotas = CreateValidNENotas();
        nenotas.Instancia = 999;
        var reg888 = new Models.Response.InstanciaResponse
        {
            Id = 888
        }; // Different ID
        _mockInstanciaReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(nenotas, _mockNENotasService.Object, _mockInstanciaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidInstancia_ShouldPass()
    {
        // Arrange
        var nenotas = CreateValidNENotas();
        nenotas.Instancia = 123;
        var reg123 = new Models.Response.InstanciaResponse
        {
            Id = 123
        };
        _mockInstanciaReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(nenotas, _mockNENotasService.Object, _mockInstanciaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyInstancia_ShouldPass()
    {
        // Arrange
        var nenotas = CreateValidNENotas();
        nenotas.Instancia = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(nenotas, _mockNENotasService.Object, _mockInstanciaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockInstanciaReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}