// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IUFValidation
{
    Task<bool> ValidateReg(Models.UF reg, IUFService service, IPaisesReader paisesReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int? id, IUFService service, ICidadeService cidadeService, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class UFValidation : IUFValidation
{
    public async Task<bool> CanDelete(int? id, IUFService service, ICidadeService cidadeService, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id == null || id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id ?? default, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        var cidadeExists0 = await cidadeService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterCidade { UF = id ?? default }, uri);
        if (cidadeExists0 != null && cidadeExists0.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Cidade associados a ele.");
        return true;
    }

    private bool ValidSizes(Models.UF reg)
    {
        if (reg.DDD != null && reg.DDD.Length > DBUFDicInfo.UfDDD.FTamanho)
            throw new SGValidationException($"DDD deve ter no máximo {DBUFDicInfo.UfDDD.FTamanho} caracteres.");
        if (reg.IdUF != null && reg.IdUF.Length > DBUFDicInfo.UfID.FTamanho)
            throw new SGValidationException($"ID deve ter no máximo {DBUFDicInfo.UfID.FTamanho} caracteres.");
        if (reg.Descricao != null && reg.Descricao.Length > DBUFDicInfo.UfDescricao.FTamanho)
            throw new SGValidationException($"Descricao deve ter no máximo {DBUFDicInfo.UfDescricao.FTamanho} caracteres.");
        if (reg.GUID != null && reg.GUID.Length > DBUFDicInfo.UfGUID.FTamanho)
            throw new SGValidationException($"GUID deve ter no máximo {DBUFDicInfo.UfGUID.FTamanho} caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.UF reg, IUFService service, IPaisesReader paisesReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.IdUF))
            throw new SGValidationException("ID é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        // Paises
        if (!reg.Pais.IsEmptyIDNumber())
        {
            var regPaises = await paisesReader.Read(reg.Pais, oCnn);
            if (regPaises == null || regPaises.Id != reg.Pais)
            {
                throw new SGValidationException($"Paises não encontrado ({regPaises?.Id}).");
            }
        }

        return true;
    }
}