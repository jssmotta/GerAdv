// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class InstanciaWriterTests
{
    private readonly Mock<IFInstanciaFactory> _mockInstanciaFactory;
    private readonly Mock<FInstancia> _mockFInstancia;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly InstanciaWriter _instanciaWriter;
    public InstanciaWriterTests()
    {
        _mockInstanciaFactory = new Mock<IFInstanciaFactory>();
        _mockFInstancia = new Mock<FInstancia>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _instanciaWriter = new InstanciaWriter(_mockInstanciaFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var instancia = CreateValidInstanciaModel();
        instancia.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockInstanciaFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFInstancia.Object);
        _mockFInstancia.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _instanciaWriter.WriteAsync(instancia, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFInstancia.Object);
        _mockInstanciaFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockInstanciaFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFInstancia.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var instancia = CreateValidInstanciaModel();
        instancia.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockInstanciaFactory.Setup(x => x.CreateFromIdAsync(instancia.Id, _mockConnection.Object)).ReturnsAsync(_mockFInstancia.Object);
        _mockFInstancia.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _instanciaWriter.WriteAsync(instancia, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFInstancia.Object);
        _mockInstanciaFactory.Verify(x => x.CreateFromIdAsync(instancia.Id, _mockConnection.Object), Times.Once);
        _mockInstanciaFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFInstancia.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var instancia = CreateValidInstanciaModel();
        var auditorQuem = 99;
        _mockInstanciaFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFInstancia.Object);
        _mockFInstancia.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _instanciaWriter.WriteAsync(instancia, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFInstancia.Object);
        _mockFInstancia.VerifySet(x => x.FGUID = instancia.GUID, Times.Once);
        _mockFInstancia.VerifySet(x => x.FLiminarPedida = instancia.LiminarPedida, Times.Once);
        _mockFInstancia.VerifySet(x => x.FObjeto = instancia.Objeto, Times.Once);
        _mockFInstancia.VerifySet(x => x.FStatusResultado = instancia.StatusResultado, Times.Once);
        _mockFInstancia.VerifySet(x => x.FLiminarPendente = instancia.LiminarPendente, Times.Once);
        _mockFInstancia.VerifySet(x => x.FInterpusemosRecurso = instancia.InterpusemosRecurso, Times.Once);
        _mockFInstancia.VerifySet(x => x.FLiminarConcedida = instancia.LiminarConcedida, Times.Once);
        _mockFInstancia.VerifySet(x => x.FLiminarNegada = instancia.LiminarNegada, Times.Once);
        _mockFInstancia.VerifySet(x => x.FProcesso = instancia.Processo, Times.Once);
        _mockFInstancia.VerifySet(x => x.FData = instancia.Data, Times.Once);
        _mockFInstancia.VerifySet(x => x.FLiminarParcial = instancia.LiminarParcial, Times.Once);
        _mockFInstancia.VerifySet(x => x.FLiminarResultado = instancia.LiminarResultado, Times.Once);
        _mockFInstancia.VerifySet(x => x.FNroProcesso = instancia.NroProcesso, Times.Once);
        _mockFInstancia.VerifySet(x => x.FDivisao = instancia.Divisao, Times.Once);
        _mockFInstancia.VerifySet(x => x.FLiminarCliente = instancia.LiminarCliente, Times.Once);
        _mockFInstancia.VerifySet(x => x.FComarca = instancia.Comarca, Times.Once);
        _mockFInstancia.VerifySet(x => x.FSubDivisao = instancia.SubDivisao, Times.Once);
        _mockFInstancia.VerifySet(x => x.FPrincipal = instancia.Principal, Times.Once);
        _mockFInstancia.VerifySet(x => x.FAcao = instancia.Acao, Times.Once);
        _mockFInstancia.VerifySet(x => x.FForo = instancia.Foro, Times.Once);
        _mockFInstancia.VerifySet(x => x.FTipoRecurso = instancia.TipoRecurso, Times.Once);
        _mockFInstancia.VerifySet(x => x.FZKey = instancia.ZKey, Times.Once);
        _mockFInstancia.VerifySet(x => x.FZKeyQuem = instancia.ZKeyQuem, Times.Once);
        _mockFInstancia.VerifySet(x => x.FZKeyQuando = instancia.ZKeyQuando.ToString(), Times.Once);
        _mockFInstancia.VerifySet(x => x.FNroAntigo = instancia.NroAntigo, Times.Once);
        _mockFInstancia.VerifySet(x => x.FAccessCode = instancia.AccessCode, Times.Once);
        _mockFInstancia.VerifySet(x => x.FJulgador = instancia.Julgador, Times.Once);
        _mockFInstancia.VerifySet(x => x.FZKeyIA = instancia.ZKeyIA, Times.Once);
        _mockFInstancia.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithNullZKeyQuando_ShouldNotSetFZKeyQuando()
    {
        // Arrange
        var instancia = CreateValidInstanciaModel();
        instancia.ZKeyQuando = null;
        var auditorQuem = 123;
        _mockInstanciaFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFInstancia.Object);
        _mockFInstancia.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _instanciaWriter.WriteAsync(instancia, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFInstancia.VerifySet(x => x.FZKeyQuando = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var instancia = CreateValidInstanciaModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockInstanciaFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _instanciaWriter.WriteAsync(instancia, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var instancia = CreateValidInstanciaModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockInstanciaFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFInstancia.Object);
        _mockFInstancia.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _instanciaWriter.WriteAsync(instancia, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var instanciaResponse = new InstanciaResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockInstanciaFactory.Setup(x => x.DeleteAsync(operadorId, instanciaResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _instanciaWriter.Delete(instanciaResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockInstanciaFactory.Verify(x => x.DeleteAsync(operadorId, instanciaResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var instanciaResponse = new InstanciaResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockInstanciaFactory.Setup(x => x.DeleteAsync(operadorId, instanciaResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _instanciaWriter.Delete(instanciaResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var instanciaResponse = new InstanciaResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockInstanciaFactory.Setup(x => x.DeleteAsync(operadorId, instanciaResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _instanciaWriter.Delete(instanciaResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new InstanciaWriter(_mockInstanciaFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new InstanciaWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.Instancia CreateValidInstanciaModel()
    {
        return new Models.Instancia
        {
            Id = 0,
            GUID = Guid.NewGuid().ToString(),
            LiminarPedida = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Objeto = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            StatusResultado = 1,
            LiminarPendente = false,
            InterpusemosRecurso = false,
            LiminarConcedida = false,
            LiminarNegada = false,
            Processo = 1,
            Data = "27/05/2022",
            LiminarParcial = false,
            LiminarResultado = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            NroProcesso = "AAAAAAAAAAAAAAAAAAAAAAA",
            Divisao = 1,
            LiminarCliente = false,
            Comarca = 1,
            SubDivisao = 1,
            Principal = false,
            Acao = 1,
            Foro = 1,
            TipoRecurso = 1,
            ZKey = "AAAAAAAAAAAAAAAAAAAAAAA",
            ZKeyQuem = 1,
            ZKeyQuando = "24/04/1975",
            NroAntigo = "AAAAAAAAAAAAAAAAAAAAAAA",
            AccessCode = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Julgador = 1,
            ZKeyIA = "AAAAAAAAAAAAAAAAAAAAAAA"
        };
    }
#endregion
}