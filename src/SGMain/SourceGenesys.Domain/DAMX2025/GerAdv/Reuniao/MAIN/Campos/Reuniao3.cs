// 100% auto-generated by Source Genesys Core
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming 1
public partial class DBReuniao
{
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool pFldFCliente, pFldFIDAgenda, pFldFData, pFldFPauta, pFldFATA, pFldFHoraInicial, pFldFHoraFinal, pFldFExterna, pFldFHoraSaida, pFldFHoraRetorno, pFldFPrincipaisDecisoes, pFldFGUID, pFldFBold;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected int m_FCliente, m_FIDAgenda;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected string? m_FPauta, m_FATA, m_FPrincipaisDecisoes, m_FGUID;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected DateTime? m_FData, m_FHoraInicial, m_FHoraFinal, m_FHoraSaida, m_FHoraRetorno;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool m_FExterna, m_FBold;
    public virtual int FCliente
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCliente;
        set
        {
            pFldFCliente = pFldFCliente || value != m_FCliente;
            if (pFldFCliente)
                m_FCliente = value;
        }
    }

    public virtual int FIDAgenda
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FIDAgenda;
        set
        {
            pFldFIDAgenda = pFldFIDAgenda || value != m_FIDAgenda;
            if (pFldFIDAgenda)
                m_FIDAgenda = value;
        }
    }

    public virtual string? FData
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FData is null || m_FData == DevourerOne.DDataZerada ? string.Empty : m_FData.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFData, m_FData, value)is not (true, var changed, var data))
                return;
            (pFldFData, m_FData) = (changed, data);
        }
    }

    // Tracking Code: 20250503
    public virtual string? FPauta
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPauta ?? string.Empty;
        set
        {
            pFldFPauta = pFldFPauta || !(m_FPauta ?? string.Empty).Equals(value);
            if (pFldFPauta)
                m_FPauta = value.trim().FixAbc() ?? string.Empty;
        }
    }

    // Tracking Code: 20250503
    public virtual string? FATA
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FATA ?? string.Empty;
        set
        {
            pFldFATA = pFldFATA || !(m_FATA ?? string.Empty).Equals(value);
            if (pFldFATA)
                m_FATA = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public virtual string? FHoraInicial
    {
        // fdDate2 TRACE CODE
        get => $"{m_FHoraInicial:HH:mm}";
        set
        {
            if (string.IsNullOrEmpty(value))
            {
                pFldFHoraInicial = pFldFHoraInicial || m_FHoraInicial != null;
                m_FHoraInicial = null;
                return;
            }

            if (value.IsEquals(DevourerOne.PNow))
            {
                pFldFHoraInicial = true;
                m_FHoraInicial = DevourerOne.DateTimeUtc;
            }
            else
            {
                if (value.IsEquals($"{m_FHoraInicial:HH:mm}"))
                    return;
                if (!DateTime.TryParse(value, out var dateTime))
                    return;
                pFldFHoraInicial = true;
                m_FHoraInicial = dateTime;
            }
        }
    }

    public virtual string? FHoraFinal
    {
        // fdDate2 TRACE CODE
        get => $"{m_FHoraFinal:HH:mm}";
        set
        {
            if (string.IsNullOrEmpty(value))
            {
                pFldFHoraFinal = pFldFHoraFinal || m_FHoraFinal != null;
                m_FHoraFinal = null;
                return;
            }

            if (value.IsEquals(DevourerOne.PNow))
            {
                pFldFHoraFinal = true;
                m_FHoraFinal = DevourerOne.DateTimeUtc;
            }
            else
            {
                if (value.IsEquals($"{m_FHoraFinal:HH:mm}"))
                    return;
                if (!DateTime.TryParse(value, out var dateTime))
                    return;
                pFldFHoraFinal = true;
                m_FHoraFinal = dateTime;
            }
        }
    }

    public virtual bool FExterna
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FExterna;
        set
        {
            pFldFExterna = pFldFExterna || value != m_FExterna;
            if (pFldFExterna)
                m_FExterna = value;
        }
    }

    public virtual string? FHoraSaida
    {
        // fdDate2 TRACE CODE
        get => $"{m_FHoraSaida:HH:mm}";
        set
        {
            if (string.IsNullOrEmpty(value))
            {
                pFldFHoraSaida = pFldFHoraSaida || m_FHoraSaida != null;
                m_FHoraSaida = null;
                return;
            }

            if (value.IsEquals(DevourerOne.PNow))
            {
                pFldFHoraSaida = true;
                m_FHoraSaida = DevourerOne.DateTimeUtc;
            }
            else
            {
                if (value.IsEquals($"{m_FHoraSaida:HH:mm}"))
                    return;
                if (!DateTime.TryParse(value, out var dateTime))
                    return;
                pFldFHoraSaida = true;
                m_FHoraSaida = dateTime;
            }
        }
    }

    public virtual string? FHoraRetorno
    {
        // fdDate2 TRACE CODE
        get => $"{m_FHoraRetorno:HH:mm}";
        set
        {
            if (string.IsNullOrEmpty(value))
            {
                pFldFHoraRetorno = pFldFHoraRetorno || m_FHoraRetorno != null;
                m_FHoraRetorno = null;
                return;
            }

            if (value.IsEquals(DevourerOne.PNow))
            {
                pFldFHoraRetorno = true;
                m_FHoraRetorno = DevourerOne.DateTimeUtc;
            }
            else
            {
                if (value.IsEquals($"{m_FHoraRetorno:HH:mm}"))
                    return;
                if (!DateTime.TryParse(value, out var dateTime))
                    return;
                pFldFHoraRetorno = true;
                m_FHoraRetorno = dateTime;
            }
        }
    }

    // Tracking Code: 20250503
    public virtual string? FPrincipaisDecisoes
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPrincipaisDecisoes ?? string.Empty;
        set
        {
            pFldFPrincipaisDecisoes = pFldFPrincipaisDecisoes || !(m_FPrincipaisDecisoes ?? string.Empty).Equals(value);
            if (pFldFPrincipaisDecisoes)
                m_FPrincipaisDecisoes = value.trim().FixAbc() ?? string.Empty;
        }
    }

    // Tracking Code: 20250503
    [StringLength(100, ErrorMessage = "A propriedade FGUID da tabela Reuniao deve ter no máximo 100 caracteres.")]
    public virtual string? FGUID
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FGUID ?? string.Empty;
        set
        {
            pFldFGUID = pFldFGUID || !(m_FGUID ?? string.Empty).Equals(value);
            if (pFldFGUID)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FGUID = trimmed.Length > 100 ? trimmed.AsSpan(0, 100).ToString() : trimmed;
            }
        }
    }

    public virtual bool FBold
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FBold;
        set
        {
            pFldFBold = pFldFBold || value != m_FBold;
            if (pFldFBold)
                m_FBold = value;
        }
    }

    public void SetAuditor(int usuarioId) => AuditorQuem = usuarioId;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITabelaName() => PTabelaNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoCodigo() => CampoCodigo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoNome() => CampoNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string IPrefixo() => PTabelaPrefixo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITypeFieldCode() => "int";
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IdIsIdentity() => false;
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetID() => ID;
}