// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class HistoricoService
{
    private static (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterHistorico filtro)
    {
        var parameters = new List<SqlParameter>();
        if (filtro.ExtraID != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBHistoricoDicInfo.ExtraID)}", filtro.ExtraID));
        }

        if (filtro.ExtraID_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBHistoricoDicInfo.ExtraID)}_end", filtro.ExtraID_end));
        }

        if (filtro.IDNE != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBHistoricoDicInfo.IDNE)}", filtro.IDNE));
        }

        if (filtro.IDNE_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBHistoricoDicInfo.IDNE)}_end", filtro.IDNE_end));
        }

        if (!string.IsNullOrEmpty(filtro.ExtraGUID))
        {
            parameters.Add(new($"@{nameof(DBHistoricoDicInfo.ExtraGUID)}", ApplyWildCard(filtro.WildcardChar, filtro.ExtraGUID)));
        }

        if (filtro.LiminarOrigem != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBHistoricoDicInfo.LiminarOrigem)}", filtro.LiminarOrigem));
        }

        if (filtro.LiminarOrigem_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBHistoricoDicInfo.LiminarOrigem)}_end", filtro.LiminarOrigem_end));
        }

        if (filtro.NaoPublicavel != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBHistoricoDicInfo.NaoPublicavel)}", filtro.NaoPublicavel));
        }

        if (filtro.Processo != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBHistoricoDicInfo.Processo)}", filtro.Processo));
        }

        if (filtro.Precatoria != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBHistoricoDicInfo.Precatoria)}", filtro.Precatoria));
        }

        if (filtro.Apenso != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBHistoricoDicInfo.Apenso)}", filtro.Apenso));
        }

        if (filtro.IDInstProcesso != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBHistoricoDicInfo.IDInstProcesso)}", filtro.IDInstProcesso));
        }

        if (filtro.IDInstProcesso_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBHistoricoDicInfo.IDInstProcesso)}_end", filtro.IDInstProcesso_end));
        }

        if (filtro.Fase != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBHistoricoDicInfo.Fase)}", filtro.Fase));
        }

        if (!string.IsNullOrEmpty(filtro.Data))
        {
            parameters.Add(new($"@{nameof(DBHistoricoDicInfo.Data)}", ApplyWildCard(filtro.WildcardChar, filtro.Data)));
        }

        if (!string.IsNullOrEmpty(filtro.Observacao))
        {
            parameters.Add(new($"@{nameof(DBHistoricoDicInfo.Observacao)}", ApplyWildCard(filtro.WildcardChar, filtro.Observacao)));
        }

        if (filtro.Agendado != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBHistoricoDicInfo.Agendado)}", filtro.Agendado));
        }

        if (filtro.Concluido != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBHistoricoDicInfo.Concluido)}", filtro.Concluido));
        }

        if (filtro.MesmaAgenda != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBHistoricoDicInfo.MesmaAgenda)}", filtro.MesmaAgenda));
        }

        if (filtro.SAD != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBHistoricoDicInfo.SAD)}", filtro.SAD));
        }

        if (filtro.SAD_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBHistoricoDicInfo.SAD)}_end", filtro.SAD_end));
        }

        if (filtro.Resumido != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBHistoricoDicInfo.Resumido)}", filtro.Resumido));
        }

        if (filtro.StatusAndamento != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBHistoricoDicInfo.StatusAndamento)}", filtro.StatusAndamento));
        }

        if (filtro.Top != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBHistoricoDicInfo.Top)}", filtro.Top));
        }

        if (!string.IsNullOrEmpty(filtro.GUID))
        {
            parameters.Add(new($"@{nameof(DBHistoricoDicInfo.GUID)}", ApplyWildCard(filtro.WildcardChar, filtro.GUID)));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBHistoricoDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
        }

        if (filtro.Codigo_filtro_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBHistoricoDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
        }

        if (filtro.LogicalOperator.IsEmpty() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        if (!filtro.ExtraID.IsEmpty() && filtro.ExtraID_end.IsEmpty())
        {
            cWhere.Append(filtro.ExtraID <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHistoricoDicInfo.PTabelaNome}].[{DBHistoricoDicInfo.ExtraID}] >= @{nameof(DBHistoricoDicInfo.ExtraID)}");
        }
        else
        {
            cWhere.Append((filtro.ExtraID <= 0 && filtro.ExtraID_end <= 0) ? string.Empty : (!(filtro.ExtraID <= 0) && !(filtro.ExtraID_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBHistoricoDicInfo.ExtraID} BETWEEN @{nameof(DBHistoricoDicInfo.ExtraID)} AND @{nameof(DBHistoricoDicInfo.ExtraID)}_end" : !(filtro.ExtraID <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBHistoricoDicInfo.ExtraID} = @{nameof(DBHistoricoDicInfo.ExtraID)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBHistoricoDicInfo.ExtraID} <= @{nameof(DBHistoricoDicInfo.ExtraID)}_end");
        }

        if (!filtro.IDNE.IsEmpty() && filtro.IDNE_end.IsEmpty())
        {
            cWhere.Append(filtro.IDNE <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHistoricoDicInfo.PTabelaNome}].[{DBHistoricoDicInfo.IDNE}] >= @{nameof(DBHistoricoDicInfo.IDNE)}");
        }
        else
        {
            cWhere.Append((filtro.IDNE <= 0 && filtro.IDNE_end <= 0) ? string.Empty : (!(filtro.IDNE <= 0) && !(filtro.IDNE_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBHistoricoDicInfo.IDNE} BETWEEN @{nameof(DBHistoricoDicInfo.IDNE)} AND @{nameof(DBHistoricoDicInfo.IDNE)}_end" : !(filtro.IDNE <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBHistoricoDicInfo.IDNE} = @{nameof(DBHistoricoDicInfo.IDNE)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBHistoricoDicInfo.IDNE} <= @{nameof(DBHistoricoDicInfo.IDNE)}_end");
        }

        cWhere.Append(filtro.ExtraGUID.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHistoricoDicInfo.PTabelaNome}].[{DBHistoricoDicInfo.ExtraGUID}]  {DevourerConsts.MsiCollate} like @{nameof(DBHistoricoDicInfo.ExtraGUID)}");
        if (!filtro.LiminarOrigem.IsEmpty() && filtro.LiminarOrigem_end.IsEmpty())
        {
            cWhere.Append(filtro.LiminarOrigem <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHistoricoDicInfo.PTabelaNome}].[{DBHistoricoDicInfo.LiminarOrigem}] >= @{nameof(DBHistoricoDicInfo.LiminarOrigem)}");
        }
        else
        {
            cWhere.Append((filtro.LiminarOrigem <= 0 && filtro.LiminarOrigem_end <= 0) ? string.Empty : (!(filtro.LiminarOrigem <= 0) && !(filtro.LiminarOrigem_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBHistoricoDicInfo.LiminarOrigem} BETWEEN @{nameof(DBHistoricoDicInfo.LiminarOrigem)} AND @{nameof(DBHistoricoDicInfo.LiminarOrigem)}_end" : !(filtro.LiminarOrigem <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBHistoricoDicInfo.LiminarOrigem} = @{nameof(DBHistoricoDicInfo.LiminarOrigem)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBHistoricoDicInfo.LiminarOrigem} <= @{nameof(DBHistoricoDicInfo.LiminarOrigem)}_end");
        }

        cWhere.Append(filtro.NaoPublicavel == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHistoricoDicInfo.PTabelaNome}].[{DBHistoricoDicInfo.NaoPublicavel}] = @{nameof(DBHistoricoDicInfo.NaoPublicavel)}");
        cWhere.Append(filtro.Processo <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHistoricoDicInfo.PTabelaNome}].[{DBHistoricoDicInfo.Processo}] = @{nameof(DBHistoricoDicInfo.Processo)}");
        cWhere.Append(filtro.Precatoria <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHistoricoDicInfo.PTabelaNome}].[{DBHistoricoDicInfo.Precatoria}] = @{nameof(DBHistoricoDicInfo.Precatoria)}");
        cWhere.Append(filtro.Apenso <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHistoricoDicInfo.PTabelaNome}].[{DBHistoricoDicInfo.Apenso}] = @{nameof(DBHistoricoDicInfo.Apenso)}");
        if (!filtro.IDInstProcesso.IsEmpty() && filtro.IDInstProcesso_end.IsEmpty())
        {
            cWhere.Append(filtro.IDInstProcesso <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHistoricoDicInfo.PTabelaNome}].[{DBHistoricoDicInfo.IDInstProcesso}] >= @{nameof(DBHistoricoDicInfo.IDInstProcesso)}");
        }
        else
        {
            cWhere.Append((filtro.IDInstProcesso <= 0 && filtro.IDInstProcesso_end <= 0) ? string.Empty : (!(filtro.IDInstProcesso <= 0) && !(filtro.IDInstProcesso_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBHistoricoDicInfo.IDInstProcesso} BETWEEN @{nameof(DBHistoricoDicInfo.IDInstProcesso)} AND @{nameof(DBHistoricoDicInfo.IDInstProcesso)}_end" : !(filtro.IDInstProcesso <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBHistoricoDicInfo.IDInstProcesso} = @{nameof(DBHistoricoDicInfo.IDInstProcesso)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBHistoricoDicInfo.IDInstProcesso} <= @{nameof(DBHistoricoDicInfo.IDInstProcesso)}_end");
        }

        cWhere.Append(filtro.Fase <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHistoricoDicInfo.PTabelaNome}].[{DBHistoricoDicInfo.Fase}] = @{nameof(DBHistoricoDicInfo.Fase)}");
        cWhere.Append(filtro.Data.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHistoricoDicInfo.PTabelaNome}].[{DBHistoricoDicInfo.Data}]  {DevourerConsts.MsiCollate} like @{nameof(DBHistoricoDicInfo.Data)}");
        cWhere.Append(filtro.Observacao.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHistoricoDicInfo.PTabelaNome}].[{DBHistoricoDicInfo.Observacao}]  {DevourerConsts.MsiCollate} like @{nameof(DBHistoricoDicInfo.Observacao)}");
        cWhere.Append(filtro.Agendado == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHistoricoDicInfo.PTabelaNome}].[{DBHistoricoDicInfo.Agendado}] = @{nameof(DBHistoricoDicInfo.Agendado)}");
        cWhere.Append(filtro.Concluido == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHistoricoDicInfo.PTabelaNome}].[{DBHistoricoDicInfo.Concluido}] = @{nameof(DBHistoricoDicInfo.Concluido)}");
        cWhere.Append(filtro.MesmaAgenda == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHistoricoDicInfo.PTabelaNome}].[{DBHistoricoDicInfo.MesmaAgenda}] = @{nameof(DBHistoricoDicInfo.MesmaAgenda)}");
        if (!filtro.SAD.IsEmpty() && filtro.SAD_end.IsEmpty())
        {
            cWhere.Append(filtro.SAD <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHistoricoDicInfo.PTabelaNome}].[{DBHistoricoDicInfo.SAD}] >= @{nameof(DBHistoricoDicInfo.SAD)}");
        }
        else
        {
            cWhere.Append((filtro.SAD <= 0 && filtro.SAD_end <= 0) ? string.Empty : (!(filtro.SAD <= 0) && !(filtro.SAD_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBHistoricoDicInfo.SAD} BETWEEN @{nameof(DBHistoricoDicInfo.SAD)} AND @{nameof(DBHistoricoDicInfo.SAD)}_end" : !(filtro.SAD <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBHistoricoDicInfo.SAD} = @{nameof(DBHistoricoDicInfo.SAD)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBHistoricoDicInfo.SAD} <= @{nameof(DBHistoricoDicInfo.SAD)}_end");
        }

        cWhere.Append(filtro.Resumido == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHistoricoDicInfo.PTabelaNome}].[{DBHistoricoDicInfo.Resumido}] = @{nameof(DBHistoricoDicInfo.Resumido)}");
        cWhere.Append(filtro.StatusAndamento <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHistoricoDicInfo.PTabelaNome}].[{DBHistoricoDicInfo.StatusAndamento}] = @{nameof(DBHistoricoDicInfo.StatusAndamento)}");
        cWhere.Append(filtro.Top == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHistoricoDicInfo.PTabelaNome}].[{DBHistoricoDicInfo.Top}] = @{nameof(DBHistoricoDicInfo.Top)}");
        cWhere.Append(filtro.GUID.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHistoricoDicInfo.PTabelaNome}].[{DBHistoricoDicInfo.GUID}]  {DevourerConsts.MsiCollate} like @{nameof(DBHistoricoDicInfo.GUID)}");
        if (!filtro.Codigo_filtro.IsEmpty() && filtro.Codigo_filtro_end.IsEmpty())
        {
            cWhere.Append(filtro.Codigo_filtro <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHistoricoDicInfo.PTabelaNome}].[{DBHistoricoDicInfo.CampoCodigo}] >= @{nameof(DBHistoricoDicInfo.CampoCodigo)}");
        }
        else
        {
            cWhere.Append((filtro.Codigo_filtro <= 0 && filtro.Codigo_filtro_end <= 0) ? string.Empty : (!(filtro.Codigo_filtro <= 0) && !(filtro.Codigo_filtro_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBHistoricoDicInfo.CampoCodigo} BETWEEN @{nameof(DBHistoricoDicInfo.CampoCodigo)} AND @{nameof(DBHistoricoDicInfo.CampoCodigo)}_end" : !(filtro.Codigo_filtro <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBHistoricoDicInfo.CampoCodigo} = @{nameof(DBHistoricoDicInfo.CampoCodigo)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBHistoricoDicInfo.CampoCodigo} <= @{nameof(DBHistoricoDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private static string ApplyWildCard(char wildcardChar, string value)
    {
        if (wildcardChar == '\0' || wildcardChar == ' ')
        {
            return value;
        }

        var result = $"{wildcardChar}{value.Replace(" ", wildcardChar.ToString())}{wildcardChar}";
        return result;
    }

    public async Task<IEnumerable<NomeID>> GetListN([FromQuery] int max, [FromBody] Filters.FilterHistorico? filtro, [FromRoute, Required] string uri, CancellationToken token)
    {
        // Tracking: 20250606-0
        ThrowIfDisposed();
        var filtroResult = filtro == null ? null : WFiltro(filtro!);
        string where = filtroResult?.where ?? string.Empty;
        List<SqlParameter> parameters = filtroResult?.parametros ?? [];
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new Exception($"Coneão nula.");
        }

        var keyCache = await reader.ReadStringAuditor(uri, "", [], oCnn);
        var cacheKey = $"{uri}-Historico-{max}-{where.GetHashCode()}-GetListN-{keyCache}";
        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId)
        };
        return await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataListNAsync(max, uri, where, parameters, cancel), entryOptions, cancellationToken: token) ?? [];
    }

    private async Task<IEnumerable<NomeID>> GetDataListNAsync(int max, string uri, string where, List<SqlParameter> parameters, CancellationToken token)
    {
        var result = new List<NomeID>(max);
        var lista = await reader.ListarN(max, uri, where, parameters, DBHistoricoDicInfo.CampoNome);
        foreach (var item in lista)
        {
            if (token.IsCancellationRequested)
                break;
            if (item?.FNome != null)
            {
                result.Add(new NomeID { Nome = item.FNome, ID = item.ID });
            }
        }

        return result;
    }

    private async Task<IEnumerable<HistoricoResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}