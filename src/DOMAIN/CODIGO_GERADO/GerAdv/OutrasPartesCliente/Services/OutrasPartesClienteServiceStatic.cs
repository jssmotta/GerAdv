// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class OutrasPartesClienteService
{
    public (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterOutrasPartesCliente? filtro)
    {
        if (filtro == null)
            return null;
        var parameters = new List<SqlParameter>();
        if (!string.IsNullOrWhiteSpace(filtro.Nome))
        {
            parameters.Add(new($"@{(DBOutrasPartesClienteDicInfo.Nome)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Nome)));
        }

        if (filtro.Terceirizado != int.MinValue)
        {
            parameters.Add(new($"@{(DBOutrasPartesClienteDicInfo.Terceirizado)}", filtro.Terceirizado));
        }

        if (filtro.ClientePrincipal != int.MinValue)
        {
            parameters.Add(new($"@{(DBOutrasPartesClienteDicInfo.ClientePrincipal)}", filtro.ClientePrincipal));
            if (filtro.ClientePrincipal_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBOutrasPartesClienteDicInfo.ClientePrincipal)}_end", filtro.ClientePrincipal_end));
            }
        }

        if (filtro.Tipo != int.MinValue)
        {
            parameters.Add(new($"@{(DBOutrasPartesClienteDicInfo.Tipo)}", filtro.Tipo));
        }

        if (filtro.Sexo != int.MinValue)
        {
            parameters.Add(new($"@{(DBOutrasPartesClienteDicInfo.Sexo)}", filtro.Sexo));
        }

        if (!filtro.DtNasc.IsEmptyDX())
        {
            if (DateTime.TryParse(filtro.DtNasc, out var dataParam1))
                parameters.Add(new($"@{(DBOutrasPartesClienteDicInfo.DtNasc)}", dataParam1));
            if (!filtro.DtNasc_end.IsEmptyDX())
            {
                if (DateTime.TryParse(filtro.DtNasc_end, out var dataParam2))
                    parameters.Add(new($"@{(DBOutrasPartesClienteDicInfo.DtNasc)}_end", dataParam2));
            }
        }

        if (!string.IsNullOrWhiteSpace(filtro.CPF))
        {
            parameters.Add(new($"@{(DBOutrasPartesClienteDicInfo.CPF)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.CPF)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.RG))
        {
            parameters.Add(new($"@{(DBOutrasPartesClienteDicInfo.RG)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.RG)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.CNPJ))
        {
            parameters.Add(new($"@{(DBOutrasPartesClienteDicInfo.CNPJ)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.CNPJ)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.InscEst))
        {
            parameters.Add(new($"@{(DBOutrasPartesClienteDicInfo.InscEst)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.InscEst)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.NomeFantasia))
        {
            parameters.Add(new($"@{(DBOutrasPartesClienteDicInfo.NomeFantasia)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.NomeFantasia)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Endereco))
        {
            parameters.Add(new($"@{(DBOutrasPartesClienteDicInfo.Endereco)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Endereco)));
        }

        if (filtro.Cidade != int.MinValue)
        {
            parameters.Add(new($"@{(DBOutrasPartesClienteDicInfo.Cidade)}", filtro.Cidade));
            if (filtro.Cidade_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBOutrasPartesClienteDicInfo.Cidade)}_end", filtro.Cidade_end));
            }
        }

        if (!string.IsNullOrWhiteSpace(filtro.CEP))
        {
            parameters.Add(new($"@{(DBOutrasPartesClienteDicInfo.CEP)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.CEP)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Bairro))
        {
            parameters.Add(new($"@{(DBOutrasPartesClienteDicInfo.Bairro)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Bairro)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Fone))
        {
            parameters.Add(new($"@{(DBOutrasPartesClienteDicInfo.Fone)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Fone)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Fax))
        {
            parameters.Add(new($"@{(DBOutrasPartesClienteDicInfo.Fax)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Fax)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.EMail))
        {
            parameters.Add(new($"@{(DBOutrasPartesClienteDicInfo.EMail)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.EMail)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Site))
        {
            parameters.Add(new($"@{(DBOutrasPartesClienteDicInfo.Site)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Site)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.GUID))
        {
            parameters.Add(new($"@{(DBOutrasPartesClienteDicInfo.GUID)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.GUID)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Class))
        {
            parameters.Add(new($"@{(DBOutrasPartesClienteDicInfo.Class)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Class)));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{(DBOutrasPartesClienteDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
            if (filtro.Codigo_filtro_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBOutrasPartesClienteDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
            }
        }

        if (filtro.LogicalOperator.IsEmptyX() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        cWhere.Append(filtro.Nome.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOutrasPartesClienteDicInfo.PTabelaNome}].[{DBOutrasPartesClienteDicInfo.Nome}]  {DevourerConsts.MsiCollate} like @{(DBOutrasPartesClienteDicInfo.Nome)}");
        cWhere.Append(filtro.Terceirizado == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOutrasPartesClienteDicInfo.PTabelaNome}].[{DBOutrasPartesClienteDicInfo.Terceirizado}] = @{(DBOutrasPartesClienteDicInfo.Terceirizado)}");
        if (!(filtro.ClientePrincipal.IsEmptyX()) && filtro.ClientePrincipal_end.IsEmptyX())
        {
            cWhere.Append(filtro.ClientePrincipal.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOutrasPartesClienteDicInfo.PTabelaNome}].[{DBOutrasPartesClienteDicInfo.ClientePrincipal}] = @{(DBOutrasPartesClienteDicInfo.ClientePrincipal)}");
        }
        else if (!(filtro.ClientePrincipal.IsEmptyX()) && !(filtro.ClientePrincipal_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOutrasPartesClienteDicInfo.PTabelaNome}].{DBOutrasPartesClienteDicInfo.ClientePrincipal} BETWEEN @{(DBOutrasPartesClienteDicInfo.ClientePrincipal)} AND @{(DBOutrasPartesClienteDicInfo.ClientePrincipal)}_end");
        }

        cWhere.Append(filtro.Tipo == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOutrasPartesClienteDicInfo.PTabelaNome}].[{DBOutrasPartesClienteDicInfo.Tipo}] = @{(DBOutrasPartesClienteDicInfo.Tipo)}");
        cWhere.Append(filtro.Sexo == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOutrasPartesClienteDicInfo.PTabelaNome}].[{DBOutrasPartesClienteDicInfo.Sexo}] = @{(DBOutrasPartesClienteDicInfo.Sexo)}");
        if (!(filtro.DtNasc.IsEmptyDX()) && filtro.DtNasc_end.IsEmptyDX())
        {
            cWhere.Append(filtro.DtNasc.IsEmptyDX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBOutrasPartesClienteDicInfo.PTabelaNome}].[{DBOutrasPartesClienteDicInfo.DtNasc}], 103) = CONVERT(DATE, @{(DBOutrasPartesClienteDicInfo.DtNasc)}, 103)");
        }
        else if (!(filtro.DtNasc.IsEmptyDX()) && !(filtro.DtNasc_end.IsEmptyDX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOutrasPartesClienteDicInfo.PTabelaNome}].{DBOutrasPartesClienteDicInfo.DtNasc} BETWEEN @{(DBOutrasPartesClienteDicInfo.DtNasc)} AND @{(DBOutrasPartesClienteDicInfo.DtNasc)}_end");
        }

        cWhere.Append(filtro.CPF.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOutrasPartesClienteDicInfo.PTabelaNome}].[{DBOutrasPartesClienteDicInfo.CPF}]  {DevourerConsts.MsiCollate} like @{(DBOutrasPartesClienteDicInfo.CPF)}");
        cWhere.Append(filtro.RG.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOutrasPartesClienteDicInfo.PTabelaNome}].[{DBOutrasPartesClienteDicInfo.RG}]  {DevourerConsts.MsiCollate} like @{(DBOutrasPartesClienteDicInfo.RG)}");
        cWhere.Append(filtro.CNPJ.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOutrasPartesClienteDicInfo.PTabelaNome}].[{DBOutrasPartesClienteDicInfo.CNPJ}]  {DevourerConsts.MsiCollate} like @{(DBOutrasPartesClienteDicInfo.CNPJ)}");
        cWhere.Append(filtro.InscEst.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOutrasPartesClienteDicInfo.PTabelaNome}].[{DBOutrasPartesClienteDicInfo.InscEst}]  {DevourerConsts.MsiCollate} like @{(DBOutrasPartesClienteDicInfo.InscEst)}");
        cWhere.Append(filtro.NomeFantasia.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOutrasPartesClienteDicInfo.PTabelaNome}].[{DBOutrasPartesClienteDicInfo.NomeFantasia}]  {DevourerConsts.MsiCollate} like @{(DBOutrasPartesClienteDicInfo.NomeFantasia)}");
        cWhere.Append(filtro.Endereco.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOutrasPartesClienteDicInfo.PTabelaNome}].[{DBOutrasPartesClienteDicInfo.Endereco}]  {DevourerConsts.MsiCollate} like @{(DBOutrasPartesClienteDicInfo.Endereco)}");
        if (!(filtro.Cidade.IsEmptyX()) && filtro.Cidade_end.IsEmptyX())
        {
            cWhere.Append(filtro.Cidade.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOutrasPartesClienteDicInfo.PTabelaNome}].[{DBOutrasPartesClienteDicInfo.Cidade}] = @{(DBOutrasPartesClienteDicInfo.Cidade)}");
        }
        else if (!(filtro.Cidade.IsEmptyX()) && !(filtro.Cidade_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOutrasPartesClienteDicInfo.PTabelaNome}].{DBOutrasPartesClienteDicInfo.Cidade} BETWEEN @{(DBOutrasPartesClienteDicInfo.Cidade)} AND @{(DBOutrasPartesClienteDicInfo.Cidade)}_end");
        }

        cWhere.Append(filtro.CEP.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOutrasPartesClienteDicInfo.PTabelaNome}].[{DBOutrasPartesClienteDicInfo.CEP}]  {DevourerConsts.MsiCollate} like @{(DBOutrasPartesClienteDicInfo.CEP)}");
        cWhere.Append(filtro.Bairro.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOutrasPartesClienteDicInfo.PTabelaNome}].[{DBOutrasPartesClienteDicInfo.Bairro}]  {DevourerConsts.MsiCollate} like @{(DBOutrasPartesClienteDicInfo.Bairro)}");
        cWhere.Append(filtro.Fone.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOutrasPartesClienteDicInfo.PTabelaNome}].[{DBOutrasPartesClienteDicInfo.Fone}]  {DevourerConsts.MsiCollate} like @{(DBOutrasPartesClienteDicInfo.Fone)}");
        cWhere.Append(filtro.Fax.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOutrasPartesClienteDicInfo.PTabelaNome}].[{DBOutrasPartesClienteDicInfo.Fax}]  {DevourerConsts.MsiCollate} like @{(DBOutrasPartesClienteDicInfo.Fax)}");
        cWhere.Append(filtro.EMail.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOutrasPartesClienteDicInfo.PTabelaNome}].[{DBOutrasPartesClienteDicInfo.EMail}]  {DevourerConsts.MsiCollate} like @{(DBOutrasPartesClienteDicInfo.EMail)}");
        cWhere.Append(filtro.Site.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOutrasPartesClienteDicInfo.PTabelaNome}].[{DBOutrasPartesClienteDicInfo.Site}]  {DevourerConsts.MsiCollate} like @{(DBOutrasPartesClienteDicInfo.Site)}");
        cWhere.Append(filtro.GUID.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOutrasPartesClienteDicInfo.PTabelaNome}].[{DBOutrasPartesClienteDicInfo.GUID}]  {DevourerConsts.MsiCollate} like @{(DBOutrasPartesClienteDicInfo.GUID)}");
        cWhere.Append(filtro.Class.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOutrasPartesClienteDicInfo.PTabelaNome}].[{DBOutrasPartesClienteDicInfo.Class}]  {DevourerConsts.MsiCollate} like @{(DBOutrasPartesClienteDicInfo.Class)}");
        if (!(filtro.Codigo_filtro.IsEmptyX()) && filtro.Codigo_filtro_end.IsEmptyX())
        {
            cWhere.Append(filtro.Codigo_filtro.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOutrasPartesClienteDicInfo.PTabelaNome}].[{DBOutrasPartesClienteDicInfo.CampoCodigo}] = @{(DBOutrasPartesClienteDicInfo.CampoCodigo)}");
        }
        else if (!(filtro.Codigo_filtro.IsEmptyX()) && !(filtro.Codigo_filtro_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOutrasPartesClienteDicInfo.PTabelaNome}].{DBOutrasPartesClienteDicInfo.CampoCodigo} BETWEEN @{(DBOutrasPartesClienteDicInfo.CampoCodigo)} AND @{(DBOutrasPartesClienteDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private string GetFilterHash(Filters.FilterOutrasPartesCliente? filtro)
    {
        if (filtro == null)
            return string.Empty;
        var json = JsonSerializer.Serialize(filtro);
        using var sha256 = SHA256.Create();
        var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(json));
        return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
    }

    public async Task<IEnumerable<NomeID>> GetListN([FromQuery] int max, [FromBody] Filters.FilterOutrasPartesCliente? filtro, [FromRoute, Required] string uri, CancellationToken token)
    {
        // Tracking: 20250606-0
        ThrowIfDisposed();
        var filtroResult = filtro == null ? null : WFiltro(filtro!);
        string where = filtroResult?.where ?? string.Empty;
        List<SqlParameter> parameters = filtroResult?.parametros ?? [];
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new Exception($"Coneão nula.");
        }

        var keyCache = await reader.ReadStringAuditor(max, uri, "", [], oCnn);
        var cacheKey = $"{uri}-OutrasPartesCliente-{max}-{where.GetHashCode()}-GetListN-{keyCache}";
        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId)
        };
        return await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataListNAsync(max, uri, where, parameters, cancel), entryOptions, cancellationToken: token) ?? [];
    }

    private async Task<IEnumerable<NomeID>> GetDataListNAsync(int max, string uri, string where, List<SqlParameter> parameters, CancellationToken token)
    {
        var result = new List<NomeID>(max);
        var lista = await reader.ListarN(max, uri, where, parameters, DBOutrasPartesClienteDicInfo.CampoNome);
        foreach (var item in lista)
        {
            if (token.IsCancellationRequested)
                break;
            if (item?.FNome != null)
            {
                result.Add(new NomeID { Nome = item.FNome, ID = item.ID });
            }
        }

        return result;
    }

    private async Task<IEnumerable<OutrasPartesClienteResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}