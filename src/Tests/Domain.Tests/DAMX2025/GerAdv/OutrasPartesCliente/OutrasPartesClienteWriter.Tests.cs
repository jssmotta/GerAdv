// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class OutrasPartesClienteWriterTests
{
    private readonly Mock<IFOutrasPartesClienteFactory> _mockOutrasPartesClienteFactory;
    private readonly Mock<FOutrasPartesCliente> _mockFOutrasPartesCliente;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly OutrasPartesClienteWriter _outraspartesclienteWriter;
    public OutrasPartesClienteWriterTests()
    {
        _mockOutrasPartesClienteFactory = new Mock<IFOutrasPartesClienteFactory>();
        _mockFOutrasPartesCliente = new Mock<FOutrasPartesCliente>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _outraspartesclienteWriter = new OutrasPartesClienteWriter(_mockOutrasPartesClienteFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var outraspartescliente = CreateValidOutrasPartesClienteModel();
        outraspartescliente.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockOutrasPartesClienteFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFOutrasPartesCliente.Object);
        _mockFOutrasPartesCliente.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _outraspartesclienteWriter.WriteAsync(outraspartescliente, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFOutrasPartesCliente.Object);
        _mockOutrasPartesClienteFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockOutrasPartesClienteFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFOutrasPartesCliente.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var outraspartescliente = CreateValidOutrasPartesClienteModel();
        outraspartescliente.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockOutrasPartesClienteFactory.Setup(x => x.CreateFromIdAsync(outraspartescliente.Id, _mockConnection.Object)).ReturnsAsync(_mockFOutrasPartesCliente.Object);
        _mockFOutrasPartesCliente.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _outraspartesclienteWriter.WriteAsync(outraspartescliente, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFOutrasPartesCliente.Object);
        _mockOutrasPartesClienteFactory.Verify(x => x.CreateFromIdAsync(outraspartescliente.Id, _mockConnection.Object), Times.Once);
        _mockOutrasPartesClienteFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFOutrasPartesCliente.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var outraspartescliente = CreateValidOutrasPartesClienteModel();
        var auditorQuem = 99;
        _mockOutrasPartesClienteFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFOutrasPartesCliente.Object);
        _mockFOutrasPartesCliente.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _outraspartesclienteWriter.WriteAsync(outraspartescliente, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFOutrasPartesCliente.Object);
        _mockFOutrasPartesCliente.VerifySet(x => x.FNome = outraspartescliente.Nome, Times.Once);
        _mockFOutrasPartesCliente.VerifySet(x => x.FTerceirizado = outraspartescliente.Terceirizado, Times.Once);
        _mockFOutrasPartesCliente.VerifySet(x => x.FClientePrincipal = outraspartescliente.ClientePrincipal, Times.Once);
        _mockFOutrasPartesCliente.VerifySet(x => x.FTipo = outraspartescliente.Tipo, Times.Once);
        _mockFOutrasPartesCliente.VerifySet(x => x.FSexo = outraspartescliente.Sexo, Times.Once);
        _mockFOutrasPartesCliente.VerifySet(x => x.FDtNasc = outraspartescliente.DtNasc.ToString(), Times.Once);
        _mockFOutrasPartesCliente.VerifySet(x => x.FCPF = It.IsAny<string>(), Times.Once); // CPF é limpo pelo ClearInputCpf()
        _mockFOutrasPartesCliente.VerifySet(x => x.FRG = outraspartescliente.RG, Times.Once);
        _mockFOutrasPartesCliente.VerifySet(x => x.FCNPJ = It.IsAny<string>(), Times.Once); // CNPJ é limpo pelo ClearInputCnpj()
        _mockFOutrasPartesCliente.VerifySet(x => x.FInscEst = outraspartescliente.InscEst, Times.Once);
        _mockFOutrasPartesCliente.VerifySet(x => x.FNomeFantasia = outraspartescliente.NomeFantasia, Times.Once);
        _mockFOutrasPartesCliente.VerifySet(x => x.FEndereco = outraspartescliente.Endereco, Times.Once);
        _mockFOutrasPartesCliente.VerifySet(x => x.FCidade = outraspartescliente.Cidade, Times.Once);
        _mockFOutrasPartesCliente.VerifySet(x => x.FCEP = It.IsAny<string>(), Times.Once); // CEP é limpo pelo ClearInputCep()
        _mockFOutrasPartesCliente.VerifySet(x => x.FBairro = outraspartescliente.Bairro, Times.Once);
        _mockFOutrasPartesCliente.VerifySet(x => x.FFone = outraspartescliente.Fone, Times.Once);
        _mockFOutrasPartesCliente.VerifySet(x => x.FFax = outraspartescliente.Fax, Times.Once);
        _mockFOutrasPartesCliente.VerifySet(x => x.FEMail = outraspartescliente.EMail, Times.Once);
        _mockFOutrasPartesCliente.VerifySet(x => x.FSite = outraspartescliente.Site, Times.Once);
        _mockFOutrasPartesCliente.VerifySet(x => x.FGUID = outraspartescliente.GUID, Times.Once);
        _mockFOutrasPartesCliente.VerifySet(x => x.FClass = outraspartescliente.Class, Times.Once);
        _mockFOutrasPartesCliente.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithNullDtNasc_ShouldNotSetFDtNasc()
    {
        // Arrange
        var outraspartescliente = CreateValidOutrasPartesClienteModel();
        outraspartescliente.DtNasc = null;
        var auditorQuem = 123;
        _mockOutrasPartesClienteFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFOutrasPartesCliente.Object);
        _mockFOutrasPartesCliente.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _outraspartesclienteWriter.WriteAsync(outraspartescliente, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFOutrasPartesCliente.VerifySet(x => x.FDtNasc = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var outraspartescliente = CreateValidOutrasPartesClienteModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockOutrasPartesClienteFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _outraspartesclienteWriter.WriteAsync(outraspartescliente, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var outraspartescliente = CreateValidOutrasPartesClienteModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockOutrasPartesClienteFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFOutrasPartesCliente.Object);
        _mockFOutrasPartesCliente.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _outraspartesclienteWriter.WriteAsync(outraspartescliente, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var outraspartesclienteResponse = new OutrasPartesClienteResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockOutrasPartesClienteFactory.Setup(x => x.DeleteAsync(operadorId, outraspartesclienteResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _outraspartesclienteWriter.Delete(outraspartesclienteResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockOutrasPartesClienteFactory.Verify(x => x.DeleteAsync(operadorId, outraspartesclienteResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var outraspartesclienteResponse = new OutrasPartesClienteResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockOutrasPartesClienteFactory.Setup(x => x.DeleteAsync(operadorId, outraspartesclienteResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _outraspartesclienteWriter.Delete(outraspartesclienteResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var outraspartesclienteResponse = new OutrasPartesClienteResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockOutrasPartesClienteFactory.Setup(x => x.DeleteAsync(operadorId, outraspartesclienteResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _outraspartesclienteWriter.Delete(outraspartesclienteResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new OutrasPartesClienteWriter(_mockOutrasPartesClienteFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new OutrasPartesClienteWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.OutrasPartesCliente CreateValidOutrasPartesClienteModel()
    {
        return new Models.OutrasPartesCliente
        {
            Id = 0,
            Nome = "João",
            Terceirizado = false,
            ClientePrincipal = 1,
            Tipo = false,
            Sexo = false,
            DtNasc = "24/04/1975",
            CPF = "544.506.718-13",
            RG = "12.345.678-9",
            CNPJ = "93016944000138",
            InscEst = "AAAAAAAAAAAAA",
            NomeFantasia = "João",
            Endereco = "Rua das Flores, 123",
            Cidade = 1,
            CEP = "01234-567",
            Bairro = "Centro",
            Fone = "(11) 99999-9999",
            Fax = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            EMail = "test@email.com",
            Site = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            GUID = Guid.NewGuid().ToString(),
            Class = "A"
        };
    }
#endregion
}