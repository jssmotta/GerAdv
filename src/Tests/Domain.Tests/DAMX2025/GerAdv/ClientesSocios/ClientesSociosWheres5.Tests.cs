// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class ClientesSociosWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFClientesSociosFactory> _mockClientesSociosFactory;
    private readonly Mock<FClientesSocios> _mockFClientesSocios;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly ClientesSociosWhere _clientessociosWhere;
    public ClientesSociosWhereTests()
    {
        _mockClientesSociosFactory = new Mock<IFClientesSociosFactory>();
        _mockFClientesSocios = new Mock<FClientesSocios>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _clientessociosWhere = new ClientesSociosWhere(_mockClientesSociosFactory.Object);
    }

    public void Dispose()
    {
        _mockClientesSociosFactory?.Reset();
        _mockFClientesSocios?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
        };
    }

    private void SetupMockFClientesSocios(bool? SomenteRepresentante = false, int? Idade = 1, bool? IsRepresentanteLegal = true, string? Qualificacao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", bool? Sexo = false, string? DtNasc = "24/04/1975", string? Nome = "João", string? Site = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string? RepresentanteLegal = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", int? Cliente = 1, string? Endereco = "Rua das Flores, 123", string? Bairro = "Centro", string? CEP = "01234-567", int? Cidade = 1, string? RG = "12.345.678-9", string? CPF = "544.506.718-13", string? Fone = "(11) 99999-9999", string? Participacao = "AAAAAAAA", string? Cargo = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string? EMail = "test@email.com", string? Obs = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string? CNH = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string? DataContrato = "24/04/1975", string? CNPJ = "93016944000138", string? InscEst = "AAAAAAAAAAAAA", string? SocioEmpresaAdminNome = "João", string? EnderecoSocio = "Rua das Flores, 123", string? BairroSocio = "Centro", string? CEPSocio = "01234-567", int? CidadeSocio = 1, string? RGDataExp = "24/04/1975", bool? SocioEmpresaAdminSomente = true, bool? Tipo = false, string? Fax = "(11) 88888-9999", string? Class = "A")
    {
        _mockFClientesSocios.Setup(f => f.FSomenteRepresentante).Returns(SomenteRepresentante ?? false);
        _mockFClientesSocios.Setup(f => f.FIdade).Returns(Idade ?? 0);
        _mockFClientesSocios.Setup(f => f.FIsRepresentanteLegal).Returns(IsRepresentanteLegal ?? false);
        _mockFClientesSocios.Setup(f => f.FQualificacao).Returns(Qualificacao ?? string.Empty);
        _mockFClientesSocios.Setup(f => f.FSexo).Returns(Sexo ?? false);
        _mockFClientesSocios.Setup(f => f.FDtNasc).Returns(DtNasc ?? string.Empty);
        _mockFClientesSocios.Setup(f => f.FNome).Returns(Nome ?? string.Empty);
        _mockFClientesSocios.Setup(f => f.FSite).Returns(Site ?? string.Empty);
        _mockFClientesSocios.Setup(f => f.FRepresentanteLegal).Returns(RepresentanteLegal ?? string.Empty);
        _mockFClientesSocios.Setup(f => f.FCliente).Returns(Cliente ?? 0);
        _mockFClientesSocios.Setup(f => f.FEndereco).Returns(Endereco ?? string.Empty);
        _mockFClientesSocios.Setup(f => f.FBairro).Returns(Bairro ?? string.Empty);
        _mockFClientesSocios.Setup(f => f.FCEP).Returns(CEP ?? string.Empty);
        _mockFClientesSocios.Setup(f => f.FCidade).Returns(Cidade ?? 0);
        _mockFClientesSocios.Setup(f => f.FRG).Returns(RG ?? string.Empty);
        _mockFClientesSocios.Setup(f => f.FCPF).Returns(CPF ?? string.Empty);
        _mockFClientesSocios.Setup(f => f.FFone).Returns(Fone ?? string.Empty);
        _mockFClientesSocios.Setup(f => f.FParticipacao).Returns(Participacao ?? string.Empty);
        _mockFClientesSocios.Setup(f => f.FCargo).Returns(Cargo ?? string.Empty);
        _mockFClientesSocios.Setup(f => f.FEMail).Returns(EMail ?? string.Empty);
        _mockFClientesSocios.Setup(f => f.FObs).Returns(Obs ?? string.Empty);
        _mockFClientesSocios.Setup(f => f.FCNH).Returns(CNH ?? string.Empty);
        _mockFClientesSocios.Setup(f => f.FDataContrato).Returns(DataContrato ?? string.Empty);
        _mockFClientesSocios.Setup(f => f.FCNPJ).Returns(CNPJ ?? string.Empty);
        _mockFClientesSocios.Setup(f => f.FInscEst).Returns(InscEst ?? string.Empty);
        _mockFClientesSocios.Setup(f => f.FSocioEmpresaAdminNome).Returns(SocioEmpresaAdminNome ?? string.Empty);
        _mockFClientesSocios.Setup(f => f.FEnderecoSocio).Returns(EnderecoSocio ?? string.Empty);
        _mockFClientesSocios.Setup(f => f.FBairroSocio).Returns(BairroSocio ?? string.Empty);
        _mockFClientesSocios.Setup(f => f.FCEPSocio).Returns(CEPSocio ?? string.Empty);
        _mockFClientesSocios.Setup(f => f.FCidadeSocio).Returns(CidadeSocio ?? 0);
        _mockFClientesSocios.Setup(f => f.FRGDataExp).Returns(RGDataExp ?? string.Empty);
        _mockFClientesSocios.Setup(f => f.FSocioEmpresaAdminSomente).Returns(SocioEmpresaAdminSomente ?? false);
        _mockFClientesSocios.Setup(f => f.FTipo).Returns(Tipo ?? false);
        _mockFClientesSocios.Setup(f => f.FFax).Returns(Fax ?? string.Empty);
        _mockFClientesSocios.Setup(f => f.FClass).Returns(Class ?? string.Empty);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFClientesSociosFactory>();
        // Act
        var clientessociosWhere = new ClientesSociosWhere(mockFactory.Object);
        // Assert
        clientessociosWhere.Should().NotBeNull();
        clientessociosWhere.Should().BeAssignableTo<IClientesSociosWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFClientesSociosFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new ClientesSociosWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnClientesSociosResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFClientesSocios();
        _mockClientesSociosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFClientesSocios.Object);
        // Act
        var result = _clientessociosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.SomenteRepresentante.Should().Be(false);
        result.Idade.Should().Be(1);
        result.IsRepresentanteLegal.Should().Be(true);
        result.Qualificacao.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Sexo.Should().Be(false);
        result.DtNasc.Should().Be("24/04/1975");
        result.Nome.Should().Be("João");
        result.Site.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.RepresentanteLegal.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Cliente.Should().Be(1);
        result.Endereco.Should().Be("Rua das Flores, 123");
        result.Bairro.Should().Be("Centro");
        result.CEP.Should().Be("01234-567");
        result.Cidade.Should().Be(1);
        result.RG.Should().Be("12.345.678-9");
        result.CPF.Should().Be("544.506.718-13");
        result.Fone.Should().Be("(11) 99999-9999");
        result.Participacao.Should().Be("AAAAAAAA");
        result.Cargo.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.EMail.Should().Be("test@email.com");
        result.Obs.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.CNH.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.DataContrato.Should().Be("24/04/1975");
        result.CNPJ.Should().Be("93016944000138");
        result.InscEst.Should().Be("AAAAAAAAAAAAA");
        result.SocioEmpresaAdminNome.Should().Be("João");
        result.EnderecoSocio.Should().Be("Rua das Flores, 123");
        result.BairroSocio.Should().Be("Centro");
        result.CEPSocio.Should().Be("01234-567");
        result.CidadeSocio.Should().Be(1);
        result.RGDataExp.Should().Be("24/04/1975");
        result.SocioEmpresaAdminSomente.Should().Be(true);
        result.Tipo.Should().Be(false);
        result.Fax.Should().Be("(11) 88888-9999");
        result.Class.Should().Be("A");
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFClientesSocios(SomenteRepresentante: null, Idade: null, IsRepresentanteLegal: null, Qualificacao: null, Sexo: null, DtNasc: null, Nome: null, Site: null, RepresentanteLegal: null, Cliente: null, Endereco: null, Bairro: null, CEP: null, Cidade: null, RG: null, CPF: null, Fone: null, Participacao: null, Cargo: null, EMail: null, Obs: null, CNH: null, DataContrato: null, CNPJ: null, InscEst: null, SocioEmpresaAdminNome: null, EnderecoSocio: null, BairroSocio: null, CEPSocio: null, CidadeSocio: null, RGDataExp: null, SocioEmpresaAdminSomente: null, Tipo: null, Fax: null, Class: null);
        _mockClientesSociosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFClientesSocios.Object);
        // Act
        var result = _clientessociosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.SomenteRepresentante.Should().Be(false);
        result.Idade.Should().Be(0);
        result.IsRepresentanteLegal.Should().Be(false);
        result.Qualificacao.Should().Be(string.Empty);
        result.Sexo.Should().Be(false);
        result.DtNasc.Should().Be(string.Empty);
        result.Nome.Should().Be(string.Empty);
        result.Site.Should().Be(string.Empty);
        result.RepresentanteLegal.Should().Be(string.Empty);
        result.Cliente.Should().Be(0);
        result.Endereco.Should().Be(string.Empty);
        result.Bairro.Should().Be(string.Empty);
        result.CEP.Should().Be(string.Empty);
        result.Cidade.Should().Be(0);
        result.RG.Should().Be(string.Empty);
        result.CPF.Should().Be(string.Empty);
        result.Fone.Should().Be(string.Empty);
        result.Participacao.Should().Be(string.Empty);
        result.Cargo.Should().Be(string.Empty);
        result.EMail.Should().Be(string.Empty);
        result.Obs.Should().Be(string.Empty);
        result.CNH.Should().Be(string.Empty);
        result.DataContrato.Should().Be(string.Empty);
        result.CNPJ.Should().Be(string.Empty);
        result.InscEst.Should().Be(string.Empty);
        result.SocioEmpresaAdminNome.Should().Be(string.Empty);
        result.EnderecoSocio.Should().Be(string.Empty);
        result.BairroSocio.Should().Be(string.Empty);
        result.CEPSocio.Should().Be(string.Empty);
        result.CidadeSocio.Should().Be(0);
        result.RGDataExp.Should().Be(string.Empty);
        result.SocioEmpresaAdminSomente.Should().Be(false);
        result.Tipo.Should().Be(false);
        result.Fax.Should().Be(string.Empty);
        result.Class.Should().Be(string.Empty);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFClientesSocios();
        _mockClientesSociosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFClientesSocios.Object);
        // Act
        var result = _clientessociosWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockClientesSociosFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFClientesSocios();
        _mockClientesSociosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFClientesSocios.Object);
        // Act
        var result = _clientessociosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockClientesSociosFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFClientesSocios();
        _mockClientesSociosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFClientesSocios.Object);
        // Act
        var result = _clientessociosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockClientesSociosFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFClientesSocios();
        _mockClientesSociosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFClientesSocios.Object);
        // Act
        _clientessociosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockClientesSociosFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFClientesSociosInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFClientesSocios.Setup(f => f.Dispose());
        SetupMockFClientesSocios();
        _mockClientesSociosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFClientesSocios.Object);
        // Act
        _clientessociosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFClientesSocios.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockClientesSociosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _clientessociosWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFClientesSocios(SomenteRepresentante: false, Idade: 1, IsRepresentanteLegal: true, Qualificacao: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", Sexo: false, DtNasc: "24/04/1975", Nome: "João", Site: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", RepresentanteLegal: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", Cliente: 1, Endereco: "Rua das Flores, 123", Bairro: "Centro", CEP: "01234-567", Cidade: 1, RG: "12.345.678-9", CPF: "544.506.718-13", Fone: "(11) 99999-9999", Participacao: "AAAAAAAA", Cargo: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", EMail: "test@email.com", Obs: "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", CNH: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", DataContrato: "24/04/1975", CNPJ: "93016944000138", InscEst: "AAAAAAAAAAAAA", SocioEmpresaAdminNome: "João", EnderecoSocio: "Rua das Flores, 123", BairroSocio: "Centro", CEPSocio: "01234-567", CidadeSocio: 1, RGDataExp: "24/04/1975", SocioEmpresaAdminSomente: true, Tipo: false, Fax: "(11) 88888-9999", Class: "A");
        _mockClientesSociosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFClientesSocios.Object);
        // Act
        var result = _clientessociosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.SomenteRepresentante.Should().Be(false);
        result.Idade.Should().Be(1);
        result.IsRepresentanteLegal.Should().Be(true);
        result.Qualificacao.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Sexo.Should().Be(false);
        result.DtNasc.Should().Be("24/04/1975");
        result.Nome.Should().Be("João");
        result.Site.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.RepresentanteLegal.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Cliente.Should().Be(1);
        result.Endereco.Should().Be("Rua das Flores, 123");
        result.Bairro.Should().Be("Centro");
        result.CEP.Should().Be("01234-567");
        result.Cidade.Should().Be(1);
        result.RG.Should().Be("12.345.678-9");
        result.CPF.Should().Be("544.506.718-13");
        result.Fone.Should().Be("(11) 99999-9999");
        result.Participacao.Should().Be("AAAAAAAA");
        result.Cargo.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.EMail.Should().Be("test@email.com");
        result.Obs.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.CNH.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.DataContrato.Should().Be("24/04/1975");
        result.CNPJ.Should().Be("93016944000138");
        result.InscEst.Should().Be("AAAAAAAAAAAAA");
        result.SocioEmpresaAdminNome.Should().Be("João");
        result.EnderecoSocio.Should().Be("Rua das Flores, 123");
        result.BairroSocio.Should().Be("Centro");
        result.CEPSocio.Should().Be("01234-567");
        result.CidadeSocio.Should().Be(1);
        result.RGDataExp.Should().Be("24/04/1975");
        result.SocioEmpresaAdminSomente.Should().Be(true);
        result.Tipo.Should().Be(false);
        result.Fax.Should().Be("(11) 88888-9999");
        result.Class.Should().Be("A");
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "Nome = @{DBClientesSociosDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBClientesSociosDicInfo.CampoNome}", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"),
        };
        SetupMockFClientesSocios();
        _mockClientesSociosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFClientesSocios.Object);
        // Act
        _clientessociosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockClientesSociosFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBClientesSociosDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#region DateTime Tests
    [Fact]
    public void Read_WithValidDateDtNascFields_ShouldParseAndSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var testDate = "31/12/2024";
        SetupMockFClientesSocios(DtNasc: testDate);
        _mockClientesSociosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFClientesSocios.Object);
        // Act
        var result = _clientessociosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtNasc.Should().Be("31/12/2024");
    }

    [Fact]
    public void Read_WithInvalidDateDtNascStrings_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFClientesSocios(DtNasc: "invalid-date");
        _mockClientesSociosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFClientesSocios.Object);
        // Act
        var result = _clientessociosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtNasc.Should().Be("");
    }

    [Fact]
    public void Read_WithNullDateDtNascFields_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFClientesSocios(DtNasc: null);
        _mockClientesSociosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFClientesSocios.Object);
        // Act
        var result = _clientessociosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtNasc.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("31/12/2024")]
    [InlineData("2025/01/01T23:59:59")]
    [InlineData("2000-02-29")] // Leap year
    [InlineData("2025/01/02T14:30:45.123")]
    public void Read_WithValidDateDtNascFormats_ShouldParseCorrectly(string dateString)
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedDate = DateTime.Parse(dateString);
        SetupMockFClientesSocios(DtNasc: dateString);
        _mockClientesSociosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFClientesSocios.Object);
        // Act
        var result = _clientessociosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtNasc.Should().Be(dateString);
    }

    [Fact]
    public void Read_WithValidDateDataContratoFields_ShouldParseAndSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var testDate = "01/01/2025";
        SetupMockFClientesSocios(DataContrato: testDate);
        _mockClientesSociosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFClientesSocios.Object);
        // Act
        var result = _clientessociosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataContrato.Should().Be("01/01/2025");
    }

    [Fact]
    public void Read_WithInvalidDateDataContratoStrings_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFClientesSocios(DataContrato: "invalid-date");
        _mockClientesSociosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFClientesSocios.Object);
        // Act
        var result = _clientessociosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataContrato.Should().Be("");
    }

    [Fact]
    public void Read_WithNullDateDataContratoFields_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFClientesSocios(DataContrato: null);
        _mockClientesSociosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFClientesSocios.Object);
        // Act
        var result = _clientessociosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataContrato.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("01/01/2025")]
    [InlineData("2025/01/02T23:59:59")]
    [InlineData("2000-02-29")] // Leap year
    [InlineData("2025/01/03T14:30:45.123")]
    public void Read_WithValidDateDataContratoFormats_ShouldParseCorrectly(string dateString)
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedDate = DateTime.Parse(dateString);
        SetupMockFClientesSocios(DataContrato: dateString);
        _mockClientesSociosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFClientesSocios.Object);
        // Act
        var result = _clientessociosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataContrato.Should().Be(dateString);
    }

    [Fact]
    public void Read_WithValidDateRGDataExpFields_ShouldParseAndSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var testDate = "02/01/2025";
        SetupMockFClientesSocios(RGDataExp: testDate);
        _mockClientesSociosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFClientesSocios.Object);
        // Act
        var result = _clientessociosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.RGDataExp.Should().Be("02/01/2025");
    }

    [Fact]
    public void Read_WithInvalidDateRGDataExpStrings_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFClientesSocios(RGDataExp: "invalid-date");
        _mockClientesSociosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFClientesSocios.Object);
        // Act
        var result = _clientessociosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.RGDataExp.Should().Be("");
    }

    [Fact]
    public void Read_WithNullDateRGDataExpFields_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFClientesSocios(RGDataExp: null);
        _mockClientesSociosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFClientesSocios.Object);
        // Act
        var result = _clientessociosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.RGDataExp.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("02/01/2025")]
    [InlineData("2025/01/03T23:59:59")]
    [InlineData("2000-02-29")] // Leap year
    [InlineData("2025/01/04T14:30:45.123")]
    public void Read_WithValidDateRGDataExpFormats_ShouldParseCorrectly(string dateString)
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedDate = DateTime.Parse(dateString);
        SetupMockFClientesSocios(RGDataExp: dateString);
        _mockClientesSociosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFClientesSocios.Object);
        // Act
        var result = _clientessociosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.RGDataExp.Should().Be(dateString);
    }
#endregion
#endregion
}