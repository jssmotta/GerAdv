// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class ContatoCRMViewWriterTests
{
    private readonly Mock<IFContatoCRMViewFactory> _mockContatoCRMViewFactory;
    private readonly Mock<FContatoCRMView> _mockFContatoCRMView;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly ContatoCRMViewWriter _contatocrmviewWriter;
    public ContatoCRMViewWriterTests()
    {
        _mockContatoCRMViewFactory = new Mock<IFContatoCRMViewFactory>();
        _mockFContatoCRMView = new Mock<FContatoCRMView>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _contatocrmviewWriter = new ContatoCRMViewWriter(_mockContatoCRMViewFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var contatocrmview = CreateValidContatoCRMViewModel();
        contatocrmview.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockContatoCRMViewFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFContatoCRMView.Object);
        _mockFContatoCRMView.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _contatocrmviewWriter.WriteAsync(contatocrmview, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFContatoCRMView.Object);
        _mockContatoCRMViewFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockContatoCRMViewFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFContatoCRMView.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var contatocrmview = CreateValidContatoCRMViewModel();
        contatocrmview.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockContatoCRMViewFactory.Setup(x => x.CreateFromIdAsync(contatocrmview.Id, _mockConnection.Object)).ReturnsAsync(_mockFContatoCRMView.Object);
        _mockFContatoCRMView.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _contatocrmviewWriter.WriteAsync(contatocrmview, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFContatoCRMView.Object);
        _mockContatoCRMViewFactory.Verify(x => x.CreateFromIdAsync(contatocrmview.Id, _mockConnection.Object), Times.Once);
        _mockContatoCRMViewFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFContatoCRMView.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var contatocrmview = CreateValidContatoCRMViewModel();
        var auditorQuem = 99;
        _mockContatoCRMViewFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFContatoCRMView.Object);
        _mockFContatoCRMView.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _contatocrmviewWriter.WriteAsync(contatocrmview, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFContatoCRMView.Object);
        _mockFContatoCRMView.VerifySet(x => x.FCGUID = contatocrmview.CGUID, Times.Once);
        _mockFContatoCRMView.VerifySet(x => x.FData = contatocrmview.Data, Times.Once);
        _mockFContatoCRMView.VerifySet(x => x.FIP = contatocrmview.IP, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var contatocrmview = CreateValidContatoCRMViewModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockContatoCRMViewFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _contatocrmviewWriter.WriteAsync(contatocrmview, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var contatocrmview = CreateValidContatoCRMViewModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockContatoCRMViewFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFContatoCRMView.Object);
        _mockFContatoCRMView.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _contatocrmviewWriter.WriteAsync(contatocrmview, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var contatocrmviewResponse = new ContatoCRMViewResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockContatoCRMViewFactory.Setup(x => x.DeleteAsync(operadorId, contatocrmviewResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _contatocrmviewWriter.Delete(contatocrmviewResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockContatoCRMViewFactory.Verify(x => x.DeleteAsync(operadorId, contatocrmviewResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var contatocrmviewResponse = new ContatoCRMViewResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockContatoCRMViewFactory.Setup(x => x.DeleteAsync(operadorId, contatocrmviewResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _contatocrmviewWriter.Delete(contatocrmviewResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var contatocrmviewResponse = new ContatoCRMViewResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockContatoCRMViewFactory.Setup(x => x.DeleteAsync(operadorId, contatocrmviewResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _contatocrmviewWriter.Delete(contatocrmviewResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new ContatoCRMViewWriter(_mockContatoCRMViewFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new ContatoCRMViewWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.ContatoCRMView CreateValidContatoCRMViewModel()
    {
        return new Models.ContatoCRMView
        {
            Id = 0,
            CGUID = Guid.NewGuid().ToString(),
            Data = "27/05/2022",
            IP = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
    }
#endregion
}