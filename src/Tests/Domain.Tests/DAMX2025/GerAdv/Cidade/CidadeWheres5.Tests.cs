// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class CidadeWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFCidadeFactory> _mockCidadeFactory;
    private readonly Mock<FCidade> _mockFCidade;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly CidadeWhere _cidadeWhere;
    public CidadeWhereTests()
    {
        _mockCidadeFactory = new Mock<IFCidadeFactory>();
        _mockFCidade = new Mock<FCidade>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _cidadeWhere = new CidadeWhere(_mockCidadeFactory.Object);
    }

    public void Dispose()
    {
        _mockCidadeFactory?.Reset();
        _mockFCidade?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
        };
    }

    private void SetupMockFCidade(string? DDD = "AAAAAAAA", bool? Top = false, bool? Comarca = true, bool? Capital = false, string? Nome = "João", int? UF = 1, string? Sigla = "AAAAAAAA")
    {
        _mockFCidade.Setup(f => f.FDDD).Returns(DDD ?? string.Empty);
        _mockFCidade.Setup(f => f.FTop).Returns(Top ?? false);
        _mockFCidade.Setup(f => f.FComarca).Returns(Comarca ?? false);
        _mockFCidade.Setup(f => f.FCapital).Returns(Capital ?? false);
        _mockFCidade.Setup(f => f.FNome).Returns(Nome ?? string.Empty);
        _mockFCidade.Setup(f => f.FUF).Returns(UF ?? 0);
        _mockFCidade.Setup(f => f.FSigla).Returns(Sigla ?? string.Empty);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFCidadeFactory>();
        // Act
        var cidadeWhere = new CidadeWhere(mockFactory.Object);
        // Assert
        cidadeWhere.Should().NotBeNull();
        cidadeWhere.Should().BeAssignableTo<ICidadeWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFCidadeFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new CidadeWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnCidadeResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFCidade();
        _mockCidadeFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFCidade.Object);
        // Act
        var result = _cidadeWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.DDD.Should().Be("AAAAAAAA");
        result.Top.Should().Be(false);
        result.Comarca.Should().Be(true);
        result.Capital.Should().Be(false);
        result.Nome.Should().Be("João");
        result.UF.Should().Be(1);
        result.Sigla.Should().Be("AAAAAAAA");
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFCidade(DDD: null, Top: null, Comarca: null, Capital: null, Nome: null, UF: null, Sigla: null);
        _mockCidadeFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFCidade.Object);
        // Act
        var result = _cidadeWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DDD.Should().Be(string.Empty);
        result.Top.Should().Be(false);
        result.Comarca.Should().Be(false);
        result.Capital.Should().Be(false);
        result.Nome.Should().Be(string.Empty);
        result.UF.Should().Be(0);
        result.Sigla.Should().Be(string.Empty);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFCidade();
        _mockCidadeFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFCidade.Object);
        // Act
        var result = _cidadeWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockCidadeFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFCidade();
        _mockCidadeFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFCidade.Object);
        // Act
        var result = _cidadeWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockCidadeFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFCidade();
        _mockCidadeFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFCidade.Object);
        // Act
        var result = _cidadeWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockCidadeFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFCidade();
        _mockCidadeFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFCidade.Object);
        // Act
        _cidadeWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockCidadeFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFCidadeInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFCidade.Setup(f => f.Dispose());
        SetupMockFCidade();
        _mockCidadeFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFCidade.Object);
        // Act
        _cidadeWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFCidade.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockCidadeFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _cidadeWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFCidade(DDD: "AAAAAAAA", Top: false, Comarca: true, Capital: false, Nome: "João", UF: 1, Sigla: "AAAAAAAA");
        _mockCidadeFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFCidade.Object);
        // Act
        var result = _cidadeWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.DDD.Should().Be("AAAAAAAA");
        result.Top.Should().Be(false);
        result.Comarca.Should().Be(true);
        result.Capital.Should().Be(false);
        result.Nome.Should().Be("João");
        result.UF.Should().Be(1);
        result.Sigla.Should().Be("AAAAAAAA");
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "Nome = @{DBCidadeDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBCidadeDicInfo.CampoNome}", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"),
        };
        SetupMockFCidade();
        _mockCidadeFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFCidade.Object);
        // Act
        _cidadeWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockCidadeFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBCidadeDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }
#region DateTime Tests
#endregion
#endregion
}