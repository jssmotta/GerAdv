// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class RitoWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFRitoFactory> _mockRitoFactory;
    private readonly Mock<FRito> _mockFRito;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly RitoWhere _ritoWhere;
    public RitoWhereTests()
    {
        _mockRitoFactory = new Mock<IFRitoFactory>();
        _mockFRito = new Mock<FRito>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _ritoWhere = new RitoWhere(_mockRitoFactory.Object);
    }

    public void Dispose()
    {
        _mockRitoFactory?.Reset();
        _mockFRito?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "AAAAAAAAAAAAAAAAAA")
        };
    }

    private void SetupMockFRito(string? Descricao = "AAAAAAAAAAAAAAAAAA", bool? Top = false)
    {
        _mockFRito.Setup(f => f.FDescricao).Returns(Descricao ?? string.Empty);
        _mockFRito.Setup(f => f.FTop).Returns(Top ?? false);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFRitoFactory>();
        // Act
        var ritoWhere = new RitoWhere(mockFactory.Object);
        // Assert
        ritoWhere.Should().NotBeNull();
        ritoWhere.Should().BeAssignableTo<IRitoWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFRitoFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new RitoWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnRitoResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFRito();
        _mockRitoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFRito.Object);
        // Act
        var result = _ritoWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.Descricao.Should().Be("AAAAAAAAAAAAAAAAAA");
        result.Top.Should().Be(false);
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFRito(Descricao: null, Top: null);
        _mockRitoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFRito.Object);
        // Act
        var result = _ritoWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Descricao.Should().Be(string.Empty);
        result.Top.Should().Be(false);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFRito();
        _mockRitoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFRito.Object);
        // Act
        var result = _ritoWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockRitoFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFRito();
        _mockRitoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFRito.Object);
        // Act
        var result = _ritoWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockRitoFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFRito();
        _mockRitoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFRito.Object);
        // Act
        var result = _ritoWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockRitoFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFRito();
        _mockRitoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFRito.Object);
        // Act
        _ritoWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockRitoFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFRitoInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFRito.Setup(f => f.Dispose());
        SetupMockFRito();
        _mockRitoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFRito.Object);
        // Act
        _ritoWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFRito.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockRitoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _ritoWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFRito(Descricao: "AAAAAAAAAAAAAAAAAA", Top: false);
        _mockRitoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFRito.Object);
        // Act
        var result = _ritoWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.Descricao.Should().Be("AAAAAAAAAAAAAAAAAA");
        result.Top.Should().Be(false);
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "Descricao = @{DBRitoDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBRitoDicInfo.CampoNome}", "AAAAAAAAAAAAAAAAAA"),
        };
        SetupMockFRito();
        _mockRitoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFRito.Object);
        // Act
        _ritoWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockRitoFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBRitoDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }
#region DateTime Tests
#endregion
#endregion
}