// 100% auto-generated by Source Genesys Core
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming 1
public partial class DBPontoVirtual
{
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool pFldFHoraEntrada, pFldFHoraSaida, pFldFOperador, pFldFKey;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected int m_FOperador;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected string? m_FKey;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected DateTime? m_FHoraEntrada, m_FHoraSaida;
    public virtual string? FHoraEntrada
    {
        // fdDate2 TRACE CODE
        get => $"{m_FHoraEntrada:HH:mm}";
        set
        {
            if (string.IsNullOrEmpty(value))
            {
                pFldFHoraEntrada = pFldFHoraEntrada || m_FHoraEntrada != null;
                m_FHoraEntrada = null;
                return;
            }

            if (value.IsEquals(DevourerOne.PNow))
            {
                pFldFHoraEntrada = true;
                m_FHoraEntrada = DevourerOne.DateTimeUtc;
            }
            else
            {
                if (value.IsEquals($"{m_FHoraEntrada:HH:mm}"))
                    return;
                if (!DateTime.TryParse(value, out var dateTime))
                    return;
                pFldFHoraEntrada = true;
                m_FHoraEntrada = dateTime;
            }
        }
    }

    public virtual string? FHoraSaida
    {
        // fdDate2 TRACE CODE
        get => $"{m_FHoraSaida:HH:mm}";
        set
        {
            if (string.IsNullOrEmpty(value))
            {
                pFldFHoraSaida = pFldFHoraSaida || m_FHoraSaida != null;
                m_FHoraSaida = null;
                return;
            }

            if (value.IsEquals(DevourerOne.PNow))
            {
                pFldFHoraSaida = true;
                m_FHoraSaida = DevourerOne.DateTimeUtc;
            }
            else
            {
                if (value.IsEquals($"{m_FHoraSaida:HH:mm}"))
                    return;
                if (!DateTime.TryParse(value, out var dateTime))
                    return;
                pFldFHoraSaida = true;
                m_FHoraSaida = dateTime;
            }
        }
    }

    public virtual int FOperador
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FOperador;
        set
        {
            pFldFOperador = pFldFOperador || value != m_FOperador;
            if (pFldFOperador)
                m_FOperador = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(23, ErrorMessage = "A propriedade FKey da tabela PontoVirtual deve ter no máximo 23 caracteres.")]
    public virtual string? FKey
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FKey ?? string.Empty;
        set
        {
            pFldFKey = pFldFKey || !(m_FKey ?? string.Empty).Equals(value);
            if (pFldFKey)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FKey = trimmed.Length > 23 ? trimmed.AsSpan(0, 23).ToString() : trimmed;
            }
        }
    }

    public int IQuemCad() => 0;
    public int IQuemAtu() => 0;
    [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public void SetAuditor(int usuarioId)
    {
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITabelaName() => PTabelaNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoCodigo() => CampoCodigo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoNome() => CampoNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string IPrefixo() => PTabelaPrefixo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITypeFieldCode() => "int";
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IdIsIdentity() => false;
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => false;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => false;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetID() => ID;
}