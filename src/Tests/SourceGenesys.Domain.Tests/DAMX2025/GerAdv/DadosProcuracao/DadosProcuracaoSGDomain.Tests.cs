// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBDadosProcuracao - Nome da classe (ex: DBClientes)
/// DadosProcuracao - Nome da tabela (ex: Clientes)
/// prc - Prefixo dos campos (ex: cli)
/// prcCodigo - Nome do campo código (ex: cliCodigo)
///  - Nome do campo nome (ex: cliNome)
/// DBDadosProcuracao.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBDadosProcuracaoTests : IDisposable
{
    private readonly DBDadosProcuracao _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBDadosProcuracaoTests()
    {
        _instance = new DBDadosProcuracao();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("prcCodigo", typeof(int));
        dt.Columns.Add("prcQuemCad", typeof(int));
        dt.Columns.Add("prcDtCad", typeof(DateTime));
        dt.Columns.Add("prcQuemAtu", typeof(int));
        dt.Columns.Add("prcDtAtu", typeof(DateTime));
        dt.Columns.Add("prcVisto", typeof(bool));
        dt.Columns.Add("prcCliente", typeof(int));
        dt.Columns.Add("prcGUID", typeof(string));
        dt.Columns.Add("prcEstadoCivil", typeof(string));
        dt.Columns.Add("prcNacionalidade", typeof(string));
        dt.Columns.Add("prcProfissao", typeof(string));
        dt.Columns.Add("prcCTPS", typeof(string));
        dt.Columns.Add("prcPisPasep", typeof(string));
        dt.Columns.Add("prcRemuneracao", typeof(string));
        dt.Columns.Add("prcObjeto", typeof(string));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("DadosProcuracao", DBDadosProcuracao.PTabelaNome);
        Assert.Equal(" DadosProcuracao.* ", DBDadosProcuracao.CamposSqlX);
        Assert.Equal("prcCodigo", DBDadosProcuracao.CampoCodigo);
        Assert.Equal("", DBDadosProcuracao.CampoNome);
        Assert.Equal("prc", DBDadosProcuracao.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBDadosProcuracao();
        Assert.Equal(0, instance.ID);
        Assert.Equal("DadosProcuracao", instance.ITabelaName());
        Assert.Equal("prc", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBDadosProcuracao((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBDadosProcuracao((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["prcCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBDadosProcuracao(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("DadosProcuracao", cadastro.ITabelaName());
        Assert.Equal("prcCodigo", cadastro.ICampoCodigo());
        Assert.Equal("", cadastro.ICampoNome());
        Assert.Equal("prc", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBDadosProcuracao.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBDadosProcuracao.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBDadosProcuracao.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBDadosProcuracao();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBDadosProcuracao();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnFalse()
    {
        Assert.False(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cliente_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCliente = value;
        Assert.Equal(value, _instance.FCliente);
    }

    [Fact]
    public void Cliente_DefaultValue_ShouldBeZero()
    {
        var instance = new DBDadosProcuracao();
        Assert.Equal(0, instance.FCliente);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void GUID_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FGUID = input;
        Assert.Equal(expected, _instance.FGUID);
    }

    [Fact]
    public void GUID_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FGUID = longString;
        Assert.True(_instance.FGUID.Length <= 100);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void EstadoCivil_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FEstadoCivil = input;
        Assert.Equal(expected, _instance.FEstadoCivil);
    }

    [Fact]
    public void EstadoCivil_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FEstadoCivil = longString;
        Assert.True(_instance.FEstadoCivil.Length <= 100);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Nacionalidade_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNacionalidade = input;
        Assert.Equal(expected, _instance.FNacionalidade);
    }

    [Fact]
    public void Nacionalidade_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FNacionalidade = longString;
        Assert.True(_instance.FNacionalidade.Length <= 100);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Profissao_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FProfissao = input;
        Assert.Equal(expected, _instance.FProfissao);
    }

    [Fact]
    public void Profissao_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FProfissao = longString;
        Assert.True(_instance.FProfissao.Length <= 100);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void CTPS_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FCTPS = input;
        Assert.Equal(expected, _instance.FCTPS);
    }

    [Fact]
    public void CTPS_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FCTPS = longString;
        Assert.True(_instance.FCTPS.Length <= 100);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void PisPasep_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FPisPasep = input;
        Assert.Equal(expected, _instance.FPisPasep);
    }

    [Fact]
    public void PisPasep_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FPisPasep = longString;
        Assert.True(_instance.FPisPasep.Length <= 100);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Remuneracao_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FRemuneracao = input;
        Assert.Equal(expected, _instance.FRemuneracao);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Objeto_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FObjeto = input;
        Assert.Equal(expected, _instance.FObjeto);
    }

    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}