// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBOperadores - Nome da classe (ex: DBClientes)
/// Operadores - Nome da tabela (ex: Clientes)
/// oper - Prefixo dos campos (ex: cli)
/// operCodigo - Nome do campo código (ex: cliCodigo)
/// operNome - Nome do campo nome (ex: cliNome)
/// DBOperadores.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBOperadoresTests : IDisposable
{
    private readonly DBOperadores _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBOperadoresTests()
    {
        _instance = new DBOperadores();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("operCodigo", typeof(int));
        dt.Columns.Add("operQuemCad", typeof(int));
        dt.Columns.Add("operDtCad", typeof(DateTime));
        dt.Columns.Add("operQuemAtu", typeof(int));
        dt.Columns.Add("operDtAtu", typeof(DateTime));
        dt.Columns.Add("operVisto", typeof(bool));
        dt.Columns.Add("operEnviado", typeof(string));
        dt.Columns.Add("operCasa", typeof(string));
        dt.Columns.Add("operCasaID", typeof(int));
        dt.Columns.Add("operCasaCodigo", typeof(int));
        dt.Columns.Add("operIsNovo", typeof(string));
        dt.Columns.Add("operCliente", typeof(int));
        dt.Columns.Add("operGrupo", typeof(int));
        dt.Columns.Add("operNome", typeof(string));
        dt.Columns.Add("operEMail", typeof(string));
        dt.Columns.Add("operSenha", typeof(string));
        dt.Columns.Add("operAtivado", typeof(string));
        dt.Columns.Add("operAtualizarSenha", typeof(string));
        dt.Columns.Add("operSenha256", typeof(string));
        dt.Columns.Add("operSuporteSenha256", typeof(string));
        dt.Columns.Add("operSuporteMaxAge", typeof(DateTime));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("Operadores", DBOperadores.PTabelaNome);
        Assert.Equal(" Operadores.* ", DBOperadores.CamposSqlX);
        Assert.Equal("operCodigo", DBOperadores.CampoCodigo);
        Assert.Equal("operNome", DBOperadores.CampoNome);
        Assert.Equal("oper", DBOperadores.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBOperadores();
        Assert.Equal(0, instance.ID);
        Assert.Equal("Operadores", instance.ITabelaName());
        Assert.Equal("oper", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBOperadores((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBOperadores((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["operCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBOperadores(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("Operadores", cadastro.ITabelaName());
        Assert.Equal("operCodigo", cadastro.ICampoCodigo());
        Assert.Equal("operNome", cadastro.ICampoNome());
        Assert.Equal("oper", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBOperadores.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBOperadores.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBOperadores.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBOperadores();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBOperadores();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnTrue()
    {
        Assert.True(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Enviado_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FEnviado = value;
        Assert.Equal(value, _instance.FEnviado);
    }

    [Fact]
    public void Enviado_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBOperadores();
        Assert.False(instance.FEnviado);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Enviado_ShouldAcceptIntegerValues(int value)
{
    _instance.FEnviado = value;
    Assert.Equal(value, _instance.FEnviado);
}

[Fact]
public void Enviado_DefaultValue_ShouldBeZero()
{
    var instance = new DBOperadores();
    Assert.Equal(0, instance.Enviado);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Enviado_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FEnviado = dateString;
    Assert.Equal(dateString, _instance.FEnviado);
}

[Fact]
public void Enviado_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBOperadores();
    Assert.Equal(string.Empty, instance.Enviado);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Enviado_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FEnviado = input;
        Assert.Equal(expected, _instance.FEnviado);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FEnviado = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Enviado_ValidEmail_ShouldAccept(string email)
{
    _instance.FEnviado = email;
    Assert.Equal(email, _instance.FEnviado);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Enviado_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FEnviado = email);
}
*/
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Casa_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FCasa = value;
        Assert.Equal(value, _instance.FCasa);
    }

    [Fact]
    public void Casa_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBOperadores();
        Assert.False(instance.FCasa);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Casa_ShouldAcceptIntegerValues(int value)
{
    _instance.FCasa = value;
    Assert.Equal(value, _instance.FCasa);
}

[Fact]
public void Casa_DefaultValue_ShouldBeZero()
{
    var instance = new DBOperadores();
    Assert.Equal(0, instance.Casa);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Casa_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FCasa = dateString;
    Assert.Equal(dateString, _instance.FCasa);
}

[Fact]
public void Casa_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBOperadores();
    Assert.Equal(string.Empty, instance.Casa);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Casa_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FCasa = input;
        Assert.Equal(expected, _instance.FCasa);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FCasa = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Casa_ValidEmail_ShouldAccept(string email)
{
    _instance.FCasa = email;
    Assert.Equal(email, _instance.FCasa);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Casa_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FCasa = email);
}
*/
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void CasaID_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCasaID = value;
        Assert.Equal(value, _instance.FCasaID);
    }

    [Fact]
    public void CasaID_DefaultValue_ShouldBeZero()
    {
        var instance = new DBOperadores();
        Assert.Equal(0, instance.FCasaID);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void CasaCodigo_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCasaCodigo = value;
        Assert.Equal(value, _instance.FCasaCodigo);
    }

    [Fact]
    public void CasaCodigo_DefaultValue_ShouldBeZero()
    {
        var instance = new DBOperadores();
        Assert.Equal(0, instance.FCasaCodigo);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void IsNovo_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FIsNovo = value;
        Assert.Equal(value, _instance.FIsNovo);
    }

    [Fact]
    public void IsNovo_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBOperadores();
        Assert.False(instance.FIsNovo);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void IsNovo_ShouldAcceptIntegerValues(int value)
{
    _instance.FIsNovo = value;
    Assert.Equal(value, _instance.FIsNovo);
}

[Fact]
public void IsNovo_DefaultValue_ShouldBeZero()
{
    var instance = new DBOperadores();
    Assert.Equal(0, instance.IsNovo);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void IsNovo_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FIsNovo = dateString;
    Assert.Equal(dateString, _instance.FIsNovo);
}

[Fact]
public void IsNovo_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBOperadores();
    Assert.Equal(string.Empty, instance.IsNovo);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void IsNovo_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FIsNovo = input;
        Assert.Equal(expected, _instance.FIsNovo);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FIsNovo = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void IsNovo_ValidEmail_ShouldAccept(string email)
{
    _instance.FIsNovo = email;
    Assert.Equal(email, _instance.FIsNovo);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void IsNovo_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FIsNovo = email);
}
*/
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cliente_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCliente = value;
        Assert.Equal(value, _instance.FCliente);
    }

    [Fact]
    public void Cliente_DefaultValue_ShouldBeZero()
    {
        var instance = new DBOperadores();
        Assert.Equal(0, instance.FCliente);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Grupo_ShouldAcceptIntegerValues(int value)
    {
        _instance.FGrupo = value;
        Assert.Equal(value, _instance.FGrupo);
    }

    [Fact]
    public void Grupo_DefaultValue_ShouldBeZero()
    {
        var instance = new DBOperadores();
        Assert.Equal(0, instance.FGrupo);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Nome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNome = input;
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void Nome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FNome = longString;
        Assert.True(_instance.FNome.Length <= 50);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Senha_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FSenha = input;
        Assert.Equal(expected, _instance.FSenha);
    }

    [Fact]
    public void Senha_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 10 + 10);
        _instance.FSenha = longString;
        Assert.True(_instance.FSenha.Length <= 10);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Ativado_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FAtivado = value;
        Assert.Equal(value, _instance.FAtivado);
    }

    [Fact]
    public void Ativado_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBOperadores();
        Assert.False(instance.FAtivado);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Ativado_ShouldAcceptIntegerValues(int value)
{
    _instance.FAtivado = value;
    Assert.Equal(value, _instance.FAtivado);
}

[Fact]
public void Ativado_DefaultValue_ShouldBeZero()
{
    var instance = new DBOperadores();
    Assert.Equal(0, instance.Ativado);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Ativado_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FAtivado = dateString;
    Assert.Equal(dateString, _instance.FAtivado);
}

[Fact]
public void Ativado_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBOperadores();
    Assert.Equal(string.Empty, instance.Ativado);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Ativado_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FAtivado = input;
        Assert.Equal(expected, _instance.FAtivado);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FAtivado = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Ativado_ValidEmail_ShouldAccept(string email)
{
    _instance.FAtivado = email;
    Assert.Equal(email, _instance.FAtivado);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Ativado_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FAtivado = email);
}
*/
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void AtualizarSenha_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FAtualizarSenha = value;
        Assert.Equal(value, _instance.FAtualizarSenha);
    }

    [Fact]
    public void AtualizarSenha_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBOperadores();
        Assert.False(instance.FAtualizarSenha);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void AtualizarSenha_ShouldAcceptIntegerValues(int value)
{
    _instance.FAtualizarSenha = value;
    Assert.Equal(value, _instance.FAtualizarSenha);
}

[Fact]
public void AtualizarSenha_DefaultValue_ShouldBeZero()
{
    var instance = new DBOperadores();
    Assert.Equal(0, instance.AtualizarSenha);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void AtualizarSenha_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FAtualizarSenha = dateString;
    Assert.Equal(dateString, _instance.FAtualizarSenha);
}

[Fact]
public void AtualizarSenha_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBOperadores();
    Assert.Equal(string.Empty, instance.AtualizarSenha);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void AtualizarSenha_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FAtualizarSenha = input;
        Assert.Equal(expected, _instance.FAtualizarSenha);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FAtualizarSenha = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void AtualizarSenha_ValidEmail_ShouldAccept(string email)
{
    _instance.FAtualizarSenha = email;
    Assert.Equal(email, _instance.FAtualizarSenha);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void AtualizarSenha_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FAtualizarSenha = email);
}
*/
    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void SuporteMaxAge_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FSuporteMaxAge = dateString;
        Assert.Equal(dateString, _instance.FSuporteMaxAge);
    }

    [Fact]
    public void SuporteMaxAge_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBOperadores();
        Assert.Equal(string.Empty, instance.FSuporteMaxAge);
    }

    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}