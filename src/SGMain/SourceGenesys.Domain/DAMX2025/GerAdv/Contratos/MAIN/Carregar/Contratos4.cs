// 100% auto-generated by Source Genesys Core
// copyright Â© 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming 1
public partial class DBContratos
{
    public DBContratos(DataRow? dbRec)
    {
        if (dbRec is null)
            return;
        InitFromRecord(name =>
        {
            try
            {
                return dbRec[name];
            }
            catch
            {
                return DBNull.Value;
            }
        });
    }

    public DBContratos(SqlDataReader? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do Contratos: {ex.Message}", ex);
        }
    }

    private void InitFromRecord(Func<string, object?> getValue)
    {
        if (DBNull.Value.Equals(getValue(CampoCodigo)))
            return;
        ID = Convert.ToInt32(getValue(CampoCodigo));
        // Checkpoint Carregar 
        try
        {
            if (!DBNull.Value.Equals(getValue(DBContratosDicInfo.Advogado)))
                m_FAdvogado = Convert.ToInt32(getValue(DBContratosDicInfo.Advogado));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBContratosDicInfo.Avulso)))
                m_FAvulso = Convert.ToBoolean(getValue(DBContratosDicInfo.Avulso));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBContratosDicInfo.Bold)))
                m_FBold = Convert.ToBoolean(getValue(DBContratosDicInfo.Bold));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBContratosDicInfo.Cliente)))
                m_FCliente = Convert.ToInt32(getValue(DBContratosDicInfo.Cliente));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBContratosDicInfo.ClienteContrato)))
                m_FClienteContrato = Convert.ToInt32(getValue(DBContratosDicInfo.ClienteContrato));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBContratosDicInfo.DataInicio)))
                m_FDataInicio = Convert.ToDateTime(getValue(DBContratosDicInfo.DataInicio));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBContratosDicInfo.DataTermino)))
                m_FDataTermino = Convert.ToDateTime(getValue(DBContratosDicInfo.DataTermino));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBContratosDicInfo.Dia)))
                m_FDia = Convert.ToInt32(getValue(DBContratosDicInfo.Dia));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBContratosDicInfo.DtAtu)))
                m_FDtAtu = Convert.ToDateTime(getValue(DBContratosDicInfo.DtAtu));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBContratosDicInfo.DtCad)))
                m_FDtCad = Convert.ToDateTime(getValue(DBContratosDicInfo.DtCad));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBContratosDicInfo.IdExtrangeiro)))
                m_FIdExtrangeiro = Convert.ToInt32(getValue(DBContratosDicInfo.IdExtrangeiro));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBContratosDicInfo.OcultarRelatorio)))
                m_FOcultarRelatorio = Convert.ToBoolean(getValue(DBContratosDicInfo.OcultarRelatorio));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBContratosDicInfo.PercEscritorio)))
                m_FPercEscritorio = Convert.ToDecimal(getValue(DBContratosDicInfo.PercEscritorio));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBContratosDicInfo.Processo)))
                m_FProcesso = Convert.ToInt32(getValue(DBContratosDicInfo.Processo));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBContratosDicInfo.QuemAtu)))
                m_FQuemAtu = Convert.ToInt32(getValue(DBContratosDicInfo.QuemAtu));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBContratosDicInfo.QuemCad)))
                m_FQuemCad = Convert.ToInt32(getValue(DBContratosDicInfo.QuemCad));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBContratosDicInfo.Suspenso)))
                m_FSuspenso = Convert.ToBoolean(getValue(DBContratosDicInfo.Suspenso));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBContratosDicInfo.TipoCobranca)))
                m_FTipoCobranca = Convert.ToInt32(getValue(DBContratosDicInfo.TipoCobranca));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBContratosDicInfo.Valor)))
                m_FValor = Convert.ToDecimal(getValue(DBContratosDicInfo.Valor));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBContratosDicInfo.ValorConsultoria)))
                m_FValorConsultoria = Convert.ToDecimal(getValue(DBContratosDicInfo.ValorConsultoria));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBContratosDicInfo.ValorRealizavel)))
                m_FValorRealizavel = Convert.ToDecimal(getValue(DBContratosDicInfo.ValorRealizavel));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBContratosDicInfo.Visto)))
                m_FVisto = Convert.ToBoolean(getValue(DBContratosDicInfo.Visto));
        }
        catch
        {
        }

        try
        {
            m_FChaveContrato = getValue(DBContratosDicInfo.ChaveContrato)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FDOCUMENTO = getValue(DBContratosDicInfo.DOCUMENTO)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FEMail1 = getValue(DBContratosDicInfo.EMail1)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FEMail2 = getValue(DBContratosDicInfo.EMail2)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FEMail3 = getValue(DBContratosDicInfo.EMail3)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FGUID = getValue(DBContratosDicInfo.GUID)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FJuros = getValue(DBContratosDicInfo.Juros)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FMulta = getValue(DBContratosDicInfo.Multa)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FOBS = getValue(DBContratosDicInfo.OBS)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FPessoa1 = getValue(DBContratosDicInfo.Pessoa1)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FPessoa2 = getValue(DBContratosDicInfo.Pessoa2)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FPessoa3 = getValue(DBContratosDicInfo.Pessoa3)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FProtestar = getValue(DBContratosDicInfo.Protestar)?.ToString() ?? string.Empty;
        }
        catch
        {
        }
    }

    public void CarregarDadosBd(DataRow? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do Contratos: {ex.Message}", ex);
        }
    }

    public void CarregarDadosBd(SqlDataReader? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do Contratos: {ex.Message}", ex);
        }
    }
}