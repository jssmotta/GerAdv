// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
import { useState } from 'react';
import InputInput from '@/app/components/Inputs/InputInput';
import InputDate from '@/app/components/Inputs/InputDate';
import InputHora from '@/app/components/Inputs/InputHora';
import InputValor from '@/app/components/Inputs/InputValor';
import InputComboFilterYesNo from '@/app/components/Inputs/InputComboFilterYesNo';
import { FilterHandlers } from '@/app/components/Cruds/GenericFilterDialog';
import { FilterHonorariosDadosContrato } from '@/app/GerAdv_TS/HonorariosDadosContrato/Filters/HonorariosDadosContrato';
import ClientesComboBox from '@/app/GerAdv_TS/Clientes/ComboBox/Clientes';
interface UseHonorariosDadosContratoFilterProps {
  handleFetchWithFilter: (filtro?: FilterHonorariosDadosContrato | undefined | null) => Promise<void>;
}
interface UseHonorariosDadosContratoFilterReturn {
  // Estados
  showSearch: boolean;
  windowFilter: FilterHonorariosDadosContrato;
  setWindowFilter: React.Dispatch<React.SetStateAction<FilterHonorariosDadosContrato>>;
  // Handlers do Dialog
  handleSearch: () => void;
  handleCloseSearch: () => void;
  handleConfirmSearch: (filter: FilterHonorariosDadosContrato) => Promise<void>;
  // Render function
  renderInputFilters: (handlers: FilterHandlers<FilterHonorariosDadosContrato>) => React.ReactNode;
  // Utilitários
  clearFilter: () => void;
  hasActiveFilter: boolean;
}
export const useHonorariosDadosContratoFilter = ({ handleFetchWithFilter }: UseHonorariosDadosContratoFilterProps): UseHonorariosDadosContratoFilterReturn => {
  const [showSearch, setShowSearch] = useState(false);
  const [windowFilter, setWindowFilter] = useState<FilterHonorariosDadosContrato>({} as FilterHonorariosDadosContrato);
  // Handlers do Dialog
  const handleSearch = () => {
    setShowSearch(true);
    const filterWildechar = {...windowFilter, wildcardChar: '%' } as FilterHonorariosDadosContrato;
    setWindowFilter(filterWildechar);
  };
  const handleCloseSearch = () => {
    setShowSearch(false);
  };
  const handleConfirmSearch = async (filter: FilterHonorariosDadosContrato) => {
    await handleFetchWithFilter(filter);
  };
  // Função para limpar filtros
  const clearFilter = () => {
    setWindowFilter({});
    sessionStorage.removeItem(btoa('HonorariosDadosContratoFilter'));
    handleFetchWithFilter({});
  };
  // Verificar se há filtros ativos
  const hasActiveFilter = Object.values(windowFilter).some(value =>
    value !== undefined && value !== null && value !== '' && value !== -2147483648
  );
  // Função para renderizar os campos de filtro
  const renderInputFilters = (handlers: FilterHandlers<FilterHonorariosDadosContrato>) => (
  <>
  <ClientesComboBox
  name='cliente'
  dataForm={null}
  value={handlers.windowFilter?.cliente}
  setValue={(e:any) => handlers.handleComboChange(e, 'cliente')}
  className='inputSearch inputSearchComboboxTab'
  label='Clientes'
  />
  <InputComboFilterYesNo
  type='text'
  id='fixo'
  name='fixo'
  value={handlers.windowFilter?.fixo ?? -2147483648}
  onChange={handlers.handleInputChange}
  label='Fixo'
  className='inputSearch inputSearchCheckbox'
  />
  <InputComboFilterYesNo
  type='text'
  id='variavel'
  name='variavel'
  value={handlers.windowFilter?.variavel ?? -2147483648}
  onChange={handlers.handleInputChange}
  label='Variavel'
  className='inputSearch inputSearchCheckbox'
  />
  <InputValor
  type='text'
  id='percsucesso'
  name='percsucesso'
  value={handlers.windowFilter?.percsucesso ?? 0}
  onChange={handlers.handleInputValorChange}
  label='PercSucesso (igual ou começando com)'
  className='inputSearch inputSearchValor'
  />

  <InputValor
  type='text'
  id='percsucesso_end'
  name='percsucesso_end'
  value={handlers.windowFilter?.percsucesso_end ?? 0}
  disabled={handlers.windowFilter?.percsucesso != 0 ? false: true}
  onChange={handlers.handleInputValorChange}
  label='PercSucesso (até)'
  className='inputSearch inputSearchValor inputSearchValorEnd'
  />

  <InputInput
  type='text'
  id='processo'
  name='processo'
  value={handlers.windowFilter?.processo ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Processo'
  label='Processo (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='processo_end'
  name='processo_end'
  value={handlers.windowFilter?.processo_end ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Processo final'
  label='Processo final'
  disabled={handlers.windowFilter?.processo ? false: true}
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='arquivocontrato'
  name='arquivocontrato'
  value={handlers.windowFilter?.arquivocontrato ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe ArquivoContrato'
  label='ArquivoContrato'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='textocontrato'
  name='textocontrato'
  value={handlers.windowFilter?.textocontrato ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe TextoContrato'
  label='TextoContrato'
  className='inputIncNome inputSearch'
  />
  <InputValor
  type='text'
  id='valorfixo'
  name='valorfixo'
  value={handlers.windowFilter?.valorfixo ?? 0}
  onChange={handlers.handleInputValorChange}
  label='ValorFixo (igual ou começando com)'
  className='inputSearch inputSearchValor'
  />

  <InputValor
  type='text'
  id='valorfixo_end'
  name='valorfixo_end'
  value={handlers.windowFilter?.valorfixo_end ?? 0}
  disabled={handlers.windowFilter?.valorfixo != 0 ? false: true}
  onChange={handlers.handleInputValorChange}
  label='ValorFixo (até)'
  className='inputSearch inputSearchValor inputSearchValorEnd'
  />

  <InputInput
  type='text'
  id='observacao'
  name='observacao'
  value={handlers.windowFilter?.observacao ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Observacao'
  label='Observacao'
  className='inputIncNome inputSearch'
  />
  <InputDate
  type='text'
  id='datacontrato'
  label='DataContrato (igual ou início)'
  dataForm={null}
  className='inputSearch'
  name='datacontrato'
  value={handlers.windowFilter?.datacontrato ?? ''}
  onChange={(value: string) => handlers.handleDateChange('datacontrato', value)}
  />
  <InputDate
  type='text'
  id='datacontrato_end'
  label='DataContrato (final)'
  dataForm={null}
  className='inputSearch'
  name='datacontrato_end'
  value={handlers.windowFilter?.datacontrato_end ?? ''}
  disabled={handlers.windowFilter?.datacontrato ? false: true}
  onChange={(value: string) => handlers.handleDateChange('datacontrato_end', value)}
  />
  <InputInput
  type='text'
  id='codigo_filtro'
  name='codigo_filtro'
  value={handlers.windowFilter?.codigo_filtro ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código do cadastro'
  label='Código (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='codigo_filtro_end'
  name='codigo_filtro_end'
  value={handlers.windowFilter?.codigo_filtro_end ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código final do cadastro'
  label='Código final'
  disabled={handlers.windowFilter?.codigo_filtro ? false: true}
  className='inputIncNome inputSearch'
  />
</>
);
return {
  // Estados
  showSearch, 
  windowFilter, 
  setWindowFilter, 
  // Handlers
  handleSearch, 
  handleCloseSearch, 
  handleConfirmSearch, 
  // Render function
  renderInputFilters, 
  // Utilitários
  clearFilter, 
  hasActiveFilter
};
};