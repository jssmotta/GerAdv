// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Readers;
public partial class HistoricoReader(IFHistoricoFactory historicoFactory) : IHistoricoReader
{
    private readonly IFHistoricoFactory _historicoFactory = historicoFactory;
    public async Task<IEnumerable<HistoricoResponseAll>> Listar(int max, string uri, string cWhere, List<SqlParameter> parameters, string order, CancellationToken cancellationToken) => await ListarTabela(BuildSqlQuery(DBHistorico.CamposSqlX, cWhere, order, max), parameters, uri, caching: DevourerOne.PCachingDefault, max: max, cancellationToken: cancellationToken);
    private async Task<IEnumerable<HistoricoResponseAll>> ListarTabela(string sql, List<SqlParameter> parameters, string uri, bool caching = DevourerOne.PCachingDefault, int max = 200, CancellationToken cancellationToken = default)
    {
        var result = new List<HistoricoResponseAll>(max);
        await using var connection = Configuracoes.GetConnectionByUri(uri);
        await using var cmd = new SqlCommand(cmdText: ConfiguracoesDBT.CmdSql(sql), connection: connection?.InnerConnection)
        {
            CommandTimeout = 30
        };
        foreach (var param in parameters)
        {
            if (!cmd.Parameters.Contains(param.ParameterName))
            {
                var newParam = new SqlParameter(param.ParameterName, param.Value)
                {
                    SqlDbType = param.SqlDbType,
                    Direction = param.Direction,
                    Size = param.Size,
                    Precision = param.Precision,
                    Scale = param.Scale
                };
                cmd.Parameters.Add(newParam);
            }
        }

        await using var reader = await cmd.ExecuteReaderAsync(CommandBehavior.SingleResult);
        while (await reader.ReadAsync())
        {
            if (cancellationToken.IsCancellationRequested)
                return result;
            result.Add(ReadAll(_historicoFactory.CreateFromReader(reader), reader)!);
        }

        return result;
    }

    public async Task<HistoricoResponse?> Read(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _historicoFactory.CreateFromIdAsync(id, oCnn);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public async Task<Models.Historico?> ReadM(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _historicoFactory.CreateFromIdAsync(id, oCnn);
        var historico = new Models.Historico
        {
            Id = dbRec.ID,
            ExtraID = dbRec.FExtraID,
            IDNE = dbRec.FIDNE,
            ExtraGUID = dbRec.FExtraGUID ?? string.Empty,
            LiminarOrigem = dbRec.FLiminarOrigem,
            NaoPublicavel = dbRec.FNaoPublicavel,
            Processo = dbRec.FProcesso,
            Precatoria = dbRec.FPrecatoria,
            Apenso = dbRec.FApenso,
            IDInstProcesso = dbRec.FIDInstProcesso,
            Fase = dbRec.FFase,
            Observacao = dbRec.FObservacao ?? string.Empty,
            Agendado = dbRec.FAgendado,
            Concluido = dbRec.FConcluido,
            MesmaAgenda = dbRec.FMesmaAgenda,
            SAD = dbRec.FSAD,
            Resumido = dbRec.FResumido,
            StatusAndamento = dbRec.FStatusAndamento,
            Top = dbRec.FTop,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FData, out DateTime XData))
        {
            historico.Data = dbRec.FData;
            historico.Data_date = XData;
        }

        return historico;
    }

    public HistoricoResponse? Read(FHistorico dbRec, MsiSqlConnection oCnn)
    {
        return Read(dbRec);
    }

    public HistoricoResponse? Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn)
    {
        using var dbRec = _historicoFactory.CreateFromParameters(parameters, oCnn, sqlWhere: where);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public HistoricoResponse? Read(FHistorico dbRec) // Track 001.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var historico = new HistoricoResponse
        {
            Id = dbRec.ID,
            ExtraID = dbRec.FExtraID,
            IDNE = dbRec.FIDNE,
            ExtraGUID = dbRec.FExtraGUID ?? string.Empty,
            LiminarOrigem = dbRec.FLiminarOrigem,
            NaoPublicavel = dbRec.FNaoPublicavel,
            Processo = dbRec.FProcesso,
            Precatoria = dbRec.FPrecatoria,
            Apenso = dbRec.FApenso,
            IDInstProcesso = dbRec.FIDInstProcesso,
            Fase = dbRec.FFase,
            Observacao = dbRec.FObservacao ?? string.Empty,
            Agendado = dbRec.FAgendado,
            Concluido = dbRec.FConcluido,
            MesmaAgenda = dbRec.FMesmaAgenda,
            SAD = dbRec.FSAD,
            Resumido = dbRec.FResumido,
            StatusAndamento = dbRec.FStatusAndamento,
            Top = dbRec.FTop,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FData, out DateTime XData))
        {
            historico.Data = dbRec.FData;
            historico.Data_date = XData;
        }

        return historico;
    }

    public HistoricoResponse? Read(SG.GerAdv.DBHistorico dbRec) // Track 002.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var historico = new HistoricoResponse
        {
            Id = dbRec.ID,
            ExtraID = dbRec.FExtraID,
            IDNE = dbRec.FIDNE,
            ExtraGUID = dbRec.FExtraGUID ?? string.Empty,
            LiminarOrigem = dbRec.FLiminarOrigem,
            NaoPublicavel = dbRec.FNaoPublicavel,
            Processo = dbRec.FProcesso,
            Precatoria = dbRec.FPrecatoria,
            Apenso = dbRec.FApenso,
            IDInstProcesso = dbRec.FIDInstProcesso,
            Fase = dbRec.FFase,
            Observacao = dbRec.FObservacao ?? string.Empty,
            Agendado = dbRec.FAgendado,
            Concluido = dbRec.FConcluido,
            MesmaAgenda = dbRec.FMesmaAgenda,
            SAD = dbRec.FSAD,
            Resumido = dbRec.FResumido,
            StatusAndamento = dbRec.FStatusAndamento,
            Top = dbRec.FTop,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FData, out DateTime XData))
        {
            historico.Data = dbRec.FData;
            historico.Data_date = XData;
        }

        return historico;
    }

    public HistoricoResponseAll? ReadAll(FHistorico dbRec, IDataRecord dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var historico = new HistoricoResponseAll
        {
            Id = dbRec.ID,
            ExtraID = dbRec.FExtraID,
            IDNE = dbRec.FIDNE,
            ExtraGUID = dbRec.FExtraGUID ?? string.Empty,
            LiminarOrigem = dbRec.FLiminarOrigem,
            NaoPublicavel = dbRec.FNaoPublicavel,
            Processo = dbRec.FProcesso,
            Precatoria = dbRec.FPrecatoria,
            Apenso = dbRec.FApenso,
            IDInstProcesso = dbRec.FIDInstProcesso,
            Fase = dbRec.FFase,
            Observacao = dbRec.FObservacao ?? string.Empty,
            Agendado = dbRec.FAgendado,
            Concluido = dbRec.FConcluido,
            MesmaAgenda = dbRec.FMesmaAgenda,
            SAD = dbRec.FSAD,
            Resumido = dbRec.FResumido,
            StatusAndamento = dbRec.FStatusAndamento,
            Top = dbRec.FTop,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FData, out DateTime XData))
        {
            historico.Data = dbRec.FData;
            historico.Data_date = XData;
        }

        try
        {
            historico.NroPastaProcessos = dr[DBProcessosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            historico.DescricaoFase = dr[DBFaseDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            historico.NomeStatusAndamento = dr[DBStatusAndamentoDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return historico;
    }

    public HistoricoResponseAll? ReadAll(SG.GerAdv.DBHistorico dbRec, DataRow dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var historico = new HistoricoResponseAll
        {
            Id = dbRec.ID,
            ExtraID = dbRec.FExtraID,
            IDNE = dbRec.FIDNE,
            ExtraGUID = dbRec.FExtraGUID ?? string.Empty,
            LiminarOrigem = dbRec.FLiminarOrigem,
            NaoPublicavel = dbRec.FNaoPublicavel,
            Processo = dbRec.FProcesso,
            Precatoria = dbRec.FPrecatoria,
            Apenso = dbRec.FApenso,
            IDInstProcesso = dbRec.FIDInstProcesso,
            Fase = dbRec.FFase,
            Observacao = dbRec.FObservacao ?? string.Empty,
            Agendado = dbRec.FAgendado,
            Concluido = dbRec.FConcluido,
            MesmaAgenda = dbRec.FMesmaAgenda,
            SAD = dbRec.FSAD,
            Resumido = dbRec.FResumido,
            StatusAndamento = dbRec.FStatusAndamento,
            Top = dbRec.FTop,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FData, out DateTime XData))
        {
            historico.Data = dbRec.FData;
            historico.Data_date = XData;
        }

        try
        {
            historico.NroPastaProcessos = dr[DBProcessosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            historico.DescricaoFase = dr[DBFaseDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            historico.NomeStatusAndamento = dr[DBStatusAndamentoDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return historico;
    }
}