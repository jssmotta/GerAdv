// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// Tracking: Forms.tsx.txt
'use client';
import { ILivroCaixa } from '@/app/GerAdv_TS/LivroCaixa/Interfaces/interface.LivroCaixa';
import { useRouter } from 'next/navigation';
import React, { useEffect, useState, useRef } from 'react';
import { useSystemContext } from '@/app/context/SystemContext';
import { getParamFromUrl } from '@/app/tools/helpers';
import '@/app/styles/CrudFormsBase.css';
import '@/app/styles/CrudFormsMobile.css';
import '@/app/styles/CrudForms.css'; // [ INDEX_SIZE ]
import ButtonSalvarCrud from '@/app/components/Cruds/ButtonSalvarCrud';
import { useIsMobile } from '@/app/context/MobileContext';
import DeleteButton from '@/app/components/Cruds/DeleteButton';
import { LivroCaixaApi } from '../../Apis/ApiLivroCaixa';
import { useValidationsLivroCaixa } from '../../Hooks/hookLivroCaixa';
import InputName from '@/app/components/Inputs/InputName';
import InputInput from '@/app/components/Inputs/InputInput'
import InputCheckbox from '@/app/components/Inputs/InputCheckbox';
interface LivroCaixaFormProps {
  livrocaixaData: ILivroCaixa;
  onChange: (e: any) => void;
  onSubmit: (e: React.FormEvent) => void;
  onClose: () => void;
  onError?: () => void;
  onReload?: () => void;
  onSuccess?: (registro?: any) => void;
}

export const LivroCaixaForm: React.FC<LivroCaixaFormProps> = ({
  livrocaixaData, 
  onChange, 
  onSubmit, 
  onClose, 
  onError, 
  onReload, 
  onSuccess, 
}) => {
const router = useRouter();
const { systemContext } = useSystemContext();
const isMobile = useIsMobile();
const dadoApi = new LivroCaixaApi(systemContext?.Uri ?? '', systemContext?.Token ?? '');
const [isSubmitting, setIsSubmitting] = useState(false);
const initialized = useRef(false);
const validationForm = useValidationsLivroCaixa();

const onConfirm = (e: React.FormEvent) => {
  e.preventDefault();
  if (e.stopPropagation) e.stopPropagation();

    if (!isSubmitting) {
      setIsSubmitting(true);

      try {
        onSubmit(e);
      } catch (error) {
      console.log('Erro ao submeter formulário de LivroCaixa:');
      setIsSubmitting(false);
      if (onError) onError();
      }
    }
  };
  const handleCancel = () => {
    if (onReload) {
      onReload(); // Recarrega os dados originais
    } else {
    onClose(); // Comportamento padrão se não há callback de recarga
  }
};

const handleDirectSave = () => {
  if (!isSubmitting) {
    setIsSubmitting(true);

    try {
      const syntheticEvent = {
        preventDefault: () => { }, 
        target: document.getElementById(`LivroCaixaForm-${livrocaixaData.id}`)
      } as unknown as React.FormEvent;

      onSubmit(syntheticEvent);
    } catch (error) {
    console.log('Erro ao salvar LivroCaixa diretamente');
    setIsSubmitting(false);
    if (onError) onError();
    }
  }
};
useEffect(() => {
  const el = document.querySelector('.nameFormMobile');
  if (el) {
    el.textContent = livrocaixaData?.id == 0 ? 'Editar LivroCaixa' : 'Adicionar Livro Caixa';
  }
}, [livrocaixaData.id]);
return (
<>
{!isMobile ? <style jsx global>{`
  @media (max-width: 1366px) {
    html {
      zoom: 0.8 !important;
    }
  }
  `}</style> : null}

  <div className={isMobile ? 'form-container form-container-LivroCaixa' : 'form-container form-container-LivroCaixa'}>

    <form className='formInputCadInc' id={`LivroCaixaForm-${livrocaixaData.id}`} onSubmit={onConfirm}>
      {!isMobile && (
        <ButtonSalvarCrud isMobile={false} validationForm={validationForm} entity='LivroCaixa' data={livrocaixaData} isSubmitting={isSubmitting} onClose={onClose} formId={`LivroCaixaForm-${livrocaixaData.id}`} preventPropagation={true} onSave={handleDirectSave} onCancel={handleCancel} />
        )}
        <div className='grid-container'>

          <InputName
          type='text'
          id='data'
          label='Data'
          dataForm={livrocaixaData}
          className='inputIncNome'
          name='data'
          value={livrocaixaData.data}
          placeholder={`Informe Data`}
          onChange={onChange}
          required
          />

          <InputInput
          type='text'
          maxLength={2048}
          id='iddes'
          label='IDDes'
          dataForm={livrocaixaData}
          className='inputIncNome'
          name='iddes'
          value={livrocaixaData.iddes}
          onChange={onChange}
          />


          <InputInput
          type='text'
          maxLength={2048}
          id='pessoal'
          label='Pessoal'
          dataForm={livrocaixaData}
          className='inputIncNome'
          name='pessoal'
          value={livrocaixaData.pessoal}
          onChange={onChange}
          />

          <InputCheckbox dataForm={livrocaixaData} label='Ajuste' name='ajuste' checked={livrocaixaData.ajuste} onChange={onChange} />

          <InputInput
          type='text'
          maxLength={2048}
          id='idhon'
          label='IDHon'
          dataForm={livrocaixaData}
          className='inputIncNome'
          name='idhon'
          value={livrocaixaData.idhon}
          onChange={onChange}
          />


          <InputInput
          type='text'
          maxLength={2048}
          id='idhonparc'
          label='IDHonParc'
          dataForm={livrocaixaData}
          className='inputIncNome'
          name='idhonparc'
          value={livrocaixaData.idhonparc}
          onChange={onChange}
          />

          <InputCheckbox dataForm={livrocaixaData} label='IDHonSuc' name='idhonsuc' checked={livrocaixaData.idhonsuc} onChange={onChange} />

          <InputInput
          type='text'
          maxLength={2048}
          id='processo'
          label='Processo'
          dataForm={livrocaixaData}
          className='inputIncNome'
          name='processo'
          value={livrocaixaData.processo}
          onChange={onChange}
          />


          <InputInput
          type='text'
          maxLength={2048}
          id='valor'
          label='Valor'
          dataForm={livrocaixaData}
          className='inputIncNome'
          name='valor'
          value={livrocaixaData.valor}
          onChange={onChange}
          />

        </div><div className='grid-container'><InputCheckbox dataForm={livrocaixaData} label='Tipo' name='tipo' checked={livrocaixaData.tipo} onChange={onChange} />

        <InputInput
        type='text'
        maxLength={255}
        id='historico'
        label='Historico'
        dataForm={livrocaixaData}
        className='inputIncNome'
        name='historico'
        value={livrocaixaData.historico}
        onChange={onChange}
        />


        <InputInput
        type='text'
        maxLength={2048}
        id='grupo'
        label='Grupo'
        dataForm={livrocaixaData}
        className='inputIncNome'
        name='grupo'
        value={livrocaixaData.grupo}
        onChange={onChange}
        />

      </div>
    </form>


    {isMobile && (
      <ButtonSalvarCrud isMobile={true} validationForm={validationForm} entity='LivroCaixa' data={livrocaixaData} isSubmitting={isSubmitting} onClose={onClose} formId={`LivroCaixaForm-${livrocaixaData.id}`} preventPropagation={true} onSave={handleDirectSave} onCancel={handleCancel} />
      )}
      <DeleteButton page={'/pages/livrocaixa'} id={livrocaixaData.id} closeModel={onClose} dadoApi={dadoApi} />
    </div>
    <div className='form-spacer'></div>
    </>
  );
};