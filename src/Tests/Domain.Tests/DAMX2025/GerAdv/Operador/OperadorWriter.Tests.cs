// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class OperadorWriterTests
{
    private readonly Mock<IFOperadorFactory> _mockOperadorFactory;
    private readonly Mock<FOperador> _mockFOperador;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly OperadorWriter _operadorWriter;
    public OperadorWriterTests()
    {
        _mockOperadorFactory = new Mock<IFOperadorFactory>();
        _mockFOperador = new Mock<FOperador>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _operadorWriter = new OperadorWriter(_mockOperadorFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var operador = CreateValidOperadorModel();
        operador.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockOperadorFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFOperador.Object);
        _mockFOperador.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _operadorWriter.WriteAsync(operador, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFOperador.Object);
        _mockOperadorFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockOperadorFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFOperador.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var operador = CreateValidOperadorModel();
        operador.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockOperadorFactory.Setup(x => x.CreateFromIdAsync(operador.Id, _mockConnection.Object)).ReturnsAsync(_mockFOperador.Object);
        _mockFOperador.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _operadorWriter.WriteAsync(operador, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFOperador.Object);
        _mockOperadorFactory.Verify(x => x.CreateFromIdAsync(operador.Id, _mockConnection.Object), Times.Once);
        _mockOperadorFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFOperador.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var operador = CreateValidOperadorModel();
        var auditorQuem = 99;
        _mockOperadorFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFOperador.Object);
        _mockFOperador.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _operadorWriter.WriteAsync(operador, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFOperador.Object);
        _mockFOperador.VerifySet(x => x.FEMail = operador.EMail, Times.Once);
        _mockFOperador.VerifySet(x => x.FPasta = operador.Pasta, Times.Once);
        _mockFOperador.VerifySet(x => x.FTelefonista = operador.Telefonista, Times.Once);
        _mockFOperador.VerifySet(x => x.FMaster = operador.Master, Times.Once);
        _mockFOperador.VerifySet(x => x.FNome = operador.Nome, Times.Once);
        _mockFOperador.VerifySet(x => x.FNick = operador.Nick, Times.Once);
        _mockFOperador.VerifySet(x => x.FExcluido = operador.Excluido, Times.Once);
        _mockFOperador.VerifySet(x => x.FSituacao = operador.Situacao, Times.Once);
        _mockFOperador.VerifySet(x => x.FMinhaDescricao = operador.MinhaDescricao, Times.Once);
        _mockFOperador.VerifySet(x => x.FEMailNet = operador.EMailNet, Times.Once);
        _mockFOperador.VerifySet(x => x.FOnLine = operador.OnLine, Times.Once);
        _mockFOperador.VerifySet(x => x.FSysOp = operador.SysOp, Times.Once);
        _mockFOperador.VerifySet(x => x.FIsFinanceiro = operador.IsFinanceiro, Times.Once);
        _mockFOperador.VerifySet(x => x.FTop = operador.Top, Times.Once);
        _mockFOperador.VerifySet(x => x.FSexo = operador.Sexo, Times.Once);
        _mockFOperador.VerifySet(x => x.FBasico = operador.Basico, Times.Once);
        _mockFOperador.VerifySet(x => x.FExterno = operador.Externo, Times.Once);
        _mockFOperador.VerifySet(x => x.FEMailConfirmado = operador.EMailConfirmado, Times.Once);
        _mockFOperador.VerifySet(x => x.FDataLimiteReset = operador.DataLimiteReset.ToString(), Times.Once);
        _mockFOperador.VerifySet(x => x.FGUID = operador.GUID, Times.Once);
        _mockFOperador.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithNullDataLimiteReset_ShouldNotSetFDataLimiteReset()
    {
        // Arrange
        var operador = CreateValidOperadorModel();
        operador.DataLimiteReset = null;
        var auditorQuem = 123;
        _mockOperadorFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFOperador.Object);
        _mockFOperador.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _operadorWriter.WriteAsync(operador, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFOperador.VerifySet(x => x.FDataLimiteReset = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var operador = CreateValidOperadorModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockOperadorFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _operadorWriter.WriteAsync(operador, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var operador = CreateValidOperadorModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockOperadorFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFOperador.Object);
        _mockFOperador.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _operadorWriter.WriteAsync(operador, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var operadorResponse = new OperadorResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockOperadorFactory.Setup(x => x.DeleteAsync(operadorId, operadorResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _operadorWriter.Delete(operadorResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockOperadorFactory.Verify(x => x.DeleteAsync(operadorId, operadorResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var operadorResponse = new OperadorResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockOperadorFactory.Setup(x => x.DeleteAsync(operadorId, operadorResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _operadorWriter.Delete(operadorResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var operadorResponse = new OperadorResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockOperadorFactory.Setup(x => x.DeleteAsync(operadorId, operadorResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _operadorWriter.Delete(operadorResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new OperadorWriter(_mockOperadorFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new OperadorWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.Operador CreateValidOperadorModel()
    {
        return new Models.Operador
        {
            Id = 0,
            EMail = "test@email.com",
            Pasta = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Telefonista = false,
            Master = false,
            Nome = "João",
            Nick = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Excluido = false,
            Situacao = false,
            MinhaDescricao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            EMailNet = "test@email.com",
            OnLine = false,
            SysOp = false,
            IsFinanceiro = false,
            Top = false,
            Sexo = false,
            Basico = false,
            Externo = false,
            EMailConfirmado = false,
            DataLimiteReset = "24/04/1975",
            GUID = Guid.NewGuid().ToString()
        };
    }
#endregion
}