// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class NENotasWriterTests
{
    private readonly Mock<IFNENotasFactory> _mockNENotasFactory;
    private readonly Mock<FNENotas> _mockFNENotas;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly NENotasWriter _nenotasWriter;
    public NENotasWriterTests()
    {
        _mockNENotasFactory = new Mock<IFNENotasFactory>();
        _mockFNENotas = new Mock<FNENotas>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _nenotasWriter = new NENotasWriter(_mockNENotasFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var nenotas = CreateValidNENotasModel();
        nenotas.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockNENotasFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFNENotas.Object);
        _mockFNENotas.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _nenotasWriter.WriteAsync(nenotas, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFNENotas.Object);
        _mockNENotasFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockNENotasFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFNENotas.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var nenotas = CreateValidNENotasModel();
        nenotas.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockNENotasFactory.Setup(x => x.CreateFromIdAsync(nenotas.Id, _mockConnection.Object)).ReturnsAsync(_mockFNENotas.Object);
        _mockFNENotas.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _nenotasWriter.WriteAsync(nenotas, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFNENotas.Object);
        _mockNENotasFactory.Verify(x => x.CreateFromIdAsync(nenotas.Id, _mockConnection.Object), Times.Once);
        _mockNENotasFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFNENotas.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var nenotas = CreateValidNENotasModel();
        var auditorQuem = 99;
        _mockNENotasFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFNENotas.Object);
        _mockFNENotas.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _nenotasWriter.WriteAsync(nenotas, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFNENotas.Object);
        _mockFNENotas.VerifySet(x => x.FApenso = nenotas.Apenso, Times.Once);
        _mockFNENotas.VerifySet(x => x.FPrecatoria = nenotas.Precatoria, Times.Once);
        _mockFNENotas.VerifySet(x => x.FInstancia = nenotas.Instancia, Times.Once);
        _mockFNENotas.VerifySet(x => x.FMovPro = nenotas.MovPro, Times.Once);
        _mockFNENotas.VerifySet(x => x.FNome = nenotas.Nome, Times.Once);
        _mockFNENotas.VerifySet(x => x.FNotaExpedida = nenotas.NotaExpedida, Times.Once);
        _mockFNENotas.VerifySet(x => x.FRevisada = nenotas.Revisada, Times.Once);
        _mockFNENotas.VerifySet(x => x.FProcesso = nenotas.Processo, Times.Once);
        _mockFNENotas.VerifySet(x => x.FPalavraChave = nenotas.PalavraChave, Times.Once);
        _mockFNENotas.VerifySet(x => x.FData = nenotas.Data, Times.Once);
        _mockFNENotas.VerifySet(x => x.FNotaPublicada = nenotas.NotaPublicada, Times.Once);
        _mockFNENotas.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var nenotas = CreateValidNENotasModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockNENotasFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _nenotasWriter.WriteAsync(nenotas, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var nenotas = CreateValidNENotasModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockNENotasFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFNENotas.Object);
        _mockFNENotas.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _nenotasWriter.WriteAsync(nenotas, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var nenotasResponse = new NENotasResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockNENotasFactory.Setup(x => x.DeleteAsync(operadorId, nenotasResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _nenotasWriter.Delete(nenotasResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockNENotasFactory.Verify(x => x.DeleteAsync(operadorId, nenotasResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var nenotasResponse = new NENotasResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockNENotasFactory.Setup(x => x.DeleteAsync(operadorId, nenotasResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _nenotasWriter.Delete(nenotasResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var nenotasResponse = new NENotasResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockNENotasFactory.Setup(x => x.DeleteAsync(operadorId, nenotasResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _nenotasWriter.Delete(nenotasResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new NENotasWriter(_mockNENotasFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new NENotasWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.NENotas CreateValidNENotasModel()
    {
        return new Models.NENotas
        {
            Id = 0,
            Apenso = 1,
            Precatoria = 1,
            Instancia = 1,
            MovPro = false,
            Nome = "João",
            NotaExpedida = false,
            Revisada = false,
            Processo = 1,
            PalavraChave = 1,
            Data = "27/05/2022",
            NotaPublicada = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM"
        };
    }
#endregion
}