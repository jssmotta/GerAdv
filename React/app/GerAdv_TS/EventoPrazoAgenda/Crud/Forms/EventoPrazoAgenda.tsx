// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// Tracking: Forms.tsx.txt
'use client';
import { IEventoPrazoAgenda } from '@/app/GerAdv_TS/EventoPrazoAgenda/Interfaces/interface.EventoPrazoAgenda';
import { useRouter } from 'next/navigation';
import React, { useEffect, useState, useRef } from 'react';
import { useSystemContext } from '@/app/context/SystemContext';
import { getParamFromUrl } from '@/app/tools/helpers';
import '@/app/styles/CrudFormsBase.css';
import '@/app/styles/CrudFormsMobile.css';
import '@/app/styles/CrudForms5.css'; // [ INDEX_SIZE ]
import ButtonSalvarCrud from '@/app/components/Cruds/ButtonSalvarCrud';
import { useIsMobile } from '@/app/context/MobileContext';
import DeleteButton from '@/app/components/Cruds/DeleteButton';
import { EventoPrazoAgendaApi } from '../../Apis/ApiEventoPrazoAgenda';
import { useValidationsEventoPrazoAgenda } from '../../Hooks/hookEventoPrazoAgenda';
import InputName from '@/app/components/Inputs/InputName';
interface EventoPrazoAgendaFormProps {
  eventoprazoagendaData: IEventoPrazoAgenda;
  onChange: (e: any) => void;
  onSubmit: (e: React.FormEvent) => void;
  onClose: () => void;
  onError?: () => void;
  onReload?: () => void;
  onSuccess?: (registro?: any) => void;
}

export const EventoPrazoAgendaForm: React.FC<EventoPrazoAgendaFormProps> = ({
  eventoprazoagendaData, 
  onChange, 
  onSubmit, 
  onClose, 
  onError, 
  onReload, 
  onSuccess, 
}) => {
const router = useRouter();
const { systemContext } = useSystemContext();
const isMobile = useIsMobile();
const dadoApi = new EventoPrazoAgendaApi(systemContext?.Uri ?? '', systemContext?.Token ?? '');
const [isSubmitting, setIsSubmitting] = useState(false);
const initialized = useRef(false);
const validationForm = useValidationsEventoPrazoAgenda();

const onConfirm = (e: React.FormEvent) => {
  e.preventDefault();
  if (e.stopPropagation) e.stopPropagation();

    if (!isSubmitting) {
      setIsSubmitting(true);

      try {
        onSubmit(e);
      } catch (error) {
      console.log('Erro ao submeter formulário de EventoPrazoAgenda:');
      setIsSubmitting(false);
      if (onError) onError();
      }
    }
  };
  const handleCancel = () => {
    if (onReload) {
      onReload(); // Recarrega os dados originais
    } else {
    onClose(); // Comportamento padrão se não há callback de recarga
  }
};

const handleDirectSave = () => {
  if (!isSubmitting) {
    setIsSubmitting(true);

    try {
      const syntheticEvent = {
        preventDefault: () => { }, 
        target: document.getElementById(`EventoPrazoAgendaForm-${eventoprazoagendaData.id}`)
      } as unknown as React.FormEvent;

      onSubmit(syntheticEvent);
    } catch (error) {
    if (process.env.NEXT_PUBLIC_SHOW_LOG === '1')
      console.log('Erro ao salvar EventoPrazoAgenda diretamente');
      setIsSubmitting(false);
      if (onError) onError();
      }
    }
  };
  useEffect(() => {
    const el = document.querySelector('.nameFormMobile');
    if (el) {
      el.textContent = eventoprazoagendaData?.id == 0 ? 'Editar EventoPrazoAgenda' : 'Adicionar Evento Prazo Agenda';
    }
  }, [eventoprazoagendaData.id]);
  return (
  <>
  {!isMobile ? <style jsx global>{`
    @media (max-width: 1366px) {
      html {
        zoom: 0.8 !important;
      }
    }
    `}</style> : null}

    <div className={isMobile ? 'form-container form-container-EventoPrazoAgenda' : 'form-container5 form-container-EventoPrazoAgenda'}>

      <form className='formInputCadInc' id={`EventoPrazoAgendaForm-${eventoprazoagendaData.id}`} onSubmit={onConfirm}>
        {!isMobile && (
          <ButtonSalvarCrud isMobile={false} validationForm={validationForm} entity='EventoPrazoAgenda' data={eventoprazoagendaData} isSubmitting={isSubmitting} setIsSubmitting={setIsSubmitting} onClose={onClose} formId={`EventoPrazoAgendaForm-${eventoprazoagendaData.id}`} preventPropagation={true} onSave={handleDirectSave} onCancel={handleCancel} />
          )}
          <div className='grid-container'>

            <InputName
            type='text'
            id='nome'
            label='Nome'
            dataForm={eventoprazoagendaData}
            className='inputIncNome'
            name='nome'
            value={eventoprazoagendaData.nome}
            placeholder={`Informe Nome`}
            onChange={onChange}
            required
            />

          </div>
        </form>


        {isMobile && (
          <ButtonSalvarCrud isMobile={true} validationForm={validationForm} entity='EventoPrazoAgenda' data={eventoprazoagendaData} isSubmitting={isSubmitting} setIsSubmitting={setIsSubmitting} onClose={onClose} formId={`EventoPrazoAgendaForm-${eventoprazoagendaData.id}`} preventPropagation={true} onSave={handleDirectSave} onCancel={handleCancel} />
          )}
          <DeleteButton page={'/pages/eventoprazoagenda'} id={eventoprazoagendaData.id} closeModel={onClose} dadoApi={dadoApi} />
        </div>
        <div className='form-spacer'></div>
        </>
      );
    };