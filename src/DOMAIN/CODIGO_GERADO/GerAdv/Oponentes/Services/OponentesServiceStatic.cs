// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class OponentesService
{
    private (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterOponentes filtro)
    {
        var parameters = new List<SqlParameter>();
        if (filtro.EMPFuncao != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.EMPFuncao)}", filtro.EMPFuncao));
        }

        if (filtro.EMPFuncao_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.EMPFuncao)}_end", filtro.EMPFuncao_end));
        }

        if (!string.IsNullOrEmpty(filtro.CTPSNumero))
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.CTPSNumero)}", ApplyWildCard(filtro.WildcardChar, filtro.CTPSNumero)));
        }

        if (!string.IsNullOrEmpty(filtro.Site))
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.Site)}", ApplyWildCard(filtro.WildcardChar, filtro.Site)));
        }

        if (!string.IsNullOrEmpty(filtro.CTPSSerie))
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.CTPSSerie)}", ApplyWildCard(filtro.WildcardChar, filtro.CTPSSerie)));
        }

        if (!string.IsNullOrEmpty(filtro.Nome))
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.Nome)}", ApplyWildCard(filtro.WildcardChar, filtro.Nome)));
        }

        if (filtro.Adv != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.Adv)}", filtro.Adv));
        }

        if (filtro.Adv_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.Adv)}_end", filtro.Adv_end));
        }

        if (filtro.EMPCliente != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.EMPCliente)}", filtro.EMPCliente));
        }

        if (filtro.EMPCliente_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.EMPCliente)}_end", filtro.EMPCliente_end));
        }

        if (filtro.IDRep != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.IDRep)}", filtro.IDRep));
        }

        if (filtro.IDRep_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.IDRep)}_end", filtro.IDRep_end));
        }

        if (!string.IsNullOrEmpty(filtro.PIS))
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.PIS)}", ApplyWildCard(filtro.WildcardChar, filtro.PIS)));
        }

        if (!string.IsNullOrEmpty(filtro.Contato))
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.Contato)}", ApplyWildCard(filtro.WildcardChar, filtro.Contato)));
        }

        if (!string.IsNullOrEmpty(filtro.CNPJ))
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.CNPJ)}", ApplyWildCard(filtro.WildcardChar, filtro.CNPJ)));
        }

        if (!string.IsNullOrEmpty(filtro.RG))
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.RG)}", ApplyWildCard(filtro.WildcardChar, filtro.RG)));
        }

        if (filtro.Juridica != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.Juridica)}", filtro.Juridica));
        }

        if (filtro.Tipo != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.Tipo)}", filtro.Tipo));
        }

        if (filtro.Sexo != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.Sexo)}", filtro.Sexo));
        }

        if (!string.IsNullOrEmpty(filtro.CPF))
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.CPF)}", ApplyWildCard(filtro.WildcardChar, filtro.CPF)));
        }

        if (!string.IsNullOrEmpty(filtro.Endereco))
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.Endereco)}", ApplyWildCard(filtro.WildcardChar, filtro.Endereco)));
        }

        if (!string.IsNullOrEmpty(filtro.Fone))
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.Fone)}", ApplyWildCard(filtro.WildcardChar, filtro.Fone)));
        }

        if (!string.IsNullOrEmpty(filtro.Fax))
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.Fax)}", ApplyWildCard(filtro.WildcardChar, filtro.Fax)));
        }

        if (filtro.Cidade != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.Cidade)}", filtro.Cidade));
        }

        if (!string.IsNullOrEmpty(filtro.Bairro))
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.Bairro)}", ApplyWildCard(filtro.WildcardChar, filtro.Bairro)));
        }

        if (!string.IsNullOrEmpty(filtro.CEP))
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.CEP)}", ApplyWildCard(filtro.WildcardChar, filtro.CEP)));
        }

        if (!string.IsNullOrEmpty(filtro.InscEst))
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.InscEst)}", ApplyWildCard(filtro.WildcardChar, filtro.InscEst)));
        }

        if (!string.IsNullOrEmpty(filtro.Observacao))
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.Observacao)}", ApplyWildCard(filtro.WildcardChar, filtro.Observacao)));
        }

        if (!string.IsNullOrEmpty(filtro.EMail))
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.EMail)}", ApplyWildCard(filtro.WildcardChar, filtro.EMail)));
        }

        if (!string.IsNullOrEmpty(filtro.Class))
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.Class)}", ApplyWildCard(filtro.WildcardChar, filtro.Class)));
        }

        if (filtro.Top != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.Top)}", filtro.Top));
        }

        if (!string.IsNullOrEmpty(filtro.GUID))
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.GUID)}", ApplyWildCard(filtro.WildcardChar, filtro.GUID)));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
        }

        if (filtro.Codigo_filtro_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOponentesDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
        }

        if (filtro.LogicalOperator.IsEmptyX() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        if (!(filtro.EMPFuncao.IsEmptyX()) && filtro.EMPFuncao_end.IsEmptyX())
        {
            cWhere.Append(filtro.EMPFuncao.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.EMPFuncao}] = @{nameof(DBOponentesDicInfo.EMPFuncao)}");
        }
        else if (!(filtro.EMPFuncao.IsEmptyX()) && !(filtro.EMPFuncao_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].{DBOponentesDicInfo.EMPFuncao} BETWEEN @{nameof(DBOponentesDicInfo.EMPFuncao)} AND @{nameof(DBOponentesDicInfo.EMPFuncao)}_end");
        }

        cWhere.Append(filtro.CTPSNumero.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.CTPSNumero}]  {DevourerConsts.MsiCollate} like @{nameof(DBOponentesDicInfo.CTPSNumero)}");
        cWhere.Append(filtro.Site.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.Site}]  {DevourerConsts.MsiCollate} like @{nameof(DBOponentesDicInfo.Site)}");
        cWhere.Append(filtro.CTPSSerie.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.CTPSSerie}]  {DevourerConsts.MsiCollate} like @{nameof(DBOponentesDicInfo.CTPSSerie)}");
        cWhere.Append(filtro.Nome.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.Nome}]  {DevourerConsts.MsiCollate} like @{nameof(DBOponentesDicInfo.Nome)}");
        if (!(filtro.Adv.IsEmptyX()) && filtro.Adv_end.IsEmptyX())
        {
            cWhere.Append(filtro.Adv.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.Adv}] = @{nameof(DBOponentesDicInfo.Adv)}");
        }
        else if (!(filtro.Adv.IsEmptyX()) && !(filtro.Adv_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].{DBOponentesDicInfo.Adv} BETWEEN @{nameof(DBOponentesDicInfo.Adv)} AND @{nameof(DBOponentesDicInfo.Adv)}_end");
        }

        if (!(filtro.EMPCliente.IsEmptyX()) && filtro.EMPCliente_end.IsEmptyX())
        {
            cWhere.Append(filtro.EMPCliente.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.EMPCliente}] = @{nameof(DBOponentesDicInfo.EMPCliente)}");
        }
        else if (!(filtro.EMPCliente.IsEmptyX()) && !(filtro.EMPCliente_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].{DBOponentesDicInfo.EMPCliente} BETWEEN @{nameof(DBOponentesDicInfo.EMPCliente)} AND @{nameof(DBOponentesDicInfo.EMPCliente)}_end");
        }

        if (!(filtro.IDRep.IsEmptyX()) && filtro.IDRep_end.IsEmptyX())
        {
            cWhere.Append(filtro.IDRep.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.IDRep}] = @{nameof(DBOponentesDicInfo.IDRep)}");
        }
        else if (!(filtro.IDRep.IsEmptyX()) && !(filtro.IDRep_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].{DBOponentesDicInfo.IDRep} BETWEEN @{nameof(DBOponentesDicInfo.IDRep)} AND @{nameof(DBOponentesDicInfo.IDRep)}_end");
        }

        cWhere.Append(filtro.PIS.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.PIS}]  {DevourerConsts.MsiCollate} like @{nameof(DBOponentesDicInfo.PIS)}");
        cWhere.Append(filtro.Contato.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.Contato}]  {DevourerConsts.MsiCollate} like @{nameof(DBOponentesDicInfo.Contato)}");
        cWhere.Append(filtro.CNPJ.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.CNPJ}]  {DevourerConsts.MsiCollate} like @{nameof(DBOponentesDicInfo.CNPJ)}");
        cWhere.Append(filtro.RG.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.RG}]  {DevourerConsts.MsiCollate} like @{nameof(DBOponentesDicInfo.RG)}");
        cWhere.Append(filtro.Juridica == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.Juridica}] = @{nameof(DBOponentesDicInfo.Juridica)}");
        cWhere.Append(filtro.Tipo == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.Tipo}] = @{nameof(DBOponentesDicInfo.Tipo)}");
        cWhere.Append(filtro.Sexo == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.Sexo}] = @{nameof(DBOponentesDicInfo.Sexo)}");
        cWhere.Append(filtro.CPF.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.CPF}]  {DevourerConsts.MsiCollate} like @{nameof(DBOponentesDicInfo.CPF)}");
        cWhere.Append(filtro.Endereco.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.Endereco}]  {DevourerConsts.MsiCollate} like @{nameof(DBOponentesDicInfo.Endereco)}");
        cWhere.Append(filtro.Fone.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.Fone}]  {DevourerConsts.MsiCollate} like @{nameof(DBOponentesDicInfo.Fone)}");
        cWhere.Append(filtro.Fax.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.Fax}]  {DevourerConsts.MsiCollate} like @{nameof(DBOponentesDicInfo.Fax)}");
        cWhere.Append(filtro.Cidade.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.Cidade}] = @{nameof(DBOponentesDicInfo.Cidade)}");
        cWhere.Append(filtro.Bairro.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.Bairro}]  {DevourerConsts.MsiCollate} like @{nameof(DBOponentesDicInfo.Bairro)}");
        cWhere.Append(filtro.CEP.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.CEP}]  {DevourerConsts.MsiCollate} like @{nameof(DBOponentesDicInfo.CEP)}");
        cWhere.Append(filtro.InscEst.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.InscEst}]  {DevourerConsts.MsiCollate} like @{nameof(DBOponentesDicInfo.InscEst)}");
        cWhere.Append(filtro.Observacao.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.Observacao}]  {DevourerConsts.MsiCollate} like @{nameof(DBOponentesDicInfo.Observacao)}");
        cWhere.Append(filtro.EMail.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.EMail}]  {DevourerConsts.MsiCollate} like @{nameof(DBOponentesDicInfo.EMail)}");
        cWhere.Append(filtro.Class.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.Class}]  {DevourerConsts.MsiCollate} like @{nameof(DBOponentesDicInfo.Class)}");
        cWhere.Append(filtro.Top == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.Top}] = @{nameof(DBOponentesDicInfo.Top)}");
        cWhere.Append(filtro.GUID.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.GUID}]  {DevourerConsts.MsiCollate} like @{nameof(DBOponentesDicInfo.GUID)}");
        if (!(filtro.Codigo_filtro.IsEmptyX()) && filtro.Codigo_filtro_end.IsEmptyX())
        {
            cWhere.Append(filtro.Codigo_filtro.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].[{DBOponentesDicInfo.CampoCodigo}] = @{nameof(DBOponentesDicInfo.CampoCodigo)}");
        }
        else if (!(filtro.Codigo_filtro.IsEmptyX()) && !(filtro.Codigo_filtro_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOponentesDicInfo.PTabelaNome}].{DBOponentesDicInfo.CampoCodigo} BETWEEN @{nameof(DBOponentesDicInfo.CampoCodigo)} AND @{nameof(DBOponentesDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private string ApplyWildCard(char wildcardChar, string value)
    {
        if (wildcardChar == '\0' || wildcardChar == ' ')
        {
            return value;
        }

        var result = $"{wildcardChar}{value.Replace(" ", wildcardChar.ToString())}{wildcardChar}";
        return result;
    }

    private string GetFilterHash(Filters.FilterOponentes? filtro)
    {
        if (filtro == null)
            return string.Empty;
        var json = JsonSerializer.Serialize(filtro);
        using var sha256 = SHA256.Create();
        var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(json));
        return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
    }

    public async Task<IEnumerable<NomeID>> GetListN([FromQuery] int max, [FromBody] Filters.FilterOponentes? filtro, [FromRoute, Required] string uri, CancellationToken token)
    {
        // Tracking: 20250606-0
        ThrowIfDisposed();
        var filtroResult = filtro == null ? null : WFiltro(filtro!);
        string where = filtroResult?.where ?? string.Empty;
        List<SqlParameter> parameters = filtroResult?.parametros ?? [];
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new Exception($"Coneão nula.");
        }

        var keyCache = await reader.ReadStringAuditor(max, uri, "", [], oCnn);
        var cacheKey = $"{uri}-Oponentes-{max}-{where.GetHashCode()}-GetListN-{keyCache}";
        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId)
        };
        return await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataListNAsync(max, uri, where, parameters, cancel), entryOptions, cancellationToken: token) ?? [];
    }

    private async Task<IEnumerable<NomeID>> GetDataListNAsync(int max, string uri, string where, List<SqlParameter> parameters, CancellationToken token)
    {
        var result = new List<NomeID>(max);
        var lista = await reader.ListarN(max, uri, where, parameters, DBOponentesDicInfo.CampoNome);
        foreach (var item in lista)
        {
            if (token.IsCancellationRequested)
                break;
            if (item?.FNome != null)
            {
                result.Add(new NomeID { Nome = item.FNome, ID = item.ID });
            }
        }

        return result;
    }

    private async Task<IEnumerable<OponentesResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}