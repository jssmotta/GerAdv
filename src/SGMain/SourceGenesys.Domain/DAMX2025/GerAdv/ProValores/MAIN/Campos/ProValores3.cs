// 100% auto-generated by Source Genesys Core
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming 1
public partial class DBProValores
{
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool pFldFProcesso, pFldFTipoValorProcesso, pFldFIndice, pFldFIgnorar, pFldFData, pFldFValorOriginal, pFldFPercMulta, pFldFValorMulta, pFldFPercJuros, pFldFValorOriginalCorrigidoIndice, pFldFValorMultaCorrigido, pFldFValorJurosCorrigido, pFldFValorFinal, pFldFDataUltimaCorrecao, pFldFGuid;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected int m_FProcesso, m_FTipoValorProcesso;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected string? m_FIndice, m_FGuid;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected DateTime? m_FData, m_FDataUltimaCorrecao;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool m_FIgnorar;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected decimal m_FValorOriginal, m_FPercMulta, m_FValorMulta, m_FPercJuros, m_FValorOriginalCorrigidoIndice, m_FValorMultaCorrigido, m_FValorJurosCorrigido, m_FValorFinal;
    public virtual int FProcesso
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FProcesso;
        set
        {
            pFldFProcesso = pFldFProcesso || value != m_FProcesso;
            if (pFldFProcesso)
                m_FProcesso = value;
        }
    }

    public virtual int FTipoValorProcesso
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FTipoValorProcesso;
        set
        {
            pFldFTipoValorProcesso = pFldFTipoValorProcesso || value != m_FTipoValorProcesso;
            if (pFldFTipoValorProcesso)
                m_FTipoValorProcesso = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(20, ErrorMessage = "A propriedade FIndice da tabela ProValores deve ter no máximo 20 caracteres.")]
    public virtual string? FIndice
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FIndice ?? string.Empty;
        set
        {
            pFldFIndice = pFldFIndice || !(m_FIndice ?? string.Empty).Equals(value);
            if (pFldFIndice)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FIndice = trimmed.Length > 20 ? trimmed.AsSpan(0, 20).ToString() : trimmed;
            }
        }
    }

    public virtual bool FIgnorar
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FIgnorar;
        set
        {
            pFldFIgnorar = pFldFIgnorar || value != m_FIgnorar;
            if (pFldFIgnorar)
                m_FIgnorar = value;
        }
    }

    public virtual string? FData
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FData is null || m_FData == DevourerOne.DDataZerada ? string.Empty : m_FData.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFData, m_FData, value)is not (true, var changed, var data))
                return;
            (pFldFData, m_FData) = (changed, data);
        }
    }

    public virtual decimal FValorOriginal
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FValorOriginal;
        set
        {
            if (value == m_FValorOriginal)
                return;
            pFldFValorOriginal = true;
            m_FValorOriginal = value;
        }
    }

    public virtual decimal FPercMulta
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPercMulta;
        set
        {
            if (value == m_FPercMulta)
                return;
            pFldFPercMulta = true;
            m_FPercMulta = value;
        }
    }

    public virtual decimal FValorMulta
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FValorMulta;
        set
        {
            if (value == m_FValorMulta)
                return;
            pFldFValorMulta = true;
            m_FValorMulta = value;
        }
    }

    public virtual decimal FPercJuros
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPercJuros;
        set
        {
            if (value == m_FPercJuros)
                return;
            pFldFPercJuros = true;
            m_FPercJuros = value;
        }
    }

    public virtual decimal FValorOriginalCorrigidoIndice
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FValorOriginalCorrigidoIndice;
        set
        {
            if (value == m_FValorOriginalCorrigidoIndice)
                return;
            pFldFValorOriginalCorrigidoIndice = true;
            m_FValorOriginalCorrigidoIndice = value;
        }
    }

    public virtual decimal FValorMultaCorrigido
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FValorMultaCorrigido;
        set
        {
            if (value == m_FValorMultaCorrigido)
                return;
            pFldFValorMultaCorrigido = true;
            m_FValorMultaCorrigido = value;
        }
    }

    public virtual decimal FValorJurosCorrigido
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FValorJurosCorrigido;
        set
        {
            if (value == m_FValorJurosCorrigido)
                return;
            pFldFValorJurosCorrigido = true;
            m_FValorJurosCorrigido = value;
        }
    }

    public virtual decimal FValorFinal
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FValorFinal;
        set
        {
            if (value == m_FValorFinal)
                return;
            pFldFValorFinal = true;
            m_FValorFinal = value;
        }
    }

    public virtual string? FDataUltimaCorrecao
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDataUltimaCorrecao is null || m_FDataUltimaCorrecao == DevourerOne.DDataZerada ? string.Empty : m_FDataUltimaCorrecao.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFDataUltimaCorrecao, m_FDataUltimaCorrecao, value)is not (true, var changed, var data))
                return;
            (pFldFDataUltimaCorrecao, m_FDataUltimaCorrecao) = (changed, data);
        }
    }

    // Tracking Code: 20250503
    [StringLength(50, ErrorMessage = "A propriedade FGuid da tabela ProValores deve ter no máximo 50 caracteres.")]
    public virtual string? FGuid
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FGuid ?? string.Empty;
        set
        {
            pFldFGuid = pFldFGuid || !(m_FGuid ?? string.Empty).Equals(value);
            if (pFldFGuid)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FGuid = trimmed.Length > 50 ? trimmed.AsSpan(0, 50).ToString() : trimmed;
            }
        }
    }

    public void SetAuditor(int usuarioId) => AuditorQuem = usuarioId;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITabelaName() => PTabelaNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoCodigo() => CampoCodigo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoNome() => CampoNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string IPrefixo() => PTabelaPrefixo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITypeFieldCode() => "int";
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IdIsIdentity() => false;
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetID() => ID;
}