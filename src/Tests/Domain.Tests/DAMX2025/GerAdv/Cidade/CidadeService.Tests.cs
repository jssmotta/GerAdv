// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class CidadeServiceTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFCidadeFactory> _mockCidadeFactory;
    private readonly Mock<ICidadeReader> _mockReader;
    private readonly Mock<ICidadeValidation> _mockValidation;
    private readonly Mock<ICidadeWriter> _mockWriter;
    private readonly Mock<IAdvogadosService> _mockAdvogadosService;
    private readonly Mock<IAgendaService> _mockAgendaService;
    private readonly Mock<IBensMateriaisService> _mockBensMateriaisService;
    private readonly Mock<IClientesService> _mockClientesService;
    private readonly Mock<IClientesSociosService> _mockClientesSociosService;
    private readonly Mock<IColaboradoresService> _mockColaboradoresService;
    private readonly Mock<IDivisaoTribunalService> _mockDivisaoTribunalService;
    private readonly Mock<IEnderecosService> _mockEnderecosService;
    private readonly Mock<IEscritoriosService> _mockEscritoriosService;
    private readonly Mock<IFornecedoresService> _mockFornecedoresService;
    private readonly Mock<IForoService> _mockForoService;
    private readonly Mock<IFuncionariosService> _mockFuncionariosService;
    private readonly Mock<IOponentesService> _mockOponentesService;
    private readonly Mock<IOponentesRepLegalService> _mockOponentesRepLegalService;
    private readonly Mock<IOutrasPartesClienteService> _mockOutrasPartesClienteService;
    private readonly Mock<IPreClientesService> _mockPreClientesService;
    private readonly Mock<IPrepostosService> _mockPrepostosService;
    private readonly Mock<ITerceirosService> _mockTerceirosService;
    private readonly Mock<IUFReader> _mockUFReader;
    private readonly Mock<IHttpContextAccessor> _mockHttpContextAccessor;
    private readonly Mock<HybridCache> _mockCache;
    private readonly Mock<IMemoryCache> _mockMemoryCache;
    private readonly CidadeService _service;
    private readonly string _validUri = "test-uri";
    public CidadeServiceTests()
    {
        _mockAppSettings = new Mock<IOptions<AppSettings>>();
        _mockCidadeFactory = new Mock<IFCidadeFactory>();
        _mockReader = new Mock<ICidadeReader>();
        _mockValidation = new Mock<ICidadeValidation>();
        _mockWriter = new Mock<ICidadeWriter>();
        _mockAdvogadosService = new Mock<IAdvogadosService>();
        _mockAgendaService = new Mock<IAgendaService>();
        _mockBensMateriaisService = new Mock<IBensMateriaisService>();
        _mockClientesService = new Mock<IClientesService>();
        _mockClientesSociosService = new Mock<IClientesSociosService>();
        _mockColaboradoresService = new Mock<IColaboradoresService>();
        _mockDivisaoTribunalService = new Mock<IDivisaoTribunalService>();
        _mockEnderecosService = new Mock<IEnderecosService>();
        _mockEscritoriosService = new Mock<IEscritoriosService>();
        _mockFornecedoresService = new Mock<IFornecedoresService>();
        _mockForoService = new Mock<IForoService>();
        _mockFuncionariosService = new Mock<IFuncionariosService>();
        _mockOponentesService = new Mock<IOponentesService>();
        _mockOponentesRepLegalService = new Mock<IOponentesRepLegalService>();
        _mockOutrasPartesClienteService = new Mock<IOutrasPartesClienteService>();
        _mockPreClientesService = new Mock<IPreClientesService>();
        _mockPrepostosService = new Mock<IPrepostosService>();
        _mockTerceirosService = new Mock<ITerceirosService>();
        _mockUFReader = new Mock<IUFReader>();
        _mockHttpContextAccessor = new Mock<IHttpContextAccessor>();
        _mockCache = new Mock<HybridCache>();
        _mockMemoryCache = new Mock<IMemoryCache>();
        var appSettings = new AppSettings();
        _mockAppSettings.Setup(x => x.Value).Returns(appSettings);
        _service = new CidadeService(_mockAppSettings.Object, _mockCidadeFactory.Object, _mockReader.Object, _mockValidation.Object, _mockWriter.Object, _mockUFReader.Object, _mockAdvogadosService.Object, _mockAgendaService.Object, _mockBensMateriaisService.Object, _mockClientesService.Object, _mockClientesSociosService.Object, _mockColaboradoresService.Object, _mockDivisaoTribunalService.Object, _mockEnderecosService.Object, _mockEscritoriosService.Object, _mockFornecedoresService.Object, _mockForoService.Object, _mockFuncionariosService.Object, _mockOponentesService.Object, _mockOponentesRepLegalService.Object, _mockOutrasPartesClienteService.Object, _mockPreClientesService.Object, _mockPrepostosService.Object, _mockTerceirosService.Object, _mockHttpContextAccessor.Object, _mockCache.Object, _mockMemoryCache.Object);
    }

    [Fact]
    public void Constructor_WithValidParameters_InitializesService()
    {
        // Arrange & Act
        var service = new CidadeService(_mockAppSettings.Object, _mockCidadeFactory.Object, _mockReader.Object, _mockValidation.Object, _mockWriter.Object, _mockUFReader.Object, _mockAdvogadosService.Object, _mockAgendaService.Object, _mockBensMateriaisService.Object, _mockClientesService.Object, _mockClientesSociosService.Object, _mockColaboradoresService.Object, _mockDivisaoTribunalService.Object, _mockEnderecosService.Object, _mockEscritoriosService.Object, _mockFornecedoresService.Object, _mockForoService.Object, _mockFuncionariosService.Object, _mockOponentesService.Object, _mockOponentesRepLegalService.Object, _mockOutrasPartesClienteService.Object, _mockPreClientesService.Object, _mockPrepostosService.Object, _mockTerceirosService.Object, _mockHttpContextAccessor.Object, _mockCache.Object, _mockMemoryCache.Object);
        // Assert
        Assert.NotNull(service);
    }

    [Fact]
    public async Task AddAndUpdate_WithNullInput_ReturnsNull()
    {
        // Act
        var result = await _service.AddAndUpdate(null, _validUri);
        // Assert
        Assert.Null(result);
    }

    [Fact]
    public async Task Delete_WithZeroId_ReturnsNull()
    {
        // Arrange
        var id = 0;
        // Act  
        var result = await _service.Delete(id, _validUri);
        // Assert
        Assert.Null(result);
    }

    [Fact]
    public async Task Delete_WithNegativeId_ReturnsNull()
    {
        // Arrange
        var id = -5;
        // Act
        var result = await _service.Delete(id, _validUri);
        // Assert
        Assert.Null(result);
    }

    [Fact]
    public async Task GetById_WithZeroId_ReturnsDefaultResponse()
    {
        // Arrange
        var id = 0;
        // Act
        var result = await _service.GetById(id, _validUri, CancellationToken.None);
        // Assert
        Assert.NotNull(result);
        Assert.Equal(0, result.Id);
    }

    [Fact]
    public async Task GetById_WithNegativeId_ReturnsDefaultResponse()
    {
        // Arrange
        var id = -1;
        // Act
        var result = await _service.GetById(id, _validUri, CancellationToken.None);
        // Assert
        Assert.NotNull(result);
        Assert.Equal(0, result.Id);
    }

    [Fact]
    public void Dispose_CalledOnce_DisposesCorrectly()
    {
        // Act
        _service.Dispose();
        // Assert - Should not throw any exception
        Assert.True(true);
    }

    [Fact]
    public void Dispose_CalledTwice_DoesNotThrow()
    {
        // Act
        _service.Dispose();
        _service.Dispose();
        // Assert - Should not throw any exception
        Assert.True(true);
    }

    [Fact]
    public void GetFilterHash_QuandoFiltroNull_DeveRetornarStringVazia()
    {
        // Usar reflexão para testar método privado
        var result = InvokePrivateMethod("GetFilterHash", null);
        result.Should().Be(string.Empty);
    }

    [Fact]
    public void GetFilterHash_QuandoFiltroValido_DeveRetornarHashSHA256()
    {
        var filtro = new FilterCidade
        {
            Nome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
        var result = InvokePrivateMethod("GetFilterHash", filtro);
        result.Should().NotBeNull();
        result.Should().BeOfType<string>();
        ((string)result).Should().NotBeNullOrEmpty();
        ((string)result).Length.Should().Be(64); // SHA256 hash length
    }

    private object InvokePrivateMethod(string methodName, Filters.FilterCidade? parameters)
    {
        var method = typeof(CidadeService).GetMethod(methodName, BindingFlags.NonPublic | BindingFlags.Instance);
        return method.Invoke(_service, [parameters]);
    }

    [Fact]
    public async Task ThrowIfDisposed_AfterDispose_ThrowsObjectDisposedException()
    {
        // Arrange
        _service.Dispose();
        // Act & Assert
        await Assert.ThrowsAsync<ObjectDisposedException>(() => _service.GetAll(10, _validUri));
    }

    [Fact]
    public async Task Filter_WithNullFilter_ReturnsEmptyResult()
    {
        // Arrange
        var max = 10;
        var invalidUri = "invalid-uri";
        // Act & Assert
        await Assert.ThrowsAsync<Exception>(() => _service.Filter(max, null, invalidUri));
    }

    [Fact]
    public async Task GetListN_WithValidParameters_ReturnsNomeIDList()
    {
        // Arrange
        var max = 10;
        // Act
        await Assert.ThrowsAsync<Exception>(async () => await _service.GetListN(max, new Filters.FilterCidade(), _validUri, CancellationToken.None));
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}