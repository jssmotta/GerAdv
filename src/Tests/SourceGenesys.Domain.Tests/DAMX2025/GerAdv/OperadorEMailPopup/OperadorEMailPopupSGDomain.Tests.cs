// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBOperadorEMailPopup - Nome da classe (ex: DBClientes)
/// OperadorEMailPopup - Nome da tabela (ex: Clientes)
/// oep - Prefixo dos campos (ex: cli)
/// oepCodigo - Nome do campo código (ex: cliCodigo)
/// oepNome - Nome do campo nome (ex: cliNome)
/// DBOperadorEMailPopup.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBOperadorEMailPopupTests : IDisposable
{
    private readonly DBOperadorEMailPopup _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBOperadorEMailPopupTests()
    {
        _instance = new DBOperadorEMailPopup();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("oepCodigo", typeof(int));
        dt.Columns.Add("oepQuemCad", typeof(int));
        dt.Columns.Add("oepDtCad", typeof(DateTime));
        dt.Columns.Add("oepQuemAtu", typeof(int));
        dt.Columns.Add("oepDtAtu", typeof(DateTime));
        dt.Columns.Add("oepVisto", typeof(bool));
        dt.Columns.Add("oepOperador", typeof(int));
        dt.Columns.Add("oepNome", typeof(string));
        dt.Columns.Add("oepSenha", typeof(string));
        dt.Columns.Add("oepSMTP", typeof(string));
        dt.Columns.Add("oepPOP3", typeof(string));
        dt.Columns.Add("oepAutenticacao", typeof(string));
        dt.Columns.Add("oepDescricao", typeof(string));
        dt.Columns.Add("oepUsuario", typeof(string));
        dt.Columns.Add("oepGUID", typeof(string));
        dt.Columns.Add("oepPortaSmtp", typeof(int));
        dt.Columns.Add("oepPortaPop3", typeof(int));
        dt.Columns.Add("oepAssinatura", typeof(string));
        dt.Columns.Add("oepSenha256", typeof(string));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("OperadorEMailPopup", DBOperadorEMailPopup.PTabelaNome);
        Assert.Equal(" OperadorEMailPopup.* ", DBOperadorEMailPopup.CamposSqlX);
        Assert.Equal("oepCodigo", DBOperadorEMailPopup.CampoCodigo);
        Assert.Equal("oepNome", DBOperadorEMailPopup.CampoNome);
        Assert.Equal("oep", DBOperadorEMailPopup.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBOperadorEMailPopup();
        Assert.Equal(0, instance.ID);
        Assert.Equal("OperadorEMailPopup", instance.ITabelaName());
        Assert.Equal("oep", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBOperadorEMailPopup((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBOperadorEMailPopup((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["oepCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBOperadorEMailPopup(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("OperadorEMailPopup", cadastro.ITabelaName());
        Assert.Equal("oepCodigo", cadastro.ICampoCodigo());
        Assert.Equal("oepNome", cadastro.ICampoNome());
        Assert.Equal("oep", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBOperadorEMailPopup.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBOperadorEMailPopup.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBOperadorEMailPopup.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBOperadorEMailPopup();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBOperadorEMailPopup();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnTrue()
    {
        Assert.True(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Operador_ShouldAcceptIntegerValues(int value)
    {
        _instance.FOperador = value;
        Assert.Equal(value, _instance.FOperador);
    }

    [Fact]
    public void Operador_DefaultValue_ShouldBeZero()
    {
        var instance = new DBOperadorEMailPopup();
        Assert.Equal(0, instance.FOperador);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Nome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNome = input;
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void Nome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FNome = longString;
        Assert.True(_instance.FNome.Length <= 80);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void SMTP_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FSMTP = input;
        Assert.Equal(expected, _instance.FSMTP);
    }

    [Fact]
    public void SMTP_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 255 + 10);
        _instance.FSMTP = longString;
        Assert.True(_instance.FSMTP.Length <= 255);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void POP3_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FPOP3 = input;
        Assert.Equal(expected, _instance.FPOP3);
    }

    [Fact]
    public void POP3_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 255 + 10);
        _instance.FPOP3 = longString;
        Assert.True(_instance.FPOP3.Length <= 255);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Autenticacao_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FAutenticacao = value;
        Assert.Equal(value, _instance.FAutenticacao);
    }

    [Fact]
    public void Autenticacao_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBOperadorEMailPopup();
        Assert.False(instance.FAutenticacao);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Descricao_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FDescricao = input;
        Assert.Equal(expected, _instance.FDescricao);
    }

    [Fact]
    public void Descricao_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FDescricao = longString;
        Assert.True(_instance.FDescricao.Length <= 100);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Usuario_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FUsuario = input;
        Assert.Equal(expected, _instance.FUsuario);
    }

    [Fact]
    public void Usuario_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FUsuario = longString;
        Assert.True(_instance.FUsuario.Length <= 50);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void GUID_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FGUID = input;
        Assert.Equal(expected, _instance.FGUID);
    }

    [Fact]
    public void GUID_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FGUID = longString;
        Assert.True(_instance.FGUID.Length <= 100);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void PortaSmtp_ShouldAcceptIntegerValues(int value)
    {
        _instance.FPortaSmtp = value;
        Assert.Equal(value, _instance.FPortaSmtp);
    }

    [Fact]
    public void PortaSmtp_DefaultValue_ShouldBeZero()
    {
        var instance = new DBOperadorEMailPopup();
        Assert.Equal(0, instance.FPortaSmtp);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void PortaPop3_ShouldAcceptIntegerValues(int value)
    {
        _instance.FPortaPop3 = value;
        Assert.Equal(value, _instance.FPortaPop3);
    }

    [Fact]
    public void PortaPop3_DefaultValue_ShouldBeZero()
    {
        var instance = new DBOperadorEMailPopup();
        Assert.Equal(0, instance.FPortaPop3);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Assinatura_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FAssinatura = input;
        Assert.Equal(expected, _instance.FAssinatura);
    }

    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}