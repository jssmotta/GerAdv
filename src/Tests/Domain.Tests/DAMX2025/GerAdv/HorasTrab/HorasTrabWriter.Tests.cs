// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class HorasTrabWriterTests
{
    private readonly Mock<IFHorasTrabFactory> _mockHorasTrabFactory;
    private readonly Mock<FHorasTrab> _mockFHorasTrab;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly HorasTrabWriter _horastrabWriter;
    public HorasTrabWriterTests()
    {
        _mockHorasTrabFactory = new Mock<IFHorasTrabFactory>();
        _mockFHorasTrab = new Mock<FHorasTrab>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _horastrabWriter = new HorasTrabWriter(_mockHorasTrabFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var horastrab = CreateValidHorasTrabModel();
        horastrab.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockHorasTrabFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFHorasTrab.Object);
        _mockFHorasTrab.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _horastrabWriter.WriteAsync(horastrab, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFHorasTrab.Object);
        _mockHorasTrabFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockHorasTrabFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFHorasTrab.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var horastrab = CreateValidHorasTrabModel();
        horastrab.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockHorasTrabFactory.Setup(x => x.CreateFromIdAsync(horastrab.Id, _mockConnection.Object)).ReturnsAsync(_mockFHorasTrab.Object);
        _mockFHorasTrab.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _horastrabWriter.WriteAsync(horastrab, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFHorasTrab.Object);
        _mockHorasTrabFactory.Verify(x => x.CreateFromIdAsync(horastrab.Id, _mockConnection.Object), Times.Once);
        _mockHorasTrabFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFHorasTrab.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var horastrab = CreateValidHorasTrabModel();
        var auditorQuem = 99;
        _mockHorasTrabFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFHorasTrab.Object);
        _mockFHorasTrab.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _horastrabWriter.WriteAsync(horastrab, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFHorasTrab.Object);
        _mockFHorasTrab.VerifySet(x => x.FGUID = horastrab.GUID, Times.Once);
        _mockFHorasTrab.VerifySet(x => x.FIDContatoCRM = horastrab.IDContatoCRM, Times.Once);
        _mockFHorasTrab.VerifySet(x => x.FHonorario = horastrab.Honorario, Times.Once);
        _mockFHorasTrab.VerifySet(x => x.FIDAgenda = horastrab.IDAgenda, Times.Once);
        _mockFHorasTrab.VerifySet(x => x.FData = horastrab.Data, Times.Once);
        _mockFHorasTrab.VerifySet(x => x.FCliente = horastrab.Cliente, Times.Once);
        _mockFHorasTrab.VerifySet(x => x.FStatus = horastrab.Status, Times.Once);
        _mockFHorasTrab.VerifySet(x => x.FProcesso = horastrab.Processo, Times.Once);
        _mockFHorasTrab.VerifySet(x => x.FAdvogado = horastrab.Advogado, Times.Once);
        _mockFHorasTrab.VerifySet(x => x.FFuncionario = horastrab.Funcionario, Times.Once);
        _mockFHorasTrab.VerifySet(x => x.FHrIni = horastrab.HrIni, Times.Once);
        _mockFHorasTrab.VerifySet(x => x.FHrFim = horastrab.HrFim, Times.Once);
        _mockFHorasTrab.VerifySet(x => x.FTempo = horastrab.Tempo, Times.Once);
        _mockFHorasTrab.VerifySet(x => x.FValor = horastrab.Valor, Times.Once);
        _mockFHorasTrab.VerifySet(x => x.FOBS = horastrab.OBS, Times.Once);
        _mockFHorasTrab.VerifySet(x => x.FAnexo = horastrab.Anexo, Times.Once);
        _mockFHorasTrab.VerifySet(x => x.FAnexoComp = horastrab.AnexoComp, Times.Once);
        _mockFHorasTrab.VerifySet(x => x.FAnexoUNC = horastrab.AnexoUNC, Times.Once);
        _mockFHorasTrab.VerifySet(x => x.FServico = horastrab.Servico, Times.Once);
        _mockFHorasTrab.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var horastrab = CreateValidHorasTrabModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockHorasTrabFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _horastrabWriter.WriteAsync(horastrab, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var horastrab = CreateValidHorasTrabModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockHorasTrabFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFHorasTrab.Object);
        _mockFHorasTrab.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _horastrabWriter.WriteAsync(horastrab, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var horastrabResponse = new HorasTrabResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockHorasTrabFactory.Setup(x => x.DeleteAsync(operadorId, horastrabResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _horastrabWriter.Delete(horastrabResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockHorasTrabFactory.Verify(x => x.DeleteAsync(operadorId, horastrabResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var horastrabResponse = new HorasTrabResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockHorasTrabFactory.Setup(x => x.DeleteAsync(operadorId, horastrabResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _horastrabWriter.Delete(horastrabResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var horastrabResponse = new HorasTrabResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockHorasTrabFactory.Setup(x => x.DeleteAsync(operadorId, horastrabResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _horastrabWriter.Delete(horastrabResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new HorasTrabWriter(_mockHorasTrabFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new HorasTrabWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.HorasTrab CreateValidHorasTrabModel()
    {
        return new Models.HorasTrab
        {
            Id = 0,
            GUID = Guid.NewGuid().ToString(),
            IDContatoCRM = 1,
            Honorario = false,
            IDAgenda = 1,
            Data = "27/05/2022",
            Cliente = 1,
            Status = 1,
            Processo = 1,
            Advogado = 1,
            Funcionario = 1,
            HrIni = "AAA",
            HrFim = "AAA",
            Tempo = 0m,
            Valor = 0m,
            OBS = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Anexo = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            AnexoComp = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            AnexoUNC = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Servico = 1
        };
    }
#endregion
}