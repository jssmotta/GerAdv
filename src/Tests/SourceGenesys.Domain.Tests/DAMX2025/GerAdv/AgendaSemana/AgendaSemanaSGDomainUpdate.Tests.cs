// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// ============================================
// ARQUIVO: DBUpdateTests.cs.txt (Principal)
// ============================================
namespace MenphisSI.GerAdv.Tests;
public class DBAgendaSemanaUpdate : IDisposable
{
    private readonly DBAgendaSemana _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBAgendaSemanaUpdate()
    {
        _instance = new DBAgendaSemana();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void DefaultConstructor_ShouldCreateInstance_WithDefaultValues()
    {
        // Act
        var agendasemana = new DBAgendaSemana();
        // Assert
        agendasemana.Should().NotBeNull();
        agendasemana.ITabelaName().Should().Be("AgendaSemana");
        agendasemana.ID.Should().Be(0);
    }

    [Fact]
    public void AllProperties_WithValidValues_ShouldSetCorrectly()
    {
        // Arrange
        var agendasemana = new DBAgendaSemana
        {
            FParaNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FCompromisso = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FNomeCliente = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FTipo = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        };
        // Assert - All properties should be set agendasemana.FParaNome.Should().Be( "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        agendasemana.FCompromisso.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        agendasemana.FNome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        agendasemana.FNomeCliente.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        agendasemana.FTipo.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public void StringProperties_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var agendasemana = new DBAgendaSemana();
        var longString = new string ('X', 300);
        agendasemana.FParaNome = longString; // MAX: 60
        agendasemana.FNome = longString; // MAX: 80
        agendasemana.FNomeCliente = longString; // MAX: 80
        agendasemana.FTipo = longString; // MAX: 100
        // Assert - All properties should be set agendasemana.FParaNome.Should().HaveLength(60);
        agendasemana.FNome.Should().HaveLength(80);
        agendasemana.FNomeCliente.Should().HaveLength(80);
        agendasemana.FTipo.Should().HaveLength(100);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FParaNome_Property_ShouldAcceptValidNames(string ParaNome)
    {
        // Arrange
        var agendasemana = new DBAgendaSemana
        {
            // Act
            FParaNome = ParaNome
        };
        // Assert
        agendasemana.FParaNome.Should().Be(ParaNome);
    }

    [Fact]
    public void FParaNome_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var agendasemana = new DBAgendaSemana
        {
            // Act
            FParaNome = null
        };
        // Assert
        agendasemana.FParaNome.Should().Be(string.Empty);
    }

    [Fact]
    public void FParaNome_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var agendasemana = new DBAgendaSemana();
        var longName = new string ('A', 60 + 10); // Exceeds 60 character limit
        // Act
        agendasemana.FParaNome = longName;
        // Assert
        agendasemana.FParaNome.Should().HaveLength(60);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FCompromisso_Property_ShouldAcceptValidNames(string Compromisso)
    {
        // Arrange
        var agendasemana = new DBAgendaSemana
        {
            // Act
            FCompromisso = Compromisso
        };
        // Assert
        agendasemana.FCompromisso.Should().Be(Compromisso);
    }

    [Fact]
    public void FCompromisso_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var agendasemana = new DBAgendaSemana
        {
            // Act
            FCompromisso = null
        };
        // Assert
        agendasemana.FCompromisso.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNome_Property_ShouldAcceptValidNames(string Nome)
    {
        // Arrange
        var agendasemana = new DBAgendaSemana
        {
            // Act
            FNome = Nome
        };
        // Assert
        agendasemana.FNome.Should().Be(Nome);
    }

    [Fact]
    public void FNome_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var agendasemana = new DBAgendaSemana
        {
            // Act
            FNome = null
        };
        // Assert
        agendasemana.FNome.Should().Be(string.Empty);
    }

    [Fact]
    public void ParameterizedConstructor_WithNullConnection_ShouldReturnEarly()
    {
        // Arrange
        var parameters = new List<SqlParameter>();
        var nome = "TesteNome";
        // Act
        var agendasemana = new DBAgendaSemana(parameters, nome, null);
        // Assert
        agendasemana.Should().NotBeNull();
        agendasemana.ID.Should().Be(0); // Should not have loaded any data
    }

    [Fact]
    public void FNome_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var agendasemana = new DBAgendaSemana();
        var longName = new string ('A', 80 + 10); // Exceeds 80 character limit
        // Act
        agendasemana.FNome = longName;
        // Assert
        agendasemana.FNome.Should().HaveLength(80);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNomeCliente_Property_ShouldAcceptValidNames(string NomeCliente)
    {
        // Arrange
        var agendasemana = new DBAgendaSemana
        {
            // Act
            FNomeCliente = NomeCliente
        };
        // Assert
        agendasemana.FNomeCliente.Should().Be(NomeCliente);
    }

    [Fact]
    public void FNomeCliente_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var agendasemana = new DBAgendaSemana
        {
            // Act
            FNomeCliente = null
        };
        // Assert
        agendasemana.FNomeCliente.Should().Be(string.Empty);
    }

    [Fact]
    public void FNomeCliente_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var agendasemana = new DBAgendaSemana();
        var longName = new string ('A', 80 + 10); // Exceeds 80 character limit
        // Act
        agendasemana.FNomeCliente = longName;
        // Assert
        agendasemana.FNomeCliente.Should().HaveLength(80);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FTipo_Property_ShouldAcceptValidNames(string Tipo)
    {
        // Arrange
        var agendasemana = new DBAgendaSemana
        {
            // Act
            FTipo = Tipo
        };
        // Assert
        agendasemana.FTipo.Should().Be(Tipo);
    }

    [Fact]
    public void FTipo_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var agendasemana = new DBAgendaSemana
        {
            // Act
            FTipo = null
        };
        // Assert
        agendasemana.FTipo.Should().Be(string.Empty);
    }

    [Fact]
    public void FTipo_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var agendasemana = new DBAgendaSemana();
        var longName = new string ('A', 100 + 10); // Exceeds 100 character limit
        // Act
        agendasemana.FTipo = longName;
        // Assert
        agendasemana.FTipo.Should().HaveLength(100);
    }

    [Fact]
    public void TabelaNome_Property_ShouldReturnCorrectTableName()
    {
        // Arrange
        var agendasemana = new DBAgendaSemana();
        // Act & Assert
        agendasemana.TabelaNome.Should().Be("AgendaSemana");
    }

    public virtual void Dispose()
    {
    // Cleanup resources if needed
    }
}