// 100% auto-generated by Source Genesys WebApi Front & Back Creator
                     // copyright © 2000-2025 Menphis - Sistemas Inteligentes
                     // This file is part of the Source Genesys project                     
                    import { useState } from 'react';
import InputInput from '@/app/components/Inputs/InputInput';
import InputDate from '@/app/components/Inputs/InputDate';
import InputHora from '@/app/components/Inputs/InputHora';
import InputValor from '@/app/components/Inputs/InputValor';
import InputComboFilterYesNo from '@/app/components/Inputs/InputComboFilterYesNo';
import { FilterHandlers } from '@/app/components/Cruds/GenericFilterDialog';
import { FilterAgendaRecords } from '@/app/GerAdv_TS/AgendaRecords/Filters/AgendaRecords';
import AgendaComboBox from '@/app/GerAdv_TS/Agenda/ComboBox/Agenda';
import ClientesSociosComboBox from '@/app/GerAdv_TS/ClientesSocios/ComboBox/ClientesSocios';
import ColaboradoresComboBox from '@/app/GerAdv_TS/Colaboradores/ComboBox/Colaboradores';
import ForoComboBox from '@/app/GerAdv_TS/Foro/ComboBox/Foro';
interface UseAgendaRecordsFilterProps {
  handleFetchWithFilter: (filtro?: FilterAgendaRecords | undefined | null) => Promise<void>;
}
interface UseAgendaRecordsFilterReturn {
  // Estados
  showSearch: boolean;
  windowFilter: FilterAgendaRecords;
  setWindowFilter: React.Dispatch<React.SetStateAction<FilterAgendaRecords>>;
  // Handlers do Dialog
  handleSearch: () => void;
  handleCloseSearch: () => void;
  handleConfirmSearch: (filter: FilterAgendaRecords) => Promise<void>;
  // Render function
  renderInputFilters: (handlers: FilterHandlers<FilterAgendaRecords>) => React.ReactNode;
  // Utilitários
  clearFilter: () => void;
  hasActiveFilter: boolean;
}
export const useAgendaRecordsFilter = ({ handleFetchWithFilter }: UseAgendaRecordsFilterProps): UseAgendaRecordsFilterReturn => {
  const [showSearch, setShowSearch] = useState(false);
  const [windowFilter, setWindowFilter] = useState<FilterAgendaRecords>({} as FilterAgendaRecords);
  // Handlers do Dialog
  const handleSearch = () => {
    setShowSearch(true);
    const filterWildechar = {...windowFilter, wildcardChar: '%' } as FilterAgendaRecords;
    setWindowFilter(filterWildechar);
  };
  const handleCloseSearch = () => {
    setShowSearch(false);
  };
  const handleConfirmSearch = async (filter: FilterAgendaRecords) => {
    await handleFetchWithFilter(filter);
  };
  // Função para limpar filtros
  const clearFilter = () => {
    setWindowFilter({});
    sessionStorage.removeItem(btoa('AgendaRecordsFilter'));
    handleFetchWithFilter({});
  };
  // Verificar se há filtros ativos
  const hasActiveFilter = Object.values(windowFilter).some(value =>
    value !== undefined && value !== null && value !== '' && value !== -2147483648
  );
  // Função para renderizar os campos de filtro
  const renderInputFilters = (handlers: FilterHandlers<FilterAgendaRecords>) => (
  <>
  <AgendaComboBox
  name='agenda'
  dataForm={null}
  value={handlers.windowFilter?.agenda}
  setValue={(e:any) => handlers.handleComboChange(e, 'agenda')}
  className='inputSearch inputSearchComboboxTab'
  label='Compromisso'
  />
  <InputInput
  type='text'
  id='julgador'
  name='julgador'
  value={handlers.windowFilter?.julgador ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Julgador'
  label='Julgador (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='julgador_end'
  name='julgador_end'
  value={handlers.windowFilter?.julgador_end ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Julgador final'
  label='Julgador final'
  disabled={handlers.windowFilter?.julgador ? false: true}
  className='inputIncNome inputSearch'
  />
  <ClientesSociosComboBox
  name='clientessocios'
  dataForm={null}
  value={handlers.windowFilter?.clientessocios}
  setValue={(e:any) => handlers.handleComboChange(e, 'clientessocios')}
  className='inputSearch inputSearchComboboxTab'
  label='Clientes Socios'
  />
  <InputInput
  type='text'
  id='perito'
  name='perito'
  value={handlers.windowFilter?.perito ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Perito'
  label='Perito (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='perito_end'
  name='perito_end'
  value={handlers.windowFilter?.perito_end ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Perito final'
  label='Perito final'
  disabled={handlers.windowFilter?.perito ? false: true}
  className='inputIncNome inputSearch'
  />
  <ColaboradoresComboBox
  name='colaborador'
  dataForm={null}
  value={handlers.windowFilter?.colaborador}
  setValue={(e:any) => handlers.handleComboChange(e, 'colaborador')}
  className='inputSearch inputSearchComboboxTab'
  label='Colaboradores'
  />
  <ForoComboBox
  name='foro'
  dataForm={null}
  value={handlers.windowFilter?.foro}
  setValue={(e:any) => handlers.handleComboChange(e, 'foro')}
  className='inputSearch inputSearchComboboxTab'
  label='Foro'
  />
  <InputComboFilterYesNo
  type='text'
  id='aviso1'
  name='aviso1'
  value={handlers.windowFilter?.aviso1 ?? -2147483648}
  onChange={handlers.handleInputChange}
  label='Aviso1'
  className='inputSearch inputSearchCheckbox'
  />
  <InputComboFilterYesNo
  type='text'
  id='aviso2'
  name='aviso2'
  value={handlers.windowFilter?.aviso2 ?? -2147483648}
  onChange={handlers.handleInputChange}
  label='Aviso2'
  className='inputSearch inputSearchCheckbox'
  />
  <InputComboFilterYesNo
  type='text'
  id='aviso3'
  name='aviso3'
  value={handlers.windowFilter?.aviso3 ?? -2147483648}
  onChange={handlers.handleInputChange}
  label='Aviso3'
  className='inputSearch inputSearchCheckbox'
  />
  <InputInput
  type='text'
  id='crmaviso1'
  name='crmaviso1'
  value={handlers.windowFilter?.crmaviso1 ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe CrmAviso1'
  label='CrmAviso1 (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='crmaviso1_end'
  name='crmaviso1_end'
  value={handlers.windowFilter?.crmaviso1_end ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe CrmAviso1 final'
  label='CrmAviso1 final'
  disabled={handlers.windowFilter?.crmaviso1 ? false: true}
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='crmaviso2'
  name='crmaviso2'
  value={handlers.windowFilter?.crmaviso2 ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe CrmAviso2'
  label='CrmAviso2 (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='crmaviso2_end'
  name='crmaviso2_end'
  value={handlers.windowFilter?.crmaviso2_end ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe CrmAviso2 final'
  label='CrmAviso2 final'
  disabled={handlers.windowFilter?.crmaviso2 ? false: true}
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='crmaviso3'
  name='crmaviso3'
  value={handlers.windowFilter?.crmaviso3 ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe CrmAviso3'
  label='CrmAviso3 (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='crmaviso3_end'
  name='crmaviso3_end'
  value={handlers.windowFilter?.crmaviso3_end ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe CrmAviso3 final'
  label='CrmAviso3 final'
  disabled={handlers.windowFilter?.crmaviso3 ? false: true}
  className='inputIncNome inputSearch'
  />
  <InputDate
  type='text'
  id='dataaviso1'
  label='DataAviso1 (igual ou início)'
  dataForm={null}
  className='inputSearch'
  name='dataaviso1'
  value={handlers.windowFilter?.dataaviso1 ?? ''}
  onChange={(value: string) => handlers.handleDateChange('dataaviso1', value)}
  />
  <InputDate
  type='text'
  id='dataaviso1_end'
  label='DataAviso1 (final)'
  dataForm={null}
  className='inputSearch'
  name='dataaviso1_end'
  value={handlers.windowFilter?.dataaviso1_end ?? ''}
  disabled={handlers.windowFilter?.dataaviso1 ? false: true}
  onChange={(value: string) => handlers.handleDateChange('dataaviso1_end', value)}
  />
  <InputDate
  type='text'
  id='dataaviso2'
  label='DataAviso2 (igual ou início)'
  dataForm={null}
  className='inputSearch'
  name='dataaviso2'
  value={handlers.windowFilter?.dataaviso2 ?? ''}
  onChange={(value: string) => handlers.handleDateChange('dataaviso2', value)}
  />
  <InputDate
  type='text'
  id='dataaviso2_end'
  label='DataAviso2 (final)'
  dataForm={null}
  className='inputSearch'
  name='dataaviso2_end'
  value={handlers.windowFilter?.dataaviso2_end ?? ''}
  disabled={handlers.windowFilter?.dataaviso2 ? false: true}
  onChange={(value: string) => handlers.handleDateChange('dataaviso2_end', value)}
  />
  <InputDate
  type='text'
  id='dataaviso3'
  label='DataAviso3 (igual ou início)'
  dataForm={null}
  className='inputSearch'
  name='dataaviso3'
  value={handlers.windowFilter?.dataaviso3 ?? ''}
  onChange={(value: string) => handlers.handleDateChange('dataaviso3', value)}
  />
  <InputDate
  type='text'
  id='dataaviso3_end'
  label='DataAviso3 (final)'
  dataForm={null}
  className='inputSearch'
  name='dataaviso3_end'
  value={handlers.windowFilter?.dataaviso3_end ?? ''}
  disabled={handlers.windowFilter?.dataaviso3 ? false: true}
  onChange={(value: string) => handlers.handleDateChange('dataaviso3_end', value)}
  />
  <InputInput
  type='text'
  id='codigo_filtro'
  name='codigo_filtro'
  value={handlers.windowFilter?.codigo_filtro ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código do cadastro'
  label='Código (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='codigo_filtro_end'
  name='codigo_filtro_end'
  value={handlers.windowFilter?.codigo_filtro_end ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código final do cadastro'
  label='Código final'
  disabled={handlers.windowFilter?.codigo_filtro ? false: true}
  className='inputIncNome inputSearch'
  />
</>
);
return {
  // Estados
  showSearch, 
  windowFilter, 
  setWindowFilter, 
  // Handlers
  handleSearch, 
  handleCloseSearch, 
  handleConfirmSearch, 
  // Render function
  renderInputFilters, 
  // Utilitários
  clearFilter, 
  hasActiveFilter
};
};