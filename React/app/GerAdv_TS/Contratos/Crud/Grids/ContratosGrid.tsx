// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
//CrudGrid.tsx.txt
'use client';
import { useCallback, useEffect, useMemo, useState } from 'react';
import { AppGridToolbar } from '@/app/components/Cruds/GridToolbar';
import { useIsMobile } from '@/app/context/MobileContext';
import { useSystemContext } from '@/app/context/SystemContext';
import { ContratosEmpty } from '../../../Models/Contratos';
import { useWindow } from '@/app/hooks/useWindows';
import { useRouter } from 'next/navigation';
import { IContratos } from '../../Interfaces/interface.Contratos';
import { ContratosService } from '../../Services/Contratos.service';
import { ContratosApi } from '../../Apis/ApiContratos';
import { ContratosGridMobileComponent } from '../GridsMobile/ContratosMobile';
import { ContratosGridDesktopComponent } from '../GridsDesktop/ContratosDesktop';
import { getParamFromUrl } from '@/app/tools/helpers';
import { FilterContratos } from '../../Filters/Contratos';
import { ConfirmationModal } from '@/app/components/Cruds/ConfirmationModal';
import ContratosWindow from './ContratosWindow';
import ErrorMessage from '@/app/components/Cruds/ErrorMessage';
import { useContratosList } from '../../Hooks/hookContratos';
import { LoadingSpinner } from '@/app/components/Cruds/LoadingSpinner';
import { NotifySystemActions, subscribeToNotifications } from '@/app/tools/NotifySystem';
import { useContratosFilter } from '../../Hooks/hookContratosFilter';
import GenericFilterDialog from '@/app/components/Cruds/GenericFilterDialog';
const ContratosGrid: React.FC = () => {
  const { systemContext } = useSystemContext();
  const isMobile = useIsMobile();
  const dimensions = useWindow();
  // Estados locais para UI
  const [showInc, setShowInc] = useState(false);
  const [selectedContratos, setSelectedContratos] = useState<IContratos>(ContratosEmpty());
  const [selectedId, setSelectedId] = useState<number | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [deleteId, setDeleteId] = useState<number | null>(null);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [currFilter, setCurrFilter] = useState<FilterContratos | undefined | null>(null);
  const [isInitialized, setIsInitialized] = useState(false);
  const [contratosData, setContratosData] = useState<IContratos[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  // Service
  const contratosService = useMemo(() => {
    return new ContratosService(
    new ContratosApi(systemContext?.Uri ?? '', systemContext?.Token ?? '')
  );
}, [systemContext?.Uri, systemContext?.Token]);
// Hook customizado para lista
const {
  data: contratos, 
  fetchData, 
  refreshData
} = useContratosList(contratosService, currFilter);

const handleFetchWithFilter = useCallback(async (filtro?: FilterContratos | undefined | null) => {
  setCurrFilter(filtro);
  if (filtro && Object.keys(filtro).length > 0) {
    sessionStorage.setItem(btoa('ContratosFilter'), btoa(JSON.stringify(filtro)));
  }


  setLoading(true);
  setError(null);
  // Primeiro mostra offline, depois atualiza com online quando chegar
  const offlineData = await contratosService.getAll(
  filtro ?? {} as FilterContratos, 
  onlineData => {
    setContratosData(onlineData);
    setLoading(false);
  }
);
setContratosData(offlineData);
setLoading(false);

}, []);
const loadFilter = useCallback(() => {
  if (isInitialized) return; // Evita múltiplas chamadas
    const filtro = {} as FilterContratos;

    const filtroMem = sessionStorage.getItem(btoa('ContratosFilter')) ? JSON.parse(atob(sessionStorage.getItem(btoa('ContratosFilter')) ?? '') || '{}') : {} as FilterContratos;
    setWindowFilter(filtroMem);
    handleFetchWithFilter(filtroMem);

    setIsInitialized(true);
  }, [isInitialized, handleFetchWithFilter]);
  // Handlers para o grid
  const handleRowClick = (contratos: IContratos) => {
    setSelectedContratos(contratos);
    setShowInc(true);
  };
  useEffect(() => {
    if (!isInitialized) {
      loadFilter();
    }
  }, [isInitialized, loadFilter]);
  const handleAdd = () => {
    setSelectedContratos(ContratosEmpty());
    setShowInc(true);
  };
  const handleClose = () => {
    setShowInc(false);
  };
  const handleSuccess = () => {
    setShowInc(false);
    // O hook já escuta as notificações e recarrega automaticamente
    refreshData(); // Força o reload do grid após salvar
  };
  const handleError = () => {
    setShowInc(false);
  };
  // Handlers para exclusão
  const onDeleteClick = (e: any) => {
    const contratos = e.dataItem;
    setDeleteId(contratos.id);
    setIsModalOpen(true);
  };
  const confirmDelete = async () => {
    if (deleteId !== null) {
      try {
        await contratosService.deleteContratos(deleteId);
        // O hook já escuta as notificações e recarrega automaticamente
      } catch (error) {
      if (process.env.NEXT_PUBLIC_SHOW_LOG === '1')
        console.log('Erro ao excluir');
        setErrorMessage('Erro ao excluir o registro. Verifique se ele não está vinculado a outros registros.');
      } finally {
      setDeleteId(null);
      setIsModalOpen(false);
    }
  }
};
const cancelDelete = () => {
  setDeleteId(null);
  setIsModalOpen(false);
};
// Combinar erro do hook com erro local
const displayError = error || errorMessage;
useEffect(() => {
  const unsubscribe = subscribeToNotifications('*', (entity) => {
    if (entity.action == NotifySystemActions.ERROR) {
      return;
    }
    handleFetchWithFilter(currFilter);
  });
  return () => {
    unsubscribe();
  };
}, [currFilter]);
const {
  showSearch, 
  windowFilter, 
  setWindowFilter, 
  handleSearch, 
  handleCloseSearch, 
  handleConfirmSearch, 
  renderInputFilters, 
  clearFilter, 
  hasActiveFilter
} = useContratosFilter({ handleFetchWithFilter });
  useEffect(() => {
    if (currFilter && Object.keys(currFilter).length > 0) {
      setWindowFilter(currFilter);
    }
  }, [currFilter, setWindowFilter]);
  return (
  <>
  <AppGridToolbar onAdd={handleAdd}
    onSearch={handleSearch}
    onClearFilter={hasActiveFilter ? clearFilter: undefined}
    hasActiveFilter={hasActiveFilter} />
    {loading && (
      <LoadingSpinner />
      )}
      {isMobile ? (
        <ContratosGridMobileComponent
        data={contratosData}
        onRowClick={handleRowClick}
        onDeleteClick={onDeleteClick}
        setSelectedId={setSelectedId}

        />
        ) : (
        <ContratosGridDesktopComponent
        data={contratosData}
        onRowClick={handleRowClick}
        onDeleteClick={onDeleteClick}
        setSelectedId={setSelectedId}

        />
        )}

        <ContratosWindow
        isOpen={showInc}
        onClose={handleClose}
        dimensions={dimensions}
        onSuccess={handleSuccess}
        onError={handleError}
        selectedContratos={selectedContratos}
        />

        <ConfirmationModal
        isOpen={isModalOpen}
        onConfirm={confirmDelete}
        onCancel={cancelDelete}
        message={`Deseja realmente excluir o registro?`}
        />
        <ErrorMessage
        mensagem={displayError}
        setErrorMessage={setErrorMessage}
        />
        <GenericFilterDialog
        isOpen={showSearch}
        onClose={handleCloseSearch}
        onConfirm={handleConfirmSearch}
        title='Filtrar Contratos'
        windowFilter={windowFilter}
        setWindowFilter={setWindowFilter}
        renderInputFilters={renderInputFilters}
        minWidth={480}
        confirmText='Buscar'
        cancelText='Cancelar'
        />
      </>
    );
  };
  export default ContratosGrid;