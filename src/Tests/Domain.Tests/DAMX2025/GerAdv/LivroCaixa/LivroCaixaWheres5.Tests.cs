// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class LivroCaixaWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFLivroCaixaFactory> _mockLivroCaixaFactory;
    private readonly Mock<FLivroCaixa> _mockFLivroCaixa;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly LivroCaixaWhere _livrocaixaWhere;
    public LivroCaixaWhereTests()
    {
        _mockLivroCaixaFactory = new Mock<IFLivroCaixaFactory>();
        _mockFLivroCaixa = new Mock<FLivroCaixa>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _livrocaixaWhere = new LivroCaixaWhere(_mockLivroCaixaFactory.Object);
    }

    public void Dispose()
    {
        _mockLivroCaixaFactory?.Reset();
        _mockFLivroCaixa?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "27/05/2022")
        };
    }

    private void SetupMockFLivroCaixa(bool? Previsto = false, int? IDDes = 1, int? Pessoal = 1, bool? Ajuste = true, int? IDHon = 1, int? IDHonParc = 1, bool? IDHonSuc = false, string? Data = "27/05/2022", int? Processo = 1, decimal? Valor = 0m, bool? Tipo = true, string? Historico = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", int? Grupo = 1)
    {
        _mockFLivroCaixa.Setup(f => f.FPrevisto).Returns(Previsto ?? false);
        _mockFLivroCaixa.Setup(f => f.FIDDes).Returns(IDDes ?? 0);
        _mockFLivroCaixa.Setup(f => f.FPessoal).Returns(Pessoal ?? 0);
        _mockFLivroCaixa.Setup(f => f.FAjuste).Returns(Ajuste ?? false);
        _mockFLivroCaixa.Setup(f => f.FIDHon).Returns(IDHon ?? 0);
        _mockFLivroCaixa.Setup(f => f.FIDHonParc).Returns(IDHonParc ?? 0);
        _mockFLivroCaixa.Setup(f => f.FIDHonSuc).Returns(IDHonSuc ?? false);
        _mockFLivroCaixa.Setup(f => f.FData).Returns(Data ?? string.Empty);
        _mockFLivroCaixa.Setup(f => f.FProcesso).Returns(Processo ?? 0);
        _mockFLivroCaixa.Setup(f => f.FValor).Returns(Valor ?? 0m);
        _mockFLivroCaixa.Setup(f => f.FTipo).Returns(Tipo ?? false);
        _mockFLivroCaixa.Setup(f => f.FHistorico).Returns(Historico ?? string.Empty);
        _mockFLivroCaixa.Setup(f => f.FGrupo).Returns(Grupo ?? 0);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFLivroCaixaFactory>();
        // Act
        var livrocaixaWhere = new LivroCaixaWhere(mockFactory.Object);
        // Assert
        livrocaixaWhere.Should().NotBeNull();
        livrocaixaWhere.Should().BeAssignableTo<ILivroCaixaWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFLivroCaixaFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new LivroCaixaWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnLivroCaixaResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFLivroCaixa();
        _mockLivroCaixaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFLivroCaixa.Object);
        // Act
        var result = _livrocaixaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.Previsto.Should().Be(false);
        result.IDDes.Should().Be(1);
        result.Pessoal.Should().Be(1);
        result.Ajuste.Should().Be(true);
        result.IDHon.Should().Be(1);
        result.IDHonParc.Should().Be(1);
        result.IDHonSuc.Should().Be(false);
        result.Data.Should().Be("27/05/2022");
        result.Processo.Should().Be(1);
        result.Valor.Should().Be(0m);
        result.Tipo.Should().Be(true);
        result.Historico.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Grupo.Should().Be(1);
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFLivroCaixa(Previsto: null, IDDes: null, Pessoal: null, Ajuste: null, IDHon: null, IDHonParc: null, IDHonSuc: null, Data: null, Processo: null, Valor: null, Tipo: null, Historico: null, Grupo: null);
        _mockLivroCaixaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFLivroCaixa.Object);
        // Act
        var result = _livrocaixaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Previsto.Should().Be(false);
        result.IDDes.Should().Be(0);
        result.Pessoal.Should().Be(0);
        result.Ajuste.Should().Be(false);
        result.IDHon.Should().Be(0);
        result.IDHonParc.Should().Be(0);
        result.IDHonSuc.Should().Be(false);
        result.Data.Should().Be(string.Empty);
        result.Processo.Should().Be(0);
        result.Valor.Should().Be(0m);
        result.Tipo.Should().Be(false);
        result.Historico.Should().Be(string.Empty);
        result.Grupo.Should().Be(0);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFLivroCaixa();
        _mockLivroCaixaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFLivroCaixa.Object);
        // Act
        var result = _livrocaixaWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockLivroCaixaFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFLivroCaixa();
        _mockLivroCaixaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFLivroCaixa.Object);
        // Act
        var result = _livrocaixaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockLivroCaixaFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFLivroCaixa();
        _mockLivroCaixaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFLivroCaixa.Object);
        // Act
        var result = _livrocaixaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockLivroCaixaFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFLivroCaixa();
        _mockLivroCaixaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFLivroCaixa.Object);
        // Act
        _livrocaixaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockLivroCaixaFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFLivroCaixaInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFLivroCaixa.Setup(f => f.Dispose());
        SetupMockFLivroCaixa();
        _mockLivroCaixaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFLivroCaixa.Object);
        // Act
        _livrocaixaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFLivroCaixa.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockLivroCaixaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _livrocaixaWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFLivroCaixa(Previsto: false, IDDes: 1, Pessoal: 1, Ajuste: true, IDHon: 1, IDHonParc: 1, IDHonSuc: false, Data: "27/05/2022", Processo: 1, Valor: 0m, Tipo: true, Historico: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", Grupo: 1);
        _mockLivroCaixaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFLivroCaixa.Object);
        // Act
        var result = _livrocaixaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.Previsto.Should().Be(false);
        result.IDDes.Should().Be(1);
        result.Pessoal.Should().Be(1);
        result.Ajuste.Should().Be(true);
        result.IDHon.Should().Be(1);
        result.IDHonParc.Should().Be(1);
        result.IDHonSuc.Should().Be(false);
        result.Data.Should().Be("27/05/2022");
        result.Processo.Should().Be(1);
        result.Valor.Should().Be(0m);
        result.Tipo.Should().Be(true);
        result.Historico.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Grupo.Should().Be(1);
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "Data = @{DBLivroCaixaDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBLivroCaixaDicInfo.CampoNome}", "27/05/2022"),
        };
        SetupMockFLivroCaixa();
        _mockLivroCaixaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFLivroCaixa.Object);
        // Act
        _livrocaixaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockLivroCaixaFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBLivroCaixaDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }
#region DateTime Tests
#endregion
#endregion
}