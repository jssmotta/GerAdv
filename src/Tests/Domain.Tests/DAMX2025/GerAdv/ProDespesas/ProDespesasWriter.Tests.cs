// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class ProDespesasWriterTests
{
    private readonly Mock<IFProDespesasFactory> _mockProDespesasFactory;
    private readonly Mock<FProDespesas> _mockFProDespesas;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly ProDespesasWriter _prodespesasWriter;
    public ProDespesasWriterTests()
    {
        _mockProDespesasFactory = new Mock<IFProDespesasFactory>();
        _mockFProDespesas = new Mock<FProDespesas>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _prodespesasWriter = new ProDespesasWriter(_mockProDespesasFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var prodespesas = CreateValidProDespesasModel();
        prodespesas.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockProDespesasFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFProDespesas.Object);
        _mockFProDespesas.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _prodespesasWriter.WriteAsync(prodespesas, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFProDespesas.Object);
        _mockProDespesasFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockProDespesasFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFProDespesas.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var prodespesas = CreateValidProDespesasModel();
        prodespesas.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockProDespesasFactory.Setup(x => x.CreateFromIdAsync(prodespesas.Id, _mockConnection.Object)).ReturnsAsync(_mockFProDespesas.Object);
        _mockFProDespesas.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _prodespesasWriter.WriteAsync(prodespesas, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFProDespesas.Object);
        _mockProDespesasFactory.Verify(x => x.CreateFromIdAsync(prodespesas.Id, _mockConnection.Object), Times.Once);
        _mockProDespesasFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFProDespesas.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var prodespesas = CreateValidProDespesasModel();
        var auditorQuem = 99;
        _mockProDespesasFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFProDespesas.Object);
        _mockFProDespesas.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _prodespesasWriter.WriteAsync(prodespesas, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFProDespesas.Object);
        _mockFProDespesas.VerifySet(x => x.FLigacaoID = prodespesas.LigacaoID, Times.Once);
        _mockFProDespesas.VerifySet(x => x.FCliente = prodespesas.Cliente, Times.Once);
        _mockFProDespesas.VerifySet(x => x.FCorrigido = prodespesas.Corrigido, Times.Once);
        _mockFProDespesas.VerifySet(x => x.FData = prodespesas.Data, Times.Once);
        _mockFProDespesas.VerifySet(x => x.FValorOriginal = prodespesas.ValorOriginal, Times.Once);
        _mockFProDespesas.VerifySet(x => x.FProcesso = prodespesas.Processo, Times.Once);
        _mockFProDespesas.VerifySet(x => x.FQuitado = prodespesas.Quitado, Times.Once);
        _mockFProDespesas.VerifySet(x => x.FDataCorrecao = prodespesas.DataCorrecao.ToString(), Times.Once);
        _mockFProDespesas.VerifySet(x => x.FValor = prodespesas.Valor, Times.Once);
        _mockFProDespesas.VerifySet(x => x.FTipo = prodespesas.Tipo, Times.Once);
        _mockFProDespesas.VerifySet(x => x.FHistorico = prodespesas.Historico, Times.Once);
        _mockFProDespesas.VerifySet(x => x.FLivroCaixa = prodespesas.LivroCaixa, Times.Once);
        _mockFProDespesas.VerifySet(x => x.FGUID = prodespesas.GUID, Times.Once);
        _mockFProDespesas.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithNullDataCorrecao_ShouldNotSetFDataCorrecao()
    {
        // Arrange
        var prodespesas = CreateValidProDespesasModel();
        prodespesas.DataCorrecao = null;
        var auditorQuem = 123;
        _mockProDespesasFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFProDespesas.Object);
        _mockFProDespesas.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _prodespesasWriter.WriteAsync(prodespesas, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFProDespesas.VerifySet(x => x.FDataCorrecao = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var prodespesas = CreateValidProDespesasModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockProDespesasFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _prodespesasWriter.WriteAsync(prodespesas, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var prodespesas = CreateValidProDespesasModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockProDespesasFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFProDespesas.Object);
        _mockFProDespesas.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _prodespesasWriter.WriteAsync(prodespesas, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var prodespesasResponse = new ProDespesasResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockProDespesasFactory.Setup(x => x.DeleteAsync(operadorId, prodespesasResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _prodespesasWriter.Delete(prodespesasResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockProDespesasFactory.Verify(x => x.DeleteAsync(operadorId, prodespesasResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var prodespesasResponse = new ProDespesasResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockProDespesasFactory.Setup(x => x.DeleteAsync(operadorId, prodespesasResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _prodespesasWriter.Delete(prodespesasResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var prodespesasResponse = new ProDespesasResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockProDespesasFactory.Setup(x => x.DeleteAsync(operadorId, prodespesasResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _prodespesasWriter.Delete(prodespesasResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new ProDespesasWriter(_mockProDespesasFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new ProDespesasWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.ProDespesas CreateValidProDespesasModel()
    {
        return new Models.ProDespesas
        {
            Id = 0,
            LigacaoID = 1,
            Cliente = 1,
            Corrigido = false,
            Data = "27/05/2022",
            ValorOriginal = 1m,
            Processo = 1,
            Quitado = 1,
            DataCorrecao = "24/04/1975",
            Valor = 1m,
            Tipo = false,
            Historico = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            LivroCaixa = false,
            GUID = Guid.NewGuid().ToString()
        };
    }
#endregion
}