// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IGruposEmpresasCliValidation
{
    Task<bool> ValidateReg(Models.GruposEmpresasCli reg, IGruposEmpresasCliService service, IGruposEmpresasReader gruposempresasReader, IClientesReader clientesReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, IGruposEmpresasCliService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class GruposEmpresasCliValidation : IGruposEmpresasCliValidation
{
    public async Task<bool> CanDelete(int id, IGruposEmpresasCliService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.GruposEmpresasCli reg)
    {
        return true;
    }

    public async Task<bool> ValidateReg(Models.GruposEmpresasCli reg, IGruposEmpresasCliService service, IGruposEmpresasReader gruposempresasReader, IClientesReader clientesReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        // GruposEmpresas
        if (!reg.Grupo.IsEmptyIDNumber())
        {
            var regGruposEmpresas = await gruposempresasReader.Read(reg.Grupo, oCnn);
            if (regGruposEmpresas == null || regGruposEmpresas.Id != reg.Grupo)
            {
                throw new SGValidationException($"Grupos Empresas não encontrado ({regGruposEmpresas?.Id}).");
            }
        }

        // Clientes
        if (!reg.Cliente.IsEmptyIDNumber())
        {
            var regClientes = await clientesReader.Read(reg.Cliente, oCnn);
            if (regClientes == null || regClientes.Id != reg.Cliente)
            {
                throw new SGValidationException($"Clientes não encontrado ({regClientes?.Id}).");
            }
        }

        return true;
    }
}