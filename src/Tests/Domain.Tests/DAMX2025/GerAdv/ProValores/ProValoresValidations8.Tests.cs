// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class ProValoresValidationTests : IDisposable
{
    private readonly ProValoresValidation _validation;
    private readonly Mock<IProValoresService> _mockProValoresService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly ProValoresService _service;
    private readonly string _validUri = "test-uri";
    public ProValoresValidationTests()
    {
        _validation = new ProValoresValidation();
        _mockProValoresService = new Mock<IProValoresService>();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

#region Class Structure Tests
    [Fact]
    public void ProValoresValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IProValoresValidation>();
    }

    [Fact]
    public void ProValoresValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(ProValoresValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void ProValoresValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(ProValoresValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private static Models.ProValores CreateValidProValores()
    {
        return new Models.ProValores
        {
            Id = 1,
            Guid = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Processo = 1,
            TipoValorProcesso = 1,
            Indice = "AAAAAAAAAAAAAAAAAA",
            Ignorar = false,
            Data = "27/05/2022",
            ValorOriginal = 1m,
            PercMulta = 1m,
            ValorMulta = 1m,
            PercJuros = 1m,
            ValorOriginalCorrigidoIndice = 1m,
            ValorMultaCorrigido = 1m,
            ValorJurosCorrigido = 1m,
            ValorFinal = 1m,
            DataUltimaCorrecao = "24/04/1975"
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockProValoresService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterProValores>(), It.IsAny<string>())).ReturnsAsync([]);
    // Setup other mocks but don't override the ProValoress service mock
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockProValoresService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterProValores>(), It.IsAny<string>())).ReturnsAsync([]);
    // Setup other mocks but don't override the ProValoress service mock
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var provalores = new Models.ProValores
        {
            Id = 1,
            Guid = null,
            Processo = 1,
            TipoValorProcesso = 1,
            Indice = "AAAAAAAAAAAAAAAAAA",
            Ignorar = false,
            Data = "27/05/2022",
            ValorOriginal = 1m,
            DataUltimaCorrecao = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(provalores, _mockProValoresService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockProValoresService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region ValidateReg Required Indice Method Tests 
    [Fact]
    public async Task ValidateReg_WithEmptyIndice_ShouldThrowSGValidationException()
    {
        // Arrange
        var provalores = CreateValidProValores();
        provalores.Indice = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(provalores, _mockProValoresService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullIndice_ShouldThrowSGValidationException()
    {
        // Arrange
        var provalores = CreateValidProValores();
        provalores.Indice = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(provalores, _mockProValoresService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataIndice_ShouldReturnTrue()
    {
        // Arrange
        var provalores = CreateValidProValores();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(provalores, _mockProValoresService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceIndice_ShouldThrowSGValidationException()
    {
        // Arrange
        var provalores = CreateValidProValores();
        provalores.Indice = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(provalores, _mockProValoresService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
#region ValidateReg Required Data Method Tests 
    [Fact]
    public async Task ValidateReg_WithEmptyData_ShouldThrowSGValidationException()
    {
        // Arrange
        var provalores = CreateValidProValores();
        provalores.Data = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(provalores, _mockProValoresService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullData_ShouldThrowSGValidationException()
    {
        // Arrange
        var provalores = CreateValidProValores();
        provalores.Data = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(provalores, _mockProValoresService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataData_ShouldReturnTrue()
    {
        // Arrange
        var provalores = CreateValidProValores();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(provalores, _mockProValoresService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceData_ShouldThrowSGValidationException()
    {
        // Arrange
        var provalores = CreateValidProValores();
        provalores.Data = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(provalores, _mockProValoresService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
#region DataUltimaCorrecao Validation Tests
    [Theory]
    [InlineData("01/01/1899")]
    [InlineData("31/12/1899")]
    public async Task ValidateReg_WithDataUltimaCorrecaoBeforeMinDate_ShouldThrowSGValidationException(string invalidDate)
    {
        // Arrange
        var provalores = CreateValidProValores();
        provalores.DataUltimaCorrecao = invalidDate;
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(provalores, _mockProValoresService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("01/01/1900.");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataUltimaCorrecao_ShouldPass()
    {
        // Arrange
        var provalores = CreateValidProValores();
        provalores.DataUltimaCorrecao = "01/01/1990";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(provalores, _mockProValoresService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullDataUltimaCorrecao_ShouldPass()
    {
        // Arrange
        var provalores = CreateValidProValores();
        provalores.DataUltimaCorrecao = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(provalores, _mockProValoresService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithInvalidDateDataUltimaCorrecaoFormat_ShouldPass()
    {
        // Arrange
        var provalores = CreateValidProValores();
        provalores.DataUltimaCorrecao = "invalid-date";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(provalores, _mockProValoresService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue(); // Invalid format is ignored, not validated
    }

    [Fact]
    public async Task ValidateReg_WithEmptyDataUltimaCorrecao_ShouldPass()
    {
        // Arrange
        var provalores = CreateValidProValores();
        provalores.DataUltimaCorrecao = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(provalores, _mockProValoresService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}