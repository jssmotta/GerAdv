// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
import { useState } from 'react';
import InputInput from '@/app/components/Inputs/InputInput';
import InputDate from '@/app/components/Inputs/InputDate';
import InputHora from '@/app/components/Inputs/InputHora';
import InputValor from '@/app/components/Inputs/InputValor';
import InputComboFilterYesNo from '@/app/components/Inputs/InputComboFilterYesNo';
import { FilterHandlers } from '@/app/components/Cruds/GenericFilterDialog';
import { FilterAgendaRelatorio } from '@/app/GerAdv_TS/AgendaRelatorio/Filters/AgendaRelatorio';
interface UseAgendaRelatorioFilterProps {
  handleFetchWithFilter: (filtro?: FilterAgendaRelatorio | undefined | null) => Promise<void>;
}
interface UseAgendaRelatorioFilterReturn {
  // Estados
  showSearch: boolean;
  windowFilter: FilterAgendaRelatorio;
  setWindowFilter: React.Dispatch<React.SetStateAction<FilterAgendaRelatorio>>;
  // Handlers do Dialog
  handleSearch: () => void;
  handleCloseSearch: () => void;
  handleConfirmSearch: (filter: FilterAgendaRelatorio) => Promise<void>;
  // Render function
  renderInputFilters: (handlers: FilterHandlers<FilterAgendaRelatorio>) => React.ReactNode;
  // Utilitários
  clearFilter: () => void;
  hasActiveFilter: boolean;
}
export const useAgendaRelatorioFilter = ({ handleFetchWithFilter }: UseAgendaRelatorioFilterProps): UseAgendaRelatorioFilterReturn => {
  const [showSearch, setShowSearch] = useState(false);
  const [windowFilter, setWindowFilter] = useState<FilterAgendaRelatorio>({} as FilterAgendaRelatorio);
  // Handlers do Dialog
  const handleSearch = () => {
    setShowSearch(true);
    const filterWildechar = {...windowFilter, wildcardChar: '%' } as FilterAgendaRelatorio;
    setWindowFilter(filterWildechar);
  };
  const handleCloseSearch = () => {
    setShowSearch(false);
  };
  const handleConfirmSearch = async (filter: FilterAgendaRelatorio) => {
    await handleFetchWithFilter(filter);
  };
  // Função para limpar filtros
  const clearFilter = () => {
    setWindowFilter({});
    sessionStorage.removeItem(btoa('AgendaRelatorioFilter'));
    handleFetchWithFilter({});
  };
  // Verificar se há filtros ativos
  const hasActiveFilter = Object.values(windowFilter).some(value =>
    value !== undefined && value !== null && value !== '' && value !== -2147483648
  );
  // Função para renderizar os campos de filtro
  const renderInputFilters = (handlers: FilterHandlers<FilterAgendaRelatorio>) => (
  <>
  <InputDate
  type='text'
  id='vqadata'
  label='Data (igual ou início)'
  dataForm={null}
  className='inputSearch'
  name='vqadata'
  value={handlers.windowFilter?.vqadata ?? ''}
  onChange={(value: string) => handlers.handleDateChange('vqadata', value)}
  />
  <InputDate
  type='text'
  id='vqadata_end'
  label='Data (final)'
  dataForm={null}
  className='inputSearch'
  name='vqadata_end'
  value={handlers.windowFilter?.vqadata_end ?? ''}
  disabled={handlers.windowFilter?.vqadata ? false: true}
  onChange={(value: string) => handlers.handleDateChange('vqadata_end', value)}
  />
  <InputInput
  type='text'
  id='vqaprocesso'
  name='vqaprocesso'
  value={handlers.windowFilter?.vqaprocesso ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Processo'
  label='Processo (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='vqaprocesso_end'
  name='vqaprocesso_end'
  value={handlers.windowFilter?.vqaprocesso_end ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Processo final'
  label='Processo final'
  disabled={handlers.windowFilter?.vqaprocesso ? false: true}
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='xxxparanome'
  name='xxxparanome'
  value={handlers.windowFilter?.xxxparanome ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe ParaNome'
  label='ParaNome'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='xxxparapessoas'
  name='xxxparapessoas'
  value={handlers.windowFilter?.xxxparapessoas ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe ParaPessoas'
  label='ParaPessoas'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='xxxboxaudiencia'
  name='xxxboxaudiencia'
  value={handlers.windowFilter?.xxxboxaudiencia ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe BoxAudiencia'
  label='BoxAudiencia'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='xxxboxaudienciamobile'
  name='xxxboxaudienciamobile'
  value={handlers.windowFilter?.xxxboxaudienciamobile ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe BoxAudienciaMobile'
  label='BoxAudienciaMobile'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='xxxnomeadvogado'
  name='xxxnomeadvogado'
  value={handlers.windowFilter?.xxxnomeadvogado ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe NomeAdvogado'
  label='NomeAdvogado'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='xxxnomeforo'
  name='xxxnomeforo'
  value={handlers.windowFilter?.xxxnomeforo ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe NomeForo'
  label='NomeForo'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='xxxnomejustica'
  name='xxxnomejustica'
  value={handlers.windowFilter?.xxxnomejustica ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe NomeJustica'
  label='NomeJustica'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='xxxnomearea'
  name='xxxnomearea'
  value={handlers.windowFilter?.xxxnomearea ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe NomeArea'
  label='NomeArea'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='codigo_filtro'
  name='codigo_filtro'
  value={handlers.windowFilter?.codigo_filtro ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código do cadastro'
  label='Código (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='codigo_filtro_end'
  name='codigo_filtro_end'
  value={handlers.windowFilter?.codigo_filtro_end ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código final do cadastro'
  label='Código final'
  disabled={handlers.windowFilter?.codigo_filtro ? false: true}
  className='inputIncNome inputSearch'
  />
</>
);
return {
  // Estados
  showSearch, 
  windowFilter, 
  setWindowFilter, 
  // Handlers
  handleSearch, 
  handleCloseSearch, 
  handleConfirmSearch, 
  // Render function
  renderInputFilters, 
  // Utilitários
  clearFilter, 
  hasActiveFilter
};
};