// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IHorasTrabValidation
{
    Task<bool> ValidateReg(Models.HorasTrab reg, IHorasTrabService service, IClientesReader clientesReader, IProcessosReader processosReader, IAdvogadosReader advogadosReader, IFuncionariosReader funcionariosReader, IServicosReader servicosReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, IHorasTrabService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class HorasTrabValidation : IHorasTrabValidation
{
    public async Task<bool> CanDelete(int id, IHorasTrabService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.HorasTrab reg)
    {
        if (reg.HrIni.Length > 5)
            throw new SGValidationException($"HrIni deve ter no máximo 5 caracteres.");
        if (reg.HrFim.Length > 5)
            throw new SGValidationException($"HrFim deve ter no máximo 5 caracteres.");
        if (reg.Anexo.Length > 255)
            throw new SGValidationException($"Anexo deve ter no máximo 255 caracteres.");
        if (reg.AnexoComp.Length > 50)
            throw new SGValidationException($"AnexoComp deve ter no máximo 50 caracteres.");
        if (reg.AnexoUNC.Length > 255)
            throw new SGValidationException($"AnexoUNC deve ter no máximo 255 caracteres.");
        if (reg.GUID.Length > 100)
            throw new SGValidationException($"GUID deve ter no máximo 100 caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.HorasTrab reg, IHorasTrabService service, IClientesReader clientesReader, IProcessosReader processosReader, IAdvogadosReader advogadosReader, IFuncionariosReader funcionariosReader, IServicosReader servicosReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Data))
            throw new SGValidationException("Data é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        // Clientes
        if (!reg.Cliente.IsEmptyIDNumber())
        {
            var regClientes = await clientesReader.Read(reg.Cliente, oCnn);
            if (regClientes == null || regClientes.Id != reg.Cliente)
            {
                throw new SGValidationException($"Clientes não encontrado ({regClientes?.Id}).");
            }
        }

        // Processos
        if (!reg.Processo.IsEmptyIDNumber())
        {
            var regProcessos = await processosReader.Read(reg.Processo, oCnn);
            if (regProcessos == null || regProcessos.Id != reg.Processo)
            {
                throw new SGValidationException($"Processos não encontrado ({regProcessos?.Id}).");
            }
        }

        // Advogados
        if (!reg.Advogado.IsEmptyIDNumber())
        {
            var regAdvogados = await advogadosReader.Read(reg.Advogado, oCnn);
            if (regAdvogados == null || regAdvogados.Id != reg.Advogado)
            {
                throw new SGValidationException($"Advogados não encontrado ({regAdvogados?.Id}).");
            }
        }

        // Funcionarios
        if (!reg.Funcionario.IsEmptyIDNumber())
        {
            var regFuncionarios = await funcionariosReader.Read(reg.Funcionario, oCnn);
            if (regFuncionarios == null || regFuncionarios.Id != reg.Funcionario)
            {
                throw new SGValidationException($"Colaborador não encontrado ({regFuncionarios?.Id}).");
            }
        }

        // Servicos
        if (!reg.Servico.IsEmptyIDNumber())
        {
            var regServicos = await servicosReader.Read(reg.Servico, oCnn);
            if (regServicos == null || regServicos.Id != reg.Servico)
            {
                throw new SGValidationException($"Serviços não encontrado ({regServicos?.Id}).");
            }
        }

        return true;
    }
}