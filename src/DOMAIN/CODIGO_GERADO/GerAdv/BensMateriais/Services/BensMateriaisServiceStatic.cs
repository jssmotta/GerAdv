// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class BensMateriaisService
{
    private (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterBensMateriais filtro)
    {
        var parameters = new List<SqlParameter>();
        if (!string.IsNullOrEmpty(filtro.Nome))
        {
            parameters.Add(new($"@{nameof(DBBensMateriaisDicInfo.Nome)}", ApplyWildCard(filtro.WildcardChar, filtro.Nome)));
        }

        if (filtro.BensClassificacao != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBBensMateriaisDicInfo.BensClassificacao)}", filtro.BensClassificacao));
        }

        if (!filtro.DataCompra.IsEmptyDX())
        {
            if (DateTime.TryParse(filtro.DataCompra, out var dataParam))
                parameters.Add(new($"@{nameof(DBBensMateriaisDicInfo.DataCompra)}", dataParam));
        }

        if (!filtro.DataCompra_end.IsEmptyDX())
        {
            if (DateTime.TryParse(filtro.DataCompra_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBBensMateriaisDicInfo.DataCompra)}_end", dataParam));
        }

        if (!filtro.DataFimDaGarantia.IsEmptyDX())
        {
            if (DateTime.TryParse(filtro.DataFimDaGarantia, out var dataParam))
                parameters.Add(new($"@{nameof(DBBensMateriaisDicInfo.DataFimDaGarantia)}", dataParam));
        }

        if (!filtro.DataFimDaGarantia_end.IsEmptyDX())
        {
            if (DateTime.TryParse(filtro.DataFimDaGarantia_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBBensMateriaisDicInfo.DataFimDaGarantia)}_end", dataParam));
        }

        if (!string.IsNullOrEmpty(filtro.NFNRO))
        {
            parameters.Add(new($"@{nameof(DBBensMateriaisDicInfo.NFNRO)}", ApplyWildCard(filtro.WildcardChar, filtro.NFNRO)));
        }

        if (filtro.Fornecedor != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBBensMateriaisDicInfo.Fornecedor)}", filtro.Fornecedor));
        }

        if (filtro.ValorBem != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBBensMateriaisDicInfo.ValorBem)}", filtro.ValorBem));
        }

        if (filtro.ValorBem_end != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBBensMateriaisDicInfo.ValorBem)}_end", filtro.ValorBem_end));
        }

        if (!string.IsNullOrEmpty(filtro.NroSerieProduto))
        {
            parameters.Add(new($"@{nameof(DBBensMateriaisDicInfo.NroSerieProduto)}", ApplyWildCard(filtro.WildcardChar, filtro.NroSerieProduto)));
        }

        if (!string.IsNullOrEmpty(filtro.Comprador))
        {
            parameters.Add(new($"@{nameof(DBBensMateriaisDicInfo.Comprador)}", ApplyWildCard(filtro.WildcardChar, filtro.Comprador)));
        }

        if (filtro.Cidade != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBBensMateriaisDicInfo.Cidade)}", filtro.Cidade));
        }

        if (filtro.GarantiaLoja != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBBensMateriaisDicInfo.GarantiaLoja)}", filtro.GarantiaLoja));
        }

        if (!filtro.DataTerminoDaGarantiaDaLoja.IsEmptyDX())
        {
            if (DateTime.TryParse(filtro.DataTerminoDaGarantiaDaLoja, out var dataParam))
                parameters.Add(new($"@{nameof(DBBensMateriaisDicInfo.DataTerminoDaGarantiaDaLoja)}", dataParam));
        }

        if (!filtro.DataTerminoDaGarantiaDaLoja_end.IsEmptyDX())
        {
            if (DateTime.TryParse(filtro.DataTerminoDaGarantiaDaLoja_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBBensMateriaisDicInfo.DataTerminoDaGarantiaDaLoja)}_end", dataParam));
        }

        if (!string.IsNullOrEmpty(filtro.Observacoes))
        {
            parameters.Add(new($"@{nameof(DBBensMateriaisDicInfo.Observacoes)}", ApplyWildCard(filtro.WildcardChar, filtro.Observacoes)));
        }

        if (!string.IsNullOrEmpty(filtro.NomeVendedor))
        {
            parameters.Add(new($"@{nameof(DBBensMateriaisDicInfo.NomeVendedor)}", ApplyWildCard(filtro.WildcardChar, filtro.NomeVendedor)));
        }

        if (!string.IsNullOrEmpty(filtro.GUID))
        {
            parameters.Add(new($"@{nameof(DBBensMateriaisDicInfo.GUID)}", ApplyWildCard(filtro.WildcardChar, filtro.GUID)));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBBensMateriaisDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
        }

        if (filtro.Codigo_filtro_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBBensMateriaisDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
        }

        if (filtro.LogicalOperator.IsEmptyX() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        cWhere.Append(filtro.Nome.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBBensMateriaisDicInfo.PTabelaNome}].[{DBBensMateriaisDicInfo.Nome}]  {DevourerConsts.MsiCollate} like @{nameof(DBBensMateriaisDicInfo.Nome)}");
        cWhere.Append(filtro.BensClassificacao.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBBensMateriaisDicInfo.PTabelaNome}].[{DBBensMateriaisDicInfo.BensClassificacao}] = @{nameof(DBBensMateriaisDicInfo.BensClassificacao)}");
        if (!(filtro.DataCompra.IsEmptyDX()) && filtro.DataCompra_end.IsEmptyDX())
        {
            cWhere.Append(filtro.DataCompra.IsEmptyDX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBBensMateriaisDicInfo.PTabelaNome}].[{DBBensMateriaisDicInfo.DataCompra}], 103) = CONVERT(DATE, @{nameof(DBBensMateriaisDicInfo.DataCompra)}, 103)");
        }
        else if (!(filtro.DataCompra.IsEmptyDX()) && !(filtro.DataCompra_end.IsEmptyDX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBBensMateriaisDicInfo.PTabelaNome}].{DBBensMateriaisDicInfo.DataCompra} BETWEEN @{nameof(DBBensMateriaisDicInfo.DataCompra)} AND @{nameof(DBBensMateriaisDicInfo.DataCompra)}_end");
        }

        if (!(filtro.DataFimDaGarantia.IsEmptyDX()) && filtro.DataFimDaGarantia_end.IsEmptyDX())
        {
            cWhere.Append(filtro.DataFimDaGarantia.IsEmptyDX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBBensMateriaisDicInfo.PTabelaNome}].[{DBBensMateriaisDicInfo.DataFimDaGarantia}], 103) = CONVERT(DATE, @{nameof(DBBensMateriaisDicInfo.DataFimDaGarantia)}, 103)");
        }
        else if (!(filtro.DataFimDaGarantia.IsEmptyDX()) && !(filtro.DataFimDaGarantia_end.IsEmptyDX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBBensMateriaisDicInfo.PTabelaNome}].{DBBensMateriaisDicInfo.DataFimDaGarantia} BETWEEN @{nameof(DBBensMateriaisDicInfo.DataFimDaGarantia)} AND @{nameof(DBBensMateriaisDicInfo.DataFimDaGarantia)}_end");
        }

        cWhere.Append(filtro.NFNRO.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBBensMateriaisDicInfo.PTabelaNome}].[{DBBensMateriaisDicInfo.NFNRO}]  {DevourerConsts.MsiCollate} like @{nameof(DBBensMateriaisDicInfo.NFNRO)}");
        cWhere.Append(filtro.Fornecedor.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBBensMateriaisDicInfo.PTabelaNome}].[{DBBensMateriaisDicInfo.Fornecedor}] = @{nameof(DBBensMateriaisDicInfo.Fornecedor)}");
        if (!(filtro.ValorBem == decimal.MinValue) && filtro.ValorBem_end == decimal.MinValue)
        {
            cWhere.Append(filtro.ValorBem == decimal.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBBensMateriaisDicInfo.PTabelaNome}].[{DBBensMateriaisDicInfo.ValorBem}] = @{nameof(DBBensMateriaisDicInfo.ValorBem)}");
        }
        else if (!(filtro.ValorBem == decimal.MinValue) && !(filtro.ValorBem_end == decimal.MinValue))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBBensMateriaisDicInfo.PTabelaNome}].{DBBensMateriaisDicInfo.ValorBem} BETWEEN @{nameof(DBBensMateriaisDicInfo.ValorBem)} AND @{nameof(DBBensMateriaisDicInfo.ValorBem)}_end");
        }

        cWhere.Append(filtro.NroSerieProduto.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBBensMateriaisDicInfo.PTabelaNome}].[{DBBensMateriaisDicInfo.NroSerieProduto}]  {DevourerConsts.MsiCollate} like @{nameof(DBBensMateriaisDicInfo.NroSerieProduto)}");
        cWhere.Append(filtro.Comprador.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBBensMateriaisDicInfo.PTabelaNome}].[{DBBensMateriaisDicInfo.Comprador}]  {DevourerConsts.MsiCollate} like @{nameof(DBBensMateriaisDicInfo.Comprador)}");
        cWhere.Append(filtro.Cidade.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBBensMateriaisDicInfo.PTabelaNome}].[{DBBensMateriaisDicInfo.Cidade}] = @{nameof(DBBensMateriaisDicInfo.Cidade)}");
        cWhere.Append(filtro.GarantiaLoja == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBBensMateriaisDicInfo.PTabelaNome}].[{DBBensMateriaisDicInfo.GarantiaLoja}] = @{nameof(DBBensMateriaisDicInfo.GarantiaLoja)}");
        if (!(filtro.DataTerminoDaGarantiaDaLoja.IsEmptyDX()) && filtro.DataTerminoDaGarantiaDaLoja_end.IsEmptyDX())
        {
            cWhere.Append(filtro.DataTerminoDaGarantiaDaLoja.IsEmptyDX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBBensMateriaisDicInfo.PTabelaNome}].[{DBBensMateriaisDicInfo.DataTerminoDaGarantiaDaLoja}], 103) = CONVERT(DATE, @{nameof(DBBensMateriaisDicInfo.DataTerminoDaGarantiaDaLoja)}, 103)");
        }
        else if (!(filtro.DataTerminoDaGarantiaDaLoja.IsEmptyDX()) && !(filtro.DataTerminoDaGarantiaDaLoja_end.IsEmptyDX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBBensMateriaisDicInfo.PTabelaNome}].{DBBensMateriaisDicInfo.DataTerminoDaGarantiaDaLoja} BETWEEN @{nameof(DBBensMateriaisDicInfo.DataTerminoDaGarantiaDaLoja)} AND @{nameof(DBBensMateriaisDicInfo.DataTerminoDaGarantiaDaLoja)}_end");
        }

        cWhere.Append(filtro.Observacoes.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBBensMateriaisDicInfo.PTabelaNome}].[{DBBensMateriaisDicInfo.Observacoes}]  {DevourerConsts.MsiCollate} like @{nameof(DBBensMateriaisDicInfo.Observacoes)}");
        cWhere.Append(filtro.NomeVendedor.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBBensMateriaisDicInfo.PTabelaNome}].[{DBBensMateriaisDicInfo.NomeVendedor}]  {DevourerConsts.MsiCollate} like @{nameof(DBBensMateriaisDicInfo.NomeVendedor)}");
        cWhere.Append(filtro.GUID.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBBensMateriaisDicInfo.PTabelaNome}].[{DBBensMateriaisDicInfo.GUID}]  {DevourerConsts.MsiCollate} like @{nameof(DBBensMateriaisDicInfo.GUID)}");
        if (!(filtro.Codigo_filtro.IsEmptyX()) && filtro.Codigo_filtro_end.IsEmptyX())
        {
            cWhere.Append(filtro.Codigo_filtro.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBBensMateriaisDicInfo.PTabelaNome}].[{DBBensMateriaisDicInfo.CampoCodigo}] = @{nameof(DBBensMateriaisDicInfo.CampoCodigo)}");
        }
        else if (!(filtro.Codigo_filtro.IsEmptyX()) && !(filtro.Codigo_filtro_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBBensMateriaisDicInfo.PTabelaNome}].{DBBensMateriaisDicInfo.CampoCodigo} BETWEEN @{nameof(DBBensMateriaisDicInfo.CampoCodigo)} AND @{nameof(DBBensMateriaisDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private string ApplyWildCard(char wildcardChar, string value)
    {
        if (wildcardChar == '\0' || wildcardChar == ' ')
        {
            return value;
        }

        var result = $"{wildcardChar}{value.Replace(" ", wildcardChar.ToString())}{wildcardChar}";
        return result;
    }

    private string GetFilterHash(Filters.FilterBensMateriais? filtro)
    {
        if (filtro == null)
            return string.Empty;
        var json = JsonSerializer.Serialize(filtro);
        using var sha256 = SHA256.Create();
        var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(json));
        return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
    }

    public async Task<IEnumerable<NomeID>> GetListN([FromQuery] int max, [FromBody] Filters.FilterBensMateriais? filtro, [FromRoute, Required] string uri, CancellationToken token)
    {
        // Tracking: 20250606-0
        ThrowIfDisposed();
        var filtroResult = filtro == null ? null : WFiltro(filtro!);
        string where = filtroResult?.where ?? string.Empty;
        List<SqlParameter> parameters = filtroResult?.parametros ?? [];
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new Exception($"Coneão nula.");
        }

        var keyCache = await reader.ReadStringAuditor(max, uri, "", [], oCnn);
        var cacheKey = $"{uri}-BensMateriais-{max}-{where.GetHashCode()}-GetListN-{keyCache}";
        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId)
        };
        return await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataListNAsync(max, uri, where, parameters, cancel), entryOptions, cancellationToken: token) ?? [];
    }

    private async Task<IEnumerable<NomeID>> GetDataListNAsync(int max, string uri, string where, List<SqlParameter> parameters, CancellationToken token)
    {
        var result = new List<NomeID>(max);
        var lista = await reader.ListarN(max, uri, where, parameters, DBBensMateriaisDicInfo.CampoNome);
        foreach (var item in lista)
        {
            if (token.IsCancellationRequested)
                break;
            if (item?.FNome != null)
            {
                result.Add(new NomeID { Nome = item.FNome, ID = item.ID });
            }
        }

        return result;
    }

    private async Task<IEnumerable<BensMateriaisResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}