// 100% auto-generated by Source Genesys Core
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming
public partial class DBEnderecoSistema
{
    [XmlIgnore]
    private protected bool pFldFCadastro, pFldFCadastroExCod, pFldFTipoEnderecoSistema, pFldFProcesso, pFldFMotivo, pFldFContatoNoLocal, pFldFCidade, pFldFEndereco, pFldFBairro, pFldFCEP, pFldFFone, pFldFFax, pFldFObservacao;
    [XmlIgnore]
    private protected int m_FCadastro, m_FCadastroExCod, m_FTipoEnderecoSistema, m_FProcesso, m_FCidade;
    [XmlIgnore]
    private protected string? m_FMotivo, m_FContatoNoLocal, m_FEndereco, m_FBairro, m_FCEP, m_FFone, m_FFax, m_FObservacao;
    public int FCadastro
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCadastro;
        set
        {
            pFldFCadastro = pFldFCadastro || value != m_FCadastro;
            if (pFldFCadastro)
                m_FCadastro = value;
        }
    }

    public int FCadastroExCod
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCadastroExCod;
        set
        {
            pFldFCadastroExCod = pFldFCadastroExCod || value != m_FCadastroExCod;
            if (pFldFCadastroExCod)
                m_FCadastroExCod = value;
        }
    }

    public int FTipoEnderecoSistema
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FTipoEnderecoSistema;
        set
        {
            pFldFTipoEnderecoSistema = pFldFTipoEnderecoSistema || value != m_FTipoEnderecoSistema;
            if (pFldFTipoEnderecoSistema)
                m_FTipoEnderecoSistema = value;
        }
    }

    public int FProcesso
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FProcesso;
        set
        {
            pFldFProcesso = pFldFProcesso || value != m_FProcesso;
            if (pFldFProcesso)
                m_FProcesso = value;
        }
    }

    [StringLength(200, ErrorMessage = "A propriedade FMotivo da tabela EnderecoSistema deve ter no máximo 200 caracteres.")]
    public string? FMotivo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FMotivo ?? string.Empty;
        set
        {
            pFldFMotivo = pFldFMotivo || !(m_FMotivo ?? string.Empty).Equals(value);
            if (pFldFMotivo)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FMotivo = trimmed.Length > 200 ? trimmed.AsSpan(0, 200).ToString() : trimmed;
            }
        }
    }

    [StringLength(50, ErrorMessage = "A propriedade FContatoNoLocal da tabela EnderecoSistema deve ter no máximo 50 caracteres.")]
    public string? FContatoNoLocal
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FContatoNoLocal ?? string.Empty;
        set
        {
            pFldFContatoNoLocal = pFldFContatoNoLocal || !(m_FContatoNoLocal ?? string.Empty).Equals(value);
            if (pFldFContatoNoLocal)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FContatoNoLocal = trimmed.Length > 50 ? trimmed.AsSpan(0, 50).ToString() : trimmed;
            }
        }
    }

    public int FCidade
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCidade;
        set
        {
            pFldFCidade = pFldFCidade || value != m_FCidade;
            if (pFldFCidade)
                m_FCidade = value;
        }
    }

    [StringLength(150, ErrorMessage = "A propriedade FEndereco da tabela EnderecoSistema deve ter no máximo 150 caracteres.")]
    public string? FEndereco
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEndereco ?? string.Empty;
        set
        {
            pFldFEndereco = pFldFEndereco || !(m_FEndereco ?? string.Empty).Equals(value);
            if (pFldFEndereco)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FEndereco = trimmed.Length > 150 ? trimmed.AsSpan(0, 150).ToString() : trimmed;
            }
        }
    }

    [StringLength(50, ErrorMessage = "A propriedade FBairro da tabela EnderecoSistema deve ter no máximo 50 caracteres.")]
    public string? FBairro
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FBairro ?? string.Empty;
        set
        {
            pFldFBairro = pFldFBairro || !(m_FBairro ?? string.Empty).Equals(value);
            if (pFldFBairro)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FBairro = trimmed.Length > 50 ? trimmed.AsSpan(0, 50).ToString() : trimmed;
            }
        }
    }

    [StringLength(10, ErrorMessage = "A propriedade FCEP da tabela EnderecoSistema deve ter no máximo 10 caracteres.")]
    public string? FCEP
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCEP ?? string.Empty;
        set
        {
            pFldFCEP = pFldFCEP || !(m_FCEP ?? string.Empty).Equals(value);
            if (pFldFCEP)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FCEP = trimmed.Length > 10 ? trimmed.AsSpan(0, 10).ToString() : trimmed;
            }
        }
    }

    public string? FFone
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FFone ?? string.Empty;
        set
        {
            pFldFFone = pFldFFone || !(m_FFone ?? string.Empty).Equals(value);
            if (pFldFFone)
                m_FFone = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public string? FFax
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FFax ?? string.Empty;
        set
        {
            pFldFFax = pFldFFax || !(m_FFax ?? string.Empty).Equals(value);
            if (pFldFFax)
                m_FFax = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public string? FObservacao
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FObservacao ?? string.Empty;
        set
        {
            pFldFObservacao = pFldFObservacao || !(m_FObservacao ?? string.Empty).Equals(value);
            if (pFldFObservacao)
                m_FObservacao = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public bool IVisto() => m_FVisto;
    public int IQuemCad() => m_FQuemCad;
    public int IQuemAtu() => m_FQuemAtu;
    public DateTime IDtCad() => MDtCad;
    public DateTime IDtAtu() => MDtAtu;
    public string IDtCadDataX_DataHora() => MDtCadDataX_DataHora;
    public string IDtAtuDataX_DataHora() => MDtAtuDataX_DataHora;
    public void SetAuditor(int usuarioId) => AuditorQuem = usuarioId;
    public string IMDtCadDataX_DataHora() => MDtAtuDataX_DataHora;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITabelaName() => PTabelaNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoCodigo() => CampoCodigo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoNome() => CampoNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string IPrefixo() => PTabelaPrefixo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITypeFieldCode() => "int";
    public ImmutableArray<DBInfoSystem> IFieldsRaw() => throw new NotImplementedException();
    public ImmutableArray<DBInfoSystem> IPkFields() => throw new NotImplementedException();
    public ImmutableArray<DBInfoSystem> IPkIndicesFields() => throw new NotImplementedException();
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetID() => ID;
}