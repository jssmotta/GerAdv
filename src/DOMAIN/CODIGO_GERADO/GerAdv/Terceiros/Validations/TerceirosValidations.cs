// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface ITerceirosValidation
{
    Task<bool> ValidateReg(Models.Terceiros reg, ITerceirosService service, IPosicaoOutrasPartesReader posicaooutraspartesReader, ICidadeReader cidadeReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int? id, ITerceirosService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class TerceirosValidation : ITerceirosValidation
{
    public async Task<bool> CanDelete(int? id, ITerceirosService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id == null || id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id ?? default, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.Terceiros reg)
    {
        if (reg.Nome != null && reg.Nome.Length > DBTerceirosDicInfo.TerNome.FTamanho)
            throw new SGValidationException($"Nome deve ter no máximo {DBTerceirosDicInfo.TerNome.FTamanho} caracteres.");
        if (reg.Endereco != null && reg.Endereco.Length > DBTerceirosDicInfo.TerEndereco.FTamanho)
            throw new SGValidationException($"Endereco deve ter no máximo {DBTerceirosDicInfo.TerEndereco.FTamanho} caracteres.");
        if (reg.Bairro != null && reg.Bairro.Length > DBTerceirosDicInfo.TerBairro.FTamanho)
            throw new SGValidationException($"Bairro deve ter no máximo {DBTerceirosDicInfo.TerBairro.FTamanho} caracteres.");
        if (reg.CEP != null && reg.CEP.ClearInputCepCpfCnpj().Length > DBTerceirosDicInfo.TerCEP.FTamanho)
            throw new SGValidationException($"CEP deve ter no máximo {DBTerceirosDicInfo.TerCEP.FTamanho} caracteres.");
        if (reg.Class != null && reg.Class.Length > DBTerceirosDicInfo.TerClass.FTamanho)
            throw new SGValidationException($"Class deve ter no máximo {DBTerceirosDicInfo.TerClass.FTamanho} caracteres.");
        if (reg.VaraForoComarca != null && reg.VaraForoComarca.Length > DBTerceirosDicInfo.TerVaraForoComarca.FTamanho)
            throw new SGValidationException($"VaraForoComarca deve ter no máximo {DBTerceirosDicInfo.TerVaraForoComarca.FTamanho} caracteres.");
        if (reg.GUID != null && reg.GUID.Length > DBTerceirosDicInfo.TerGUID.FTamanho)
            throw new SGValidationException($"GUID deve ter no máximo {DBTerceirosDicInfo.TerGUID.FTamanho} caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.Terceiros reg, ITerceirosService service, IPosicaoOutrasPartesReader posicaooutraspartesReader, ICidadeReader cidadeReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Nome))
            throw new SGValidationException("Nome é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.EMail != null && reg.EMail.Length > 0 && !reg.EMail.IsValidEmail())
            throw new SGValidationException($"EMail em formato inválido.");
        // PosicaoOutrasPartes
        if (!reg.Situacao.IsEmptyIDNumber())
        {
            var regPosicaoOutrasPartes = await posicaooutraspartesReader.Read(reg.Situacao, oCnn);
            if (regPosicaoOutrasPartes == null || regPosicaoOutrasPartes.Id != reg.Situacao)
            {
                throw new SGValidationException($"Posicao Outras Partes não encontrado ({regPosicaoOutrasPartes?.Id}).");
            }
        }

        // Cidade
        if (!reg.Cidade.IsEmptyIDNumber())
        {
            var regCidade = await cidadeReader.Read(reg.Cidade, oCnn);
            if (regCidade == null || regCidade.Id != reg.Cidade)
            {
                throw new SGValidationException($"Cidade não encontrado ({regCidade?.Id}).");
            }
        }

        return true;
    }
}