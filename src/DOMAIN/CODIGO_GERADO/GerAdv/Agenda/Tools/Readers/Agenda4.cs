// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Readers;
public partial class AgendaReader(IFAgendaFactory agendaFactory) : IAgendaReader
{
    private readonly IFAgendaFactory _agendaFactory = agendaFactory;
    public async Task<IEnumerable<DBNomeID>> ListarN(int max, string uri, string cWhere, List<SqlParameter> parameters, string order) => await DevourerSqlData.ListarNomeID(BuildSqlQuery("ageCodigo, ageData", cWhere, order, max), parameters, uri, caching: DevourerOne.PCachingDefault, max: max);
    public async Task<IEnumerable<AgendaResponseAll>> Listar(int max, string uri, string cWhere, List<SqlParameter> parameters, string order, CancellationToken cancellationToken) => await ListarTabela(BuildSqlQuery(DBAgenda.CamposSqlX, cWhere, order, max), parameters, uri, caching: DevourerOne.PCachingDefault, max: max, cancellationToken: cancellationToken);
    private async Task<IEnumerable<AgendaResponseAll>> ListarTabela(string sql, List<SqlParameter> parameters, string uri, bool caching = DevourerOne.PCachingDefault, int max = 200, CancellationToken cancellationToken = default)
    {
        var result = new List<AgendaResponseAll>(max);
        await using var connection = Configuracoes.GetConnectionByUri(uri);
        await using var cmd = new SqlCommand(cmdText: ConfiguracoesDBT.CmdSql(sql), connection: connection?.InnerConnection)
        {
            CommandTimeout = 30
        };
        foreach (var param in parameters)
        {
            if (!cmd.Parameters.Contains(param.ParameterName))
            {
                var newParam = new SqlParameter(param.ParameterName, param.Value)
                {
                    SqlDbType = param.SqlDbType,
                    Direction = param.Direction,
                    Size = param.Size,
                    Precision = param.Precision,
                    Scale = param.Scale
                };
                cmd.Parameters.Add(newParam);
            }
        }

        await using var reader = await cmd.ExecuteReaderAsync(CommandBehavior.SingleResult);
        while (await reader.ReadAsync())
        {
            if (cancellationToken.IsCancellationRequested)
                return result;
            result.Add(ReadAll(_agendaFactory.CreateFromReader(reader), reader)!);
        }

        return result;
    }

    public async Task<AgendaResponse?> Read(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _agendaFactory.CreateFromIdAsync(id, oCnn);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public async Task<Models.Agenda?> ReadM(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _agendaFactory.CreateFromIdAsync(id, oCnn);
        var agenda = new Models.Agenda
        {
            Id = dbRec.ID,
            IDCOB = dbRec.FIDCOB,
            ClienteAvisado = dbRec.FClienteAvisado,
            RevisarP2 = dbRec.FRevisarP2,
            IDNE = dbRec.FIDNE,
            Cidade = dbRec.FCidade,
            Oculto = dbRec.FOculto,
            CartaPrecatoria = dbRec.FCartaPrecatoria,
            Revisar = dbRec.FRevisar,
            Advogado = dbRec.FAdvogado,
            EventoGerador = dbRec.FEventoGerador,
            Funcionario = dbRec.FFuncionario,
            Data = dbRec.FData ?? string.Empty,
            EventoPrazo = dbRec.FEventoPrazo,
            Compromisso = dbRec.FCompromisso ?? string.Empty,
            TipoCompromisso = dbRec.FTipoCompromisso,
            Cliente = dbRec.FCliente,
            Liberado = dbRec.FLiberado,
            Importante = dbRec.FImportante,
            Concluido = dbRec.FConcluido,
            Area = dbRec.FArea,
            Justica = dbRec.FJustica,
            Processo = dbRec.FProcesso,
            IDHistorico = dbRec.FIDHistorico,
            IDInsProcesso = dbRec.FIDInsProcesso,
            Usuario = dbRec.FUsuario,
            Preposto = dbRec.FPreposto,
            QuemID = dbRec.FQuemID,
            QuemCodigo = dbRec.FQuemCodigo,
            Status = dbRec.FStatus ?? string.Empty,
            Valor = dbRec.FValor,
            Decisao = dbRec.FDecisao ?? string.Empty,
            Sempre = dbRec.FSempre,
            PrazoDias = dbRec.FPrazoDias,
            ProtocoloIntegrado = dbRec.FProtocoloIntegrado,
            UsuarioCiente = dbRec.FUsuarioCiente,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FHrFinal, out DateTime XHrFinal))
        {
            agenda.HrFinal = dbRec.FHrFinal;
            agenda.HrFinal_date = XHrFinal;
        }

        if (DateTime.TryParse(dbRec.FEventoData, out DateTime XEventoData))
        {
            agenda.EventoData = dbRec.FEventoData;
            agenda.EventoData_date = XEventoData;
        }

        if (DateTime.TryParse(dbRec.FHora, out DateTime XHora))
        {
            agenda.Hora = dbRec.FHora;
            agenda.Hora_date = XHora;
        }

        if (DateTime.TryParse(dbRec.FDataInicioPrazo, out DateTime XDataInicioPrazo))
        {
            agenda.DataInicioPrazo = dbRec.FDataInicioPrazo;
            agenda.DataInicioPrazo_date = XDataInicioPrazo;
        }

        return agenda;
    }

    public AgendaResponse? Read(FAgenda dbRec, MsiSqlConnection oCnn)
    {
        return Read(dbRec);
    }

    public AgendaResponse? Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn)
    {
        using var dbRec = _agendaFactory.CreateFromParameters(parameters, oCnn, sqlWhere: where);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public AgendaResponse? Read(FAgenda dbRec) // Track 001.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var agenda = new AgendaResponse
        {
            Id = dbRec.ID,
            IDCOB = dbRec.FIDCOB,
            ClienteAvisado = dbRec.FClienteAvisado,
            RevisarP2 = dbRec.FRevisarP2,
            IDNE = dbRec.FIDNE,
            Cidade = dbRec.FCidade,
            Oculto = dbRec.FOculto,
            CartaPrecatoria = dbRec.FCartaPrecatoria,
            Revisar = dbRec.FRevisar,
            Advogado = dbRec.FAdvogado,
            EventoGerador = dbRec.FEventoGerador,
            Funcionario = dbRec.FFuncionario,
            Data = dbRec.FData ?? string.Empty,
            EventoPrazo = dbRec.FEventoPrazo,
            Compromisso = dbRec.FCompromisso ?? string.Empty,
            TipoCompromisso = dbRec.FTipoCompromisso,
            Cliente = dbRec.FCliente,
            Liberado = dbRec.FLiberado,
            Importante = dbRec.FImportante,
            Concluido = dbRec.FConcluido,
            Area = dbRec.FArea,
            Justica = dbRec.FJustica,
            Processo = dbRec.FProcesso,
            IDHistorico = dbRec.FIDHistorico,
            IDInsProcesso = dbRec.FIDInsProcesso,
            Usuario = dbRec.FUsuario,
            Preposto = dbRec.FPreposto,
            QuemID = dbRec.FQuemID,
            QuemCodigo = dbRec.FQuemCodigo,
            Status = dbRec.FStatus ?? string.Empty,
            Valor = dbRec.FValor,
            Decisao = dbRec.FDecisao ?? string.Empty,
            Sempre = dbRec.FSempre,
            PrazoDias = dbRec.FPrazoDias,
            ProtocoloIntegrado = dbRec.FProtocoloIntegrado,
            UsuarioCiente = dbRec.FUsuarioCiente,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FHrFinal, out DateTime XHrFinal))
        {
            agenda.HrFinal = dbRec.FHrFinal;
            agenda.HrFinal_date = XHrFinal;
        }

        if (DateTime.TryParse(dbRec.FEventoData, out DateTime XEventoData))
        {
            agenda.EventoData = dbRec.FEventoData;
            agenda.EventoData_date = XEventoData;
        }

        if (DateTime.TryParse(dbRec.FHora, out DateTime XHora))
        {
            agenda.Hora = dbRec.FHora;
            agenda.Hora_date = XHora;
        }

        if (DateTime.TryParse(dbRec.FDataInicioPrazo, out DateTime XDataInicioPrazo))
        {
            agenda.DataInicioPrazo = dbRec.FDataInicioPrazo;
            agenda.DataInicioPrazo_date = XDataInicioPrazo;
        }

        return agenda;
    }

    public AgendaResponse? Read(SG.GerAdv.DBAgenda dbRec) // Track 002.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var agenda = new AgendaResponse
        {
            Id = dbRec.ID,
            IDCOB = dbRec.FIDCOB,
            ClienteAvisado = dbRec.FClienteAvisado,
            RevisarP2 = dbRec.FRevisarP2,
            IDNE = dbRec.FIDNE,
            Cidade = dbRec.FCidade,
            Oculto = dbRec.FOculto,
            CartaPrecatoria = dbRec.FCartaPrecatoria,
            Revisar = dbRec.FRevisar,
            Advogado = dbRec.FAdvogado,
            EventoGerador = dbRec.FEventoGerador,
            Funcionario = dbRec.FFuncionario,
            Data = dbRec.FData ?? string.Empty,
            EventoPrazo = dbRec.FEventoPrazo,
            Compromisso = dbRec.FCompromisso ?? string.Empty,
            TipoCompromisso = dbRec.FTipoCompromisso,
            Cliente = dbRec.FCliente,
            Liberado = dbRec.FLiberado,
            Importante = dbRec.FImportante,
            Concluido = dbRec.FConcluido,
            Area = dbRec.FArea,
            Justica = dbRec.FJustica,
            Processo = dbRec.FProcesso,
            IDHistorico = dbRec.FIDHistorico,
            IDInsProcesso = dbRec.FIDInsProcesso,
            Usuario = dbRec.FUsuario,
            Preposto = dbRec.FPreposto,
            QuemID = dbRec.FQuemID,
            QuemCodigo = dbRec.FQuemCodigo,
            Status = dbRec.FStatus ?? string.Empty,
            Valor = dbRec.FValor,
            Decisao = dbRec.FDecisao ?? string.Empty,
            Sempre = dbRec.FSempre,
            PrazoDias = dbRec.FPrazoDias,
            ProtocoloIntegrado = dbRec.FProtocoloIntegrado,
            UsuarioCiente = dbRec.FUsuarioCiente,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FHrFinal, out DateTime XHrFinal))
        {
            agenda.HrFinal = dbRec.FHrFinal;
            agenda.HrFinal_date = XHrFinal;
        }

        if (DateTime.TryParse(dbRec.FEventoData, out DateTime XEventoData))
        {
            agenda.EventoData = dbRec.FEventoData;
            agenda.EventoData_date = XEventoData;
        }

        if (DateTime.TryParse(dbRec.FHora, out DateTime XHora))
        {
            agenda.Hora = dbRec.FHora;
            agenda.Hora_date = XHora;
        }

        if (DateTime.TryParse(dbRec.FDataInicioPrazo, out DateTime XDataInicioPrazo))
        {
            agenda.DataInicioPrazo = dbRec.FDataInicioPrazo;
            agenda.DataInicioPrazo_date = XDataInicioPrazo;
        }

        return agenda;
    }

    public AgendaResponseAll? ReadAll(FAgenda dbRec, IDataRecord dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var agenda = new AgendaResponseAll
        {
            Id = dbRec.ID,
            IDCOB = dbRec.FIDCOB,
            ClienteAvisado = dbRec.FClienteAvisado,
            RevisarP2 = dbRec.FRevisarP2,
            IDNE = dbRec.FIDNE,
            Cidade = dbRec.FCidade,
            Oculto = dbRec.FOculto,
            CartaPrecatoria = dbRec.FCartaPrecatoria,
            Revisar = dbRec.FRevisar,
            Advogado = dbRec.FAdvogado,
            EventoGerador = dbRec.FEventoGerador,
            Funcionario = dbRec.FFuncionario,
            Data = dbRec.FData ?? string.Empty,
            EventoPrazo = dbRec.FEventoPrazo,
            Compromisso = dbRec.FCompromisso ?? string.Empty,
            TipoCompromisso = dbRec.FTipoCompromisso,
            Cliente = dbRec.FCliente,
            Liberado = dbRec.FLiberado,
            Importante = dbRec.FImportante,
            Concluido = dbRec.FConcluido,
            Area = dbRec.FArea,
            Justica = dbRec.FJustica,
            Processo = dbRec.FProcesso,
            IDHistorico = dbRec.FIDHistorico,
            IDInsProcesso = dbRec.FIDInsProcesso,
            Usuario = dbRec.FUsuario,
            Preposto = dbRec.FPreposto,
            QuemID = dbRec.FQuemID,
            QuemCodigo = dbRec.FQuemCodigo,
            Status = dbRec.FStatus ?? string.Empty,
            Valor = dbRec.FValor,
            Decisao = dbRec.FDecisao ?? string.Empty,
            Sempre = dbRec.FSempre,
            PrazoDias = dbRec.FPrazoDias,
            ProtocoloIntegrado = dbRec.FProtocoloIntegrado,
            UsuarioCiente = dbRec.FUsuarioCiente,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FHrFinal, out DateTime XHrFinal))
        {
            agenda.HrFinal = dbRec.FHrFinal;
            agenda.HrFinal_date = XHrFinal;
        }

        if (DateTime.TryParse(dbRec.FEventoData, out DateTime XEventoData))
        {
            agenda.EventoData = dbRec.FEventoData;
            agenda.EventoData_date = XEventoData;
        }

        if (DateTime.TryParse(dbRec.FHora, out DateTime XHora))
        {
            agenda.Hora = dbRec.FHora;
            agenda.Hora_date = XHora;
        }

        if (DateTime.TryParse(dbRec.FDataInicioPrazo, out DateTime XDataInicioPrazo))
        {
            agenda.DataInicioPrazo = dbRec.FDataInicioPrazo;
            agenda.DataInicioPrazo_date = XDataInicioPrazo;
        }

        try
        {
            agenda.NomeCidade = dr[DBCidadeDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agenda.NomeAdvogados = dr[DBAdvogadosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agenda.NomeFuncionarios = dr[DBFuncionariosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agenda.DescricaoTipoCompromisso = dr[DBTipoCompromissoDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agenda.NomeClientes = dr[DBClientesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agenda.DescricaoArea = dr[DBAreaDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agenda.NomeJustica = dr[DBJusticaDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agenda.NomeOperador = dr[DBOperadorDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agenda.NomePrepostos = dr[DBPrepostosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return agenda;
    }

    public AgendaResponseAll? ReadAll(SG.GerAdv.DBAgenda dbRec, DataRow dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var agenda = new AgendaResponseAll
        {
            Id = dbRec.ID,
            IDCOB = dbRec.FIDCOB,
            ClienteAvisado = dbRec.FClienteAvisado,
            RevisarP2 = dbRec.FRevisarP2,
            IDNE = dbRec.FIDNE,
            Cidade = dbRec.FCidade,
            Oculto = dbRec.FOculto,
            CartaPrecatoria = dbRec.FCartaPrecatoria,
            Revisar = dbRec.FRevisar,
            Advogado = dbRec.FAdvogado,
            EventoGerador = dbRec.FEventoGerador,
            Funcionario = dbRec.FFuncionario,
            Data = dbRec.FData ?? string.Empty,
            EventoPrazo = dbRec.FEventoPrazo,
            Compromisso = dbRec.FCompromisso ?? string.Empty,
            TipoCompromisso = dbRec.FTipoCompromisso,
            Cliente = dbRec.FCliente,
            Liberado = dbRec.FLiberado,
            Importante = dbRec.FImportante,
            Concluido = dbRec.FConcluido,
            Area = dbRec.FArea,
            Justica = dbRec.FJustica,
            Processo = dbRec.FProcesso,
            IDHistorico = dbRec.FIDHistorico,
            IDInsProcesso = dbRec.FIDInsProcesso,
            Usuario = dbRec.FUsuario,
            Preposto = dbRec.FPreposto,
            QuemID = dbRec.FQuemID,
            QuemCodigo = dbRec.FQuemCodigo,
            Status = dbRec.FStatus ?? string.Empty,
            Valor = dbRec.FValor,
            Decisao = dbRec.FDecisao ?? string.Empty,
            Sempre = dbRec.FSempre,
            PrazoDias = dbRec.FPrazoDias,
            ProtocoloIntegrado = dbRec.FProtocoloIntegrado,
            UsuarioCiente = dbRec.FUsuarioCiente,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FHrFinal, out DateTime XHrFinal))
        {
            agenda.HrFinal = dbRec.FHrFinal;
            agenda.HrFinal_date = XHrFinal;
        }

        if (DateTime.TryParse(dbRec.FEventoData, out DateTime XEventoData))
        {
            agenda.EventoData = dbRec.FEventoData;
            agenda.EventoData_date = XEventoData;
        }

        if (DateTime.TryParse(dbRec.FHora, out DateTime XHora))
        {
            agenda.Hora = dbRec.FHora;
            agenda.Hora_date = XHora;
        }

        if (DateTime.TryParse(dbRec.FDataInicioPrazo, out DateTime XDataInicioPrazo))
        {
            agenda.DataInicioPrazo = dbRec.FDataInicioPrazo;
            agenda.DataInicioPrazo_date = XDataInicioPrazo;
        }

        try
        {
            agenda.NomeCidade = dr[DBCidadeDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agenda.NomeAdvogados = dr[DBAdvogadosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agenda.NomeFuncionarios = dr[DBFuncionariosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agenda.DescricaoTipoCompromisso = dr[DBTipoCompromissoDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agenda.NomeClientes = dr[DBClientesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agenda.DescricaoArea = dr[DBAreaDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agenda.NomeJustica = dr[DBJusticaDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agenda.NomeOperador = dr[DBOperadorDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agenda.NomePrepostos = dr[DBPrepostosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return agenda;
    }
}