// 100% auto-generated by Source Genesys Core
// copyright Â© 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming 1
public partial class DBOponentes
{
    public DBOponentes(DataRow? dbRec)
    {
        if (dbRec is null)
            return;
        InitFromRecord(name =>
        {
            try
            {
                return dbRec[name];
            }
            catch
            {
                return DBNull.Value;
            }
        });
    }

    public DBOponentes(SqlDataReader? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do Oponentes: {ex.Message}", ex);
        }
    }

    private void InitFromRecord(Func<string, object?> getValue)
    {
        if (DBNull.Value.Equals(getValue(CampoCodigo)))
            return;
        ID = Convert.ToInt32(getValue(CampoCodigo));
        // Checkpoint Carregar 
        try
        {
            if (!DBNull.Value.Equals(getValue(DBOponentesDicInfo.Adv)))
                m_FAdv = Convert.ToInt32(getValue(DBOponentesDicInfo.Adv));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOponentesDicInfo.Bold)))
                m_FBold = Convert.ToBoolean(getValue(DBOponentesDicInfo.Bold));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOponentesDicInfo.Cidade)))
                m_FCidade = Convert.ToInt32(getValue(DBOponentesDicInfo.Cidade));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOponentesDicInfo.DtAtu)))
                m_FDtAtu = Convert.ToDateTime(getValue(DBOponentesDicInfo.DtAtu));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOponentesDicInfo.DtCad)))
                m_FDtCad = Convert.ToDateTime(getValue(DBOponentesDicInfo.DtCad));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOponentesDicInfo.EMPCliente)))
                m_FEMPCliente = Convert.ToInt32(getValue(DBOponentesDicInfo.EMPCliente));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOponentesDicInfo.EMPFuncao)))
                m_FEMPFuncao = Convert.ToInt32(getValue(DBOponentesDicInfo.EMPFuncao));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOponentesDicInfo.Etiqueta)))
                m_FEtiqueta = Convert.ToBoolean(getValue(DBOponentesDicInfo.Etiqueta));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOponentesDicInfo.IDRep)))
                m_FIDRep = Convert.ToInt32(getValue(DBOponentesDicInfo.IDRep));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOponentesDicInfo.Juridica)))
                m_FJuridica = Convert.ToBoolean(getValue(DBOponentesDicInfo.Juridica));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOponentesDicInfo.QuemAtu)))
                m_FQuemAtu = Convert.ToInt32(getValue(DBOponentesDicInfo.QuemAtu));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOponentesDicInfo.QuemCad)))
                m_FQuemCad = Convert.ToInt32(getValue(DBOponentesDicInfo.QuemCad));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOponentesDicInfo.Sexo)))
                m_FSexo = Convert.ToBoolean(getValue(DBOponentesDicInfo.Sexo));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOponentesDicInfo.Tipo)))
                m_FTipo = Convert.ToBoolean(getValue(DBOponentesDicInfo.Tipo));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOponentesDicInfo.Top)))
                m_FTop = Convert.ToBoolean(getValue(DBOponentesDicInfo.Top));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOponentesDicInfo.Visto)))
                m_FVisto = Convert.ToBoolean(getValue(DBOponentesDicInfo.Visto));
        }
        catch
        {
        }

        try
        {
            m_FBairro = getValue(DBOponentesDicInfo.Bairro)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FCEP = getValue(DBOponentesDicInfo.CEP)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FClass = getValue(DBOponentesDicInfo.Class)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FCNPJ = getValue(DBOponentesDicInfo.CNPJ)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FContato = getValue(DBOponentesDicInfo.Contato)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FCPF = getValue(DBOponentesDicInfo.CPF)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FCTPSNumero = getValue(DBOponentesDicInfo.CTPSNumero)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FCTPSSerie = getValue(DBOponentesDicInfo.CTPSSerie)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FEMail = getValue(DBOponentesDicInfo.EMail)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FEndereco = getValue(DBOponentesDicInfo.Endereco)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FFax = getValue(DBOponentesDicInfo.Fax)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FFone = getValue(DBOponentesDicInfo.Fone)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FGUID = getValue(DBOponentesDicInfo.GUID)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FInscEst = getValue(DBOponentesDicInfo.InscEst)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FNome = getValue(DBOponentesDicInfo.Nome)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FObservacao = getValue(DBOponentesDicInfo.Observacao)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FPIS = getValue(DBOponentesDicInfo.PIS)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FRG = getValue(DBOponentesDicInfo.RG)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FSite = getValue(DBOponentesDicInfo.Site)?.ToString() ?? string.Empty;
        }
        catch
        {
        }
    }

    public void CarregarDadosBd(DataRow? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do Oponentes: {ex.Message}", ex);
        }
    }

    public void CarregarDadosBd(SqlDataReader? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do Oponentes: {ex.Message}", ex);
        }
    }
}