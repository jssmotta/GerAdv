// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IDadosProcuracaoValidation
{
    Task<bool> ValidateReg(Models.DadosProcuracao reg, IDadosProcuracaoService service, IClientesReader clientesReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, IDadosProcuracaoService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class DadosProcuracaoValidation : IDadosProcuracaoValidation
{
    public async Task<bool> CanDelete(int id, IDadosProcuracaoService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.DadosProcuracao reg)
    {
        if (reg.EstadoCivil != null && reg.EstadoCivil.Length > 100)
            throw new SGValidationException($"EstadoCivil deve ter no máximo 100 caracteres.");
        if (reg.Nacionalidade != null && reg.Nacionalidade.Length > 100)
            throw new SGValidationException($"Nacionalidade deve ter no máximo 100 caracteres.");
        if (reg.Profissao != null && reg.Profissao.Length > 100)
            throw new SGValidationException($"Profissao deve ter no máximo 100 caracteres.");
        if (reg.CTPS != null && reg.CTPS.Length > 100)
            throw new SGValidationException($"CTPS deve ter no máximo 100 caracteres.");
        if (reg.PisPasep != null && reg.PisPasep.Length > 100)
            throw new SGValidationException($"PisPasep deve ter no máximo 100 caracteres.");
        if (reg.GUID != null && reg.GUID.Length > 100)
            throw new SGValidationException($"GUID deve ter no máximo 100 caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.DadosProcuracao reg, IDadosProcuracaoService service, IClientesReader clientesReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.GUID))
            throw new SGValidationException("GUID é obrigatório");
        if (await IsDuplicado(reg, service, uri))
            throw new SGValidationException($"Dados Procuracao '{reg.GUID}'  - Cliente");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.Cliente == 0)
            throw new SGValidationException("Cliente é obrigatório.");
        if (reg.GUID.IsEmpty())
            throw new SGValidationException("GUID é obrigatório.");
        // Clientes
        {
            var regClientes = await clientesReader.Read(reg.Cliente, oCnn);
            if (regClientes == null || regClientes.Id != reg.Cliente)
            {
                throw new SGValidationException($"Clientes não encontrado ({regClientes?.Id}).");
            }
        }

        return true;
    }

    private async Task<bool> IsDuplicado(Models.DadosProcuracao reg, IDadosProcuracaoService service, string uri)
    {
        var existingDadosProcuracao = (await service.Filter(new Filters.FilterDadosProcuracao { Cliente = reg.Cliente }, uri)).FirstOrDefault(); // TRACK 10042025
        return existingDadosProcuracao != null && existingDadosProcuracao.Id > 0 && existingDadosProcuracao.Id != reg.Id;
    }
}