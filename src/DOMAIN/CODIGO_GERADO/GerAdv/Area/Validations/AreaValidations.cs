// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IAreaValidation
{
    Task<bool> ValidateReg(Models.Area reg, IAreaService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int? id, IAreaService service, IAcaoService acaoService, IAgendaService agendaService, IDivisaoTribunalService divisaotribunalService, IFaseService faseService, IObjetosService objetosService, ITipoRecursoService tiporecursoService, ITribunalService tribunalService, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class AreaValidation : IAreaValidation
{
    public async Task<bool> CanDelete(int? id, IAreaService service, IAcaoService acaoService, IAgendaService agendaService, IDivisaoTribunalService divisaotribunalService, IFaseService faseService, IObjetosService objetosService, ITipoRecursoService tiporecursoService, ITribunalService tribunalService, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id == null || id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id ?? default, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        var acaoExists0 = await acaoService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterAcao { Area = id ?? default }, uri);
        if (acaoExists0 != null && acaoExists0.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Acao associados a ele.");
        var agendaExists1 = await agendaService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterAgenda { Area = id ?? default }, uri);
        if (agendaExists1 != null && agendaExists1.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Compromisso associados a ele.");
        var divisaotribunalExists2 = await divisaotribunalService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterDivisaoTribunal { Area = id ?? default }, uri);
        if (divisaotribunalExists2 != null && divisaotribunalExists2.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Divisao Tribunal associados a ele.");
        var faseExists3 = await faseService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterFase { Area = id ?? default }, uri);
        if (faseExists3 != null && faseExists3.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Fase associados a ele.");
        var objetosExists4 = await objetosService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterObjetos { Area = id ?? default }, uri);
        if (objetosExists4 != null && objetosExists4.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Objetos associados a ele.");
        var tiporecursoExists5 = await tiporecursoService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterTipoRecurso { Area = id ?? default }, uri);
        if (tiporecursoExists5 != null && tiporecursoExists5.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Tipo Recurso associados a ele.");
        var tribunalExists6 = await tribunalService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterTribunal { Area = id ?? default }, uri);
        if (tribunalExists6 != null && tribunalExists6.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Tribunal associados a ele.");
        return true;
    }

    private bool ValidSizes(Models.Area reg)
    {
        if (reg.Descricao != null && reg.Descricao.Length > DBAreaDicInfo.AreDescricao.FTamanho)
            throw new SGValidationException($"Descricao deve ter no máximo {DBAreaDicInfo.AreDescricao.FTamanho} caracteres.");
        if (reg.GUID != null && reg.GUID.Length > DBAreaDicInfo.AreGUID.FTamanho)
            throw new SGValidationException($"GUID deve ter no máximo {DBAreaDicInfo.AreGUID.FTamanho} caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.Area reg, IAreaService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Descricao))
            throw new SGValidationException("Descrição é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        await Task.Delay(0);
        return true;
    }
}