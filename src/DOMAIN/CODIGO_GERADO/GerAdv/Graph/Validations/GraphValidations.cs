// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IGraphValidation
{
    Task<bool> ValidateReg(Models.Graph reg, IGraphService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int? id, IGraphService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class GraphValidation : IGraphValidation
{
    public async Task<bool> CanDelete(int? id, IGraphService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id == null || id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id ?? default, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.Graph reg)
    {
        if (reg.Tabela != null && reg.Tabela.Length > DBGraphDicInfo.GphTabela.FTamanho)
            throw new SGValidationException($"Tabela deve ter no máximo {DBGraphDicInfo.GphTabela.FTamanho} caracteres.");
        if (reg.GUID != null && reg.GUID.Length > DBGraphDicInfo.GphGUID.FTamanho)
            throw new SGValidationException($"GUID deve ter no máximo {DBGraphDicInfo.GphGUID.FTamanho} caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.Graph reg, IGraphService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.Tabela.IsEmpty())
            throw new SGValidationException("Tabela é obrigatório.");
        if (reg.TabelaId == 0)
            throw new SGValidationException("TabelaId é obrigatório.");
        if (reg.GUID.IsEmpty())
            throw new SGValidationException("GUID é obrigatório.");
        await Task.Delay(0);
        return true;
    }
}