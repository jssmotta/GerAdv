// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class ProValoresService
{
    private static (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterProValores filtro)
    {
        var parameters = new List<SqlParameter>();
        if (filtro.Processo != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProValoresDicInfo.Processo)}", filtro.Processo));
        }

        if (filtro.Processo_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProValoresDicInfo.Processo)}_end", filtro.Processo_end));
        }

        if (filtro.TipoValorProcesso != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProValoresDicInfo.TipoValorProcesso)}", filtro.TipoValorProcesso));
        }

        if (!string.IsNullOrEmpty(filtro.Indice))
        {
            parameters.Add(new($"@{nameof(DBProValoresDicInfo.Indice)}", ApplyWildCard(filtro.WildcardChar, filtro.Indice)));
        }

        if (filtro.Ignorar != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProValoresDicInfo.Ignorar)}", filtro.Ignorar));
        }

        if (!string.IsNullOrEmpty(filtro.Data))
        {
            parameters.Add(new($"@{nameof(DBProValoresDicInfo.Data)}", ApplyWildCard(filtro.WildcardChar, filtro.Data)));
        }

        if (filtro.ValorOriginal != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProValoresDicInfo.ValorOriginal)}", filtro.ValorOriginal));
        }

        if (filtro.ValorOriginal_end != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProValoresDicInfo.ValorOriginal)}_end", filtro.ValorOriginal_end));
        }

        if (filtro.PercMulta != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProValoresDicInfo.PercMulta)}", filtro.PercMulta));
        }

        if (filtro.PercMulta_end != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProValoresDicInfo.PercMulta)}_end", filtro.PercMulta_end));
        }

        if (filtro.ValorMulta != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProValoresDicInfo.ValorMulta)}", filtro.ValorMulta));
        }

        if (filtro.ValorMulta_end != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProValoresDicInfo.ValorMulta)}_end", filtro.ValorMulta_end));
        }

        if (filtro.PercJuros != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProValoresDicInfo.PercJuros)}", filtro.PercJuros));
        }

        if (filtro.PercJuros_end != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProValoresDicInfo.PercJuros)}_end", filtro.PercJuros_end));
        }

        if (filtro.ValorOriginalCorrigidoIndice != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProValoresDicInfo.ValorOriginalCorrigidoIndice)}", filtro.ValorOriginalCorrigidoIndice));
        }

        if (filtro.ValorOriginalCorrigidoIndice_end != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProValoresDicInfo.ValorOriginalCorrigidoIndice)}_end", filtro.ValorOriginalCorrigidoIndice_end));
        }

        if (filtro.ValorMultaCorrigido != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProValoresDicInfo.ValorMultaCorrigido)}", filtro.ValorMultaCorrigido));
        }

        if (filtro.ValorMultaCorrigido_end != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProValoresDicInfo.ValorMultaCorrigido)}_end", filtro.ValorMultaCorrigido_end));
        }

        if (filtro.ValorJurosCorrigido != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProValoresDicInfo.ValorJurosCorrigido)}", filtro.ValorJurosCorrigido));
        }

        if (filtro.ValorJurosCorrigido_end != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProValoresDicInfo.ValorJurosCorrigido)}_end", filtro.ValorJurosCorrigido_end));
        }

        if (filtro.ValorFinal != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProValoresDicInfo.ValorFinal)}", filtro.ValorFinal));
        }

        if (filtro.ValorFinal_end != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProValoresDicInfo.ValorFinal)}_end", filtro.ValorFinal_end));
        }

        if (!filtro.DataUltimaCorrecao.IsEmpty())
        {
            if (DateTime.TryParse(filtro.DataUltimaCorrecao, out var dataParam))
                parameters.Add(new($"@{nameof(DBProValoresDicInfo.DataUltimaCorrecao)}", dataParam));
        }

        if (!filtro.DataUltimaCorrecao_end.IsEmpty())
        {
            if (DateTime.TryParse(filtro.DataUltimaCorrecao_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBProValoresDicInfo.DataUltimaCorrecao)}_end", dataParam));
        }

        if (!string.IsNullOrEmpty(filtro.GUID))
        {
            parameters.Add(new($"@{nameof(DBProValoresDicInfo.GUID)}", ApplyWildCard(filtro.WildcardChar, filtro.GUID)));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProValoresDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
        }

        if (filtro.Codigo_filtro_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProValoresDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
        }

        if (filtro.LogicalOperator.IsEmpty() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        if (!filtro.Processo.IsEmpty() && filtro.Processo_end.IsEmpty())
        {
            cWhere.Append(filtro.Processo <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProValoresDicInfo.PTabelaNome}].[{DBProValoresDicInfo.Processo}] >= @{nameof(DBProValoresDicInfo.Processo)}");
        }
        else
        {
            cWhere.Append((filtro.Processo <= 0 && filtro.Processo_end <= 0) ? string.Empty : (!(filtro.Processo <= 0) && !(filtro.Processo_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.Processo} BETWEEN @{nameof(DBProValoresDicInfo.Processo)} AND @{nameof(DBProValoresDicInfo.Processo)}_end" : !(filtro.Processo <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.Processo} = @{nameof(DBProValoresDicInfo.Processo)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.Processo} <= @{nameof(DBProValoresDicInfo.Processo)}_end");
        }

        cWhere.Append(filtro.TipoValorProcesso <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProValoresDicInfo.PTabelaNome}].[{DBProValoresDicInfo.TipoValorProcesso}] = @{nameof(DBProValoresDicInfo.TipoValorProcesso)}");
        cWhere.Append(filtro.Indice.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProValoresDicInfo.PTabelaNome}].[{DBProValoresDicInfo.Indice}]  {DevourerConsts.MsiCollate} like @{nameof(DBProValoresDicInfo.Indice)}");
        cWhere.Append(filtro.Ignorar == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProValoresDicInfo.PTabelaNome}].[{DBProValoresDicInfo.Ignorar}] = @{nameof(DBProValoresDicInfo.Ignorar)}");
        cWhere.Append(filtro.Data.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProValoresDicInfo.PTabelaNome}].[{DBProValoresDicInfo.Data}]  {DevourerConsts.MsiCollate} like @{nameof(DBProValoresDicInfo.Data)}");
        if (!filtro.ValorOriginal.IsEmpty() && filtro.ValorOriginal_end.IsEmpty())
        {
            cWhere.Append(filtro.ValorOriginal == decimal.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProValoresDicInfo.PTabelaNome}].[{DBProValoresDicInfo.ValorOriginal}] >= @{nameof(DBProValoresDicInfo.ValorOriginal)}");
        }
        else
        {
            cWhere.Append((filtro.ValorOriginal == decimal.MinValue && filtro.ValorOriginal_end == decimal.MinValue) ? string.Empty : (!(filtro.ValorOriginal == decimal.MinValue) && !(filtro.ValorOriginal_end == decimal.MinValue)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.ValorOriginal} BETWEEN @{nameof(DBProValoresDicInfo.ValorOriginal)} AND @{nameof(DBProValoresDicInfo.ValorOriginal)}_end" : !(filtro.ValorOriginal == decimal.MinValue) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.ValorOriginal} = @{nameof(DBProValoresDicInfo.ValorOriginal)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.ValorOriginal} <= @{nameof(DBProValoresDicInfo.ValorOriginal)}_end");
        }

        if (!filtro.PercMulta.IsEmpty() && filtro.PercMulta_end.IsEmpty())
        {
            cWhere.Append(filtro.PercMulta == decimal.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProValoresDicInfo.PTabelaNome}].[{DBProValoresDicInfo.PercMulta}] >= @{nameof(DBProValoresDicInfo.PercMulta)}");
        }
        else
        {
            cWhere.Append((filtro.PercMulta == decimal.MinValue && filtro.PercMulta_end == decimal.MinValue) ? string.Empty : (!(filtro.PercMulta == decimal.MinValue) && !(filtro.PercMulta_end == decimal.MinValue)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.PercMulta} BETWEEN @{nameof(DBProValoresDicInfo.PercMulta)} AND @{nameof(DBProValoresDicInfo.PercMulta)}_end" : !(filtro.PercMulta == decimal.MinValue) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.PercMulta} = @{nameof(DBProValoresDicInfo.PercMulta)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.PercMulta} <= @{nameof(DBProValoresDicInfo.PercMulta)}_end");
        }

        if (!filtro.ValorMulta.IsEmpty() && filtro.ValorMulta_end.IsEmpty())
        {
            cWhere.Append(filtro.ValorMulta == decimal.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProValoresDicInfo.PTabelaNome}].[{DBProValoresDicInfo.ValorMulta}] >= @{nameof(DBProValoresDicInfo.ValorMulta)}");
        }
        else
        {
            cWhere.Append((filtro.ValorMulta == decimal.MinValue && filtro.ValorMulta_end == decimal.MinValue) ? string.Empty : (!(filtro.ValorMulta == decimal.MinValue) && !(filtro.ValorMulta_end == decimal.MinValue)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.ValorMulta} BETWEEN @{nameof(DBProValoresDicInfo.ValorMulta)} AND @{nameof(DBProValoresDicInfo.ValorMulta)}_end" : !(filtro.ValorMulta == decimal.MinValue) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.ValorMulta} = @{nameof(DBProValoresDicInfo.ValorMulta)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.ValorMulta} <= @{nameof(DBProValoresDicInfo.ValorMulta)}_end");
        }

        if (!filtro.PercJuros.IsEmpty() && filtro.PercJuros_end.IsEmpty())
        {
            cWhere.Append(filtro.PercJuros == decimal.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProValoresDicInfo.PTabelaNome}].[{DBProValoresDicInfo.PercJuros}] >= @{nameof(DBProValoresDicInfo.PercJuros)}");
        }
        else
        {
            cWhere.Append((filtro.PercJuros == decimal.MinValue && filtro.PercJuros_end == decimal.MinValue) ? string.Empty : (!(filtro.PercJuros == decimal.MinValue) && !(filtro.PercJuros_end == decimal.MinValue)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.PercJuros} BETWEEN @{nameof(DBProValoresDicInfo.PercJuros)} AND @{nameof(DBProValoresDicInfo.PercJuros)}_end" : !(filtro.PercJuros == decimal.MinValue) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.PercJuros} = @{nameof(DBProValoresDicInfo.PercJuros)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.PercJuros} <= @{nameof(DBProValoresDicInfo.PercJuros)}_end");
        }

        if (!filtro.ValorOriginalCorrigidoIndice.IsEmpty() && filtro.ValorOriginalCorrigidoIndice_end.IsEmpty())
        {
            cWhere.Append(filtro.ValorOriginalCorrigidoIndice == decimal.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProValoresDicInfo.PTabelaNome}].[{DBProValoresDicInfo.ValorOriginalCorrigidoIndice}] >= @{nameof(DBProValoresDicInfo.ValorOriginalCorrigidoIndice)}");
        }
        else
        {
            cWhere.Append((filtro.ValorOriginalCorrigidoIndice == decimal.MinValue && filtro.ValorOriginalCorrigidoIndice_end == decimal.MinValue) ? string.Empty : (!(filtro.ValorOriginalCorrigidoIndice == decimal.MinValue) && !(filtro.ValorOriginalCorrigidoIndice_end == decimal.MinValue)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.ValorOriginalCorrigidoIndice} BETWEEN @{nameof(DBProValoresDicInfo.ValorOriginalCorrigidoIndice)} AND @{nameof(DBProValoresDicInfo.ValorOriginalCorrigidoIndice)}_end" : !(filtro.ValorOriginalCorrigidoIndice == decimal.MinValue) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.ValorOriginalCorrigidoIndice} = @{nameof(DBProValoresDicInfo.ValorOriginalCorrigidoIndice)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.ValorOriginalCorrigidoIndice} <= @{nameof(DBProValoresDicInfo.ValorOriginalCorrigidoIndice)}_end");
        }

        if (!filtro.ValorMultaCorrigido.IsEmpty() && filtro.ValorMultaCorrigido_end.IsEmpty())
        {
            cWhere.Append(filtro.ValorMultaCorrigido == decimal.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProValoresDicInfo.PTabelaNome}].[{DBProValoresDicInfo.ValorMultaCorrigido}] >= @{nameof(DBProValoresDicInfo.ValorMultaCorrigido)}");
        }
        else
        {
            cWhere.Append((filtro.ValorMultaCorrigido == decimal.MinValue && filtro.ValorMultaCorrigido_end == decimal.MinValue) ? string.Empty : (!(filtro.ValorMultaCorrigido == decimal.MinValue) && !(filtro.ValorMultaCorrigido_end == decimal.MinValue)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.ValorMultaCorrigido} BETWEEN @{nameof(DBProValoresDicInfo.ValorMultaCorrigido)} AND @{nameof(DBProValoresDicInfo.ValorMultaCorrigido)}_end" : !(filtro.ValorMultaCorrigido == decimal.MinValue) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.ValorMultaCorrigido} = @{nameof(DBProValoresDicInfo.ValorMultaCorrigido)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.ValorMultaCorrigido} <= @{nameof(DBProValoresDicInfo.ValorMultaCorrigido)}_end");
        }

        if (!filtro.ValorJurosCorrigido.IsEmpty() && filtro.ValorJurosCorrigido_end.IsEmpty())
        {
            cWhere.Append(filtro.ValorJurosCorrigido == decimal.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProValoresDicInfo.PTabelaNome}].[{DBProValoresDicInfo.ValorJurosCorrigido}] >= @{nameof(DBProValoresDicInfo.ValorJurosCorrigido)}");
        }
        else
        {
            cWhere.Append((filtro.ValorJurosCorrigido == decimal.MinValue && filtro.ValorJurosCorrigido_end == decimal.MinValue) ? string.Empty : (!(filtro.ValorJurosCorrigido == decimal.MinValue) && !(filtro.ValorJurosCorrigido_end == decimal.MinValue)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.ValorJurosCorrigido} BETWEEN @{nameof(DBProValoresDicInfo.ValorJurosCorrigido)} AND @{nameof(DBProValoresDicInfo.ValorJurosCorrigido)}_end" : !(filtro.ValorJurosCorrigido == decimal.MinValue) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.ValorJurosCorrigido} = @{nameof(DBProValoresDicInfo.ValorJurosCorrigido)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.ValorJurosCorrigido} <= @{nameof(DBProValoresDicInfo.ValorJurosCorrigido)}_end");
        }

        if (!filtro.ValorFinal.IsEmpty() && filtro.ValorFinal_end.IsEmpty())
        {
            cWhere.Append(filtro.ValorFinal == decimal.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProValoresDicInfo.PTabelaNome}].[{DBProValoresDicInfo.ValorFinal}] >= @{nameof(DBProValoresDicInfo.ValorFinal)}");
        }
        else
        {
            cWhere.Append((filtro.ValorFinal == decimal.MinValue && filtro.ValorFinal_end == decimal.MinValue) ? string.Empty : (!(filtro.ValorFinal == decimal.MinValue) && !(filtro.ValorFinal_end == decimal.MinValue)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.ValorFinal} BETWEEN @{nameof(DBProValoresDicInfo.ValorFinal)} AND @{nameof(DBProValoresDicInfo.ValorFinal)}_end" : !(filtro.ValorFinal == decimal.MinValue) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.ValorFinal} = @{nameof(DBProValoresDicInfo.ValorFinal)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.ValorFinal} <= @{nameof(DBProValoresDicInfo.ValorFinal)}_end");
        }

        if (!filtro.DataUltimaCorrecao.IsEmpty() && filtro.DataUltimaCorrecao_end.IsEmpty())
        {
            cWhere.Append(filtro.DataUltimaCorrecao.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBProValoresDicInfo.PTabelaNome}].[{DBProValoresDicInfo.DataUltimaCorrecao}], 103) >= CONVERT(DATE, @{nameof(DBProValoresDicInfo.DataUltimaCorrecao)}, 103)");
        }
        else
        {
            cWhere.Append((filtro.DataUltimaCorrecao.IsEmpty() && filtro.DataUltimaCorrecao_end.IsEmpty()) ? string.Empty : (!(filtro.DataUltimaCorrecao.IsEmpty()) && !(filtro.DataUltimaCorrecao_end.IsEmpty())) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.DataUltimaCorrecao} BETWEEN @{nameof(DBProValoresDicInfo.DataUltimaCorrecao)} AND @{nameof(DBProValoresDicInfo.DataUltimaCorrecao)}_end" : !(filtro.DataUltimaCorrecao.IsEmpty()) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.DataUltimaCorrecao} = @{nameof(DBProValoresDicInfo.DataUltimaCorrecao)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.DataUltimaCorrecao} <= @{nameof(DBProValoresDicInfo.DataUltimaCorrecao)}_end");
        }

        cWhere.Append(filtro.GUID.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProValoresDicInfo.PTabelaNome}].[{DBProValoresDicInfo.GUID}]  {DevourerConsts.MsiCollate} like @{nameof(DBProValoresDicInfo.GUID)}");
        if (!filtro.Codigo_filtro.IsEmpty() && filtro.Codigo_filtro_end.IsEmpty())
        {
            cWhere.Append(filtro.Codigo_filtro <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProValoresDicInfo.PTabelaNome}].[{DBProValoresDicInfo.CampoCodigo}] >= @{nameof(DBProValoresDicInfo.CampoCodigo)}");
        }
        else
        {
            cWhere.Append((filtro.Codigo_filtro <= 0 && filtro.Codigo_filtro_end <= 0) ? string.Empty : (!(filtro.Codigo_filtro <= 0) && !(filtro.Codigo_filtro_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.CampoCodigo} BETWEEN @{nameof(DBProValoresDicInfo.CampoCodigo)} AND @{nameof(DBProValoresDicInfo.CampoCodigo)}_end" : !(filtro.Codigo_filtro <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.CampoCodigo} = @{nameof(DBProValoresDicInfo.CampoCodigo)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBProValoresDicInfo.CampoCodigo} <= @{nameof(DBProValoresDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private static string ApplyWildCard(char wildcardChar, string value)
    {
        if (wildcardChar == '\0' || wildcardChar == ' ')
        {
            return value;
        }

        var result = $"{wildcardChar}{value.Replace(" ", wildcardChar.ToString())}{wildcardChar}";
        return result;
    }

    public async Task<IEnumerable<NomeID>> GetListN([FromQuery] int max, [FromBody] Filters.FilterProValores? filtro, [FromRoute, Required] string uri, CancellationToken token)
    {
        // Tracking: 20250606-0
        ThrowIfDisposed();
        var filtroResult = filtro == null ? null : WFiltro(filtro!);
        string where = filtroResult?.where ?? string.Empty;
        List<SqlParameter> parameters = filtroResult?.parametros ?? [];
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new Exception($"Coneão nula.");
        }

        var keyCache = await reader.ReadStringAuditor(uri, "", [], oCnn);
        var cacheKey = $"{uri}-ProValores-{max}-{where.GetHashCode()}-GetListN-{keyCache}";
        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId)
        };
        return await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataListNAsync(max, uri, where, parameters, cancel), entryOptions, cancellationToken: token) ?? [];
    }

    private async Task<IEnumerable<NomeID>> GetDataListNAsync(int max, string uri, string where, List<SqlParameter> parameters, CancellationToken token)
    {
        var result = new List<NomeID>(max);
        var lista = await reader.ListarN(max, uri, where, parameters, DBProValoresDicInfo.CampoNome);
        foreach (var item in lista)
        {
            if (token.IsCancellationRequested)
                break;
            if (item?.FNome != null)
            {
                result.Add(new NomeID { Nome = item.FNome, ID = item.ID });
            }
        }

        return result;
    }

    private async Task<IEnumerable<ProValoresResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}