// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class AreaWriterTests
{
    private readonly Mock<IFAreaFactory> _mockAreaFactory;
    private readonly Mock<FArea> _mockFArea;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly AreaWriter _areaWriter;
    public AreaWriterTests()
    {
        _mockAreaFactory = new Mock<IFAreaFactory>();
        _mockFArea = new Mock<FArea>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _areaWriter = new AreaWriter(_mockAreaFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var area = CreateValidAreaModel();
        area.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockAreaFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFArea.Object);
        _mockFArea.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _areaWriter.WriteAsync(area, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFArea.Object);
        _mockAreaFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockAreaFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFArea.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var area = CreateValidAreaModel();
        area.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockAreaFactory.Setup(x => x.CreateFromIdAsync(area.Id, _mockConnection.Object)).ReturnsAsync(_mockFArea.Object);
        _mockFArea.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _areaWriter.WriteAsync(area, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFArea.Object);
        _mockAreaFactory.Verify(x => x.CreateFromIdAsync(area.Id, _mockConnection.Object), Times.Once);
        _mockAreaFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFArea.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var area = CreateValidAreaModel();
        var auditorQuem = 99;
        _mockAreaFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFArea.Object);
        _mockFArea.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _areaWriter.WriteAsync(area, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFArea.Object);
        _mockFArea.VerifySet(x => x.FDescricao = area.Descricao, Times.Once);
        _mockFArea.VerifySet(x => x.FTop = area.Top, Times.Once);
        _mockFArea.VerifySet(x => x.FGUID = area.GUID, Times.Once);
        _mockFArea.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var area = CreateValidAreaModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockAreaFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _areaWriter.WriteAsync(area, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var area = CreateValidAreaModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockAreaFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFArea.Object);
        _mockFArea.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _areaWriter.WriteAsync(area, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var areaResponse = new AreaResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockAreaFactory.Setup(x => x.DeleteAsync(operadorId, areaResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _areaWriter.Delete(areaResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockAreaFactory.Verify(x => x.DeleteAsync(operadorId, areaResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var areaResponse = new AreaResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockAreaFactory.Setup(x => x.DeleteAsync(operadorId, areaResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _areaWriter.Delete(areaResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var areaResponse = new AreaResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockAreaFactory.Setup(x => x.DeleteAsync(operadorId, areaResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _areaWriter.Delete(areaResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new AreaWriter(_mockAreaFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new AreaWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.Area CreateValidAreaModel()
    {
        return new Models.Area
        {
            Id = 0,
            Descricao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Top = false,
            GUID = Guid.NewGuid().ToString()
        };
    }
#endregion
}