// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class CidadeValidationTests : IDisposable
{
    private readonly CidadeValidation _validation;
    private readonly Mock<ICidadeService> _mockCidadeService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IUFReader> _mockUFReader;
    private readonly CidadeService _service;
    private readonly string _validUri = "test-uri";
    public CidadeValidationTests()
    {
        _validation = new CidadeValidation();
        _mockCidadeService = new Mock<ICidadeService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockUFReader = new Mock<IUFReader>();
    }

#region Class Structure Tests
    [Fact]
    public void CidadeValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<ICidadeValidation>();
    }

    [Fact]
    public void CidadeValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(CidadeValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void CidadeValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(CidadeValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private static Models.Cidade CreateValidCidade()
    {
        return new Models.Cidade
        {
            Id = 1,
            DDD = "AAAAAAAA",
            Top = false,
            Comarca = true,
            Capital = false,
            Nome = "João",
            UF = 1,
            Sigla = "AAAAAAAA"
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockCidadeService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterCidade>(), It.IsAny<string>())).ReturnsAsync([]);
        // Setup other mocks but don't override the Cidades service mock
        _ = _mockUFReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new UFResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockCidadeService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterCidade>(), It.IsAny<string>())).ReturnsAsync([]);
        // Setup other mocks but don't override the Cidades service mock
        _ = _mockUFReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new UFResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var cidade = new Models.Cidade
        {
            Id = 1,
            DDD = null,
            Top = false,
            Comarca = true,
            Capital = false,
            Nome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            UF = 1,
            Sigla = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(cidade, _mockCidadeService.Object, _mockUFReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockCidadeService.Object, _mockUFReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region ValidateReg Required Nome Method Tests 
    [Fact]
    public async Task ValidateReg_WithEmptyNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var cidade = CreateValidCidade();
        cidade.Nome = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(cidade, _mockCidadeService.Object, _mockUFReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var cidade = CreateValidCidade();
        cidade.Nome = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(cidade, _mockCidadeService.Object, _mockUFReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataNome_ShouldReturnTrue()
    {
        // Arrange
        var cidade = CreateValidCidade();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(cidade, _mockCidadeService.Object, _mockUFReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var cidade = CreateValidCidade();
        cidade.Nome = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(cidade, _mockCidadeService.Object, _mockUFReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
#region Foreign Key Validation Tests - UF
    [Fact]
    public async Task ValidateReg_WithInvalidUF_ShouldThrowSGValidationException()
    {
        // Arrange
        var cidade = CreateValidCidade();
        cidade.UF = 999;
        _mockUFReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.UFResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(cidade, _mockCidadeService.Object, _mockUFReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedUFId_ShouldThrowSGValidationException()
    {
        // Arrange
        var cidade = CreateValidCidade();
        cidade.UF = 999;
        var reg888 = new Models.Response.UFResponse
        {
            Id = 888
        }; // Different ID
        _mockUFReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(cidade, _mockCidadeService.Object, _mockUFReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidUF_ShouldPass()
    {
        // Arrange
        var cidade = CreateValidCidade();
        cidade.UF = 123;
        var reg123 = new Models.Response.UFResponse
        {
            Id = 123
        };
        _mockUFReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(cidade, _mockCidadeService.Object, _mockUFReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}