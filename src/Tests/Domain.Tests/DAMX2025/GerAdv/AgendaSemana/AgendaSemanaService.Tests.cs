// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class AgendaSemanaServiceTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFAgendaSemanaFactory> _mockAgendaSemanaFactory;
    private readonly Mock<IAgendaSemanaReader> _mockReader;
    private readonly Mock<IAgendaSemanaValidation> _mockValidation;
    private readonly Mock<IFuncionariosReader> _mockFuncionariosReader;
    private readonly Mock<IAdvogadosReader> _mockAdvogadosReader;
    private readonly Mock<ITipoCompromissoReader> _mockTipoCompromissoReader;
    private readonly Mock<IClientesReader> _mockClientesReader;
    private readonly Mock<HybridCache> _mockCache;
    private readonly Mock<IMemoryCache> _mockMemoryCache;
    private readonly AgendaSemanaService _service;
    private readonly string _validUri = "test-uri";
    public AgendaSemanaServiceTests()
    {
        _mockAppSettings = new Mock<IOptions<AppSettings>>();
        _mockAgendaSemanaFactory = new Mock<IFAgendaSemanaFactory>();
        _mockReader = new Mock<IAgendaSemanaReader>();
        _mockValidation = new Mock<IAgendaSemanaValidation>();
        _mockFuncionariosReader = new Mock<IFuncionariosReader>();
        _mockAdvogadosReader = new Mock<IAdvogadosReader>();
        _mockTipoCompromissoReader = new Mock<ITipoCompromissoReader>();
        _mockClientesReader = new Mock<IClientesReader>();
        _mockCache = new Mock<HybridCache>();
        _mockMemoryCache = new Mock<IMemoryCache>();
        var appSettings = new AppSettings();
        _mockAppSettings.Setup(x => x.Value).Returns(appSettings);
        _service = new AgendaSemanaService(_mockAppSettings.Object, _mockAgendaSemanaFactory.Object, _mockReader.Object, _mockValidation.Object, _mockFuncionariosReader.Object, _mockAdvogadosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockCache.Object, _mockMemoryCache.Object);
    }

    [Fact]
    public void Constructor_WithValidParameters_InitializesService()
    {
        // Arrange & Act
        var service = new AgendaSemanaService(_mockAppSettings.Object, _mockAgendaSemanaFactory.Object, _mockReader.Object, _mockValidation.Object, _mockFuncionariosReader.Object, _mockAdvogadosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _mockCache.Object, _mockMemoryCache.Object);
        // Assert
        Assert.NotNull(service);
    }

    [Fact]
    public void Dispose_CalledOnce_DisposesCorrectly()
    {
        // Act
        _service.Dispose();
        // Assert - Should not throw any exception
        Assert.True(true);
    }

    [Fact]
    public void Dispose_CalledTwice_DoesNotThrow()
    {
        // Act
        _service.Dispose();
        _service.Dispose();
        // Assert - Should not throw any exception
        Assert.True(true);
    }

    [Fact]
    public async Task Filter_WithNullFilter_ReturnsEmptyResult()
    {
        // Arrange
        var max = 10;
        var invalidUri = "invalid-uri";
        // Act & Assert
        await Assert.ThrowsAsync<Exception>(() => _service.Filter(max, null, invalidUri));
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}