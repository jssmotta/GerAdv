// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Readers;
public partial class OperadorReader(IFOperadorFactory operadorFactory) : IOperadorReader
{
    private readonly IFOperadorFactory _operadorFactory = operadorFactory;
    public async Task<IEnumerable<DBNomeID>> ListarN(int max, string uri, string cWhere, List<SqlParameter> parameters, string order) => await DevourerSqlData.ListarNomeID(BuildSqlQuery("operCodigo, operNome", cWhere, order, max), parameters, uri, caching: DevourerOne.PCachingDefault, max: max);
    public async Task<IEnumerable<OperadorResponseAll>> Listar(int max, string uri, string cWhere, List<SqlParameter> parameters, string order, CancellationToken cancellationToken) => await ListarTabela(BuildSqlQuery(DBOperador.CamposSqlX, cWhere, order, max), parameters, uri, caching: DevourerOne.PCachingDefault, max: max, cancellationToken: cancellationToken);
    private async Task<IEnumerable<OperadorResponseAll>> ListarTabela(string sql, List<SqlParameter> parameters, string uri, bool caching = DevourerOne.PCachingDefault, int max = 200, CancellationToken cancellationToken = default)
    {
        var result = new List<OperadorResponseAll>(max);
        await using var connection = Configuracoes.GetConnectionByUri(uri);
        await using var cmd = new SqlCommand(cmdText: ConfiguracoesDBT.CmdSql(sql), connection: connection?.InnerConnection)
        {
            CommandTimeout = 30
        };
        foreach (var param in parameters)
        {
            if (!cmd.Parameters.Contains(param.ParameterName))
            {
                var newParam = new SqlParameter(param.ParameterName, param.Value)
                {
                    SqlDbType = param.SqlDbType,
                    Direction = param.Direction,
                    Size = param.Size,
                    Precision = param.Precision,
                    Scale = param.Scale
                };
                cmd.Parameters.Add(newParam);
            }
        }

        await using var reader = await cmd.ExecuteReaderAsync(CommandBehavior.SingleResult);
        while (await reader.ReadAsync())
        {
            if (cancellationToken.IsCancellationRequested)
                return result;
            result.Add(ReadAll(_operadorFactory.CreateFromReader(reader), reader)!);
        }

        return result;
    }

    public async Task<OperadorResponse?> Read(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _operadorFactory.CreateFromIdAsync(id, oCnn);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public async Task<Models.Operador?> ReadM(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _operadorFactory.CreateFromIdAsync(id, oCnn);
        var operador = new Models.Operador
        {
            Id = dbRec.ID,
            EMail = dbRec.FEMail ?? string.Empty,
            Pasta = dbRec.FPasta ?? string.Empty,
            Telefonista = dbRec.FTelefonista,
            Master = dbRec.FMaster,
            Nome = dbRec.FNome ?? string.Empty,
            Nick = dbRec.FNick ?? string.Empty,
            Ramal = dbRec.FRamal ?? string.Empty,
            CadID = dbRec.FCadID,
            CadCod = dbRec.FCadCod,
            Excluido = dbRec.FExcluido,
            Situacao = dbRec.FSituacao,
            Computador = dbRec.FComputador,
            MinhaDescricao = dbRec.FMinhaDescricao ?? string.Empty,
            EMailNet = dbRec.FEMailNet ?? string.Empty,
            OnlineIP = dbRec.FOnlineIP ?? string.Empty,
            OnLine = dbRec.FOnLine,
            SysOp = dbRec.FSysOp,
            StatusId = dbRec.FStatusId,
            StatusMessage = dbRec.FStatusMessage ?? string.Empty,
            IsFinanceiro = dbRec.FIsFinanceiro,
            Top = dbRec.FTop,
            Sexo = dbRec.FSexo,
            Basico = dbRec.FBasico,
            Externo = dbRec.FExterno,
            EMailConfirmado = dbRec.FEMailConfirmado,
            SuporteNomeSolicitante = dbRec.FSuporteNomeSolicitante ?? string.Empty,
            SuporteIpUltimoAcesso = dbRec.FSuporteIpUltimoAcesso ?? string.Empty,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FUltimoLogoff, out DateTime XUltimoLogoff))
        {
            operador.UltimoLogoff = dbRec.FUltimoLogoff;
            operador.UltimoLogoff_date = XUltimoLogoff;
        }

        if (DateTime.TryParse(dbRec.FDataLimiteReset, out DateTime XDataLimiteReset))
        {
            operador.DataLimiteReset = dbRec.FDataLimiteReset;
            operador.DataLimiteReset_date = XDataLimiteReset;
        }

        if (DateTime.TryParse(dbRec.FSuporteMaxAge, out DateTime XSuporteMaxAge))
        {
            operador.SuporteMaxAge = dbRec.FSuporteMaxAge;
            operador.SuporteMaxAge_date = XSuporteMaxAge;
        }

        if (DateTime.TryParse(dbRec.FSuporteUltimoAcesso, out DateTime XSuporteUltimoAcesso))
        {
            operador.SuporteUltimoAcesso = dbRec.FSuporteUltimoAcesso;
            operador.SuporteUltimoAcesso_date = XSuporteUltimoAcesso;
        }

        return operador;
    }

    public OperadorResponse? Read(FOperador dbRec, MsiSqlConnection oCnn)
    {
        return Read(dbRec);
    }

    public OperadorResponse? Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn)
    {
        using var dbRec = _operadorFactory.CreateFromParameters(parameters, oCnn, sqlWhere: where);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public OperadorResponse? Read(FOperador dbRec) // Track 001.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var operador = new OperadorResponse
        {
            Id = dbRec.ID,
            EMail = dbRec.FEMail ?? string.Empty,
            Pasta = dbRec.FPasta ?? string.Empty,
            Telefonista = dbRec.FTelefonista,
            Master = dbRec.FMaster,
            Nome = dbRec.FNome ?? string.Empty,
            Nick = dbRec.FNick ?? string.Empty,
            Ramal = dbRec.FRamal ?? string.Empty,
            CadID = dbRec.FCadID,
            CadCod = dbRec.FCadCod,
            Excluido = dbRec.FExcluido,
            Situacao = dbRec.FSituacao,
            Computador = dbRec.FComputador,
            MinhaDescricao = dbRec.FMinhaDescricao ?? string.Empty,
            EMailNet = dbRec.FEMailNet ?? string.Empty,
            OnlineIP = dbRec.FOnlineIP ?? string.Empty,
            OnLine = dbRec.FOnLine,
            SysOp = dbRec.FSysOp,
            StatusId = dbRec.FStatusId,
            StatusMessage = dbRec.FStatusMessage ?? string.Empty,
            IsFinanceiro = dbRec.FIsFinanceiro,
            Top = dbRec.FTop,
            Sexo = dbRec.FSexo,
            Basico = dbRec.FBasico,
            Externo = dbRec.FExterno,
            EMailConfirmado = dbRec.FEMailConfirmado,
            SuporteNomeSolicitante = dbRec.FSuporteNomeSolicitante ?? string.Empty,
            SuporteIpUltimoAcesso = dbRec.FSuporteIpUltimoAcesso ?? string.Empty,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FUltimoLogoff, out DateTime XUltimoLogoff))
        {
            operador.UltimoLogoff = dbRec.FUltimoLogoff;
            operador.UltimoLogoff_date = XUltimoLogoff;
        }

        if (DateTime.TryParse(dbRec.FDataLimiteReset, out DateTime XDataLimiteReset))
        {
            operador.DataLimiteReset = dbRec.FDataLimiteReset;
            operador.DataLimiteReset_date = XDataLimiteReset;
        }

        if (DateTime.TryParse(dbRec.FSuporteMaxAge, out DateTime XSuporteMaxAge))
        {
            operador.SuporteMaxAge = dbRec.FSuporteMaxAge;
            operador.SuporteMaxAge_date = XSuporteMaxAge;
        }

        if (DateTime.TryParse(dbRec.FSuporteUltimoAcesso, out DateTime XSuporteUltimoAcesso))
        {
            operador.SuporteUltimoAcesso = dbRec.FSuporteUltimoAcesso;
            operador.SuporteUltimoAcesso_date = XSuporteUltimoAcesso;
        }

        if (dbRec.FSenha256.Equals("111111".GetHashCode2()))
        {
            operador.StatusMessage = "Senha Resetada";
        }

        return operador;
    }

    public OperadorResponse? Read(SG.GerAdv.DBOperador dbRec) // Track 002.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var operador = new OperadorResponse
        {
            Id = dbRec.ID,
            EMail = dbRec.FEMail ?? string.Empty,
            Pasta = dbRec.FPasta ?? string.Empty,
            Telefonista = dbRec.FTelefonista,
            Master = dbRec.FMaster,
            Nome = dbRec.FNome ?? string.Empty,
            Nick = dbRec.FNick ?? string.Empty,
            Ramal = dbRec.FRamal ?? string.Empty,
            CadID = dbRec.FCadID,
            CadCod = dbRec.FCadCod,
            Excluido = dbRec.FExcluido,
            Situacao = dbRec.FSituacao,
            Computador = dbRec.FComputador,
            MinhaDescricao = dbRec.FMinhaDescricao ?? string.Empty,
            EMailNet = dbRec.FEMailNet ?? string.Empty,
            OnlineIP = dbRec.FOnlineIP ?? string.Empty,
            OnLine = dbRec.FOnLine,
            SysOp = dbRec.FSysOp,
            StatusId = dbRec.FStatusId,
            StatusMessage = dbRec.FStatusMessage ?? string.Empty,
            IsFinanceiro = dbRec.FIsFinanceiro,
            Top = dbRec.FTop,
            Sexo = dbRec.FSexo,
            Basico = dbRec.FBasico,
            Externo = dbRec.FExterno,
            EMailConfirmado = dbRec.FEMailConfirmado,
            SuporteNomeSolicitante = dbRec.FSuporteNomeSolicitante ?? string.Empty,
            SuporteIpUltimoAcesso = dbRec.FSuporteIpUltimoAcesso ?? string.Empty,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FUltimoLogoff, out DateTime XUltimoLogoff))
        {
            operador.UltimoLogoff = dbRec.FUltimoLogoff;
            operador.UltimoLogoff_date = XUltimoLogoff;
        }

        if (DateTime.TryParse(dbRec.FDataLimiteReset, out DateTime XDataLimiteReset))
        {
            operador.DataLimiteReset = dbRec.FDataLimiteReset;
            operador.DataLimiteReset_date = XDataLimiteReset;
        }

        if (DateTime.TryParse(dbRec.FSuporteMaxAge, out DateTime XSuporteMaxAge))
        {
            operador.SuporteMaxAge = dbRec.FSuporteMaxAge;
            operador.SuporteMaxAge_date = XSuporteMaxAge;
        }

        if (DateTime.TryParse(dbRec.FSuporteUltimoAcesso, out DateTime XSuporteUltimoAcesso))
        {
            operador.SuporteUltimoAcesso = dbRec.FSuporteUltimoAcesso;
            operador.SuporteUltimoAcesso_date = XSuporteUltimoAcesso;
        }

        if (dbRec.FSenha256.Equals("111111".GetHashCode2()))
        {
            operador.StatusMessage = "Senha Resetada";
        }

        return operador;
    }

    public OperadorResponseAll? ReadAll(FOperador dbRec, IDataRecord dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var operador = new OperadorResponseAll
        {
            Id = dbRec.ID,
            EMail = dbRec.FEMail ?? string.Empty,
            Pasta = dbRec.FPasta ?? string.Empty,
            Telefonista = dbRec.FTelefonista,
            Master = dbRec.FMaster,
            Nome = dbRec.FNome ?? string.Empty,
            Nick = dbRec.FNick ?? string.Empty,
            Ramal = dbRec.FRamal ?? string.Empty,
            CadID = dbRec.FCadID,
            CadCod = dbRec.FCadCod,
            Excluido = dbRec.FExcluido,
            Situacao = dbRec.FSituacao,
            Computador = dbRec.FComputador,
            MinhaDescricao = dbRec.FMinhaDescricao ?? string.Empty,
            EMailNet = dbRec.FEMailNet ?? string.Empty,
            OnlineIP = dbRec.FOnlineIP ?? string.Empty,
            OnLine = dbRec.FOnLine,
            SysOp = dbRec.FSysOp,
            StatusId = dbRec.FStatusId,
            StatusMessage = dbRec.FStatusMessage ?? string.Empty,
            IsFinanceiro = dbRec.FIsFinanceiro,
            Top = dbRec.FTop,
            Sexo = dbRec.FSexo,
            Basico = dbRec.FBasico,
            Externo = dbRec.FExterno,
            EMailConfirmado = dbRec.FEMailConfirmado,
            SuporteNomeSolicitante = dbRec.FSuporteNomeSolicitante ?? string.Empty,
            SuporteIpUltimoAcesso = dbRec.FSuporteIpUltimoAcesso ?? string.Empty,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FUltimoLogoff, out DateTime XUltimoLogoff))
        {
            operador.UltimoLogoff = dbRec.FUltimoLogoff;
            operador.UltimoLogoff_date = XUltimoLogoff;
        }

        if (DateTime.TryParse(dbRec.FDataLimiteReset, out DateTime XDataLimiteReset))
        {
            operador.DataLimiteReset = dbRec.FDataLimiteReset;
            operador.DataLimiteReset_date = XDataLimiteReset;
        }

        if (DateTime.TryParse(dbRec.FSuporteMaxAge, out DateTime XSuporteMaxAge))
        {
            operador.SuporteMaxAge = dbRec.FSuporteMaxAge;
            operador.SuporteMaxAge_date = XSuporteMaxAge;
        }

        if (DateTime.TryParse(dbRec.FSuporteUltimoAcesso, out DateTime XSuporteUltimoAcesso))
        {
            operador.SuporteUltimoAcesso = dbRec.FSuporteUltimoAcesso;
            operador.SuporteUltimoAcesso_date = XSuporteUltimoAcesso;
        }

        return operador;
    }

    public OperadorResponseAll? ReadAll(SG.GerAdv.DBOperador dbRec, DataRow dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var operador = new OperadorResponseAll
        {
            Id = dbRec.ID,
            EMail = dbRec.FEMail ?? string.Empty,
            Pasta = dbRec.FPasta ?? string.Empty,
            Telefonista = dbRec.FTelefonista,
            Master = dbRec.FMaster,
            Nome = dbRec.FNome ?? string.Empty,
            Nick = dbRec.FNick ?? string.Empty,
            Ramal = dbRec.FRamal ?? string.Empty,
            CadID = dbRec.FCadID,
            CadCod = dbRec.FCadCod,
            Excluido = dbRec.FExcluido,
            Situacao = dbRec.FSituacao,
            Computador = dbRec.FComputador,
            MinhaDescricao = dbRec.FMinhaDescricao ?? string.Empty,
            EMailNet = dbRec.FEMailNet ?? string.Empty,
            OnlineIP = dbRec.FOnlineIP ?? string.Empty,
            OnLine = dbRec.FOnLine,
            SysOp = dbRec.FSysOp,
            StatusId = dbRec.FStatusId,
            StatusMessage = dbRec.FStatusMessage ?? string.Empty,
            IsFinanceiro = dbRec.FIsFinanceiro,
            Top = dbRec.FTop,
            Sexo = dbRec.FSexo,
            Basico = dbRec.FBasico,
            Externo = dbRec.FExterno,
            EMailConfirmado = dbRec.FEMailConfirmado,
            SuporteNomeSolicitante = dbRec.FSuporteNomeSolicitante ?? string.Empty,
            SuporteIpUltimoAcesso = dbRec.FSuporteIpUltimoAcesso ?? string.Empty,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FUltimoLogoff, out DateTime XUltimoLogoff))
        {
            operador.UltimoLogoff = dbRec.FUltimoLogoff;
            operador.UltimoLogoff_date = XUltimoLogoff;
        }

        if (DateTime.TryParse(dbRec.FDataLimiteReset, out DateTime XDataLimiteReset))
        {
            operador.DataLimiteReset = dbRec.FDataLimiteReset;
            operador.DataLimiteReset_date = XDataLimiteReset;
        }

        if (DateTime.TryParse(dbRec.FSuporteMaxAge, out DateTime XSuporteMaxAge))
        {
            operador.SuporteMaxAge = dbRec.FSuporteMaxAge;
            operador.SuporteMaxAge_date = XSuporteMaxAge;
        }

        if (DateTime.TryParse(dbRec.FSuporteUltimoAcesso, out DateTime XSuporteUltimoAcesso))
        {
            operador.SuporteUltimoAcesso = dbRec.FSuporteUltimoAcesso;
            operador.SuporteUltimoAcesso_date = XSuporteUltimoAcesso;
        }

        return operador;
    }
}