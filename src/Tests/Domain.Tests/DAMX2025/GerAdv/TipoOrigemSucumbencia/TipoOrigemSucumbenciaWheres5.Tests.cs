// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class TipoOrigemSucumbenciaWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFTipoOrigemSucumbenciaFactory> _mockTipoOrigemSucumbenciaFactory;
    private readonly Mock<FTipoOrigemSucumbencia> _mockFTipoOrigemSucumbencia;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly TipoOrigemSucumbenciaWhere _tipoorigemsucumbenciaWhere;
    public TipoOrigemSucumbenciaWhereTests()
    {
        _mockTipoOrigemSucumbenciaFactory = new Mock<IFTipoOrigemSucumbenciaFactory>();
        _mockFTipoOrigemSucumbencia = new Mock<FTipoOrigemSucumbencia>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _tipoorigemsucumbenciaWhere = new TipoOrigemSucumbenciaWhere(_mockTipoOrigemSucumbenciaFactory.Object);
    }

    public void Dispose()
    {
        _mockTipoOrigemSucumbenciaFactory?.Reset();
        _mockFTipoOrigemSucumbencia?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
        };
    }

    private void SetupMockFTipoOrigemSucumbencia(string? Nome = "João")
    {
        _mockFTipoOrigemSucumbencia.Setup(f => f.FNome).Returns(Nome ?? string.Empty);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFTipoOrigemSucumbenciaFactory>();
        // Act
        var tipoorigemsucumbenciaWhere = new TipoOrigemSucumbenciaWhere(mockFactory.Object);
        // Assert
        tipoorigemsucumbenciaWhere.Should().NotBeNull();
        tipoorigemsucumbenciaWhere.Should().BeAssignableTo<ITipoOrigemSucumbenciaWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFTipoOrigemSucumbenciaFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new TipoOrigemSucumbenciaWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnTipoOrigemSucumbenciaResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFTipoOrigemSucumbencia();
        _mockTipoOrigemSucumbenciaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFTipoOrigemSucumbencia.Object);
        // Act
        var result = _tipoorigemsucumbenciaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.Nome.Should().Be("João");
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFTipoOrigemSucumbencia(Nome: null);
        _mockTipoOrigemSucumbenciaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFTipoOrigemSucumbencia.Object);
        // Act
        var result = _tipoorigemsucumbenciaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Nome.Should().Be(string.Empty);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFTipoOrigemSucumbencia();
        _mockTipoOrigemSucumbenciaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFTipoOrigemSucumbencia.Object);
        // Act
        var result = _tipoorigemsucumbenciaWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockTipoOrigemSucumbenciaFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFTipoOrigemSucumbencia();
        _mockTipoOrigemSucumbenciaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFTipoOrigemSucumbencia.Object);
        // Act
        var result = _tipoorigemsucumbenciaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockTipoOrigemSucumbenciaFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFTipoOrigemSucumbencia();
        _mockTipoOrigemSucumbenciaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFTipoOrigemSucumbencia.Object);
        // Act
        var result = _tipoorigemsucumbenciaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockTipoOrigemSucumbenciaFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFTipoOrigemSucumbencia();
        _mockTipoOrigemSucumbenciaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFTipoOrigemSucumbencia.Object);
        // Act
        _tipoorigemsucumbenciaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockTipoOrigemSucumbenciaFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFTipoOrigemSucumbenciaInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFTipoOrigemSucumbencia.Setup(f => f.Dispose());
        SetupMockFTipoOrigemSucumbencia();
        _mockTipoOrigemSucumbenciaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFTipoOrigemSucumbencia.Object);
        // Act
        _tipoorigemsucumbenciaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFTipoOrigemSucumbencia.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockTipoOrigemSucumbenciaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _tipoorigemsucumbenciaWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFTipoOrigemSucumbencia(Nome: "João");
        _mockTipoOrigemSucumbenciaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFTipoOrigemSucumbencia.Object);
        // Act
        var result = _tipoorigemsucumbenciaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.Nome.Should().Be("João");
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "Nome = @{DBTipoOrigemSucumbenciaDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBTipoOrigemSucumbenciaDicInfo.CampoNome}", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"),
        };
        SetupMockFTipoOrigemSucumbencia();
        _mockTipoOrigemSucumbenciaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFTipoOrigemSucumbencia.Object);
        // Act
        _tipoorigemsucumbenciaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockTipoOrigemSucumbenciaFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBTipoOrigemSucumbenciaDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }
#region DateTime Tests
#endregion
#endregion
}