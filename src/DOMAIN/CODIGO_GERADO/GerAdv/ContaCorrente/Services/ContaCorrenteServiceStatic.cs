// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class ContaCorrenteService
{
    private static (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterContaCorrente filtro)
    {
        var parameters = new List<SqlParameter>();
        if (filtro.CIAcordo != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.CIAcordo)}", filtro.CIAcordo));
        }

        if (filtro.CIAcordo_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.CIAcordo)}_end", filtro.CIAcordo_end));
        }

        if (filtro.Quitado != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.Quitado)}", filtro.Quitado));
        }

        if (filtro.IDContrato != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.IDContrato)}", filtro.IDContrato));
        }

        if (filtro.IDContrato_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.IDContrato)}_end", filtro.IDContrato_end));
        }

        if (filtro.QuitadoID != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.QuitadoID)}", filtro.QuitadoID));
        }

        if (filtro.QuitadoID_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.QuitadoID)}_end", filtro.QuitadoID_end));
        }

        if (filtro.DebitoID != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.DebitoID)}", filtro.DebitoID));
        }

        if (filtro.DebitoID_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.DebitoID)}_end", filtro.DebitoID_end));
        }

        if (filtro.LivroCaixaID != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.LivroCaixaID)}", filtro.LivroCaixaID));
        }

        if (filtro.LivroCaixaID_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.LivroCaixaID)}_end", filtro.LivroCaixaID_end));
        }

        if (filtro.Sucumbencia != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.Sucumbencia)}", filtro.Sucumbencia));
        }

        if (filtro.DistRegra != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.DistRegra)}", filtro.DistRegra));
        }

        if (!filtro.DtOriginal.IsEmpty())
        {
            if (DateTime.TryParse(filtro.DtOriginal, out var dataParam))
                parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.DtOriginal)}", dataParam));
        }

        if (!filtro.DtOriginal_end.IsEmpty())
        {
            if (DateTime.TryParse(filtro.DtOriginal_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.DtOriginal)}_end", dataParam));
        }

        if (filtro.Processo != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.Processo)}", filtro.Processo));
        }

        if (filtro.ParcelaX != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.ParcelaX)}", filtro.ParcelaX));
        }

        if (filtro.ParcelaX_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.ParcelaX)}_end", filtro.ParcelaX_end));
        }

        if (filtro.Valor != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.Valor)}", filtro.Valor));
        }

        if (filtro.Valor_end != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.Valor)}_end", filtro.Valor_end));
        }

        if (!filtro.Data.IsEmpty())
        {
            if (DateTime.TryParse(filtro.Data, out var dataParam))
                parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.Data)}", dataParam));
        }

        if (!filtro.Data_end.IsEmpty())
        {
            if (DateTime.TryParse(filtro.Data_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.Data)}_end", dataParam));
        }

        if (filtro.Cliente != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.Cliente)}", filtro.Cliente));
        }

        if (!string.IsNullOrEmpty(filtro.Historico))
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.Historico)}", ApplyWildCard(filtro.WildcardChar, filtro.Historico)));
        }

        if (filtro.Contrato != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.Contrato)}", filtro.Contrato));
        }

        if (filtro.Pago != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.Pago)}", filtro.Pago));
        }

        if (filtro.Distribuir != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.Distribuir)}", filtro.Distribuir));
        }

        if (filtro.LC != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.LC)}", filtro.LC));
        }

        if (filtro.IDHTrab != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.IDHTrab)}", filtro.IDHTrab));
        }

        if (filtro.IDHTrab_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.IDHTrab)}_end", filtro.IDHTrab_end));
        }

        if (filtro.NroParcelas != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.NroParcelas)}", filtro.NroParcelas));
        }

        if (filtro.NroParcelas_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.NroParcelas)}_end", filtro.NroParcelas_end));
        }

        if (filtro.ValorPrincipal != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.ValorPrincipal)}", filtro.ValorPrincipal));
        }

        if (filtro.ValorPrincipal_end != decimal.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.ValorPrincipal)}_end", filtro.ValorPrincipal_end));
        }

        if (filtro.ParcelaPrincipalID != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.ParcelaPrincipalID)}", filtro.ParcelaPrincipalID));
        }

        if (filtro.ParcelaPrincipalID_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.ParcelaPrincipalID)}_end", filtro.ParcelaPrincipalID_end));
        }

        if (filtro.Hide != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.Hide)}", filtro.Hide));
        }

        if (!filtro.DataPgto.IsEmpty())
        {
            if (DateTime.TryParse(filtro.DataPgto, out var dataParam))
                parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.DataPgto)}", dataParam));
        }

        if (!filtro.DataPgto_end.IsEmpty())
        {
            if (DateTime.TryParse(filtro.DataPgto_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.DataPgto)}_end", dataParam));
        }

        if (!string.IsNullOrEmpty(filtro.GUID))
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.GUID)}", ApplyWildCard(filtro.WildcardChar, filtro.GUID)));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
        }

        if (filtro.Codigo_filtro_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBContaCorrenteDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
        }

        if (filtro.LogicalOperator.IsEmpty() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        if (!filtro.CIAcordo.IsEmpty() && filtro.CIAcordo_end.IsEmpty())
        {
            cWhere.Append(filtro.CIAcordo <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBContaCorrenteDicInfo.PTabelaNome}].[{DBContaCorrenteDicInfo.CIAcordo}] >= @{nameof(DBContaCorrenteDicInfo.CIAcordo)}");
        }
        else
        {
            cWhere.Append((filtro.CIAcordo <= 0 && filtro.CIAcordo_end <= 0) ? string.Empty : (!(filtro.CIAcordo <= 0) && !(filtro.CIAcordo_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.CIAcordo} BETWEEN @{nameof(DBContaCorrenteDicInfo.CIAcordo)} AND @{nameof(DBContaCorrenteDicInfo.CIAcordo)}_end" : !(filtro.CIAcordo <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.CIAcordo} = @{nameof(DBContaCorrenteDicInfo.CIAcordo)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.CIAcordo} <= @{nameof(DBContaCorrenteDicInfo.CIAcordo)}_end");
        }

        cWhere.Append(filtro.Quitado == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBContaCorrenteDicInfo.PTabelaNome}].[{DBContaCorrenteDicInfo.Quitado}] = @{nameof(DBContaCorrenteDicInfo.Quitado)}");
        if (!filtro.IDContrato.IsEmpty() && filtro.IDContrato_end.IsEmpty())
        {
            cWhere.Append(filtro.IDContrato <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBContaCorrenteDicInfo.PTabelaNome}].[{DBContaCorrenteDicInfo.IDContrato}] >= @{nameof(DBContaCorrenteDicInfo.IDContrato)}");
        }
        else
        {
            cWhere.Append((filtro.IDContrato <= 0 && filtro.IDContrato_end <= 0) ? string.Empty : (!(filtro.IDContrato <= 0) && !(filtro.IDContrato_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.IDContrato} BETWEEN @{nameof(DBContaCorrenteDicInfo.IDContrato)} AND @{nameof(DBContaCorrenteDicInfo.IDContrato)}_end" : !(filtro.IDContrato <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.IDContrato} = @{nameof(DBContaCorrenteDicInfo.IDContrato)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.IDContrato} <= @{nameof(DBContaCorrenteDicInfo.IDContrato)}_end");
        }

        if (!filtro.QuitadoID.IsEmpty() && filtro.QuitadoID_end.IsEmpty())
        {
            cWhere.Append(filtro.QuitadoID <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBContaCorrenteDicInfo.PTabelaNome}].[{DBContaCorrenteDicInfo.QuitadoID}] >= @{nameof(DBContaCorrenteDicInfo.QuitadoID)}");
        }
        else
        {
            cWhere.Append((filtro.QuitadoID <= 0 && filtro.QuitadoID_end <= 0) ? string.Empty : (!(filtro.QuitadoID <= 0) && !(filtro.QuitadoID_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.QuitadoID} BETWEEN @{nameof(DBContaCorrenteDicInfo.QuitadoID)} AND @{nameof(DBContaCorrenteDicInfo.QuitadoID)}_end" : !(filtro.QuitadoID <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.QuitadoID} = @{nameof(DBContaCorrenteDicInfo.QuitadoID)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.QuitadoID} <= @{nameof(DBContaCorrenteDicInfo.QuitadoID)}_end");
        }

        if (!filtro.DebitoID.IsEmpty() && filtro.DebitoID_end.IsEmpty())
        {
            cWhere.Append(filtro.DebitoID <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBContaCorrenteDicInfo.PTabelaNome}].[{DBContaCorrenteDicInfo.DebitoID}] >= @{nameof(DBContaCorrenteDicInfo.DebitoID)}");
        }
        else
        {
            cWhere.Append((filtro.DebitoID <= 0 && filtro.DebitoID_end <= 0) ? string.Empty : (!(filtro.DebitoID <= 0) && !(filtro.DebitoID_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.DebitoID} BETWEEN @{nameof(DBContaCorrenteDicInfo.DebitoID)} AND @{nameof(DBContaCorrenteDicInfo.DebitoID)}_end" : !(filtro.DebitoID <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.DebitoID} = @{nameof(DBContaCorrenteDicInfo.DebitoID)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.DebitoID} <= @{nameof(DBContaCorrenteDicInfo.DebitoID)}_end");
        }

        if (!filtro.LivroCaixaID.IsEmpty() && filtro.LivroCaixaID_end.IsEmpty())
        {
            cWhere.Append(filtro.LivroCaixaID <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBContaCorrenteDicInfo.PTabelaNome}].[{DBContaCorrenteDicInfo.LivroCaixaID}] >= @{nameof(DBContaCorrenteDicInfo.LivroCaixaID)}");
        }
        else
        {
            cWhere.Append((filtro.LivroCaixaID <= 0 && filtro.LivroCaixaID_end <= 0) ? string.Empty : (!(filtro.LivroCaixaID <= 0) && !(filtro.LivroCaixaID_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.LivroCaixaID} BETWEEN @{nameof(DBContaCorrenteDicInfo.LivroCaixaID)} AND @{nameof(DBContaCorrenteDicInfo.LivroCaixaID)}_end" : !(filtro.LivroCaixaID <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.LivroCaixaID} = @{nameof(DBContaCorrenteDicInfo.LivroCaixaID)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.LivroCaixaID} <= @{nameof(DBContaCorrenteDicInfo.LivroCaixaID)}_end");
        }

        cWhere.Append(filtro.Sucumbencia == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBContaCorrenteDicInfo.PTabelaNome}].[{DBContaCorrenteDicInfo.Sucumbencia}] = @{nameof(DBContaCorrenteDicInfo.Sucumbencia)}");
        cWhere.Append(filtro.DistRegra == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBContaCorrenteDicInfo.PTabelaNome}].[{DBContaCorrenteDicInfo.DistRegra}] = @{nameof(DBContaCorrenteDicInfo.DistRegra)}");
        if (!filtro.DtOriginal.IsEmpty() && filtro.DtOriginal_end.IsEmpty())
        {
            cWhere.Append(filtro.DtOriginal.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBContaCorrenteDicInfo.PTabelaNome}].[{DBContaCorrenteDicInfo.DtOriginal}], 103) >= CONVERT(DATE, @{nameof(DBContaCorrenteDicInfo.DtOriginal)}, 103)");
        }
        else
        {
            cWhere.Append((filtro.DtOriginal.IsEmpty() && filtro.DtOriginal_end.IsEmpty()) ? string.Empty : (!(filtro.DtOriginal.IsEmpty()) && !(filtro.DtOriginal_end.IsEmpty())) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.DtOriginal} BETWEEN @{nameof(DBContaCorrenteDicInfo.DtOriginal)} AND @{nameof(DBContaCorrenteDicInfo.DtOriginal)}_end" : !(filtro.DtOriginal.IsEmpty()) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.DtOriginal} = @{nameof(DBContaCorrenteDicInfo.DtOriginal)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.DtOriginal} <= @{nameof(DBContaCorrenteDicInfo.DtOriginal)}_end");
        }

        cWhere.Append(filtro.Processo <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBContaCorrenteDicInfo.PTabelaNome}].[{DBContaCorrenteDicInfo.Processo}] = @{nameof(DBContaCorrenteDicInfo.Processo)}");
        if (!filtro.ParcelaX.IsEmpty() && filtro.ParcelaX_end.IsEmpty())
        {
            cWhere.Append(filtro.ParcelaX <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBContaCorrenteDicInfo.PTabelaNome}].[{DBContaCorrenteDicInfo.ParcelaX}] >= @{nameof(DBContaCorrenteDicInfo.ParcelaX)}");
        }
        else
        {
            cWhere.Append((filtro.ParcelaX <= 0 && filtro.ParcelaX_end <= 0) ? string.Empty : (!(filtro.ParcelaX <= 0) && !(filtro.ParcelaX_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.ParcelaX} BETWEEN @{nameof(DBContaCorrenteDicInfo.ParcelaX)} AND @{nameof(DBContaCorrenteDicInfo.ParcelaX)}_end" : !(filtro.ParcelaX <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.ParcelaX} = @{nameof(DBContaCorrenteDicInfo.ParcelaX)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.ParcelaX} <= @{nameof(DBContaCorrenteDicInfo.ParcelaX)}_end");
        }

        if (!filtro.Valor.IsEmpty() && filtro.Valor_end.IsEmpty())
        {
            cWhere.Append(filtro.Valor == decimal.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBContaCorrenteDicInfo.PTabelaNome}].[{DBContaCorrenteDicInfo.Valor}] >= @{nameof(DBContaCorrenteDicInfo.Valor)}");
        }
        else
        {
            cWhere.Append((filtro.Valor == decimal.MinValue && filtro.Valor_end == decimal.MinValue) ? string.Empty : (!(filtro.Valor == decimal.MinValue) && !(filtro.Valor_end == decimal.MinValue)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.Valor} BETWEEN @{nameof(DBContaCorrenteDicInfo.Valor)} AND @{nameof(DBContaCorrenteDicInfo.Valor)}_end" : !(filtro.Valor == decimal.MinValue) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.Valor} = @{nameof(DBContaCorrenteDicInfo.Valor)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.Valor} <= @{nameof(DBContaCorrenteDicInfo.Valor)}_end");
        }

        if (!filtro.Data.IsEmpty() && filtro.Data_end.IsEmpty())
        {
            cWhere.Append(filtro.Data.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBContaCorrenteDicInfo.PTabelaNome}].[{DBContaCorrenteDicInfo.Data}], 103) >= CONVERT(DATE, @{nameof(DBContaCorrenteDicInfo.Data)}, 103)");
        }
        else
        {
            cWhere.Append((filtro.Data.IsEmpty() && filtro.Data_end.IsEmpty()) ? string.Empty : (!(filtro.Data.IsEmpty()) && !(filtro.Data_end.IsEmpty())) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.Data} BETWEEN @{nameof(DBContaCorrenteDicInfo.Data)} AND @{nameof(DBContaCorrenteDicInfo.Data)}_end" : !(filtro.Data.IsEmpty()) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.Data} = @{nameof(DBContaCorrenteDicInfo.Data)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.Data} <= @{nameof(DBContaCorrenteDicInfo.Data)}_end");
        }

        cWhere.Append(filtro.Cliente <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBContaCorrenteDicInfo.PTabelaNome}].[{DBContaCorrenteDicInfo.Cliente}] = @{nameof(DBContaCorrenteDicInfo.Cliente)}");
        cWhere.Append(filtro.Historico.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBContaCorrenteDicInfo.PTabelaNome}].[{DBContaCorrenteDicInfo.Historico}]  {DevourerConsts.MsiCollate} like @{nameof(DBContaCorrenteDicInfo.Historico)}");
        cWhere.Append(filtro.Contrato == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBContaCorrenteDicInfo.PTabelaNome}].[{DBContaCorrenteDicInfo.Contrato}] = @{nameof(DBContaCorrenteDicInfo.Contrato)}");
        cWhere.Append(filtro.Pago == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBContaCorrenteDicInfo.PTabelaNome}].[{DBContaCorrenteDicInfo.Pago}] = @{nameof(DBContaCorrenteDicInfo.Pago)}");
        cWhere.Append(filtro.Distribuir == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBContaCorrenteDicInfo.PTabelaNome}].[{DBContaCorrenteDicInfo.Distribuir}] = @{nameof(DBContaCorrenteDicInfo.Distribuir)}");
        cWhere.Append(filtro.LC == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBContaCorrenteDicInfo.PTabelaNome}].[{DBContaCorrenteDicInfo.LC}] = @{nameof(DBContaCorrenteDicInfo.LC)}");
        if (!filtro.IDHTrab.IsEmpty() && filtro.IDHTrab_end.IsEmpty())
        {
            cWhere.Append(filtro.IDHTrab <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBContaCorrenteDicInfo.PTabelaNome}].[{DBContaCorrenteDicInfo.IDHTrab}] >= @{nameof(DBContaCorrenteDicInfo.IDHTrab)}");
        }
        else
        {
            cWhere.Append((filtro.IDHTrab <= 0 && filtro.IDHTrab_end <= 0) ? string.Empty : (!(filtro.IDHTrab <= 0) && !(filtro.IDHTrab_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.IDHTrab} BETWEEN @{nameof(DBContaCorrenteDicInfo.IDHTrab)} AND @{nameof(DBContaCorrenteDicInfo.IDHTrab)}_end" : !(filtro.IDHTrab <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.IDHTrab} = @{nameof(DBContaCorrenteDicInfo.IDHTrab)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.IDHTrab} <= @{nameof(DBContaCorrenteDicInfo.IDHTrab)}_end");
        }

        if (!filtro.NroParcelas.IsEmpty() && filtro.NroParcelas_end.IsEmpty())
        {
            cWhere.Append(filtro.NroParcelas <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBContaCorrenteDicInfo.PTabelaNome}].[{DBContaCorrenteDicInfo.NroParcelas}] >= @{nameof(DBContaCorrenteDicInfo.NroParcelas)}");
        }
        else
        {
            cWhere.Append((filtro.NroParcelas <= 0 && filtro.NroParcelas_end <= 0) ? string.Empty : (!(filtro.NroParcelas <= 0) && !(filtro.NroParcelas_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.NroParcelas} BETWEEN @{nameof(DBContaCorrenteDicInfo.NroParcelas)} AND @{nameof(DBContaCorrenteDicInfo.NroParcelas)}_end" : !(filtro.NroParcelas <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.NroParcelas} = @{nameof(DBContaCorrenteDicInfo.NroParcelas)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.NroParcelas} <= @{nameof(DBContaCorrenteDicInfo.NroParcelas)}_end");
        }

        if (!filtro.ValorPrincipal.IsEmpty() && filtro.ValorPrincipal_end.IsEmpty())
        {
            cWhere.Append(filtro.ValorPrincipal == decimal.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBContaCorrenteDicInfo.PTabelaNome}].[{DBContaCorrenteDicInfo.ValorPrincipal}] >= @{nameof(DBContaCorrenteDicInfo.ValorPrincipal)}");
        }
        else
        {
            cWhere.Append((filtro.ValorPrincipal == decimal.MinValue && filtro.ValorPrincipal_end == decimal.MinValue) ? string.Empty : (!(filtro.ValorPrincipal == decimal.MinValue) && !(filtro.ValorPrincipal_end == decimal.MinValue)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.ValorPrincipal} BETWEEN @{nameof(DBContaCorrenteDicInfo.ValorPrincipal)} AND @{nameof(DBContaCorrenteDicInfo.ValorPrincipal)}_end" : !(filtro.ValorPrincipal == decimal.MinValue) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.ValorPrincipal} = @{nameof(DBContaCorrenteDicInfo.ValorPrincipal)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.ValorPrincipal} <= @{nameof(DBContaCorrenteDicInfo.ValorPrincipal)}_end");
        }

        if (!filtro.ParcelaPrincipalID.IsEmpty() && filtro.ParcelaPrincipalID_end.IsEmpty())
        {
            cWhere.Append(filtro.ParcelaPrincipalID <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBContaCorrenteDicInfo.PTabelaNome}].[{DBContaCorrenteDicInfo.ParcelaPrincipalID}] >= @{nameof(DBContaCorrenteDicInfo.ParcelaPrincipalID)}");
        }
        else
        {
            cWhere.Append((filtro.ParcelaPrincipalID <= 0 && filtro.ParcelaPrincipalID_end <= 0) ? string.Empty : (!(filtro.ParcelaPrincipalID <= 0) && !(filtro.ParcelaPrincipalID_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.ParcelaPrincipalID} BETWEEN @{nameof(DBContaCorrenteDicInfo.ParcelaPrincipalID)} AND @{nameof(DBContaCorrenteDicInfo.ParcelaPrincipalID)}_end" : !(filtro.ParcelaPrincipalID <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.ParcelaPrincipalID} = @{nameof(DBContaCorrenteDicInfo.ParcelaPrincipalID)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.ParcelaPrincipalID} <= @{nameof(DBContaCorrenteDicInfo.ParcelaPrincipalID)}_end");
        }

        cWhere.Append(filtro.Hide == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBContaCorrenteDicInfo.PTabelaNome}].[{DBContaCorrenteDicInfo.Hide}] = @{nameof(DBContaCorrenteDicInfo.Hide)}");
        if (!filtro.DataPgto.IsEmpty() && filtro.DataPgto_end.IsEmpty())
        {
            cWhere.Append(filtro.DataPgto.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBContaCorrenteDicInfo.PTabelaNome}].[{DBContaCorrenteDicInfo.DataPgto}], 103) >= CONVERT(DATE, @{nameof(DBContaCorrenteDicInfo.DataPgto)}, 103)");
        }
        else
        {
            cWhere.Append((filtro.DataPgto.IsEmpty() && filtro.DataPgto_end.IsEmpty()) ? string.Empty : (!(filtro.DataPgto.IsEmpty()) && !(filtro.DataPgto_end.IsEmpty())) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.DataPgto} BETWEEN @{nameof(DBContaCorrenteDicInfo.DataPgto)} AND @{nameof(DBContaCorrenteDicInfo.DataPgto)}_end" : !(filtro.DataPgto.IsEmpty()) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.DataPgto} = @{nameof(DBContaCorrenteDicInfo.DataPgto)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.DataPgto} <= @{nameof(DBContaCorrenteDicInfo.DataPgto)}_end");
        }

        cWhere.Append(filtro.GUID.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBContaCorrenteDicInfo.PTabelaNome}].[{DBContaCorrenteDicInfo.GUID}]  {DevourerConsts.MsiCollate} like @{nameof(DBContaCorrenteDicInfo.GUID)}");
        if (!filtro.Codigo_filtro.IsEmpty() && filtro.Codigo_filtro_end.IsEmpty())
        {
            cWhere.Append(filtro.Codigo_filtro <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBContaCorrenteDicInfo.PTabelaNome}].[{DBContaCorrenteDicInfo.CampoCodigo}] >= @{nameof(DBContaCorrenteDicInfo.CampoCodigo)}");
        }
        else
        {
            cWhere.Append((filtro.Codigo_filtro <= 0 && filtro.Codigo_filtro_end <= 0) ? string.Empty : (!(filtro.Codigo_filtro <= 0) && !(filtro.Codigo_filtro_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.CampoCodigo} BETWEEN @{nameof(DBContaCorrenteDicInfo.CampoCodigo)} AND @{nameof(DBContaCorrenteDicInfo.CampoCodigo)}_end" : !(filtro.Codigo_filtro <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.CampoCodigo} = @{nameof(DBContaCorrenteDicInfo.CampoCodigo)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBContaCorrenteDicInfo.CampoCodigo} <= @{nameof(DBContaCorrenteDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private static string ApplyWildCard(char wildcardChar, string value)
    {
        if (wildcardChar == '\0' || wildcardChar == ' ')
        {
            return value;
        }

        var result = $"{wildcardChar}{value.Replace(" ", wildcardChar.ToString())}{wildcardChar}";
        return result;
    }

    private async Task<IEnumerable<ContaCorrenteResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}