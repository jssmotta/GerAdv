// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBInstancia - Nome da classe (ex: DBClientes)
/// Instancia - Nome da tabela (ex: Clientes)
/// ins - Prefixo dos campos (ex: cli)
/// insCodigo - Nome do campo código (ex: cliCodigo)
/// insNroProcesso - Nome do campo nome (ex: cliNome)
/// DBInstancia.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBInstanciaTests : IDisposable
{
    private readonly DBInstancia _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBInstanciaTests()
    {
        _instance = new DBInstancia();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("insCodigo", typeof(int));
        dt.Columns.Add("insQuemCad", typeof(int));
        dt.Columns.Add("insDtCad", typeof(DateTime));
        dt.Columns.Add("insQuemAtu", typeof(int));
        dt.Columns.Add("insDtAtu", typeof(DateTime));
        dt.Columns.Add("insVisto", typeof(bool));
        dt.Columns.Add("insGUID", typeof(string));
        dt.Columns.Add("insLiminarPedida", typeof(string));
        dt.Columns.Add("insObjeto", typeof(string));
        dt.Columns.Add("insStatusResultado", typeof(int));
        dt.Columns.Add("insLiminarPendente", typeof(string));
        dt.Columns.Add("insInterpusemosRecurso", typeof(string));
        dt.Columns.Add("insLiminarConcedida", typeof(string));
        dt.Columns.Add("insLiminarNegada", typeof(string));
        dt.Columns.Add("insProcesso", typeof(int));
        dt.Columns.Add("insData", typeof(string));
        dt.Columns.Add("insLiminarParcial", typeof(string));
        dt.Columns.Add("insLiminarResultado", typeof(string));
        dt.Columns.Add("insNroProcesso", typeof(string));
        dt.Columns.Add("insDivisao", typeof(int));
        dt.Columns.Add("insLiminarCliente", typeof(string));
        dt.Columns.Add("insComarca", typeof(int));
        dt.Columns.Add("insSubDivisao", typeof(int));
        dt.Columns.Add("insPrincipal", typeof(string));
        dt.Columns.Add("insAcao", typeof(int));
        dt.Columns.Add("insForo", typeof(int));
        dt.Columns.Add("insTipoRecurso", typeof(int));
        dt.Columns.Add("insZKey", typeof(string));
        dt.Columns.Add("insZKeyQuem", typeof(int));
        dt.Columns.Add("insZKeyQuando", typeof(DateTime));
        dt.Columns.Add("insNroAntigo", typeof(string));
        dt.Columns.Add("insAccessCode", typeof(string));
        dt.Columns.Add("insJulgador", typeof(int));
        dt.Columns.Add("insZKeyIA", typeof(string));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("Instancia", DBInstancia.PTabelaNome);
        Assert.Equal(" Instancia.* ", DBInstancia.CamposSqlX);
        Assert.Equal("insCodigo", DBInstancia.CampoCodigo);
        Assert.Equal("insNroProcesso", DBInstancia.CampoNome);
        Assert.Equal("ins", DBInstancia.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBInstancia();
        Assert.Equal(0, instance.ID);
        Assert.Equal("Instancia", instance.ITabelaName());
        Assert.Equal("ins", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBInstancia((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBInstancia((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["insCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBInstancia(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("Instancia", cadastro.ITabelaName());
        Assert.Equal("insCodigo", cadastro.ICampoCodigo());
        Assert.Equal("insNroProcesso", cadastro.ICampoNome());
        Assert.Equal("ins", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBInstancia.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBInstancia.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBInstancia.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBInstancia();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBInstancia();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnTrue()
    {
        Assert.True(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void GUID_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FGUID = input;
        Assert.Equal(expected, _instance.FGUID);
    }

    [Fact]
    public void GUID_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FGUID = longString;
        Assert.True(_instance.FGUID.Length <= 100);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void LiminarPedida_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FLiminarPedida = input;
        Assert.Equal(expected, _instance.FLiminarPedida);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Objeto_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FObjeto = input;
        Assert.Equal(expected, _instance.FObjeto);
    }

    [Fact]
    public void Objeto_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 255 + 10);
        _instance.FObjeto = longString;
        Assert.True(_instance.FObjeto.Length <= 255);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void StatusResultado_ShouldAcceptIntegerValues(int value)
    {
        _instance.FStatusResultado = value;
        Assert.Equal(value, _instance.FStatusResultado);
    }

    [Fact]
    public void StatusResultado_DefaultValue_ShouldBeZero()
    {
        var instance = new DBInstancia();
        Assert.Equal(0, instance.FStatusResultado);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void LiminarPendente_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FLiminarPendente = value;
        Assert.Equal(value, _instance.FLiminarPendente);
    }

    [Fact]
    public void LiminarPendente_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBInstancia();
        Assert.False(instance.FLiminarPendente);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void InterpusemosRecurso_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FInterpusemosRecurso = value;
        Assert.Equal(value, _instance.FInterpusemosRecurso);
    }

    [Fact]
    public void InterpusemosRecurso_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBInstancia();
        Assert.False(instance.FInterpusemosRecurso);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void LiminarConcedida_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FLiminarConcedida = value;
        Assert.Equal(value, _instance.FLiminarConcedida);
    }

    [Fact]
    public void LiminarConcedida_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBInstancia();
        Assert.False(instance.FLiminarConcedida);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void LiminarNegada_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FLiminarNegada = value;
        Assert.Equal(value, _instance.FLiminarNegada);
    }

    [Fact]
    public void LiminarNegada_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBInstancia();
        Assert.False(instance.FLiminarNegada);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Processo_ShouldAcceptIntegerValues(int value)
    {
        _instance.FProcesso = value;
        Assert.Equal(value, _instance.FProcesso);
    }

    [Fact]
    public void Processo_DefaultValue_ShouldBeZero()
    {
        var instance = new DBInstancia();
        Assert.Equal(0, instance.FProcesso);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void LiminarParcial_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FLiminarParcial = value;
        Assert.Equal(value, _instance.FLiminarParcial);
    }

    [Fact]
    public void LiminarParcial_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBInstancia();
        Assert.False(instance.FLiminarParcial);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void LiminarResultado_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FLiminarResultado = input;
        Assert.Equal(expected, _instance.FLiminarResultado);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void NroProcesso_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNroProcesso = input;
        Assert.Equal(expected, _instance.FNroProcesso);
    }

    [Fact]
    public void NroProcesso_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 25 + 10);
        _instance.FNroProcesso = longString;
        Assert.True(_instance.FNroProcesso.Length <= 25);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Divisao_ShouldAcceptIntegerValues(int value)
    {
        _instance.FDivisao = value;
        Assert.Equal(value, _instance.FDivisao);
    }

    [Fact]
    public void Divisao_DefaultValue_ShouldBeZero()
    {
        var instance = new DBInstancia();
        Assert.Equal(0, instance.FDivisao);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void LiminarCliente_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FLiminarCliente = value;
        Assert.Equal(value, _instance.FLiminarCliente);
    }

    [Fact]
    public void LiminarCliente_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBInstancia();
        Assert.False(instance.FLiminarCliente);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Comarca_ShouldAcceptIntegerValues(int value)
    {
        _instance.FComarca = value;
        Assert.Equal(value, _instance.FComarca);
    }

    [Fact]
    public void Comarca_DefaultValue_ShouldBeZero()
    {
        var instance = new DBInstancia();
        Assert.Equal(0, instance.FComarca);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void SubDivisao_ShouldAcceptIntegerValues(int value)
    {
        _instance.FSubDivisao = value;
        Assert.Equal(value, _instance.FSubDivisao);
    }

    [Fact]
    public void SubDivisao_DefaultValue_ShouldBeZero()
    {
        var instance = new DBInstancia();
        Assert.Equal(0, instance.FSubDivisao);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Principal_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FPrincipal = value;
        Assert.Equal(value, _instance.FPrincipal);
    }

    [Fact]
    public void Principal_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBInstancia();
        Assert.False(instance.FPrincipal);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Acao_ShouldAcceptIntegerValues(int value)
    {
        _instance.FAcao = value;
        Assert.Equal(value, _instance.FAcao);
    }

    [Fact]
    public void Acao_DefaultValue_ShouldBeZero()
    {
        var instance = new DBInstancia();
        Assert.Equal(0, instance.FAcao);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Foro_ShouldAcceptIntegerValues(int value)
    {
        _instance.FForo = value;
        Assert.Equal(value, _instance.FForo);
    }

    [Fact]
    public void Foro_DefaultValue_ShouldBeZero()
    {
        var instance = new DBInstancia();
        Assert.Equal(0, instance.FForo);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void TipoRecurso_ShouldAcceptIntegerValues(int value)
    {
        _instance.FTipoRecurso = value;
        Assert.Equal(value, _instance.FTipoRecurso);
    }

    [Fact]
    public void TipoRecurso_DefaultValue_ShouldBeZero()
    {
        var instance = new DBInstancia();
        Assert.Equal(0, instance.FTipoRecurso);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void ZKey_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FZKey = input;
        Assert.Equal(expected, _instance.FZKey);
    }

    [Fact]
    public void ZKey_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 25 + 10);
        _instance.FZKey = longString;
        Assert.True(_instance.FZKey.Length <= 25);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void ZKeyQuem_ShouldAcceptIntegerValues(int value)
    {
        _instance.FZKeyQuem = value;
        Assert.Equal(value, _instance.FZKeyQuem);
    }

    [Fact]
    public void ZKeyQuem_DefaultValue_ShouldBeZero()
    {
        var instance = new DBInstancia();
        Assert.Equal(0, instance.FZKeyQuem);
    }

    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void ZKeyQuando_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FZKeyQuando = dateString;
        Assert.Equal(dateString, _instance.FZKeyQuando);
    }

    [Fact]
    public void ZKeyQuando_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBInstancia();
        Assert.Equal(string.Empty, instance.FZKeyQuando);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void NroAntigo_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNroAntigo = input;
        Assert.Equal(expected, _instance.FNroAntigo);
    }

    [Fact]
    public void NroAntigo_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 25 + 10);
        _instance.FNroAntigo = longString;
        Assert.True(_instance.FNroAntigo.Length <= 25);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void AccessCode_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FAccessCode = input;
        Assert.Equal(expected, _instance.FAccessCode);
    }

    [Fact]
    public void AccessCode_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FAccessCode = longString;
        Assert.True(_instance.FAccessCode.Length <= 100);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Julgador_ShouldAcceptIntegerValues(int value)
    {
        _instance.FJulgador = value;
        Assert.Equal(value, _instance.FJulgador);
    }

    [Fact]
    public void Julgador_DefaultValue_ShouldBeZero()
    {
        var instance = new DBInstancia();
        Assert.Equal(0, instance.FJulgador);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void ZKeyIA_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FZKeyIA = input;
        Assert.Equal(expected, _instance.FZKeyIA);
    }

    [Fact]
    public void ZKeyIA_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 25 + 10);
        _instance.FZKeyIA = longString;
        Assert.True(_instance.FZKeyIA.Length <= 25);
    }

    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}