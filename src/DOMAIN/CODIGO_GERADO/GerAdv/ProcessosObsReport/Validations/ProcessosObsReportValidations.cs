// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IProcessosObsReportValidation
{
    Task<bool> ValidateReg(Models.ProcessosObsReport reg, IProcessosObsReportService service, IProcessosReader processosReader, IHistoricoReader historicoReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, IProcessosObsReportService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class ProcessosObsReportValidation : IProcessosObsReportValidation
{
    public async Task<bool> CanDelete(int id, IProcessosObsReportService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.ProcessosObsReport reg)
    {
        if (reg.Observacao.Length > 2048)
            throw new SGValidationException($"Observacao deve ter no máximo 2048 caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.ProcessosObsReport reg, IProcessosObsReportService service, IProcessosReader processosReader, IHistoricoReader historicoReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Data))
            throw new SGValidationException("Data é obrigatório");
        if (await IsDuplicado(reg, service, uri))
            throw new SGValidationException($"Processos Obs Report '{reg.Data}'  - Processo");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.Data.IsEmpty())
            throw new SGValidationException("Data é obrigatório.");
        if (reg.Processo == 0)
            throw new SGValidationException("Processo é obrigatório.");
        // Processos
        {
            var regProcessos = await processosReader.Read(reg.Processo, oCnn);
            if (regProcessos == null || regProcessos.Id != reg.Processo)
            {
                throw new SGValidationException($"Processos não encontrado ({regProcessos?.Id}).");
            }
        }

        // Historico
        if (!reg.Historico.IsEmptyIDNumber())
        {
            var regHistorico = await historicoReader.Read(reg.Historico, oCnn);
            if (regHistorico == null || regHistorico.Id != reg.Historico)
            {
                throw new SGValidationException($"Historico não encontrado ({regHistorico?.Id}).");
            }
        }

        return true;
    }

    private async Task<bool> IsDuplicado(Models.ProcessosObsReport reg, IProcessosObsReportService service, string uri)
    {
        var existingProcessosObsReport = (await service.Filter(new Filters.FilterProcessosObsReport { Processo = reg.Processo }, uri)).FirstOrDefault(); // TRACK 10042025
        return existingProcessosObsReport != null && existingProcessosObsReport.Id > 0 && existingProcessosObsReport.Id != reg.Id;
    }
}