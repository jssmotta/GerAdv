// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class SMSAliceWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFSMSAliceFactory> _mockSMSAliceFactory;
    private readonly Mock<FSMSAlice> _mockFSMSAlice;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly SMSAliceWhere _smsaliceWhere;
    public SMSAliceWhereTests()
    {
        _mockSMSAliceFactory = new Mock<IFSMSAliceFactory>();
        _mockFSMSAlice = new Mock<FSMSAlice>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _smsaliceWhere = new SMSAliceWhere(_mockSMSAliceFactory.Object);
    }

    public void Dispose()
    {
        _mockSMSAliceFactory?.Reset();
        _mockFSMSAlice?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
        };
    }

    private void SetupMockFSMSAlice(int? Operador = 1, string? Nome = "João", int? TipoEMail = 1)
    {
        _mockFSMSAlice.Setup(f => f.FOperador).Returns(Operador ?? 0);
        _mockFSMSAlice.Setup(f => f.FNome).Returns(Nome ?? string.Empty);
        _mockFSMSAlice.Setup(f => f.FTipoEMail).Returns(TipoEMail ?? 0);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFSMSAliceFactory>();
        // Act
        var smsaliceWhere = new SMSAliceWhere(mockFactory.Object);
        // Assert
        smsaliceWhere.Should().NotBeNull();
        smsaliceWhere.Should().BeAssignableTo<ISMSAliceWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFSMSAliceFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new SMSAliceWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnSMSAliceResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFSMSAlice();
        _mockSMSAliceFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFSMSAlice.Object);
        // Act
        var result = _smsaliceWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.Operador.Should().Be(1);
        result.Nome.Should().Be("João");
        result.TipoEMail.Should().Be(1);
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFSMSAlice(Operador: null, Nome: null, TipoEMail: null);
        _mockSMSAliceFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFSMSAlice.Object);
        // Act
        var result = _smsaliceWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Operador.Should().Be(0);
        result.Nome.Should().Be(string.Empty);
        result.TipoEMail.Should().Be(0);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFSMSAlice();
        _mockSMSAliceFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFSMSAlice.Object);
        // Act
        var result = _smsaliceWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockSMSAliceFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFSMSAlice();
        _mockSMSAliceFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFSMSAlice.Object);
        // Act
        var result = _smsaliceWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockSMSAliceFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFSMSAlice();
        _mockSMSAliceFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFSMSAlice.Object);
        // Act
        var result = _smsaliceWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockSMSAliceFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFSMSAlice();
        _mockSMSAliceFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFSMSAlice.Object);
        // Act
        _smsaliceWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockSMSAliceFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFSMSAliceInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFSMSAlice.Setup(f => f.Dispose());
        SetupMockFSMSAlice();
        _mockSMSAliceFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFSMSAlice.Object);
        // Act
        _smsaliceWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFSMSAlice.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockSMSAliceFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _smsaliceWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFSMSAlice(Operador: 1, Nome: "João", TipoEMail: 1);
        _mockSMSAliceFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFSMSAlice.Object);
        // Act
        var result = _smsaliceWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.Operador.Should().Be(1);
        result.Nome.Should().Be("João");
        result.TipoEMail.Should().Be(1);
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "Nome = @{DBSMSAliceDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBSMSAliceDicInfo.CampoNome}", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"),
        };
        SetupMockFSMSAlice();
        _mockSMSAliceFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFSMSAlice.Object);
        // Act
        _smsaliceWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockSMSAliceFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBSMSAliceDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }
#region DateTime Tests
#endregion
#endregion
}