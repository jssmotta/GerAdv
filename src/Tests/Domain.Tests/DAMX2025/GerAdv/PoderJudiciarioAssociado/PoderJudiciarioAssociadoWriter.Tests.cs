// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class PoderJudiciarioAssociadoWriterTests
{
    private readonly Mock<IFPoderJudiciarioAssociadoFactory> _mockPoderJudiciarioAssociadoFactory;
    private readonly Mock<FPoderJudiciarioAssociado> _mockFPoderJudiciarioAssociado;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly PoderJudiciarioAssociadoWriter _poderjudiciarioassociadoWriter;
    public PoderJudiciarioAssociadoWriterTests()
    {
        _mockPoderJudiciarioAssociadoFactory = new Mock<IFPoderJudiciarioAssociadoFactory>();
        _mockFPoderJudiciarioAssociado = new Mock<FPoderJudiciarioAssociado>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _poderjudiciarioassociadoWriter = new PoderJudiciarioAssociadoWriter(_mockPoderJudiciarioAssociadoFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var poderjudiciarioassociado = CreateValidPoderJudiciarioAssociadoModel();
        poderjudiciarioassociado.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockPoderJudiciarioAssociadoFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFPoderJudiciarioAssociado.Object);
        _mockFPoderJudiciarioAssociado.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _poderjudiciarioassociadoWriter.WriteAsync(poderjudiciarioassociado, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFPoderJudiciarioAssociado.Object);
        _mockPoderJudiciarioAssociadoFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockPoderJudiciarioAssociadoFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFPoderJudiciarioAssociado.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var poderjudiciarioassociado = CreateValidPoderJudiciarioAssociadoModel();
        poderjudiciarioassociado.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockPoderJudiciarioAssociadoFactory.Setup(x => x.CreateFromIdAsync(poderjudiciarioassociado.Id, _mockConnection.Object)).ReturnsAsync(_mockFPoderJudiciarioAssociado.Object);
        _mockFPoderJudiciarioAssociado.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _poderjudiciarioassociadoWriter.WriteAsync(poderjudiciarioassociado, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFPoderJudiciarioAssociado.Object);
        _mockPoderJudiciarioAssociadoFactory.Verify(x => x.CreateFromIdAsync(poderjudiciarioassociado.Id, _mockConnection.Object), Times.Once);
        _mockPoderJudiciarioAssociadoFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFPoderJudiciarioAssociado.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var poderjudiciarioassociado = CreateValidPoderJudiciarioAssociadoModel();
        var auditorQuem = 99;
        _mockPoderJudiciarioAssociadoFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFPoderJudiciarioAssociado.Object);
        _mockFPoderJudiciarioAssociado.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _poderjudiciarioassociadoWriter.WriteAsync(poderjudiciarioassociado, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFPoderJudiciarioAssociado.Object);
        _mockFPoderJudiciarioAssociado.VerifySet(x => x.FJustica = poderjudiciarioassociado.Justica, Times.Once);
        _mockFPoderJudiciarioAssociado.VerifySet(x => x.FJusticaNome = poderjudiciarioassociado.JusticaNome, Times.Once);
        _mockFPoderJudiciarioAssociado.VerifySet(x => x.FArea = poderjudiciarioassociado.Area, Times.Once);
        _mockFPoderJudiciarioAssociado.VerifySet(x => x.FAreaNome = poderjudiciarioassociado.AreaNome, Times.Once);
        _mockFPoderJudiciarioAssociado.VerifySet(x => x.FTribunal = poderjudiciarioassociado.Tribunal, Times.Once);
        _mockFPoderJudiciarioAssociado.VerifySet(x => x.FTribunalNome = poderjudiciarioassociado.TribunalNome, Times.Once);
        _mockFPoderJudiciarioAssociado.VerifySet(x => x.FForo = poderjudiciarioassociado.Foro, Times.Once);
        _mockFPoderJudiciarioAssociado.VerifySet(x => x.FForoNome = poderjudiciarioassociado.ForoNome, Times.Once);
        _mockFPoderJudiciarioAssociado.VerifySet(x => x.FCidade = poderjudiciarioassociado.Cidade, Times.Once);
        _mockFPoderJudiciarioAssociado.VerifySet(x => x.FSubDivisaoNome = poderjudiciarioassociado.SubDivisaoNome, Times.Once);
        _mockFPoderJudiciarioAssociado.VerifySet(x => x.FCidadeNome = poderjudiciarioassociado.CidadeNome, Times.Once);
        _mockFPoderJudiciarioAssociado.VerifySet(x => x.FSubDivisao = poderjudiciarioassociado.SubDivisao, Times.Once);
        _mockFPoderJudiciarioAssociado.VerifySet(x => x.FGUID = poderjudiciarioassociado.GUID, Times.Once);
        _mockFPoderJudiciarioAssociado.VerifySet(x => x.FTipo = poderjudiciarioassociado.Tipo, Times.Once);
        _mockFPoderJudiciarioAssociado.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var poderjudiciarioassociado = CreateValidPoderJudiciarioAssociadoModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockPoderJudiciarioAssociadoFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _poderjudiciarioassociadoWriter.WriteAsync(poderjudiciarioassociado, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var poderjudiciarioassociado = CreateValidPoderJudiciarioAssociadoModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockPoderJudiciarioAssociadoFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFPoderJudiciarioAssociado.Object);
        _mockFPoderJudiciarioAssociado.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _poderjudiciarioassociadoWriter.WriteAsync(poderjudiciarioassociado, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var poderjudiciarioassociadoResponse = new PoderJudiciarioAssociadoResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockPoderJudiciarioAssociadoFactory.Setup(x => x.DeleteAsync(operadorId, poderjudiciarioassociadoResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _poderjudiciarioassociadoWriter.Delete(poderjudiciarioassociadoResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockPoderJudiciarioAssociadoFactory.Verify(x => x.DeleteAsync(operadorId, poderjudiciarioassociadoResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var poderjudiciarioassociadoResponse = new PoderJudiciarioAssociadoResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockPoderJudiciarioAssociadoFactory.Setup(x => x.DeleteAsync(operadorId, poderjudiciarioassociadoResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _poderjudiciarioassociadoWriter.Delete(poderjudiciarioassociadoResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var poderjudiciarioassociadoResponse = new PoderJudiciarioAssociadoResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockPoderJudiciarioAssociadoFactory.Setup(x => x.DeleteAsync(operadorId, poderjudiciarioassociadoResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _poderjudiciarioassociadoWriter.Delete(poderjudiciarioassociadoResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new PoderJudiciarioAssociadoWriter(_mockPoderJudiciarioAssociadoFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new PoderJudiciarioAssociadoWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.PoderJudiciarioAssociado CreateValidPoderJudiciarioAssociadoModel()
    {
        return new Models.PoderJudiciarioAssociado
        {
            Id = 0,
            Justica = 1,
            JusticaNome = "João",
            Area = 1,
            AreaNome = "João",
            Tribunal = 1,
            TribunalNome = "João",
            Foro = 1,
            ForoNome = "João",
            Cidade = 1,
            SubDivisaoNome = "João",
            CidadeNome = "João",
            SubDivisao = 1,
            GUID = Guid.NewGuid().ToString(),
            Tipo = 1
        };
    }
#endregion
}