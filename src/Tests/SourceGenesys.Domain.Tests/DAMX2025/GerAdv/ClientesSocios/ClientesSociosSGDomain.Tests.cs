// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBClientesSocios - Nome da classe (ex: DBClientes)
/// ClientesSocios - Nome da tabela (ex: Clientes)
/// csc - Prefixo dos campos (ex: cli)
/// cscCodigo - Nome do campo código (ex: cliCodigo)
/// cscNome - Nome do campo nome (ex: cliNome)
/// DBClientesSocios.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBClientesSociosTests : IDisposable
{
    private readonly DBClientesSocios _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBClientesSociosTests()
    {
        _instance = new DBClientesSocios();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("cscCodigo", typeof(int));
        dt.Columns.Add("cscQuemCad", typeof(int));
        dt.Columns.Add("cscDtCad", typeof(DateTime));
        dt.Columns.Add("cscQuemAtu", typeof(int));
        dt.Columns.Add("cscDtAtu", typeof(DateTime));
        dt.Columns.Add("cscVisto", typeof(bool));
        dt.Columns.Add("cscSomenteRepresentante", typeof(string));
        dt.Columns.Add("cscGUID", typeof(string));
        dt.Columns.Add("cscIdade", typeof(int));
        dt.Columns.Add("cscIsRepresentanteLegal", typeof(string));
        dt.Columns.Add("cscQualificacao", typeof(string));
        dt.Columns.Add("cscSexo", typeof(string));
        dt.Columns.Add("cscDtNasc", typeof(DateTime));
        dt.Columns.Add("cscNome", typeof(string));
        dt.Columns.Add("cscSite", typeof(string));
        dt.Columns.Add("cscRepresentanteLegal", typeof(string));
        dt.Columns.Add("cscCliente", typeof(int));
        dt.Columns.Add("cscEndereco", typeof(string));
        dt.Columns.Add("cscBairro", typeof(string));
        dt.Columns.Add("cscCEP", typeof(string));
        dt.Columns.Add("cscCidade", typeof(int));
        dt.Columns.Add("cscRG", typeof(string));
        dt.Columns.Add("cscCPF", typeof(string));
        dt.Columns.Add("cscFone", typeof(string));
        dt.Columns.Add("cscParticipacao", typeof(string));
        dt.Columns.Add("cscCargo", typeof(string));
        dt.Columns.Add("cscEMail", typeof(string));
        dt.Columns.Add("cscObs", typeof(string));
        dt.Columns.Add("cscCNH", typeof(string));
        dt.Columns.Add("cscDataContrato", typeof(DateTime));
        dt.Columns.Add("cscCNPJ", typeof(string));
        dt.Columns.Add("cscInscEst", typeof(string));
        dt.Columns.Add("cscSocioEmpresaAdminNome", typeof(string));
        dt.Columns.Add("cscEnderecoSocio", typeof(string));
        dt.Columns.Add("cscBairroSocio", typeof(string));
        dt.Columns.Add("cscCEPSocio", typeof(string));
        dt.Columns.Add("cscCidadeSocio", typeof(int));
        dt.Columns.Add("cscRGDataExp", typeof(DateTime));
        dt.Columns.Add("cscSocioEmpresaAdminSomente", typeof(string));
        dt.Columns.Add("cscTipo", typeof(string));
        dt.Columns.Add("cscFax", typeof(string));
        dt.Columns.Add("cscClass", typeof(string));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("ClientesSocios", DBClientesSocios.PTabelaNome);
        Assert.Equal(" ClientesSocios.* ", DBClientesSocios.CamposSqlX);
        Assert.Equal("cscCodigo", DBClientesSocios.CampoCodigo);
        Assert.Equal("cscNome", DBClientesSocios.CampoNome);
        Assert.Equal("csc", DBClientesSocios.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBClientesSocios();
        Assert.Equal(0, instance.ID);
        Assert.Equal("ClientesSocios", instance.ITabelaName());
        Assert.Equal("csc", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBClientesSocios((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBClientesSocios((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["cscCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBClientesSocios(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("ClientesSocios", cadastro.ITabelaName());
        Assert.Equal("cscCodigo", cadastro.ICampoCodigo());
        Assert.Equal("cscNome", cadastro.ICampoNome());
        Assert.Equal("csc", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBClientesSocios.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBClientesSocios.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBClientesSocios.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBClientesSocios();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBClientesSocios();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnTrue()
    {
        Assert.True(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void SomenteRepresentante_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FSomenteRepresentante = value;
        Assert.Equal(value, _instance.FSomenteRepresentante);
    }

    [Fact]
    public void SomenteRepresentante_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBClientesSocios();
        Assert.False(instance.FSomenteRepresentante);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void SomenteRepresentante_ShouldAcceptIntegerValues(int value)
{
    _instance.FSomenteRepresentante = value;
    Assert.Equal(value, _instance.FSomenteRepresentante);
}

[Fact]
public void SomenteRepresentante_DefaultValue_ShouldBeZero()
{
    var instance = new DBClientesSocios();
    Assert.Equal(0, instance.SomenteRepresentante);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void SomenteRepresentante_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FSomenteRepresentante = dateString;
    Assert.Equal(dateString, _instance.FSomenteRepresentante);
}

[Fact]
public void SomenteRepresentante_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBClientesSocios();
    Assert.Equal(string.Empty, instance.SomenteRepresentante);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void SomenteRepresentante_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FSomenteRepresentante = input;
        Assert.Equal(expected, _instance.FSomenteRepresentante);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FSomenteRepresentante = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void SomenteRepresentante_ValidEmail_ShouldAccept(string email)
{
    _instance.FSomenteRepresentante = email;
    Assert.Equal(email, _instance.FSomenteRepresentante);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void SomenteRepresentante_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FSomenteRepresentante = email);
}
*/
    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void GUID_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FGUID = input;
        Assert.Equal(expected, _instance.FGUID);
    }

    [Fact]
    public void GUID_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 150 + 10);
        _instance.FGUID = longString;
        Assert.True(_instance.FGUID.Length <= 150);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Idade_ShouldAcceptIntegerValues(int value)
    {
        _instance.FIdade = value;
        Assert.Equal(value, _instance.FIdade);
    }

    [Fact]
    public void Idade_DefaultValue_ShouldBeZero()
    {
        var instance = new DBClientesSocios();
        Assert.Equal(0, instance.FIdade);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void IsRepresentanteLegal_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FIsRepresentanteLegal = value;
        Assert.Equal(value, _instance.FIsRepresentanteLegal);
    }

    [Fact]
    public void IsRepresentanteLegal_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBClientesSocios();
        Assert.False(instance.FIsRepresentanteLegal);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void IsRepresentanteLegal_ShouldAcceptIntegerValues(int value)
{
    _instance.FIsRepresentanteLegal = value;
    Assert.Equal(value, _instance.FIsRepresentanteLegal);
}

[Fact]
public void IsRepresentanteLegal_DefaultValue_ShouldBeZero()
{
    var instance = new DBClientesSocios();
    Assert.Equal(0, instance.IsRepresentanteLegal);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void IsRepresentanteLegal_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FIsRepresentanteLegal = dateString;
    Assert.Equal(dateString, _instance.FIsRepresentanteLegal);
}

[Fact]
public void IsRepresentanteLegal_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBClientesSocios();
    Assert.Equal(string.Empty, instance.IsRepresentanteLegal);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void IsRepresentanteLegal_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FIsRepresentanteLegal = input;
        Assert.Equal(expected, _instance.FIsRepresentanteLegal);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FIsRepresentanteLegal = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void IsRepresentanteLegal_ValidEmail_ShouldAccept(string email)
{
    _instance.FIsRepresentanteLegal = email;
    Assert.Equal(email, _instance.FIsRepresentanteLegal);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void IsRepresentanteLegal_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FIsRepresentanteLegal = email);
}
*/
    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Qualificacao_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FQualificacao = input;
        Assert.Equal(expected, _instance.FQualificacao);
    }

    [Fact]
    public void Qualificacao_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FQualificacao = longString;
        Assert.True(_instance.FQualificacao.Length <= 100);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Sexo_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FSexo = value;
        Assert.Equal(value, _instance.FSexo);
    }

    [Fact]
    public void Sexo_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBClientesSocios();
        Assert.False(instance.FSexo);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Sexo_ShouldAcceptIntegerValues(int value)
{
    _instance.FSexo = value;
    Assert.Equal(value, _instance.FSexo);
}

[Fact]
public void Sexo_DefaultValue_ShouldBeZero()
{
    var instance = new DBClientesSocios();
    Assert.Equal(0, instance.Sexo);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Sexo_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FSexo = dateString;
    Assert.Equal(dateString, _instance.FSexo);
}

[Fact]
public void Sexo_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBClientesSocios();
    Assert.Equal(string.Empty, instance.Sexo);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Sexo_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FSexo = input;
        Assert.Equal(expected, _instance.FSexo);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FSexo = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Sexo_ValidEmail_ShouldAccept(string email)
{
    _instance.FSexo = email;
    Assert.Equal(email, _instance.FSexo);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Sexo_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FSexo = email);
}
*/
    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void DtNasc_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FDtNasc = dateString;
        Assert.Equal(dateString, _instance.FDtNasc);
    }

    [Fact]
    public void DtNasc_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBClientesSocios();
        Assert.Equal(string.Empty, instance.FDtNasc);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Nome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNome = input;
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void Nome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FNome = longString;
        Assert.True(_instance.FNome.Length <= 50);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Site_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FSite = input;
        Assert.Equal(expected, _instance.FSite);
    }

    [Fact]
    public void Site_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 150 + 10);
        _instance.FSite = longString;
        Assert.True(_instance.FSite.Length <= 150);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void RepresentanteLegal_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FRepresentanteLegal = input;
        Assert.Equal(expected, _instance.FRepresentanteLegal);
    }

    [Fact]
    public void RepresentanteLegal_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FRepresentanteLegal = longString;
        Assert.True(_instance.FRepresentanteLegal.Length <= 50);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cliente_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCliente = value;
        Assert.Equal(value, _instance.FCliente);
    }

    [Fact]
    public void Cliente_DefaultValue_ShouldBeZero()
    {
        var instance = new DBClientesSocios();
        Assert.Equal(0, instance.FCliente);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Endereco_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FEndereco = input;
        Assert.Equal(expected, _instance.FEndereco);
    }

    [Fact]
    public void Endereco_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FEndereco = longString;
        Assert.True(_instance.FEndereco.Length <= 80);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Bairro_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FBairro = input;
        Assert.Equal(expected, _instance.FBairro);
    }

    [Fact]
    public void Bairro_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FBairro = longString;
        Assert.True(_instance.FBairro.Length <= 50);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cidade_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCidade = value;
        Assert.Equal(value, _instance.FCidade);
    }

    [Fact]
    public void Cidade_DefaultValue_ShouldBeZero()
    {
        var instance = new DBClientesSocios();
        Assert.Equal(0, instance.FCidade);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void RG_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FRG = input;
        Assert.Equal(expected, _instance.FRG);
    }

    [Fact]
    public void RG_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 30 + 10);
        _instance.FRG = longString;
        Assert.True(_instance.FRG.Length <= 30);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Fone_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FFone = input;
        Assert.Equal(expected, _instance.FFone);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Participacao_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FParticipacao = input;
        Assert.Equal(expected, _instance.FParticipacao);
    }

    [Fact]
    public void Participacao_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 10 + 10);
        _instance.FParticipacao = longString;
        Assert.True(_instance.FParticipacao.Length <= 10);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Cargo_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FCargo = input;
        Assert.Equal(expected, _instance.FCargo);
    }

    [Fact]
    public void Cargo_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FCargo = longString;
        Assert.True(_instance.FCargo.Length <= 50);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Obs_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FObs = input;
        Assert.Equal(expected, _instance.FObs);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void CNH_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FCNH = input;
        Assert.Equal(expected, _instance.FCNH);
    }

    [Fact]
    public void CNH_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FCNH = longString;
        Assert.True(_instance.FCNH.Length <= 100);
    }

    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void DataContrato_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FDataContrato = dateString;
        Assert.Equal(dateString, _instance.FDataContrato);
    }

    [Fact]
    public void DataContrato_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBClientesSocios();
        Assert.Equal(string.Empty, instance.FDataContrato);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void InscEst_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FInscEst = input;
        Assert.Equal(expected, _instance.FInscEst);
    }

    [Fact]
    public void InscEst_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 15 + 10);
        _instance.FInscEst = longString;
        Assert.True(_instance.FInscEst.Length <= 15);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void SocioEmpresaAdminNome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FSocioEmpresaAdminNome = input;
        Assert.Equal(expected, _instance.FSocioEmpresaAdminNome);
    }

    [Fact]
    public void SocioEmpresaAdminNome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FSocioEmpresaAdminNome = longString;
        Assert.True(_instance.FSocioEmpresaAdminNome.Length <= 80);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void EnderecoSocio_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FEnderecoSocio = input;
        Assert.Equal(expected, _instance.FEnderecoSocio);
    }

    [Fact]
    public void EnderecoSocio_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FEnderecoSocio = longString;
        Assert.True(_instance.FEnderecoSocio.Length <= 80);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void BairroSocio_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FBairroSocio = input;
        Assert.Equal(expected, _instance.FBairroSocio);
    }

    [Fact]
    public void BairroSocio_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FBairroSocio = longString;
        Assert.True(_instance.FBairroSocio.Length <= 50);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void CEPSocio_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FCEPSocio = input;
        Assert.Equal(expected, _instance.FCEPSocio);
    }

    [Fact]
    public void CEPSocio_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 10 + 10);
        _instance.FCEPSocio = longString;
        Assert.True(_instance.FCEPSocio.Length <= 10);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void CidadeSocio_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCidadeSocio = value;
        Assert.Equal(value, _instance.FCidadeSocio);
    }

    [Fact]
    public void CidadeSocio_DefaultValue_ShouldBeZero()
    {
        var instance = new DBClientesSocios();
        Assert.Equal(0, instance.FCidadeSocio);
    }

    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void RGDataExp_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FRGDataExp = dateString;
        Assert.Equal(dateString, _instance.FRGDataExp);
    }

    [Fact]
    public void RGDataExp_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBClientesSocios();
        Assert.Equal(string.Empty, instance.FRGDataExp);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void SocioEmpresaAdminSomente_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FSocioEmpresaAdminSomente = value;
        Assert.Equal(value, _instance.FSocioEmpresaAdminSomente);
    }

    [Fact]
    public void SocioEmpresaAdminSomente_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBClientesSocios();
        Assert.False(instance.FSocioEmpresaAdminSomente);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void SocioEmpresaAdminSomente_ShouldAcceptIntegerValues(int value)
{
    _instance.FSocioEmpresaAdminSomente = value;
    Assert.Equal(value, _instance.FSocioEmpresaAdminSomente);
}

[Fact]
public void SocioEmpresaAdminSomente_DefaultValue_ShouldBeZero()
{
    var instance = new DBClientesSocios();
    Assert.Equal(0, instance.SocioEmpresaAdminSomente);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void SocioEmpresaAdminSomente_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FSocioEmpresaAdminSomente = dateString;
    Assert.Equal(dateString, _instance.FSocioEmpresaAdminSomente);
}

[Fact]
public void SocioEmpresaAdminSomente_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBClientesSocios();
    Assert.Equal(string.Empty, instance.SocioEmpresaAdminSomente);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void SocioEmpresaAdminSomente_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FSocioEmpresaAdminSomente = input;
        Assert.Equal(expected, _instance.FSocioEmpresaAdminSomente);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FSocioEmpresaAdminSomente = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void SocioEmpresaAdminSomente_ValidEmail_ShouldAccept(string email)
{
    _instance.FSocioEmpresaAdminSomente = email;
    Assert.Equal(email, _instance.FSocioEmpresaAdminSomente);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void SocioEmpresaAdminSomente_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FSocioEmpresaAdminSomente = email);
}
*/
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Tipo_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FTipo = value;
        Assert.Equal(value, _instance.FTipo);
    }

    [Fact]
    public void Tipo_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBClientesSocios();
        Assert.False(instance.FTipo);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Tipo_ShouldAcceptIntegerValues(int value)
{
    _instance.FTipo = value;
    Assert.Equal(value, _instance.FTipo);
}

[Fact]
public void Tipo_DefaultValue_ShouldBeZero()
{
    var instance = new DBClientesSocios();
    Assert.Equal(0, instance.Tipo);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Tipo_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FTipo = dateString;
    Assert.Equal(dateString, _instance.FTipo);
}

[Fact]
public void Tipo_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBClientesSocios();
    Assert.Equal(string.Empty, instance.Tipo);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Tipo_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FTipo = input;
        Assert.Equal(expected, _instance.FTipo);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FTipo = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Tipo_ValidEmail_ShouldAccept(string email)
{
    _instance.FTipo = email;
    Assert.Equal(email, _instance.FTipo);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Tipo_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FTipo = email);
}
*/
    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Fax_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FFax = input;
        Assert.Equal(expected, _instance.FFax);
    }

    [Fact]
    public void Fax_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 2048 + 10);
        _instance.FFax = longString;
        Assert.True(_instance.FFax.Length <= 2048);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData(" A", "A")]
    public void Class_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FClass = input;
        Assert.Equal(expected, _instance.FClass);
    }

    [Fact]
    public void Class_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 1 + 10);
        _instance.FClass = longString;
        Assert.True(_instance.FClass.Length <= 1);
    }

    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}