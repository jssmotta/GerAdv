// 100% auto-generated by Source Genesys Core
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming
public partial class DBAdvogados
{
    [XmlIgnore]
    private protected bool pFldFCargo, pFldFEMailPro, pFldFCPF, pFldFNome, pFldFRG, pFldFCasa, pFldFNomeMae, pFldFEscritorio, pFldFEstagiario, pFldFOAB, pFldFNomeCompleto, pFldFEndereco, pFldFCidade, pFldFCEP, pFldFSexo, pFldFBairro, pFldFCTPSSerie, pFldFCTPS, pFldFFone, pFldFFax, pFldFComissao, pFldFDtInicio, pFldFDtFim, pFldFDtNasc, pFldFSalario, pFldFSecretaria, pFldFTextoProcuracao, pFldFEMail, pFldFEspecializacao, pFldFPasta, pFldFObservacao, pFldFContaBancaria, pFldFParcTop, pFldFClass, pFldFTop, pFldFEtiqueta, pFldFAni, pFldFBold;
    [XmlIgnore]
    private protected int m_FCargo, m_FEscritorio, m_FCidade, m_FComissao;
    [XmlIgnore]
    private protected string? m_FEMailPro, m_FCPF, m_FNome, m_FRG, m_FNomeMae, m_FOAB, m_FNomeCompleto, m_FEndereco, m_FCEP, m_FBairro, m_FCTPSSerie, m_FCTPS, m_FFone, m_FFax, m_FSecretaria, m_FTextoProcuracao, m_FEMail, m_FEspecializacao, m_FPasta, m_FObservacao, m_FContaBancaria, m_FClass;
    [XmlIgnore]
    private protected DateTime? m_FDtInicio, m_FDtFim, m_FDtNasc;
    [XmlIgnore]
    private protected bool m_FCasa, m_FEstagiario, m_FSexo, m_FParcTop, m_FTop, m_FEtiqueta, m_FAni, m_FBold;
    [XmlIgnore]
    private protected decimal m_FSalario;
    public int FCargo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCargo;
        set
        {
            pFldFCargo = pFldFCargo || value != m_FCargo;
            if (pFldFCargo)
                m_FCargo = value;
        }
    }

    [StringLength(255, ErrorMessage = "A propriedade FEMailPro da tabela Advogados deve ter no máximo 255 caracteres.")]
    public string? FEMailPro
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEMailPro ?? string.Empty;
        set
        {
            pFldFEMailPro = pFldFEMailPro || !(m_FEMailPro ?? string.Empty).Equals(value);
            if (pFldFEMailPro)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FEMailPro = trimmed.Length > 255 ? trimmed.AsSpan(0, 255).ToString() : trimmed;
            }
        }
    }

    [StringLength(11, ErrorMessage = "A propriedade FCPF da tabela Advogados deve ter no máximo 11 caracteres.")]
    public string? FCPF
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCPF ?? string.Empty;
        set
        {
            pFldFCPF = pFldFCPF || !(m_FCPF ?? string.Empty).Equals(value);
            if (pFldFCPF)
            {
                var trimmed = (value?.Trim() ?? string.Empty).ClearInputCpf();
                var valueCpf = trimmed.Length > 11 ? trimmed.AsSpan(0, 11).ToString() : trimmed;
                if (valueCpf.Length < 11)
                {
                    valueCpf = string.Empty;
                }

                if (valueCpf.Length == 0 || valueCpf.IsValidCpf())
                    m_FCPF = valueCpf;
                else
                    throw new ArgumentException("CPF inválido ou não informado corretamente.", nameof(value));
            }
        }
    }

    [StringLength(50, ErrorMessage = "A propriedade FNome da tabela Advogados deve ter no máximo 50 caracteres.")]
    public string? FNome
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNome ?? string.Empty;
        set
        {
            pFldFNome = pFldFNome || !(m_FNome ?? string.Empty).Equals(value);
            if (pFldFNome)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FNome = trimmed.Length > 50 ? trimmed.AsSpan(0, 50).ToString() : trimmed;
            }
        }
    }

    [StringLength(30, ErrorMessage = "A propriedade FRG da tabela Advogados deve ter no máximo 30 caracteres.")]
    public string? FRG
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FRG ?? string.Empty;
        set
        {
            pFldFRG = pFldFRG || !(m_FRG ?? string.Empty).Equals(value);
            if (pFldFRG)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FRG = trimmed.Length > 30 ? trimmed.AsSpan(0, 30).ToString() : trimmed;
            }
        }
    }

    public bool FCasa
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCasa;
        set
        {
            pFldFCasa = pFldFCasa || value != m_FCasa;
            if (pFldFCasa)
                m_FCasa = value;
        }
    }

    [StringLength(80, ErrorMessage = "A propriedade FNomeMae da tabela Advogados deve ter no máximo 80 caracteres.")]
    public string? FNomeMae
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNomeMae ?? string.Empty;
        set
        {
            pFldFNomeMae = pFldFNomeMae || !(m_FNomeMae ?? string.Empty).Equals(value);
            if (pFldFNomeMae)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FNomeMae = trimmed.Length > 80 ? trimmed.AsSpan(0, 80).ToString() : trimmed;
            }
        }
    }

    public int FEscritorio
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEscritorio;
        set
        {
            pFldFEscritorio = pFldFEscritorio || value != m_FEscritorio;
            if (pFldFEscritorio)
                m_FEscritorio = value;
        }
    }

    public bool FEstagiario
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEstagiario;
        set
        {
            pFldFEstagiario = pFldFEstagiario || value != m_FEstagiario;
            if (pFldFEstagiario)
                m_FEstagiario = value;
        }
    }

    [StringLength(12, ErrorMessage = "A propriedade FOAB da tabela Advogados deve ter no máximo 12 caracteres.")]
    public string? FOAB
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FOAB ?? string.Empty;
        set
        {
            pFldFOAB = pFldFOAB || !(m_FOAB ?? string.Empty).Equals(value);
            if (pFldFOAB)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FOAB = trimmed.Length > 12 ? trimmed.AsSpan(0, 12).ToString() : trimmed;
            }
        }
    }

    [StringLength(50, ErrorMessage = "A propriedade FNomeCompleto da tabela Advogados deve ter no máximo 50 caracteres.")]
    public string? FNomeCompleto
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNomeCompleto ?? string.Empty;
        set
        {
            pFldFNomeCompleto = pFldFNomeCompleto || !(m_FNomeCompleto ?? string.Empty).Equals(value);
            if (pFldFNomeCompleto)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FNomeCompleto = trimmed.Length > 50 ? trimmed.AsSpan(0, 50).ToString() : trimmed;
            }
        }
    }

    [StringLength(80, ErrorMessage = "A propriedade FEndereco da tabela Advogados deve ter no máximo 80 caracteres.")]
    public string? FEndereco
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEndereco ?? string.Empty;
        set
        {
            pFldFEndereco = pFldFEndereco || !(m_FEndereco ?? string.Empty).Equals(value);
            if (pFldFEndereco)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FEndereco = trimmed.Length > 80 ? trimmed.AsSpan(0, 80).ToString() : trimmed;
            }
        }
    }

    public int FCidade
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCidade;
        set
        {
            pFldFCidade = pFldFCidade || value != m_FCidade;
            if (pFldFCidade)
                m_FCidade = value;
        }
    }

    [StringLength(10, ErrorMessage = "A propriedade FCEP da tabela Advogados deve ter no máximo 10 caracteres.")]
    public string? FCEP
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCEP ?? string.Empty;
        set
        {
            pFldFCEP = pFldFCEP || !(m_FCEP ?? string.Empty).Equals(value);
            if (pFldFCEP)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FCEP = trimmed.Length > 10 ? trimmed.AsSpan(0, 10).ToString() : trimmed;
            }
        }
    }

    public bool FSexo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FSexo;
        set
        {
            pFldFSexo = pFldFSexo || value != m_FSexo;
            if (pFldFSexo)
                m_FSexo = value;
        }
    }

    [StringLength(50, ErrorMessage = "A propriedade FBairro da tabela Advogados deve ter no máximo 50 caracteres.")]
    public string? FBairro
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FBairro ?? string.Empty;
        set
        {
            pFldFBairro = pFldFBairro || !(m_FBairro ?? string.Empty).Equals(value);
            if (pFldFBairro)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FBairro = trimmed.Length > 50 ? trimmed.AsSpan(0, 50).ToString() : trimmed;
            }
        }
    }

    [StringLength(10, ErrorMessage = "A propriedade FCTPSSerie da tabela Advogados deve ter no máximo 10 caracteres.")]
    public string? FCTPSSerie
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCTPSSerie ?? string.Empty;
        set
        {
            pFldFCTPSSerie = pFldFCTPSSerie || !(m_FCTPSSerie ?? string.Empty).Equals(value);
            if (pFldFCTPSSerie)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FCTPSSerie = trimmed.Length > 10 ? trimmed.AsSpan(0, 10).ToString() : trimmed;
            }
        }
    }

    [StringLength(15, ErrorMessage = "A propriedade FCTPS da tabela Advogados deve ter no máximo 15 caracteres.")]
    public string? FCTPS
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCTPS ?? string.Empty;
        set
        {
            pFldFCTPS = pFldFCTPS || !(m_FCTPS ?? string.Empty).Equals(value);
            if (pFldFCTPS)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FCTPS = trimmed.Length > 15 ? trimmed.AsSpan(0, 15).ToString() : trimmed;
            }
        }
    }

    public string? FFone
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FFone ?? string.Empty;
        set
        {
            pFldFFone = pFldFFone || !(m_FFone ?? string.Empty).Equals(value);
            if (pFldFFone)
                m_FFone = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public string? FFax
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FFax ?? string.Empty;
        set
        {
            pFldFFax = pFldFFax || !(m_FFax ?? string.Empty).Equals(value);
            if (pFldFFax)
                m_FFax = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public int FComissao
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FComissao;
        set
        {
            pFldFComissao = pFldFComissao || value != m_FComissao;
            if (pFldFComissao)
                m_FComissao = value;
        }
    }

    public string? FDtInicio
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDtInicio is null || m_FDtInicio == DevourerOne.DDataZerada ? string.Empty : m_FDtInicio.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFDtInicio, m_FDtInicio, value)is not (true, var changed, var data))
                return;
            (pFldFDtInicio, m_FDtInicio) = (changed, data);
        }
    }

    public string? FDtFim
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDtFim is null || m_FDtFim == DevourerOne.DDataZerada ? string.Empty : m_FDtFim.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFDtFim, m_FDtFim, value)is not (true, var changed, var data))
                return;
            (pFldFDtFim, m_FDtFim) = (changed, data);
        }
    }

    public string? FDtNasc
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDtNasc is null || m_FDtNasc == DevourerOne.DDataZerada ? string.Empty : m_FDtNasc.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFDtNasc, m_FDtNasc, value)is not (true, var changed, var data))
                return;
            (pFldFDtNasc, m_FDtNasc) = (changed, data);
        }
    }

    public decimal FSalario
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FSalario;
        set
        {
            if (value == m_FSalario)
                return;
            pFldFSalario = true;
            m_FSalario = value;
        }
    }

    [StringLength(20, ErrorMessage = "A propriedade FSecretaria da tabela Advogados deve ter no máximo 20 caracteres.")]
    public string? FSecretaria
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FSecretaria ?? string.Empty;
        set
        {
            pFldFSecretaria = pFldFSecretaria || !(m_FSecretaria ?? string.Empty).Equals(value);
            if (pFldFSecretaria)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FSecretaria = trimmed.Length > 20 ? trimmed.AsSpan(0, 20).ToString() : trimmed;
            }
        }
    }

    [StringLength(200, ErrorMessage = "A propriedade FTextoProcuracao da tabela Advogados deve ter no máximo 200 caracteres.")]
    public string? FTextoProcuracao
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FTextoProcuracao ?? string.Empty;
        set
        {
            pFldFTextoProcuracao = pFldFTextoProcuracao || !(m_FTextoProcuracao ?? string.Empty).Equals(value);
            if (pFldFTextoProcuracao)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FTextoProcuracao = trimmed.Length > 200 ? trimmed.AsSpan(0, 200).ToString() : trimmed;
            }
        }
    }

    [StringLength(100, ErrorMessage = "A propriedade FEMail da tabela Advogados deve ter no máximo 100 caracteres.")]
    public string? FEMail
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEMail ?? string.Empty;
        set
        {
            pFldFEMail = pFldFEMail || !(m_FEMail ?? string.Empty).Equals(value);
            if (pFldFEMail)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FEMail = trimmed.Length > 100 ? trimmed.AsSpan(0, 100).ToString() : trimmed;
                if (m_FEMail.IsValidEmail())
                    return;
                throw new ArgumentException("E-mail inválido ou não informado corretamente.", nameof(value));
            }
        }
    }

    public string? FEspecializacao
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEspecializacao ?? string.Empty;
        set
        {
            pFldFEspecializacao = pFldFEspecializacao || !(m_FEspecializacao ?? string.Empty).Equals(value);
            if (pFldFEspecializacao)
                m_FEspecializacao = value.trim().FixAbc() ?? string.Empty;
        }
    }

    [StringLength(200, ErrorMessage = "A propriedade FPasta da tabela Advogados deve ter no máximo 200 caracteres.")]
    public string? FPasta
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPasta ?? string.Empty;
        set
        {
            pFldFPasta = pFldFPasta || !(m_FPasta ?? string.Empty).Equals(value);
            if (pFldFPasta)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FPasta = trimmed.Length > 200 ? trimmed.AsSpan(0, 200).ToString() : trimmed;
            }
        }
    }

    public string? FObservacao
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FObservacao ?? string.Empty;
        set
        {
            pFldFObservacao = pFldFObservacao || !(m_FObservacao ?? string.Empty).Equals(value);
            if (pFldFObservacao)
                m_FObservacao = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public string? FContaBancaria
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FContaBancaria ?? string.Empty;
        set
        {
            pFldFContaBancaria = pFldFContaBancaria || !(m_FContaBancaria ?? string.Empty).Equals(value);
            if (pFldFContaBancaria)
                m_FContaBancaria = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public bool FParcTop
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FParcTop;
        set
        {
            pFldFParcTop = pFldFParcTop || value != m_FParcTop;
            if (pFldFParcTop)
                m_FParcTop = value;
        }
    }

    [StringLength(1, ErrorMessage = "A propriedade FClass da tabela Advogados deve ter no máximo 1 caracteres.")]
    public string? FClass
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FClass ?? string.Empty;
        set
        {
            pFldFClass = pFldFClass || !(m_FClass ?? string.Empty).Equals(value);
            if (pFldFClass)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FClass = trimmed.Length > 1 ? trimmed.AsSpan(0, 1).ToString() : trimmed;
            }
        }
    }

    public bool FTop
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FTop;
        set
        {
            pFldFTop = pFldFTop || value != m_FTop;
            if (pFldFTop)
                m_FTop = value;
        }
    }

    public bool FEtiqueta
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEtiqueta;
        set
        {
            pFldFEtiqueta = pFldFEtiqueta || value != m_FEtiqueta;
            if (pFldFEtiqueta)
                m_FEtiqueta = value;
        }
    }

    public bool FAni
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAni;
        set
        {
            pFldFAni = pFldFAni || value != m_FAni;
            if (pFldFAni)
                m_FAni = value;
        }
    }

    public bool FBold
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FBold;
        set
        {
            pFldFBold = pFldFBold || value != m_FBold;
            if (pFldFBold)
                m_FBold = value;
        }
    }

    public bool IVisto() => m_FVisto;
    public int IQuemCad() => m_FQuemCad;
    public int IQuemAtu() => m_FQuemAtu;
    public DateTime IDtCad() => MDtCad;
    public DateTime IDtAtu() => MDtAtu;
    public string IDtCadDataX_DataHora() => MDtCadDataX_DataHora;
    public string IDtAtuDataX_DataHora() => MDtAtuDataX_DataHora;
    public void SetAuditor(int usuarioId) => AuditorQuem = usuarioId;
    public string IMDtCadDataX_DataHora() => MDtAtuDataX_DataHora;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITabelaName() => PTabelaNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoCodigo() => CampoCodigo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoNome() => CampoNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string IPrefixo() => PTabelaPrefixo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITypeFieldCode() => "int";
    public ImmutableArray<DBInfoSystem> IFieldsRaw() => throw new NotImplementedException();
    public ImmutableArray<DBInfoSystem> IPkFields() => throw new NotImplementedException();
    public ImmutableArray<DBInfoSystem> IPkIndicesFields() => throw new NotImplementedException();
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetID() => ID;
}