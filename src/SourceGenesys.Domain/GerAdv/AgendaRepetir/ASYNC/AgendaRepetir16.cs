// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
public partial class DBAgendaRepetir
{
    /// <summary>
    /// Factory method async para carregar [tableMin]
    /// </summary>
    public static async Task<DBAgendaRepetir> CreateAsync(int nCodigo, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        var registro = new DBAgendaRepetir();
        await registro.CarregarAsync(nCodigo, oCnn, cancellationToken);
        return registro;
    }

    /// <summary>
    /// Carregar dados async
    /// </summary>
    protected async Task CarregarAsync(int id, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        if (id.IsEmptyIDNumber() || oCnn is null)
            return;
        using var cmd = new SqlCommand($"{ConfiguracoesDBT.SQLNoCount}SELECT TOP (1) {CamposSqlX} FROM {PTabelaNome.dbo(oCnn)} WHERE [{CampoCodigo}] = @ThisIDToLoad", oCnn.InnerConnection);
        cmd.Parameters.AddWithValue("@ThisIDToLoad", id);
        using var ds = await ConfiguracoesDBT.GetDataTableAsync(cmd, CommandBehavior.SingleRow, oCnn, cancellationToken);
        if (ds?.Rows.Count > 0)
        {
            CarregarDadosBd(ds.Rows[0]);
        }
    }

#if (!NOTSTORED_AgendaRepetir)
    /// <summary>
    /// Update async com timeout e cancellation
    /// </summary>
    public async Task<int> UpdateAsync(MsiSqlConnection? oCnn, int insertId = 0, CancellationToken cancellationToken = default, int timeoutSeconds = 30)
    {
        var isInsert = insertId == 0 && ID == 0;
        if (!isInsert && !HasAnyFieldChanged())
            return 0;
        if (oCnn is null)
        {
#if DEBUG
            PTabelaNome.PopupBox("oCnn is null - UpdateAsync()");
#endif
            return 0;
        }

        try
        {
            var updateTool = new DBToolWTable32Async(PTabelaNome, CampoCodigo, ID == 0)
            {
                IsMachineCode = true,
            };
            updateTool.Where = isInsert ? string.Empty : $"{CampoCodigo}={ID}";
            ConfigureUpdateFields(updateTool);
            ConfigureAuditorFields(updateTool);
            if (insertId != 0)
            {
                return await GravaNewIdAsync(updateTool, insertId, oCnn, cancellationToken);
            }

            var result = await updateTool.RecUpdateAsync(oCnn, cancellationToken);
            if (updateTool.Insert && result == "OK")
            {
                ID = updateTool.GetCodigo();
                if (ID == 0)
                {
                    Error = -2;
                    ErrorDescription = "O registro não pode ser incluído, tente mais tarde.";
                    return Error;
                }
            }

            return result == "OK" ? 0 : -1;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (Exception ex)
        {
            Error = -1;
            ErrorDescription = ex.Message;
            return Error;
        }
    }

#endif
    /// <summary>
    /// Verificar se existe async
    /// </summary>
    public static async Task<bool> ExisteAsync(int id, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        if (oCnn is null || id <= 0)
            return false;
        var existe = await ConfiguracoesDBT.GetScalarAsync<int?>($"SELECT 1 FROM {PTabelaNome.dbo(oCnn)} WHERE {CampoCodigo} = {id}", oCnn, cancellationToken);
        return existe.HasValue;
    }

    /// <summary>
    /// Delete async
    /// </summary>
    /// <param name = "operadorId">For future Audity</param>
    /// <param name = "id"></param>
    /// <param name = "oCnn"></param>
    /// <param name = "cancellationToken"></param>
    /// <returns></returns>
    /// <exception cref = "InvalidOperationException"></exception>
    public static async Task<bool> DeleteRecordAsync(int operadorId, int id, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        if (oCnn is null || id <= 0)
            return false;
        var sql = $"DELETE FROM {PTabelaNome.dbo(oCnn)} WHERE {CampoCodigo} = @Id";
        try
        {
            using var cmd = new SqlCommand(sql, oCnn.InnerConnection);
            cmd.Parameters.AddWithValue("@Id", id);
            var rowsAffected = await cmd.ExecuteNonQueryAsync(cancellationToken);
            return rowsAffected > 0;
        }
        catch (SqlException ex)when (ex.Number == 547)
        {
            throw new InvalidOperationException("Este registro não pode ser excluído, pois está vinculado a outros registros.");
        }
    }

#if (!NOTSTORED_AgendaRepetir)
    // Helper methods
    private bool HasAnyFieldChanged() => pFldFAdvogado || pFldFCliente || pFldFDataFinal || pFldFFuncionario || pFldFHoraFinal || pFldFProcesso || pFldFPessoal || pFldFFrequencia || pFldFDia || pFldFMes || pFldFHora || pFldFIDQuem || pFldFIDQuem2 || pFldFMensagem || pFldFIDTipo || pFldFID1 || pFldFID2 || pFldFID3 || pFldFID4 || pFldFSegunda || pFldFQuarta || pFldFQuinta || pFldFSexta || pFldFSabado || pFldFDomingo || pFldFTerca;
    private void ConfigureUpdateFields(DBToolWTable32Async updateTool)
    {
        if (pFldFAdvogado)
            updateTool.Fields(DBAgendaRepetirDicInfo.Advogado, m_FAdvogado, ETiposCampos.FNumber);
        if (pFldFCliente)
            updateTool.Fields(DBAgendaRepetirDicInfo.Cliente, m_FCliente, ETiposCampos.FNumber);
        if (pFldFDataFinal)
            updateTool.Fields(DBAgendaRepetirDicInfo.DataFinal, m_FDataFinal, ETiposCampos.FDate);
        if (pFldFFuncionario)
            updateTool.Fields(DBAgendaRepetirDicInfo.Funcionario, m_FFuncionario, ETiposCampos.FNumber);
        if (pFldFHoraFinal)
            updateTool.Fields(DBAgendaRepetirDicInfo.HoraFinal, m_FHoraFinal, ETiposCampos.FDate);
        if (pFldFProcesso)
            updateTool.Fields(DBAgendaRepetirDicInfo.Processo, m_FProcesso, ETiposCampos.FNumber);
        if (pFldFPessoal)
            updateTool.Fields(DBAgendaRepetirDicInfo.Pessoal, m_FPessoal, ETiposCampos.FBoolean);
        if (pFldFFrequencia)
            updateTool.Fields(DBAgendaRepetirDicInfo.Frequencia, m_FFrequencia, ETiposCampos.FNumber);
        if (pFldFDia)
            updateTool.Fields(DBAgendaRepetirDicInfo.Dia, m_FDia, ETiposCampos.FNumber);
        if (pFldFMes)
            updateTool.Fields(DBAgendaRepetirDicInfo.Mes, m_FMes, ETiposCampos.FNumber);
        if (pFldFHora)
            updateTool.Fields(DBAgendaRepetirDicInfo.Hora, m_FHora, ETiposCampos.FDate);
        if (pFldFIDQuem)
            updateTool.Fields(DBAgendaRepetirDicInfo.IDQuem, m_FIDQuem, ETiposCampos.FNumber);
        if (pFldFIDQuem2)
            updateTool.Fields(DBAgendaRepetirDicInfo.IDQuem2, m_FIDQuem2, ETiposCampos.FNumber);
        if (pFldFMensagem)
            updateTool.Fields(DBAgendaRepetirDicInfo.Mensagem, m_FMensagem, ETiposCampos.FString);
        if (pFldFIDTipo)
            updateTool.Fields(DBAgendaRepetirDicInfo.IDTipo, m_FIDTipo, ETiposCampos.FNumber);
        if (pFldFID1)
            updateTool.Fields(DBAgendaRepetirDicInfo.ID1, m_FID1, ETiposCampos.FNumber);
        if (pFldFID2)
            updateTool.Fields(DBAgendaRepetirDicInfo.ID2, m_FID2, ETiposCampos.FNumber);
        if (pFldFID3)
            updateTool.Fields(DBAgendaRepetirDicInfo.ID3, m_FID3, ETiposCampos.FNumber);
        if (pFldFID4)
            updateTool.Fields(DBAgendaRepetirDicInfo.ID4, m_FID4, ETiposCampos.FNumber);
        if (pFldFSegunda)
            updateTool.Fields(DBAgendaRepetirDicInfo.Segunda, m_FSegunda, ETiposCampos.FBoolean);
        if (pFldFQuarta)
            updateTool.Fields(DBAgendaRepetirDicInfo.Quarta, m_FQuarta, ETiposCampos.FBoolean);
        if (pFldFQuinta)
            updateTool.Fields(DBAgendaRepetirDicInfo.Quinta, m_FQuinta, ETiposCampos.FBoolean);
        if (pFldFSexta)
            updateTool.Fields(DBAgendaRepetirDicInfo.Sexta, m_FSexta, ETiposCampos.FBoolean);
        if (pFldFSabado)
            updateTool.Fields(DBAgendaRepetirDicInfo.Sabado, m_FSabado, ETiposCampos.FBoolean);
        if (pFldFDomingo)
            updateTool.Fields(DBAgendaRepetirDicInfo.Domingo, m_FDomingo, ETiposCampos.FBoolean);
        if (pFldFTerca)
            updateTool.Fields(DBAgendaRepetirDicInfo.Terca, m_FTerca, ETiposCampos.FBoolean);
    }

#endif
    private void ConfigureAuditorFields(DBToolWTable32Async updateTool)
    {
        var isInsert = ID.IsEmptyIDNumber();
        if (m_AuditorQuem == 0)
            AuditorQuem = 1;
        if (isInsert)
            updateTool.Fields(DBAgendaRepetirDicInfo.QuemCad, AuditorQuem, ETiposCampos.FNumber);
        if (isInsert)
            updateTool.Fields(DBAgendaRepetirDicInfo.DtCad, DevourerOne.DateTimeUtc, ETiposCampos.FDate);
        if (!isInsert)
            updateTool.Fields(DBAgendaRepetirDicInfo.QuemAtu, AuditorQuem, ETiposCampos.FNumber);
        if (!isInsert)
            updateTool.Fields(DBAgendaRepetirDicInfo.DtAtu, DevourerOne.DateTimeUtc, ETiposCampos.FDate);
        updateTool.Fields(DBAgendaRepetirDicInfo.Visto, false, ETiposCampos.FBoolean);
    }

    private async Task<int> GravaNewIdAsync(DBToolWTable32Async updateTool, int insertId, MsiSqlConnection oCnn, CancellationToken cancellationToken)
    {
        ID = insertId;
        updateTool.Fields(CampoCodigo, insertId, ETiposCampos.FNumber);
        var result = await updateTool.RecUpdateAsync(oCnn, cancellationToken, true);
        return result == "OK" ? 0 : -3;
    }
}