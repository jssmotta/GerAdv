// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
import { useState } from 'react';
import InputInput from '@/app/components/Inputs/InputInput';
import InputDate from '@/app/components/Inputs/InputDate';
import InputHora from '@/app/components/Inputs/InputHora';
import InputValor from '@/app/components/Inputs/InputValor';
import InputComboFilterYesNo from '@/app/components/Inputs/InputComboFilterYesNo';
import { FilterHandlers } from '@/app/components/Cruds/GenericFilterDialog';
import { FilterGUTAtividades } from '@/app/GerAdv_TS/GUTAtividades/Filters/GUTAtividades';
import GUTPeriodicidadeComboBox from '@/app/GerAdv_TS/GUTPeriodicidade/ComboBox/GUTPeriodicidade';
import OperadorComboBox from '@/app/GerAdv_TS/Operador/ComboBox/Operador';
interface UseGUTAtividadesFilterProps {
  handleFetchWithFilter: (filtro?: FilterGUTAtividades | undefined | null) => Promise<void>;
}
interface UseGUTAtividadesFilterReturn {
  // Estados
  showSearch: boolean;
  windowFilter: FilterGUTAtividades;
  setWindowFilter: React.Dispatch<React.SetStateAction<FilterGUTAtividades>>;
  // Handlers do Dialog
  handleSearch: () => void;
  handleCloseSearch: () => void;
  handleConfirmSearch: (filter: FilterGUTAtividades) => Promise<void>;
  // Render function
  renderInputFilters: (handlers: FilterHandlers<FilterGUTAtividades>) => React.ReactNode;
  // Utilitários
  clearFilter: () => void;
  hasActiveFilter: boolean;
}
export const useGUTAtividadesFilter = ({ handleFetchWithFilter }: UseGUTAtividadesFilterProps): UseGUTAtividadesFilterReturn => {
  const [showSearch, setShowSearch] = useState(false);
  const [windowFilter, setWindowFilter] = useState<FilterGUTAtividades>({} as FilterGUTAtividades);
  // Handlers do Dialog
  const handleSearch = () => {
    setShowSearch(true);
    const filterWildechar = {...windowFilter, wildcardChar: '%' } as FilterGUTAtividades;
    setWindowFilter(filterWildechar);
  };
  const handleCloseSearch = () => {
    setShowSearch(false);
  };
  const handleConfirmSearch = async (filter: FilterGUTAtividades) => {
    await handleFetchWithFilter(filter);
  };
  // Função para limpar filtros
  const clearFilter = () => {
    setWindowFilter({});
    sessionStorage.removeItem(btoa('GUTAtividadesFilter'));
    handleFetchWithFilter({});
  };
  // Verificar se há filtros ativos
  const hasActiveFilter = Object.values(windowFilter).some(value =>
    value !== undefined && value !== null && value !== '' && value !== -2147483648
  );
  // Função para renderizar os campos de filtro
  const renderInputFilters = (handlers: FilterHandlers<FilterGUTAtividades>) => (
  <>
  <InputInput
  type='text'
  id='nome'
  name='nome'
  value={handlers.windowFilter?.nome ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Nome'
  label='Nome'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='observacao'
  name='observacao'
  value={handlers.windowFilter?.observacao ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Observacao'
  label='Observacao'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='gutgrupo'
  name='gutgrupo'
  value={handlers.windowFilter?.gutgrupo ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe GUTGrupo'
  label='GUTGrupo (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='gutgrupo_end'
  name='gutgrupo_end'
  value={handlers.windowFilter?.gutgrupo_end ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe GUTGrupo final'
  label='GUTGrupo final'
  disabled={handlers.windowFilter?.gutgrupo ? false: true}
  className='inputIncNome inputSearch'
  />
  <GUTPeriodicidadeComboBox
  name='gutperiodicidade'
  dataForm={null}
  value={handlers.windowFilter?.gutperiodicidade}
  setValue={(e:any) => handlers.handleComboChange(e, 'gutperiodicidade')}
  className='inputSearch inputSearchComboboxTab'
  label='G U T Periodicidade'
  />
  <OperadorComboBox
  name='operador'
  dataForm={null}
  value={handlers.windowFilter?.operador}
  setValue={(e:any) => handlers.handleComboChange(e, 'operador')}
  className='inputSearch inputSearchComboboxTab'
  label='Operador'
  />
  <InputComboFilterYesNo
  type='text'
  id='concluido'
  name='concluido'
  value={handlers.windowFilter?.concluido ?? -2147483648}
  onChange={handlers.handleInputChange}
  label='Concluido'
  className='inputSearch inputSearchCheckbox'
  />
  <InputDate
  type='text'
  id='dataconcluido'
  label='DataConcluido (igual ou início)'
  dataForm={null}
  className='inputSearch'
  name='dataconcluido'
  value={handlers.windowFilter?.dataconcluido ?? ''}
  onChange={(value: string) => handlers.handleDateChange('dataconcluido', value)}
  />
  <InputDate
  type='text'
  id='dataconcluido_end'
  label='DataConcluido (final)'
  dataForm={null}
  className='inputSearch'
  name='dataconcluido_end'
  value={handlers.windowFilter?.dataconcluido_end ?? ''}
  disabled={handlers.windowFilter?.dataconcluido ? false: true}
  onChange={(value: string) => handlers.handleDateChange('dataconcluido_end', value)}
  />
  <InputInput
  type='text'
  id='diasparainiciar'
  name='diasparainiciar'
  value={handlers.windowFilter?.diasparainiciar ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe DiasParaIniciar'
  label='DiasParaIniciar (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='diasparainiciar_end'
  name='diasparainiciar_end'
  value={handlers.windowFilter?.diasparainiciar_end ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe DiasParaIniciar final'
  label='DiasParaIniciar final'
  disabled={handlers.windowFilter?.diasparainiciar ? false: true}
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='minutospararealizar'
  name='minutospararealizar'
  value={handlers.windowFilter?.minutospararealizar ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe MinutosParaRealizar'
  label='MinutosParaRealizar (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='minutospararealizar_end'
  name='minutospararealizar_end'
  value={handlers.windowFilter?.minutospararealizar_end ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe MinutosParaRealizar final'
  label='MinutosParaRealizar final'
  disabled={handlers.windowFilter?.minutospararealizar ? false: true}
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='codigo_filtro'
  name='codigo_filtro'
  value={handlers.windowFilter?.codigo_filtro ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código do cadastro'
  label='Código (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='codigo_filtro_end'
  name='codigo_filtro_end'
  value={handlers.windowFilter?.codigo_filtro_end ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código final do cadastro'
  label='Código final'
  disabled={handlers.windowFilter?.codigo_filtro ? false: true}
  className='inputIncNome inputSearch'
  />
</>
);
return {
  // Estados
  showSearch, 
  windowFilter, 
  setWindowFilter, 
  // Handlers
  handleSearch, 
  handleCloseSearch, 
  handleConfirmSearch, 
  // Render function
  renderInputFilters, 
  // Utilitários
  clearFilter, 
  hasActiveFilter
};
};