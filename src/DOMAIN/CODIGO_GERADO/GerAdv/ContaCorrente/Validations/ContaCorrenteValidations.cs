// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IContaCorrenteValidation
{
    Task<bool> ValidateReg(Models.ContaCorrente reg, IContaCorrenteService service, IClientesReader clientesReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int? id, IContaCorrenteService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class ContaCorrenteValidation : IContaCorrenteValidation
{
    public async Task<bool> CanDelete(int? id, IContaCorrenteService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id == null || id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id ?? default, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.ContaCorrente reg)
    {
        if (reg.GUID != null && reg.GUID.Length > DBContaCorrenteDicInfo.CtoGUID.FTamanho)
            throw new SGValidationException($"GUID deve ter no máximo {DBContaCorrenteDicInfo.CtoGUID.FTamanho} caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.ContaCorrente reg, IContaCorrenteService service, IClientesReader clientesReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Data))
            throw new SGValidationException("Data é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (!string.IsNullOrWhiteSpace(reg.DtOriginal))
        {
            if (DateTime.TryParse(reg.DtOriginal, out DateTime dataAntiga))
            {
                if (dataAntiga < new DateTime(1900, 1, 1))
                    throw new SGValidationException("DtOriginal não pode ser anterior a 01/01/1900.");
            }
        }

        if (!string.IsNullOrWhiteSpace(reg.DataPgto))
        {
            if (DateTime.TryParse(reg.DataPgto, out DateTime dataAntiga))
            {
                if (dataAntiga < new DateTime(1900, 1, 1))
                    throw new SGValidationException("DataPgto não pode ser anterior a 01/01/1900.");
            }
        }

        // Clientes
        if (!reg.Cliente.IsEmptyIDNumber())
        {
            var regClientes = await clientesReader.Read(reg.Cliente, oCnn);
            if (regClientes == null || regClientes.Id != reg.Cliente)
            {
                throw new SGValidationException($"Clientes não encontrado ({regClientes?.Id}).");
            }
        }

        return true;
    }
}