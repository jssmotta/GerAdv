// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
import { useState } from 'react';
import InputInput from '@/app/components/Inputs/InputInput';
import InputDate from '@/app/components/Inputs/InputDate';
import InputHora from '@/app/components/Inputs/InputHora';
import InputValor from '@/app/components/Inputs/InputValor';
import InputComboFilterYesNo from '@/app/components/Inputs/InputComboFilterYesNo';
import { FilterHandlers } from '@/app/components/Cruds/GenericFilterDialog';
import { FilterPoderJudiciarioAssociado } from '@/app/GerAdv_TS/PoderJudiciarioAssociado/Filters/PoderJudiciarioAssociado';
import JusticaComboBox from '@/app/GerAdv_TS/Justica/ComboBox/Justica';
import AreaComboBox from '@/app/GerAdv_TS/Area/ComboBox/Area';
import TribunalComboBox from '@/app/GerAdv_TS/Tribunal/ComboBox/Tribunal';
import ForoComboBox from '@/app/GerAdv_TS/Foro/ComboBox/Foro';
import CidadeComboBox from '@/app/GerAdv_TS/Cidade/ComboBox/Cidade';
interface UsePoderJudiciarioAssociadoFilterProps {
  handleFetchWithFilter: (filtro?: FilterPoderJudiciarioAssociado | undefined | null) => Promise<void>;
}
interface UsePoderJudiciarioAssociadoFilterReturn {
  // Estados
  showSearch: boolean;
  windowFilter: FilterPoderJudiciarioAssociado;
  setWindowFilter: React.Dispatch<React.SetStateAction<FilterPoderJudiciarioAssociado>>;
  // Handlers do Dialog
  handleSearch: () => void;
  handleCloseSearch: () => void;
  handleConfirmSearch: (filter: FilterPoderJudiciarioAssociado) => Promise<void>;
  // Render function
  renderInputFilters: (handlers: FilterHandlers<FilterPoderJudiciarioAssociado>) => React.ReactNode;
  // Utilitários
  clearFilter: () => void;
  hasActiveFilter: boolean;
}
export const usePoderJudiciarioAssociadoFilter = ({ handleFetchWithFilter }: UsePoderJudiciarioAssociadoFilterProps): UsePoderJudiciarioAssociadoFilterReturn => {
  const [showSearch, setShowSearch] = useState(false);
  const [windowFilter, setWindowFilter] = useState<FilterPoderJudiciarioAssociado>({} as FilterPoderJudiciarioAssociado);
  // Handlers do Dialog
  const handleSearch = () => {
    setShowSearch(true);
    const filterWildechar = {...windowFilter, wildcardChar: '%' } as FilterPoderJudiciarioAssociado;
    setWindowFilter(filterWildechar);
  };
  const handleCloseSearch = () => {
    setShowSearch(false);
  };
  const handleConfirmSearch = async (filter: FilterPoderJudiciarioAssociado) => {
    await handleFetchWithFilter(filter);
  };
  // Função para limpar filtros
  const clearFilter = () => {
    setWindowFilter({});
    sessionStorage.removeItem(btoa('PoderJudiciarioAssociadoFilter'));
    handleFetchWithFilter({});
  };
  // Verificar se há filtros ativos
  const hasActiveFilter = Object.values(windowFilter).some(value =>
    value !== undefined && value !== null && value !== '' && value !== -2147483648
  );
  // Função para renderizar os campos de filtro
  const renderInputFilters = (handlers: FilterHandlers<FilterPoderJudiciarioAssociado>) => (
  <>
  <JusticaComboBox
  name='justica'
  dataForm={null}
  value={handlers.windowFilter?.justica}
  setValue={(e:any) => handlers.handleComboChange(e, 'justica')}
  className='inputSearch inputSearchComboboxTab'
  label='Justiça'
  />
  <InputInput
  type='text'
  id='justicanome'
  name='justicanome'
  value={handlers.windowFilter?.justicanome ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe JusticaNome'
  label='JusticaNome'
  className='inputIncNome inputSearch'
  />
  <AreaComboBox
  name='area'
  dataForm={null}
  value={handlers.windowFilter?.area}
  setValue={(e:any) => handlers.handleComboChange(e, 'area')}
  className='inputSearch inputSearchComboboxTab'
  label='Área'
  />
  <InputInput
  type='text'
  id='areanome'
  name='areanome'
  value={handlers.windowFilter?.areanome ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe AreaNome'
  label='AreaNome'
  className='inputIncNome inputSearch'
  />
  <TribunalComboBox
  name='tribunal'
  dataForm={null}
  value={handlers.windowFilter?.tribunal}
  setValue={(e:any) => handlers.handleComboChange(e, 'tribunal')}
  className='inputSearch inputSearchComboboxTab'
  label='Tribunal'
  />
  <InputInput
  type='text'
  id='tribunalnome'
  name='tribunalnome'
  value={handlers.windowFilter?.tribunalnome ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe TribunalNome'
  label='TribunalNome'
  className='inputIncNome inputSearch'
  />
  <ForoComboBox
  name='foro'
  dataForm={null}
  value={handlers.windowFilter?.foro}
  setValue={(e:any) => handlers.handleComboChange(e, 'foro')}
  className='inputSearch inputSearchComboboxTab'
  label='Foro'
  />
  <InputInput
  type='text'
  id='foronome'
  name='foronome'
  value={handlers.windowFilter?.foronome ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe ForoNome'
  label='ForoNome'
  className='inputIncNome inputSearch'
  />
  <CidadeComboBox
  name='cidade'
  dataForm={null}
  value={handlers.windowFilter?.cidade}
  setValue={(e:any) => handlers.handleComboChange(e, 'cidade')}
  className='inputSearch inputSearchComboboxTab'
  label='Cidade'
  />
  <InputInput
  type='text'
  id='subdivisaonome'
  name='subdivisaonome'
  value={handlers.windowFilter?.subdivisaonome ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe SubDivisaoNome'
  label='SubDivisaoNome'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='cidadenome'
  name='cidadenome'
  value={handlers.windowFilter?.cidadenome ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe CidadeNome'
  label='CidadeNome'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='subdivisao'
  name='subdivisao'
  value={handlers.windowFilter?.subdivisao ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe SubDivisao'
  label='SubDivisao (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='subdivisao_end'
  name='subdivisao_end'
  value={handlers.windowFilter?.subdivisao_end ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe SubDivisao final'
  label='SubDivisao final'
  disabled={handlers.windowFilter?.subdivisao ? false: true}
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='tipo'
  name='tipo'
  value={handlers.windowFilter?.tipo ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Tipo'
  label='Tipo (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='tipo_end'
  name='tipo_end'
  value={handlers.windowFilter?.tipo_end ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Tipo final'
  label='Tipo final'
  disabled={handlers.windowFilter?.tipo ? false: true}
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='codigo_filtro'
  name='codigo_filtro'
  value={handlers.windowFilter?.codigo_filtro ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código do cadastro'
  label='Código (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='codigo_filtro_end'
  name='codigo_filtro_end'
  value={handlers.windowFilter?.codigo_filtro_end ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código final do cadastro'
  label='Código final'
  disabled={handlers.windowFilter?.codigo_filtro ? false: true}
  className='inputIncNome inputSearch'
  />
</>
);
return {
  // Estados
  showSearch, 
  windowFilter, 
  setWindowFilter, 
  // Handlers
  handleSearch, 
  handleCloseSearch, 
  handleConfirmSearch, 
  // Render function
  renderInputFilters, 
  // Utilitários
  clearFilter, 
  hasActiveFilter
};
};