// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IContratosValidation
{
    Task<bool> ValidateReg(Models.Contratos reg, IContratosService service, IClientesReader clientesReader, IAdvogadosReader advogadosReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, IContratosService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class ContratosValidation : IContratosValidation
{
    public async Task<bool> CanDelete(int id, IContratosService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.Contratos reg)
    {
        if (reg.Protestar != null && reg.Protestar.Length > 50)
            throw new SGValidationException($"Protestar deve ter no máximo 50 caracteres.");
        if (reg.Juros != null && reg.Juros.Length > 5)
            throw new SGValidationException($"Juros deve ter no máximo 5 caracteres.");
        if (reg.DOCUMENTO != null && reg.DOCUMENTO.Length > 15)
            throw new SGValidationException($"DOCUMENTO deve ter no máximo 15 caracteres.");
        if (reg.Pessoa1 != null && reg.Pessoa1.Length > 100)
            throw new SGValidationException($"Pessoa1 deve ter no máximo 100 caracteres.");
        if (reg.Pessoa2 != null && reg.Pessoa2.Length > 100)
            throw new SGValidationException($"Pessoa2 deve ter no máximo 100 caracteres.");
        if (reg.Pessoa3 != null && reg.Pessoa3.Length > 100)
            throw new SGValidationException($"Pessoa3 deve ter no máximo 100 caracteres.");
        if (reg.ChaveContrato != null && reg.ChaveContrato.Length > 50)
            throw new SGValidationException($"ChaveContrato deve ter no máximo 50 caracteres.");
        if (reg.Multa != null && reg.Multa.Length > 10)
            throw new SGValidationException($"Multa deve ter no máximo 10 caracteres.");
        if (reg.GUID != null && reg.GUID.Length > 100)
            throw new SGValidationException($"GUID deve ter no máximo 100 caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.Contratos reg, IContratosService service, IClientesReader clientesReader, IAdvogadosReader advogadosReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.GUID))
            throw new SGValidationException("GUID é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.EMail1.Length > 0 && !reg.EMail1.IsValidEmail())
            throw new SGValidationException($"EMail1 em formato inválido.");
        if (reg.EMail2.Length > 0 && !reg.EMail2.IsValidEmail())
            throw new SGValidationException($"EMail2 em formato inválido.");
        if (reg.EMail3.Length > 0 && !reg.EMail3.IsValidEmail())
            throw new SGValidationException($"EMail3 em formato inválido.");
        // Clientes
        if (!reg.Cliente.IsEmptyIDNumber())
        {
            var regClientes = await clientesReader.Read(reg.Cliente, oCnn);
            if (regClientes == null || regClientes.Id != reg.Cliente)
            {
                throw new SGValidationException($"Clientes não encontrado ({regClientes?.Id}).");
            }
        }

        // Advogados
        if (!reg.Advogado.IsEmptyIDNumber())
        {
            var regAdvogados = await advogadosReader.Read(reg.Advogado, oCnn);
            if (regAdvogados == null || regAdvogados.Id != reg.Advogado)
            {
                throw new SGValidationException($"Advogados não encontrado ({regAdvogados?.Id}).");
            }
        }

        return true;
    }
}