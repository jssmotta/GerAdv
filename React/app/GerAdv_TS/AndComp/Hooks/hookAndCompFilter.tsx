// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
import { useState } from 'react';
import InputInput from '@/app/components/Inputs/InputInput';
import InputDate from '@/app/components/Inputs/InputDate';
import InputHora from '@/app/components/Inputs/InputHora';
import InputValor from '@/app/components/Inputs/InputValor';
import InputComboFilterYesNo from '@/app/components/Inputs/InputComboFilterYesNo';
import { FilterHandlers } from '@/app/components/Cruds/GenericFilterDialog';
import { FilterAndComp } from '@/app/GerAdv_TS/AndComp/Filters/AndComp';
interface UseAndCompFilterProps {
  handleFetchWithFilter: (filtro?: FilterAndComp | undefined | null) => Promise<void>;
}
interface UseAndCompFilterReturn {
  // Estados
  showSearch: boolean;
  windowFilter: FilterAndComp;
  setWindowFilter: React.Dispatch<React.SetStateAction<FilterAndComp>>;
  // Handlers do Dialog
  handleSearch: () => void;
  handleCloseSearch: () => void;
  handleConfirmSearch: (filter: FilterAndComp) => Promise<void>;
  // Render function
  renderInputFilters: (handlers: FilterHandlers<FilterAndComp>) => React.ReactNode;
  // Utilitários
  clearFilter: () => void;
  hasActiveFilter: boolean;
}
export const useAndCompFilter = ({ handleFetchWithFilter }: UseAndCompFilterProps): UseAndCompFilterReturn => {
  const [showSearch, setShowSearch] = useState(false);
  const [windowFilter, setWindowFilter] = useState<FilterAndComp>({} as FilterAndComp);
  // Handlers do Dialog
  const handleSearch = () => {
    setShowSearch(true);
    const filterWildechar = {...windowFilter, wildcardChar: '%' } as FilterAndComp;
    setWindowFilter(filterWildechar);
  };
  const handleCloseSearch = () => {
    setShowSearch(false);
  };
  const handleConfirmSearch = async (filter: FilterAndComp) => {
    await handleFetchWithFilter(filter);
  };
  // Função para limpar filtros
  const clearFilter = () => {
    setWindowFilter({});
    sessionStorage.removeItem(btoa('AndCompFilter'));
    handleFetchWithFilter({});
  };
  // Verificar se há filtros ativos
  const hasActiveFilter = Object.values(windowFilter).some(value =>
    value !== undefined && value !== null && value !== '' && value !== -2147483648
  );
  // Função para renderizar os campos de filtro
  const renderInputFilters = (handlers: FilterHandlers<FilterAndComp>) => (
  <>
  <InputInput
  type='text'
  id='andamento'
  name='andamento'
  value={handlers.windowFilter?.andamento ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Andamento'
  label='Andamento (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='andamento_end'
  name='andamento_end'
  value={handlers.windowFilter?.andamento_end ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Andamento final'
  label='Andamento final'
  disabled={handlers.windowFilter?.andamento ? false: true}
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='compromisso'
  name='compromisso'
  value={handlers.windowFilter?.compromisso ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Compromisso'
  label='Compromisso (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='compromisso_end'
  name='compromisso_end'
  value={handlers.windowFilter?.compromisso_end ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Compromisso final'
  label='Compromisso final'
  disabled={handlers.windowFilter?.compromisso ? false: true}
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='codigo_filtro'
  name='codigo_filtro'
  value={handlers.windowFilter?.codigo_filtro ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código do cadastro'
  label='Código (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='codigo_filtro_end'
  name='codigo_filtro_end'
  value={handlers.windowFilter?.codigo_filtro_end ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código final do cadastro'
  label='Código final'
  disabled={handlers.windowFilter?.codigo_filtro ? false: true}
  className='inputIncNome inputSearch'
  />
</>
);
return {
  // Estados
  showSearch, 
  windowFilter, 
  setWindowFilter, 
  // Handlers
  handleSearch, 
  handleCloseSearch, 
  handleConfirmSearch, 
  // Render function
  renderInputFilters, 
  // Utilitários
  clearFilter, 
  hasActiveFilter
};
};