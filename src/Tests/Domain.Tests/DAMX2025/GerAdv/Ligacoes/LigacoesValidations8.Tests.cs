// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class LigacoesValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFLigacoesFactory> _mockLigacoesFactory;
    private readonly Mock<ILigacoesReader> _mockReader;
    private readonly LigacoesValidation _validation;
    private readonly Mock<ILigacoesService> _mockLigacoesService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IClientesReader> _mockClientesReader;
    private readonly Mock<IRamalReader> _mockRamalReader;
    private readonly LigacoesService _service;
    private readonly string _validUri = "test-uri";
    public LigacoesValidationTests()
    {
        _mockLigacoesFactory = new Mock<IFLigacoesFactory>();
        _mockReader = new Mock<ILigacoesReader>();
        _validation = new LigacoesValidation();
        _mockLigacoesService = new Mock<ILigacoesService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockClientesReader = new Mock<IClientesReader>();
        _mockRamalReader = new Mock<IRamalReader>();
    }

#region Class Structure Tests
    [Fact]
    public void LigacoesValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<ILigacoesValidation>();
    }

    [Fact]
    public void LigacoesValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(LigacoesValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void LigacoesValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(LigacoesValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.Ligacoes CreateValidLigacoes()
    {
        return new Models.Ligacoes
        {
            Id = 1,
            Assunto = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            AgeClienteAvisado = 0,
            Celular = false,
            Cliente = 0,
            Contato = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            DataRealizada = "24/04/1975",
            QuemID = 0,
            Telefonista = 0,
            UltimoAviso = "24/04/1975",
            HoraFinal = "04:04",
            Nome = "João",
            QuemCodigo = 0,
            Solicitante = 0,
            Para = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Fone = "(11) 99999-9999",
            Ramal = 0,
            Particular = true,
            Realizada = false,
            Status = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Data = "27/05/2022",
            Hora = "04:04",
            Urgente = true,
            LigarPara = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Processo = 0,
            StartScreen = false,
            Emotion = 0
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockLigacoesService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterLigacoes>(), It.IsAny<string>())).ReturnsAsync(new List<LigacoesResponseAll>());
        // Setup other mocks but don't override the Ligacoess service mock
        _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.ClientesResponse { Id = id }));
        _mockRamalReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.RamalResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockLigacoesService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterLigacoes>(), It.IsAny<string>())).ReturnsAsync(new List<LigacoesResponseAll>());
        // Setup other mocks but don't override the Ligacoess service mock
        _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.ClientesResponse { Id = 0 }));
        _mockRamalReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.RamalResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var ligacoes = new Models.Ligacoes
        {
            Id = 1,
            Assunto = null,
            Celular = false,
            Contato = null,
            DataRealizada = null,
            UltimoAviso = null,
            HoraFinal = null,
            Nome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Para = null,
            Fone = null,
            Particular = true,
            Realizada = false,
            Status = null,
            Data = null,
            Hora = null,
            Urgente = true,
            LigarPara = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(ligacoes, _mockLigacoesService.Object, _mockClientesReader.Object, _mockRamalReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockLigacoesService.Object, _mockClientesReader.Object, _mockRamalReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region DataRealizada Validation Tests
    [Theory]
    [InlineData("01/01/1899")]
    [InlineData("31/12/1899")]
    public async Task ValidateReg_WithDataRealizadaBeforeMinDate_ShouldThrowSGValidationException(string invalidDate)
    {
        // Arrange
        var ligacoes = CreateValidLigacoes();
        ligacoes.DataRealizada = invalidDate;
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(ligacoes, _mockLigacoesService.Object, _mockClientesReader.Object, _mockRamalReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("01/01/1900.");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataRealizada_ShouldPass()
    {
        // Arrange
        var ligacoes = CreateValidLigacoes();
        ligacoes.DataRealizada = "01/01/1990";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(ligacoes, _mockLigacoesService.Object, _mockClientesReader.Object, _mockRamalReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullDataRealizada_ShouldPass()
    {
        // Arrange
        var ligacoes = CreateValidLigacoes();
        ligacoes.DataRealizada = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(ligacoes, _mockLigacoesService.Object, _mockClientesReader.Object, _mockRamalReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithInvalidDateDataRealizadaFormat_ShouldPass()
    {
        // Arrange
        var ligacoes = CreateValidLigacoes();
        ligacoes.DataRealizada = "invalid-date";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(ligacoes, _mockLigacoesService.Object, _mockClientesReader.Object, _mockRamalReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue(); // Invalid format is ignored, not validated
    }

    [Fact]
    public async Task ValidateReg_WithEmptyDataRealizada_ShouldPass()
    {
        // Arrange
        var ligacoes = CreateValidLigacoes();
        ligacoes.DataRealizada = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(ligacoes, _mockLigacoesService.Object, _mockClientesReader.Object, _mockRamalReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region UltimoAviso Validation Tests
    [Theory]
    [InlineData("01/01/1899")]
    [InlineData("31/12/1899")]
    public async Task ValidateReg_WithUltimoAvisoBeforeMinDate_ShouldThrowSGValidationException(string invalidDate)
    {
        // Arrange
        var ligacoes = CreateValidLigacoes();
        ligacoes.UltimoAviso = invalidDate;
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(ligacoes, _mockLigacoesService.Object, _mockClientesReader.Object, _mockRamalReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("01/01/1900.");
    }

    [Fact]
    public async Task ValidateReg_WithValidUltimoAviso_ShouldPass()
    {
        // Arrange
        var ligacoes = CreateValidLigacoes();
        ligacoes.UltimoAviso = "01/01/1990";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(ligacoes, _mockLigacoesService.Object, _mockClientesReader.Object, _mockRamalReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullUltimoAviso_ShouldPass()
    {
        // Arrange
        var ligacoes = CreateValidLigacoes();
        ligacoes.UltimoAviso = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(ligacoes, _mockLigacoesService.Object, _mockClientesReader.Object, _mockRamalReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithInvalidDateUltimoAvisoFormat_ShouldPass()
    {
        // Arrange
        var ligacoes = CreateValidLigacoes();
        ligacoes.UltimoAviso = "invalid-date";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(ligacoes, _mockLigacoesService.Object, _mockClientesReader.Object, _mockRamalReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue(); // Invalid format is ignored, not validated
    }

    [Fact]
    public async Task ValidateReg_WithEmptyUltimoAviso_ShouldPass()
    {
        // Arrange
        var ligacoes = CreateValidLigacoes();
        ligacoes.UltimoAviso = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(ligacoes, _mockLigacoesService.Object, _mockClientesReader.Object, _mockRamalReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region Foreign Key Validation Tests - Clientes
    [Fact]
    public async Task ValidateReg_WithInvalidClientes_ShouldThrowSGValidationException()
    {
        // Arrange
        var ligacoes = CreateValidLigacoes();
        ligacoes.Cliente = 999;
        _mockClientesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.ClientesResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(ligacoes, _mockLigacoesService.Object, _mockClientesReader.Object, _mockRamalReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedClientesId_ShouldThrowSGValidationException()
    {
        // Arrange
        var ligacoes = CreateValidLigacoes();
        ligacoes.Cliente = 999;
        var reg888 = new Models.Response.ClientesResponse
        {
            Id = 888
        }; // Different ID
        _mockClientesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(ligacoes, _mockLigacoesService.Object, _mockClientesReader.Object, _mockRamalReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidClientes_ShouldPass()
    {
        // Arrange
        var ligacoes = CreateValidLigacoes();
        ligacoes.Cliente = 123;
        var reg123 = new Models.Response.ClientesResponse
        {
            Id = 123
        };
        _mockClientesReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(ligacoes, _mockLigacoesService.Object, _mockClientesReader.Object, _mockRamalReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyClientes_ShouldPass()
    {
        // Arrange
        var ligacoes = CreateValidLigacoes();
        ligacoes.Cliente = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(ligacoes, _mockLigacoesService.Object, _mockClientesReader.Object, _mockRamalReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockClientesReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - Ramal
    [Fact]
    public async Task ValidateReg_WithInvalidRamal_ShouldThrowSGValidationException()
    {
        // Arrange
        var ligacoes = CreateValidLigacoes();
        ligacoes.Ramal = 999;
        _mockRamalReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.RamalResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(ligacoes, _mockLigacoesService.Object, _mockClientesReader.Object, _mockRamalReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedRamalId_ShouldThrowSGValidationException()
    {
        // Arrange
        var ligacoes = CreateValidLigacoes();
        ligacoes.Ramal = 999;
        var reg888 = new Models.Response.RamalResponse
        {
            Id = 888
        }; // Different ID
        _mockRamalReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(ligacoes, _mockLigacoesService.Object, _mockClientesReader.Object, _mockRamalReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidRamal_ShouldPass()
    {
        // Arrange
        var ligacoes = CreateValidLigacoes();
        ligacoes.Ramal = 123;
        var reg123 = new Models.Response.RamalResponse
        {
            Id = 123
        };
        _mockRamalReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(ligacoes, _mockLigacoesService.Object, _mockClientesReader.Object, _mockRamalReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyRamal_ShouldPass()
    {
        // Arrange
        var ligacoes = CreateValidLigacoes();
        ligacoes.Ramal = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(ligacoes, _mockLigacoesService.Object, _mockClientesReader.Object, _mockRamalReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockRamalReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}