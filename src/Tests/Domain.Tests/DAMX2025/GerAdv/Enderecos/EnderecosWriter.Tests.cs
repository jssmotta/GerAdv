// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class EnderecosWriterTests
{
    private readonly Mock<IFEnderecosFactory> _mockEnderecosFactory;
    private readonly Mock<FEnderecos> _mockFEnderecos;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly EnderecosWriter _enderecosWriter;
    public EnderecosWriterTests()
    {
        _mockEnderecosFactory = new Mock<IFEnderecosFactory>();
        _mockFEnderecos = new Mock<FEnderecos>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _enderecosWriter = new EnderecosWriter(_mockEnderecosFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var enderecos = CreateValidEnderecosModel();
        enderecos.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockEnderecosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFEnderecos.Object);
        _mockFEnderecos.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _enderecosWriter.WriteAsync(enderecos, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFEnderecos.Object);
        _mockEnderecosFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockEnderecosFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFEnderecos.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var enderecos = CreateValidEnderecosModel();
        enderecos.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockEnderecosFactory.Setup(x => x.CreateFromIdAsync(enderecos.Id, _mockConnection.Object)).ReturnsAsync(_mockFEnderecos.Object);
        _mockFEnderecos.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _enderecosWriter.WriteAsync(enderecos, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFEnderecos.Object);
        _mockEnderecosFactory.Verify(x => x.CreateFromIdAsync(enderecos.Id, _mockConnection.Object), Times.Once);
        _mockEnderecosFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFEnderecos.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var enderecos = CreateValidEnderecosModel();
        var auditorQuem = 99;
        _mockEnderecosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFEnderecos.Object);
        _mockFEnderecos.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _enderecosWriter.WriteAsync(enderecos, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFEnderecos.Object);
        _mockFEnderecos.VerifySet(x => x.FTopIndex = enderecos.TopIndex, Times.Once);
        _mockFEnderecos.VerifySet(x => x.FGUID = enderecos.GUID, Times.Once);
        _mockFEnderecos.VerifySet(x => x.FDescricao = enderecos.Descricao, Times.Once);
        _mockFEnderecos.VerifySet(x => x.FContato = enderecos.Contato, Times.Once);
        _mockFEnderecos.VerifySet(x => x.FDtNasc = enderecos.DtNasc.ToString(), Times.Once);
        _mockFEnderecos.VerifySet(x => x.FEndereco = enderecos.Endereco, Times.Once);
        _mockFEnderecos.VerifySet(x => x.FBairro = enderecos.Bairro, Times.Once);
        _mockFEnderecos.VerifySet(x => x.FPrivativo = enderecos.Privativo, Times.Once);
        _mockFEnderecos.VerifySet(x => x.FAddContato = enderecos.AddContato, Times.Once);
        _mockFEnderecos.VerifySet(x => x.FCEP = It.IsAny<string>(), Times.Once); // CEP é limpo pelo ClearInputCep()
        _mockFEnderecos.VerifySet(x => x.FOAB = enderecos.OAB, Times.Once);
        _mockFEnderecos.VerifySet(x => x.FOBS = enderecos.OBS, Times.Once);
        _mockFEnderecos.VerifySet(x => x.FFone = enderecos.Fone, Times.Once);
        _mockFEnderecos.VerifySet(x => x.FFax = enderecos.Fax, Times.Once);
        _mockFEnderecos.VerifySet(x => x.FTratamento = enderecos.Tratamento, Times.Once);
        _mockFEnderecos.VerifySet(x => x.FCidade = enderecos.Cidade, Times.Once);
        _mockFEnderecos.VerifySet(x => x.FSite = enderecos.Site, Times.Once);
        _mockFEnderecos.VerifySet(x => x.FEMail = enderecos.EMail, Times.Once);
        _mockFEnderecos.VerifySet(x => x.FQuem = enderecos.Quem, Times.Once);
        _mockFEnderecos.VerifySet(x => x.FQuemIndicou = enderecos.QuemIndicou, Times.Once);
        _mockFEnderecos.VerifySet(x => x.FReportECBOnly = enderecos.ReportECBOnly, Times.Once);
        _mockFEnderecos.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithNullDtNasc_ShouldNotSetFDtNasc()
    {
        // Arrange
        var enderecos = CreateValidEnderecosModel();
        enderecos.DtNasc = null;
        var auditorQuem = 123;
        _mockEnderecosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFEnderecos.Object);
        _mockFEnderecos.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _enderecosWriter.WriteAsync(enderecos, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFEnderecos.VerifySet(x => x.FDtNasc = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var enderecos = CreateValidEnderecosModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockEnderecosFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _enderecosWriter.WriteAsync(enderecos, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var enderecos = CreateValidEnderecosModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockEnderecosFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFEnderecos.Object);
        _mockFEnderecos.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _enderecosWriter.WriteAsync(enderecos, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var enderecosResponse = new EnderecosResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockEnderecosFactory.Setup(x => x.DeleteAsync(operadorId, enderecosResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _enderecosWriter.Delete(enderecosResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockEnderecosFactory.Verify(x => x.DeleteAsync(operadorId, enderecosResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var enderecosResponse = new EnderecosResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockEnderecosFactory.Setup(x => x.DeleteAsync(operadorId, enderecosResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _enderecosWriter.Delete(enderecosResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var enderecosResponse = new EnderecosResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockEnderecosFactory.Setup(x => x.DeleteAsync(operadorId, enderecosResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _enderecosWriter.Delete(enderecosResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new EnderecosWriter(_mockEnderecosFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new EnderecosWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.Enderecos CreateValidEnderecosModel()
    {
        return new Models.Enderecos
        {
            Id = 0,
            TopIndex = false,
            GUID = Guid.NewGuid().ToString(),
            Descricao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Contato = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            DtNasc = "24/04/1975",
            Endereco = "Rua das Flores, 123",
            Bairro = "Centro",
            Privativo = false,
            AddContato = false,
            CEP = "01234-567",
            OAB = "AAAAAAAAAAAAAAAAAA",
            OBS = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Fone = "(11) 99999-9999",
            Fax = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Tratamento = "AAAAAAAAAAAAAAAAAA",
            Cidade = 1,
            Site = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            EMail = "test@email.com",
            Quem = 1,
            QuemIndicou = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            ReportECBOnly = false
        };
    }
#endregion
}