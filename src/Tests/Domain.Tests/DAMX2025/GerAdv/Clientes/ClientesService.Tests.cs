// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class ClientesServiceTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFClientesFactory> _mockClientesFactory;
    private readonly Mock<IClientesReader> _mockReader;
    private readonly Mock<IClientesValidation> _mockValidation;
    private readonly Mock<IClientesWriter> _mockWriter;
    private readonly Mock<IAgendaService> _mockAgendaService;
    private readonly Mock<IClientesSociosService> _mockClientesSociosService;
    private readonly Mock<IColaboradoresService> _mockColaboradoresService;
    private readonly Mock<IContaCorrenteService> _mockContaCorrenteService;
    private readonly Mock<IContratosService> _mockContratosService;
    private readonly Mock<IDadosProcuracaoService> _mockDadosProcuracaoService;
    private readonly Mock<IDiario2Service> _mockDiario2Service;
    private readonly Mock<IGruposEmpresasService> _mockGruposEmpresasService;
    private readonly Mock<IHonorariosDadosContratoService> _mockHonorariosDadosContratoService;
    private readonly Mock<IHorasTrabService> _mockHorasTrabService;
    private readonly Mock<ILigacoesService> _mockLigacoesService;
    private readonly Mock<IOperadoresService> _mockOperadoresService;
    private readonly Mock<IPreClientesService> _mockPreClientesService;
    private readonly Mock<IProDespesasService> _mockProDespesasService;
    private readonly Mock<IReuniaoService> _mockReuniaoService;
    private readonly Mock<ICidadeReader> _mockCidadeReader;
    private readonly Mock<IRegimeTributacaoReader> _mockRegimeTributacaoReader;
    private readonly Mock<IEnquadramentoEmpresaReader> _mockEnquadramentoEmpresaReader;
    private readonly Mock<IHttpContextAccessor> _mockHttpContextAccessor;
    private readonly Mock<HybridCache> _mockCache;
    private readonly Mock<IMemoryCache> _mockMemoryCache;
    private readonly ClientesService _service;
    private readonly string _validUri = "test-uri";
    public ClientesServiceTests()
    {
        _mockAppSettings = new Mock<IOptions<AppSettings>>();
        _mockClientesFactory = new Mock<IFClientesFactory>();
        _mockReader = new Mock<IClientesReader>();
        _mockValidation = new Mock<IClientesValidation>();
        _mockWriter = new Mock<IClientesWriter>();
        _mockAgendaService = new Mock<IAgendaService>();
        _mockClientesSociosService = new Mock<IClientesSociosService>();
        _mockColaboradoresService = new Mock<IColaboradoresService>();
        _mockContaCorrenteService = new Mock<IContaCorrenteService>();
        _mockContratosService = new Mock<IContratosService>();
        _mockDadosProcuracaoService = new Mock<IDadosProcuracaoService>();
        _mockDiario2Service = new Mock<IDiario2Service>();
        _mockGruposEmpresasService = new Mock<IGruposEmpresasService>();
        _mockHonorariosDadosContratoService = new Mock<IHonorariosDadosContratoService>();
        _mockHorasTrabService = new Mock<IHorasTrabService>();
        _mockLigacoesService = new Mock<ILigacoesService>();
        _mockOperadoresService = new Mock<IOperadoresService>();
        _mockPreClientesService = new Mock<IPreClientesService>();
        _mockProDespesasService = new Mock<IProDespesasService>();
        _mockReuniaoService = new Mock<IReuniaoService>();
        _mockCidadeReader = new Mock<ICidadeReader>();
        _mockRegimeTributacaoReader = new Mock<IRegimeTributacaoReader>();
        _mockEnquadramentoEmpresaReader = new Mock<IEnquadramentoEmpresaReader>();
        _mockHttpContextAccessor = new Mock<IHttpContextAccessor>();
        _mockCache = new Mock<HybridCache>();
        _mockMemoryCache = new Mock<IMemoryCache>();
        var appSettings = new AppSettings();
        _mockAppSettings.Setup(x => x.Value).Returns(appSettings);
        _service = new ClientesService(_mockAppSettings.Object, _mockClientesFactory.Object, _mockReader.Object, _mockValidation.Object, _mockWriter.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _mockAgendaService.Object, _mockClientesSociosService.Object, _mockColaboradoresService.Object, _mockContaCorrenteService.Object, _mockContratosService.Object, _mockDadosProcuracaoService.Object, _mockDiario2Service.Object, _mockGruposEmpresasService.Object, _mockHonorariosDadosContratoService.Object, _mockHorasTrabService.Object, _mockLigacoesService.Object, _mockOperadoresService.Object, _mockPreClientesService.Object, _mockProDespesasService.Object, _mockReuniaoService.Object, _mockHttpContextAccessor.Object, _mockCache.Object, _mockMemoryCache.Object);
    }

    [Fact]
    public void Constructor_WithValidParameters_InitializesService()
    {
        // Arrange & Act
        var service = new ClientesService(_mockAppSettings.Object, _mockClientesFactory.Object, _mockReader.Object, _mockValidation.Object, _mockWriter.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _mockAgendaService.Object, _mockClientesSociosService.Object, _mockColaboradoresService.Object, _mockContaCorrenteService.Object, _mockContratosService.Object, _mockDadosProcuracaoService.Object, _mockDiario2Service.Object, _mockGruposEmpresasService.Object, _mockHonorariosDadosContratoService.Object, _mockHorasTrabService.Object, _mockLigacoesService.Object, _mockOperadoresService.Object, _mockPreClientesService.Object, _mockProDespesasService.Object, _mockReuniaoService.Object, _mockHttpContextAccessor.Object, _mockCache.Object, _mockMemoryCache.Object);
        // Assert
        Assert.NotNull(service);
    }

    [Fact]
    public async Task AddAndUpdate_WithNullInput_ReturnsNull()
    {
        // Act
        var result = await _service.AddAndUpdate(null, _validUri);
        // Assert
        Assert.Null(result);
    }

    [Fact]
    public async Task Delete_WithZeroId_ReturnsNull()
    {
        // Arrange
        var id = 0;
        // Act  
        var result = await _service.Delete(id, _validUri);
        // Assert
        Assert.Null(result);
    }

    [Fact]
    public async Task Delete_WithNegativeId_ReturnsNull()
    {
        // Arrange
        var id = -5;
        // Act
        var result = await _service.Delete(id, _validUri);
        // Assert
        Assert.Null(result);
    }

    [Fact]
    public async Task GetById_WithZeroId_ReturnsDefaultResponse()
    {
        // Arrange
        var id = 0;
        // Act
        var result = await _service.GetById(id, _validUri, CancellationToken.None);
        // Assert
        Assert.NotNull(result);
        Assert.Equal(0, result.Id);
    }

    [Fact]
    public async Task GetById_WithNegativeId_ReturnsDefaultResponse()
    {
        // Arrange
        var id = -1;
        // Act
        var result = await _service.GetById(id, _validUri, CancellationToken.None);
        // Assert
        Assert.NotNull(result);
        Assert.Equal(0, result.Id);
    }

    [Fact]
    public void Dispose_CalledOnce_DisposesCorrectly()
    {
        // Act
        _service.Dispose();
        // Assert - Should not throw any exception
        Assert.True(true);
    }

    [Fact]
    public void Dispose_CalledTwice_DoesNotThrow()
    {
        // Act
        _service.Dispose();
        _service.Dispose();
        // Assert - Should not throw any exception
        Assert.True(true);
    }

    [Fact]
    public void GetFilterHash_QuandoFiltroNull_DeveRetornarStringVazia()
    {
        // Usar reflexão para testar método privado
        var result = InvokePrivateMethod("GetFilterHash", null);
        result.Should().Be(string.Empty);
    }

    [Fact]
    public void GetFilterHash_QuandoFiltroValido_DeveRetornarHashSHA256()
    {
        var filtro = new FilterClientes
        {
            Nome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
        var result = InvokePrivateMethod("GetFilterHash", filtro);
        result.Should().NotBeNull();
        result.Should().BeOfType<string>();
        ((string)result).Should().NotBeNullOrEmpty();
        ((string)result).Length.Should().Be(64); // SHA256 hash length
    }

    private object InvokePrivateMethod(string methodName, Filters.FilterClientes? parameters)
    {
        var method = typeof(ClientesService).GetMethod(methodName, BindingFlags.NonPublic | BindingFlags.Instance);
        return method.Invoke(_service, [parameters]);
    }

    [Fact]
    public async Task ThrowIfDisposed_AfterDispose_ThrowsObjectDisposedException()
    {
        // Arrange
        _service.Dispose();
        // Act & Assert
        await Assert.ThrowsAsync<ObjectDisposedException>(() => _service.GetAll(10, _validUri));
    }

    [Fact]
    public async Task Filter_WithNullFilter_ReturnsEmptyResult()
    {
        // Arrange
        var max = 10;
        var invalidUri = "invalid-uri";
        // Act & Assert
        await Assert.ThrowsAsync<Exception>(() => _service.Filter(max, null, invalidUri));
    }

    [Fact]
    public async Task GetListN_WithValidParameters_ReturnsNomeIDList()
    {
        // Arrange
        var max = 10;
        // Act
        await Assert.ThrowsAsync<Exception>(async () => await _service.GetListN(max, new Filters.FilterClientes(), _validUri, CancellationToken.None));
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}