// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class ProDespesasValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFProDespesasFactory> _mockProDespesasFactory;
    private readonly Mock<IProDespesasReader> _mockReader;
    private readonly ProDespesasValidation _validation;
    private readonly Mock<IProDespesasService> _mockProDespesasService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IClientesReader> _mockClientesReader;
    private readonly ProDespesasService _service;
    private readonly string _validUri = "test-uri";
    public ProDespesasValidationTests()
    {
        _mockProDespesasFactory = new Mock<IFProDespesasFactory>();
        _mockReader = new Mock<IProDespesasReader>();
        _validation = new ProDespesasValidation();
        _mockProDespesasService = new Mock<IProDespesasService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockClientesReader = new Mock<IClientesReader>();
    }

#region Class Structure Tests
    [Fact]
    public void ProDespesasValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IProDespesasValidation>();
    }

    [Fact]
    public void ProDespesasValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(ProDespesasValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void ProDespesasValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(ProDespesasValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.ProDespesas CreateValidProDespesas()
    {
        return new Models.ProDespesas
        {
            Id = 1,
            LigacaoID = 0,
            Cliente = 0,
            Corrigido = false,
            Data = "27/05/2022",
            ValorOriginal = 1m,
            Processo = 0,
            Quitado = 0,
            DataCorrecao = "24/04/1975",
            Valor = 1m,
            Tipo = true,
            Historico = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            LivroCaixa = false
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockProDespesasService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterProDespesas>(), It.IsAny<string>())).ReturnsAsync(new List<ProDespesasResponseAll>());
        // Setup other mocks but don't override the ProDespesass service mock
        _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.ClientesResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockProDespesasService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterProDespesas>(), It.IsAny<string>())).ReturnsAsync(new List<ProDespesasResponseAll>());
        // Setup other mocks but don't override the ProDespesass service mock
        _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.ClientesResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var prodespesas = new Models.ProDespesas
        {
            Id = 1,
            Corrigido = false,
            Data = "27/05/2022",
            DataCorrecao = null,
            Tipo = true,
            Historico = null,
            LivroCaixa = false
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(prodespesas, _mockProDespesasService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockProDespesasService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region DataCorrecao Validation Tests
    [Theory]
    [InlineData("01/01/1899")]
    [InlineData("31/12/1899")]
    public async Task ValidateReg_WithDataCorrecaoBeforeMinDate_ShouldThrowSGValidationException(string invalidDate)
    {
        // Arrange
        var prodespesas = CreateValidProDespesas();
        prodespesas.DataCorrecao = invalidDate;
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(prodespesas, _mockProDespesasService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("01/01/1900.");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataCorrecao_ShouldPass()
    {
        // Arrange
        var prodespesas = CreateValidProDespesas();
        prodespesas.DataCorrecao = "01/01/1990";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(prodespesas, _mockProDespesasService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullDataCorrecao_ShouldPass()
    {
        // Arrange
        var prodespesas = CreateValidProDespesas();
        prodespesas.DataCorrecao = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(prodespesas, _mockProDespesasService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithInvalidDateDataCorrecaoFormat_ShouldPass()
    {
        // Arrange
        var prodespesas = CreateValidProDespesas();
        prodespesas.DataCorrecao = "invalid-date";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(prodespesas, _mockProDespesasService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue(); // Invalid format is ignored, not validated
    }

    [Fact]
    public async Task ValidateReg_WithEmptyDataCorrecao_ShouldPass()
    {
        // Arrange
        var prodespesas = CreateValidProDespesas();
        prodespesas.DataCorrecao = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(prodespesas, _mockProDespesasService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region Foreign Key Validation Tests - Clientes
    [Fact]
    public async Task ValidateReg_WithInvalidClientes_ShouldThrowSGValidationException()
    {
        // Arrange
        var prodespesas = CreateValidProDespesas();
        prodespesas.Cliente = 999;
        _mockClientesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.ClientesResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(prodespesas, _mockProDespesasService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedClientesId_ShouldThrowSGValidationException()
    {
        // Arrange
        var prodespesas = CreateValidProDespesas();
        prodespesas.Cliente = 999;
        var reg888 = new Models.Response.ClientesResponse
        {
            Id = 888
        }; // Different ID
        _mockClientesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(prodespesas, _mockProDespesasService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidClientes_ShouldPass()
    {
        // Arrange
        var prodespesas = CreateValidProDespesas();
        prodespesas.Cliente = 123;
        var reg123 = new Models.Response.ClientesResponse
        {
            Id = 123
        };
        _mockClientesReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(prodespesas, _mockProDespesasService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyClientes_ShouldPass()
    {
        // Arrange
        var prodespesas = CreateValidProDespesas();
        prodespesas.Cliente = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(prodespesas, _mockProDespesasService.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockClientesReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}