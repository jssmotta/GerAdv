// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBColaboradores - Nome da classe (ex: DBClientes)
/// Colaboradores - Nome da tabela (ex: Clientes)
/// col - Prefixo dos campos (ex: cli)
/// colCodigo - Nome do campo código (ex: cliCodigo)
/// colNome - Nome do campo nome (ex: cliNome)
/// DBColaboradores.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBColaboradoresTests : IDisposable
{
    private readonly DBColaboradores _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBColaboradoresTests()
    {
        _instance = new DBColaboradores();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("colCodigo", typeof(int));
        dt.Columns.Add("colQuemCad", typeof(int));
        dt.Columns.Add("colDtCad", typeof(DateTime));
        dt.Columns.Add("colQuemAtu", typeof(int));
        dt.Columns.Add("colDtAtu", typeof(DateTime));
        dt.Columns.Add("colVisto", typeof(bool));
        dt.Columns.Add("colCargo", typeof(int));
        dt.Columns.Add("colCliente", typeof(int));
        dt.Columns.Add("colSexo", typeof(string));
        dt.Columns.Add("colNome", typeof(string));
        dt.Columns.Add("colCPF", typeof(string));
        dt.Columns.Add("colRG", typeof(string));
        dt.Columns.Add("colDtNasc", typeof(DateTime));
        dt.Columns.Add("colIdade", typeof(int));
        dt.Columns.Add("colEndereco", typeof(string));
        dt.Columns.Add("colBairro", typeof(string));
        dt.Columns.Add("colCEP", typeof(string));
        dt.Columns.Add("colCidade", typeof(int));
        dt.Columns.Add("colFone", typeof(string));
        dt.Columns.Add("colObservacao", typeof(string));
        dt.Columns.Add("colEMail", typeof(string));
        dt.Columns.Add("colCNH", typeof(string));
        dt.Columns.Add("colClass", typeof(string));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("Colaboradores", DBColaboradores.PTabelaNome);
        Assert.Equal(" Colaboradores.* ", DBColaboradores.CamposSqlX);
        Assert.Equal("colCodigo", DBColaboradores.CampoCodigo);
        Assert.Equal("colNome", DBColaboradores.CampoNome);
        Assert.Equal("col", DBColaboradores.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBColaboradores();
        Assert.Equal(0, instance.ID);
        Assert.Equal("Colaboradores", instance.ITabelaName());
        Assert.Equal("col", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBColaboradores((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBColaboradores((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["colCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBColaboradores(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("Colaboradores", cadastro.ITabelaName());
        Assert.Equal("colCodigo", cadastro.ICampoCodigo());
        Assert.Equal("colNome", cadastro.ICampoNome());
        Assert.Equal("col", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBColaboradores.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBColaboradores.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBColaboradores.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBColaboradores();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBColaboradores();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnTrue()
    {
        Assert.True(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cargo_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCargo = value;
        Assert.Equal(value, _instance.FCargo);
    }

    [Fact]
    public void Cargo_DefaultValue_ShouldBeZero()
    {
        var instance = new DBColaboradores();
        Assert.Equal(0, instance.FCargo);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cliente_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCliente = value;
        Assert.Equal(value, _instance.FCliente);
    }

    [Fact]
    public void Cliente_DefaultValue_ShouldBeZero()
    {
        var instance = new DBColaboradores();
        Assert.Equal(0, instance.FCliente);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Sexo_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FSexo = value;
        Assert.Equal(value, _instance.FSexo);
    }

    [Fact]
    public void Sexo_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBColaboradores();
        Assert.False(instance.FSexo);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Nome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNome = input;
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void Nome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FNome = longString;
        Assert.True(_instance.FNome.Length <= 80);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void RG_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FRG = input;
        Assert.Equal(expected, _instance.FRG);
    }

    [Fact]
    public void RG_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 30 + 10);
        _instance.FRG = longString;
        Assert.True(_instance.FRG.Length <= 30);
    }

    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void DtNasc_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FDtNasc = dateString;
        Assert.Equal(dateString, _instance.FDtNasc);
    }

    [Fact]
    public void DtNasc_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBColaboradores();
        Assert.Equal(string.Empty, instance.FDtNasc);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Idade_ShouldAcceptIntegerValues(int value)
    {
        _instance.FIdade = value;
        Assert.Equal(value, _instance.FIdade);
    }

    [Fact]
    public void Idade_DefaultValue_ShouldBeZero()
    {
        var instance = new DBColaboradores();
        Assert.Equal(0, instance.FIdade);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Endereco_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FEndereco = input;
        Assert.Equal(expected, _instance.FEndereco);
    }

    [Fact]
    public void Endereco_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FEndereco = longString;
        Assert.True(_instance.FEndereco.Length <= 80);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Bairro_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FBairro = input;
        Assert.Equal(expected, _instance.FBairro);
    }

    [Fact]
    public void Bairro_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FBairro = longString;
        Assert.True(_instance.FBairro.Length <= 50);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cidade_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCidade = value;
        Assert.Equal(value, _instance.FCidade);
    }

    [Fact]
    public void Cidade_DefaultValue_ShouldBeZero()
    {
        var instance = new DBColaboradores();
        Assert.Equal(0, instance.FCidade);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Fone_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FFone = input;
        Assert.Equal(expected, _instance.FFone);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Observacao_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FObservacao = input;
        Assert.Equal(expected, _instance.FObservacao);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void CNH_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FCNH = input;
        Assert.Equal(expected, _instance.FCNH);
    }

    [Fact]
    public void CNH_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FCNH = longString;
        Assert.True(_instance.FCNH.Length <= 100);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData(" A", "A")]
    public void Class_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FClass = input;
        Assert.Equal(expected, _instance.FClass);
    }

    [Fact]
    public void Class_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 1 + 10);
        _instance.FClass = longString;
        Assert.True(_instance.FClass.Length <= 1);
    }

    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}