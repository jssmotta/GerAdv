// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class EnderecosService
{
    public (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterEnderecos? filtro)
    {
        if (filtro == null)
            return null;
        var parameters = new List<SqlParameter>();
        if (filtro.TopIndex != int.MinValue)
        {
            parameters.Add(new($"@{(DBEnderecosDicInfo.TopIndex)}", filtro.TopIndex));
        }

        if (!string.IsNullOrWhiteSpace(filtro.GUID))
        {
            parameters.Add(new($"@{(DBEnderecosDicInfo.GUID)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.GUID)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Descricao))
        {
            parameters.Add(new($"@{(DBEnderecosDicInfo.Descricao)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Descricao)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Contato))
        {
            parameters.Add(new($"@{(DBEnderecosDicInfo.Contato)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Contato)));
        }

        if (!filtro.DtNasc.IsEmptyDX())
        {
            if (DateTime.TryParse(filtro.DtNasc, out var dataParam1))
                parameters.Add(new($"@{(DBEnderecosDicInfo.DtNasc)}", dataParam1));
            if (!filtro.DtNasc_end.IsEmptyDX())
            {
                if (DateTime.TryParse(filtro.DtNasc_end, out var dataParam2))
                    parameters.Add(new($"@{(DBEnderecosDicInfo.DtNasc)}_end", dataParam2));
            }
        }

        if (!string.IsNullOrWhiteSpace(filtro.Endereco))
        {
            parameters.Add(new($"@{(DBEnderecosDicInfo.Endereco)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Endereco)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Bairro))
        {
            parameters.Add(new($"@{(DBEnderecosDicInfo.Bairro)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Bairro)));
        }

        if (filtro.Privativo != int.MinValue)
        {
            parameters.Add(new($"@{(DBEnderecosDicInfo.Privativo)}", filtro.Privativo));
        }

        if (filtro.AddContato != int.MinValue)
        {
            parameters.Add(new($"@{(DBEnderecosDicInfo.AddContato)}", filtro.AddContato));
        }

        if (!string.IsNullOrWhiteSpace(filtro.CEP))
        {
            parameters.Add(new($"@{(DBEnderecosDicInfo.CEP)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.CEP)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.OAB))
        {
            parameters.Add(new($"@{(DBEnderecosDicInfo.OAB)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.OAB)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.OBS))
        {
            parameters.Add(new($"@{(DBEnderecosDicInfo.OBS)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.OBS)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Fone))
        {
            parameters.Add(new($"@{(DBEnderecosDicInfo.Fone)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Fone)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Fax))
        {
            parameters.Add(new($"@{(DBEnderecosDicInfo.Fax)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Fax)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Tratamento))
        {
            parameters.Add(new($"@{(DBEnderecosDicInfo.Tratamento)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Tratamento)));
        }

        if (filtro.Cidade != int.MinValue)
        {
            parameters.Add(new($"@{(DBEnderecosDicInfo.Cidade)}", filtro.Cidade));
            if (filtro.Cidade_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBEnderecosDicInfo.Cidade)}_end", filtro.Cidade_end));
            }
        }

        if (!string.IsNullOrWhiteSpace(filtro.Site))
        {
            parameters.Add(new($"@{(DBEnderecosDicInfo.Site)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Site)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.EMail))
        {
            parameters.Add(new($"@{(DBEnderecosDicInfo.EMail)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.EMail)));
        }

        if (filtro.Quem != int.MinValue)
        {
            parameters.Add(new($"@{(DBEnderecosDicInfo.Quem)}", filtro.Quem));
            if (filtro.Quem_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBEnderecosDicInfo.Quem)}_end", filtro.Quem_end));
            }
        }

        if (!string.IsNullOrWhiteSpace(filtro.QuemIndicou))
        {
            parameters.Add(new($"@{(DBEnderecosDicInfo.QuemIndicou)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.QuemIndicou)));
        }

        if (filtro.ReportECBOnly != int.MinValue)
        {
            parameters.Add(new($"@{(DBEnderecosDicInfo.ReportECBOnly)}", filtro.ReportECBOnly));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{(DBEnderecosDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
            if (filtro.Codigo_filtro_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBEnderecosDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
            }
        }

        if (filtro.LogicalOperator.IsEmptyX() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        cWhere.Append(filtro.TopIndex == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBEnderecosDicInfo.PTabelaNome}].[{DBEnderecosDicInfo.TopIndex}] = @{(DBEnderecosDicInfo.TopIndex)}");
        cWhere.Append(filtro.GUID.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBEnderecosDicInfo.PTabelaNome}].[{DBEnderecosDicInfo.GUID}]  {DevourerConsts.MsiCollate} like @{(DBEnderecosDicInfo.GUID)}");
        cWhere.Append(filtro.Descricao.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBEnderecosDicInfo.PTabelaNome}].[{DBEnderecosDicInfo.Descricao}]  {DevourerConsts.MsiCollate} like @{(DBEnderecosDicInfo.Descricao)}");
        cWhere.Append(filtro.Contato.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBEnderecosDicInfo.PTabelaNome}].[{DBEnderecosDicInfo.Contato}]  {DevourerConsts.MsiCollate} like @{(DBEnderecosDicInfo.Contato)}");
        if (!(filtro.DtNasc.IsEmptyDX()) && filtro.DtNasc_end.IsEmptyDX())
        {
            cWhere.Append(filtro.DtNasc.IsEmptyDX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBEnderecosDicInfo.PTabelaNome}].[{DBEnderecosDicInfo.DtNasc}], 103) = CONVERT(DATE, @{(DBEnderecosDicInfo.DtNasc)}, 103)");
        }
        else if (!(filtro.DtNasc.IsEmptyDX()) && !(filtro.DtNasc_end.IsEmptyDX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBEnderecosDicInfo.PTabelaNome}].{DBEnderecosDicInfo.DtNasc} BETWEEN @{(DBEnderecosDicInfo.DtNasc)} AND @{(DBEnderecosDicInfo.DtNasc)}_end");
        }

        cWhere.Append(filtro.Endereco.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBEnderecosDicInfo.PTabelaNome}].[{DBEnderecosDicInfo.Endereco}]  {DevourerConsts.MsiCollate} like @{(DBEnderecosDicInfo.Endereco)}");
        cWhere.Append(filtro.Bairro.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBEnderecosDicInfo.PTabelaNome}].[{DBEnderecosDicInfo.Bairro}]  {DevourerConsts.MsiCollate} like @{(DBEnderecosDicInfo.Bairro)}");
        cWhere.Append(filtro.Privativo == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBEnderecosDicInfo.PTabelaNome}].[{DBEnderecosDicInfo.Privativo}] = @{(DBEnderecosDicInfo.Privativo)}");
        cWhere.Append(filtro.AddContato == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBEnderecosDicInfo.PTabelaNome}].[{DBEnderecosDicInfo.AddContato}] = @{(DBEnderecosDicInfo.AddContato)}");
        cWhere.Append(filtro.CEP.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBEnderecosDicInfo.PTabelaNome}].[{DBEnderecosDicInfo.CEP}]  {DevourerConsts.MsiCollate} like @{(DBEnderecosDicInfo.CEP)}");
        cWhere.Append(filtro.OAB.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBEnderecosDicInfo.PTabelaNome}].[{DBEnderecosDicInfo.OAB}]  {DevourerConsts.MsiCollate} like @{(DBEnderecosDicInfo.OAB)}");
        cWhere.Append(filtro.OBS.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBEnderecosDicInfo.PTabelaNome}].[{DBEnderecosDicInfo.OBS}]  {DevourerConsts.MsiCollate} like @{(DBEnderecosDicInfo.OBS)}");
        cWhere.Append(filtro.Fone.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBEnderecosDicInfo.PTabelaNome}].[{DBEnderecosDicInfo.Fone}]  {DevourerConsts.MsiCollate} like @{(DBEnderecosDicInfo.Fone)}");
        cWhere.Append(filtro.Fax.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBEnderecosDicInfo.PTabelaNome}].[{DBEnderecosDicInfo.Fax}]  {DevourerConsts.MsiCollate} like @{(DBEnderecosDicInfo.Fax)}");
        cWhere.Append(filtro.Tratamento.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBEnderecosDicInfo.PTabelaNome}].[{DBEnderecosDicInfo.Tratamento}]  {DevourerConsts.MsiCollate} like @{(DBEnderecosDicInfo.Tratamento)}");
        if (!(filtro.Cidade.IsEmptyX()) && filtro.Cidade_end.IsEmptyX())
        {
            cWhere.Append(filtro.Cidade.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBEnderecosDicInfo.PTabelaNome}].[{DBEnderecosDicInfo.Cidade}] = @{(DBEnderecosDicInfo.Cidade)}");
        }
        else if (!(filtro.Cidade.IsEmptyX()) && !(filtro.Cidade_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBEnderecosDicInfo.PTabelaNome}].{DBEnderecosDicInfo.Cidade} BETWEEN @{(DBEnderecosDicInfo.Cidade)} AND @{(DBEnderecosDicInfo.Cidade)}_end");
        }

        cWhere.Append(filtro.Site.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBEnderecosDicInfo.PTabelaNome}].[{DBEnderecosDicInfo.Site}]  {DevourerConsts.MsiCollate} like @{(DBEnderecosDicInfo.Site)}");
        cWhere.Append(filtro.EMail.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBEnderecosDicInfo.PTabelaNome}].[{DBEnderecosDicInfo.EMail}]  {DevourerConsts.MsiCollate} like @{(DBEnderecosDicInfo.EMail)}");
        if (!(filtro.Quem.IsEmptyX()) && filtro.Quem_end.IsEmptyX())
        {
            cWhere.Append(filtro.Quem.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBEnderecosDicInfo.PTabelaNome}].[{DBEnderecosDicInfo.Quem}] = @{(DBEnderecosDicInfo.Quem)}");
        }
        else if (!(filtro.Quem.IsEmptyX()) && !(filtro.Quem_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBEnderecosDicInfo.PTabelaNome}].{DBEnderecosDicInfo.Quem} BETWEEN @{(DBEnderecosDicInfo.Quem)} AND @{(DBEnderecosDicInfo.Quem)}_end");
        }

        cWhere.Append(filtro.QuemIndicou.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBEnderecosDicInfo.PTabelaNome}].[{DBEnderecosDicInfo.QuemIndicou}]  {DevourerConsts.MsiCollate} like @{(DBEnderecosDicInfo.QuemIndicou)}");
        cWhere.Append(filtro.ReportECBOnly == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBEnderecosDicInfo.PTabelaNome}].[{DBEnderecosDicInfo.ReportECBOnly}] = @{(DBEnderecosDicInfo.ReportECBOnly)}");
        if (!(filtro.Codigo_filtro.IsEmptyX()) && filtro.Codigo_filtro_end.IsEmptyX())
        {
            cWhere.Append(filtro.Codigo_filtro.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBEnderecosDicInfo.PTabelaNome}].[{DBEnderecosDicInfo.CampoCodigo}] = @{(DBEnderecosDicInfo.CampoCodigo)}");
        }
        else if (!(filtro.Codigo_filtro.IsEmptyX()) && !(filtro.Codigo_filtro_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBEnderecosDicInfo.PTabelaNome}].{DBEnderecosDicInfo.CampoCodigo} BETWEEN @{(DBEnderecosDicInfo.CampoCodigo)} AND @{(DBEnderecosDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private string GetFilterHash(Filters.FilterEnderecos? filtro)
    {
        if (filtro == null)
            return string.Empty;
        var json = JsonSerializer.Serialize(filtro);
        using var sha256 = SHA256.Create();
        var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(json));
        return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
    }

    public async Task<IEnumerable<NomeID>> GetListN([FromQuery] int max, [FromBody] Filters.FilterEnderecos? filtro, [FromRoute, Required] string uri, CancellationToken token)
    {
        // Tracking: 20250606-0
        ThrowIfDisposed();
        var filtroResult = filtro == null ? null : WFiltro(filtro!);
        string where = filtroResult?.where ?? string.Empty;
        List<SqlParameter>? parameters = filtroResult?.parametros ?? [];
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new Exception($"Coneão nula.");
        }

        var keyCache = await reader.ReadStringAuditor(max, uri, "", [], oCnn);
        var cacheKey = $"{uri}-Enderecos-{max}-{where.GetHashCode()}-GetListN-{keyCache}";
        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId)
        };
        return await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataListNAsync(max, uri, where, parameters, cancel), entryOptions, cancellationToken: token) ?? [];
    }

    private async Task<IEnumerable<NomeID>> GetDataListNAsync(int max, string uri, string where, List<SqlParameter>? parameters, CancellationToken token)
    {
        var result = new List<NomeID>(max);
        var lista = await reader.ListarN(max, uri, where, parameters, DBEnderecosDicInfo.CampoNome);
        foreach (var item in lista)
        {
            if (token.IsCancellationRequested)
                break;
            if (item?.FNome != null)
            {
                result.Add(new NomeID { Nome = item.FNome, ID = item.ID });
            }
        }

        return result;
    }

    private async Task<IEnumerable<EnderecosResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter>? parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}