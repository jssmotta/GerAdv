// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
public partial class DBRecados
{
    /// <summary>
    /// Factory method async para carregar [tableMin]
    /// </summary>
    public static async Task<DBRecados> CreateAsync(int nCodigo, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        var registro = new DBRecados();
        await registro.CarregarAsync(nCodigo, oCnn, cancellationToken);
        return registro;
    }

    /// <summary>
    /// Carregar dados async
    /// </summary>
    protected async Task CarregarAsync(int id, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        if (id.IsEmptyIDNumber() || oCnn is null)
            return;
        using var cmd = new SqlCommand($"{ConfiguracoesDBT.SQLNoCount}SELECT TOP (1) {CamposSqlX} FROM {PTabelaNome.dbo(oCnn)} WHERE [{CampoCodigo}] = @ThisIDToLoad", oCnn.InnerConnection);
        cmd.Parameters.AddWithValue("@ThisIDToLoad", id);
        using var ds = await ConfiguracoesDBT.GetDataTableAsync(cmd, CommandBehavior.SingleRow, oCnn, cancellationToken);
        if (ds?.Rows.Count > 0)
        {
            CarregarDadosBd(ds.Rows[0]);
        }
    }

#if (!NOTSTORED_Recados)
    /// <summary>
    /// Update async com timeout e cancellation
    /// </summary>
    public async Task<int> UpdateAsync(MsiSqlConnection? oCnn, int insertId = 0, CancellationToken cancellationToken = default, int timeoutSeconds = 30)
    {
        var isInsert = insertId == 0 && ID == 0;
        if (!isInsert && !HasAnyFieldChanged())
            return 0;
        if (oCnn is null)
        {
#if DEBUG
            PTabelaNome.PopupBox("oCnn is null - UpdateAsync()");
#endif
            return 0;
        }

        try
        {
            var updateTool = new DBToolWTable32Async(PTabelaNome, CampoCodigo, ID == 0)
            {
                IsMachineCode = true,
            };
            updateTool.Where = isInsert ? string.Empty : $"{CampoCodigo}={ID}";
            ConfigureUpdateFields(updateTool);
            ConfigureAuditorFields(updateTool);
            if (insertId != 0)
            {
                return await GravaNewIdAsync(updateTool, insertId, oCnn, cancellationToken);
            }

            var result = await updateTool.RecUpdateAsync(oCnn, cancellationToken);
            if (updateTool.Insert && result == "OK")
            {
                ID = updateTool.GetCodigo();
                if (ID == 0)
                {
                    Error = -2;
                    ErrorDescription = "O registro não pode ser incluído, tente mais tarde.";
                    return Error;
                }
            }

            return result == "OK" ? 0 : -1;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (Exception ex)
        {
            Error = -1;
            ErrorDescription = ex.Message;
            return Error;
        }
    }

#endif
    /// <summary>
    /// Verificar se existe async
    /// </summary>
    public static async Task<bool> ExisteAsync(int id, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        if (oCnn is null || id <= 0)
            return false;
        var existe = await ConfiguracoesDBT.GetScalarAsync<int?>($"SELECT 1 FROM {PTabelaNome.dbo(oCnn)} WHERE {CampoCodigo} = {id}", oCnn, cancellationToken);
        return existe.HasValue;
    }

    /// <summary>
    /// Delete async
    /// </summary>
    /// <param name = "operadorId">For future Audity</param>
    /// <param name = "id"></param>
    /// <param name = "oCnn"></param>
    /// <param name = "cancellationToken"></param>
    /// <returns></returns>
    /// <exception cref = "InvalidOperationException"></exception>
    public static async Task<bool> DeleteRecordAsync(int operadorId, int id, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        if (oCnn is null || id <= 0)
            return false;
        var sql = $"DELETE FROM {PTabelaNome.dbo(oCnn)} WHERE {CampoCodigo} = @Id";
        try
        {
            using var cmd = new SqlCommand(sql, oCnn.InnerConnection);
            cmd.Parameters.AddWithValue("@Id", id);
            var rowsAffected = await cmd.ExecuteNonQueryAsync(cancellationToken);
            return rowsAffected > 0;
        }
        catch (SqlException ex)when (ex.Number == 547)
        {
            throw new InvalidOperationException("Este registro não pode ser excluído, pois está vinculado a outros registros.");
        }
    }

#if (!NOTSTORED_Recados)
    // Helper methods
    private bool HasAnyFieldChanged() => pFldFClienteNome || pFldFDe || pFldFPara || pFldFAssunto || pFldFConcluido || pFldFProcesso || pFldFCliente || pFldFRecado || pFldFUrgente || pFldFImportante || pFldFHora || pFldFData || pFldFVoltara || pFldFPessoal || pFldFRetornar || pFldFRetornoData || pFldFEmotion || pFldFInternetID || pFldFUploaded || pFldFNatureza || pFldFBIU || pFldFAguardarRetorno || pFldFAguardarRetornoPara || pFldFAguardarRetornoOK || pFldFParaID || pFldFNaoPublicavel || pFldFIsContatoCRM || pFldFMasterID || pFldFListaPara || pFldFTyped || pFldFAssuntoRecado || pFldFHistorico || pFldFContatoCRM || pFldFLigacoes || pFldFAgenda || pFldFGUID;
    private void ConfigureUpdateFields(DBToolWTable32Async updateTool)
    {
        if (pFldFClienteNome)
            updateTool.Fields(DBRecadosDicInfo.ClienteNome, m_FClienteNome, ETiposCampos.FString);
        if (pFldFDe)
            updateTool.Fields(DBRecadosDicInfo.De, m_FDe, ETiposCampos.FString);
        if (pFldFPara)
            updateTool.Fields(DBRecadosDicInfo.Para, m_FPara, ETiposCampos.FString);
        if (pFldFAssunto)
            updateTool.Fields(DBRecadosDicInfo.Assunto, m_FAssunto, ETiposCampos.FString);
        if (pFldFConcluido)
            updateTool.Fields(DBRecadosDicInfo.Concluido, m_FConcluido, ETiposCampos.FBoolean);
        if (pFldFProcesso)
            updateTool.Fields(DBRecadosDicInfo.Processo, m_FProcesso, ETiposCampos.FNumber);
        if (pFldFCliente)
            updateTool.Fields(DBRecadosDicInfo.Cliente, m_FCliente, ETiposCampos.FNumber);
        if (pFldFRecado)
            updateTool.Fields(DBRecadosDicInfo.Recado, m_FRecado, ETiposCampos.FString);
        if (pFldFUrgente)
            updateTool.Fields(DBRecadosDicInfo.Urgente, m_FUrgente, ETiposCampos.FBoolean);
        if (pFldFImportante)
            updateTool.Fields(DBRecadosDicInfo.Importante, m_FImportante, ETiposCampos.FBoolean);
        if (pFldFHora)
            updateTool.Fields(DBRecadosDicInfo.Hora, m_FHora, ETiposCampos.FDate);
        if (pFldFData)
            updateTool.Fields(DBRecadosDicInfo.Data, m_FData, ETiposCampos.FString);
        if (pFldFVoltara)
            updateTool.Fields(DBRecadosDicInfo.Voltara, m_FVoltara, ETiposCampos.FBoolean);
        if (pFldFPessoal)
            updateTool.Fields(DBRecadosDicInfo.Pessoal, m_FPessoal, ETiposCampos.FBoolean);
        if (pFldFRetornar)
            updateTool.Fields(DBRecadosDicInfo.Retornar, m_FRetornar, ETiposCampos.FBoolean);
        if (pFldFRetornoData)
            updateTool.Fields(DBRecadosDicInfo.RetornoData, m_FRetornoData, ETiposCampos.FDate);
        if (pFldFEmotion)
            updateTool.Fields(DBRecadosDicInfo.Emotion, m_FEmotion, ETiposCampos.FNumber);
        if (pFldFInternetID)
            updateTool.Fields(DBRecadosDicInfo.InternetID, m_FInternetID, ETiposCampos.FNumber);
        if (pFldFUploaded)
            updateTool.Fields(DBRecadosDicInfo.Uploaded, m_FUploaded, ETiposCampos.FBoolean);
        if (pFldFNatureza)
            updateTool.Fields(DBRecadosDicInfo.Natureza, m_FNatureza, ETiposCampos.FNumber);
        if (pFldFBIU)
            updateTool.Fields(DBRecadosDicInfo.BIU, m_FBIU, ETiposCampos.FBoolean);
        if (pFldFAguardarRetorno)
            updateTool.Fields(DBRecadosDicInfo.AguardarRetorno, m_FAguardarRetorno, ETiposCampos.FBoolean);
        if (pFldFAguardarRetornoPara)
            updateTool.Fields(DBRecadosDicInfo.AguardarRetornoPara, m_FAguardarRetornoPara, ETiposCampos.FString);
        if (pFldFAguardarRetornoOK)
            updateTool.Fields(DBRecadosDicInfo.AguardarRetornoOK, m_FAguardarRetornoOK, ETiposCampos.FBoolean);
        if (pFldFParaID)
            updateTool.Fields(DBRecadosDicInfo.ParaID, m_FParaID, ETiposCampos.FNumber);
        if (pFldFNaoPublicavel)
            updateTool.Fields(DBRecadosDicInfo.NaoPublicavel, m_FNaoPublicavel, ETiposCampos.FBoolean);
        if (pFldFIsContatoCRM)
            updateTool.Fields(DBRecadosDicInfo.IsContatoCRM, m_FIsContatoCRM, ETiposCampos.FBoolean);
        if (pFldFMasterID)
            updateTool.Fields(DBRecadosDicInfo.MasterID, m_FMasterID, ETiposCampos.FNumber);
        if (pFldFListaPara)
            updateTool.Fields(DBRecadosDicInfo.ListaPara, m_FListaPara, ETiposCampos.FString);
        if (pFldFTyped)
            updateTool.Fields(DBRecadosDicInfo.Typed, m_FTyped, ETiposCampos.FBoolean);
        if (pFldFAssuntoRecado)
            updateTool.Fields(DBRecadosDicInfo.AssuntoRecado, m_FAssuntoRecado, ETiposCampos.FNumber);
        if (pFldFHistorico)
            updateTool.Fields(DBRecadosDicInfo.Historico, m_FHistorico, ETiposCampos.FNumber);
        if (pFldFContatoCRM)
            updateTool.Fields(DBRecadosDicInfo.ContatoCRM, m_FContatoCRM, ETiposCampos.FNumber);
        if (pFldFLigacoes)
            updateTool.Fields(DBRecadosDicInfo.Ligacoes, m_FLigacoes, ETiposCampos.FNumber);
        if (pFldFAgenda)
            updateTool.Fields(DBRecadosDicInfo.Agenda, m_FAgenda, ETiposCampos.FNumber);
        if (pFldFGUID)
            updateTool.Fields(DBRecadosDicInfo.GUID, m_FGUID, ETiposCampos.FString);
    }

#endif
    private void ConfigureAuditorFields(DBToolWTable32Async updateTool)
    {
        var isInsert = ID.IsEmptyIDNumber();
        if (m_AuditorQuem == 0)
            AuditorQuem = 1;
        if (isInsert)
            updateTool.Fields(DBRecadosDicInfo.QuemCad, AuditorQuem, ETiposCampos.FNumber);
        if (isInsert)
            updateTool.Fields(DBRecadosDicInfo.DtCad, DevourerOne.DateTimeUtc, ETiposCampos.FDate);
        if (!isInsert)
            updateTool.Fields(DBRecadosDicInfo.QuemAtu, AuditorQuem, ETiposCampos.FNumber);
        if (!isInsert)
            updateTool.Fields(DBRecadosDicInfo.DtAtu, DevourerOne.DateTimeUtc, ETiposCampos.FDate);
        updateTool.Fields(DBRecadosDicInfo.Visto, false, ETiposCampos.FBoolean);
    }

    private async Task<int> GravaNewIdAsync(DBToolWTable32Async updateTool, int insertId, MsiSqlConnection oCnn, CancellationToken cancellationToken)
    {
        ID = insertId;
        updateTool.Fields(CampoCodigo, insertId, ETiposCampos.FNumber);
        var result = await updateTool.RecUpdateAsync(oCnn, cancellationToken, true);
        return result == "OK" ? 0 : -3;
    }
}