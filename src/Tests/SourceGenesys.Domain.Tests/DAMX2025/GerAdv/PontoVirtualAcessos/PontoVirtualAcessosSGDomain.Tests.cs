// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBPontoVirtualAcessos - Nome da classe (ex: DBClientes)
/// PontoVirtualAcessos - Nome da tabela (ex: Clientes)
/// pva - Prefixo dos campos (ex: cli)
/// pvaCodigo - Nome do campo código (ex: cliCodigo)
///  - Nome do campo nome (ex: cliNome)
/// DBPontoVirtualAcessos.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBPontoVirtualAcessosTests : IDisposable
{
    private readonly DBPontoVirtualAcessos _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBPontoVirtualAcessosTests()
    {
        _instance = new DBPontoVirtualAcessos();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("pvaCodigo", typeof(int));
        dt.Columns.Add("pvaOperador", typeof(int));
        dt.Columns.Add("pvaDataHora", typeof(string));
        dt.Columns.Add("pvaTipo", typeof(string));
        dt.Columns.Add("pvaOrigem", typeof(string));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("PontoVirtualAcessos", DBPontoVirtualAcessos.PTabelaNome);
        Assert.Equal(" PontoVirtualAcessos.* ", DBPontoVirtualAcessos.CamposSqlX);
        Assert.Equal("pvaCodigo", DBPontoVirtualAcessos.CampoCodigo);
        Assert.Equal("", DBPontoVirtualAcessos.CampoNome);
        Assert.Equal("pva", DBPontoVirtualAcessos.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBPontoVirtualAcessos();
        Assert.Equal(0, instance.ID);
        Assert.Equal("PontoVirtualAcessos", instance.ITabelaName());
        Assert.Equal("pva", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBPontoVirtualAcessos((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBPontoVirtualAcessos((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["pvaCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBPontoVirtualAcessos(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("PontoVirtualAcessos", cadastro.ITabelaName());
        Assert.Equal("pvaCodigo", cadastro.ICampoCodigo());
        Assert.Equal("", cadastro.ICampoNome());
        Assert.Equal("pva", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBPontoVirtualAcessos.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBPontoVirtualAcessos.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBPontoVirtualAcessos.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBPontoVirtualAcessos();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBPontoVirtualAcessos();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnFalse()
    {
        Assert.False(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnFalse()
    {
        Assert.False(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Operador_ShouldAcceptIntegerValues(int value)
    {
        _instance.FOperador = value;
        Assert.Equal(value, _instance.FOperador);
    }

    [Fact]
    public void Operador_DefaultValue_ShouldBeZero()
    {
        var instance = new DBPontoVirtualAcessos();
        Assert.Equal(0, instance.FOperador);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Tipo_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FTipo = value;
        Assert.Equal(value, _instance.FTipo);
    }

    [Fact]
    public void Tipo_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBPontoVirtualAcessos();
        Assert.False(instance.FTipo);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Origem_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FOrigem = input;
        Assert.Equal(expected, _instance.FOrigem);
    }

    [Fact]
    public void Origem_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 150 + 10);
        _instance.FOrigem = longString;
        Assert.True(_instance.FOrigem.Length <= 150);
    }

    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}