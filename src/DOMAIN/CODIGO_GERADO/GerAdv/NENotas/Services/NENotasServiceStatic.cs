// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class NENotasService
{
    private (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterNENotas filtro)
    {
        var parameters = new List<SqlParameter>();
        if (filtro.Apenso != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBNENotasDicInfo.Apenso)}", filtro.Apenso));
        }

        if (filtro.Apenso_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBNENotasDicInfo.Apenso)}_end", filtro.Apenso_end));
        }

        if (filtro.Precatoria != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBNENotasDicInfo.Precatoria)}", filtro.Precatoria));
        }

        if (filtro.Precatoria_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBNENotasDicInfo.Precatoria)}_end", filtro.Precatoria_end));
        }

        if (filtro.Instancia != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBNENotasDicInfo.Instancia)}", filtro.Instancia));
        }

        if (filtro.MovPro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBNENotasDicInfo.MovPro)}", filtro.MovPro));
        }

        if (!string.IsNullOrEmpty(filtro.Nome))
        {
            parameters.Add(new($"@{nameof(DBNENotasDicInfo.Nome)}", ApplyWildCard(filtro.WildcardChar, filtro.Nome)));
        }

        if (filtro.NotaExpedida != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBNENotasDicInfo.NotaExpedida)}", filtro.NotaExpedida));
        }

        if (filtro.Revisada != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBNENotasDicInfo.Revisada)}", filtro.Revisada));
        }

        if (filtro.Processo != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBNENotasDicInfo.Processo)}", filtro.Processo));
        }

        if (filtro.Processo_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBNENotasDicInfo.Processo)}_end", filtro.Processo_end));
        }

        if (filtro.PalavraChave != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBNENotasDicInfo.PalavraChave)}", filtro.PalavraChave));
        }

        if (filtro.PalavraChave_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBNENotasDicInfo.PalavraChave)}_end", filtro.PalavraChave_end));
        }

        if (!string.IsNullOrEmpty(filtro.Data))
        {
            parameters.Add(new($"@{nameof(DBNENotasDicInfo.Data)}", ApplyWildCard(filtro.WildcardChar, filtro.Data)));
        }

        if (!string.IsNullOrEmpty(filtro.NotaPublicada))
        {
            parameters.Add(new($"@{nameof(DBNENotasDicInfo.NotaPublicada)}", ApplyWildCard(filtro.WildcardChar, filtro.NotaPublicada)));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBNENotasDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
        }

        if (filtro.Codigo_filtro_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBNENotasDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
        }

        if (filtro.LogicalOperator.IsEmptyX() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        if (!(filtro.Apenso.IsEmptyX()) && filtro.Apenso_end.IsEmptyX())
        {
            cWhere.Append(filtro.Apenso.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBNENotasDicInfo.PTabelaNome}].[{DBNENotasDicInfo.Apenso}] = @{nameof(DBNENotasDicInfo.Apenso)}");
        }
        else if (!(filtro.Apenso.IsEmptyX()) && !(filtro.Apenso_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBNENotasDicInfo.PTabelaNome}].{DBNENotasDicInfo.Apenso} BETWEEN @{nameof(DBNENotasDicInfo.Apenso)} AND @{nameof(DBNENotasDicInfo.Apenso)}_end");
        }

        if (!(filtro.Precatoria.IsEmptyX()) && filtro.Precatoria_end.IsEmptyX())
        {
            cWhere.Append(filtro.Precatoria.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBNENotasDicInfo.PTabelaNome}].[{DBNENotasDicInfo.Precatoria}] = @{nameof(DBNENotasDicInfo.Precatoria)}");
        }
        else if (!(filtro.Precatoria.IsEmptyX()) && !(filtro.Precatoria_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBNENotasDicInfo.PTabelaNome}].{DBNENotasDicInfo.Precatoria} BETWEEN @{nameof(DBNENotasDicInfo.Precatoria)} AND @{nameof(DBNENotasDicInfo.Precatoria)}_end");
        }

        cWhere.Append(filtro.Instancia.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBNENotasDicInfo.PTabelaNome}].[{DBNENotasDicInfo.Instancia}] = @{nameof(DBNENotasDicInfo.Instancia)}");
        cWhere.Append(filtro.MovPro == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBNENotasDicInfo.PTabelaNome}].[{DBNENotasDicInfo.MovPro}] = @{nameof(DBNENotasDicInfo.MovPro)}");
        cWhere.Append(filtro.Nome.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBNENotasDicInfo.PTabelaNome}].[{DBNENotasDicInfo.Nome}]  {DevourerConsts.MsiCollate} like @{nameof(DBNENotasDicInfo.Nome)}");
        cWhere.Append(filtro.NotaExpedida == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBNENotasDicInfo.PTabelaNome}].[{DBNENotasDicInfo.NotaExpedida}] = @{nameof(DBNENotasDicInfo.NotaExpedida)}");
        cWhere.Append(filtro.Revisada == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBNENotasDicInfo.PTabelaNome}].[{DBNENotasDicInfo.Revisada}] = @{nameof(DBNENotasDicInfo.Revisada)}");
        if (!(filtro.Processo.IsEmptyX()) && filtro.Processo_end.IsEmptyX())
        {
            cWhere.Append(filtro.Processo.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBNENotasDicInfo.PTabelaNome}].[{DBNENotasDicInfo.Processo}] = @{nameof(DBNENotasDicInfo.Processo)}");
        }
        else if (!(filtro.Processo.IsEmptyX()) && !(filtro.Processo_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBNENotasDicInfo.PTabelaNome}].{DBNENotasDicInfo.Processo} BETWEEN @{nameof(DBNENotasDicInfo.Processo)} AND @{nameof(DBNENotasDicInfo.Processo)}_end");
        }

        if (!(filtro.PalavraChave.IsEmptyX()) && filtro.PalavraChave_end.IsEmptyX())
        {
            cWhere.Append(filtro.PalavraChave.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBNENotasDicInfo.PTabelaNome}].[{DBNENotasDicInfo.PalavraChave}] = @{nameof(DBNENotasDicInfo.PalavraChave)}");
        }
        else if (!(filtro.PalavraChave.IsEmptyX()) && !(filtro.PalavraChave_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBNENotasDicInfo.PTabelaNome}].{DBNENotasDicInfo.PalavraChave} BETWEEN @{nameof(DBNENotasDicInfo.PalavraChave)} AND @{nameof(DBNENotasDicInfo.PalavraChave)}_end");
        }

        cWhere.Append(filtro.Data.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBNENotasDicInfo.PTabelaNome}].[{DBNENotasDicInfo.Data}]  {DevourerConsts.MsiCollate} like @{nameof(DBNENotasDicInfo.Data)}");
        cWhere.Append(filtro.NotaPublicada.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBNENotasDicInfo.PTabelaNome}].[{DBNENotasDicInfo.NotaPublicada}]  {DevourerConsts.MsiCollate} like @{nameof(DBNENotasDicInfo.NotaPublicada)}");
        if (!(filtro.Codigo_filtro.IsEmptyX()) && filtro.Codigo_filtro_end.IsEmptyX())
        {
            cWhere.Append(filtro.Codigo_filtro.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBNENotasDicInfo.PTabelaNome}].[{DBNENotasDicInfo.CampoCodigo}] = @{nameof(DBNENotasDicInfo.CampoCodigo)}");
        }
        else if (!(filtro.Codigo_filtro.IsEmptyX()) && !(filtro.Codigo_filtro_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBNENotasDicInfo.PTabelaNome}].{DBNENotasDicInfo.CampoCodigo} BETWEEN @{nameof(DBNENotasDicInfo.CampoCodigo)} AND @{nameof(DBNENotasDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private string ApplyWildCard(char wildcardChar, string value)
    {
        if (wildcardChar == '\0' || wildcardChar == ' ')
        {
            return value;
        }

        var result = $"{wildcardChar}{value.Replace(" ", wildcardChar.ToString())}{wildcardChar}";
        return result;
    }

    private string GetFilterHash(Filters.FilterNENotas? filtro)
    {
        if (filtro == null)
            return string.Empty;
        var json = JsonSerializer.Serialize(filtro);
        using var sha256 = SHA256.Create();
        var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(json));
        return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
    }

    public async Task<IEnumerable<NomeID>> GetListN([FromQuery] int max, [FromBody] Filters.FilterNENotas? filtro, [FromRoute, Required] string uri, CancellationToken token)
    {
        // Tracking: 20250606-0
        ThrowIfDisposed();
        var filtroResult = filtro == null ? null : WFiltro(filtro!);
        string where = filtroResult?.where ?? string.Empty;
        List<SqlParameter> parameters = filtroResult?.parametros ?? [];
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new Exception($"Coneão nula.");
        }

        var keyCache = await reader.ReadStringAuditor(max, uri, "", [], oCnn);
        var cacheKey = $"{uri}-NENotas-{max}-{where.GetHashCode()}-GetListN-{keyCache}";
        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId)
        };
        return await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataListNAsync(max, uri, where, parameters, cancel), entryOptions, cancellationToken: token) ?? [];
    }

    private async Task<IEnumerable<NomeID>> GetDataListNAsync(int max, string uri, string where, List<SqlParameter> parameters, CancellationToken token)
    {
        var result = new List<NomeID>(max);
        var lista = await reader.ListarN(max, uri, where, parameters, DBNENotasDicInfo.CampoNome);
        foreach (var item in lista)
        {
            if (token.IsCancellationRequested)
                break;
            if (item?.FNome != null)
            {
                result.Add(new NomeID { Nome = item.FNome, ID = item.ID });
            }
        }

        return result;
    }

    private async Task<IEnumerable<NENotasResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}