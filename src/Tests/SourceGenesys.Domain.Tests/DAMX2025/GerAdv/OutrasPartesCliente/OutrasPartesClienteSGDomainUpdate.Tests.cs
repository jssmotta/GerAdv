// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// ============================================
// ARQUIVO: DBUpdateTests.cs.txt (Principal)
// ============================================
namespace MenphisSI.GerAdv.Tests;
public class DBOutrasPartesClienteUpdate : IDisposable
{
    private readonly DBOutrasPartesCliente _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBOutrasPartesClienteUpdate()
    {
        _instance = new DBOutrasPartesCliente();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void DefaultConstructor_ShouldCreateInstance_WithDefaultValues()
    {
        // Act
        var outraspartescliente = new DBOutrasPartesCliente();
        // Assert
        outraspartescliente.Should().NotBeNull();
        outraspartescliente.ITabelaName().Should().Be("OutrasPartesCliente");
        outraspartescliente.ID.Should().Be(0);
    }

    [Fact]
    public void AllProperties_WithValidValues_ShouldSetCorrectly()
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente
        {
            FNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FCPF = "40392285029",
            FRG = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FCNPJ = "93016944000138",
            FInscEst = "AAAAAAAAAAAAAAA",
            FNomeFantasia = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FEndereco = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FCEP = "AAAAAAAAAA",
            FBairro = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FFone = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FFax = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FEMail = "menphis@menphis.com.br",
            FSite = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FGUID = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FClass = "A",
        };
        // Assert - All properties should be set outraspartescliente.FNome.Should().Be( "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        outraspartescliente.FCPF.Should().Be("40392285029");
        outraspartescliente.FRG.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        outraspartescliente.FCNPJ.Should().Be("93016944000138");
        outraspartescliente.FInscEst.Should().Be("AAAAAAAAAAAAAAA");
        outraspartescliente.FNomeFantasia.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        outraspartescliente.FEndereco.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        outraspartescliente.FCEP.Should().Be("AAAAAAAAAA");
        outraspartescliente.FBairro.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        outraspartescliente.FFone.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        outraspartescliente.FFax.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        outraspartescliente.FEMail.Should().Be("menphis@menphis.com.br");
        outraspartescliente.FSite.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        outraspartescliente.FGUID.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        outraspartescliente.FClass.Should().Be("A");
    }

    [Fact]
    public void StringProperties_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente();
        var longString = new string ('X', 300);
        outraspartescliente.FNome = longString; // MAX: 80
        outraspartescliente.FRG = longString; // MAX: 30
        outraspartescliente.FInscEst = longString; // MAX: 15
        outraspartescliente.FNomeFantasia = longString; // MAX: 255
        outraspartescliente.FEndereco = longString; // MAX: 80
        outraspartescliente.FCEP = longString; // MAX: 10
        outraspartescliente.FBairro = longString; // MAX: 50
        outraspartescliente.FSite = longString; // MAX: 150
        outraspartescliente.FGUID = longString; // MAX: 150
        outraspartescliente.FClass = longString; // MAX: 1
        // Assert - All properties should be set outraspartescliente.FNome.Should().HaveLength(80);
        outraspartescliente.FRG.Should().HaveLength(30);
        outraspartescliente.FInscEst.Should().HaveLength(15);
        outraspartescliente.FNomeFantasia.Should().HaveLength(255);
        outraspartescliente.FEndereco.Should().HaveLength(80);
        outraspartescliente.FCEP.Should().HaveLength(10);
        outraspartescliente.FBairro.Should().HaveLength(50);
        outraspartescliente.FSite.Should().HaveLength(150);
        outraspartescliente.FGUID.Should().HaveLength(150);
        outraspartescliente.FClass.Should().HaveLength(1);
    }

    [Theory]
    [InlineData("João Silva", "84210454079", "joao@test.com")]
    [InlineData("Maria Santos", "42276926015", "maria@test.com")]
    public void Properties_WithValidData_ShouldSetCorrectly(string nome, string cpf, string email)
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente();
        // Act
        outraspartescliente.FNome = nome;
        outraspartescliente.FCPF = cpf;
        outraspartescliente.FEMail = email;
        // Assert
        outraspartescliente.FNome.Should().Be(nome);
        outraspartescliente.FCPF.Should().Be(cpf);
        outraspartescliente.FEMail.Should().Be(email);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNome_Property_ShouldAcceptValidNames(string Nome)
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente
        {
            // Act
            FNome = Nome
        };
        // Assert
        outraspartescliente.FNome.Should().Be(Nome);
    }

    [Fact]
    public void FNome_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente
        {
            // Act
            FNome = null
        };
        // Assert
        outraspartescliente.FNome.Should().Be(string.Empty);
    }

    [Fact]
    public void SqlWhereConstructor_WithNullConnection_ShouldNotThrow()
    {
        // Arrange
        var sqlWhere = "opcCodigo = 1";
        // Act & Assert
        var OutrasPartesCliente = new DBOutrasPartesCliente(sqlWhere, null);
        OutrasPartesCliente.Should().NotBeNull();
    }

    [Fact]
    public void ParameterizedConstructor_WithNullConnection_ShouldReturnEarly()
    {
        // Arrange
        var parameters = new List<SqlParameter>();
        var nome = "TesteNome";
        // Act
        var outraspartescliente = new DBOutrasPartesCliente(parameters, nome, null);
        // Assert
        outraspartescliente.Should().NotBeNull();
        outraspartescliente.ID.Should().Be(0); // Should not have loaded any data
    }

    [Fact]
    public void FNome_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente();
        var longName = new string ('A', 80 + 10); // Exceeds 80 character limit
        // Act
        outraspartescliente.FNome = longName;
        // Assert
        outraspartescliente.FNome.Should().HaveLength(80);
    }

    [Fact]
    public void FNome_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FNome = null;
        // Act
        var result = _instance.FNome;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FNome_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FNome = expectedValue;
        // Act
        var result = _instance.FNome;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FNome_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNome = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNome = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FNome = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FNome = value;
        // Act
        _instance.FNome = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = "Original Value";
        // Act
        _instance.FNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = "First Value";
        // Act
        _instance.FNome = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNome = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNome_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FNome = input;
        // Assert
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void FNome_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = null;
        // Act
        _instance.FNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = "Existing Value";
        // Act
        _instance.FNome = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FRG_Property_ShouldAcceptValidNames(string RG)
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente
        {
            // Act
            FRG = RG
        };
        // Assert
        outraspartescliente.FRG.Should().Be(RG);
    }

    [Fact]
    public void FRG_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente
        {
            // Act
            FRG = null
        };
        // Assert
        outraspartescliente.FRG.Should().Be(string.Empty);
    }

    [Fact]
    public void FRG_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente();
        var longName = new string ('A', 30 + 10); // Exceeds 30 character limit
        // Act
        outraspartescliente.FRG = longName;
        // Assert
        outraspartescliente.FRG.Should().HaveLength(30);
    }

    [Fact]
    public void FRG_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FRG = null;
        // Act
        var result = _instance.FRG;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FRG_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FRG = expectedValue;
        // Act
        var result = _instance.FRG;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FRG_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FRG = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FRG);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRG_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FRG = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FRG);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FRG_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FRG = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FRG);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRG_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FRG = value;
        // Act
        _instance.FRG = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRG_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRG = "Original Value";
        // Act
        _instance.FRG = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRG_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRG = "First Value";
        // Act
        _instance.FRG = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRG_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FRG = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FRG);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FRG_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FRG = input;
        // Assert
        Assert.Equal(expected, _instance.FRG);
    }

    [Fact]
    public void FRG_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRG = null;
        // Act
        _instance.FRG = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FRG_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFRG", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FRG = "Existing Value";
        // Act
        _instance.FRG = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCc")]
    public void FInscEst_Property_ShouldAcceptValidNames(string InscEst)
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente
        {
            // Act
            FInscEst = InscEst
        };
        // Assert
        outraspartescliente.FInscEst.Should().Be(InscEst);
    }

    [Fact]
    public void FInscEst_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente
        {
            // Act
            FInscEst = null
        };
        // Assert
        outraspartescliente.FInscEst.Should().Be(string.Empty);
    }

    [Fact]
    public void FInscEst_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente();
        var longName = new string ('A', 15 + 10); // Exceeds 15 character limit
        // Act
        outraspartescliente.FInscEst = longName;
        // Assert
        outraspartescliente.FInscEst.Should().HaveLength(15);
    }

    [Fact]
    public void FInscEst_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FInscEst = null;
        // Act
        var result = _instance.FInscEst;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FInscEst_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FInscEst = expectedValue;
        // Act
        var result = _instance.FInscEst;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FInscEst_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFInscEst", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FInscEst = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FInscEst);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FInscEst_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFInscEst", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FInscEst = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FInscEst);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FInscEst_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFInscEst", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAA";
        // Act
        _instance.FInscEst = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FInscEst);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FInscEst_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFInscEst", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FInscEst = value;
        // Act
        _instance.FInscEst = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FInscEst_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFInscEst", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FInscEst = "Original Value";
        // Act
        _instance.FInscEst = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FInscEst_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFInscEst", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FInscEst = "First Value";
        // Act
        _instance.FInscEst = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FInscEst_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFInscEst", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FInscEst = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FInscEst);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAA", "AAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBB  ", "BBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCc", "CCCCCCCCCCCCCc")]
    public void FInscEst_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FInscEst = input;
        // Assert
        Assert.Equal(expected, _instance.FInscEst);
    }

    [Fact]
    public void FInscEst_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFInscEst", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FInscEst = null;
        // Act
        _instance.FInscEst = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FInscEst_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFInscEst", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FInscEst = "Existing Value";
        // Act
        _instance.FInscEst = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNomeFantasia_Property_ShouldAcceptValidNames(string NomeFantasia)
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente
        {
            // Act
            FNomeFantasia = NomeFantasia
        };
        // Assert
        outraspartescliente.FNomeFantasia.Should().Be(NomeFantasia);
    }

    [Fact]
    public void FNomeFantasia_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente
        {
            // Act
            FNomeFantasia = null
        };
        // Assert
        outraspartescliente.FNomeFantasia.Should().Be(string.Empty);
    }

    [Fact]
    public void FNomeFantasia_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente();
        var longName = new string ('A', 255 + 10); // Exceeds 255 character limit
        // Act
        outraspartescliente.FNomeFantasia = longName;
        // Assert
        outraspartescliente.FNomeFantasia.Should().HaveLength(255);
    }

    [Fact]
    public void FNomeFantasia_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FNomeFantasia = null;
        // Act
        var result = _instance.FNomeFantasia;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FNomeFantasia_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FNomeFantasia = expectedValue;
        // Act
        var result = _instance.FNomeFantasia;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FNomeFantasia_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFNomeFantasia", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNomeFantasia = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FNomeFantasia);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNomeFantasia_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFNomeFantasia", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNomeFantasia = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FNomeFantasia);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FNomeFantasia_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFNomeFantasia", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FNomeFantasia = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FNomeFantasia);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNomeFantasia_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFNomeFantasia", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FNomeFantasia = value;
        // Act
        _instance.FNomeFantasia = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNomeFantasia_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFNomeFantasia", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNomeFantasia = "Original Value";
        // Act
        _instance.FNomeFantasia = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNomeFantasia_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFNomeFantasia", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNomeFantasia = "First Value";
        // Act
        _instance.FNomeFantasia = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNomeFantasia_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFNomeFantasia", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNomeFantasia = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FNomeFantasia);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNomeFantasia_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FNomeFantasia = input;
        // Assert
        Assert.Equal(expected, _instance.FNomeFantasia);
    }

    [Fact]
    public void FNomeFantasia_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFNomeFantasia", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNomeFantasia = null;
        // Act
        _instance.FNomeFantasia = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNomeFantasia_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFNomeFantasia", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNomeFantasia = "Existing Value";
        // Act
        _instance.FNomeFantasia = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FEndereco_Property_ShouldAcceptValidNames(string Endereco)
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente
        {
            // Act
            FEndereco = Endereco
        };
        // Assert
        outraspartescliente.FEndereco.Should().Be(Endereco);
    }

    [Fact]
    public void FEndereco_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente
        {
            // Act
            FEndereco = null
        };
        // Assert
        outraspartescliente.FEndereco.Should().Be(string.Empty);
    }

    [Fact]
    public void FEndereco_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente();
        var longName = new string ('A', 80 + 10); // Exceeds 80 character limit
        // Act
        outraspartescliente.FEndereco = longName;
        // Assert
        outraspartescliente.FEndereco.Should().HaveLength(80);
    }

    [Fact]
    public void FEndereco_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FEndereco = null;
        // Act
        var result = _instance.FEndereco;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FEndereco_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FEndereco = expectedValue;
        // Act
        var result = _instance.FEndereco;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FEndereco_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEndereco = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FEndereco);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEndereco = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FEndereco);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FEndereco = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FEndereco);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FEndereco = value;
        // Act
        _instance.FEndereco = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEndereco = "Original Value";
        // Act
        _instance.FEndereco = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEndereco = "First Value";
        // Act
        _instance.FEndereco = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FEndereco = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FEndereco);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FEndereco_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FEndereco = input;
        // Assert
        Assert.Equal(expected, _instance.FEndereco);
    }

    [Fact]
    public void FEndereco_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEndereco = null;
        // Act
        _instance.FEndereco = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FEndereco_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFEndereco", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FEndereco = "Existing Value";
        // Act
        _instance.FEndereco = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FBairro_Property_ShouldAcceptValidNames(string Bairro)
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente
        {
            // Act
            FBairro = Bairro
        };
        // Assert
        outraspartescliente.FBairro.Should().Be(Bairro);
    }

    [Fact]
    public void FBairro_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente
        {
            // Act
            FBairro = null
        };
        // Assert
        outraspartescliente.FBairro.Should().Be(string.Empty);
    }

    [Fact]
    public void FBairro_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente();
        var longName = new string ('A', 50 + 10); // Exceeds 50 character limit
        // Act
        outraspartescliente.FBairro = longName;
        // Assert
        outraspartescliente.FBairro.Should().HaveLength(50);
    }

    [Fact]
    public void FBairro_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FBairro = null;
        // Act
        var result = _instance.FBairro;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FBairro_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FBairro = expectedValue;
        // Act
        var result = _instance.FBairro;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FBairro_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FBairro = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FBairro);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairro_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FBairro = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FBairro);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FBairro_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FBairro = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FBairro);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairro_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FBairro = value;
        // Act
        _instance.FBairro = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairro_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FBairro = "Original Value";
        // Act
        _instance.FBairro = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairro_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FBairro = "First Value";
        // Act
        _instance.FBairro = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairro_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FBairro = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FBairro);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FBairro_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FBairro = input;
        // Assert
        Assert.Equal(expected, _instance.FBairro);
    }

    [Fact]
    public void FBairro_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FBairro = null;
        // Act
        _instance.FBairro = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FBairro_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFBairro", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FBairro = "Existing Value";
        // Act
        _instance.FBairro = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FFone_Property_ShouldAcceptValidNames(string Fone)
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente
        {
            // Act
            FFone = Fone
        };
        // Assert
        outraspartescliente.FFone.Should().Be(Fone);
    }

    [Fact]
    public void FFone_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente
        {
            // Act
            FFone = null
        };
        // Assert
        outraspartescliente.FFone.Should().Be(string.Empty);
    }

    [Fact]
    public void FFone_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FFone = null;
        // Act
        var result = _instance.FFone;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FFone_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FFone = expectedValue;
        // Act
        var result = _instance.FFone;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FFone_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFone = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FFone);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFone = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FFone);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FFone_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  ";
        var expectedValue = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM";
        // Act
        _instance.FFone = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FFone);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FFone = value;
        // Act
        _instance.FFone = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFone = "Original Value";
        // Act
        _instance.FFone = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFone = "First Value";
        // Act
        _instance.FFone = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFone = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FFone);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData
    [InlineData
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FFone_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FFone = input;
        // Assert
        Assert.Equal(expected, _instance.FFone);
    }

    [Fact]
    public void FFone_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFone = null;
        // Act
        _instance.FFone = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFone_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFFone", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFone = "Existing Value";
        // Act
        _instance.FFone = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FFax_Property_ShouldAcceptValidNames(string Fax)
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente
        {
            // Act
            FFax = Fax
        };
        // Assert
        outraspartescliente.FFax.Should().Be(Fax);
    }

    [Fact]
    public void FFax_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente
        {
            // Act
            FFax = null
        };
        // Assert
        outraspartescliente.FFax.Should().Be(string.Empty);
    }

    [Fact]
    public void FFax_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FFax = null;
        // Act
        var result = _instance.FFax;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FFax_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FFax = expectedValue;
        // Act
        var result = _instance.FFax;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FFax_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFax = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FFax);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFax = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FFax);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FFax_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  ";
        var expectedValue = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM";
        // Act
        _instance.FFax = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FFax);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FFax = value;
        // Act
        _instance.FFax = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFax = "Original Value";
        // Act
        _instance.FFax = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFax = "First Value";
        // Act
        _instance.FFax = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FFax = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FFax);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  ", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FFax_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FFax = input;
        // Assert
        Assert.Equal(expected, _instance.FFax);
    }

    [Fact]
    public void FFax_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFax = null;
        // Act
        _instance.FFax = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FFax_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFFax", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FFax = "Existing Value";
        // Act
        _instance.FFax = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FSite_Property_ShouldAcceptValidNames(string Site)
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente
        {
            // Act
            FSite = Site
        };
        // Assert
        outraspartescliente.FSite.Should().Be(Site);
    }

    [Fact]
    public void FSite_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente
        {
            // Act
            FSite = null
        };
        // Assert
        outraspartescliente.FSite.Should().Be(string.Empty);
    }

    [Fact]
    public void FSite_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente();
        var longName = new string ('A', 150 + 10); // Exceeds 150 character limit
        // Act
        outraspartescliente.FSite = longName;
        // Assert
        outraspartescliente.FSite.Should().HaveLength(150);
    }

    [Fact]
    public void FSite_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FSite = null;
        // Act
        var result = _instance.FSite;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FSite_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FSite = expectedValue;
        // Act
        var result = _instance.FSite;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FSite_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFSite", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FSite = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FSite);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSite_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFSite", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FSite = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FSite);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FSite_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFSite", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FSite = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FSite);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSite_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFSite", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FSite = value;
        // Act
        _instance.FSite = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSite_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFSite", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSite = "Original Value";
        // Act
        _instance.FSite = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSite_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFSite", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSite = "First Value";
        // Act
        _instance.FSite = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSite_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFSite", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FSite = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FSite);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FSite_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FSite = input;
        // Assert
        Assert.Equal(expected, _instance.FSite);
    }

    [Fact]
    public void FSite_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFSite", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSite = null;
        // Act
        _instance.FSite = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSite_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBOutrasPartesCliente).GetField("pFldFSite", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSite = "Existing Value";
        // Act
        _instance.FSite = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

#region Testes de GUID
    [Fact]
    public void GUID_DefaultValue_ShouldBeEmpty()
    {
        Assert.Equal(string.Empty, _instance.FGUID);
    }

    [Fact]
    public void GUID_SetValidGUID_ShouldStore()
    {
        var guid = Guid.NewGuid().ToString();
        _instance.FGUID = guid;
        Assert.Equal(guid, _instance.FGUID);
    }

#endregion
    [Fact]
    public void TabelaNome_Property_ShouldReturnCorrectTableName()
    {
        // Arrange
        var outraspartescliente = new DBOutrasPartesCliente();
        // Act & Assert
        outraspartescliente.TabelaNome.Should().Be("OutrasPartesCliente");
    }

    public virtual void Dispose()
    {
    // Cleanup resources if needed
    }
}