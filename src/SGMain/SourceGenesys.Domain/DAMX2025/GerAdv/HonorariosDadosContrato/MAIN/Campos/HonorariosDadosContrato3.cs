// 100% auto-generated by Source Genesys Core
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming 1
public partial class DBHonorariosDadosContrato
{
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool pFldFCliente, pFldFFixo, pFldFVariavel, pFldFPercSucesso, pFldFProcesso, pFldFArquivoContrato, pFldFTextoContrato, pFldFValorFixo, pFldFObservacao, pFldFGuid, pFldFDataContrato;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected int m_FCliente, m_FProcesso;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected string? m_FArquivoContrato, m_FTextoContrato, m_FObservacao, m_FGuid;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected DateTime? m_FDataContrato;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool m_FFixo, m_FVariavel;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected decimal m_FPercSucesso, m_FValorFixo;
    public virtual int FCliente
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCliente;
        set
        {
            pFldFCliente = pFldFCliente || value != m_FCliente;
            if (pFldFCliente)
                m_FCliente = value;
        }
    }

    public virtual bool FFixo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FFixo;
        set
        {
            pFldFFixo = pFldFFixo || value != m_FFixo;
            if (pFldFFixo)
                m_FFixo = value;
        }
    }

    public virtual bool FVariavel
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FVariavel;
        set
        {
            pFldFVariavel = pFldFVariavel || value != m_FVariavel;
            if (pFldFVariavel)
                m_FVariavel = value;
        }
    }

    public virtual decimal FPercSucesso
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPercSucesso;
        set
        {
            if (value == m_FPercSucesso)
                return;
            pFldFPercSucesso = true;
            m_FPercSucesso = value;
        }
    }

    public virtual int FProcesso
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FProcesso;
        set
        {
            pFldFProcesso = pFldFProcesso || value != m_FProcesso;
            if (pFldFProcesso)
                m_FProcesso = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(2048, ErrorMessage = "A propriedade FArquivoContrato da tabela HonorariosDadosContrato deve ter no máximo 2048 caracteres.")]
    public virtual string? FArquivoContrato
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FArquivoContrato ?? string.Empty;
        set
        {
            pFldFArquivoContrato = pFldFArquivoContrato || !(m_FArquivoContrato ?? string.Empty).Equals(value);
            if (pFldFArquivoContrato)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FArquivoContrato = trimmed.Length > 2048 ? trimmed.AsSpan(0, 2048).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    public virtual string? FTextoContrato
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FTextoContrato ?? string.Empty;
        set
        {
            pFldFTextoContrato = pFldFTextoContrato || !(m_FTextoContrato ?? string.Empty).Equals(value);
            if (pFldFTextoContrato)
                m_FTextoContrato = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public virtual decimal FValorFixo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FValorFixo;
        set
        {
            if (value == m_FValorFixo)
                return;
            pFldFValorFixo = true;
            m_FValorFixo = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(2048, ErrorMessage = "A propriedade FObservacao da tabela HonorariosDadosContrato deve ter no máximo 2048 caracteres.")]
    public virtual string? FObservacao
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FObservacao ?? string.Empty;
        set
        {
            pFldFObservacao = pFldFObservacao || !(m_FObservacao ?? string.Empty).Equals(value);
            if (pFldFObservacao)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FObservacao = trimmed.Length > 2048 ? trimmed.AsSpan(0, 2048).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(150, ErrorMessage = "A propriedade FGuid da tabela HonorariosDadosContrato deve ter no máximo 150 caracteres.")]
    public virtual string? FGuid
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FGuid ?? string.Empty;
        set
        {
            pFldFGuid = pFldFGuid || !(m_FGuid ?? string.Empty).Equals(value);
            if (pFldFGuid)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FGuid = trimmed.Length > 150 ? trimmed.AsSpan(0, 150).ToString() : trimmed;
            }
        }
    }

    public virtual string? FDataContrato
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDataContrato is null || m_FDataContrato == DevourerOne.DDataZerada ? string.Empty : m_FDataContrato.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFDataContrato, m_FDataContrato, value)is not (true, var changed, var data))
                return;
            (pFldFDataContrato, m_FDataContrato) = (changed, data);
        }
    }

    public void SetAuditor(int usuarioId) => AuditorQuem = usuarioId;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITabelaName() => PTabelaNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoCodigo() => CampoCodigo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoNome() => CampoNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string IPrefixo() => PTabelaPrefixo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITypeFieldCode() => "int";
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IdIsIdentity() => false;
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => false;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetID() => ID;
}