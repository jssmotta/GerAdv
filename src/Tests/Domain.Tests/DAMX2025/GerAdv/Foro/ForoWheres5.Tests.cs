// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class ForoWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFForoFactory> _mockForoFactory;
    private readonly Mock<FForo> _mockFForo;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly ForoWhere _foroWhere;
    public ForoWhereTests()
    {
        _mockForoFactory = new Mock<IFForoFactory>();
        _mockFForo = new Mock<FForo>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _foroWhere = new ForoWhere(_mockForoFactory.Object);
    }

    public void Dispose()
    {
        _mockForoFactory?.Reset();
        _mockFForo?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
        };
    }

    private void SetupMockFForo(string? EMail = "test@email.com", string? Nome = "João", bool? Unico = false, int? Cidade = 1, string? Site = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string? Endereco = "Rua das Flores, 123", string? Bairro = "Centro", string? Fone = "(11) 99999-9999", string? Fax = "(11) 88888-9999", string? CEP = "01234-567", string? OBS = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", bool? UnicoConfirmado = true, string? Web = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
    {
        _mockFForo.Setup(f => f.FEMail).Returns(EMail ?? string.Empty);
        _mockFForo.Setup(f => f.FNome).Returns(Nome ?? string.Empty);
        _mockFForo.Setup(f => f.FUnico).Returns(Unico ?? false);
        _mockFForo.Setup(f => f.FCidade).Returns(Cidade ?? 0);
        _mockFForo.Setup(f => f.FSite).Returns(Site ?? string.Empty);
        _mockFForo.Setup(f => f.FEndereco).Returns(Endereco ?? string.Empty);
        _mockFForo.Setup(f => f.FBairro).Returns(Bairro ?? string.Empty);
        _mockFForo.Setup(f => f.FFone).Returns(Fone ?? string.Empty);
        _mockFForo.Setup(f => f.FFax).Returns(Fax ?? string.Empty);
        _mockFForo.Setup(f => f.FCEP).Returns(CEP ?? string.Empty);
        _mockFForo.Setup(f => f.FOBS).Returns(OBS ?? string.Empty);
        _mockFForo.Setup(f => f.FUnicoConfirmado).Returns(UnicoConfirmado ?? false);
        _mockFForo.Setup(f => f.FWeb).Returns(Web ?? string.Empty);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFForoFactory>();
        // Act
        var foroWhere = new ForoWhere(mockFactory.Object);
        // Assert
        foroWhere.Should().NotBeNull();
        foroWhere.Should().BeAssignableTo<IForoWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFForoFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new ForoWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnForoResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFForo();
        _mockForoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFForo.Object);
        // Act
        var result = _foroWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.EMail.Should().Be("test@email.com");
        result.Nome.Should().Be("João");
        result.Unico.Should().Be(false);
        result.Cidade.Should().Be(1);
        result.Site.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Endereco.Should().Be("Rua das Flores, 123");
        result.Bairro.Should().Be("Centro");
        result.Fone.Should().Be("(11) 99999-9999");
        result.Fax.Should().Be("(11) 88888-9999");
        result.CEP.Should().Be("01234-567");
        result.OBS.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.UnicoConfirmado.Should().Be(true);
        result.Web.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFForo(EMail: null, Nome: null, Unico: null, Cidade: null, Site: null, Endereco: null, Bairro: null, Fone: null, Fax: null, CEP: null, OBS: null, UnicoConfirmado: null, Web: null);
        _mockForoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFForo.Object);
        // Act
        var result = _foroWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.EMail.Should().Be(string.Empty);
        result.Nome.Should().Be(string.Empty);
        result.Unico.Should().Be(false);
        result.Cidade.Should().Be(0);
        result.Site.Should().Be(string.Empty);
        result.Endereco.Should().Be(string.Empty);
        result.Bairro.Should().Be(string.Empty);
        result.Fone.Should().Be(string.Empty);
        result.Fax.Should().Be(string.Empty);
        result.CEP.Should().Be(string.Empty);
        result.OBS.Should().Be(string.Empty);
        result.UnicoConfirmado.Should().Be(false);
        result.Web.Should().Be(string.Empty);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFForo();
        _mockForoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFForo.Object);
        // Act
        var result = _foroWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockForoFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFForo();
        _mockForoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFForo.Object);
        // Act
        var result = _foroWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockForoFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFForo();
        _mockForoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFForo.Object);
        // Act
        var result = _foroWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockForoFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFForo();
        _mockForoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFForo.Object);
        // Act
        _foroWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockForoFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFForoInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFForo.Setup(f => f.Dispose());
        SetupMockFForo();
        _mockForoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFForo.Object);
        // Act
        _foroWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFForo.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockForoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _foroWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFForo(EMail: "test@email.com", Nome: "João", Unico: false, Cidade: 1, Site: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", Endereco: "Rua das Flores, 123", Bairro: "Centro", Fone: "(11) 99999-9999", Fax: "(11) 88888-9999", CEP: "01234-567", OBS: "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", UnicoConfirmado: true, Web: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _mockForoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFForo.Object);
        // Act
        var result = _foroWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.EMail.Should().Be("test@email.com");
        result.Nome.Should().Be("João");
        result.Unico.Should().Be(false);
        result.Cidade.Should().Be(1);
        result.Site.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Endereco.Should().Be("Rua das Flores, 123");
        result.Bairro.Should().Be("Centro");
        result.Fone.Should().Be("(11) 99999-9999");
        result.Fax.Should().Be("(11) 88888-9999");
        result.CEP.Should().Be("01234-567");
        result.OBS.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.UnicoConfirmado.Should().Be(true);
        result.Web.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "Nome = @{DBForoDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBForoDicInfo.CampoNome}", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"),
        };
        SetupMockFForo();
        _mockForoFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFForo.Object);
        // Act
        _foroWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockForoFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBForoDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }
#region DateTime Tests
#endregion
#endregion
}