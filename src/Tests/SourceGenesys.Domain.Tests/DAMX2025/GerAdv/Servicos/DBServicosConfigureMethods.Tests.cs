// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
/// <summary>
/// Comprehensive unit tests for ConfigureUpdateFields and ConfigureAuditorFields methods in DBServicos class
/// These methods are critical for database update operations and auditing functionality
/// Tests both synchronous and asynchronous Update methods
/// </summary>
public class DBServicosConfigureMethodsTests : IDisposable
{
    private readonly DBServicos _servicos;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBServicosConfigureMethodsTests()
    {
        _servicos = new DBServicos();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void ConfigureUpdateFields_WhenNoFieldsChanged_ShouldNotUpdateDatabase()
    {
        // Arrange
        ResetAllFieldFlags();
        _servicos.ID = 1; // Update scenario
        // Act
        var result = _servicos.Update(_mockConnection.Object);
        // Assert - Should return 0 because no fields changed
        result.Should().Be(0);
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WhenNoFieldsChanged_ShouldNotUpdateDatabase()
    {
        // Arrange
        ResetAllFieldFlags();
        _servicos.ID = 1; // Update scenario
        // Act & Assert - For async, when no fields changed and it's an update, it should return 0 or throw exception
        try
        {
            var result = await _servicos.UpdateAsync(_mockConnection.Object);
            // If no exception is thrown, verify the result indicates no update was needed
            result.Should().Be(0, "When no fields changed in update scenario, should return 0");
        }
        catch (Exception ex)
        {
            // If exception is thrown due to mocked connection, that's also acceptable
            ex.Should().NotBeNull();
        }
    }

#region Helper Methods
    private void SetFieldFlag(string fieldName, bool value)
    {
        var field = typeof(DBServicos).GetField(fieldName, BindingFlags.NonPublic | BindingFlags.Instance);
        field?.SetValue(_servicos, value);
    }

    private void SetFieldValue(string fieldName, object? value)
    {
        var field = typeof(DBServicos).GetField(fieldName, BindingFlags.NonPublic | BindingFlags.Instance);
        try
        {
            field?.SetValue(_servicos, value);
        }
        catch
        {
            field?.SetValue(_servicos, Convert.ToDateTime(value));
        }
    }

    private void ResetAllFieldFlags()
    {
        var fieldFlags = new[]
        {
            "pFldFCobrar",
            "pFldFDescricao",
            "pFldFBasico",
            "pFldFGUID",
        };
        foreach (var flag in fieldFlags)
        {
            SetFieldFlag(flag, false);
        }
    }

    private void SetAllFieldFlags(bool value)
    {
        var fieldFlags = new[]
        {
            "pFldFCobrar",
            "pFldFDescricao",
            "pFldFBasico",
            "pFldFGUID",
        };
        foreach (var flag in fieldFlags)
        {
            SetFieldFlag(flag, value);
        }
    }

    private void SetAllFieldValues()
    {
        SetFieldValue("m_FCobrar", false);
        SetFieldValue("m_FDescricao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FBasico", false);
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

#endregion
#region Fields_All
    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithDescricaoFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFDescricao", true);
        SetFieldValue("m_FDescricao", value);
        _servicos.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _servicos.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsDescricao_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFDescricao", true); // At least one field must change
        SetFieldValue("m_FDescricao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _servicos.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _servicos.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsDescricao_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFDescricao", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FDescricao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _servicos.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _servicos.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithDescricaoFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFDescricao", true);
        SetFieldValue("m_FDescricao", value);
        _servicos.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _servicos.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsDescricaoChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFDescricao", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FDescricao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _servicos.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _servicos.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncDescricao_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFDescricao", true);
        SetFieldValue("m_FDescricao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _servicos.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _servicos.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncDescricao_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFDescricao", true);
        SetFieldValue("m_FDescricao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _servicos.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _servicos.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertDescricao_ShouldSetInsertAuditFields()
    {
        // Arrange
        _servicos.ID = 0; // Insert scenario
        _servicos.AuditorQuem = 5;
        SetFieldFlag("pFldFDescricao", true); // At least one field must change
        SetFieldValue("m_FDescricao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _servicos.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _servicos.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsDescricao_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _servicos.ID = 123; // Update scenario
        _servicos.AuditorQuem = 7;
        SetFieldFlag("pFldFDescricao", true); // At least one field must change
        SetFieldValue("m_FDescricao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _servicos.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _servicos.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsDescricao_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _servicos.ID = 0; // Insert scenario
        _servicos.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFDescricao", true); // At least one field must change
        SetFieldValue("m_FDescricao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _servicos.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _servicos.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsDescricao_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _servicos.ID = 0; // Insert scenario
        _servicos.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFDescricao", true); // At least one field must change
        SetFieldValue("m_FDescricao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _servicos.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _servicos.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsDescricao_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _servicos.ID = 0;
        _servicos.AuditorQuem = 10;
        SetFieldFlag("pFldFDescricao", true); // At least one field must change
        SetFieldValue("m_FDescricao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _servicos.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _servicos.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsDescricao_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _servicos.ID = id;
        _servicos.AuditorQuem = 15;
        SetFieldFlag("pFldFDescricao", true); // At least one field must change
        SetFieldValue("m_FDescricao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _servicos.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _servicos.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncDescricao_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _servicos.ID = 0; // Insert scenario
        _servicos.AuditorQuem = 5;
        SetFieldFlag("pFldFDescricao", true); // At least one field must change
        SetFieldValue("m_FDescricao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _servicos.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _servicos.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncDescricao_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _servicos.ID = 0; // Insert scenario
        _servicos.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFDescricao", true); // At least one field must change
        SetFieldValue("m_FDescricao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _servicos.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _servicos.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsDescricao_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _servicos.ID = 123;
        _servicos.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _servicos.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _servicos.FDescricao.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _servicos.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsDescricao_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _servicos.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _servicos.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFDescricao", true);
        SetFieldValue("m_FDescricao", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _servicos.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsDescricao_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFDescricao", true);
        SetFieldValue("m_FDescricao", "");
        _servicos.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _servicos.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsDescricao_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFDescricao", true);
        SetFieldValue("m_FDescricao", null);
        _servicos.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _servicos.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncDescricao_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFDescricao", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FDescricao", "");
        SetFieldValue("m_FCompromisso", "");
        _servicos.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _servicos.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithGUIDFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", value);
        _servicos.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _servicos.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsGUID_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _servicos.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _servicos.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsGUID_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _servicos.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _servicos.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithGUIDFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", value);
        _servicos.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _servicos.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsGUIDChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _servicos.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _servicos.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncGUID_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _servicos.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _servicos.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncGUID_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _servicos.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _servicos.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertGUID_ShouldSetInsertAuditFields()
    {
        // Arrange
        _servicos.ID = 0; // Insert scenario
        _servicos.AuditorQuem = 5;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _servicos.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _servicos.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsGUID_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _servicos.ID = 123; // Update scenario
        _servicos.AuditorQuem = 7;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _servicos.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _servicos.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsGUID_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _servicos.ID = 0; // Insert scenario
        _servicos.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _servicos.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _servicos.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsGUID_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _servicos.ID = 0; // Insert scenario
        _servicos.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _servicos.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _servicos.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsGUID_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _servicos.ID = 0;
        _servicos.AuditorQuem = 10;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _servicos.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _servicos.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsGUID_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _servicos.ID = id;
        _servicos.AuditorQuem = 15;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _servicos.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _servicos.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncGUID_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _servicos.ID = 0; // Insert scenario
        _servicos.AuditorQuem = 5;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _servicos.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _servicos.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncGUID_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _servicos.ID = 0; // Insert scenario
        _servicos.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _servicos.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _servicos.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsGUID_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _servicos.ID = 123;
        _servicos.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _servicos.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _servicos.FGUID.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _servicos.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsGUID_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _servicos.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _servicos.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _servicos.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsGUID_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", "");
        _servicos.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _servicos.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsGUID_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", null);
        _servicos.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _servicos.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncGUID_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FGUID", "");
        SetFieldValue("m_FCompromisso", "");
        _servicos.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _servicos.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

#endregion
    public virtual void Dispose()
    {
        _servicos?.Dispose();
    }
}