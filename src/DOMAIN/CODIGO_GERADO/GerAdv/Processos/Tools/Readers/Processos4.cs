// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Readers;
public partial class ProcessosReader(IFProcessosFactory processosFactory) : IProcessosReader
{
    private readonly IFProcessosFactory _processosFactory = processosFactory;
    public async Task<IEnumerable<DBNomeID>> ListarN(int max, string uri, string cWhere, List<SqlParameter> parameters, string order) => await DevourerSqlData.ListarNomeID(BuildSqlQuery("proCodigo, proNroPasta", cWhere, order, max), parameters, uri, caching: DevourerOne.PCachingDefault, max: max);
    public async Task<IEnumerable<ProcessosResponseAll>> Listar(int max, string uri, string cWhere, List<SqlParameter> parameters, string order, CancellationToken cancellationToken) => await ListarTabela(BuildSqlQuery(DBProcessos.CamposSqlX, cWhere, order, max), parameters, uri, caching: DevourerOne.PCachingDefault, max: max, cancellationToken: cancellationToken);
    private async Task<IEnumerable<ProcessosResponseAll>> ListarTabela(string sql, List<SqlParameter> parameters, string uri, bool caching = DevourerOne.PCachingDefault, int max = 200, CancellationToken cancellationToken = default)
    {
        var result = new List<ProcessosResponseAll>(max);
        await using var connection = Configuracoes.GetConnectionByUri(uri);
        await using var cmd = new SqlCommand(cmdText: ConfiguracoesDBT.CmdSql(sql), connection: connection?.InnerConnection)
        {
            CommandTimeout = 30
        };
        foreach (var param in parameters)
        {
            if (!cmd.Parameters.Contains(param.ParameterName))
            {
                var newParam = new SqlParameter(param.ParameterName, param.Value)
                {
                    SqlDbType = param.SqlDbType,
                    Direction = param.Direction,
                    Size = param.Size,
                    Precision = param.Precision,
                    Scale = param.Scale
                };
                cmd.Parameters.Add(newParam);
            }
        }

        await using var reader = await cmd.ExecuteReaderAsync(CommandBehavior.SingleResult);
        while (await reader.ReadAsync())
        {
            if (cancellationToken.IsCancellationRequested)
                return result;
            result.Add(ReadAll(_processosFactory.CreateFromReader(reader), reader)!);
        }

        return result;
    }

    public async Task<ProcessosResponse?> Read(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _processosFactory.CreateFromIdAsync(id, oCnn);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public async Task<Models.Processos?> ReadM(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _processosFactory.CreateFromIdAsync(id, oCnn);
        var processos = new Models.Processos
        {
            Id = dbRec.ID,
            AdvParc = dbRec.FAdvParc,
            AJGPedidoNegado = dbRec.FAJGPedidoNegado,
            AJGCliente = dbRec.FAJGCliente,
            AJGPedidoNegadoOPO = dbRec.FAJGPedidoNegadoOPO,
            NotificarPOE = dbRec.FNotificarPOE,
            ValorProvisionado = dbRec.FValorProvisionado,
            AJGOponente = dbRec.FAJGOponente,
            ValorCacheCalculo = dbRec.FValorCacheCalculo,
            AJGPedidoOPO = dbRec.FAJGPedidoOPO,
            ValorCacheCalculoProv = dbRec.FValorCacheCalculoProv,
            ConsiderarParado = dbRec.FConsiderarParado,
            ValorCalculado = dbRec.FValorCalculado,
            AJGConcedidoOPO = dbRec.FAJGConcedidoOPO,
            Cobranca = dbRec.FCobranca,
            Penhora = dbRec.FPenhora,
            AJGPedido = dbRec.FAJGPedido,
            TipoBaixa = dbRec.FTipoBaixa,
            ClassRisco = dbRec.FClassRisco,
            IsApenso = dbRec.FIsApenso,
            ValorCausaInicial = dbRec.FValorCausaInicial,
            AJGConcedido = dbRec.FAJGConcedido,
            ObsBCX = dbRec.FObsBCX ?? string.Empty,
            ValorCausaDefinitivo = dbRec.FValorCausaDefinitivo,
            PercProbExito = dbRec.FPercProbExito,
            MNA = dbRec.FMNA,
            PercExito = dbRec.FPercExito,
            NroExtra = dbRec.FNroExtra ?? string.Empty,
            AdvOpo = dbRec.FAdvOpo,
            Extra = dbRec.FExtra,
            Justica = dbRec.FJustica,
            Advogado = dbRec.FAdvogado,
            NroCaixa = dbRec.FNroCaixa ?? string.Empty,
            Preposto = dbRec.FPreposto,
            Cliente = dbRec.FCliente,
            Oponente = dbRec.FOponente,
            Area = dbRec.FArea,
            Cidade = dbRec.FCidade,
            Situacao = dbRec.FSituacao,
            IDSituacao = dbRec.FIDSituacao,
            Valor = dbRec.FValor,
            Rito = dbRec.FRito,
            Fato = dbRec.FFato ?? string.Empty,
            NroPasta = dbRec.FNroPasta ?? string.Empty,
            Atividade = dbRec.FAtividade,
            CaixaMorto = dbRec.FCaixaMorto ?? string.Empty,
            Baixado = dbRec.FBaixado,
            MotivoBaixa = dbRec.FMotivoBaixa ?? string.Empty,
            OBS = dbRec.FOBS ?? string.Empty,
            Printed = dbRec.FPrinted,
            ZKey = dbRec.FZKey ?? string.Empty,
            ZKeyQuem = dbRec.FZKeyQuem,
            Resumo = dbRec.FResumo ?? string.Empty,
            NaoImprimir = dbRec.FNaoImprimir,
            Eletronico = dbRec.FEletronico,
            NroContrato = dbRec.FNroContrato ?? string.Empty,
            PercProbExitoJustificativa = dbRec.FPercProbExitoJustificativa ?? string.Empty,
            HonorarioValor = dbRec.FHonorarioValor,
            HonorarioPercentual = dbRec.FHonorarioPercentual,
            HonorarioSucumbencia = dbRec.FHonorarioSucumbencia,
            FaseAuditoria = dbRec.FFaseAuditoria,
            ValorCondenacao = dbRec.FValorCondenacao,
            ValorCondenacaoCalculado = dbRec.FValorCondenacaoCalculado,
            ValorCondenacaoProvisorio = dbRec.FValorCondenacaoProvisorio,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataEntrada, out DateTime XDataEntrada))
        {
            processos.DataEntrada = dbRec.FDataEntrada;
            processos.DataEntrada_date = XDataEntrada;
        }

        if (DateTime.TryParse(dbRec.FDtBaixa, out DateTime XDtBaixa))
        {
            processos.DtBaixa = dbRec.FDtBaixa;
            processos.DtBaixa_date = XDtBaixa;
        }

        if (DateTime.TryParse(dbRec.FZKeyQuando, out DateTime XZKeyQuando))
        {
            processos.ZKeyQuando = dbRec.FZKeyQuando;
            processos.ZKeyQuando_date = XZKeyQuando;
        }

        return processos;
    }

    public ProcessosResponse? Read(FProcessos dbRec, MsiSqlConnection oCnn)
    {
        return Read(dbRec);
    }

    public ProcessosResponse? Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn)
    {
        using var dbRec = _processosFactory.CreateFromParameters(parameters, oCnn, sqlWhere: where);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public ProcessosResponse? Read(FProcessos dbRec) // Track 001.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var processos = new ProcessosResponse
        {
            Id = dbRec.ID,
            AdvParc = dbRec.FAdvParc,
            AJGPedidoNegado = dbRec.FAJGPedidoNegado,
            AJGCliente = dbRec.FAJGCliente,
            AJGPedidoNegadoOPO = dbRec.FAJGPedidoNegadoOPO,
            NotificarPOE = dbRec.FNotificarPOE,
            ValorProvisionado = dbRec.FValorProvisionado,
            AJGOponente = dbRec.FAJGOponente,
            ValorCacheCalculo = dbRec.FValorCacheCalculo,
            AJGPedidoOPO = dbRec.FAJGPedidoOPO,
            ValorCacheCalculoProv = dbRec.FValorCacheCalculoProv,
            ConsiderarParado = dbRec.FConsiderarParado,
            ValorCalculado = dbRec.FValorCalculado,
            AJGConcedidoOPO = dbRec.FAJGConcedidoOPO,
            Cobranca = dbRec.FCobranca,
            Penhora = dbRec.FPenhora,
            AJGPedido = dbRec.FAJGPedido,
            TipoBaixa = dbRec.FTipoBaixa,
            ClassRisco = dbRec.FClassRisco,
            IsApenso = dbRec.FIsApenso,
            ValorCausaInicial = dbRec.FValorCausaInicial,
            AJGConcedido = dbRec.FAJGConcedido,
            ObsBCX = dbRec.FObsBCX ?? string.Empty,
            ValorCausaDefinitivo = dbRec.FValorCausaDefinitivo,
            PercProbExito = dbRec.FPercProbExito,
            MNA = dbRec.FMNA,
            PercExito = dbRec.FPercExito,
            NroExtra = dbRec.FNroExtra ?? string.Empty,
            AdvOpo = dbRec.FAdvOpo,
            Extra = dbRec.FExtra,
            Justica = dbRec.FJustica,
            Advogado = dbRec.FAdvogado,
            NroCaixa = dbRec.FNroCaixa ?? string.Empty,
            Preposto = dbRec.FPreposto,
            Cliente = dbRec.FCliente,
            Oponente = dbRec.FOponente,
            Area = dbRec.FArea,
            Cidade = dbRec.FCidade,
            Situacao = dbRec.FSituacao,
            IDSituacao = dbRec.FIDSituacao,
            Valor = dbRec.FValor,
            Rito = dbRec.FRito,
            Fato = dbRec.FFato ?? string.Empty,
            NroPasta = dbRec.FNroPasta ?? string.Empty,
            Atividade = dbRec.FAtividade,
            CaixaMorto = dbRec.FCaixaMorto ?? string.Empty,
            Baixado = dbRec.FBaixado,
            MotivoBaixa = dbRec.FMotivoBaixa ?? string.Empty,
            OBS = dbRec.FOBS ?? string.Empty,
            Printed = dbRec.FPrinted,
            ZKey = dbRec.FZKey ?? string.Empty,
            ZKeyQuem = dbRec.FZKeyQuem,
            Resumo = dbRec.FResumo ?? string.Empty,
            NaoImprimir = dbRec.FNaoImprimir,
            Eletronico = dbRec.FEletronico,
            NroContrato = dbRec.FNroContrato ?? string.Empty,
            PercProbExitoJustificativa = dbRec.FPercProbExitoJustificativa ?? string.Empty,
            HonorarioValor = dbRec.FHonorarioValor,
            HonorarioPercentual = dbRec.FHonorarioPercentual,
            HonorarioSucumbencia = dbRec.FHonorarioSucumbencia,
            FaseAuditoria = dbRec.FFaseAuditoria,
            ValorCondenacao = dbRec.FValorCondenacao,
            ValorCondenacaoCalculado = dbRec.FValorCondenacaoCalculado,
            ValorCondenacaoProvisorio = dbRec.FValorCondenacaoProvisorio,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataEntrada, out DateTime XDataEntrada))
        {
            processos.DataEntrada = dbRec.FDataEntrada;
            processos.DataEntrada_date = XDataEntrada;
        }

        if (DateTime.TryParse(dbRec.FDtBaixa, out DateTime XDtBaixa))
        {
            processos.DtBaixa = dbRec.FDtBaixa;
            processos.DtBaixa_date = XDtBaixa;
        }

        if (DateTime.TryParse(dbRec.FZKeyQuando, out DateTime XZKeyQuando))
        {
            processos.ZKeyQuando = dbRec.FZKeyQuando;
            processos.ZKeyQuando_date = XZKeyQuando;
        }

        return processos;
    }

    public ProcessosResponse? Read(SG.GerAdv.DBProcessos dbRec) // Track 002.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var processos = new ProcessosResponse
        {
            Id = dbRec.ID,
            AdvParc = dbRec.FAdvParc,
            AJGPedidoNegado = dbRec.FAJGPedidoNegado,
            AJGCliente = dbRec.FAJGCliente,
            AJGPedidoNegadoOPO = dbRec.FAJGPedidoNegadoOPO,
            NotificarPOE = dbRec.FNotificarPOE,
            ValorProvisionado = dbRec.FValorProvisionado,
            AJGOponente = dbRec.FAJGOponente,
            ValorCacheCalculo = dbRec.FValorCacheCalculo,
            AJGPedidoOPO = dbRec.FAJGPedidoOPO,
            ValorCacheCalculoProv = dbRec.FValorCacheCalculoProv,
            ConsiderarParado = dbRec.FConsiderarParado,
            ValorCalculado = dbRec.FValorCalculado,
            AJGConcedidoOPO = dbRec.FAJGConcedidoOPO,
            Cobranca = dbRec.FCobranca,
            Penhora = dbRec.FPenhora,
            AJGPedido = dbRec.FAJGPedido,
            TipoBaixa = dbRec.FTipoBaixa,
            ClassRisco = dbRec.FClassRisco,
            IsApenso = dbRec.FIsApenso,
            ValorCausaInicial = dbRec.FValorCausaInicial,
            AJGConcedido = dbRec.FAJGConcedido,
            ObsBCX = dbRec.FObsBCX ?? string.Empty,
            ValorCausaDefinitivo = dbRec.FValorCausaDefinitivo,
            PercProbExito = dbRec.FPercProbExito,
            MNA = dbRec.FMNA,
            PercExito = dbRec.FPercExito,
            NroExtra = dbRec.FNroExtra ?? string.Empty,
            AdvOpo = dbRec.FAdvOpo,
            Extra = dbRec.FExtra,
            Justica = dbRec.FJustica,
            Advogado = dbRec.FAdvogado,
            NroCaixa = dbRec.FNroCaixa ?? string.Empty,
            Preposto = dbRec.FPreposto,
            Cliente = dbRec.FCliente,
            Oponente = dbRec.FOponente,
            Area = dbRec.FArea,
            Cidade = dbRec.FCidade,
            Situacao = dbRec.FSituacao,
            IDSituacao = dbRec.FIDSituacao,
            Valor = dbRec.FValor,
            Rito = dbRec.FRito,
            Fato = dbRec.FFato ?? string.Empty,
            NroPasta = dbRec.FNroPasta ?? string.Empty,
            Atividade = dbRec.FAtividade,
            CaixaMorto = dbRec.FCaixaMorto ?? string.Empty,
            Baixado = dbRec.FBaixado,
            MotivoBaixa = dbRec.FMotivoBaixa ?? string.Empty,
            OBS = dbRec.FOBS ?? string.Empty,
            Printed = dbRec.FPrinted,
            ZKey = dbRec.FZKey ?? string.Empty,
            ZKeyQuem = dbRec.FZKeyQuem,
            Resumo = dbRec.FResumo ?? string.Empty,
            NaoImprimir = dbRec.FNaoImprimir,
            Eletronico = dbRec.FEletronico,
            NroContrato = dbRec.FNroContrato ?? string.Empty,
            PercProbExitoJustificativa = dbRec.FPercProbExitoJustificativa ?? string.Empty,
            HonorarioValor = dbRec.FHonorarioValor,
            HonorarioPercentual = dbRec.FHonorarioPercentual,
            HonorarioSucumbencia = dbRec.FHonorarioSucumbencia,
            FaseAuditoria = dbRec.FFaseAuditoria,
            ValorCondenacao = dbRec.FValorCondenacao,
            ValorCondenacaoCalculado = dbRec.FValorCondenacaoCalculado,
            ValorCondenacaoProvisorio = dbRec.FValorCondenacaoProvisorio,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataEntrada, out DateTime XDataEntrada))
        {
            processos.DataEntrada = dbRec.FDataEntrada;
            processos.DataEntrada_date = XDataEntrada;
        }

        if (DateTime.TryParse(dbRec.FDtBaixa, out DateTime XDtBaixa))
        {
            processos.DtBaixa = dbRec.FDtBaixa;
            processos.DtBaixa_date = XDtBaixa;
        }

        if (DateTime.TryParse(dbRec.FZKeyQuando, out DateTime XZKeyQuando))
        {
            processos.ZKeyQuando = dbRec.FZKeyQuando;
            processos.ZKeyQuando_date = XZKeyQuando;
        }

        return processos;
    }

    public ProcessosResponseAll? ReadAll(FProcessos dbRec, IDataRecord dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var processos = new ProcessosResponseAll
        {
            Id = dbRec.ID,
            AdvParc = dbRec.FAdvParc,
            AJGPedidoNegado = dbRec.FAJGPedidoNegado,
            AJGCliente = dbRec.FAJGCliente,
            AJGPedidoNegadoOPO = dbRec.FAJGPedidoNegadoOPO,
            NotificarPOE = dbRec.FNotificarPOE,
            ValorProvisionado = dbRec.FValorProvisionado,
            AJGOponente = dbRec.FAJGOponente,
            ValorCacheCalculo = dbRec.FValorCacheCalculo,
            AJGPedidoOPO = dbRec.FAJGPedidoOPO,
            ValorCacheCalculoProv = dbRec.FValorCacheCalculoProv,
            ConsiderarParado = dbRec.FConsiderarParado,
            ValorCalculado = dbRec.FValorCalculado,
            AJGConcedidoOPO = dbRec.FAJGConcedidoOPO,
            Cobranca = dbRec.FCobranca,
            Penhora = dbRec.FPenhora,
            AJGPedido = dbRec.FAJGPedido,
            TipoBaixa = dbRec.FTipoBaixa,
            ClassRisco = dbRec.FClassRisco,
            IsApenso = dbRec.FIsApenso,
            ValorCausaInicial = dbRec.FValorCausaInicial,
            AJGConcedido = dbRec.FAJGConcedido,
            ObsBCX = dbRec.FObsBCX ?? string.Empty,
            ValorCausaDefinitivo = dbRec.FValorCausaDefinitivo,
            PercProbExito = dbRec.FPercProbExito,
            MNA = dbRec.FMNA,
            PercExito = dbRec.FPercExito,
            NroExtra = dbRec.FNroExtra ?? string.Empty,
            AdvOpo = dbRec.FAdvOpo,
            Extra = dbRec.FExtra,
            Justica = dbRec.FJustica,
            Advogado = dbRec.FAdvogado,
            NroCaixa = dbRec.FNroCaixa ?? string.Empty,
            Preposto = dbRec.FPreposto,
            Cliente = dbRec.FCliente,
            Oponente = dbRec.FOponente,
            Area = dbRec.FArea,
            Cidade = dbRec.FCidade,
            Situacao = dbRec.FSituacao,
            IDSituacao = dbRec.FIDSituacao,
            Valor = dbRec.FValor,
            Rito = dbRec.FRito,
            Fato = dbRec.FFato ?? string.Empty,
            NroPasta = dbRec.FNroPasta ?? string.Empty,
            Atividade = dbRec.FAtividade,
            CaixaMorto = dbRec.FCaixaMorto ?? string.Empty,
            Baixado = dbRec.FBaixado,
            MotivoBaixa = dbRec.FMotivoBaixa ?? string.Empty,
            OBS = dbRec.FOBS ?? string.Empty,
            Printed = dbRec.FPrinted,
            ZKey = dbRec.FZKey ?? string.Empty,
            ZKeyQuem = dbRec.FZKeyQuem,
            Resumo = dbRec.FResumo ?? string.Empty,
            NaoImprimir = dbRec.FNaoImprimir,
            Eletronico = dbRec.FEletronico,
            NroContrato = dbRec.FNroContrato ?? string.Empty,
            PercProbExitoJustificativa = dbRec.FPercProbExitoJustificativa ?? string.Empty,
            HonorarioValor = dbRec.FHonorarioValor,
            HonorarioPercentual = dbRec.FHonorarioPercentual,
            HonorarioSucumbencia = dbRec.FHonorarioSucumbencia,
            FaseAuditoria = dbRec.FFaseAuditoria,
            ValorCondenacao = dbRec.FValorCondenacao,
            ValorCondenacaoCalculado = dbRec.FValorCondenacaoCalculado,
            ValorCondenacaoProvisorio = dbRec.FValorCondenacaoProvisorio,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataEntrada, out DateTime XDataEntrada))
        {
            processos.DataEntrada = dbRec.FDataEntrada;
            processos.DataEntrada_date = XDataEntrada;
        }

        if (DateTime.TryParse(dbRec.FDtBaixa, out DateTime XDtBaixa))
        {
            processos.DtBaixa = dbRec.FDtBaixa;
            processos.DtBaixa_date = XDtBaixa;
        }

        if (DateTime.TryParse(dbRec.FZKeyQuando, out DateTime XZKeyQuando))
        {
            processos.ZKeyQuando = dbRec.FZKeyQuando;
            processos.ZKeyQuando_date = XZKeyQuando;
        }

        try
        {
            processos.NomeAdvogados = dr[DBAdvogadosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            processos.NomeJustica = dr[DBJusticaDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            processos.NomeAdvogados = dr[DBAdvogadosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            processos.NomePrepostos = dr[DBPrepostosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            processos.NomeClientes = dr[DBClientesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            processos.NomeOponentes = dr[DBOponentesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            processos.DescricaoArea = dr[DBAreaDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            processos.NomeCidade = dr[DBCidadeDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            processos.DescricaoRito = dr[DBRitoDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            processos.DescricaoAtividades = dr[DBAtividadesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return processos;
    }

    public ProcessosResponseAll? ReadAll(SG.GerAdv.DBProcessos dbRec, DataRow dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var processos = new ProcessosResponseAll
        {
            Id = dbRec.ID,
            AdvParc = dbRec.FAdvParc,
            AJGPedidoNegado = dbRec.FAJGPedidoNegado,
            AJGCliente = dbRec.FAJGCliente,
            AJGPedidoNegadoOPO = dbRec.FAJGPedidoNegadoOPO,
            NotificarPOE = dbRec.FNotificarPOE,
            ValorProvisionado = dbRec.FValorProvisionado,
            AJGOponente = dbRec.FAJGOponente,
            ValorCacheCalculo = dbRec.FValorCacheCalculo,
            AJGPedidoOPO = dbRec.FAJGPedidoOPO,
            ValorCacheCalculoProv = dbRec.FValorCacheCalculoProv,
            ConsiderarParado = dbRec.FConsiderarParado,
            ValorCalculado = dbRec.FValorCalculado,
            AJGConcedidoOPO = dbRec.FAJGConcedidoOPO,
            Cobranca = dbRec.FCobranca,
            Penhora = dbRec.FPenhora,
            AJGPedido = dbRec.FAJGPedido,
            TipoBaixa = dbRec.FTipoBaixa,
            ClassRisco = dbRec.FClassRisco,
            IsApenso = dbRec.FIsApenso,
            ValorCausaInicial = dbRec.FValorCausaInicial,
            AJGConcedido = dbRec.FAJGConcedido,
            ObsBCX = dbRec.FObsBCX ?? string.Empty,
            ValorCausaDefinitivo = dbRec.FValorCausaDefinitivo,
            PercProbExito = dbRec.FPercProbExito,
            MNA = dbRec.FMNA,
            PercExito = dbRec.FPercExito,
            NroExtra = dbRec.FNroExtra ?? string.Empty,
            AdvOpo = dbRec.FAdvOpo,
            Extra = dbRec.FExtra,
            Justica = dbRec.FJustica,
            Advogado = dbRec.FAdvogado,
            NroCaixa = dbRec.FNroCaixa ?? string.Empty,
            Preposto = dbRec.FPreposto,
            Cliente = dbRec.FCliente,
            Oponente = dbRec.FOponente,
            Area = dbRec.FArea,
            Cidade = dbRec.FCidade,
            Situacao = dbRec.FSituacao,
            IDSituacao = dbRec.FIDSituacao,
            Valor = dbRec.FValor,
            Rito = dbRec.FRito,
            Fato = dbRec.FFato ?? string.Empty,
            NroPasta = dbRec.FNroPasta ?? string.Empty,
            Atividade = dbRec.FAtividade,
            CaixaMorto = dbRec.FCaixaMorto ?? string.Empty,
            Baixado = dbRec.FBaixado,
            MotivoBaixa = dbRec.FMotivoBaixa ?? string.Empty,
            OBS = dbRec.FOBS ?? string.Empty,
            Printed = dbRec.FPrinted,
            ZKey = dbRec.FZKey ?? string.Empty,
            ZKeyQuem = dbRec.FZKeyQuem,
            Resumo = dbRec.FResumo ?? string.Empty,
            NaoImprimir = dbRec.FNaoImprimir,
            Eletronico = dbRec.FEletronico,
            NroContrato = dbRec.FNroContrato ?? string.Empty,
            PercProbExitoJustificativa = dbRec.FPercProbExitoJustificativa ?? string.Empty,
            HonorarioValor = dbRec.FHonorarioValor,
            HonorarioPercentual = dbRec.FHonorarioPercentual,
            HonorarioSucumbencia = dbRec.FHonorarioSucumbencia,
            FaseAuditoria = dbRec.FFaseAuditoria,
            ValorCondenacao = dbRec.FValorCondenacao,
            ValorCondenacaoCalculado = dbRec.FValorCondenacaoCalculado,
            ValorCondenacaoProvisorio = dbRec.FValorCondenacaoProvisorio,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataEntrada, out DateTime XDataEntrada))
        {
            processos.DataEntrada = dbRec.FDataEntrada;
            processos.DataEntrada_date = XDataEntrada;
        }

        if (DateTime.TryParse(dbRec.FDtBaixa, out DateTime XDtBaixa))
        {
            processos.DtBaixa = dbRec.FDtBaixa;
            processos.DtBaixa_date = XDtBaixa;
        }

        if (DateTime.TryParse(dbRec.FZKeyQuando, out DateTime XZKeyQuando))
        {
            processos.ZKeyQuando = dbRec.FZKeyQuando;
            processos.ZKeyQuando_date = XZKeyQuando;
        }

        try
        {
            processos.NomeAdvogados = dr[DBAdvogadosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            processos.NomeJustica = dr[DBJusticaDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            processos.NomeAdvogados = dr[DBAdvogadosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            processos.NomePrepostos = dr[DBPrepostosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            processos.NomeClientes = dr[DBClientesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            processos.NomeOponentes = dr[DBOponentesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            processos.DescricaoArea = dr[DBAreaDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            processos.NomeCidade = dr[DBCidadeDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            processos.DescricaoRito = dr[DBRitoDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            processos.DescricaoAtividades = dr[DBAtividadesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return processos;
    }
}