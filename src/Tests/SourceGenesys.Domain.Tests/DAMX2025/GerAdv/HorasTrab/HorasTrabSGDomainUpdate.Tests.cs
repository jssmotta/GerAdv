// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// ============================================
// ARQUIVO: DBUpdateTests.cs.txt (Principal)
// ============================================
namespace MenphisSI.GerAdv.Tests;
public class DBHorasTrabUpdate : IDisposable
{
    private readonly DBHorasTrab _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBHorasTrabUpdate()
    {
        _instance = new DBHorasTrab();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void DefaultConstructor_ShouldCreateInstance_WithDefaultValues()
    {
        // Act
        var horastrab = new DBHorasTrab();
        // Assert
        horastrab.Should().NotBeNull();
        horastrab.ITabelaName().Should().Be("HorasTrab");
        horastrab.ID.Should().Be(0);
    }

    [Fact]
    public void AllProperties_WithValidValues_ShouldSetCorrectly()
    {
        // Arrange
        var horastrab = new DBHorasTrab
        {
            FGUID = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FHrIni = "AAAAA",
            FHrFim = "AAAAA",
            FOBS = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FAnexo = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FAnexoComp = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FAnexoUNC = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        };
        // Assert - All properties should be set horastrab.FGUID.Should().Be( "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        horastrab.FHrIni.Should().Be("AAAAA");
        horastrab.FHrFim.Should().Be("AAAAA");
        horastrab.FOBS.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        horastrab.FAnexo.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        horastrab.FAnexoComp.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        horastrab.FAnexoUNC.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Theory]
    [InlineData("AAA")]
    [InlineData("BB")]
    [InlineData("CCCc")]
    public void FHrIni_Property_ShouldAcceptValidNames(string HrIni)
    {
        // Arrange
        var horastrab = new DBHorasTrab
        {
            // Act
            FHrIni = HrIni
        };
        // Assert
        horastrab.FHrIni.Should().Be(HrIni);
    }

    [Fact]
    public void FHrIni_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var horastrab = new DBHorasTrab
        {
            // Act
            FHrIni = null
        };
        // Assert
        horastrab.FHrIni.Should().Be(string.Empty);
    }

    [Fact]
    public void FHrIni_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var horastrab = new DBHorasTrab();
        var longName = new string ('A', 5 + 10); // Exceeds 5 character limit
        // Act
        horastrab.FHrIni = longName;
        // Assert
        horastrab.FHrIni.Should().HaveLength(5);
    }

    [Fact]
    public void FHrIni_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FHrIni = null;
        // Act
        var result = _instance.FHrIni;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FHrIni_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test ".Trim();
        _instance.FHrIni = expectedValue;
        // Act
        var result = _instance.FHrIni;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FHrIni_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFHrIni", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FHrIni = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FHrIni);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FHrIni_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFHrIni", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FHrIni = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FHrIni);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FHrIni_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFHrIni", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAA  ";
        var expectedValue = "AAA";
        // Act
        _instance.FHrIni = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FHrIni);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FHrIni_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFHrIni", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FHrIni = value;
        // Act
        _instance.FHrIni = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FHrIni_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFHrIni", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FHrIni = "Original Value";
        // Act
        _instance.FHrIni = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FHrIni_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFHrIni", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FHrIni = "First Value";
        // Act
        _instance.FHrIni = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FHrIni_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFHrIni", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FHrIni = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FHrIni);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAA", "AAA")]
    [InlineData("  BB  ", "BB")]
    [InlineData("CCCc", "CCCc")]
    public void FHrIni_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FHrIni = input;
        // Assert
        Assert.Equal(expected, _instance.FHrIni);
    }

    [Fact]
    public void FHrIni_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFHrIni", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FHrIni = null;
        // Act
        _instance.FHrIni = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FHrIni_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFHrIni", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FHrIni = "Existing Value";
        // Act
        _instance.FHrIni = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAA")]
    [InlineData("BB")]
    [InlineData("CCCc")]
    public void FHrFim_Property_ShouldAcceptValidNames(string HrFim)
    {
        // Arrange
        var horastrab = new DBHorasTrab
        {
            // Act
            FHrFim = HrFim
        };
        // Assert
        horastrab.FHrFim.Should().Be(HrFim);
    }

    [Fact]
    public void FHrFim_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var horastrab = new DBHorasTrab
        {
            // Act
            FHrFim = null
        };
        // Assert
        horastrab.FHrFim.Should().Be(string.Empty);
    }

    [Fact]
    public void FHrFim_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var horastrab = new DBHorasTrab();
        var longName = new string ('A', 5 + 10); // Exceeds 5 character limit
        // Act
        horastrab.FHrFim = longName;
        // Assert
        horastrab.FHrFim.Should().HaveLength(5);
    }

    [Fact]
    public void FHrFim_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FHrFim = null;
        // Act
        var result = _instance.FHrFim;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FHrFim_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test ".Trim();
        _instance.FHrFim = expectedValue;
        // Act
        var result = _instance.FHrFim;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FHrFim_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFHrFim", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FHrFim = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FHrFim);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FHrFim_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFHrFim", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FHrFim = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FHrFim);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FHrFim_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFHrFim", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAA  ";
        var expectedValue = "AAA";
        // Act
        _instance.FHrFim = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FHrFim);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FHrFim_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFHrFim", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FHrFim = value;
        // Act
        _instance.FHrFim = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FHrFim_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFHrFim", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FHrFim = "Original Value";
        // Act
        _instance.FHrFim = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FHrFim_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFHrFim", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FHrFim = "First Value";
        // Act
        _instance.FHrFim = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FHrFim_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFHrFim", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FHrFim = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FHrFim);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAA", "AAA")]
    [InlineData("  BB  ", "BB")]
    [InlineData("CCCc", "CCCc")]
    public void FHrFim_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FHrFim = input;
        // Assert
        Assert.Equal(expected, _instance.FHrFim);
    }

    [Fact]
    public void FHrFim_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFHrFim", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FHrFim = null;
        // Act
        _instance.FHrFim = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FHrFim_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFHrFim", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FHrFim = "Existing Value";
        // Act
        _instance.FHrFim = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData(1000.50)]
    [InlineData(0)]
    [InlineData(-100.25)]
    public void FTempo_Property_ShouldAcceptDecimalValues(decimal Tempo)
    {
        // Arrange
        var horastrab = new DBHorasTrab();
        // Act
        horastrab.FTempo = Tempo;
        // Assert
        horastrab.FTempo.Should().Be(Tempo);
    }

    [Theory]
    [InlineData(1000.50)]
    [InlineData(0)]
    [InlineData(-100.25)]
    public void FValor_Property_ShouldAcceptDecimalValues(decimal Valor)
    {
        // Arrange
        var horastrab = new DBHorasTrab();
        // Act
        horastrab.FValor = Valor;
        // Assert
        horastrab.FValor.Should().Be(Valor);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FOBS_Property_ShouldAcceptValidNames(string OBS)
    {
        // Arrange
        var horastrab = new DBHorasTrab
        {
            // Act
            FOBS = OBS
        };
        // Assert
        horastrab.FOBS.Should().Be(OBS);
    }

    [Fact]
    public void FOBS_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var horastrab = new DBHorasTrab
        {
            // Act
            FOBS = null
        };
        // Assert
        horastrab.FOBS.Should().Be(string.Empty);
    }

    [Fact]
    public void FOBS_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FOBS = null;
        // Act
        var result = _instance.FOBS;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FOBS_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FOBS = expectedValue;
        // Act
        var result = _instance.FOBS;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FOBS_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFOBS", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FOBS = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FOBS);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FOBS_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFOBS", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FOBS = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FOBS);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FOBS_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFOBS", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  ";
        var expectedValue = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM";
        // Act
        _instance.FOBS = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FOBS);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FOBS_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFOBS", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FOBS = value;
        // Act
        _instance.FOBS = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FOBS_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFOBS", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FOBS = "Original Value";
        // Act
        _instance.FOBS = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FOBS_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFOBS", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FOBS = "First Value";
        // Act
        _instance.FOBS = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FOBS_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFOBS", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FOBS = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FOBS);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData
    [InlineData
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FOBS_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FOBS = input;
        // Assert
        Assert.Equal(expected, _instance.FOBS);
    }

    [Fact]
    public void FOBS_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFOBS", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FOBS = null;
        // Act
        _instance.FOBS = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FOBS_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFOBS", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FOBS = "Existing Value";
        // Act
        _instance.FOBS = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FAnexo_Property_ShouldAcceptValidNames(string Anexo)
    {
        // Arrange
        var horastrab = new DBHorasTrab
        {
            // Act
            FAnexo = Anexo
        };
        // Assert
        horastrab.FAnexo.Should().Be(Anexo);
    }

    [Fact]
    public void FAnexo_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var horastrab = new DBHorasTrab
        {
            // Act
            FAnexo = null
        };
        // Assert
        horastrab.FAnexo.Should().Be(string.Empty);
    }

    [Fact]
    public void FAnexo_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var horastrab = new DBHorasTrab();
        var longName = new string ('A', 255 + 10); // Exceeds 255 character limit
        // Act
        horastrab.FAnexo = longName;
        // Assert
        horastrab.FAnexo.Should().HaveLength(255);
    }

    [Fact]
    public void FAnexo_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FAnexo = null;
        // Act
        var result = _instance.FAnexo;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FAnexo_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FAnexo = expectedValue;
        // Act
        var result = _instance.FAnexo;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FAnexo_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFAnexo", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAnexo = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FAnexo);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAnexo_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFAnexo", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAnexo = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FAnexo);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FAnexo_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFAnexo", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FAnexo = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FAnexo);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAnexo_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFAnexo", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FAnexo = value;
        // Act
        _instance.FAnexo = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAnexo_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFAnexo", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAnexo = "Original Value";
        // Act
        _instance.FAnexo = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAnexo_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFAnexo", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAnexo = "First Value";
        // Act
        _instance.FAnexo = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAnexo_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFAnexo", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAnexo = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FAnexo);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FAnexo_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FAnexo = input;
        // Assert
        Assert.Equal(expected, _instance.FAnexo);
    }

    [Fact]
    public void FAnexo_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFAnexo", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAnexo = null;
        // Act
        _instance.FAnexo = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAnexo_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFAnexo", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAnexo = "Existing Value";
        // Act
        _instance.FAnexo = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FAnexoComp_Property_ShouldAcceptValidNames(string AnexoComp)
    {
        // Arrange
        var horastrab = new DBHorasTrab
        {
            // Act
            FAnexoComp = AnexoComp
        };
        // Assert
        horastrab.FAnexoComp.Should().Be(AnexoComp);
    }

    [Fact]
    public void FAnexoComp_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var horastrab = new DBHorasTrab
        {
            // Act
            FAnexoComp = null
        };
        // Assert
        horastrab.FAnexoComp.Should().Be(string.Empty);
    }

    [Fact]
    public void FAnexoComp_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var horastrab = new DBHorasTrab();
        var longName = new string ('A', 50 + 10); // Exceeds 50 character limit
        // Act
        horastrab.FAnexoComp = longName;
        // Assert
        horastrab.FAnexoComp.Should().HaveLength(50);
    }

    [Fact]
    public void FAnexoComp_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FAnexoComp = null;
        // Act
        var result = _instance.FAnexoComp;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FAnexoComp_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FAnexoComp = expectedValue;
        // Act
        var result = _instance.FAnexoComp;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FAnexoComp_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFAnexoComp", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAnexoComp = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FAnexoComp);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAnexoComp_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFAnexoComp", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAnexoComp = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FAnexoComp);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FAnexoComp_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFAnexoComp", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FAnexoComp = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FAnexoComp);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAnexoComp_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFAnexoComp", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FAnexoComp = value;
        // Act
        _instance.FAnexoComp = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAnexoComp_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFAnexoComp", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAnexoComp = "Original Value";
        // Act
        _instance.FAnexoComp = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAnexoComp_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFAnexoComp", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAnexoComp = "First Value";
        // Act
        _instance.FAnexoComp = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAnexoComp_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFAnexoComp", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAnexoComp = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FAnexoComp);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FAnexoComp_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FAnexoComp = input;
        // Assert
        Assert.Equal(expected, _instance.FAnexoComp);
    }

    [Fact]
    public void FAnexoComp_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFAnexoComp", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAnexoComp = null;
        // Act
        _instance.FAnexoComp = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAnexoComp_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFAnexoComp", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAnexoComp = "Existing Value";
        // Act
        _instance.FAnexoComp = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FAnexoUNC_Property_ShouldAcceptValidNames(string AnexoUNC)
    {
        // Arrange
        var horastrab = new DBHorasTrab
        {
            // Act
            FAnexoUNC = AnexoUNC
        };
        // Assert
        horastrab.FAnexoUNC.Should().Be(AnexoUNC);
    }

    [Fact]
    public void FAnexoUNC_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var horastrab = new DBHorasTrab
        {
            // Act
            FAnexoUNC = null
        };
        // Assert
        horastrab.FAnexoUNC.Should().Be(string.Empty);
    }

    [Fact]
    public void FAnexoUNC_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var horastrab = new DBHorasTrab();
        var longName = new string ('A', 255 + 10); // Exceeds 255 character limit
        // Act
        horastrab.FAnexoUNC = longName;
        // Assert
        horastrab.FAnexoUNC.Should().HaveLength(255);
    }

    [Fact]
    public void FAnexoUNC_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FAnexoUNC = null;
        // Act
        var result = _instance.FAnexoUNC;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FAnexoUNC_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FAnexoUNC = expectedValue;
        // Act
        var result = _instance.FAnexoUNC;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FAnexoUNC_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFAnexoUNC", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAnexoUNC = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FAnexoUNC);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAnexoUNC_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFAnexoUNC", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAnexoUNC = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FAnexoUNC);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FAnexoUNC_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFAnexoUNC", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FAnexoUNC = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FAnexoUNC);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAnexoUNC_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFAnexoUNC", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FAnexoUNC = value;
        // Act
        _instance.FAnexoUNC = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAnexoUNC_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFAnexoUNC", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAnexoUNC = "Original Value";
        // Act
        _instance.FAnexoUNC = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAnexoUNC_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFAnexoUNC", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAnexoUNC = "First Value";
        // Act
        _instance.FAnexoUNC = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAnexoUNC_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFAnexoUNC", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FAnexoUNC = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FAnexoUNC);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FAnexoUNC_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FAnexoUNC = input;
        // Assert
        Assert.Equal(expected, _instance.FAnexoUNC);
    }

    [Fact]
    public void FAnexoUNC_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFAnexoUNC", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAnexoUNC = null;
        // Act
        _instance.FAnexoUNC = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FAnexoUNC_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBHorasTrab).GetField("pFldFAnexoUNC", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FAnexoUNC = "Existing Value";
        // Act
        _instance.FAnexoUNC = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

#region Testes de GUID
    [Fact]
    public void GUID_DefaultValue_ShouldBeEmpty()
    {
        Assert.Equal(string.Empty, _instance.FGUID);
    }

    [Fact]
    public void GUID_SetValidGUID_ShouldStore()
    {
        var guid = Guid.NewGuid().ToString();
        _instance.FGUID = guid;
        Assert.Equal(guid, _instance.FGUID);
    }

#endregion
    [Fact]
    public void TabelaNome_Property_ShouldReturnCorrectTableName()
    {
        // Arrange
        var horastrab = new DBHorasTrab();
        // Act & Assert
        horastrab.TabelaNome.Should().Be("HorasTrab");
    }

    public virtual void Dispose()
    {
    // Cleanup resources if needed
    }
}