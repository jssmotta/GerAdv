// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class AgendaWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFAgendaFactory> _mockAgendaFactory;
    private readonly Mock<FAgenda> _mockFAgenda;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly AgendaWhere _agendaWhere;
    public AgendaWhereTests()
    {
        _mockAgendaFactory = new Mock<IFAgendaFactory>();
        _mockFAgenda = new Mock<FAgenda>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _agendaWhere = new AgendaWhere(_mockAgendaFactory.Object);
    }

    public void Dispose()
    {
        _mockAgendaFactory?.Reset();
        _mockFAgenda?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "27/05/2022")
        };
    }

    private void SetupMockFAgenda(int? IDCOB = 1, bool? ClienteAvisado = false, bool? RevisarP2 = true, int? IDNE = 1, int? Cidade = 1, int? Oculto = 1, int? CartaPrecatoria = 1, bool? Revisar = false, string? HrFinal = "27/05/2022", int? Advogado = 1, int? EventoGerador = 1, string? EventoData = "24/04/1975", int? Funcionario = 1, string? Data = "27/05/2022", int? EventoPrazo = 1, string? Hora = "27/05/2022", string? Compromisso = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", int? TipoCompromisso = 1, int? Cliente = 1, bool? Liberado = true, bool? Importante = false, bool? Concluido = true, int? Area = 1, int? Justica = 1, int? Processo = 1, int? IDHistorico = 1, int? IDInsProcesso = 1, int? Usuario = 1, int? Preposto = 1, int? QuemID = 1, int? QuemCodigo = 1, string? Status = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", decimal? Valor = 1m, string? Decisao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", int? Sempre = 1, int? PrazoDias = 1, int? ProtocoloIntegrado = 1, string? DataInicioPrazo = "24/04/1975", bool? UsuarioCiente = false)
    {
        _mockFAgenda.Setup(f => f.FIDCOB).Returns(IDCOB ?? 0);
        _mockFAgenda.Setup(f => f.FClienteAvisado).Returns(ClienteAvisado ?? false);
        _mockFAgenda.Setup(f => f.FRevisarP2).Returns(RevisarP2 ?? false);
        _mockFAgenda.Setup(f => f.FIDNE).Returns(IDNE ?? 0);
        _mockFAgenda.Setup(f => f.FCidade).Returns(Cidade ?? 0);
        _mockFAgenda.Setup(f => f.FOculto).Returns(Oculto ?? 0);
        _mockFAgenda.Setup(f => f.FCartaPrecatoria).Returns(CartaPrecatoria ?? 0);
        _mockFAgenda.Setup(f => f.FRevisar).Returns(Revisar ?? false);
        _mockFAgenda.Setup(f => f.FHrFinal).Returns(HrFinal ?? string.Empty);
        _mockFAgenda.Setup(f => f.FAdvogado).Returns(Advogado ?? 0);
        _mockFAgenda.Setup(f => f.FEventoGerador).Returns(EventoGerador ?? 0);
        _mockFAgenda.Setup(f => f.FEventoData).Returns(EventoData ?? string.Empty);
        _mockFAgenda.Setup(f => f.FFuncionario).Returns(Funcionario ?? 0);
        _mockFAgenda.Setup(f => f.FData).Returns(Data ?? string.Empty);
        _mockFAgenda.Setup(f => f.FEventoPrazo).Returns(EventoPrazo ?? 0);
        _mockFAgenda.Setup(f => f.FHora).Returns(Hora ?? string.Empty);
        _mockFAgenda.Setup(f => f.FCompromisso).Returns(Compromisso ?? string.Empty);
        _mockFAgenda.Setup(f => f.FTipoCompromisso).Returns(TipoCompromisso ?? 0);
        _mockFAgenda.Setup(f => f.FCliente).Returns(Cliente ?? 0);
        _mockFAgenda.Setup(f => f.FLiberado).Returns(Liberado ?? false);
        _mockFAgenda.Setup(f => f.FImportante).Returns(Importante ?? false);
        _mockFAgenda.Setup(f => f.FConcluido).Returns(Concluido ?? false);
        _mockFAgenda.Setup(f => f.FArea).Returns(Area ?? 0);
        _mockFAgenda.Setup(f => f.FJustica).Returns(Justica ?? 0);
        _mockFAgenda.Setup(f => f.FProcesso).Returns(Processo ?? 0);
        _mockFAgenda.Setup(f => f.FIDHistorico).Returns(IDHistorico ?? 0);
        _mockFAgenda.Setup(f => f.FIDInsProcesso).Returns(IDInsProcesso ?? 0);
        _mockFAgenda.Setup(f => f.FUsuario).Returns(Usuario ?? 0);
        _mockFAgenda.Setup(f => f.FPreposto).Returns(Preposto ?? 0);
        _mockFAgenda.Setup(f => f.FQuemID).Returns(QuemID ?? 0);
        _mockFAgenda.Setup(f => f.FQuemCodigo).Returns(QuemCodigo ?? 0);
        _mockFAgenda.Setup(f => f.FStatus).Returns(Status ?? string.Empty);
        _mockFAgenda.Setup(f => f.FValor).Returns(Valor ?? 0m);
        _mockFAgenda.Setup(f => f.FDecisao).Returns(Decisao ?? string.Empty);
        _mockFAgenda.Setup(f => f.FSempre).Returns(Sempre ?? 0);
        _mockFAgenda.Setup(f => f.FPrazoDias).Returns(PrazoDias ?? 0);
        _mockFAgenda.Setup(f => f.FProtocoloIntegrado).Returns(ProtocoloIntegrado ?? 0);
        _mockFAgenda.Setup(f => f.FDataInicioPrazo).Returns(DataInicioPrazo ?? string.Empty);
        _mockFAgenda.Setup(f => f.FUsuarioCiente).Returns(UsuarioCiente ?? false);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFAgendaFactory>();
        // Act
        var agendaWhere = new AgendaWhere(mockFactory.Object);
        // Assert
        agendaWhere.Should().NotBeNull();
        agendaWhere.Should().BeAssignableTo<IAgendaWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFAgendaFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new AgendaWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnAgendaResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFAgenda();
        _mockAgendaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAgenda.Object);
        // Act
        var result = _agendaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.IDCOB.Should().Be(1);
        result.ClienteAvisado.Should().Be(false);
        result.RevisarP2.Should().Be(true);
        result.IDNE.Should().Be(1);
        result.Cidade.Should().Be(1);
        result.Oculto.Should().Be(1);
        result.CartaPrecatoria.Should().Be(1);
        result.Revisar.Should().Be(false);
        result.HrFinal.Should().Be("27/05/2022");
        result.Advogado.Should().Be(1);
        result.EventoGerador.Should().Be(1);
        result.EventoData.Should().Be("24/04/1975");
        result.Funcionario.Should().Be(1);
        result.Data.Should().Be("27/05/2022");
        result.EventoPrazo.Should().Be(1);
        result.Hora.Should().Be("27/05/2022");
        result.Compromisso.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.TipoCompromisso.Should().Be(1);
        result.Cliente.Should().Be(1);
        result.Liberado.Should().Be(true);
        result.Importante.Should().Be(false);
        result.Concluido.Should().Be(true);
        result.Area.Should().Be(1);
        result.Justica.Should().Be(1);
        result.Processo.Should().Be(1);
        result.IDHistorico.Should().Be(1);
        result.IDInsProcesso.Should().Be(1);
        result.Usuario.Should().Be(1);
        result.Preposto.Should().Be(1);
        result.QuemID.Should().Be(1);
        result.QuemCodigo.Should().Be(1);
        result.Status.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.Valor.Should().Be(1m);
        result.Decisao.Should().Be
        result.Sempre.Should().Be(1);
        result.PrazoDias.Should().Be(1);
        result.ProtocoloIntegrado.Should().Be(1);
        result.DataInicioPrazo.Should().Be("24/04/1975");
        result.UsuarioCiente.Should().Be(false);
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFAgenda(IDCOB: null, ClienteAvisado: null, RevisarP2: null, IDNE: null, Cidade: null, Oculto: null, CartaPrecatoria: null, Revisar: null, HrFinal: null, Advogado: null, EventoGerador: null, EventoData: null, Funcionario: null, Data: null, EventoPrazo: null, Hora: null, Compromisso: null, TipoCompromisso: null, Cliente: null, Liberado: null, Importante: null, Concluido: null, Area: null, Justica: null, Processo: null, IDHistorico: null, IDInsProcesso: null, Usuario: null, Preposto: null, QuemID: null, QuemCodigo: null, Status: null, Valor: null, Decisao: null, Sempre: null, PrazoDias: null, ProtocoloIntegrado: null, DataInicioPrazo: null, UsuarioCiente: null);
        _mockAgendaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAgenda.Object);
        // Act
        var result = _agendaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.IDCOB.Should().Be(0);
        result.ClienteAvisado.Should().Be(false);
        result.RevisarP2.Should().Be(false);
        result.IDNE.Should().Be(0);
        result.Cidade.Should().Be(0);
        result.Oculto.Should().Be(0);
        result.CartaPrecatoria.Should().Be(0);
        result.Revisar.Should().Be(false);
        result.HrFinal.Should().Be(string.Empty);
        result.Advogado.Should().Be(0);
        result.EventoGerador.Should().Be(0);
        result.EventoData.Should().Be(string.Empty);
        result.Funcionario.Should().Be(0);
        result.Data.Should().Be(string.Empty);
        result.EventoPrazo.Should().Be(0);
        result.Hora.Should().Be(string.Empty);
        result.Compromisso.Should().Be(string.Empty);
        result.TipoCompromisso.Should().Be(0);
        result.Cliente.Should().Be(0);
        result.Liberado.Should().Be(false);
        result.Importante.Should().Be(false);
        result.Concluido.Should().Be(false);
        result.Area.Should().Be(0);
        result.Justica.Should().Be(0);
        result.Processo.Should().Be(0);
        result.IDHistorico.Should().Be(0);
        result.IDInsProcesso.Should().Be(0);
        result.Usuario.Should().Be(0);
        result.Preposto.Should().Be(0);
        result.QuemID.Should().Be(0);
        result.QuemCodigo.Should().Be(0);
        result.Status.Should().Be(string.Empty);
        result.Valor.Should().Be(0m);
        result.Decisao.Should().Be(string.Empty);
        result.Sempre.Should().Be(0);
        result.PrazoDias.Should().Be(0);
        result.ProtocoloIntegrado.Should().Be(0);
        result.DataInicioPrazo.Should().Be(string.Empty);
        result.UsuarioCiente.Should().Be(false);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFAgenda();
        _mockAgendaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFAgenda.Object);
        // Act
        var result = _agendaWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockAgendaFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFAgenda();
        _mockAgendaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAgenda.Object);
        // Act
        var result = _agendaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockAgendaFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFAgenda();
        _mockAgendaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAgenda.Object);
        // Act
        var result = _agendaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockAgendaFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFAgenda();
        _mockAgendaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAgenda.Object);
        // Act
        _agendaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockAgendaFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFAgendaInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFAgenda.Setup(f => f.Dispose());
        SetupMockFAgenda();
        _mockAgendaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAgenda.Object);
        // Act
        _agendaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFAgenda.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockAgendaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _agendaWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFAgenda(IDCOB: 1, ClienteAvisado: false, RevisarP2: true, IDNE: 1, Cidade: 1, Oculto: 1, CartaPrecatoria: 1, Revisar: false, HrFinal: "27/05/2022", Advogado: 1, EventoGerador: 1, EventoData: "24/04/1975", Funcionario: 1, Data: "27/05/2022", EventoPrazo: 1, Hora: "27/05/2022", Compromisso: "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", TipoCompromisso: 1, Cliente: 1, Liberado: true, Importante: false, Concluido: true, Area: 1, Justica: 1, Processo: 1, IDHistorico: 1, IDInsProcesso: 1, Usuario: 1, Preposto: 1, QuemID: 1, QuemCodigo: 1, Status: "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", Valor: 1m, Decisaoempre: 1, PrazoDias: 1, ProtocoloIntegrado: 1, DataInicioPrazo: "24/04/1975", UsuarioCiente: false);
        _mockAgendaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAgenda.Object);
        // Act
        var result = _agendaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.IDCOB.Should().Be(1);
        result.ClienteAvisado.Should().Be(false);
        result.RevisarP2.Should().Be(true);
        result.IDNE.Should().Be(1);
        result.Cidade.Should().Be(1);
        result.Oculto.Should().Be(1);
        result.CartaPrecatoria.Should().Be(1);
        result.Revisar.Should().Be(false);
        result.HrFinal.Should().Be("27/05/2022");
        result.Advogado.Should().Be(1);
        result.EventoGerador.Should().Be(1);
        result.EventoData.Should().Be("24/04/1975");
        result.Funcionario.Should().Be(1);
        result.Data.Should().Be("27/05/2022");
        result.EventoPrazo.Should().Be(1);
        result.Hora.Should().Be("27/05/2022");
        result.Compromisso.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.TipoCompromisso.Should().Be(1);
        result.Cliente.Should().Be(1);
        result.Liberado.Should().Be(true);
        result.Importante.Should().Be(false);
        result.Concluido.Should().Be(true);
        result.Area.Should().Be(1);
        result.Justica.Should().Be(1);
        result.Processo.Should().Be(1);
        result.IDHistorico.Should().Be(1);
        result.IDInsProcesso.Should().Be(1);
        result.Usuario.Should().Be(1);
        result.Preposto.Should().Be(1);
        result.QuemID.Should().Be(1);
        result.QuemCodigo.Should().Be(1);
        result.Status.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.Valor.Should().Be(1m);
        result.Decisao.Should().Be
        result.Sempre.Should().Be(1);
        result.PrazoDias.Should().Be(1);
        result.ProtocoloIntegrado.Should().Be(1);
        result.DataInicioPrazo.Should().Be("24/04/1975");
        result.UsuarioCiente.Should().Be(false);
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "Data = @{DBAgendaDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBAgendaDicInfo.CampoNome}", "27/05/2022"),
        };
        SetupMockFAgenda();
        _mockAgendaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAgenda.Object);
        // Act
        _agendaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockAgendaFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBAgendaDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#region DateTime Tests
    [Fact]
    public void Read_WithValidDateEventoDataFields_ShouldParseAndSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var testDate = "31/12/2024";
        SetupMockFAgenda(EventoData: testDate);
        _mockAgendaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAgenda.Object);
        // Act
        var result = _agendaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.EventoData.Should().Be("31/12/2024");
    }

    [Fact]
    public void Read_WithInvalidDateEventoDataStrings_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFAgenda(EventoData: "invalid-date");
        _mockAgendaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAgenda.Object);
        // Act
        var result = _agendaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.EventoData.Should().Be("");
    }

    [Fact]
    public void Read_WithNullDateEventoDataFields_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFAgenda(EventoData: null);
        _mockAgendaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAgenda.Object);
        // Act
        var result = _agendaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.EventoData.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("31/12/2024")]
    [InlineData("2025/01/01T23:59:59")]
    [InlineData("2000-02-29")] // Leap year
    [InlineData("2025/01/02T14:30:45.123")]
    public void Read_WithValidDateEventoDataFormats_ShouldParseCorrectly(string dateString)
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedDate = DateTime.Parse(dateString);
        SetupMockFAgenda(EventoData: dateString);
        _mockAgendaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAgenda.Object);
        // Act
        var result = _agendaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.EventoData.Should().Be(dateString);
    }

    [Fact]
    public void Read_WithValidDateDataInicioPrazoFields_ShouldParseAndSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var testDate = "01/01/2025";
        SetupMockFAgenda(DataInicioPrazo: testDate);
        _mockAgendaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAgenda.Object);
        // Act
        var result = _agendaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataInicioPrazo.Should().Be("01/01/2025");
    }

    [Fact]
    public void Read_WithInvalidDateDataInicioPrazoStrings_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFAgenda(DataInicioPrazo: "invalid-date");
        _mockAgendaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAgenda.Object);
        // Act
        var result = _agendaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataInicioPrazo.Should().Be("");
    }

    [Fact]
    public void Read_WithNullDateDataInicioPrazoFields_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFAgenda(DataInicioPrazo: null);
        _mockAgendaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAgenda.Object);
        // Act
        var result = _agendaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataInicioPrazo.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("01/01/2025")]
    [InlineData("2025/01/02T23:59:59")]
    [InlineData("2000-02-29")] // Leap year
    [InlineData("2025/01/03T14:30:45.123")]
    public void Read_WithValidDateDataInicioPrazoFormats_ShouldParseCorrectly(string dateString)
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedDate = DateTime.Parse(dateString);
        SetupMockFAgenda(DataInicioPrazo: dateString);
        _mockAgendaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAgenda.Object);
        // Act
        var result = _agendaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataInicioPrazo.Should().Be(dateString);
    }
#endregion
#endregion
}