// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class BensMateriaisWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFBensMateriaisFactory> _mockBensMateriaisFactory;
    private readonly Mock<FBensMateriais> _mockFBensMateriais;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly BensMateriaisWhere _bensmateriaisWhere;
    public BensMateriaisWhereTests()
    {
        _mockBensMateriaisFactory = new Mock<IFBensMateriaisFactory>();
        _mockFBensMateriais = new Mock<FBensMateriais>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _bensmateriaisWhere = new BensMateriaisWhere(_mockBensMateriaisFactory.Object);
    }

    public void Dispose()
    {
        _mockBensMateriaisFactory?.Reset();
        _mockFBensMateriais?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
        };
    }

    private void SetupMockFBensMateriais(string? Nome = "João", int? BensClassificacao = 1, string? DataCompra = "24/04/1975", string? DataFimDaGarantia = "24/04/1975", string? NFNRO = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", int? Fornecedor = 1, decimal? ValorBem = 0m, string? NroSerieProduto = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string? Comprador = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", int? Cidade = 1, bool? GarantiaLoja = false, string? DataTerminoDaGarantiaDaLoja = "24/04/1975", string? Observacoes = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string? NomeVendedor = "João")
    {
        _mockFBensMateriais.Setup(f => f.FNome).Returns(Nome ?? string.Empty);
        _mockFBensMateriais.Setup(f => f.FBensClassificacao).Returns(BensClassificacao ?? 0);
        _mockFBensMateriais.Setup(f => f.FDataCompra).Returns(DataCompra ?? string.Empty);
        _mockFBensMateriais.Setup(f => f.FDataFimDaGarantia).Returns(DataFimDaGarantia ?? string.Empty);
        _mockFBensMateriais.Setup(f => f.FNFNRO).Returns(NFNRO ?? string.Empty);
        _mockFBensMateriais.Setup(f => f.FFornecedor).Returns(Fornecedor ?? 0);
        _mockFBensMateriais.Setup(f => f.FValorBem).Returns(ValorBem ?? 0m);
        _mockFBensMateriais.Setup(f => f.FNroSerieProduto).Returns(NroSerieProduto ?? string.Empty);
        _mockFBensMateriais.Setup(f => f.FComprador).Returns(Comprador ?? string.Empty);
        _mockFBensMateriais.Setup(f => f.FCidade).Returns(Cidade ?? 0);
        _mockFBensMateriais.Setup(f => f.FGarantiaLoja).Returns(GarantiaLoja ?? false);
        _mockFBensMateriais.Setup(f => f.FDataTerminoDaGarantiaDaLoja).Returns(DataTerminoDaGarantiaDaLoja ?? string.Empty);
        _mockFBensMateriais.Setup(f => f.FObservacoes).Returns(Observacoes ?? string.Empty);
        _mockFBensMateriais.Setup(f => f.FNomeVendedor).Returns(NomeVendedor ?? string.Empty);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFBensMateriaisFactory>();
        // Act
        var bensmateriaisWhere = new BensMateriaisWhere(mockFactory.Object);
        // Assert
        bensmateriaisWhere.Should().NotBeNull();
        bensmateriaisWhere.Should().BeAssignableTo<IBensMateriaisWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFBensMateriaisFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new BensMateriaisWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnBensMateriaisResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFBensMateriais();
        _mockBensMateriaisFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFBensMateriais.Object);
        // Act
        var result = _bensmateriaisWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.Nome.Should().Be("João");
        result.BensClassificacao.Should().Be(1);
        result.DataCompra.Should().Be("24/04/1975");
        result.DataFimDaGarantia.Should().Be("24/04/1975");
        result.NFNRO.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Fornecedor.Should().Be(1);
        result.ValorBem.Should().Be(0m);
        result.NroSerieProduto.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Comprador.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Cidade.Should().Be(1);
        result.GarantiaLoja.Should().Be(false);
        result.DataTerminoDaGarantiaDaLoja.Should().Be("24/04/1975");
        result.Observacoes.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.NomeVendedor.Should().Be("João");
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFBensMateriais(Nome: null, BensClassificacao: null, DataCompra: null, DataFimDaGarantia: null, NFNRO: null, Fornecedor: null, ValorBem: null, NroSerieProduto: null, Comprador: null, Cidade: null, GarantiaLoja: null, DataTerminoDaGarantiaDaLoja: null, Observacoes: null, NomeVendedor: null);
        _mockBensMateriaisFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFBensMateriais.Object);
        // Act
        var result = _bensmateriaisWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Nome.Should().Be(string.Empty);
        result.BensClassificacao.Should().Be(0);
        result.DataCompra.Should().Be(string.Empty);
        result.DataFimDaGarantia.Should().Be(string.Empty);
        result.NFNRO.Should().Be(string.Empty);
        result.Fornecedor.Should().Be(0);
        result.ValorBem.Should().Be(0m);
        result.NroSerieProduto.Should().Be(string.Empty);
        result.Comprador.Should().Be(string.Empty);
        result.Cidade.Should().Be(0);
        result.GarantiaLoja.Should().Be(false);
        result.DataTerminoDaGarantiaDaLoja.Should().Be(string.Empty);
        result.Observacoes.Should().Be(string.Empty);
        result.NomeVendedor.Should().Be(string.Empty);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFBensMateriais();
        _mockBensMateriaisFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFBensMateriais.Object);
        // Act
        var result = _bensmateriaisWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockBensMateriaisFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFBensMateriais();
        _mockBensMateriaisFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFBensMateriais.Object);
        // Act
        var result = _bensmateriaisWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockBensMateriaisFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFBensMateriais();
        _mockBensMateriaisFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFBensMateriais.Object);
        // Act
        var result = _bensmateriaisWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockBensMateriaisFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFBensMateriais();
        _mockBensMateriaisFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFBensMateriais.Object);
        // Act
        _bensmateriaisWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockBensMateriaisFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFBensMateriaisInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFBensMateriais.Setup(f => f.Dispose());
        SetupMockFBensMateriais();
        _mockBensMateriaisFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFBensMateriais.Object);
        // Act
        _bensmateriaisWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFBensMateriais.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockBensMateriaisFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _bensmateriaisWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFBensMateriais(Nome: "João", BensClassificacao: 1, DataCompra: "24/04/1975", DataFimDaGarantia: "24/04/1975", NFNRO: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", Fornecedor: 1, ValorBem: 0m, NroSerieProduto: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", Comprador: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", Cidade: 1, GarantiaLoja: false, DataTerminoDaGarantiaDaLoja: "24/04/1975", Observacoes: "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", NomeVendedor: "João");
        _mockBensMateriaisFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFBensMateriais.Object);
        // Act
        var result = _bensmateriaisWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.Nome.Should().Be("João");
        result.BensClassificacao.Should().Be(1);
        result.DataCompra.Should().Be("24/04/1975");
        result.DataFimDaGarantia.Should().Be("24/04/1975");
        result.NFNRO.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Fornecedor.Should().Be(1);
        result.ValorBem.Should().Be(0m);
        result.NroSerieProduto.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Comprador.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Cidade.Should().Be(1);
        result.GarantiaLoja.Should().Be(false);
        result.DataTerminoDaGarantiaDaLoja.Should().Be("24/04/1975");
        result.Observacoes.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.NomeVendedor.Should().Be("João");
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "Nome = @{DBBensMateriaisDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBBensMateriaisDicInfo.CampoNome}", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"),
        };
        SetupMockFBensMateriais();
        _mockBensMateriaisFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFBensMateriais.Object);
        // Act
        _bensmateriaisWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockBensMateriaisFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBBensMateriaisDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#region DateTime Tests
    [Fact]
    public void Read_WithValidDateDataCompraFields_ShouldParseAndSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var testDate = "31/12/2024";
        SetupMockFBensMateriais(DataCompra: testDate);
        _mockBensMateriaisFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFBensMateriais.Object);
        // Act
        var result = _bensmateriaisWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataCompra.Should().Be("31/12/2024");
    }

    [Fact]
    public void Read_WithInvalidDateDataCompraStrings_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFBensMateriais(DataCompra: "invalid-date");
        _mockBensMateriaisFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFBensMateriais.Object);
        // Act
        var result = _bensmateriaisWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataCompra.Should().Be("");
    }

    [Fact]
    public void Read_WithNullDateDataCompraFields_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFBensMateriais(DataCompra: null);
        _mockBensMateriaisFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFBensMateriais.Object);
        // Act
        var result = _bensmateriaisWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataCompra.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("31/12/2024")]
    [InlineData("2025/01/01T23:59:59")]
    [InlineData("2000-02-29")] // Leap year
    [InlineData("2025/01/02T14:30:45.123")]
    public void Read_WithValidDateDataCompraFormats_ShouldParseCorrectly(string dateString)
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedDate = DateTime.Parse(dateString);
        SetupMockFBensMateriais(DataCompra: dateString);
        _mockBensMateriaisFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFBensMateriais.Object);
        // Act
        var result = _bensmateriaisWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataCompra.Should().Be(dateString);
    }

    [Fact]
    public void Read_WithValidDateDataFimDaGarantiaFields_ShouldParseAndSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var testDate = "01/01/2025";
        SetupMockFBensMateriais(DataFimDaGarantia: testDate);
        _mockBensMateriaisFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFBensMateriais.Object);
        // Act
        var result = _bensmateriaisWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataFimDaGarantia.Should().Be("01/01/2025");
    }

    [Fact]
    public void Read_WithInvalidDateDataFimDaGarantiaStrings_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFBensMateriais(DataFimDaGarantia: "invalid-date");
        _mockBensMateriaisFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFBensMateriais.Object);
        // Act
        var result = _bensmateriaisWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataFimDaGarantia.Should().Be("");
    }

    [Fact]
    public void Read_WithNullDateDataFimDaGarantiaFields_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFBensMateriais(DataFimDaGarantia: null);
        _mockBensMateriaisFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFBensMateriais.Object);
        // Act
        var result = _bensmateriaisWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataFimDaGarantia.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("01/01/2025")]
    [InlineData("2025/01/02T23:59:59")]
    [InlineData("2000-02-29")] // Leap year
    [InlineData("2025/01/03T14:30:45.123")]
    public void Read_WithValidDateDataFimDaGarantiaFormats_ShouldParseCorrectly(string dateString)
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedDate = DateTime.Parse(dateString);
        SetupMockFBensMateriais(DataFimDaGarantia: dateString);
        _mockBensMateriaisFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFBensMateriais.Object);
        // Act
        var result = _bensmateriaisWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataFimDaGarantia.Should().Be(dateString);
    }

    [Fact]
    public void Read_WithValidDateDataTerminoDaGarantiaDaLojaFields_ShouldParseAndSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var testDate = "02/01/2025";
        SetupMockFBensMateriais(DataTerminoDaGarantiaDaLoja: testDate);
        _mockBensMateriaisFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFBensMateriais.Object);
        // Act
        var result = _bensmateriaisWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataTerminoDaGarantiaDaLoja.Should().Be("02/01/2025");
    }

    [Fact]
    public void Read_WithInvalidDateDataTerminoDaGarantiaDaLojaStrings_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFBensMateriais(DataTerminoDaGarantiaDaLoja: "invalid-date");
        _mockBensMateriaisFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFBensMateriais.Object);
        // Act
        var result = _bensmateriaisWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataTerminoDaGarantiaDaLoja.Should().Be("");
    }

    [Fact]
    public void Read_WithNullDateDataTerminoDaGarantiaDaLojaFields_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFBensMateriais(DataTerminoDaGarantiaDaLoja: null);
        _mockBensMateriaisFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFBensMateriais.Object);
        // Act
        var result = _bensmateriaisWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataTerminoDaGarantiaDaLoja.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("02/01/2025")]
    [InlineData("2025/01/03T23:59:59")]
    [InlineData("2000-02-29")] // Leap year
    [InlineData("2025/01/04T14:30:45.123")]
    public void Read_WithValidDateDataTerminoDaGarantiaDaLojaFormats_ShouldParseCorrectly(string dateString)
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedDate = DateTime.Parse(dateString);
        SetupMockFBensMateriais(DataTerminoDaGarantiaDaLoja: dateString);
        _mockBensMateriaisFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFBensMateriais.Object);
        // Act
        var result = _bensmateriaisWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataTerminoDaGarantiaDaLoja.Should().Be(dateString);
    }
#endregion
#endregion
}