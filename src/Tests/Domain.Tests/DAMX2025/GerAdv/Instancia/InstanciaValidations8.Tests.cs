// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class InstanciaValidationTests : IDisposable
{
    private readonly InstanciaValidation _validation;
    private readonly Mock<IInstanciaService> _mockInstanciaService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IAcaoReader> _mockAcaoReader;
    private readonly Mock<IForoReader> _mockForoReader;
    private readonly Mock<ITipoRecursoReader> _mockTipoRecursoReader;
    private readonly InstanciaService _service;
    private readonly string _validUri = "test-uri";
    public InstanciaValidationTests()
    {
        _validation = new InstanciaValidation();
        _mockInstanciaService = new Mock<IInstanciaService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockAcaoReader = new Mock<IAcaoReader>();
        _mockForoReader = new Mock<IForoReader>();
        _mockTipoRecursoReader = new Mock<ITipoRecursoReader>();
    }

#region Class Structure Tests
    [Fact]
    public void InstanciaValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IInstanciaValidation>();
    }

    [Fact]
    public void InstanciaValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(InstanciaValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void InstanciaValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(InstanciaValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private static Models.Instancia CreateValidInstancia()
    {
        return new Models.Instancia
        {
            Id = 1,
            LiminarPedida = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Objeto = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            StatusResultado = 0,
            LiminarPendente = false,
            InterpusemosRecurso = true,
            LiminarConcedida = false,
            LiminarNegada = true,
            Processo = 0,
            Data = "27/05/2022",
            LiminarParcial = false,
            LiminarResultado = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            NroProcesso = "AAAAAAAAAAAAAAAAAAAAAAA",
            Divisao = 0,
            LiminarCliente = true,
            Comarca = 0,
            SubDivisao = 0,
            Principal = false,
            Acao = 0,
            Foro = 0,
            TipoRecurso = 0,
            ZKey = "AAAAAAAAAAAAAAAAAAAAAAA",
            ZKeyQuem = 0,
            ZKeyQuando = "24/04/1975",
            NroAntigo = "AAAAAAAAAAAAAAAAAAAAAAA",
            AccessCode = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Julgador = 0,
            ZKeyIA = "AAAAAAAAAAAAAAAAAAAAAAA"
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockInstanciaService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterInstancia>(), It.IsAny<string>())).ReturnsAsync([]);
        // Setup other mocks but don't override the Instancias service mock
        _ = _mockAcaoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new AcaoResponse { Id = id }));
        _ = _mockForoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new ForoResponse { Id = id }));
        _ = _mockTipoRecursoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new TipoRecursoResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockInstanciaService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterInstancia>(), It.IsAny<string>())).ReturnsAsync([]);
        // Setup other mocks but don't override the Instancias service mock
        _ = _mockAcaoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new AcaoResponse { Id = 0 }));
        _ = _mockForoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new ForoResponse { Id = 0 }));
        _ = _mockTipoRecursoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new TipoRecursoResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var instancia = new Models.Instancia
        {
            Id = 1,
            LiminarPedida = null,
            Objeto = null,
            LiminarPendente = false,
            InterpusemosRecurso = true,
            LiminarConcedida = false,
            LiminarNegada = true,
            Data = null,
            LiminarParcial = false,
            LiminarResultado = null,
            NroProcesso = "AAAAAAAAAAAAAAAAAAAAAAA",
            LiminarCliente = true,
            Principal = false,
            ZKey = null,
            ZKeyQuando = null,
            NroAntigo = null,
            AccessCode = null,
            ZKeyIA = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(instancia, _mockInstanciaService.Object, _mockAcaoReader.Object, _mockForoReader.Object, _mockTipoRecursoReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockInstanciaService.Object, _mockAcaoReader.Object, _mockForoReader.Object, _mockTipoRecursoReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region ZKeyQuando Validation Tests
    [Theory]
    [InlineData("01/01/1899")]
    [InlineData("31/12/1899")]
    public async Task ValidateReg_WithZKeyQuandoBeforeMinDate_ShouldThrowSGValidationException(string invalidDate)
    {
        // Arrange
        var instancia = CreateValidInstancia();
        instancia.ZKeyQuando = invalidDate;
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(instancia, _mockInstanciaService.Object, _mockAcaoReader.Object, _mockForoReader.Object, _mockTipoRecursoReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("01/01/1900.");
    }

    [Fact]
    public async Task ValidateReg_WithValidZKeyQuando_ShouldPass()
    {
        // Arrange
        var instancia = CreateValidInstancia();
        instancia.ZKeyQuando = "01/01/1990";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(instancia, _mockInstanciaService.Object, _mockAcaoReader.Object, _mockForoReader.Object, _mockTipoRecursoReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullZKeyQuando_ShouldPass()
    {
        // Arrange
        var instancia = CreateValidInstancia();
        instancia.ZKeyQuando = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(instancia, _mockInstanciaService.Object, _mockAcaoReader.Object, _mockForoReader.Object, _mockTipoRecursoReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithInvalidDateZKeyQuandoFormat_ShouldPass()
    {
        // Arrange
        var instancia = CreateValidInstancia();
        instancia.ZKeyQuando = "invalid-date";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(instancia, _mockInstanciaService.Object, _mockAcaoReader.Object, _mockForoReader.Object, _mockTipoRecursoReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue(); // Invalid format is ignored, not validated
    }

    [Fact]
    public async Task ValidateReg_WithEmptyZKeyQuando_ShouldPass()
    {
        // Arrange
        var instancia = CreateValidInstancia();
        instancia.ZKeyQuando = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(instancia, _mockInstanciaService.Object, _mockAcaoReader.Object, _mockForoReader.Object, _mockTipoRecursoReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region Foreign Key Validation Tests - Acao
    [Fact]
    public async Task ValidateReg_WithInvalidAcao_ShouldThrowSGValidationException()
    {
        // Arrange
        var instancia = CreateValidInstancia();
        instancia.Acao = 999;
        _mockAcaoReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.AcaoResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(instancia, _mockInstanciaService.Object, _mockAcaoReader.Object, _mockForoReader.Object, _mockTipoRecursoReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedAcaoId_ShouldThrowSGValidationException()
    {
        // Arrange
        var instancia = CreateValidInstancia();
        instancia.Acao = 999;
        var reg888 = new Models.Response.AcaoResponse
        {
            Id = 888
        }; // Different ID
        _mockAcaoReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(instancia, _mockInstanciaService.Object, _mockAcaoReader.Object, _mockForoReader.Object, _mockTipoRecursoReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidAcao_ShouldPass()
    {
        // Arrange
        var instancia = CreateValidInstancia();
        instancia.Acao = 123;
        var reg123 = new Models.Response.AcaoResponse
        {
            Id = 123
        };
        _mockAcaoReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(instancia, _mockInstanciaService.Object, _mockAcaoReader.Object, _mockForoReader.Object, _mockTipoRecursoReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyAcao_ShouldPass()
    {
        // Arrange
        var instancia = CreateValidInstancia();
        instancia.Acao = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(instancia, _mockInstanciaService.Object, _mockAcaoReader.Object, _mockForoReader.Object, _mockTipoRecursoReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockAcaoReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - Foro
    [Fact]
    public async Task ValidateReg_WithInvalidForo_ShouldThrowSGValidationException()
    {
        // Arrange
        var instancia = CreateValidInstancia();
        instancia.Foro = 999;
        _mockForoReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.ForoResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(instancia, _mockInstanciaService.Object, _mockAcaoReader.Object, _mockForoReader.Object, _mockTipoRecursoReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedForoId_ShouldThrowSGValidationException()
    {
        // Arrange
        var instancia = CreateValidInstancia();
        instancia.Foro = 999;
        var reg888 = new Models.Response.ForoResponse
        {
            Id = 888
        }; // Different ID
        _mockForoReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(instancia, _mockInstanciaService.Object, _mockAcaoReader.Object, _mockForoReader.Object, _mockTipoRecursoReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidForo_ShouldPass()
    {
        // Arrange
        var instancia = CreateValidInstancia();
        instancia.Foro = 123;
        var reg123 = new Models.Response.ForoResponse
        {
            Id = 123
        };
        _mockForoReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(instancia, _mockInstanciaService.Object, _mockAcaoReader.Object, _mockForoReader.Object, _mockTipoRecursoReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyForo_ShouldPass()
    {
        // Arrange
        var instancia = CreateValidInstancia();
        instancia.Foro = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(instancia, _mockInstanciaService.Object, _mockAcaoReader.Object, _mockForoReader.Object, _mockTipoRecursoReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockForoReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - TipoRecurso
    [Fact]
    public async Task ValidateReg_WithInvalidTipoRecurso_ShouldThrowSGValidationException()
    {
        // Arrange
        var instancia = CreateValidInstancia();
        instancia.TipoRecurso = 999;
        _mockTipoRecursoReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.TipoRecursoResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(instancia, _mockInstanciaService.Object, _mockAcaoReader.Object, _mockForoReader.Object, _mockTipoRecursoReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedTipoRecursoId_ShouldThrowSGValidationException()
    {
        // Arrange
        var instancia = CreateValidInstancia();
        instancia.TipoRecurso = 999;
        var reg888 = new Models.Response.TipoRecursoResponse
        {
            Id = 888
        }; // Different ID
        _mockTipoRecursoReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(instancia, _mockInstanciaService.Object, _mockAcaoReader.Object, _mockForoReader.Object, _mockTipoRecursoReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidTipoRecurso_ShouldPass()
    {
        // Arrange
        var instancia = CreateValidInstancia();
        instancia.TipoRecurso = 123;
        var reg123 = new Models.Response.TipoRecursoResponse
        {
            Id = 123
        };
        _mockTipoRecursoReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(instancia, _mockInstanciaService.Object, _mockAcaoReader.Object, _mockForoReader.Object, _mockTipoRecursoReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyTipoRecurso_ShouldPass()
    {
        // Arrange
        var instancia = CreateValidInstancia();
        instancia.TipoRecurso = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(instancia, _mockInstanciaService.Object, _mockAcaoReader.Object, _mockForoReader.Object, _mockTipoRecursoReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockTipoRecursoReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}