// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
/// <summary>
/// Comprehensive unit tests for ConfigureUpdateFields and ConfigureAuditorFields methods in DBProValores class
/// These methods are critical for database update operations and auditing functionality
/// Tests both synchronous and asynchronous Update methods
/// </summary>
public class DBProValoresConfigureMethodsTests : IDisposable
{
    private readonly DBProValores _provalores;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBProValoresConfigureMethodsTests()
    {
        _provalores = new DBProValores();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void ConfigureUpdateFields_WhenNoFieldsChanged_ShouldNotUpdateDatabase()
    {
        // Arrange
        ResetAllFieldFlags();
        _provalores.ID = 1; // Update scenario
        // Act
        var result = _provalores.Update(_mockConnection.Object);
        // Assert - Should return 0 because no fields changed
        result.Should().Be(0);
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WhenNoFieldsChanged_ShouldNotUpdateDatabase()
    {
        // Arrange
        ResetAllFieldFlags();
        _provalores.ID = 1; // Update scenario
        // Act & Assert - For async, when no fields changed and it's an update, it should return 0 or throw exception
        try
        {
            var result = await _provalores.UpdateAsync(_mockConnection.Object);
            // If no exception is thrown, verify the result indicates no update was needed
            result.Should().Be(0, "When no fields changed in update scenario, should return 0");
        }
        catch (Exception ex)
        {
            // If exception is thrown due to mocked connection, that's also acceptable
            ex.Should().NotBeNull();
        }
    }

#region Helper Methods
    private void SetFieldFlag(string fieldName, bool value)
    {
        var field = typeof(DBProValores).GetField(fieldName, BindingFlags.NonPublic | BindingFlags.Instance);
        field?.SetValue(_provalores, value);
    }

    private void SetFieldValue(string fieldName, object? value)
    {
        var field = typeof(DBProValores).GetField(fieldName, BindingFlags.NonPublic | BindingFlags.Instance);
        try
        {
            field?.SetValue(_provalores, value);
        }
        catch
        {
            field?.SetValue(_provalores, Convert.ToDateTime(value));
        }
    }

    private void ResetAllFieldFlags()
    {
        var fieldFlags = new[]
        {
            "pFldFProcesso",
            "pFldFTipoValorProcesso",
            "pFldFIndice",
            "pFldFIgnorar",
            "pFldFData",
            "pFldFValorOriginal",
            "pFldFPercMulta",
            "pFldFValorMulta",
            "pFldFPercJuros",
            "pFldFValorOriginalCorrigidoIndice",
            "pFldFValorMultaCorrigido",
            "pFldFValorJurosCorrigido",
            "pFldFValorFinal",
            "pFldFDataUltimaCorrecao",
            "pFldFGuid",
        };
        foreach (var flag in fieldFlags)
        {
            SetFieldFlag(flag, false);
        }
    }

    private void SetAllFieldFlags(bool value)
    {
        var fieldFlags = new[]
        {
            "pFldFProcesso",
            "pFldFTipoValorProcesso",
            "pFldFIndice",
            "pFldFIgnorar",
            "pFldFData",
            "pFldFValorOriginal",
            "pFldFPercMulta",
            "pFldFValorMulta",
            "pFldFPercJuros",
            "pFldFValorOriginalCorrigidoIndice",
            "pFldFValorMultaCorrigido",
            "pFldFValorJurosCorrigido",
            "pFldFValorFinal",
            "pFldFDataUltimaCorrecao",
            "pFldFGuid",
        };
        foreach (var flag in fieldFlags)
        {
            SetFieldFlag(flag, value);
        }
    }

    private void SetAllFieldValues()
    {
        SetFieldValue("m_FProcesso", 123);
        SetFieldValue("m_FTipoValorProcesso", 123);
        SetFieldValue("m_FIndice", "AAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FIgnorar", false);
        SetFieldValue("m_FData", "27/05/2022");
        SetFieldValue("m_FValorOriginal", (decimal)101);
        SetFieldValue("m_FPercMulta", (decimal)102);
        SetFieldValue("m_FValorMulta", (decimal)103);
        SetFieldValue("m_FPercJuros", (decimal)104);
        SetFieldValue("m_FValorOriginalCorrigidoIndice", (decimal)105);
        SetFieldValue("m_FValorMultaCorrigido", (decimal)106);
        SetFieldValue("m_FValorJurosCorrigido", (decimal)107);
        SetFieldValue("m_FValorFinal", (decimal)108);
        SetFieldValue("m_FDataUltimaCorrecao", DateTime.Today.AddDays(7));
        SetFieldValue("m_FGuid", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

#endregion
#region Fields_All
    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithIndiceFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFIndice", true);
        SetFieldValue("m_FIndice", value);
        _provalores.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsIndice_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFIndice", true); // At least one field must change
        SetFieldValue("m_FIndice", "AAAAAAAAAAAAAAAAAA");
        _provalores.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsIndice_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFIndice", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FIndice", "AAAAAAAAAAAAAAAAAA");
        _provalores.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithIndiceFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFIndice", true);
        SetFieldValue("m_FIndice", value);
        _provalores.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _provalores.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsIndiceChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFIndice", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FIndice", "AAAAAAAAAAAAAAAAAA");
        _provalores.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _provalores.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncIndice_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFIndice", true);
        SetFieldValue("m_FIndice", "AAAAAAAAAAAAAAAAAA");
        _provalores.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _provalores.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncIndice_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFIndice", true);
        SetFieldValue("m_FIndice", "AAAAAAAAAAAAAAAAAA");
        _provalores.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _provalores.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertIndice_ShouldSetInsertAuditFields()
    {
        // Arrange
        _provalores.ID = 0; // Insert scenario
        _provalores.AuditorQuem = 5;
        SetFieldFlag("pFldFIndice", true); // At least one field must change
        SetFieldValue("m_FIndice", "AAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _provalores.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsIndice_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _provalores.ID = 123; // Update scenario
        _provalores.AuditorQuem = 7;
        SetFieldFlag("pFldFIndice", true); // At least one field must change
        SetFieldValue("m_FIndice", "AAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _provalores.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsIndice_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _provalores.ID = 0; // Insert scenario
        _provalores.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFIndice", true); // At least one field must change
        SetFieldValue("m_FIndice", "AAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _provalores.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsIndice_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _provalores.ID = 0; // Insert scenario
        _provalores.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFIndice", true); // At least one field must change
        SetFieldValue("m_FIndice", "AAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _provalores.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsIndice_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _provalores.ID = 0;
        _provalores.AuditorQuem = 10;
        SetFieldFlag("pFldFIndice", true); // At least one field must change
        SetFieldValue("m_FIndice", "AAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _provalores.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsIndice_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _provalores.ID = id;
        _provalores.AuditorQuem = 15;
        SetFieldFlag("pFldFIndice", true); // At least one field must change
        SetFieldValue("m_FIndice", "AAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _provalores.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncIndice_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _provalores.ID = 0; // Insert scenario
        _provalores.AuditorQuem = 5;
        SetFieldFlag("pFldFIndice", true); // At least one field must change
        SetFieldValue("m_FIndice", "AAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _provalores.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _provalores.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncIndice_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _provalores.ID = 0; // Insert scenario
        _provalores.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFIndice", true); // At least one field must change
        SetFieldValue("m_FIndice", "AAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _provalores.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _provalores.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsIndice_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _provalores.ID = 123;
        _provalores.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _provalores.FIndice.Should().Be("AAAAAAAAAAAAAAAAAA");
        _provalores.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsIndice_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _provalores.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _provalores.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFIndice", true);
        SetFieldValue("m_FIndice", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsIndice_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFIndice", true);
        SetFieldValue("m_FIndice", "");
        _provalores.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsIndice_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFIndice", true);
        SetFieldValue("m_FIndice", null);
        _provalores.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncIndice_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFIndice", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FIndice", "");
        SetFieldValue("m_FCompromisso", "");
        _provalores.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _provalores.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsIndice_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _provalores.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _provalores.FIndice.Should().Be("AAAAAAAAAAAAAAAAAA");
        _provalores.FProcesso.Should().Be(123);
    }

    [Fact]
    public void ConfigureUpdateFieldsData_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _provalores.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _provalores.FData.Should().Be("27/05/2022");
        _provalores.FProcesso.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithGuidFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGuid", true);
        SetFieldValue("m_FGuid", value);
        _provalores.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsGuid_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGuid", true); // At least one field must change
        SetFieldValue("m_FGuid", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _provalores.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsGuid_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGuid", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FGuid", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _provalores.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithGuidFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGuid", true);
        SetFieldValue("m_FGuid", value);
        _provalores.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _provalores.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsGuidChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGuid", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FGuid", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _provalores.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _provalores.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncGuid_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGuid", true);
        SetFieldValue("m_FGuid", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _provalores.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _provalores.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncGuid_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGuid", true);
        SetFieldValue("m_FGuid", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _provalores.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _provalores.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertGuid_ShouldSetInsertAuditFields()
    {
        // Arrange
        _provalores.ID = 0; // Insert scenario
        _provalores.AuditorQuem = 5;
        SetFieldFlag("pFldFGuid", true); // At least one field must change
        SetFieldValue("m_FGuid", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _provalores.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsGuid_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _provalores.ID = 123; // Update scenario
        _provalores.AuditorQuem = 7;
        SetFieldFlag("pFldFGuid", true); // At least one field must change
        SetFieldValue("m_FGuid", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _provalores.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsGuid_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _provalores.ID = 0; // Insert scenario
        _provalores.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFGuid", true); // At least one field must change
        SetFieldValue("m_FGuid", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _provalores.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsGuid_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _provalores.ID = 0; // Insert scenario
        _provalores.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFGuid", true); // At least one field must change
        SetFieldValue("m_FGuid", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _provalores.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsGuid_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _provalores.ID = 0;
        _provalores.AuditorQuem = 10;
        SetFieldFlag("pFldFGuid", true); // At least one field must change
        SetFieldValue("m_FGuid", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _provalores.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsGuid_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _provalores.ID = id;
        _provalores.AuditorQuem = 15;
        SetFieldFlag("pFldFGuid", true); // At least one field must change
        SetFieldValue("m_FGuid", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _provalores.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncGuid_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _provalores.ID = 0; // Insert scenario
        _provalores.AuditorQuem = 5;
        SetFieldFlag("pFldFGuid", true); // At least one field must change
        SetFieldValue("m_FGuid", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _provalores.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _provalores.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncGuid_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _provalores.ID = 0; // Insert scenario
        _provalores.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFGuid", true); // At least one field must change
        SetFieldValue("m_FGuid", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _provalores.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _provalores.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsGuid_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _provalores.ID = 123;
        _provalores.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _provalores.FGuid.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _provalores.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsGuid_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _provalores.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _provalores.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFGuid", true);
        SetFieldValue("m_FGuid", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsGuid_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGuid", true);
        SetFieldValue("m_FGuid", "");
        _provalores.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsGuid_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGuid", true);
        SetFieldValue("m_FGuid", null);
        _provalores.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncGuid_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGuid", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FGuid", "");
        SetFieldValue("m_FCompromisso", "");
        _provalores.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _provalores.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsGuid_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _provalores.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _provalores.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _provalores.FGuid.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _provalores.FProcesso.Should().Be(123);
    }

#endregion
    public virtual void Dispose()
    {
        _provalores?.Dispose();
    }
}