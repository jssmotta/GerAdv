// 100% auto-generated by Source Genesys Core
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming 1
public partial class DBEscritorios
{
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool pFldFGUID, pFldFCNPJ, pFldFCasa, pFldFParceria, pFldFNome, pFldFOAB, pFldFEndereco, pFldFCidade, pFldFBairro, pFldFCEP, pFldFFone, pFldFFax, pFldFSite, pFldFEMail, pFldFOBS, pFldFAdvResponsavel, pFldFSecretaria, pFldFInscEst, pFldFCorrespondente, pFldFTop, pFldFEtiqueta, pFldFBold;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected int m_FCidade;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected string? m_FGUID, m_FCNPJ, m_FNome, m_FOAB, m_FEndereco, m_FBairro, m_FCEP, m_FFone, m_FFax, m_FSite, m_FEMail, m_FOBS, m_FAdvResponsavel, m_FSecretaria, m_FInscEst;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool m_FCasa, m_FParceria, m_FCorrespondente, m_FTop, m_FEtiqueta, m_FBold;
    // Tracking Code: 20250503
    [StringLength(100, ErrorMessage = "A propriedade FGUID da tabela Escritorios deve ter no máximo 100 caracteres.")]
    public virtual string? FGUID
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FGUID ?? string.Empty;
        set
        {
            pFldFGUID = pFldFGUID || !(m_FGUID ?? string.Empty).Equals(value);
            if (pFldFGUID)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FGUID = trimmed.Length > 100 ? trimmed.AsSpan(0, 100).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(14, ErrorMessage = "A propriedade FCNPJ da tabela Escritorios deve ter no máximo 14 caracteres.")]
    public virtual string? FCNPJ
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCNPJ ?? string.Empty;
        set
        {
            pFldFCNPJ = pFldFCNPJ || !(m_FCNPJ ?? string.Empty).Equals(value);
            if (pFldFCNPJ)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FCNPJ = trimmed.Length > 14 ? trimmed.AsSpan(0, 14).ToString() : trimmed;
            }
        }
    }

    public virtual bool FCasa
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCasa;
        set
        {
            pFldFCasa = pFldFCasa || value != m_FCasa;
            if (pFldFCasa)
                m_FCasa = value;
        }
    }

    public virtual bool FParceria
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FParceria;
        set
        {
            pFldFParceria = pFldFParceria || value != m_FParceria;
            if (pFldFParceria)
                m_FParceria = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(50, ErrorMessage = "A propriedade FNome da tabela Escritorios deve ter no máximo 50 caracteres.")]
    public virtual string? FNome
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNome ?? string.Empty;
        set
        {
            pFldFNome = pFldFNome || !(m_FNome ?? string.Empty).Equals(value);
            if (pFldFNome)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FNome = trimmed.Length > 50 ? trimmed.AsSpan(0, 50).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(15, ErrorMessage = "A propriedade FOAB da tabela Escritorios deve ter no máximo 15 caracteres.")]
    public virtual string? FOAB
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FOAB ?? string.Empty;
        set
        {
            pFldFOAB = pFldFOAB || !(m_FOAB ?? string.Empty).Equals(value);
            if (pFldFOAB)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FOAB = trimmed.Length > 15 ? trimmed.AsSpan(0, 15).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(50, ErrorMessage = "A propriedade FEndereco da tabela Escritorios deve ter no máximo 50 caracteres.")]
    public virtual string? FEndereco
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEndereco ?? string.Empty;
        set
        {
            pFldFEndereco = pFldFEndereco || !(m_FEndereco ?? string.Empty).Equals(value);
            if (pFldFEndereco)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FEndereco = trimmed.Length > 50 ? trimmed.AsSpan(0, 50).ToString() : trimmed;
            }
        }
    }

    public virtual int FCidade
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCidade;
        set
        {
            pFldFCidade = pFldFCidade || value != m_FCidade;
            if (pFldFCidade)
                m_FCidade = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(30, ErrorMessage = "A propriedade FBairro da tabela Escritorios deve ter no máximo 30 caracteres.")]
    public virtual string? FBairro
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FBairro ?? string.Empty;
        set
        {
            pFldFBairro = pFldFBairro || !(m_FBairro ?? string.Empty).Equals(value);
            if (pFldFBairro)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FBairro = trimmed.Length > 30 ? trimmed.AsSpan(0, 30).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(10, ErrorMessage = "A propriedade FCEP da tabela Escritorios deve ter no máximo 10 caracteres.")]
    public virtual string? FCEP
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCEP ?? string.Empty;
        set
        {
            pFldFCEP = pFldFCEP || !(m_FCEP ?? string.Empty).Equals(value);
            if (pFldFCEP)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FCEP = trimmed.Length > 10 ? trimmed.AsSpan(0, 10).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    public virtual string? FFone
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FFone ?? string.Empty;
        set
        {
            pFldFFone = pFldFFone || !(m_FFone ?? string.Empty).Equals(value);
            if (pFldFFone)
                m_FFone = value.trim().FixAbc() ?? string.Empty;
        }
    }

    // Tracking Code: 20250503
    public virtual string? FFax
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FFax ?? string.Empty;
        set
        {
            pFldFFax = pFldFFax || !(m_FFax ?? string.Empty).Equals(value);
            if (pFldFFax)
                m_FFax = value.trim().FixAbc() ?? string.Empty;
        }
    }

    // Tracking Code: 20250503
    [StringLength(200, ErrorMessage = "A propriedade FSite da tabela Escritorios deve ter no máximo 200 caracteres.")]
    public virtual string? FSite
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FSite ?? string.Empty;
        set
        {
            pFldFSite = pFldFSite || !(m_FSite ?? string.Empty).Equals(value);
            if (pFldFSite)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FSite = trimmed.Length > 200 ? trimmed.AsSpan(0, 200).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(100, ErrorMessage = "A propriedade FEMail da tabela Escritorios deve ter no máximo 100 caracteres.")]
    public virtual string? FEMail
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEMail ?? string.Empty;
        set
        {
            pFldFEMail = pFldFEMail || !(m_FEMail ?? string.Empty).Equals(value);
            if (pFldFEMail)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FEMail = trimmed.Length > 100 ? trimmed.AsSpan(0, 100).ToString() : trimmed;
                if (m_FEMail.IsValidEmail())
                    return;
                throw new ArgumentException("E-mail inválido ou não informado corretamente.", nameof(value));
            }
        }
    }

    // Tracking Code: 20250503
    public virtual string? FOBS
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FOBS ?? string.Empty;
        set
        {
            pFldFOBS = pFldFOBS || !(m_FOBS ?? string.Empty).Equals(value);
            if (pFldFOBS)
                m_FOBS = value.trim().FixAbc() ?? string.Empty;
        }
    }

    // Tracking Code: 20250503
    [StringLength(80, ErrorMessage = "A propriedade FAdvResponsavel da tabela Escritorios deve ter no máximo 80 caracteres.")]
    public virtual string? FAdvResponsavel
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAdvResponsavel ?? string.Empty;
        set
        {
            pFldFAdvResponsavel = pFldFAdvResponsavel || !(m_FAdvResponsavel ?? string.Empty).Equals(value);
            if (pFldFAdvResponsavel)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FAdvResponsavel = trimmed.Length > 80 ? trimmed.AsSpan(0, 80).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(80, ErrorMessage = "A propriedade FSecretaria da tabela Escritorios deve ter no máximo 80 caracteres.")]
    public virtual string? FSecretaria
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FSecretaria ?? string.Empty;
        set
        {
            pFldFSecretaria = pFldFSecretaria || !(m_FSecretaria ?? string.Empty).Equals(value);
            if (pFldFSecretaria)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FSecretaria = trimmed.Length > 80 ? trimmed.AsSpan(0, 80).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(15, ErrorMessage = "A propriedade FInscEst da tabela Escritorios deve ter no máximo 15 caracteres.")]
    public virtual string? FInscEst
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FInscEst ?? string.Empty;
        set
        {
            pFldFInscEst = pFldFInscEst || !(m_FInscEst ?? string.Empty).Equals(value);
            if (pFldFInscEst)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FInscEst = trimmed.Length > 15 ? trimmed.AsSpan(0, 15).ToString() : trimmed;
            }
        }
    }

    public virtual bool FCorrespondente
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCorrespondente;
        set
        {
            pFldFCorrespondente = pFldFCorrespondente || value != m_FCorrespondente;
            if (pFldFCorrespondente)
                m_FCorrespondente = value;
        }
    }

    public virtual bool FTop
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FTop;
        set
        {
            pFldFTop = pFldFTop || value != m_FTop;
            if (pFldFTop)
                m_FTop = value;
        }
    }

    public virtual bool FEtiqueta
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEtiqueta;
        set
        {
            pFldFEtiqueta = pFldFEtiqueta || value != m_FEtiqueta;
            if (pFldFEtiqueta)
                m_FEtiqueta = value;
        }
    }

    public virtual bool FBold
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FBold;
        set
        {
            pFldFBold = pFldFBold || value != m_FBold;
            if (pFldFBold)
                m_FBold = value;
        }
    }

    public void SetAuditor(int usuarioId) => AuditorQuem = usuarioId;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITabelaName() => PTabelaNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoCodigo() => CampoCodigo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoNome() => CampoNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string IPrefixo() => PTabelaPrefixo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITypeFieldCode() => "int";
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IdIsIdentity() => false;
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetID() => ID;
}