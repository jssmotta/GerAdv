// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class FuncionariosValidationTests : IDisposable
{
    private readonly FuncionariosValidation _validation;
    private readonly Mock<IFuncionariosService> _mockFuncionariosService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<ICargosReader> _mockCargosReader;
    private readonly Mock<IFuncaoReader> _mockFuncaoReader;
    private readonly Mock<ICidadeReader> _mockCidadeReader;
    private readonly FuncionariosService _service;
    private readonly string _validUri = "test-uri";
    public FuncionariosValidationTests()
    {
        _validation = new FuncionariosValidation();
        _mockFuncionariosService = new Mock<IFuncionariosService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockCargosReader = new Mock<ICargosReader>();
        _mockFuncaoReader = new Mock<IFuncaoReader>();
        _mockCidadeReader = new Mock<ICidadeReader>();
    }

#region Class Structure Tests
    [Fact]
    public void FuncionariosValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IFuncionariosValidation>();
    }

    [Fact]
    public void FuncionariosValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(FuncionariosValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void FuncionariosValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(FuncionariosValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private static Models.Funcionarios CreateValidFuncionarios()
    {
        return new Models.Funcionarios
        {
            Id = 1,
            EMailPro = "test@email.com",
            Cargo = 0,
            Nome = "João",
            Funcao = 0,
            Sexo = false,
            Registro = "AAAAAAAAAAAAAAAAAA",
            CPF = "544.506.718-13",
            RG = "12.345.678-9",
            Tipo = true,
            Observacao = "Observação teste",
            Endereco = "Rua das Flores, 123",
            Bairro = "Centro",
            Cidade = 0,
            CEP = "01234-567",
            Contato = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Fax = "(11) 88888-9999",
            Fone = "(11) 99999-9999",
            EMail = "test@email.com",
            Periodo_Ini = "24/04/1975",
            Periodo_Fim = "24/04/1975",
            CTPSNumero = "AAAAAAAAAAAAA",
            CTPSSerie = "AAAAAAAA",
            PIS = "AAAAAAAAAAAAAAAAAA",
            Salario = 1m,
            CTPSDtEmissao = "24/04/1975",
            DtNasc = "24/04/1975",
            Data = "27/05/2022",
            LiberaAgenda = false,
            Pasta = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Class = "A"
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockFuncionariosService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterFuncionarios>(), It.IsAny<string>())).ReturnsAsync([]);
        // Setup other mocks but don't override the Funcionarioss service mock
        _ = _mockCargosReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new CargosResponse { Id = id }));
        _ = _mockFuncaoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new FuncaoResponse { Id = id }));
        _ = _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new CidadeResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockFuncionariosService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterFuncionarios>(), It.IsAny<string>())).ReturnsAsync([]);
        // Setup other mocks but don't override the Funcionarioss service mock
        _ = _mockCargosReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new CargosResponse { Id = 0 }));
        _ = _mockFuncaoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new FuncaoResponse { Id = 0 }));
        _ = _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new CidadeResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var funcionarios = new Models.Funcionarios
        {
            Id = 1,
            EMailPro = null,
            Nome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Sexo = false,
            Registro = null,
            CPF = null,
            RG = null,
            Tipo = true,
            Observacao = null,
            Endereco = null,
            Bairro = null,
            CEP = null,
            Contato = null,
            Fax = null,
            Fone = null,
            EMail = null,
            Periodo_Ini = null,
            Periodo_Fim = null,
            CTPSNumero = null,
            CTPSSerie = null,
            PIS = null,
            CTPSDtEmissao = null,
            DtNasc = null,
            Data = null,
            LiberaAgenda = false,
            Pasta = null,
            Class = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region CPF Validation Tests
    [Fact]
    public async Task ValidateReg_WithDuplicateCPF_ShouldThrowSGValidationException()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.CPF = "81833354036";
        funcionarios.Id = 1;
        var existingFuncionarios = new FuncionariosResponseAll
        {
            Id = 2,
            Nome = "Existing User",
            CPF = "81833354036"
        };
        // Setup the Filter method with any filter to see if it's being called
        _mockFuncionariosService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterFuncionarios>(), It.IsAny<string>())).ReturnsAsync(new List<FuncionariosResponseAll> { existingFuncionarios });
        // Setup other mocks but don't override the Funcionarioss service mock
        _ = _mockCargosReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new CargosResponse { Id = id }));
        _ = _mockFuncaoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new FuncaoResponse { Id = id }));
        _ = _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new CidadeResponse { Id = id }));
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("já cadastrado");
        // Verify that the Filter method was called
        _mockFuncionariosService.Verify(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterFuncionarios>(), It.IsAny<string>()), Times.AtLeastOnce);
    }

    [Fact]
    public async Task ValidateReg_WithDuplicateCPF_NoName_ShouldThrowSGValidationException()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.CPF = "34666807004";
        funcionarios.Id = 1;
        var existingFuncionarios = new FuncionariosResponseAll
        {
            Id = 2,
            Nome = "João",
            CPF = "34666807004"
        };
        _mockFuncionariosService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterFuncionarios>(), It.IsAny<string>())).ReturnsAsync(new List<FuncionariosResponseAll> { existingFuncionarios });
        // Setup other mocks but don't override the Funcionarioss service mock
        _ = _mockCargosReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new CargosResponse { Id = id }));
        _ = _mockFuncaoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new FuncaoResponse { Id = id }));
        _ = _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new CidadeResponse { Id = id }));
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("já cadastrado");
        exception.Message.Should().Contain("(");
    }

    [Fact]
    public async Task ValidateReg_WithSameCPF_SameId_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.CPF = "67290209117";
        funcionarios.Id = 1;
        var existingFuncionarios = new FuncionariosResponseAll
        {
            Id = 1, // Same ID
            Nome = "Same User",
            CPF = "67290209117"
        };
        _mockFuncionariosService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterFuncionarios>(), It.IsAny<string>())).ReturnsAsync(new List<FuncionariosResponseAll> { existingFuncionarios });
        // Setup other mocks but don't override the Funcionarioss service mock
        _ = _mockCargosReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new CargosResponse { Id = id }));
        _ = _mockFuncaoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new FuncaoResponse { Id = id }));
        _ = _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new CidadeResponse { Id = id }));
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithEmptyCPF_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.CPF = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullCPF_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.CPF = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region EMailPro Validation Tests
    [Fact]
    public async Task ValidateReg_WithInvalidEMailPro_ShouldThrowSGValidationException()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.EMailPro = "invalid-email";
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("formato inválido.");
    }

    [Fact]
    public async Task ValidateReg_WithValidEMailPro_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.EMailPro = "menphis@example.com";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithEmptyEMailPro_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.EMailPro = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region EMail Validation Tests
    [Fact]
    public async Task ValidateReg_WithInvalidEMail_ShouldThrowSGValidationException()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.EMail = "invalid-email";
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("formato inválido.");
    }

    [Fact]
    public async Task ValidateReg_WithValidEMail_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.EMail = "menphis@example.com";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithEmptyEMail_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.EMail = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region Periodo_Ini Validation Tests
    [Theory]
    [InlineData("01/01/1899")]
    [InlineData("31/12/1899")]
    public async Task ValidateReg_WithPeriodo_IniBeforeMinDate_ShouldThrowSGValidationException(string invalidDate)
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.Periodo_Ini = invalidDate;
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("01/01/1900.");
    }

    [Fact]
    public async Task ValidateReg_WithValidPeriodo_Ini_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.Periodo_Ini = "01/01/1990";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullPeriodo_Ini_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.Periodo_Ini = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithInvalidDatePeriodo_IniFormat_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.Periodo_Ini = "invalid-date";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue(); // Invalid format is ignored, not validated
    }

    [Fact]
    public async Task ValidateReg_WithEmptyPeriodo_Ini_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.Periodo_Ini = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region Periodo_Fim Validation Tests
    [Theory]
    [InlineData("01/01/1899")]
    [InlineData("31/12/1899")]
    public async Task ValidateReg_WithPeriodo_FimBeforeMinDate_ShouldThrowSGValidationException(string invalidDate)
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.Periodo_Fim = invalidDate;
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("01/01/1900.");
    }

    [Fact]
    public async Task ValidateReg_WithValidPeriodo_Fim_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.Periodo_Fim = "01/01/1990";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullPeriodo_Fim_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.Periodo_Fim = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithInvalidDatePeriodo_FimFormat_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.Periodo_Fim = "invalid-date";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue(); // Invalid format is ignored, not validated
    }

    [Fact]
    public async Task ValidateReg_WithEmptyPeriodo_Fim_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.Periodo_Fim = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region CTPSDtEmissao Validation Tests
    [Theory]
    [InlineData("01/01/1899")]
    [InlineData("31/12/1899")]
    public async Task ValidateReg_WithCTPSDtEmissaoBeforeMinDate_ShouldThrowSGValidationException(string invalidDate)
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.CTPSDtEmissao = invalidDate;
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("01/01/1900.");
    }

    [Fact]
    public async Task ValidateReg_WithValidCTPSDtEmissao_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.CTPSDtEmissao = "01/01/1990";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullCTPSDtEmissao_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.CTPSDtEmissao = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithInvalidDateCTPSDtEmissaoFormat_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.CTPSDtEmissao = "invalid-date";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue(); // Invalid format is ignored, not validated
    }

    [Fact]
    public async Task ValidateReg_WithEmptyCTPSDtEmissao_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.CTPSDtEmissao = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region DtNasc Validation Tests
    [Theory]
    [InlineData("01/01/1899")]
    [InlineData("31/12/1899")]
    public async Task ValidateReg_WithDtNascBeforeMinDate_ShouldThrowSGValidationException(string invalidDate)
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.DtNasc = invalidDate;
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("01/01/1900.");
    }

    [Fact]
    public async Task ValidateReg_WithValidDtNasc_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.DtNasc = "01/01/1990";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullDtNasc_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.DtNasc = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithInvalidDateDtNascFormat_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.DtNasc = "invalid-date";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue(); // Invalid format is ignored, not validated
    }

    [Fact]
    public async Task ValidateReg_WithEmptyDtNasc_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.DtNasc = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateRegDtNasc_WithBoundaryValues_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.DtNasc = "01/01/1900"; // Exactly on the boundary
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithTodayDateDtNasc_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.DtNasc = DateTime.Now.ToString("dd/MM/yyyy");
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithTomorrowDateDtNasc_ShouldNotPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.DtNasc = DateTime.Now.AddDays(1).ToString("dd/MM/yyyy");
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não pode ser uma data futura.");
    }

#region Foreign Key Validation Tests - Cargos
    [Fact]
    public async Task ValidateReg_WithInvalidCargos_ShouldThrowSGValidationException()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.Cargo = 999;
        _mockCargosReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.CargosResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedCargosId_ShouldThrowSGValidationException()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.Cargo = 999;
        var reg888 = new Models.Response.CargosResponse
        {
            Id = 888
        }; // Different ID
        _mockCargosReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidCargos_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.Cargo = 123;
        var reg123 = new Models.Response.CargosResponse
        {
            Id = 123
        };
        _mockCargosReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyCargos_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.Cargo = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockCargosReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - Funcao
    [Fact]
    public async Task ValidateReg_WithInvalidFuncao_ShouldThrowSGValidationException()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.Funcao = 999;
        _mockFuncaoReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.FuncaoResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedFuncaoId_ShouldThrowSGValidationException()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.Funcao = 999;
        var reg888 = new Models.Response.FuncaoResponse
        {
            Id = 888
        }; // Different ID
        _mockFuncaoReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidFuncao_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.Funcao = 123;
        var reg123 = new Models.Response.FuncaoResponse
        {
            Id = 123
        };
        _mockFuncaoReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyFuncao_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.Funcao = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockFuncaoReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - Cidade
    [Fact]
    public async Task ValidateReg_WithInvalidCidade_ShouldThrowSGValidationException()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.Cidade = 999;
        _mockCidadeReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.CidadeResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedCidadeId_ShouldThrowSGValidationException()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.Cidade = 999;
        var reg888 = new Models.Response.CidadeResponse
        {
            Id = 888
        }; // Different ID
        _mockCidadeReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidCidade_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.Cidade = 123;
        var reg123 = new Models.Response.CidadeResponse
        {
            Id = 123
        };
        _mockCidadeReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyCidade_ShouldPass()
    {
        // Arrange
        var funcionarios = CreateValidFuncionarios();
        funcionarios.Cidade = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(funcionarios, _mockFuncionariosService.Object, _mockCargosReader.Object, _mockFuncaoReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockCidadeReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}