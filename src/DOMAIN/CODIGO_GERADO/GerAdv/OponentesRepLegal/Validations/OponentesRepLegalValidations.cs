// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IOponentesRepLegalValidation
{
    Task<bool> ValidateReg(Models.OponentesRepLegal reg, IOponentesRepLegalService service, IOponentesReader oponentesReader, ICidadeReader cidadeReader, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
    Task<bool> CanDelete(int? id, IOponentesRepLegalService service, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
}

public class OponentesRepLegalValidation : IOponentesRepLegalValidation
{
    public async Task<bool> CanDelete(int? id, IOponentesRepLegalService service, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (id == null || id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id ?? default, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.OponentesRepLegal reg)
    {
        if (reg.Nome != null && reg.Nome.Length > DBOponentesRepLegalDicInfo.OprNome.FTamanho)
            throw new SGValidationException($"Nome deve ter no máximo {DBOponentesRepLegalDicInfo.OprNome.FTamanho} caracteres.");
        if (reg.CPF != null && reg.CPF.ClearInputCepCpfCnpj().Length > DBOponentesRepLegalDicInfo.OprCPF.FTamanho)
            throw new SGValidationException($"CPF deve ter no máximo {DBOponentesRepLegalDicInfo.OprCPF.FTamanho} caracteres.");
        if (reg.RG != null && reg.RG.Length > DBOponentesRepLegalDicInfo.OprRG.FTamanho)
            throw new SGValidationException($"RG deve ter no máximo {DBOponentesRepLegalDicInfo.OprRG.FTamanho} caracteres.");
        if (reg.Endereco != null && reg.Endereco.Length > DBOponentesRepLegalDicInfo.OprEndereco.FTamanho)
            throw new SGValidationException($"Endereco deve ter no máximo {DBOponentesRepLegalDicInfo.OprEndereco.FTamanho} caracteres.");
        if (reg.Bairro != null && reg.Bairro.Length > DBOponentesRepLegalDicInfo.OprBairro.FTamanho)
            throw new SGValidationException($"Bairro deve ter no máximo {DBOponentesRepLegalDicInfo.OprBairro.FTamanho} caracteres.");
        if (reg.CEP != null && reg.CEP.ClearInputCepCpfCnpj().Length > DBOponentesRepLegalDicInfo.OprCEP.FTamanho)
            throw new SGValidationException($"CEP deve ter no máximo {DBOponentesRepLegalDicInfo.OprCEP.FTamanho} caracteres.");
        if (reg.Site != null && reg.Site.Length > DBOponentesRepLegalDicInfo.OprSite.FTamanho)
            throw new SGValidationException($"Site deve ter no máximo {DBOponentesRepLegalDicInfo.OprSite.FTamanho} caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.OponentesRepLegal reg, IOponentesRepLegalService service, IOponentesReader oponentesReader, ICidadeReader cidadeReader, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Nome))
            throw new SGValidationException("Nome é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.EMail != null && reg.EMail.Length > 0 && !reg.EMail.IsValidEmail())
            throw new SGValidationException($"EMail em formato inválido.");
        if (reg.CPF != null && reg.CPF.Length > 0 && !reg.CPF.IsValidCpf())
            throw new SGValidationException("CPF inválido.");
        if (!string.IsNullOrWhiteSpace(reg.CPF))
        {
            var testaCpf = await IsCpfDuplicado(reg, service, uri);
            if (testaCpf.Item1 && testaCpf.Item2 != null)
            {
                throw new SGValidationException($"Oponentes Rep Legal ({testaCpf.Item2.Nome}) com cpf '{reg.CPF.MaskCpf()}' já cadastrado.");
            }
            else if (testaCpf.Item1)
            {
                throw new SGValidationException($"Oponentes Rep Legal com cpf '{reg.CPF.MaskCpf()}' já cadastrado.");
            }
        }

        // Oponentes
        if (!reg.Oponente.IsEmptyIDNumber())
        {
            var regOponentes = await oponentesReader.Read(reg.Oponente, oCnn);
            if (regOponentes == null || regOponentes.Id != reg.Oponente)
            {
                throw new SGValidationException($"Oponentes não encontrado ({regOponentes?.Id}).");
            }
        }

        // Cidade
        if (!reg.Cidade.IsEmptyIDNumber())
        {
            var regCidade = await cidadeReader.Read(reg.Cidade, oCnn);
            if (regCidade == null || regCidade.Id != reg.Cidade)
            {
                throw new SGValidationException($"Cidade não encontrado ({regCidade?.Id}).");
            }
        }

        return true;
    }

    private async Task<(bool, OponentesRepLegalResponseAll? )> IsCpfDuplicado(Models.OponentesRepLegal reg, IOponentesRepLegalService service, string uri)
    {
        if (reg.CPF.ClearInputCpf().Length == 0)
            return (false, null);
        var existingOponentesRepLegal = (await service.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterOponentesRepLegal { CPF = reg.CPF.ClearInputCpf() }, uri)).FirstOrDefault();
        return (existingOponentesRepLegal != null && existingOponentesRepLegal.Id > 0 && existingOponentesRepLegal.Id != reg.Id, existingOponentesRepLegal);
    }
}