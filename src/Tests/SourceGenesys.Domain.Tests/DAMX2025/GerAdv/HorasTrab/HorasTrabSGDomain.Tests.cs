// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBHorasTrab - Nome da classe (ex: DBClientes)
/// HorasTrab - Nome da tabela (ex: Clientes)
/// htb - Prefixo dos campos (ex: cli)
/// htbCodigo - Nome do campo código (ex: cliCodigo)
/// htbData - Nome do campo nome (ex: cliNome)
/// DBHorasTrab.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBHorasTrabTests : IDisposable
{
    private readonly DBHorasTrab _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBHorasTrabTests()
    {
        _instance = new DBHorasTrab();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("htbCodigo", typeof(int));
        dt.Columns.Add("htbQuemCad", typeof(int));
        dt.Columns.Add("htbDtCad", typeof(DateTime));
        dt.Columns.Add("htbQuemAtu", typeof(int));
        dt.Columns.Add("htbDtAtu", typeof(DateTime));
        dt.Columns.Add("htbVisto", typeof(bool));
        dt.Columns.Add("htbGUID", typeof(string));
        dt.Columns.Add("htbIDContatoCRM", typeof(int));
        dt.Columns.Add("htbHonorario", typeof(string));
        dt.Columns.Add("htbIDAgenda", typeof(int));
        dt.Columns.Add("htbData", typeof(string));
        dt.Columns.Add("htbCliente", typeof(int));
        dt.Columns.Add("htbStatus", typeof(int));
        dt.Columns.Add("htbProcesso", typeof(int));
        dt.Columns.Add("htbAdvogado", typeof(int));
        dt.Columns.Add("htbFuncionario", typeof(int));
        dt.Columns.Add("htbHrIni", typeof(string));
        dt.Columns.Add("htbHrFim", typeof(string));
        dt.Columns.Add("htbTempo", typeof(decimal));
        dt.Columns.Add("htbValor", typeof(decimal));
        dt.Columns.Add("htbOBS", typeof(string));
        dt.Columns.Add("htbAnexo", typeof(string));
        dt.Columns.Add("htbAnexoComp", typeof(string));
        dt.Columns.Add("htbAnexoUNC", typeof(string));
        dt.Columns.Add("htbServico", typeof(int));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("HorasTrab", DBHorasTrab.PTabelaNome);
        Assert.Equal(" HorasTrab.* ", DBHorasTrab.CamposSqlX);
        Assert.Equal("htbCodigo", DBHorasTrab.CampoCodigo);
        Assert.Equal("htbData", DBHorasTrab.CampoNome);
        Assert.Equal("htb", DBHorasTrab.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBHorasTrab();
        Assert.Equal(0, instance.ID);
        Assert.Equal("HorasTrab", instance.ITabelaName());
        Assert.Equal("htb", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBHorasTrab((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBHorasTrab((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["htbCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBHorasTrab(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("HorasTrab", cadastro.ITabelaName());
        Assert.Equal("htbCodigo", cadastro.ICampoCodigo());
        Assert.Equal("htbData", cadastro.ICampoNome());
        Assert.Equal("htb", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBHorasTrab.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBHorasTrab.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBHorasTrab.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBHorasTrab();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBHorasTrab();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnTrue()
    {
        Assert.True(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void GUID_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FGUID = input;
        Assert.Equal(expected, _instance.FGUID);
    }

    [Fact]
    public void GUID_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FGUID = longString;
        Assert.True(_instance.FGUID.Length <= 100);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void IDContatoCRM_ShouldAcceptIntegerValues(int value)
    {
        _instance.FIDContatoCRM = value;
        Assert.Equal(value, _instance.FIDContatoCRM);
    }

    [Fact]
    public void IDContatoCRM_DefaultValue_ShouldBeZero()
    {
        var instance = new DBHorasTrab();
        Assert.Equal(0, instance.FIDContatoCRM);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Honorario_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FHonorario = value;
        Assert.Equal(value, _instance.FHonorario);
    }

    [Fact]
    public void Honorario_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBHorasTrab();
        Assert.False(instance.FHonorario);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void IDAgenda_ShouldAcceptIntegerValues(int value)
    {
        _instance.FIDAgenda = value;
        Assert.Equal(value, _instance.FIDAgenda);
    }

    [Fact]
    public void IDAgenda_DefaultValue_ShouldBeZero()
    {
        var instance = new DBHorasTrab();
        Assert.Equal(0, instance.FIDAgenda);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cliente_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCliente = value;
        Assert.Equal(value, _instance.FCliente);
    }

    [Fact]
    public void Cliente_DefaultValue_ShouldBeZero()
    {
        var instance = new DBHorasTrab();
        Assert.Equal(0, instance.FCliente);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Status_ShouldAcceptIntegerValues(int value)
    {
        _instance.FStatus = value;
        Assert.Equal(value, _instance.FStatus);
    }

    [Fact]
    public void Status_DefaultValue_ShouldBeZero()
    {
        var instance = new DBHorasTrab();
        Assert.Equal(0, instance.FStatus);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Processo_ShouldAcceptIntegerValues(int value)
    {
        _instance.FProcesso = value;
        Assert.Equal(value, _instance.FProcesso);
    }

    [Fact]
    public void Processo_DefaultValue_ShouldBeZero()
    {
        var instance = new DBHorasTrab();
        Assert.Equal(0, instance.FProcesso);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Advogado_ShouldAcceptIntegerValues(int value)
    {
        _instance.FAdvogado = value;
        Assert.Equal(value, _instance.FAdvogado);
    }

    [Fact]
    public void Advogado_DefaultValue_ShouldBeZero()
    {
        var instance = new DBHorasTrab();
        Assert.Equal(0, instance.FAdvogado);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Funcionario_ShouldAcceptIntegerValues(int value)
    {
        _instance.FFuncionario = value;
        Assert.Equal(value, _instance.FFuncionario);
    }

    [Fact]
    public void Funcionario_DefaultValue_ShouldBeZero()
    {
        var instance = new DBHorasTrab();
        Assert.Equal(0, instance.FFuncionario);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void HrIni_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FHrIni = input;
        Assert.Equal(expected, _instance.FHrIni);
    }

    [Fact]
    public void HrIni_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 5 + 10);
        _instance.FHrIni = longString;
        Assert.True(_instance.FHrIni.Length <= 5);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void HrFim_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FHrFim = input;
        Assert.Equal(expected, _instance.FHrFim);
    }

    [Fact]
    public void HrFim_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 5 + 10);
        _instance.FHrFim = longString;
        Assert.True(_instance.FHrFim.Length <= 5);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void OBS_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FOBS = input;
        Assert.Equal(expected, _instance.FOBS);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Anexo_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FAnexo = input;
        Assert.Equal(expected, _instance.FAnexo);
    }

    [Fact]
    public void Anexo_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 255 + 10);
        _instance.FAnexo = longString;
        Assert.True(_instance.FAnexo.Length <= 255);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void AnexoComp_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FAnexoComp = input;
        Assert.Equal(expected, _instance.FAnexoComp);
    }

    [Fact]
    public void AnexoComp_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FAnexoComp = longString;
        Assert.True(_instance.FAnexoComp.Length <= 50);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void AnexoUNC_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FAnexoUNC = input;
        Assert.Equal(expected, _instance.FAnexoUNC);
    }

    [Fact]
    public void AnexoUNC_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 255 + 10);
        _instance.FAnexoUNC = longString;
        Assert.True(_instance.FAnexoUNC.Length <= 255);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Servico_ShouldAcceptIntegerValues(int value)
    {
        _instance.FServico = value;
        Assert.Equal(value, _instance.FServico);
    }

    [Fact]
    public void Servico_DefaultValue_ShouldBeZero()
    {
        var instance = new DBHorasTrab();
        Assert.Equal(0, instance.FServico);
    }

    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}