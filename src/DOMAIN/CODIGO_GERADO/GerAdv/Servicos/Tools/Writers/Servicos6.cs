// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Writers;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IServicosWriter
{
    Task<FServicos> WriteAsync(Models.Servicos servicos, int auditorQuem, MsiSqlConnection? oCnn);
    Task Delete(ServicosResponse servicos, int operadorId, MsiSqlConnection? oCnn);
}

public class ServicosWriter(IFServicosFactory servicosFactory) : IServicosWriter
{
    private readonly IFServicosFactory _servicosFactory = servicosFactory ?? throw new ArgumentNullException(nameof(servicosFactory));
    public virtual async Task Delete(ServicosResponse servicos, int operadorId, MsiSqlConnection? oCnn)
    {
        await _servicosFactory.DeleteAsync(operadorId, servicos.Id, oCnn);
    }

    public virtual async Task<FServicos> WriteAsync(Models.Servicos servicos, int auditorQuem, MsiSqlConnection? oCnn)
    {
        using var dbRec = await (servicos.Id.IsEmptyIDNumber() ? _servicosFactory.CreateAsync() : _servicosFactory.CreateFromIdAsync(servicos.Id, oCnn));
        dbRec.FCobrar = servicos.Cobrar;
        dbRec.FDescricao = servicos.Descricao;
        dbRec.FBasico = servicos.Basico;
        dbRec.FGUID = servicos.GUID;
        dbRec.AuditorQuem = auditorQuem;
        await dbRec.UpdateAsync(oCnn);
        return dbRec;
    }
}