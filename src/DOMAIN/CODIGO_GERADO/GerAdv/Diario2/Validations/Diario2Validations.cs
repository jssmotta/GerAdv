// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IDiario2Validation
{
    Task<bool> ValidateReg(Models.Diario2 reg, IDiario2Service service, IOperadorReader operadorReader, IClientesReader clientesReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, IDiario2Service service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class Diario2Validation : IDiario2Validation
{
    public async Task<bool> CanDelete(int id, IDiario2Service service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.Diario2 reg)
    {
        if (reg.Nome.Length > 150)
            throw new SGValidationException($"Nome deve ter no máximo 150 caracteres.");
        if (reg.Ocorrencia.Length > 2048)
            throw new SGValidationException($"Ocorrencia deve ter no máximo 2048 caracteres.");
        if (reg.GUID.Length > 150)
            throw new SGValidationException($"GUID deve ter no máximo 150 caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.Diario2 reg, IDiario2Service service, IOperadorReader operadorReader, IClientesReader clientesReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Nome))
            throw new SGValidationException("Nome é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.Data.IsEmpty())
            throw new SGValidationException("Data é obrigatório.");
        if (!DateTime.TryParse(reg.Data, out _))
        {
            throw new SGValidationException($"Data inválida: {reg.Data}");
        }

        if (reg.Data.IsEmpty())
            throw new SGValidationException("Data é obrigatório.");
        if (reg.Hora.IsEmpty())
            throw new SGValidationException("Hora é obrigatório.");
        if (!DateTime.TryParse(reg.Hora, out _))
        {
            throw new SGValidationException($"Hora inválida: {reg.Hora}");
        }

        if (reg.Hora.IsEmpty())
            throw new SGValidationException("Hora é obrigatório.");
        if (reg.Operador == 0)
            throw new SGValidationException("Operador é obrigatório.");
        if (reg.Ocorrencia.IsEmpty())
            throw new SGValidationException("Ocorrencia é obrigatório.");
        if (reg.GUID.IsEmpty())
            throw new SGValidationException("GUID é obrigatório.");
        // Operador
        {
            var regOperador = await operadorReader.Read(reg.Operador, oCnn);
            if (regOperador == null || regOperador.Id != reg.Operador)
            {
                throw new SGValidationException($"Operador não encontrado ({regOperador?.Id}).");
            }
        }

        // Clientes
        if (!reg.Cliente.IsEmptyIDNumber())
        {
            var regClientes = await clientesReader.Read(reg.Cliente, oCnn);
            if (regClientes == null || regClientes.Id != reg.Cliente)
            {
                throw new SGValidationException($"Clientes não encontrado ({regClientes?.Id}).");
            }
        }

        return true;
    }
}