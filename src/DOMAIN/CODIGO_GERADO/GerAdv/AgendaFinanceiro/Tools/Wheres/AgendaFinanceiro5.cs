// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Wheres;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IAgendaFinanceiroWhere
{
    AgendaFinanceiroResponse Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn);
}

public partial class AgendaFinanceiroWhere(IFAgendaFinanceiroFactory agendafinanceiroFactory) : IAgendaFinanceiroWhere
{
    private readonly IFAgendaFinanceiroFactory _agendafinanceiroFactory = agendafinanceiroFactory;
    public AgendaFinanceiroResponse Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn)
    {
        using var dbRec = _agendafinanceiroFactory.CreateFromParameters(parameters, oCnn, sqlWhere: where);
        var agendafinanceiro = new AgendaFinanceiroResponse
        {
            Id = dbRec.ID,
            IDCOB = dbRec.FIDCOB,
            IDNE = dbRec.FIDNE,
            PrazoProvisionado = dbRec.FPrazoProvisionado,
            Cidade = dbRec.FCidade,
            Oculto = dbRec.FOculto,
            CartaPrecatoria = dbRec.FCartaPrecatoria,
            RepetirDias = dbRec.FRepetirDias,
            Repetir = dbRec.FRepetir,
            Advogado = dbRec.FAdvogado,
            EventoGerador = dbRec.FEventoGerador,
            Funcionario = dbRec.FFuncionario,
            Data = dbRec.FData ?? string.Empty,
            EventoPrazo = dbRec.FEventoPrazo,
            Compromisso = dbRec.FCompromisso ?? string.Empty,
            TipoCompromisso = dbRec.FTipoCompromisso,
            Cliente = dbRec.FCliente,
            Dias = dbRec.FDias,
            Liberado = dbRec.FLiberado,
            Importante = dbRec.FImportante,
            Concluido = dbRec.FConcluido,
            Area = dbRec.FArea,
            Justica = dbRec.FJustica,
            Processo = dbRec.FProcesso,
            IDHistorico = dbRec.FIDHistorico,
            IDInsProcesso = dbRec.FIDInsProcesso,
            Usuario = dbRec.FUsuario,
            Preposto = dbRec.FPreposto,
            QuemID = dbRec.FQuemID,
            QuemCodigo = dbRec.FQuemCodigo,
            Status = dbRec.FStatus ?? string.Empty,
            Valor = dbRec.FValor,
            CompromissoHTML = dbRec.FCompromissoHTML ?? string.Empty,
            Decisao = dbRec.FDecisao ?? string.Empty,
            Revisar = dbRec.FRevisar,
            RevisarP2 = dbRec.FRevisarP2,
            Sempre = dbRec.FSempre,
            PrazoDias = dbRec.FPrazoDias,
            ProtocoloIntegrado = dbRec.FProtocoloIntegrado,
            UsuarioCiente = dbRec.FUsuarioCiente,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FHrFinal, out DateTime XHrFinal))
        {
            agendafinanceiro.HrFinal = dbRec.FHrFinal;
            agendafinanceiro.HrFinal_date = XHrFinal;
        }

        if (DateTime.TryParse(dbRec.FEventoData, out DateTime XEventoData))
        {
            agendafinanceiro.EventoData = dbRec.FEventoData;
            agendafinanceiro.EventoData_date = XEventoData;
        }

        if (DateTime.TryParse(dbRec.FHora, out DateTime XHora))
        {
            agendafinanceiro.Hora = dbRec.FHora;
            agendafinanceiro.Hora_date = XHora;
        }

        if (DateTime.TryParse(dbRec.FDDias, out DateTime XDDias))
        {
            agendafinanceiro.DDias = dbRec.FDDias;
            agendafinanceiro.DDias_date = XDDias;
        }

        if (DateTime.TryParse(dbRec.FDataInicioPrazo, out DateTime XDataInicioPrazo))
        {
            agendafinanceiro.DataInicioPrazo = dbRec.FDataInicioPrazo;
            agendafinanceiro.DataInicioPrazo_date = XDataInicioPrazo;
        }

        return agendafinanceiro;
    }
}