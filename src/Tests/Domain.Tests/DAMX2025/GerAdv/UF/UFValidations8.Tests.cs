// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class UFValidationTests : IDisposable
{
    private readonly UFValidation _validation;
    private readonly Mock<IUFService> _mockUFService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IPaisesReader> _mockPaisesReader;
    private readonly UFService _service;
    private readonly string _validUri = "test-uri";
    public UFValidationTests()
    {
        _validation = new UFValidation();
        _mockUFService = new Mock<IUFService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockPaisesReader = new Mock<IPaisesReader>();
    }

#region Class Structure Tests
    [Fact]
    public void UFValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IUFValidation>();
    }

    [Fact]
    public void UFValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(UFValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void UFValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(UFValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private static Models.UF CreateValidUF()
    {
        return new Models.UF
        {
            Id = 1,
            DDD = "AAAAAAAA",
            IdUF = "SP",
            Pais = 0,
            Top = false,
            Descricao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockUFService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterUF>(), It.IsAny<string>())).ReturnsAsync([]);
        // Setup other mocks but don't override the UFs service mock
        _ = _mockPaisesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new PaisesResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockUFService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterUF>(), It.IsAny<string>())).ReturnsAsync([]);
        // Setup other mocks but don't override the UFs service mock
        _ = _mockPaisesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new PaisesResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var uf = new Models.UF
        {
            Id = 1,
            DDD = null,
            IdUF = "AA",
            Top = false,
            Descricao = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(uf, _mockUFService.Object, _mockPaisesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockUFService.Object, _mockPaisesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region Foreign Key Validation Tests - Paises
    [Fact]
    public async Task ValidateReg_WithInvalidPaises_ShouldThrowSGValidationException()
    {
        // Arrange
        var uf = CreateValidUF();
        uf.Pais = 999;
        _mockPaisesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.PaisesResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(uf, _mockUFService.Object, _mockPaisesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedPaisesId_ShouldThrowSGValidationException()
    {
        // Arrange
        var uf = CreateValidUF();
        uf.Pais = 999;
        var reg888 = new Models.Response.PaisesResponse
        {
            Id = 888
        }; // Different ID
        _mockPaisesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(uf, _mockUFService.Object, _mockPaisesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidPaises_ShouldPass()
    {
        // Arrange
        var uf = CreateValidUF();
        uf.Pais = 123;
        var reg123 = new Models.Response.PaisesResponse
        {
            Id = 123
        };
        _mockPaisesReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(uf, _mockUFService.Object, _mockPaisesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyPaises_ShouldPass()
    {
        // Arrange
        var uf = CreateValidUF();
        uf.Pais = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(uf, _mockUFService.Object, _mockPaisesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockPaisesReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}