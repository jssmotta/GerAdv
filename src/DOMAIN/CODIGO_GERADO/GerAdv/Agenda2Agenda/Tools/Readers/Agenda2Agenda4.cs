// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Readers;
public partial class Agenda2AgendaReader(IFAgenda2AgendaFactory agenda2agendaFactory) : IAgenda2AgendaReader
{
    private readonly IFAgenda2AgendaFactory _agenda2agendaFactory = agenda2agendaFactory;
    public async Task<IEnumerable<Agenda2AgendaResponseAll>> Listar(int max, string uri, string cWhere, List<SqlParameter> parameters, string order, CancellationToken cancellationToken) => await ListarTabela(BuildSqlQuery(DBAgenda2Agenda.CamposSqlX, cWhere, order, max), parameters, uri, caching: DevourerOne.PCachingDefault, max: max, cancellationToken: cancellationToken);
    private async Task<IEnumerable<Agenda2AgendaResponseAll>> ListarTabela(string sql, List<SqlParameter> parameters, string uri, bool caching = DevourerOne.PCachingDefault, int max = 200, CancellationToken cancellationToken = default)
    {
        var result = new List<Agenda2AgendaResponseAll>(max);
        await using var connection = Configuracoes.GetConnectionByUri(uri);
        await using var cmd = new SqlCommand(cmdText: ConfiguracoesDBT.CmdSql(sql), connection: connection?.InnerConnection)
        {
            CommandTimeout = 30
        };
        foreach (var param in parameters)
        {
            if (!cmd.Parameters.Contains(param.ParameterName))
            {
                var newParam = new SqlParameter(param.ParameterName, param.Value)
                {
                    SqlDbType = param.SqlDbType,
                    Direction = param.Direction,
                    Size = param.Size,
                    Precision = param.Precision,
                    Scale = param.Scale
                };
                cmd.Parameters.Add(newParam);
            }
        }

        await using var reader = await cmd.ExecuteReaderAsync(CommandBehavior.SingleResult);
        while (await reader.ReadAsync())
        {
            if (cancellationToken.IsCancellationRequested)
                return result;
            result.Add(ReadAll(_agenda2agendaFactory.CreateFromReader(reader), reader)!);
        }

        return result;
    }

    public async Task<Agenda2AgendaResponse?> Read(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _agenda2agendaFactory.CreateFromIdAsync(id, oCnn);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public async Task<Models.Agenda2Agenda?> ReadM(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _agenda2agendaFactory.CreateFromIdAsync(id, oCnn);
        var agenda2agenda = new Models.Agenda2Agenda
        {
            Id = dbRec.ID,
            Master = dbRec.FMaster,
            Agenda = dbRec.FAgenda,
        };
        return agenda2agenda;
    }

    public Agenda2AgendaResponse? Read(FAgenda2Agenda dbRec, MsiSqlConnection oCnn)
    {
        return Read(dbRec);
    }

    public Agenda2AgendaResponse? Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn)
    {
        using var dbRec = _agenda2agendaFactory.CreateFromParameters(parameters, oCnn, sqlWhere: where);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public Agenda2AgendaResponse? Read(FAgenda2Agenda dbRec) // Track 001.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var agenda2agenda = new Agenda2AgendaResponse
        {
            Id = dbRec.ID,
            Master = dbRec.FMaster,
            Agenda = dbRec.FAgenda,
        };
        return agenda2agenda;
    }

    public Agenda2AgendaResponse? Read(SG.GerAdv.DBAgenda2Agenda dbRec) // Track 002.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var agenda2agenda = new Agenda2AgendaResponse
        {
            Id = dbRec.ID,
            Master = dbRec.FMaster,
            Agenda = dbRec.FAgenda,
        };
        return agenda2agenda;
    }

    public Agenda2AgendaResponseAll? ReadAll(FAgenda2Agenda dbRec, IDataRecord dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var agenda2agenda = new Agenda2AgendaResponseAll
        {
            Id = dbRec.ID,
            Master = dbRec.FMaster,
            Agenda = dbRec.FAgenda,
        };
        return agenda2agenda;
    }

    public Agenda2AgendaResponseAll? ReadAll(SG.GerAdv.DBAgenda2Agenda dbRec, DataRow dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var agenda2agenda = new Agenda2AgendaResponseAll
        {
            Id = dbRec.ID,
            Master = dbRec.FMaster,
            Agenda = dbRec.FAgenda,
        };
        return agenda2agenda;
    }
}