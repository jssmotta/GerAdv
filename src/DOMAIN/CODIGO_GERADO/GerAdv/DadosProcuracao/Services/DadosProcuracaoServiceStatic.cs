// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class DadosProcuracaoService
{
    public (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterDadosProcuracao? filtro)
    {
        if (filtro == null)
            return null;
        var parameters = new List<SqlParameter>();
        if (filtro.Cliente != int.MinValue)
        {
            parameters.Add(new($"@{(DBDadosProcuracaoDicInfo.Cliente)}", filtro.Cliente));
            if (filtro.Cliente_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBDadosProcuracaoDicInfo.Cliente)}_end", filtro.Cliente_end));
            }
        }

        if (!string.IsNullOrWhiteSpace(filtro.GUID))
        {
            parameters.Add(new($"@{(DBDadosProcuracaoDicInfo.GUID)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.GUID)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.EstadoCivil))
        {
            parameters.Add(new($"@{(DBDadosProcuracaoDicInfo.EstadoCivil)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.EstadoCivil)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Nacionalidade))
        {
            parameters.Add(new($"@{(DBDadosProcuracaoDicInfo.Nacionalidade)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Nacionalidade)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Profissao))
        {
            parameters.Add(new($"@{(DBDadosProcuracaoDicInfo.Profissao)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Profissao)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.CTPS))
        {
            parameters.Add(new($"@{(DBDadosProcuracaoDicInfo.CTPS)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.CTPS)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.PisPasep))
        {
            parameters.Add(new($"@{(DBDadosProcuracaoDicInfo.PisPasep)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.PisPasep)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Remuneracao))
        {
            parameters.Add(new($"@{(DBDadosProcuracaoDicInfo.Remuneracao)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Remuneracao)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Objeto))
        {
            parameters.Add(new($"@{(DBDadosProcuracaoDicInfo.Objeto)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Objeto)));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{(DBDadosProcuracaoDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
            if (filtro.Codigo_filtro_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBDadosProcuracaoDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
            }
        }

        if (filtro.LogicalOperator.IsEmptyX() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        if (!(filtro.Cliente.IsEmptyX()) && filtro.Cliente_end.IsEmptyX())
        {
            cWhere.Append(filtro.Cliente.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBDadosProcuracaoDicInfo.PTabelaNome}].[{DBDadosProcuracaoDicInfo.Cliente}] = @{(DBDadosProcuracaoDicInfo.Cliente)}");
        }
        else if (!(filtro.Cliente.IsEmptyX()) && !(filtro.Cliente_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBDadosProcuracaoDicInfo.PTabelaNome}].{DBDadosProcuracaoDicInfo.Cliente} BETWEEN @{(DBDadosProcuracaoDicInfo.Cliente)} AND @{(DBDadosProcuracaoDicInfo.Cliente)}_end");
        }

        cWhere.Append(filtro.GUID.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBDadosProcuracaoDicInfo.PTabelaNome}].[{DBDadosProcuracaoDicInfo.GUID}]  {DevourerConsts.MsiCollate} like @{(DBDadosProcuracaoDicInfo.GUID)}");
        cWhere.Append(filtro.EstadoCivil.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBDadosProcuracaoDicInfo.PTabelaNome}].[{DBDadosProcuracaoDicInfo.EstadoCivil}]  {DevourerConsts.MsiCollate} like @{(DBDadosProcuracaoDicInfo.EstadoCivil)}");
        cWhere.Append(filtro.Nacionalidade.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBDadosProcuracaoDicInfo.PTabelaNome}].[{DBDadosProcuracaoDicInfo.Nacionalidade}]  {DevourerConsts.MsiCollate} like @{(DBDadosProcuracaoDicInfo.Nacionalidade)}");
        cWhere.Append(filtro.Profissao.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBDadosProcuracaoDicInfo.PTabelaNome}].[{DBDadosProcuracaoDicInfo.Profissao}]  {DevourerConsts.MsiCollate} like @{(DBDadosProcuracaoDicInfo.Profissao)}");
        cWhere.Append(filtro.CTPS.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBDadosProcuracaoDicInfo.PTabelaNome}].[{DBDadosProcuracaoDicInfo.CTPS}]  {DevourerConsts.MsiCollate} like @{(DBDadosProcuracaoDicInfo.CTPS)}");
        cWhere.Append(filtro.PisPasep.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBDadosProcuracaoDicInfo.PTabelaNome}].[{DBDadosProcuracaoDicInfo.PisPasep}]  {DevourerConsts.MsiCollate} like @{(DBDadosProcuracaoDicInfo.PisPasep)}");
        cWhere.Append(filtro.Remuneracao.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBDadosProcuracaoDicInfo.PTabelaNome}].[{DBDadosProcuracaoDicInfo.Remuneracao}]  {DevourerConsts.MsiCollate} like @{(DBDadosProcuracaoDicInfo.Remuneracao)}");
        cWhere.Append(filtro.Objeto.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBDadosProcuracaoDicInfo.PTabelaNome}].[{DBDadosProcuracaoDicInfo.Objeto}]  {DevourerConsts.MsiCollate} like @{(DBDadosProcuracaoDicInfo.Objeto)}");
        if (!(filtro.Codigo_filtro.IsEmptyX()) && filtro.Codigo_filtro_end.IsEmptyX())
        {
            cWhere.Append(filtro.Codigo_filtro.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBDadosProcuracaoDicInfo.PTabelaNome}].[{DBDadosProcuracaoDicInfo.CampoCodigo}] = @{(DBDadosProcuracaoDicInfo.CampoCodigo)}");
        }
        else if (!(filtro.Codigo_filtro.IsEmptyX()) && !(filtro.Codigo_filtro_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBDadosProcuracaoDicInfo.PTabelaNome}].{DBDadosProcuracaoDicInfo.CampoCodigo} BETWEEN @{(DBDadosProcuracaoDicInfo.CampoCodigo)} AND @{(DBDadosProcuracaoDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private string GetFilterHash(Filters.FilterDadosProcuracao? filtro)
    {
        if (filtro == null)
            return string.Empty;
        var json = JsonSerializer.Serialize(filtro);
        using var sha256 = SHA256.Create();
        var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(json));
        return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
    }

    private async Task<IEnumerable<DadosProcuracaoResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}