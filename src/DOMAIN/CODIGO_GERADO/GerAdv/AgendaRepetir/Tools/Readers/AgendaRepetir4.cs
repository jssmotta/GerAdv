// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Readers;
public partial class AgendaRepetirReader(IFAgendaRepetirFactory agendarepetirFactory) : IAgendaRepetirReader
{
    private readonly IFAgendaRepetirFactory _agendarepetirFactory = agendarepetirFactory;
    public async Task<IEnumerable<AgendaRepetirResponseAll>> Listar(int max, string uri, string cWhere, List<SqlParameter> parameters, string order, CancellationToken cancellationToken) => await ListarTabela(BuildSqlQuery(DBAgendaRepetir.CamposSqlX, cWhere, order, max), parameters, uri, caching: DevourerOne.PCachingDefault, max: max, cancellationToken: cancellationToken);
    private async Task<IEnumerable<AgendaRepetirResponseAll>> ListarTabela(string sql, List<SqlParameter> parameters, string uri, bool caching = DevourerOne.PCachingDefault, int max = 200, CancellationToken cancellationToken = default)
    {
        var result = new List<AgendaRepetirResponseAll>(max);
        await using var connection = Configuracoes.GetConnectionByUri(uri);
        await using var cmd = new SqlCommand(cmdText: ConfiguracoesDBT.CmdSql(sql), connection: connection?.InnerConnection)
        {
            CommandTimeout = 30
        };
        foreach (var param in parameters)
        {
            if (!cmd.Parameters.Contains(param.ParameterName))
            {
                var newParam = new SqlParameter(param.ParameterName, param.Value)
                {
                    SqlDbType = param.SqlDbType,
                    Direction = param.Direction,
                    Size = param.Size,
                    Precision = param.Precision,
                    Scale = param.Scale
                };
                cmd.Parameters.Add(newParam);
            }
        }

        await using var reader = await cmd.ExecuteReaderAsync(CommandBehavior.SingleResult);
        while (await reader.ReadAsync())
        {
            if (cancellationToken.IsCancellationRequested)
                return result;
            result.Add(ReadAll(_agendarepetirFactory.CreateFromReader(reader), reader)!);
        }

        return result;
    }

    public async Task<AgendaRepetirResponse?> Read(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _agendarepetirFactory.CreateFromIdAsync(id, oCnn);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public async Task<Models.AgendaRepetir?> ReadM(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _agendarepetirFactory.CreateFromIdAsync(id, oCnn);
        var agendarepetir = new Models.AgendaRepetir
        {
            Id = dbRec.ID,
            Advogado = dbRec.FAdvogado,
            Cliente = dbRec.FCliente,
            Funcionario = dbRec.FFuncionario,
            Processo = dbRec.FProcesso,
            Pessoal = dbRec.FPessoal,
            Frequencia = dbRec.FFrequencia,
            Dia = dbRec.FDia,
            Mes = dbRec.FMes,
            IDQuem = dbRec.FIDQuem,
            IDQuem2 = dbRec.FIDQuem2,
            Mensagem = dbRec.FMensagem ?? string.Empty,
            IDTipo = dbRec.FIDTipo,
            ID1 = dbRec.FID1,
            ID2 = dbRec.FID2,
            ID3 = dbRec.FID3,
            ID4 = dbRec.FID4,
            Segunda = dbRec.FSegunda,
            Quarta = dbRec.FQuarta,
            Quinta = dbRec.FQuinta,
            Sexta = dbRec.FSexta,
            Sabado = dbRec.FSabado,
            Domingo = dbRec.FDomingo,
            Terca = dbRec.FTerca,
        };
        if (DateTime.TryParse(dbRec.FDataFinal, out DateTime XDataFinal))
        {
            agendarepetir.DataFinal = dbRec.FDataFinal;
            agendarepetir.DataFinal_date = XDataFinal;
        }

        if (DateTime.TryParse(dbRec.FHoraFinal, out DateTime XHoraFinal))
        {
            agendarepetir.HoraFinal = dbRec.FHoraFinal;
            agendarepetir.HoraFinal_date = XHoraFinal;
        }

        if (DateTime.TryParse(dbRec.FHora, out DateTime XHora))
        {
            agendarepetir.Hora = dbRec.FHora;
            agendarepetir.Hora_date = XHora;
        }

        return agendarepetir;
    }

    public AgendaRepetirResponse? Read(FAgendaRepetir dbRec, MsiSqlConnection oCnn)
    {
        return Read(dbRec);
    }

    public AgendaRepetirResponse? Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn)
    {
        using var dbRec = _agendarepetirFactory.CreateFromParameters(parameters, oCnn, sqlWhere: where);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public AgendaRepetirResponse? Read(FAgendaRepetir dbRec) // Track 001.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var agendarepetir = new AgendaRepetirResponse
        {
            Id = dbRec.ID,
            Advogado = dbRec.FAdvogado,
            Cliente = dbRec.FCliente,
            Funcionario = dbRec.FFuncionario,
            Processo = dbRec.FProcesso,
            Pessoal = dbRec.FPessoal,
            Frequencia = dbRec.FFrequencia,
            Dia = dbRec.FDia,
            Mes = dbRec.FMes,
            IDQuem = dbRec.FIDQuem,
            IDQuem2 = dbRec.FIDQuem2,
            Mensagem = dbRec.FMensagem ?? string.Empty,
            IDTipo = dbRec.FIDTipo,
            ID1 = dbRec.FID1,
            ID2 = dbRec.FID2,
            ID3 = dbRec.FID3,
            ID4 = dbRec.FID4,
            Segunda = dbRec.FSegunda,
            Quarta = dbRec.FQuarta,
            Quinta = dbRec.FQuinta,
            Sexta = dbRec.FSexta,
            Sabado = dbRec.FSabado,
            Domingo = dbRec.FDomingo,
            Terca = dbRec.FTerca,
        };
        if (DateTime.TryParse(dbRec.FDataFinal, out DateTime XDataFinal))
        {
            agendarepetir.DataFinal = dbRec.FDataFinal;
            agendarepetir.DataFinal_date = XDataFinal;
        }

        if (DateTime.TryParse(dbRec.FHoraFinal, out DateTime XHoraFinal))
        {
            agendarepetir.HoraFinal = dbRec.FHoraFinal;
            agendarepetir.HoraFinal_date = XHoraFinal;
        }

        if (DateTime.TryParse(dbRec.FHora, out DateTime XHora))
        {
            agendarepetir.Hora = dbRec.FHora;
            agendarepetir.Hora_date = XHora;
        }

        return agendarepetir;
    }

    public AgendaRepetirResponse? Read(SG.GerAdv.DBAgendaRepetir dbRec) // Track 002.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var agendarepetir = new AgendaRepetirResponse
        {
            Id = dbRec.ID,
            Advogado = dbRec.FAdvogado,
            Cliente = dbRec.FCliente,
            Funcionario = dbRec.FFuncionario,
            Processo = dbRec.FProcesso,
            Pessoal = dbRec.FPessoal,
            Frequencia = dbRec.FFrequencia,
            Dia = dbRec.FDia,
            Mes = dbRec.FMes,
            IDQuem = dbRec.FIDQuem,
            IDQuem2 = dbRec.FIDQuem2,
            Mensagem = dbRec.FMensagem ?? string.Empty,
            IDTipo = dbRec.FIDTipo,
            ID1 = dbRec.FID1,
            ID2 = dbRec.FID2,
            ID3 = dbRec.FID3,
            ID4 = dbRec.FID4,
            Segunda = dbRec.FSegunda,
            Quarta = dbRec.FQuarta,
            Quinta = dbRec.FQuinta,
            Sexta = dbRec.FSexta,
            Sabado = dbRec.FSabado,
            Domingo = dbRec.FDomingo,
            Terca = dbRec.FTerca,
        };
        if (DateTime.TryParse(dbRec.FDataFinal, out DateTime XDataFinal))
        {
            agendarepetir.DataFinal = dbRec.FDataFinal;
            agendarepetir.DataFinal_date = XDataFinal;
        }

        if (DateTime.TryParse(dbRec.FHoraFinal, out DateTime XHoraFinal))
        {
            agendarepetir.HoraFinal = dbRec.FHoraFinal;
            agendarepetir.HoraFinal_date = XHoraFinal;
        }

        if (DateTime.TryParse(dbRec.FHora, out DateTime XHora))
        {
            agendarepetir.Hora = dbRec.FHora;
            agendarepetir.Hora_date = XHora;
        }

        return agendarepetir;
    }

    public AgendaRepetirResponseAll? ReadAll(FAgendaRepetir dbRec, IDataRecord dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var agendarepetir = new AgendaRepetirResponseAll
        {
            Id = dbRec.ID,
            Advogado = dbRec.FAdvogado,
            Cliente = dbRec.FCliente,
            Funcionario = dbRec.FFuncionario,
            Processo = dbRec.FProcesso,
            Pessoal = dbRec.FPessoal,
            Frequencia = dbRec.FFrequencia,
            Dia = dbRec.FDia,
            Mes = dbRec.FMes,
            IDQuem = dbRec.FIDQuem,
            IDQuem2 = dbRec.FIDQuem2,
            Mensagem = dbRec.FMensagem ?? string.Empty,
            IDTipo = dbRec.FIDTipo,
            ID1 = dbRec.FID1,
            ID2 = dbRec.FID2,
            ID3 = dbRec.FID3,
            ID4 = dbRec.FID4,
            Segunda = dbRec.FSegunda,
            Quarta = dbRec.FQuarta,
            Quinta = dbRec.FQuinta,
            Sexta = dbRec.FSexta,
            Sabado = dbRec.FSabado,
            Domingo = dbRec.FDomingo,
            Terca = dbRec.FTerca,
        };
        if (DateTime.TryParse(dbRec.FDataFinal, out DateTime XDataFinal))
        {
            agendarepetir.DataFinal = dbRec.FDataFinal;
            agendarepetir.DataFinal_date = XDataFinal;
        }

        if (DateTime.TryParse(dbRec.FHoraFinal, out DateTime XHoraFinal))
        {
            agendarepetir.HoraFinal = dbRec.FHoraFinal;
            agendarepetir.HoraFinal_date = XHoraFinal;
        }

        if (DateTime.TryParse(dbRec.FHora, out DateTime XHora))
        {
            agendarepetir.Hora = dbRec.FHora;
            agendarepetir.Hora_date = XHora;
        }

        try
        {
            agendarepetir.NomeAdvogados = dr[DBAdvogadosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agendarepetir.NomeClientes = dr[DBClientesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agendarepetir.NomeFuncionarios = dr[DBFuncionariosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agendarepetir.NroPastaProcessos = dr[DBProcessosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return agendarepetir;
    }

    public AgendaRepetirResponseAll? ReadAll(SG.GerAdv.DBAgendaRepetir dbRec, DataRow dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var agendarepetir = new AgendaRepetirResponseAll
        {
            Id = dbRec.ID,
            Advogado = dbRec.FAdvogado,
            Cliente = dbRec.FCliente,
            Funcionario = dbRec.FFuncionario,
            Processo = dbRec.FProcesso,
            Pessoal = dbRec.FPessoal,
            Frequencia = dbRec.FFrequencia,
            Dia = dbRec.FDia,
            Mes = dbRec.FMes,
            IDQuem = dbRec.FIDQuem,
            IDQuem2 = dbRec.FIDQuem2,
            Mensagem = dbRec.FMensagem ?? string.Empty,
            IDTipo = dbRec.FIDTipo,
            ID1 = dbRec.FID1,
            ID2 = dbRec.FID2,
            ID3 = dbRec.FID3,
            ID4 = dbRec.FID4,
            Segunda = dbRec.FSegunda,
            Quarta = dbRec.FQuarta,
            Quinta = dbRec.FQuinta,
            Sexta = dbRec.FSexta,
            Sabado = dbRec.FSabado,
            Domingo = dbRec.FDomingo,
            Terca = dbRec.FTerca,
        };
        if (DateTime.TryParse(dbRec.FDataFinal, out DateTime XDataFinal))
        {
            agendarepetir.DataFinal = dbRec.FDataFinal;
            agendarepetir.DataFinal_date = XDataFinal;
        }

        if (DateTime.TryParse(dbRec.FHoraFinal, out DateTime XHoraFinal))
        {
            agendarepetir.HoraFinal = dbRec.FHoraFinal;
            agendarepetir.HoraFinal_date = XHoraFinal;
        }

        if (DateTime.TryParse(dbRec.FHora, out DateTime XHora))
        {
            agendarepetir.Hora = dbRec.FHora;
            agendarepetir.Hora_date = XHora;
        }

        try
        {
            agendarepetir.NomeAdvogados = dr[DBAdvogadosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agendarepetir.NomeClientes = dr[DBClientesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agendarepetir.NomeFuncionarios = dr[DBFuncionariosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agendarepetir.NroPastaProcessos = dr[DBProcessosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return agendarepetir;
    }
}