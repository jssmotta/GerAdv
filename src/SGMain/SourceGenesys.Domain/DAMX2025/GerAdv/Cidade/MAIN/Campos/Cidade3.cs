// 100% auto-generated by Source Genesys Core
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming 1
public partial class DBCidade
{
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool pFldFDDD, pFldFTop, pFldFComarca, pFldFCapital, pFldFNome, pFldFUF, pFldFSigla, pFldFGUID;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected int m_FUF;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected string? m_FDDD, m_FNome, m_FSigla, m_FGUID;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool m_FTop, m_FComarca, m_FCapital;
    // Tracking Code: 20250503
    [StringLength(10, ErrorMessage = "A propriedade FDDD da tabela Cidade deve ter no máximo 10 caracteres.")]
    public virtual string? FDDD
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDDD ?? string.Empty;
        set
        {
            pFldFDDD = pFldFDDD || !(m_FDDD ?? string.Empty).Equals(value);
            if (pFldFDDD)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FDDD = trimmed.Length > 10 ? trimmed.AsSpan(0, 10).ToString() : trimmed;
            }
        }
    }

    public virtual bool FTop
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FTop;
        set
        {
            pFldFTop = pFldFTop || value != m_FTop;
            if (pFldFTop)
                m_FTop = value;
        }
    }

    public virtual bool FComarca
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FComarca;
        set
        {
            pFldFComarca = pFldFComarca || value != m_FComarca;
            if (pFldFComarca)
                m_FComarca = value;
        }
    }

    public virtual bool FCapital
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCapital;
        set
        {
            pFldFCapital = pFldFCapital || value != m_FCapital;
            if (pFldFCapital)
                m_FCapital = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(40, ErrorMessage = "A propriedade FNome da tabela Cidade deve ter no máximo 40 caracteres.")]
    public virtual string? FNome
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNome ?? string.Empty;
        set
        {
            pFldFNome = pFldFNome || !(m_FNome ?? string.Empty).Equals(value);
            if (pFldFNome)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FNome = trimmed.Length > 40 ? trimmed.AsSpan(0, 40).ToString() : trimmed;
            }
        }
    }

    public virtual int FUF
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FUF;
        set
        {
            pFldFUF = pFldFUF || value != m_FUF;
            if (pFldFUF)
                m_FUF = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(10, ErrorMessage = "A propriedade FSigla da tabela Cidade deve ter no máximo 10 caracteres.")]
    public virtual string? FSigla
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FSigla ?? string.Empty;
        set
        {
            pFldFSigla = pFldFSigla || !(m_FSigla ?? string.Empty).Equals(value);
            if (pFldFSigla)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FSigla = trimmed.Length > 10 ? trimmed.AsSpan(0, 10).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(100, ErrorMessage = "A propriedade FGUID da tabela Cidade deve ter no máximo 100 caracteres.")]
    public virtual string? FGUID
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FGUID ?? string.Empty;
        set
        {
            pFldFGUID = pFldFGUID || !(m_FGUID ?? string.Empty).Equals(value);
            if (pFldFGUID)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FGUID = trimmed.Length > 100 ? trimmed.AsSpan(0, 100).ToString() : trimmed;
            }
        }
    }

    public void SetAuditor(int usuarioId) => AuditorQuem = usuarioId;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITabelaName() => PTabelaNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoCodigo() => CampoCodigo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoNome() => CampoNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string IPrefixo() => PTabelaPrefixo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITypeFieldCode() => "int";
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IdIsIdentity() => false;
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetID() => ID;
}