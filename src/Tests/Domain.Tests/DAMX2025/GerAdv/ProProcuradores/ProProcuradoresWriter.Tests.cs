// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class ProProcuradoresWriterTests
{
    private readonly Mock<IFProProcuradoresFactory> _mockProProcuradoresFactory;
    private readonly Mock<FProProcuradores> _mockFProProcuradores;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly ProProcuradoresWriter _proprocuradoresWriter;
    public ProProcuradoresWriterTests()
    {
        _mockProProcuradoresFactory = new Mock<IFProProcuradoresFactory>();
        _mockFProProcuradores = new Mock<FProProcuradores>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _proprocuradoresWriter = new ProProcuradoresWriter(_mockProProcuradoresFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var proprocuradores = CreateValidProProcuradoresModel();
        proprocuradores.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockProProcuradoresFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFProProcuradores.Object);
        _mockFProProcuradores.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _proprocuradoresWriter.WriteAsync(proprocuradores, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFProProcuradores.Object);
        _mockProProcuradoresFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockProProcuradoresFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFProProcuradores.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var proprocuradores = CreateValidProProcuradoresModel();
        proprocuradores.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockProProcuradoresFactory.Setup(x => x.CreateFromIdAsync(proprocuradores.Id, _mockConnection.Object)).ReturnsAsync(_mockFProProcuradores.Object);
        _mockFProProcuradores.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _proprocuradoresWriter.WriteAsync(proprocuradores, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFProProcuradores.Object);
        _mockProProcuradoresFactory.Verify(x => x.CreateFromIdAsync(proprocuradores.Id, _mockConnection.Object), Times.Once);
        _mockProProcuradoresFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFProProcuradores.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var proprocuradores = CreateValidProProcuradoresModel();
        var auditorQuem = 99;
        _mockProProcuradoresFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFProProcuradores.Object);
        _mockFProProcuradores.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _proprocuradoresWriter.WriteAsync(proprocuradores, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFProProcuradores.Object);
        _mockFProProcuradores.VerifySet(x => x.FAdvogado = proprocuradores.Advogado, Times.Once);
        _mockFProProcuradores.VerifySet(x => x.FNome = proprocuradores.Nome, Times.Once);
        _mockFProProcuradores.VerifySet(x => x.FProcesso = proprocuradores.Processo, Times.Once);
        _mockFProProcuradores.VerifySet(x => x.FData = proprocuradores.Data, Times.Once);
        _mockFProProcuradores.VerifySet(x => x.FSubstabelecimento = proprocuradores.Substabelecimento, Times.Once);
        _mockFProProcuradores.VerifySet(x => x.FProcuracao = proprocuradores.Procuracao, Times.Once);
        _mockFProProcuradores.VerifySet(x => x.FGUID = proprocuradores.GUID, Times.Once);
        _mockFProProcuradores.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var proprocuradores = CreateValidProProcuradoresModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockProProcuradoresFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _proprocuradoresWriter.WriteAsync(proprocuradores, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var proprocuradores = CreateValidProProcuradoresModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockProProcuradoresFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFProProcuradores.Object);
        _mockFProProcuradores.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _proprocuradoresWriter.WriteAsync(proprocuradores, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var proprocuradoresResponse = new ProProcuradoresResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockProProcuradoresFactory.Setup(x => x.DeleteAsync(operadorId, proprocuradoresResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _proprocuradoresWriter.Delete(proprocuradoresResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockProProcuradoresFactory.Verify(x => x.DeleteAsync(operadorId, proprocuradoresResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var proprocuradoresResponse = new ProProcuradoresResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockProProcuradoresFactory.Setup(x => x.DeleteAsync(operadorId, proprocuradoresResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _proprocuradoresWriter.Delete(proprocuradoresResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var proprocuradoresResponse = new ProProcuradoresResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockProProcuradoresFactory.Setup(x => x.DeleteAsync(operadorId, proprocuradoresResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _proprocuradoresWriter.Delete(proprocuradoresResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new ProProcuradoresWriter(_mockProProcuradoresFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new ProProcuradoresWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.ProProcuradores CreateValidProProcuradoresModel()
    {
        return new Models.ProProcuradores
        {
            Id = 0,
            Advogado = 1,
            Nome = "João",
            Processo = 1,
            Data = "27/05/2022",
            Substabelecimento = false,
            Procuracao = false,
            GUID = Guid.NewGuid().ToString()
        };
    }
#endregion
}