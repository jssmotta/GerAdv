// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface ITipoEMailValidation
{
    Task<bool> ValidateReg(Models.TipoEMail reg, ITipoEMailService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, ITipoEMailService service, ISMSAliceService smsaliceService, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class TipoEMailValidation : ITipoEMailValidation
{
    public async Task<bool> CanDelete(int id, ITipoEMailService service, ISMSAliceService smsaliceService, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        var smsaliceExists0 = await smsaliceService.Filter(new Filters.FilterSMSAlice { TipoEMail = id }, uri);
        if (smsaliceExists0 != null && smsaliceExists0.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela S M S Alice associados a ele.");
        return true;
    }

    private bool ValidSizes(Models.TipoEMail reg)
    {
        if (reg.Nome.Length > 50)
            throw new SGValidationException($"Nome deve ter no máximo 50 caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.TipoEMail reg, ITipoEMailService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Nome))
            throw new SGValidationException("Nome é obrigatório");
        if (await IsDuplicado(reg, service, uri))
            throw new SGValidationException($"Tipo E Mail '{reg.Nome}'  - Nome");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        return true;
    }

    private async Task<bool> IsDuplicado(Models.TipoEMail reg, ITipoEMailService service, string uri)
    {
        var existingTipoEMail = (await service.Filter(new Filters.FilterTipoEMail { Nome = reg.Nome }, uri)).FirstOrDefault(); // TRACK 10042025
        return existingTipoEMail != null && existingTipoEMail.Id > 0 && existingTipoEMail.Id != reg.Id;
    }
}