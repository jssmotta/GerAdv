// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IPreClientesValidation
{
    Task<bool> ValidateReg(Models.PreClientes reg, IPreClientesService service, IClientesReader clientesReader, ICidadeReader cidadeReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, IPreClientesService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class PreClientesValidation : IPreClientesValidation
{
    public async Task<bool> CanDelete(int id, IPreClientesService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.PreClientes reg)
    {
        if (reg.QuemIndicou != null && reg.QuemIndicou.Length > 80)
            throw new SGValidationException($"QuemIndicou deve ter no máximo 80 caracteres.");
        if (reg.Nome != null && reg.Nome.Length > 80)
            throw new SGValidationException($"Nome deve ter no máximo 80 caracteres.");
        if (reg.NomeFantasia != null && reg.NomeFantasia.Length > 80)
            throw new SGValidationException($"NomeFantasia deve ter no máximo 80 caracteres.");
        if (reg.Class != null && reg.Class.Length > 1)
            throw new SGValidationException($"Class deve ter no máximo 1 caracteres.");
        if (reg.InscEst != null && reg.InscEst.Length > 15)
            throw new SGValidationException($"InscEst deve ter no máximo 15 caracteres.");
        if (reg.Qualificacao != null && reg.Qualificacao.Length > 100)
            throw new SGValidationException($"Qualificacao deve ter no máximo 100 caracteres.");
        if (reg.CNPJ != null && reg.CNPJ.ClearInputCepCpfCnpj().Length > 14)
            throw new SGValidationException($"CNPJ deve ter no máximo 14 caracteres.");
        if (reg.CPF != null && reg.CPF.ClearInputCepCpfCnpj().Length > 11)
            throw new SGValidationException($"CPF deve ter no máximo 11 caracteres.");
        if (reg.RG != null && reg.RG.Length > 30)
            throw new SGValidationException($"RG deve ter no máximo 30 caracteres.");
        if (reg.Endereco != null && reg.Endereco.Length > 80)
            throw new SGValidationException($"Endereco deve ter no máximo 80 caracteres.");
        if (reg.Bairro != null && reg.Bairro.Length > 50)
            throw new SGValidationException($"Bairro deve ter no máximo 50 caracteres.");
        if (reg.CEP != null && reg.CEP.ClearInputCepCpfCnpj().Length > 10)
            throw new SGValidationException($"CEP deve ter no máximo 10 caracteres.");
        if (reg.HomePage != null && reg.HomePage.Length > 60)
            throw new SGValidationException($"HomePage deve ter no máximo 60 caracteres.");
        if (reg.Assistido != null && reg.Assistido.Length > 50)
            throw new SGValidationException($"Assistido deve ter no máximo 50 caracteres.");
        if (reg.AssRG != null && reg.AssRG.Length > 30)
            throw new SGValidationException($"AssRG deve ter no máximo 30 caracteres.");
        if (reg.AssCPF != null && reg.AssCPF.Length > 12)
            throw new SGValidationException($"AssCPF deve ter no máximo 12 caracteres.");
        if (reg.AssEndereco != null && reg.AssEndereco.Length > 70)
            throw new SGValidationException($"AssEndereco deve ter no máximo 70 caracteres.");
        if (reg.CNH != null && reg.CNH.Length > 100)
            throw new SGValidationException($"CNH deve ter no máximo 100 caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.PreClientes reg, IPreClientesService service, IClientesReader clientesReader, ICidadeReader cidadeReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Nome))
            throw new SGValidationException("Nome é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.EMail.Length > 0 && !reg.EMail.IsValidEmail())
            throw new SGValidationException($"EMail em formato inválido.");
        if (!string.IsNullOrWhiteSpace(reg.CPF))
        {
            var testaCpf = await IsCpfDuplicado(reg, service, uri);
            if (testaCpf.Item1 && testaCpf.Item2 != null)
            {
                throw new SGValidationException($"Pre Clientes ({testaCpf.Item2.Nome}) com cpf '{reg.CPF.MaskCpf()}' já cadastrado.");
            }
            else if (testaCpf.Item1)
            {
                throw new SGValidationException($"Pre Clientes com cpf '{reg.CPF.MaskCpf()}' já cadastrado.");
            }
        }

        if (!string.IsNullOrWhiteSpace(reg.CNPJ) && await IsCnpjDuplicado(reg, service, uri))
            throw new SGValidationException($"Pre Clientes com cnpj {reg.CNPJ.MaskCnpj()} já cadastrado.");
        // Clientes
        if (!reg.IDRep.IsEmptyIDNumber())
        {
            var regClientes = await clientesReader.Read(reg.IDRep, oCnn);
            if (regClientes == null || regClientes.Id != reg.IDRep)
            {
                throw new SGValidationException($"Clientes não encontrado ({regClientes?.Id}).");
            }
        }

        // Cidade
        if (!reg.Cidade.IsEmptyIDNumber())
        {
            var regCidade = await cidadeReader.Read(reg.Cidade, oCnn);
            if (regCidade == null || regCidade.Id != reg.Cidade)
            {
                throw new SGValidationException($"Cidade não encontrado ({regCidade?.Id}).");
            }
        }

        return true;
    }

    private async Task<bool> IsCnpjDuplicado(Models.PreClientes reg, IPreClientesService service, string uri)
    {
        if (reg.CNPJ.ClearInputCnpj().Length == 0)
            return false;
        var existingPreClientes = (await service.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterPreClientes { CNPJ = reg.CNPJ.ClearInputCnpj() }, uri)).FirstOrDefault();
        return existingPreClientes != null && existingPreClientes.Id > 0 && existingPreClientes.Id != reg.Id;
    }

    private async Task<(bool, PreClientesResponseAll? )> IsCpfDuplicado(Models.PreClientes reg, IPreClientesService service, string uri)
    {
        if (reg.CPF.ClearInputCpf().Length == 0)
            return (false, null);
        var existingPreClientes = (await service.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterPreClientes { CPF = reg.CPF.ClearInputCpf() }, uri)).FirstOrDefault();
        return (existingPreClientes != null && existingPreClientes.Id > 0 && existingPreClientes.Id != reg.Id, existingPreClientes);
    }
}