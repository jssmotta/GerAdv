// 100% auto-generated by Source Genesys Core
// copyright Â© 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming
public partial class DBOperador
{
    public DBOperador(DataRow? dbRec)
    {
        if (dbRec is null)
            return;
        InitFromRecord(name =>
        {
            try
            {
                return dbRec[name];
            }
            catch
            {
                return DBNull.Value;
            }
        });
    }

    public DBOperador(SqlDataReader? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do Operador: {ex.Message}", ex);
        }
    }

    private void InitFromRecord(Func<string, object?> getValue)
    {
        if (DBNull.Value.Equals(getValue(CampoCodigo)))
            return;
        ID = Convert.ToInt32(getValue(CampoCodigo));
        // Checkpoint Carregar 
        try
        {
            if (!DBNull.Value.Equals(getValue(DBOperadorDicInfo.Basico)))
                m_FBasico = Convert.ToBoolean(getValue(DBOperadorDicInfo.Basico));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOperadorDicInfo.CadCod)))
                m_FCadCod = Convert.ToInt32(getValue(DBOperadorDicInfo.CadCod));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOperadorDicInfo.CadID)))
                m_FCadID = Convert.ToInt32(getValue(DBOperadorDicInfo.CadID));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOperadorDicInfo.Computador)))
                m_FComputador = Convert.ToInt32(getValue(DBOperadorDicInfo.Computador));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOperadorDicInfo.DataLimiteReset)))
                m_FDataLimiteReset = Convert.ToDateTime(getValue(DBOperadorDicInfo.DataLimiteReset));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOperadorDicInfo.DtAtu)))
                m_FDtAtu = Convert.ToDateTime(getValue(DBOperadorDicInfo.DtAtu));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOperadorDicInfo.DtCad)))
                m_FDtCad = Convert.ToDateTime(getValue(DBOperadorDicInfo.DtCad));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOperadorDicInfo.EMailConfirmado)))
                m_FEMailConfirmado = Convert.ToBoolean(getValue(DBOperadorDicInfo.EMailConfirmado));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOperadorDicInfo.Excluido)))
                m_FExcluido = Convert.ToBoolean(getValue(DBOperadorDicInfo.Excluido));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOperadorDicInfo.Externo)))
                m_FExterno = Convert.ToBoolean(getValue(DBOperadorDicInfo.Externo));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOperadorDicInfo.IsFinanceiro)))
                m_FIsFinanceiro = Convert.ToBoolean(getValue(DBOperadorDicInfo.IsFinanceiro));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOperadorDicInfo.Master)))
                m_FMaster = Convert.ToBoolean(getValue(DBOperadorDicInfo.Master));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOperadorDicInfo.OnLine)))
                m_FOnLine = Convert.ToBoolean(getValue(DBOperadorDicInfo.OnLine));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOperadorDicInfo.QuemAtu)))
                m_FQuemAtu = Convert.ToInt32(getValue(DBOperadorDicInfo.QuemAtu));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOperadorDicInfo.QuemCad)))
                m_FQuemCad = Convert.ToInt32(getValue(DBOperadorDicInfo.QuemCad));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOperadorDicInfo.Sexo)))
                m_FSexo = Convert.ToBoolean(getValue(DBOperadorDicInfo.Sexo));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOperadorDicInfo.Situacao)))
                m_FSituacao = Convert.ToBoolean(getValue(DBOperadorDicInfo.Situacao));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOperadorDicInfo.StatusId)))
                m_FStatusId = Convert.ToInt32(getValue(DBOperadorDicInfo.StatusId));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOperadorDicInfo.SuporteMaxAge)))
                m_FSuporteMaxAge = Convert.ToDateTime(getValue(DBOperadorDicInfo.SuporteMaxAge));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOperadorDicInfo.SuporteUltimoAcesso)))
                m_FSuporteUltimoAcesso = Convert.ToDateTime(getValue(DBOperadorDicInfo.SuporteUltimoAcesso));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOperadorDicInfo.SysOp)))
                m_FSysOp = Convert.ToBoolean(getValue(DBOperadorDicInfo.SysOp));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOperadorDicInfo.Telefonista)))
                m_FTelefonista = Convert.ToBoolean(getValue(DBOperadorDicInfo.Telefonista));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOperadorDicInfo.Top)))
                m_FTop = Convert.ToBoolean(getValue(DBOperadorDicInfo.Top));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOperadorDicInfo.UltimoLogoff)))
                m_FUltimoLogoff = Convert.ToDateTime(getValue(DBOperadorDicInfo.UltimoLogoff));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBOperadorDicInfo.Visto)))
                m_FVisto = Convert.ToBoolean(getValue(DBOperadorDicInfo.Visto));
        }
        catch
        {
        }

        try
        {
            m_FEMail = getValue(DBOperadorDicInfo.EMail)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FEMailNet = getValue(DBOperadorDicInfo.EMailNet)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FGUID = getValue(DBOperadorDicInfo.GUID)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FMinhaDescricao = getValue(DBOperadorDicInfo.MinhaDescricao)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FNick = getValue(DBOperadorDicInfo.Nick)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FNome = getValue(DBOperadorDicInfo.Nome)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FOnlineIP = getValue(DBOperadorDicInfo.OnlineIP)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FPasta = getValue(DBOperadorDicInfo.Pasta)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FRamal = getValue(DBOperadorDicInfo.Ramal)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FSenha256 = getValue(DBOperadorDicInfo.Senha256)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FStatusMessage = getValue(DBOperadorDicInfo.StatusMessage)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FSuporteIpUltimoAcesso = getValue(DBOperadorDicInfo.SuporteIpUltimoAcesso)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FSuporteNomeSolicitante = getValue(DBOperadorDicInfo.SuporteNomeSolicitante)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FSuporteSenha256 = getValue(DBOperadorDicInfo.SuporteSenha256)?.ToString() ?? string.Empty;
        }
        catch
        {
        }
    }

    public void CarregarDadosBd(DataRow? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do Operador: {ex.Message}", ex);
        }
    }

    public void CarregarDadosBd(SqlDataReader? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do Operador: {ex.Message}", ex);
        }
    }
}