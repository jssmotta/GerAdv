// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
public partial class DBContatoCRM
{
    /// <summary>
    /// Factory method async para carregar [tableMin]
    /// </summary>
    public static async Task<DBContatoCRM> CreateAsync(int nCodigo, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        var registro = new DBContatoCRM();
        await registro.CarregarAsync(nCodigo, oCnn, cancellationToken);
        return registro;
    }

    /// <summary>
    /// Carregar dados async
    /// </summary>
    protected async Task CarregarAsync(int id, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        if (id.IsEmptyIDNumber() || oCnn is null)
            return;
        using var cmd = new SqlCommand($"{ConfiguracoesDBT.SQLNoCount}SELECT TOP (1) {CamposSqlX} FROM {PTabelaNome.dbo(oCnn)} WHERE [{CampoCodigo}] = @ThisIDToLoad", oCnn.InnerConnection);
        cmd.Parameters.AddWithValue("@ThisIDToLoad", id);
        using var ds = await ConfiguracoesDBT.GetDataTableAsync(cmd, CommandBehavior.SingleRow, oCnn, cancellationToken);
        if (ds?.Rows.Count > 0)
        {
            CarregarDadosBd(ds.Rows[0]);
        }
    }

#if (!NOTSTORED_ContatoCRM)
    /// <summary>
    /// Update async com timeout e cancellation
    /// </summary>
    public async Task<int> UpdateAsync(MsiSqlConnection? oCnn, int insertId = 0, CancellationToken cancellationToken = default, int timeoutSeconds = 30)
    {
        var isInsert = insertId == 0 && ID == 0;
        if (!isInsert && !HasAnyFieldChanged())
            return 0;
        if (oCnn is null)
        {
#if DEBUG
            PTabelaNome.PopupBox("oCnn is null - UpdateAsync()");
#endif
            return 0;
        }

        try
        {
            var updateTool = new DBToolWTable32Async(PTabelaNome, CampoCodigo, ID == 0)
            {
                IsMachineCode = true,
            };
            updateTool.Where = isInsert ? string.Empty : $"{CampoCodigo}={ID}";
            ConfigureUpdateFields(updateTool);
            ConfigureAuditorFields(updateTool);
            if (insertId != 0)
            {
                return await GravaNewIdAsync(updateTool, insertId, oCnn, cancellationToken);
            }

            var result = await updateTool.RecUpdateAsync(oCnn, cancellationToken);
            if (updateTool.Insert && result == "OK")
            {
                ID = updateTool.GetCodigo();
                if (ID == 0)
                {
                    Error = -2;
                    ErrorDescription = "O registro não pode ser incluído, tente mais tarde.";
                    return Error;
                }
            }

            return result == "OK" ? 0 : -1;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (Exception ex)
        {
            Error = -1;
            ErrorDescription = ex.Message;
            return Error;
        }
    }

#endif
    /// <summary>
    /// Verificar se existe async
    /// </summary>
    public static async Task<bool> ExisteAsync(int id, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        if (oCnn is null || id <= 0)
            return false;
        var existe = await ConfiguracoesDBT.GetScalarAsync<int?>($"SELECT 1 FROM {PTabelaNome.dbo(oCnn)} WHERE {CampoCodigo} = {id}", oCnn, cancellationToken);
        return existe.HasValue;
    }

    /// <summary>
    /// Delete async
    /// </summary>
    /// <param name = "operadorId">For future Audity</param>
    /// <param name = "id"></param>
    /// <param name = "oCnn"></param>
    /// <param name = "cancellationToken"></param>
    /// <returns></returns>
    /// <exception cref = "InvalidOperationException"></exception>
    public static async Task<bool> DeleteRecordAsync(int operadorId, int id, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        if (oCnn is null || id <= 0)
            return false;
        var sql = $"DELETE FROM {PTabelaNome.dbo(oCnn)} WHERE {CampoCodigo} = @Id";
        try
        {
            using var cmd = new SqlCommand(sql, oCnn.InnerConnection);
            cmd.Parameters.AddWithValue("@Id", id);
            var rowsAffected = await cmd.ExecuteNonQueryAsync(cancellationToken);
            return rowsAffected > 0;
        }
        catch (SqlException ex)when (ex.Number == 547)
        {
            throw new InvalidOperationException("Este registro não pode ser excluído, pois está vinculado a outros registros.");
        }
    }

#if (!NOTSTORED_ContatoCRM)
    // Helper methods
    private bool HasAnyFieldChanged() => pFldFAgeClienteAvisado || pFldFDocsViaRecebimento || pFldFNaoPublicavel || pFldFNotificar || pFldFOcultar || pFldFAssunto || pFldFIsDocsRecebidos || pFldFQuemNotificou || pFldFDataNotificou || pFldFOperador || pFldFCliente || pFldFHoraNotificou || pFldFObjetoNotificou || pFldFPessoaContato || pFldFData || pFldFTempo || pFldFHoraInicial || pFldFHoraFinal || pFldFProcesso || pFldFImportante || pFldFUrgente || pFldFGerarHoraTrabalhada || pFldFExibirNoTopo || pFldFTipoContatoCRM || pFldFContato || pFldFEmocao || pFldFContinuar || pFldFGUID;
    private void ConfigureUpdateFields(DBToolWTable32Async updateTool)
    {
        if (pFldFAgeClienteAvisado)
            updateTool.Fields(DBContatoCRMDicInfo.AgeClienteAvisado, m_FAgeClienteAvisado, ETiposCampos.FNumber);
        if (pFldFDocsViaRecebimento)
            updateTool.Fields(DBContatoCRMDicInfo.DocsViaRecebimento, m_FDocsViaRecebimento, ETiposCampos.FNumber);
        if (pFldFNaoPublicavel)
            updateTool.Fields(DBContatoCRMDicInfo.NaoPublicavel, m_FNaoPublicavel, ETiposCampos.FBoolean);
        if (pFldFNotificar)
            updateTool.Fields(DBContatoCRMDicInfo.Notificar, m_FNotificar, ETiposCampos.FBoolean);
        if (pFldFOcultar)
            updateTool.Fields(DBContatoCRMDicInfo.Ocultar, m_FOcultar, ETiposCampos.FBoolean);
        if (pFldFAssunto)
            updateTool.Fields(DBContatoCRMDicInfo.Assunto, m_FAssunto, ETiposCampos.FString);
        if (pFldFIsDocsRecebidos)
            updateTool.Fields(DBContatoCRMDicInfo.IsDocsRecebidos, m_FIsDocsRecebidos, ETiposCampos.FBoolean);
        if (pFldFQuemNotificou)
            updateTool.Fields(DBContatoCRMDicInfo.QuemNotificou, m_FQuemNotificou, ETiposCampos.FNumber);
        if (pFldFDataNotificou)
            updateTool.Fields(DBContatoCRMDicInfo.DataNotificou, m_FDataNotificou, ETiposCampos.FDate);
        if (pFldFOperador)
            updateTool.Fields(DBContatoCRMDicInfo.Operador, m_FOperador, ETiposCampos.FNumber);
        if (pFldFCliente)
            updateTool.Fields(DBContatoCRMDicInfo.Cliente, m_FCliente, ETiposCampos.FNumber);
        if (pFldFHoraNotificou)
            updateTool.Fields(DBContatoCRMDicInfo.HoraNotificou, m_FHoraNotificou, ETiposCampos.FDate);
        if (pFldFObjetoNotificou)
            updateTool.Fields(DBContatoCRMDicInfo.ObjetoNotificou, m_FObjetoNotificou, ETiposCampos.FNumber);
        if (pFldFPessoaContato)
            updateTool.Fields(DBContatoCRMDicInfo.PessoaContato, m_FPessoaContato, ETiposCampos.FString);
        if (pFldFData)
            updateTool.Fields(DBContatoCRMDicInfo.Data, m_FData, ETiposCampos.FString);
        if (pFldFTempo)
            updateTool.Fields(DBContatoCRMDicInfo.Tempo, m_FTempo, ETiposCampos.FDecimal);
        if (pFldFHoraInicial)
            updateTool.Fields(DBContatoCRMDicInfo.HoraInicial, m_FHoraInicial, ETiposCampos.FDate);
        if (pFldFHoraFinal)
            updateTool.Fields(DBContatoCRMDicInfo.HoraFinal, m_FHoraFinal, ETiposCampos.FDate);
        if (pFldFProcesso)
            updateTool.Fields(DBContatoCRMDicInfo.Processo, m_FProcesso, ETiposCampos.FNumber);
        if (pFldFImportante)
            updateTool.Fields(DBContatoCRMDicInfo.Importante, m_FImportante, ETiposCampos.FBoolean);
        if (pFldFUrgente)
            updateTool.Fields(DBContatoCRMDicInfo.Urgente, m_FUrgente, ETiposCampos.FBoolean);
        if (pFldFGerarHoraTrabalhada)
            updateTool.Fields(DBContatoCRMDicInfo.GerarHoraTrabalhada, m_FGerarHoraTrabalhada, ETiposCampos.FBoolean);
        if (pFldFExibirNoTopo)
            updateTool.Fields(DBContatoCRMDicInfo.ExibirNoTopo, m_FExibirNoTopo, ETiposCampos.FBoolean);
        if (pFldFTipoContatoCRM)
            updateTool.Fields(DBContatoCRMDicInfo.TipoContatoCRM, m_FTipoContatoCRM, ETiposCampos.FNumber);
        if (pFldFContato)
            updateTool.Fields(DBContatoCRMDicInfo.Contato, m_FContato, ETiposCampos.FString);
        if (pFldFEmocao)
            updateTool.Fields(DBContatoCRMDicInfo.Emocao, m_FEmocao, ETiposCampos.FNumber);
        if (pFldFContinuar)
            updateTool.Fields(DBContatoCRMDicInfo.Continuar, m_FContinuar, ETiposCampos.FBoolean);
        if (pFldFGUID)
            updateTool.Fields(DBContatoCRMDicInfo.GUID, m_FGUID, ETiposCampos.FString);
    }

#endif
    private void ConfigureAuditorFields(DBToolWTable32Async updateTool)
    {
        var isInsert = ID.IsEmptyIDNumber();
        if (m_AuditorQuem == 0)
            AuditorQuem = 1;
        if (isInsert)
            updateTool.Fields(DBContatoCRMDicInfo.QuemCad, AuditorQuem, ETiposCampos.FNumber);
        if (isInsert)
            updateTool.Fields(DBContatoCRMDicInfo.DtCad, DevourerOne.DateTimeUtc, ETiposCampos.FDate);
        if (!isInsert)
            updateTool.Fields(DBContatoCRMDicInfo.QuemAtu, AuditorQuem, ETiposCampos.FNumber);
        if (!isInsert)
            updateTool.Fields(DBContatoCRMDicInfo.DtAtu, DevourerOne.DateTimeUtc, ETiposCampos.FDate);
        updateTool.Fields(DBContatoCRMDicInfo.Visto, false, ETiposCampos.FBoolean);
    }

    private async Task<int> GravaNewIdAsync(DBToolWTable32Async updateTool, int insertId, MsiSqlConnection oCnn, CancellationToken cancellationToken)
    {
        ID = insertId;
        updateTool.Fields(CampoCodigo, insertId, ETiposCampos.FNumber);
        var result = await updateTool.RecUpdateAsync(oCnn, cancellationToken, true);
        return result == "OK" ? 0 : -3;
    }
}