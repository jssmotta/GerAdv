// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class AnexamentoRegistrosService
{
    private static (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterAnexamentoRegistros filtro)
    {
        var parameters = new List<SqlParameter>();
        if (filtro.Cliente != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAnexamentoRegistrosDicInfo.Cliente)}", filtro.Cliente));
        }

        if (!string.IsNullOrEmpty(filtro.GUIDReg))
        {
            parameters.Add(new($"@{nameof(DBAnexamentoRegistrosDicInfo.GUIDReg)}", ApplyWildCard(filtro.WildcardChar, filtro.GUIDReg)));
        }

        if (filtro.CodigoReg != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAnexamentoRegistrosDicInfo.CodigoReg)}", filtro.CodigoReg));
        }

        if (filtro.CodigoReg_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAnexamentoRegistrosDicInfo.CodigoReg)}_end", filtro.CodigoReg_end));
        }

        if (filtro.IDReg != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAnexamentoRegistrosDicInfo.IDReg)}", filtro.IDReg));
        }

        if (filtro.IDReg_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAnexamentoRegistrosDicInfo.IDReg)}_end", filtro.IDReg_end));
        }

        if (!string.IsNullOrEmpty(filtro.Data))
        {
            parameters.Add(new($"@{nameof(DBAnexamentoRegistrosDicInfo.Data)}", ApplyWildCard(filtro.WildcardChar, filtro.Data)));
        }

        if (!string.IsNullOrEmpty(filtro.GUID))
        {
            parameters.Add(new($"@{nameof(DBAnexamentoRegistrosDicInfo.GUID)}", ApplyWildCard(filtro.WildcardChar, filtro.GUID)));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAnexamentoRegistrosDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
        }

        if (filtro.Codigo_filtro_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBAnexamentoRegistrosDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
        }

        if (filtro.LogicalOperator.IsEmpty() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        cWhere.Append(filtro.Cliente <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAnexamentoRegistrosDicInfo.PTabelaNome}].[{DBAnexamentoRegistrosDicInfo.Cliente}] = @{nameof(DBAnexamentoRegistrosDicInfo.Cliente)}");
        cWhere.Append(filtro.GUIDReg.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAnexamentoRegistrosDicInfo.PTabelaNome}].[{DBAnexamentoRegistrosDicInfo.GUIDReg}]  {DevourerConsts.MsiCollate} like @{nameof(DBAnexamentoRegistrosDicInfo.GUIDReg)}");
        if (!filtro.CodigoReg.IsEmpty() && filtro.CodigoReg_end.IsEmpty())
        {
            cWhere.Append(filtro.CodigoReg <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAnexamentoRegistrosDicInfo.PTabelaNome}].[{DBAnexamentoRegistrosDicInfo.CodigoReg}] >= @{nameof(DBAnexamentoRegistrosDicInfo.CodigoReg)}");
        }
        else
        {
            cWhere.Append((filtro.CodigoReg <= 0 && filtro.CodigoReg_end <= 0) ? string.Empty : (!(filtro.CodigoReg <= 0) && !(filtro.CodigoReg_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAnexamentoRegistrosDicInfo.CodigoReg} BETWEEN @{nameof(DBAnexamentoRegistrosDicInfo.CodigoReg)} AND @{nameof(DBAnexamentoRegistrosDicInfo.CodigoReg)}_end" : !(filtro.CodigoReg <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAnexamentoRegistrosDicInfo.CodigoReg} = @{nameof(DBAnexamentoRegistrosDicInfo.CodigoReg)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAnexamentoRegistrosDicInfo.CodigoReg} <= @{nameof(DBAnexamentoRegistrosDicInfo.CodigoReg)}_end");
        }

        if (!filtro.IDReg.IsEmpty() && filtro.IDReg_end.IsEmpty())
        {
            cWhere.Append(filtro.IDReg <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAnexamentoRegistrosDicInfo.PTabelaNome}].[{DBAnexamentoRegistrosDicInfo.IDReg}] >= @{nameof(DBAnexamentoRegistrosDicInfo.IDReg)}");
        }
        else
        {
            cWhere.Append((filtro.IDReg <= 0 && filtro.IDReg_end <= 0) ? string.Empty : (!(filtro.IDReg <= 0) && !(filtro.IDReg_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAnexamentoRegistrosDicInfo.IDReg} BETWEEN @{nameof(DBAnexamentoRegistrosDicInfo.IDReg)} AND @{nameof(DBAnexamentoRegistrosDicInfo.IDReg)}_end" : !(filtro.IDReg <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAnexamentoRegistrosDicInfo.IDReg} = @{nameof(DBAnexamentoRegistrosDicInfo.IDReg)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAnexamentoRegistrosDicInfo.IDReg} <= @{nameof(DBAnexamentoRegistrosDicInfo.IDReg)}_end");
        }

        cWhere.Append(filtro.Data.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAnexamentoRegistrosDicInfo.PTabelaNome}].[{DBAnexamentoRegistrosDicInfo.Data}]  {DevourerConsts.MsiCollate} like @{nameof(DBAnexamentoRegistrosDicInfo.Data)}");
        cWhere.Append(filtro.GUID.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAnexamentoRegistrosDicInfo.PTabelaNome}].[{DBAnexamentoRegistrosDicInfo.GUID}]  {DevourerConsts.MsiCollate} like @{nameof(DBAnexamentoRegistrosDicInfo.GUID)}");
        if (!filtro.Codigo_filtro.IsEmpty() && filtro.Codigo_filtro_end.IsEmpty())
        {
            cWhere.Append(filtro.Codigo_filtro <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAnexamentoRegistrosDicInfo.PTabelaNome}].[{DBAnexamentoRegistrosDicInfo.CampoCodigo}] >= @{nameof(DBAnexamentoRegistrosDicInfo.CampoCodigo)}");
        }
        else
        {
            cWhere.Append((filtro.Codigo_filtro <= 0 && filtro.Codigo_filtro_end <= 0) ? string.Empty : (!(filtro.Codigo_filtro <= 0) && !(filtro.Codigo_filtro_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAnexamentoRegistrosDicInfo.CampoCodigo} BETWEEN @{nameof(DBAnexamentoRegistrosDicInfo.CampoCodigo)} AND @{nameof(DBAnexamentoRegistrosDicInfo.CampoCodigo)}_end" : !(filtro.Codigo_filtro <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAnexamentoRegistrosDicInfo.CampoCodigo} = @{nameof(DBAnexamentoRegistrosDicInfo.CampoCodigo)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBAnexamentoRegistrosDicInfo.CampoCodigo} <= @{nameof(DBAnexamentoRegistrosDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private static string ApplyWildCard(char wildcardChar, string value)
    {
        if (wildcardChar == '\0' || wildcardChar == ' ')
        {
            return value;
        }

        var result = $"{wildcardChar}{value.Replace(" ", wildcardChar.ToString())}{wildcardChar}";
        return result;
    }

    public async Task<IEnumerable<NomeID>> GetListN([FromQuery] int max, [FromBody] Filters.FilterAnexamentoRegistros? filtro, [FromRoute, Required] string uri, CancellationToken token)
    {
        // Tracking: 20250606-0
        ThrowIfDisposed();
        var filtroResult = filtro == null ? null : WFiltro(filtro!);
        string where = filtroResult?.where ?? string.Empty;
        List<SqlParameter> parameters = filtroResult?.parametros ?? [];
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new Exception($"Coneão nula.");
        }

        var keyCache = await reader.ReadStringAuditor(uri, "", [], oCnn);
        var cacheKey = $"{uri}-AnexamentoRegistros-{max}-{where.GetHashCode()}-GetListN-{keyCache}";
        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId)
        };
        return await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataListNAsync(max, uri, where, parameters, cancel), entryOptions, cancellationToken: token) ?? [];
    }

    private async Task<IEnumerable<NomeID>> GetDataListNAsync(int max, string uri, string where, List<SqlParameter> parameters, CancellationToken token)
    {
        var result = new List<NomeID>(max);
        var lista = await reader.ListarN(max, uri, where, parameters, DBAnexamentoRegistrosDicInfo.CampoNome);
        foreach (var item in lista)
        {
            if (token.IsCancellationRequested)
                break;
            if (item?.FNome != null)
            {
                result.Add(new NomeID { Nome = item.FNome, ID = item.ID });
            }
        }

        return result;
    }

    private async Task<IEnumerable<AnexamentoRegistrosResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}