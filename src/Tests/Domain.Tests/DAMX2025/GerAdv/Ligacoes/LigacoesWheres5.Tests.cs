// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class LigacoesWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFLigacoesFactory> _mockLigacoesFactory;
    private readonly Mock<FLigacoes> _mockFLigacoes;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly LigacoesWhere _ligacoesWhere;
    public LigacoesWhereTests()
    {
        _mockLigacoesFactory = new Mock<IFLigacoesFactory>();
        _mockFLigacoes = new Mock<FLigacoes>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _ligacoesWhere = new LigacoesWhere(_mockLigacoesFactory.Object);
    }

    public void Dispose()
    {
        _mockLigacoesFactory?.Reset();
        _mockFLigacoes?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
        };
    }

    private void SetupMockFLigacoes(string? Assunto = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", int? AgeClienteAvisado = 1, bool? Celular = false, int? Cliente = 1, string? Contato = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string? DataRealizada = "24/04/1975", int? QuemID = 1, int? Telefonista = 1, string? UltimoAviso = "24/04/1975", string? HoraFinal = "27/05/2022", string? Nome = "João", int? QuemCodigo = 1, int? Solicitante = 1, string? Para = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string? Fone = "(11) 99999-9999", int? Ramal = 1, bool? Particular = true, bool? Realizada = false, string? Status = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string? Data = "27/05/2022", string? Hora = "27/05/2022", bool? Urgente = true, string? LigarPara = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", int? Processo = 1, bool? StartScreen = false, int? Emotion = 1)
    {
        _mockFLigacoes.Setup(f => f.FAssunto).Returns(Assunto ?? string.Empty);
        _mockFLigacoes.Setup(f => f.FAgeClienteAvisado).Returns(AgeClienteAvisado ?? 0);
        _mockFLigacoes.Setup(f => f.FCelular).Returns(Celular ?? false);
        _mockFLigacoes.Setup(f => f.FCliente).Returns(Cliente ?? 0);
        _mockFLigacoes.Setup(f => f.FContato).Returns(Contato ?? string.Empty);
        _mockFLigacoes.Setup(f => f.FDataRealizada).Returns(DataRealizada ?? string.Empty);
        _mockFLigacoes.Setup(f => f.FQuemID).Returns(QuemID ?? 0);
        _mockFLigacoes.Setup(f => f.FTelefonista).Returns(Telefonista ?? 0);
        _mockFLigacoes.Setup(f => f.FUltimoAviso).Returns(UltimoAviso ?? string.Empty);
        _mockFLigacoes.Setup(f => f.FHoraFinal).Returns(HoraFinal ?? string.Empty);
        _mockFLigacoes.Setup(f => f.FNome).Returns(Nome ?? string.Empty);
        _mockFLigacoes.Setup(f => f.FQuemCodigo).Returns(QuemCodigo ?? 0);
        _mockFLigacoes.Setup(f => f.FSolicitante).Returns(Solicitante ?? 0);
        _mockFLigacoes.Setup(f => f.FPara).Returns(Para ?? string.Empty);
        _mockFLigacoes.Setup(f => f.FFone).Returns(Fone ?? string.Empty);
        _mockFLigacoes.Setup(f => f.FRamal).Returns(Ramal ?? 0);
        _mockFLigacoes.Setup(f => f.FParticular).Returns(Particular ?? false);
        _mockFLigacoes.Setup(f => f.FRealizada).Returns(Realizada ?? false);
        _mockFLigacoes.Setup(f => f.FStatus).Returns(Status ?? string.Empty);
        _mockFLigacoes.Setup(f => f.FData).Returns(Data ?? string.Empty);
        _mockFLigacoes.Setup(f => f.FHora).Returns(Hora ?? string.Empty);
        _mockFLigacoes.Setup(f => f.FUrgente).Returns(Urgente ?? false);
        _mockFLigacoes.Setup(f => f.FLigarPara).Returns(LigarPara ?? string.Empty);
        _mockFLigacoes.Setup(f => f.FProcesso).Returns(Processo ?? 0);
        _mockFLigacoes.Setup(f => f.FStartScreen).Returns(StartScreen ?? false);
        _mockFLigacoes.Setup(f => f.FEmotion).Returns(Emotion ?? 0);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFLigacoesFactory>();
        // Act
        var ligacoesWhere = new LigacoesWhere(mockFactory.Object);
        // Assert
        ligacoesWhere.Should().NotBeNull();
        ligacoesWhere.Should().BeAssignableTo<ILigacoesWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFLigacoesFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new LigacoesWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnLigacoesResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFLigacoes();
        _mockLigacoesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFLigacoes.Object);
        // Act
        var result = _ligacoesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.Assunto.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.AgeClienteAvisado.Should().Be(1);
        result.Celular.Should().Be(false);
        result.Cliente.Should().Be(1);
        result.Contato.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.DataRealizada.Should().Be("24/04/1975");
        result.QuemID.Should().Be(1);
        result.Telefonista.Should().Be(1);
        result.UltimoAviso.Should().Be("24/04/1975");
        result.HoraFinal.Should().Be("27/05/2022");
        result.Nome.Should().Be("João");
        result.QuemCodigo.Should().Be(1);
        result.Solicitante.Should().Be(1);
        result.Para.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Fone.Should().Be("(11) 99999-9999");
        result.Ramal.Should().Be(1);
        result.Particular.Should().Be(true);
        result.Realizada.Should().Be(false);
        result.Status.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.Data.Should().Be("27/05/2022");
        result.Hora.Should().Be("27/05/2022");
        result.Urgente.Should().Be(true);
        result.LigarPara.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Processo.Should().Be(1);
        result.StartScreen.Should().Be(false);
        result.Emotion.Should().Be(1);
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFLigacoes(Assunto: null, AgeClienteAvisado: null, Celular: null, Cliente: null, Contato: null, DataRealizada: null, QuemID: null, Telefonista: null, UltimoAviso: null, HoraFinal: null, Nome: null, QuemCodigo: null, Solicitante: null, Para: null, Fone: null, Ramal: null, Particular: null, Realizada: null, Status: null, Data: null, Hora: null, Urgente: null, LigarPara: null, Processo: null, StartScreen: null, Emotion: null);
        _mockLigacoesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFLigacoes.Object);
        // Act
        var result = _ligacoesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Assunto.Should().Be(string.Empty);
        result.AgeClienteAvisado.Should().Be(0);
        result.Celular.Should().Be(false);
        result.Cliente.Should().Be(0);
        result.Contato.Should().Be(string.Empty);
        result.DataRealizada.Should().Be(string.Empty);
        result.QuemID.Should().Be(0);
        result.Telefonista.Should().Be(0);
        result.UltimoAviso.Should().Be(string.Empty);
        result.HoraFinal.Should().Be(string.Empty);
        result.Nome.Should().Be(string.Empty);
        result.QuemCodigo.Should().Be(0);
        result.Solicitante.Should().Be(0);
        result.Para.Should().Be(string.Empty);
        result.Fone.Should().Be(string.Empty);
        result.Ramal.Should().Be(0);
        result.Particular.Should().Be(false);
        result.Realizada.Should().Be(false);
        result.Status.Should().Be(string.Empty);
        result.Data.Should().Be(string.Empty);
        result.Hora.Should().Be(string.Empty);
        result.Urgente.Should().Be(false);
        result.LigarPara.Should().Be(string.Empty);
        result.Processo.Should().Be(0);
        result.StartScreen.Should().Be(false);
        result.Emotion.Should().Be(0);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFLigacoes();
        _mockLigacoesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFLigacoes.Object);
        // Act
        var result = _ligacoesWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockLigacoesFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFLigacoes();
        _mockLigacoesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFLigacoes.Object);
        // Act
        var result = _ligacoesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockLigacoesFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFLigacoes();
        _mockLigacoesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFLigacoes.Object);
        // Act
        var result = _ligacoesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockLigacoesFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFLigacoes();
        _mockLigacoesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFLigacoes.Object);
        // Act
        _ligacoesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockLigacoesFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFLigacoesInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFLigacoes.Setup(f => f.Dispose());
        SetupMockFLigacoes();
        _mockLigacoesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFLigacoes.Object);
        // Act
        _ligacoesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFLigacoes.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockLigacoesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _ligacoesWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFLigacoes(Assunto: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", AgeClienteAvisado: 1, Celular: false, Cliente: 1, Contato: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", DataRealizada: "24/04/1975", QuemID: 1, Telefonista: 1, UltimoAviso: "24/04/1975", HoraFinal: "27/05/2022", Nome: "João", QuemCodigo: 1, Solicitante: 1, Para: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", Fone: "(11) 99999-9999", Ramal: 1, Particular: true, Realizada: false, Status: "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", Data: "27/05/2022", Hora: "27/05/2022", Urgente: true, LigarPara: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", Processo: 1, StartScreen: false, Emotion: 1);
        _mockLigacoesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFLigacoes.Object);
        // Act
        var result = _ligacoesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.Assunto.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.AgeClienteAvisado.Should().Be(1);
        result.Celular.Should().Be(false);
        result.Cliente.Should().Be(1);
        result.Contato.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.DataRealizada.Should().Be("24/04/1975");
        result.QuemID.Should().Be(1);
        result.Telefonista.Should().Be(1);
        result.UltimoAviso.Should().Be("24/04/1975");
        result.HoraFinal.Should().Be("27/05/2022");
        result.Nome.Should().Be("João");
        result.QuemCodigo.Should().Be(1);
        result.Solicitante.Should().Be(1);
        result.Para.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Fone.Should().Be("(11) 99999-9999");
        result.Ramal.Should().Be(1);
        result.Particular.Should().Be(true);
        result.Realizada.Should().Be(false);
        result.Status.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.Data.Should().Be("27/05/2022");
        result.Hora.Should().Be("27/05/2022");
        result.Urgente.Should().Be(true);
        result.LigarPara.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Processo.Should().Be(1);
        result.StartScreen.Should().Be(false);
        result.Emotion.Should().Be(1);
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "Nome = @{DBLigacoesDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBLigacoesDicInfo.CampoNome}", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"),
        };
        SetupMockFLigacoes();
        _mockLigacoesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFLigacoes.Object);
        // Act
        _ligacoesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockLigacoesFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBLigacoesDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#region DateTime Tests
    [Fact]
    public void Read_WithValidDateDataRealizadaFields_ShouldParseAndSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var testDate = "31/12/2024";
        SetupMockFLigacoes(DataRealizada: testDate);
        _mockLigacoesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFLigacoes.Object);
        // Act
        var result = _ligacoesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataRealizada.Should().Be("31/12/2024");
    }

    [Fact]
    public void Read_WithInvalidDateDataRealizadaStrings_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFLigacoes(DataRealizada: "invalid-date");
        _mockLigacoesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFLigacoes.Object);
        // Act
        var result = _ligacoesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataRealizada.Should().Be("");
    }

    [Fact]
    public void Read_WithNullDateDataRealizadaFields_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFLigacoes(DataRealizada: null);
        _mockLigacoesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFLigacoes.Object);
        // Act
        var result = _ligacoesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataRealizada.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("31/12/2024")]
    [InlineData("2025/01/01T23:59:59")]
    [InlineData("2000-02-29")] // Leap year
    [InlineData("2025/01/02T14:30:45.123")]
    public void Read_WithValidDateDataRealizadaFormats_ShouldParseCorrectly(string dateString)
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedDate = DateTime.Parse(dateString);
        SetupMockFLigacoes(DataRealizada: dateString);
        _mockLigacoesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFLigacoes.Object);
        // Act
        var result = _ligacoesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataRealizada.Should().Be(dateString);
    }

    [Fact]
    public void Read_WithValidDateUltimoAvisoFields_ShouldParseAndSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var testDate = "01/01/2025";
        SetupMockFLigacoes(UltimoAviso: testDate);
        _mockLigacoesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFLigacoes.Object);
        // Act
        var result = _ligacoesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.UltimoAviso.Should().Be("01/01/2025");
    }

    [Fact]
    public void Read_WithInvalidDateUltimoAvisoStrings_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFLigacoes(UltimoAviso: "invalid-date");
        _mockLigacoesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFLigacoes.Object);
        // Act
        var result = _ligacoesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.UltimoAviso.Should().Be("");
    }

    [Fact]
    public void Read_WithNullDateUltimoAvisoFields_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFLigacoes(UltimoAviso: null);
        _mockLigacoesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFLigacoes.Object);
        // Act
        var result = _ligacoesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.UltimoAviso.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("01/01/2025")]
    [InlineData("2025/01/02T23:59:59")]
    [InlineData("2000-02-29")] // Leap year
    [InlineData("2025/01/03T14:30:45.123")]
    public void Read_WithValidDateUltimoAvisoFormats_ShouldParseCorrectly(string dateString)
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedDate = DateTime.Parse(dateString);
        SetupMockFLigacoes(UltimoAviso: dateString);
        _mockLigacoesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFLigacoes.Object);
        // Act
        var result = _ligacoesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.UltimoAviso.Should().Be(dateString);
    }
#endregion
#endregion
}