// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// ============================================
// ARQUIVO: DBUpdateTests.cs.txt (Principal)
// ============================================
namespace MenphisSI.GerAdv.Tests;
public class DBContatoCRMViewUpdate : IDisposable
{
    private readonly DBContatoCRMView _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBContatoCRMViewUpdate()
    {
        _instance = new DBContatoCRMView();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void DefaultConstructor_ShouldCreateInstance_WithDefaultValues()
    {
        // Act
        var contatocrmview = new DBContatoCRMView();
        // Assert
        contatocrmview.Should().NotBeNull();
        contatocrmview.ITabelaName().Should().Be("ContatoCRMView");
        contatocrmview.ID.Should().Be(0);
    }

    [Fact]
    public void AllProperties_WithValidValues_ShouldSetCorrectly()
    {
        // Arrange
        var contatocrmview = new DBContatoCRMView
        {
            FCGUID = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FIP = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        };
        // Assert - All properties should be set contatocrmview.FCGUID.Should().Be( "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        contatocrmview.FIP.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

#region Testes de CGUID
    [Fact]
    public void CGUID_DefaultValue_ShouldBeEmpty()
    {
        Assert.Equal(string.Empty, _instance.FCGUID);
    }

    [Fact]
    public void CGUID_SetValidCGUID_ShouldStore()
    {
        var guid = Guid.NewGuid().ToString();
        _instance.FCGUID = guid;
        Assert.Equal(guid, _instance.FCGUID);
    }

#endregion
    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FIP_Property_ShouldAcceptValidNames(string IP)
    {
        // Arrange
        var contatocrmview = new DBContatoCRMView
        {
            // Act
            FIP = IP
        };
        // Assert
        contatocrmview.FIP.Should().Be(IP);
    }

    [Fact]
    public void FIP_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var contatocrmview = new DBContatoCRMView
        {
            // Act
            FIP = null
        };
        // Assert
        contatocrmview.FIP.Should().Be(string.Empty);
    }

    [Fact]
    public void FIP_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var contatocrmview = new DBContatoCRMView();
        var longName = new string ('A', 50 + 10); // Exceeds 50 character limit
        // Act
        contatocrmview.FIP = longName;
        // Assert
        contatocrmview.FIP.Should().HaveLength(50);
    }

    [Fact]
    public void FIP_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FIP = null;
        // Act
        var result = _instance.FIP;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FIP_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FIP = expectedValue;
        // Act
        var result = _instance.FIP;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FIP_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContatoCRMView).GetField("pFldFIP", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FIP = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FIP);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FIP_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContatoCRMView).GetField("pFldFIP", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FIP = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FIP);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FIP_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContatoCRMView).GetField("pFldFIP", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FIP = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FIP);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FIP_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContatoCRMView).GetField("pFldFIP", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FIP = value;
        // Act
        _instance.FIP = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FIP_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContatoCRMView).GetField("pFldFIP", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FIP = "Original Value";
        // Act
        _instance.FIP = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FIP_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBContatoCRMView).GetField("pFldFIP", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FIP = "First Value";
        // Act
        _instance.FIP = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FIP_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBContatoCRMView).GetField("pFldFIP", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FIP = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FIP);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FIP_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FIP = input;
        // Assert
        Assert.Equal(expected, _instance.FIP);
    }

    [Fact]
    public void FIP_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContatoCRMView).GetField("pFldFIP", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FIP = null;
        // Act
        _instance.FIP = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FIP_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBContatoCRMView).GetField("pFldFIP", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FIP = "Existing Value";
        // Act
        _instance.FIP = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void TabelaNome_Property_ShouldReturnCorrectTableName()
    {
        // Arrange
        var contatocrmview = new DBContatoCRMView();
        // Act & Assert
        contatocrmview.TabelaNome.Should().Be("ContatoCRMView");
    }

    public virtual void Dispose()
    {
    // Cleanup resources if needed
    }
}