// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
/// <summary>
/// Comprehensive unit tests for ConfigureUpdateFields and ConfigureAuditorFields methods in DBFuncionarios class
/// These methods are critical for database update operations and auditing functionality
/// Tests both synchronous and asynchronous Update methods
/// </summary>
public class DBFuncionariosConfigureMethodsTests : IDisposable
{
    private readonly DBFuncionarios _funcionarios;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBFuncionariosConfigureMethodsTests()
    {
        _funcionarios = new DBFuncionarios();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void ConfigureUpdateFields_WhenNoFieldsChanged_ShouldNotUpdateDatabase()
    {
        // Arrange
        ResetAllFieldFlags();
        _funcionarios.ID = 1; // Update scenario
        // Act
        var result = _funcionarios.Update(_mockConnection.Object);
        // Assert - Should return 0 because no fields changed
        result.Should().Be(0);
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WhenNoFieldsChanged_ShouldNotUpdateDatabase()
    {
        // Arrange
        ResetAllFieldFlags();
        _funcionarios.ID = 1; // Update scenario
        // Act & Assert - For async, when no fields changed and it's an update, it should return 0 or throw exception
        try
        {
            var result = await _funcionarios.UpdateAsync(_mockConnection.Object);
            // If no exception is thrown, verify the result indicates no update was needed
            result.Should().Be(0, "When no fields changed in update scenario, should return 0");
        }
        catch (Exception ex)
        {
            // If exception is thrown due to mocked connection, that's also acceptable
            ex.Should().NotBeNull();
        }
    }

#region Helper Methods
    private void SetFieldFlag(string fieldName, bool value)
    {
        var field = typeof(DBFuncionarios).GetField(fieldName, BindingFlags.NonPublic | BindingFlags.Instance);
        field?.SetValue(_funcionarios, value);
    }

    private void SetFieldValue(string fieldName, object? value)
    {
        var field = typeof(DBFuncionarios).GetField(fieldName, BindingFlags.NonPublic | BindingFlags.Instance);
        try
        {
            field?.SetValue(_funcionarios, value);
        }
        catch
        {
            field?.SetValue(_funcionarios, Convert.ToDateTime(value));
        }
    }

    private void ResetAllFieldFlags()
    {
        var fieldFlags = new[]
        {
            "pFldFGUID",
            "pFldFEMailPro",
            "pFldFCargo",
            "pFldFNome",
            "pFldFFuncao",
            "pFldFSexo",
            "pFldFRegistro",
            "pFldFCPF",
            "pFldFRG",
            "pFldFTipo",
            "pFldFObservacao",
            "pFldFEndereco",
            "pFldFBairro",
            "pFldFCidade",
            "pFldFCEP",
            "pFldFContato",
            "pFldFFax",
            "pFldFFone",
            "pFldFEMail",
            "pFldFPeriodo_Ini",
            "pFldFPeriodo_Fim",
            "pFldFCTPSNumero",
            "pFldFCTPSSerie",
            "pFldFPIS",
            "pFldFSalario",
            "pFldFCTPSDtEmissao",
            "pFldFDtNasc",
            "pFldFData",
            "pFldFLiberaAgenda",
            "pFldFPasta",
            "pFldFClass",
        };
        foreach (var flag in fieldFlags)
        {
            SetFieldFlag(flag, false);
        }
    }

    private void SetAllFieldFlags(bool value)
    {
        var fieldFlags = new[]
        {
            "pFldFGUID",
            "pFldFEMailPro",
            "pFldFCargo",
            "pFldFNome",
            "pFldFFuncao",
            "pFldFSexo",
            "pFldFRegistro",
            "pFldFCPF",
            "pFldFRG",
            "pFldFTipo",
            "pFldFObservacao",
            "pFldFEndereco",
            "pFldFBairro",
            "pFldFCidade",
            "pFldFCEP",
            "pFldFContato",
            "pFldFFax",
            "pFldFFone",
            "pFldFEMail",
            "pFldFPeriodo_Ini",
            "pFldFPeriodo_Fim",
            "pFldFCTPSNumero",
            "pFldFCTPSSerie",
            "pFldFPIS",
            "pFldFSalario",
            "pFldFCTPSDtEmissao",
            "pFldFDtNasc",
            "pFldFData",
            "pFldFLiberaAgenda",
            "pFldFPasta",
            "pFldFClass",
        };
        foreach (var flag in fieldFlags)
        {
            SetFieldFlag(flag, value);
        }
    }

    private void SetAllFieldValues()
    {
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FEMailPro", "menphis@menphis.com.br");
        SetFieldValue("m_FCargo", 123);
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FFuncao", 123);
        SetFieldValue("m_FSexo", false);
        SetFieldValue("m_FRegistro", "AAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FCPF", "40392285029");
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FTipo", false);
        SetFieldValue("m_FObservacao", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FCidade", 123);
        SetFieldValue("m_FCEP", "AAAAAAAA");
        SetFieldValue("m_FContato", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        SetFieldValue("m_FEMail", "menphis@menphis.com.br");
        SetFieldValue("m_FPeriodo_Ini", DateTime.Today.AddDays(7));
        SetFieldValue("m_FPeriodo_Fim", DateTime.Today.AddDays(8));
        SetFieldValue("m_FCTPSNumero", "AAAAAAAAAAAAA");
        SetFieldValue("m_FCTPSSerie", "AAAAAAAA");
        SetFieldValue("m_FPIS", "AAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FSalario", (decimal)101);
        SetFieldValue("m_FCTPSDtEmissao", DateTime.Today.AddDays(9));
        SetFieldValue("m_FDtNasc", DateTime.Today.AddDays(10));
        SetFieldValue("m_FData", "27/05/2022");
        SetFieldValue("m_FLiberaAgenda", false);
        SetFieldValue("m_FPasta", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FClass", "A");
    }

#endregion
#region Fields_All
    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithGUIDFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsGUID_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsGUID_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithGUIDFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsGUIDChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncGUID_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncGUID_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertGUID_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsGUID_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _funcionarios.ID = 123; // Update scenario
        _funcionarios.AuditorQuem = 7;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsGUID_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsGUID_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _funcionarios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsGUID_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _funcionarios.ID = 0;
        _funcionarios.AuditorQuem = 10;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _funcionarios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsGUID_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _funcionarios.ID = id;
        _funcionarios.AuditorQuem = 15;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _funcionarios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncGUID_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncGUID_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsGUID_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 123;
        _funcionarios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _funcionarios.FGUID.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsGUID_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _funcionarios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _funcionarios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsGUID_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsGUID_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", null);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncGUID_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FGUID", "");
        SetFieldValue("m_FCompromisso", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsGUID_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _funcionarios.FGUID.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.FCargo.Should().Be(123);
    }

    [Theory]
    [InlineData("menphis@menphis.com.br Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithEMailProFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEMailPro", true);
        SetFieldValue("m_FEMailPro", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsEMailPro_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEMailPro", true); // At least one field must change
        SetFieldValue("m_FEMailPro", "menphis@menphis.com.br");
        _funcionarios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsEMailPro_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEMailPro", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FEMailPro", "menphis@menphis.com.br");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("menphis@menphis.com.br Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithEMailProFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEMailPro", true);
        SetFieldValue("m_FEMailPro", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsEMailProChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEMailPro", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FEMailPro", "menphis@menphis.com.br");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncEMailPro_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEMailPro", true);
        SetFieldValue("m_FEMailPro", "menphis@menphis.com.br");
        _funcionarios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncEMailPro_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEMailPro", true);
        SetFieldValue("m_FEMailPro", "menphis@menphis.com.br");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertEMailPro_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFEMailPro", true); // At least one field must change
        SetFieldValue("m_FEMailPro", "menphis@menphis.com.br");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsEMailPro_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _funcionarios.ID = 123; // Update scenario
        _funcionarios.AuditorQuem = 7;
        SetFieldFlag("pFldFEMailPro", true); // At least one field must change
        SetFieldValue("m_FEMailPro", "menphis@menphis.com.br");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsEMailPro_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFEMailPro", true); // At least one field must change
        SetFieldValue("m_FEMailPro", "menphis@menphis.com.br");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsEMailPro_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFEMailPro", true); // At least one field must change
        SetFieldValue("m_FEMailPro", "menphis@menphis.com.br");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _funcionarios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsEMailPro_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _funcionarios.ID = 0;
        _funcionarios.AuditorQuem = 10;
        SetFieldFlag("pFldFEMailPro", true); // At least one field must change
        SetFieldValue("m_FEMailPro", "menphis@menphis.com.br");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _funcionarios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsEMailPro_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _funcionarios.ID = id;
        _funcionarios.AuditorQuem = 15;
        SetFieldFlag("pFldFEMailPro", true); // At least one field must change
        SetFieldValue("m_FEMailPro", "menphis@menphis.com.br");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _funcionarios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncEMailPro_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFEMailPro", true); // At least one field must change
        SetFieldValue("m_FEMailPro", "menphis@menphis.com.br");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncEMailPro_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFEMailPro", true); // At least one field must change
        SetFieldValue("m_FEMailPro", "menphis@menphis.com.br");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsEMailPro_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 123;
        _funcionarios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _funcionarios.FEMailPro.Should().Be("menphis@menphis.com.br");
        _funcionarios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsEMailPro_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _funcionarios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _funcionarios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFEMailPro", true);
        SetFieldValue("m_FEMailPro", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsEMailPro_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEMailPro", true);
        SetFieldValue("m_FEMailPro", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsEMailPro_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEMailPro", true);
        SetFieldValue("m_FEMailPro", null);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncEMailPro_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEMailPro", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FEMailPro", "");
        SetFieldValue("m_FCompromisso", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsEMailPro_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _funcionarios.FEMailPro.Should().Be("menphis@menphis.com.br");
        _funcionarios.FCargo.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithNomeFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true);
        SetFieldValue("m_FNome", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsNome_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true); // At least one field must change
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsNome_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithNomeFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true);
        SetFieldValue("m_FNome", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsNomeChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncNome_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true);
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncNome_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true);
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertNome_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFNome", true); // At least one field must change
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsNome_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _funcionarios.ID = 123; // Update scenario
        _funcionarios.AuditorQuem = 7;
        SetFieldFlag("pFldFNome", true); // At least one field must change
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsNome_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFNome", true); // At least one field must change
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsNome_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFNome", true); // At least one field must change
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _funcionarios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsNome_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _funcionarios.ID = 0;
        _funcionarios.AuditorQuem = 10;
        SetFieldFlag("pFldFNome", true); // At least one field must change
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _funcionarios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsNome_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _funcionarios.ID = id;
        _funcionarios.AuditorQuem = 15;
        SetFieldFlag("pFldFNome", true); // At least one field must change
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _funcionarios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncNome_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFNome", true); // At least one field must change
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncNome_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFNome", true); // At least one field must change
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsNome_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 123;
        _funcionarios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _funcionarios.FNome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsNome_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _funcionarios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _funcionarios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFNome", true);
        SetFieldValue("m_FNome", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsNome_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true);
        SetFieldValue("m_FNome", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsNome_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true);
        SetFieldValue("m_FNome", null);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncNome_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FNome", "");
        SetFieldValue("m_FCompromisso", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsNome_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _funcionarios.FNome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.FCargo.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithRegistroFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRegistro", true);
        SetFieldValue("m_FRegistro", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsRegistro_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRegistro", true); // At least one field must change
        SetFieldValue("m_FRegistro", "AAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsRegistro_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRegistro", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FRegistro", "AAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithRegistroFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRegistro", true);
        SetFieldValue("m_FRegistro", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsRegistroChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRegistro", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FRegistro", "AAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncRegistro_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRegistro", true);
        SetFieldValue("m_FRegistro", "AAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncRegistro_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRegistro", true);
        SetFieldValue("m_FRegistro", "AAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertRegistro_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFRegistro", true); // At least one field must change
        SetFieldValue("m_FRegistro", "AAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsRegistro_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _funcionarios.ID = 123; // Update scenario
        _funcionarios.AuditorQuem = 7;
        SetFieldFlag("pFldFRegistro", true); // At least one field must change
        SetFieldValue("m_FRegistro", "AAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsRegistro_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFRegistro", true); // At least one field must change
        SetFieldValue("m_FRegistro", "AAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsRegistro_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFRegistro", true); // At least one field must change
        SetFieldValue("m_FRegistro", "AAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _funcionarios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsRegistro_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _funcionarios.ID = 0;
        _funcionarios.AuditorQuem = 10;
        SetFieldFlag("pFldFRegistro", true); // At least one field must change
        SetFieldValue("m_FRegistro", "AAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _funcionarios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsRegistro_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _funcionarios.ID = id;
        _funcionarios.AuditorQuem = 15;
        SetFieldFlag("pFldFRegistro", true); // At least one field must change
        SetFieldValue("m_FRegistro", "AAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _funcionarios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncRegistro_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFRegistro", true); // At least one field must change
        SetFieldValue("m_FRegistro", "AAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncRegistro_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFRegistro", true); // At least one field must change
        SetFieldValue("m_FRegistro", "AAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsRegistro_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 123;
        _funcionarios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _funcionarios.FRegistro.Should().Be("AAAAAAAAAAAAAAAAAA");
        _funcionarios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsRegistro_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _funcionarios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _funcionarios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFRegistro", true);
        SetFieldValue("m_FRegistro", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsRegistro_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRegistro", true);
        SetFieldValue("m_FRegistro", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsRegistro_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRegistro", true);
        SetFieldValue("m_FRegistro", null);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncRegistro_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRegistro", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FRegistro", "");
        SetFieldValue("m_FCompromisso", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsRegistro_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _funcionarios.FRegistro.Should().Be("AAAAAAAAAAAAAAAAAA");
        _funcionarios.FCargo.Should().Be(123);
    }

    [Fact]
    public void ConfigureUpdateFieldsCPF_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _funcionarios.FCPF.Should().Be("40392285029");
        _funcionarios.FCargo.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithRGFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRG", true);
        SetFieldValue("m_FRG", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsRG_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRG", true); // At least one field must change
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsRG_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRG", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithRGFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRG", true);
        SetFieldValue("m_FRG", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsRGChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRG", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncRG_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRG", true);
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncRG_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRG", true);
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertRG_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFRG", true); // At least one field must change
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsRG_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _funcionarios.ID = 123; // Update scenario
        _funcionarios.AuditorQuem = 7;
        SetFieldFlag("pFldFRG", true); // At least one field must change
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsRG_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFRG", true); // At least one field must change
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsRG_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFRG", true); // At least one field must change
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _funcionarios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsRG_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _funcionarios.ID = 0;
        _funcionarios.AuditorQuem = 10;
        SetFieldFlag("pFldFRG", true); // At least one field must change
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _funcionarios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsRG_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _funcionarios.ID = id;
        _funcionarios.AuditorQuem = 15;
        SetFieldFlag("pFldFRG", true); // At least one field must change
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _funcionarios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncRG_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFRG", true); // At least one field must change
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncRG_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFRG", true); // At least one field must change
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsRG_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 123;
        _funcionarios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _funcionarios.FRG.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsRG_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _funcionarios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _funcionarios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFRG", true);
        SetFieldValue("m_FRG", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsRG_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRG", true);
        SetFieldValue("m_FRG", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsRG_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRG", true);
        SetFieldValue("m_FRG", null);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncRG_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRG", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FRG", "");
        SetFieldValue("m_FCompromisso", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsRG_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _funcionarios.FRG.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.FCargo.Should().Be(123);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithObservacaoFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFObservacao", true);
        SetFieldValue("m_FObservacao", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsObservacao_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFObservacao", true); // At least one field must change
        SetFieldValue("m_FObservacao", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsObservacao_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFObservacao", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FObservacao", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithObservacaoFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFObservacao", true);
        SetFieldValue("m_FObservacao", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsObservacaoChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFObservacao", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FObservacao", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncObservacao_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFObservacao", true);
        SetFieldValue("m_FObservacao", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncObservacao_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFObservacao", true);
        SetFieldValue("m_FObservacao", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertObservacao_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFObservacao", true); // At least one field must change
        SetFieldValue("m_FObservacao", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsObservacao_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _funcionarios.ID = 123; // Update scenario
        _funcionarios.AuditorQuem = 7;
        SetFieldFlag("pFldFObservacao", true); // At least one field must change
        SetFieldValue("m_FObservacao", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsObservacao_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFObservacao", true); // At least one field must change
        SetFieldValue("m_FObservacao", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsObservacao_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFObservacao", true); // At least one field must change
        SetFieldValue("m_FObservacao", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _funcionarios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsObservacao_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _funcionarios.ID = 0;
        _funcionarios.AuditorQuem = 10;
        SetFieldFlag("pFldFObservacao", true); // At least one field must change
        SetFieldValue("m_FObservacao", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _funcionarios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsObservacao_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _funcionarios.ID = id;
        _funcionarios.AuditorQuem = 15;
        SetFieldFlag("pFldFObservacao", true); // At least one field must change
        SetFieldValue("m_FObservacao", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _funcionarios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncObservacao_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFObservacao", true); // At least one field must change
        SetFieldValue("m_FObservacao", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncObservacao_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFObservacao", true); // At least one field must change
        SetFieldValue("m_FObservacao", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsObservacao_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 123;
        _funcionarios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _funcionarios.FObservacao.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsObservacao_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _funcionarios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _funcionarios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFObservacao", true);
        SetFieldValue("m_FObservacao", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsObservacao_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFObservacao", true);
        SetFieldValue("m_FObservacao", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsObservacao_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFObservacao", true);
        SetFieldValue("m_FObservacao", null);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncObservacao_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFObservacao", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FObservacao", "");
        SetFieldValue("m_FCompromisso", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsObservacao_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _funcionarios.FObservacao.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.FCargo.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithEnderecoFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true);
        SetFieldValue("m_FEndereco", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsEndereco_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true); // At least one field must change
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsEndereco_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithEnderecoFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true);
        SetFieldValue("m_FEndereco", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsEnderecoChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncEndereco_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true);
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncEndereco_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true);
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertEndereco_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFEndereco", true); // At least one field must change
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsEndereco_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _funcionarios.ID = 123; // Update scenario
        _funcionarios.AuditorQuem = 7;
        SetFieldFlag("pFldFEndereco", true); // At least one field must change
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsEndereco_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFEndereco", true); // At least one field must change
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsEndereco_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFEndereco", true); // At least one field must change
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _funcionarios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsEndereco_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _funcionarios.ID = 0;
        _funcionarios.AuditorQuem = 10;
        SetFieldFlag("pFldFEndereco", true); // At least one field must change
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _funcionarios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsEndereco_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _funcionarios.ID = id;
        _funcionarios.AuditorQuem = 15;
        SetFieldFlag("pFldFEndereco", true); // At least one field must change
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _funcionarios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncEndereco_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFEndereco", true); // At least one field must change
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncEndereco_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFEndereco", true); // At least one field must change
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsEndereco_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 123;
        _funcionarios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _funcionarios.FEndereco.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsEndereco_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _funcionarios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _funcionarios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFEndereco", true);
        SetFieldValue("m_FEndereco", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsEndereco_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true);
        SetFieldValue("m_FEndereco", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsEndereco_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true);
        SetFieldValue("m_FEndereco", null);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncEndereco_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FEndereco", "");
        SetFieldValue("m_FCompromisso", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsEndereco_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _funcionarios.FEndereco.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.FCargo.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithBairroFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true);
        SetFieldValue("m_FBairro", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsBairro_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true); // At least one field must change
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsBairro_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithBairroFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true);
        SetFieldValue("m_FBairro", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsBairroChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncBairro_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true);
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncBairro_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true);
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertBairro_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFBairro", true); // At least one field must change
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsBairro_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _funcionarios.ID = 123; // Update scenario
        _funcionarios.AuditorQuem = 7;
        SetFieldFlag("pFldFBairro", true); // At least one field must change
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsBairro_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFBairro", true); // At least one field must change
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsBairro_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFBairro", true); // At least one field must change
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _funcionarios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsBairro_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _funcionarios.ID = 0;
        _funcionarios.AuditorQuem = 10;
        SetFieldFlag("pFldFBairro", true); // At least one field must change
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _funcionarios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsBairro_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _funcionarios.ID = id;
        _funcionarios.AuditorQuem = 15;
        SetFieldFlag("pFldFBairro", true); // At least one field must change
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _funcionarios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncBairro_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFBairro", true); // At least one field must change
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncBairro_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFBairro", true); // At least one field must change
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsBairro_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 123;
        _funcionarios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _funcionarios.FBairro.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsBairro_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _funcionarios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _funcionarios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFBairro", true);
        SetFieldValue("m_FBairro", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsBairro_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true);
        SetFieldValue("m_FBairro", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsBairro_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true);
        SetFieldValue("m_FBairro", null);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncBairro_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FBairro", "");
        SetFieldValue("m_FCompromisso", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsBairro_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _funcionarios.FBairro.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.FCargo.Should().Be(123);
    }

    [Fact]
    public void ConfigureUpdateFieldsCEP_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _funcionarios.FCEP.Should().Be("AAAAAAAA");
        _funcionarios.FCargo.Should().Be(123);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithContatoFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFContato", true);
        SetFieldValue("m_FContato", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsContato_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFContato", true); // At least one field must change
        SetFieldValue("m_FContato", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsContato_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFContato", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FContato", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithContatoFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFContato", true);
        SetFieldValue("m_FContato", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsContatoChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFContato", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FContato", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncContato_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFContato", true);
        SetFieldValue("m_FContato", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncContato_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFContato", true);
        SetFieldValue("m_FContato", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertContato_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFContato", true); // At least one field must change
        SetFieldValue("m_FContato", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsContato_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _funcionarios.ID = 123; // Update scenario
        _funcionarios.AuditorQuem = 7;
        SetFieldFlag("pFldFContato", true); // At least one field must change
        SetFieldValue("m_FContato", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsContato_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFContato", true); // At least one field must change
        SetFieldValue("m_FContato", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsContato_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFContato", true); // At least one field must change
        SetFieldValue("m_FContato", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _funcionarios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsContato_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _funcionarios.ID = 0;
        _funcionarios.AuditorQuem = 10;
        SetFieldFlag("pFldFContato", true); // At least one field must change
        SetFieldValue("m_FContato", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _funcionarios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsContato_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _funcionarios.ID = id;
        _funcionarios.AuditorQuem = 15;
        SetFieldFlag("pFldFContato", true); // At least one field must change
        SetFieldValue("m_FContato", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _funcionarios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncContato_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFContato", true); // At least one field must change
        SetFieldValue("m_FContato", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncContato_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFContato", true); // At least one field must change
        SetFieldValue("m_FContato", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsContato_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 123;
        _funcionarios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _funcionarios.FContato.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsContato_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _funcionarios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _funcionarios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFContato", true);
        SetFieldValue("m_FContato", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsContato_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFContato", true);
        SetFieldValue("m_FContato", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsContato_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFContato", true);
        SetFieldValue("m_FContato", null);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncContato_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFContato", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FContato", "");
        SetFieldValue("m_FCompromisso", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsContato_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _funcionarios.FContato.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.FCargo.Should().Be(123);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithFaxFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true);
        SetFieldValue("m_FFax", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsFax_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true); // At least one field must change
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsFax_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithFaxFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true);
        SetFieldValue("m_FFax", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsFaxChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncFax_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true);
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncFax_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true);
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertFax_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFFax", true); // At least one field must change
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsFax_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _funcionarios.ID = 123; // Update scenario
        _funcionarios.AuditorQuem = 7;
        SetFieldFlag("pFldFFax", true); // At least one field must change
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsFax_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFFax", true); // At least one field must change
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsFax_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFFax", true); // At least one field must change
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _funcionarios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsFax_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _funcionarios.ID = 0;
        _funcionarios.AuditorQuem = 10;
        SetFieldFlag("pFldFFax", true); // At least one field must change
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _funcionarios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsFax_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _funcionarios.ID = id;
        _funcionarios.AuditorQuem = 15;
        SetFieldFlag("pFldFFax", true); // At least one field must change
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _funcionarios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncFax_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFFax", true); // At least one field must change
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncFax_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFFax", true); // At least one field must change
        SetFieldValue("m_FFax", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsFax_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 123;
        _funcionarios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _funcionarios.FFax.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsFax_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _funcionarios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _funcionarios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFFax", true);
        SetFieldValue("m_FFax", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsFax_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true);
        SetFieldValue("m_FFax", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsFax_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true);
        SetFieldValue("m_FFax", null);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncFax_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FFax", "");
        SetFieldValue("m_FCompromisso", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsFax_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _funcionarios.FFax.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.FCargo.Should().Be(123);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithFoneFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true);
        SetFieldValue("m_FFone", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsFone_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true); // At least one field must change
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsFone_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithFoneFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true);
        SetFieldValue("m_FFone", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsFoneChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncFone_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true);
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncFone_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true);
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertFone_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFFone", true); // At least one field must change
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsFone_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _funcionarios.ID = 123; // Update scenario
        _funcionarios.AuditorQuem = 7;
        SetFieldFlag("pFldFFone", true); // At least one field must change
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsFone_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFFone", true); // At least one field must change
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsFone_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFFone", true); // At least one field must change
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _funcionarios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsFone_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _funcionarios.ID = 0;
        _funcionarios.AuditorQuem = 10;
        SetFieldFlag("pFldFFone", true); // At least one field must change
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _funcionarios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsFone_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _funcionarios.ID = id;
        _funcionarios.AuditorQuem = 15;
        SetFieldFlag("pFldFFone", true); // At least one field must change
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _funcionarios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncFone_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFFone", true); // At least one field must change
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncFone_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFFone", true); // At least one field must change
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsFone_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 123;
        _funcionarios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _funcionarios.FFone.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsFone_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _funcionarios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _funcionarios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFFone", true);
        SetFieldValue("m_FFone", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsFone_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true);
        SetFieldValue("m_FFone", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsFone_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true);
        SetFieldValue("m_FFone", null);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncFone_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FFone", "");
        SetFieldValue("m_FCompromisso", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsFone_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _funcionarios.FFone.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _funcionarios.FCargo.Should().Be(123);
    }

    [Fact]
    public void ConfigureUpdateFieldsEMail_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _funcionarios.FEMail.Should().Be("menphis@menphis.com.br");
        _funcionarios.FCargo.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithCTPSNumeroFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCTPSNumero", true);
        SetFieldValue("m_FCTPSNumero", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsCTPSNumero_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCTPSNumero", true); // At least one field must change
        SetFieldValue("m_FCTPSNumero", "AAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsCTPSNumero_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCTPSNumero", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FCTPSNumero", "AAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithCTPSNumeroFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCTPSNumero", true);
        SetFieldValue("m_FCTPSNumero", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsCTPSNumeroChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCTPSNumero", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FCTPSNumero", "AAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncCTPSNumero_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCTPSNumero", true);
        SetFieldValue("m_FCTPSNumero", "AAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncCTPSNumero_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCTPSNumero", true);
        SetFieldValue("m_FCTPSNumero", "AAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertCTPSNumero_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFCTPSNumero", true); // At least one field must change
        SetFieldValue("m_FCTPSNumero", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsCTPSNumero_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _funcionarios.ID = 123; // Update scenario
        _funcionarios.AuditorQuem = 7;
        SetFieldFlag("pFldFCTPSNumero", true); // At least one field must change
        SetFieldValue("m_FCTPSNumero", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsCTPSNumero_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFCTPSNumero", true); // At least one field must change
        SetFieldValue("m_FCTPSNumero", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsCTPSNumero_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFCTPSNumero", true); // At least one field must change
        SetFieldValue("m_FCTPSNumero", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _funcionarios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsCTPSNumero_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _funcionarios.ID = 0;
        _funcionarios.AuditorQuem = 10;
        SetFieldFlag("pFldFCTPSNumero", true); // At least one field must change
        SetFieldValue("m_FCTPSNumero", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _funcionarios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsCTPSNumero_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _funcionarios.ID = id;
        _funcionarios.AuditorQuem = 15;
        SetFieldFlag("pFldFCTPSNumero", true); // At least one field must change
        SetFieldValue("m_FCTPSNumero", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _funcionarios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncCTPSNumero_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFCTPSNumero", true); // At least one field must change
        SetFieldValue("m_FCTPSNumero", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncCTPSNumero_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFCTPSNumero", true); // At least one field must change
        SetFieldValue("m_FCTPSNumero", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsCTPSNumero_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 123;
        _funcionarios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _funcionarios.FCTPSNumero.Should().Be("AAAAAAAAAAAAA");
        _funcionarios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsCTPSNumero_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _funcionarios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _funcionarios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFCTPSNumero", true);
        SetFieldValue("m_FCTPSNumero", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsCTPSNumero_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCTPSNumero", true);
        SetFieldValue("m_FCTPSNumero", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsCTPSNumero_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCTPSNumero", true);
        SetFieldValue("m_FCTPSNumero", null);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncCTPSNumero_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCTPSNumero", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FCTPSNumero", "");
        SetFieldValue("m_FCompromisso", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsCTPSNumero_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _funcionarios.FCTPSNumero.Should().Be("AAAAAAAAAAAAA");
        _funcionarios.FCargo.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithCTPSSerieFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCTPSSerie", true);
        SetFieldValue("m_FCTPSSerie", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsCTPSSerie_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCTPSSerie", true); // At least one field must change
        SetFieldValue("m_FCTPSSerie", "AAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsCTPSSerie_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCTPSSerie", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FCTPSSerie", "AAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithCTPSSerieFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCTPSSerie", true);
        SetFieldValue("m_FCTPSSerie", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsCTPSSerieChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCTPSSerie", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FCTPSSerie", "AAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncCTPSSerie_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCTPSSerie", true);
        SetFieldValue("m_FCTPSSerie", "AAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncCTPSSerie_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCTPSSerie", true);
        SetFieldValue("m_FCTPSSerie", "AAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertCTPSSerie_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFCTPSSerie", true); // At least one field must change
        SetFieldValue("m_FCTPSSerie", "AAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsCTPSSerie_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _funcionarios.ID = 123; // Update scenario
        _funcionarios.AuditorQuem = 7;
        SetFieldFlag("pFldFCTPSSerie", true); // At least one field must change
        SetFieldValue("m_FCTPSSerie", "AAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsCTPSSerie_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFCTPSSerie", true); // At least one field must change
        SetFieldValue("m_FCTPSSerie", "AAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsCTPSSerie_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFCTPSSerie", true); // At least one field must change
        SetFieldValue("m_FCTPSSerie", "AAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _funcionarios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsCTPSSerie_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _funcionarios.ID = 0;
        _funcionarios.AuditorQuem = 10;
        SetFieldFlag("pFldFCTPSSerie", true); // At least one field must change
        SetFieldValue("m_FCTPSSerie", "AAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _funcionarios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsCTPSSerie_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _funcionarios.ID = id;
        _funcionarios.AuditorQuem = 15;
        SetFieldFlag("pFldFCTPSSerie", true); // At least one field must change
        SetFieldValue("m_FCTPSSerie", "AAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _funcionarios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncCTPSSerie_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFCTPSSerie", true); // At least one field must change
        SetFieldValue("m_FCTPSSerie", "AAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncCTPSSerie_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFCTPSSerie", true); // At least one field must change
        SetFieldValue("m_FCTPSSerie", "AAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsCTPSSerie_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 123;
        _funcionarios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _funcionarios.FCTPSSerie.Should().Be("AAAAAAAA");
        _funcionarios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsCTPSSerie_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _funcionarios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _funcionarios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFCTPSSerie", true);
        SetFieldValue("m_FCTPSSerie", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsCTPSSerie_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCTPSSerie", true);
        SetFieldValue("m_FCTPSSerie", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsCTPSSerie_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCTPSSerie", true);
        SetFieldValue("m_FCTPSSerie", null);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncCTPSSerie_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCTPSSerie", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FCTPSSerie", "");
        SetFieldValue("m_FCompromisso", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsCTPSSerie_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _funcionarios.FCTPSSerie.Should().Be("AAAAAAAA");
        _funcionarios.FCargo.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithPISFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFPIS", true);
        SetFieldValue("m_FPIS", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsPIS_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFPIS", true); // At least one field must change
        SetFieldValue("m_FPIS", "AAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsPIS_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFPIS", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FPIS", "AAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithPISFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFPIS", true);
        SetFieldValue("m_FPIS", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsPISChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFPIS", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FPIS", "AAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncPIS_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFPIS", true);
        SetFieldValue("m_FPIS", "AAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncPIS_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFPIS", true);
        SetFieldValue("m_FPIS", "AAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertPIS_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFPIS", true); // At least one field must change
        SetFieldValue("m_FPIS", "AAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsPIS_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _funcionarios.ID = 123; // Update scenario
        _funcionarios.AuditorQuem = 7;
        SetFieldFlag("pFldFPIS", true); // At least one field must change
        SetFieldValue("m_FPIS", "AAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsPIS_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFPIS", true); // At least one field must change
        SetFieldValue("m_FPIS", "AAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsPIS_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFPIS", true); // At least one field must change
        SetFieldValue("m_FPIS", "AAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _funcionarios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsPIS_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _funcionarios.ID = 0;
        _funcionarios.AuditorQuem = 10;
        SetFieldFlag("pFldFPIS", true); // At least one field must change
        SetFieldValue("m_FPIS", "AAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _funcionarios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsPIS_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _funcionarios.ID = id;
        _funcionarios.AuditorQuem = 15;
        SetFieldFlag("pFldFPIS", true); // At least one field must change
        SetFieldValue("m_FPIS", "AAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _funcionarios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncPIS_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFPIS", true); // At least one field must change
        SetFieldValue("m_FPIS", "AAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncPIS_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFPIS", true); // At least one field must change
        SetFieldValue("m_FPIS", "AAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsPIS_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 123;
        _funcionarios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _funcionarios.FPIS.Should().Be("AAAAAAAAAAAAAAAAAA");
        _funcionarios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsPIS_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _funcionarios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _funcionarios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFPIS", true);
        SetFieldValue("m_FPIS", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsPIS_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFPIS", true);
        SetFieldValue("m_FPIS", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsPIS_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFPIS", true);
        SetFieldValue("m_FPIS", null);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncPIS_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFPIS", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FPIS", "");
        SetFieldValue("m_FCompromisso", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsPIS_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _funcionarios.FPIS.Should().Be("AAAAAAAAAAAAAAAAAA");
        _funcionarios.FCargo.Should().Be(123);
    }

    [Fact]
    public void ConfigureUpdateFieldsData_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _funcionarios.FData.Should().Be("27/05/2022");
        _funcionarios.FCargo.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithPastaFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFPasta", true);
        SetFieldValue("m_FPasta", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsPasta_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFPasta", true); // At least one field must change
        SetFieldValue("m_FPasta", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsPasta_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFPasta", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FPasta", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithPastaFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFPasta", true);
        SetFieldValue("m_FPasta", value);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsPastaChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFPasta", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FPasta", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncPasta_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFPasta", true);
        SetFieldValue("m_FPasta", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncPasta_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFPasta", true);
        SetFieldValue("m_FPasta", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertPasta_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFPasta", true); // At least one field must change
        SetFieldValue("m_FPasta", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsPasta_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _funcionarios.ID = 123; // Update scenario
        _funcionarios.AuditorQuem = 7;
        SetFieldFlag("pFldFPasta", true); // At least one field must change
        SetFieldValue("m_FPasta", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsPasta_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFPasta", true); // At least one field must change
        SetFieldValue("m_FPasta", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsPasta_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFPasta", true); // At least one field must change
        SetFieldValue("m_FPasta", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _funcionarios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsPasta_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _funcionarios.ID = 0;
        _funcionarios.AuditorQuem = 10;
        SetFieldFlag("pFldFPasta", true); // At least one field must change
        SetFieldValue("m_FPasta", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _funcionarios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsPasta_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _funcionarios.ID = id;
        _funcionarios.AuditorQuem = 15;
        SetFieldFlag("pFldFPasta", true); // At least one field must change
        SetFieldValue("m_FPasta", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _funcionarios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncPasta_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 5;
        SetFieldFlag("pFldFPasta", true); // At least one field must change
        SetFieldValue("m_FPasta", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _funcionarios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncPasta_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _funcionarios.ID = 0; // Insert scenario
        _funcionarios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFPasta", true); // At least one field must change
        SetFieldValue("m_FPasta", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _funcionarios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsPasta_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 123;
        _funcionarios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _funcionarios.FPasta.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsPasta_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _funcionarios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _funcionarios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFPasta", true);
        SetFieldValue("m_FPasta", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsPasta_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFPasta", true);
        SetFieldValue("m_FPasta", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsPasta_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFPasta", true);
        SetFieldValue("m_FPasta", null);
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncPasta_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFPasta", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FPasta", "");
        SetFieldValue("m_FCompromisso", "");
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _funcionarios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsPasta_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _funcionarios.FPasta.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _funcionarios.FCargo.Should().Be(123);
    }

    [Fact]
    public void ConfigureUpdateFieldsClass_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _funcionarios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _funcionarios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _funcionarios.FClass.Should().Be("A");
        _funcionarios.FCargo.Should().Be(123);
    }

#endregion
    public virtual void Dispose()
    {
        _funcionarios?.Dispose();
    }
}