// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class AndamentosMDValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFAndamentosMDFactory> _mockAndamentosMDFactory;
    private readonly Mock<IAndamentosMDReader> _mockReader;
    private readonly AndamentosMDValidation _validation;
    private readonly Mock<IAndamentosMDService> _mockAndamentosMDService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly AndamentosMDService _service;
    private readonly string _validUri = "test-uri";
    public AndamentosMDValidationTests()
    {
        _mockAndamentosMDFactory = new Mock<IFAndamentosMDFactory>();
        _mockReader = new Mock<IAndamentosMDReader>();
        _validation = new AndamentosMDValidation();
        _mockAndamentosMDService = new Mock<IAndamentosMDService>();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

#region Class Structure Tests
    [Fact]
    public void AndamentosMDValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IAndamentosMDValidation>();
    }

    [Fact]
    public void AndamentosMDValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(AndamentosMDValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void AndamentosMDValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(AndamentosMDValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.AndamentosMD CreateValidAndamentosMD()
    {
        return new Models.AndamentosMD
        {
            Id = 1,
            Nome = "João",
            Processo = 0,
            Andamento = 0,
            PathFull = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            UNC = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM"
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockAndamentosMDService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterAndamentosMD>(), It.IsAny<string>())).ReturnsAsync(new List<AndamentosMDResponseAll>());
    // Setup other mocks but don't override the AndamentosMDs service mock
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockAndamentosMDService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterAndamentosMD>(), It.IsAny<string>())).ReturnsAsync(new List<AndamentosMDResponseAll>());
    // Setup other mocks but don't override the AndamentosMDs service mock
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var andamentosmd = new Models.AndamentosMD
        {
            Id = 1,
            Nome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            PathFull = null,
            UNC = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(andamentosmd, _mockAndamentosMDService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockAndamentosMDService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}