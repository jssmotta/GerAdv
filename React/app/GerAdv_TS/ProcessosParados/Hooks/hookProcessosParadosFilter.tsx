// 100% auto-generated by Source Genesys WebApi Front & Back Creator
                     // copyright © 2000-2025 Menphis - Sistemas Inteligentes
                     // This file is part of the Source Genesys project                     
                    import { useState } from 'react';
import InputInput from '@/app/components/Inputs/InputInput';
import InputDate from '@/app/components/Inputs/InputDate';
import InputHora from '@/app/components/Inputs/InputHora';
import InputValor from '@/app/components/Inputs/InputValor';
import InputComboFilterYesNo from '@/app/components/Inputs/InputComboFilterYesNo';
import { FilterHandlers } from '@/app/components/Cruds/GenericFilterDialog';
import { FilterProcessosParados } from '@/app/GerAdv_TS/ProcessosParados/Filters/ProcessosParados';
import OperadorComboBox from '@/app/GerAdv_TS/Operador/ComboBox/Operador';
interface UseProcessosParadosFilterProps {
  handleFetchWithFilter: (filtro?: FilterProcessosParados | undefined | null) => Promise<void>;
}
interface UseProcessosParadosFilterReturn {
  // Estados
  showSearch: boolean;
  windowFilter: FilterProcessosParados;
  setWindowFilter: React.Dispatch<React.SetStateAction<FilterProcessosParados>>;
  // Handlers do Dialog
  handleSearch: () => void;
  handleCloseSearch: () => void;
  handleConfirmSearch: (filter: FilterProcessosParados) => Promise<void>;
  // Render function
  renderInputFilters: (handlers: FilterHandlers<FilterProcessosParados>) => React.ReactNode;
  // Utilitários
  clearFilter: () => void;
  hasActiveFilter: boolean;
}
export const useProcessosParadosFilter = ({ handleFetchWithFilter }: UseProcessosParadosFilterProps): UseProcessosParadosFilterReturn => {
  const [showSearch, setShowSearch] = useState(false);
  const [windowFilter, setWindowFilter] = useState<FilterProcessosParados>({} as FilterProcessosParados);
  // Handlers do Dialog
  const handleSearch = () => {
    setShowSearch(true);
    const filterWildechar = {...windowFilter, wildcardChar: '%' } as FilterProcessosParados;
    setWindowFilter(filterWildechar);
  };
  const handleCloseSearch = () => {
    setShowSearch(false);
  };
  const handleConfirmSearch = async (filter: FilterProcessosParados) => {
    await handleFetchWithFilter(filter);
  };
  // Função para limpar filtros
  const clearFilter = () => {
    setWindowFilter({});
    sessionStorage.removeItem(btoa('ProcessosParadosFilter'));
    handleFetchWithFilter({});
  };
  // Verificar se há filtros ativos
  const hasActiveFilter = Object.values(windowFilter).some(value =>
    value !== undefined && value !== null && value !== '' && value !== -2147483648
  );
  // Função para renderizar os campos de filtro
  const renderInputFilters = (handlers: FilterHandlers<FilterProcessosParados>) => (
  <>
  <InputInput
  type='text'
  id='processo'
  name='processo'
  value={handlers.windowFilter?.processo ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Processo'
  label='Processo (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='processo_end'
  name='processo_end'
  value={handlers.windowFilter?.processo_end ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Processo final'
  label='Processo final'
  disabled={handlers.windowFilter?.processo ? false: true}
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='semana'
  name='semana'
  value={handlers.windowFilter?.semana ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Semana'
  label='Semana (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='semana_end'
  name='semana_end'
  value={handlers.windowFilter?.semana_end ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Semana final'
  label='Semana final'
  disabled={handlers.windowFilter?.semana ? false: true}
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='ano'
  name='ano'
  value={handlers.windowFilter?.ano ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Ano'
  label='Ano (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='ano_end'
  name='ano_end'
  value={handlers.windowFilter?.ano_end ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Ano final'
  label='Ano final'
  disabled={handlers.windowFilter?.ano ? false: true}
  className='inputIncNome inputSearch'
  />
  <InputDate
  type='text'
  id='datahora'
  label='DataHora (igual ou início)'
  dataForm={null}
  className='inputSearch'
  name='datahora'
  value={handlers.windowFilter?.datahora ?? ''}
  onChange={(value: string) => handlers.handleDateChange('datahora', value)}
  />
  <InputDate
  type='text'
  id='datahora_end'
  label='DataHora (final)'
  dataForm={null}
  className='inputSearch'
  name='datahora_end'
  value={handlers.windowFilter?.datahora_end ?? ''}
  disabled={handlers.windowFilter?.datahora ? false: true}
  onChange={(value: string) => handlers.handleDateChange('datahora_end', value)}
  />
  <OperadorComboBox
  name='operador'
  dataForm={null}
  value={handlers.windowFilter?.operador}
  setValue={(e:any) => handlers.handleComboChange(e, 'operador')}
  className='inputSearch inputSearchComboboxTab'
  label='Operador'
  />
  <InputDate
  type='text'
  id='datahistorico'
  label='DataHistorico (igual ou início)'
  dataForm={null}
  className='inputSearch'
  name='datahistorico'
  value={handlers.windowFilter?.datahistorico ?? ''}
  onChange={(value: string) => handlers.handleDateChange('datahistorico', value)}
  />
  <InputDate
  type='text'
  id='datahistorico_end'
  label='DataHistorico (final)'
  dataForm={null}
  className='inputSearch'
  name='datahistorico_end'
  value={handlers.windowFilter?.datahistorico_end ?? ''}
  disabled={handlers.windowFilter?.datahistorico ? false: true}
  onChange={(value: string) => handlers.handleDateChange('datahistorico_end', value)}
  />
  <InputDate
  type='text'
  id='datanenotas'
  label='DataNENotas (igual ou início)'
  dataForm={null}
  className='inputSearch'
  name='datanenotas'
  value={handlers.windowFilter?.datanenotas ?? ''}
  onChange={(value: string) => handlers.handleDateChange('datanenotas', value)}
  />
  <InputDate
  type='text'
  id='datanenotas_end'
  label='DataNENotas (final)'
  dataForm={null}
  className='inputSearch'
  name='datanenotas_end'
  value={handlers.windowFilter?.datanenotas_end ?? ''}
  disabled={handlers.windowFilter?.datanenotas ? false: true}
  onChange={(value: string) => handlers.handleDateChange('datanenotas_end', value)}
  />
  <InputInput
  type='text'
  id='codigo_filtro'
  name='codigo_filtro'
  value={handlers.windowFilter?.codigo_filtro ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código do cadastro'
  label='Código (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='codigo_filtro_end'
  name='codigo_filtro_end'
  value={handlers.windowFilter?.codigo_filtro_end ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código final do cadastro'
  label='Código final'
  disabled={handlers.windowFilter?.codigo_filtro ? false: true}
  className='inputIncNome inputSearch'
  />
</>
);
return {
  // Estados
  showSearch, 
  windowFilter, 
  setWindowFilter, 
  // Handlers
  handleSearch, 
  handleCloseSearch, 
  handleConfirmSearch, 
  // Render function
  renderInputFilters, 
  // Utilitários
  clearFilter, 
  hasActiveFilter
};
};