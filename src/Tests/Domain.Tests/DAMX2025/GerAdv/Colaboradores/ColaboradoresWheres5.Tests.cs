// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class ColaboradoresWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFColaboradoresFactory> _mockColaboradoresFactory;
    private readonly Mock<FColaboradores> _mockFColaboradores;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly ColaboradoresWhere _colaboradoresWhere;
    public ColaboradoresWhereTests()
    {
        _mockColaboradoresFactory = new Mock<IFColaboradoresFactory>();
        _mockFColaboradores = new Mock<FColaboradores>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _colaboradoresWhere = new ColaboradoresWhere(_mockColaboradoresFactory.Object);
    }

    public void Dispose()
    {
        _mockColaboradoresFactory?.Reset();
        _mockFColaboradores?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
        };
    }

    private void SetupMockFColaboradores(int? Cargo = 1, int? Cliente = 1, bool? Sexo = false, string? Nome = "João", string? CPF = "544.506.718-13", string? RG = "12.345.678-9", string? DtNasc = "24/04/1975", int? Idade = 1, string? Endereco = "Rua das Flores, 123", string? Bairro = "Centro", string? CEP = "01234-567", int? Cidade = 1, string? Fone = "(11) 99999-9999", string? Observacao = "Observação teste", string? EMail = "test@email.com", string? CNH = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string? Class = "A")
    {
        _mockFColaboradores.Setup(f => f.FCargo).Returns(Cargo ?? 0);
        _mockFColaboradores.Setup(f => f.FCliente).Returns(Cliente ?? 0);
        _mockFColaboradores.Setup(f => f.FSexo).Returns(Sexo ?? false);
        _mockFColaboradores.Setup(f => f.FNome).Returns(Nome ?? string.Empty);
        _mockFColaboradores.Setup(f => f.FCPF).Returns(CPF ?? string.Empty);
        _mockFColaboradores.Setup(f => f.FRG).Returns(RG ?? string.Empty);
        _mockFColaboradores.Setup(f => f.FDtNasc).Returns(DtNasc ?? string.Empty);
        _mockFColaboradores.Setup(f => f.FIdade).Returns(Idade ?? 0);
        _mockFColaboradores.Setup(f => f.FEndereco).Returns(Endereco ?? string.Empty);
        _mockFColaboradores.Setup(f => f.FBairro).Returns(Bairro ?? string.Empty);
        _mockFColaboradores.Setup(f => f.FCEP).Returns(CEP ?? string.Empty);
        _mockFColaboradores.Setup(f => f.FCidade).Returns(Cidade ?? 0);
        _mockFColaboradores.Setup(f => f.FFone).Returns(Fone ?? string.Empty);
        _mockFColaboradores.Setup(f => f.FObservacao).Returns(Observacao ?? string.Empty);
        _mockFColaboradores.Setup(f => f.FEMail).Returns(EMail ?? string.Empty);
        _mockFColaboradores.Setup(f => f.FCNH).Returns(CNH ?? string.Empty);
        _mockFColaboradores.Setup(f => f.FClass).Returns(Class ?? string.Empty);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFColaboradoresFactory>();
        // Act
        var colaboradoresWhere = new ColaboradoresWhere(mockFactory.Object);
        // Assert
        colaboradoresWhere.Should().NotBeNull();
        colaboradoresWhere.Should().BeAssignableTo<IColaboradoresWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFColaboradoresFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new ColaboradoresWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnColaboradoresResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFColaboradores();
        _mockColaboradoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFColaboradores.Object);
        // Act
        var result = _colaboradoresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.Cargo.Should().Be(1);
        result.Cliente.Should().Be(1);
        result.Sexo.Should().Be(false);
        result.Nome.Should().Be("João");
        result.CPF.Should().Be("544.506.718-13");
        result.RG.Should().Be("12.345.678-9");
        result.DtNasc.Should().Be("24/04/1975");
        result.Idade.Should().Be(1);
        result.Endereco.Should().Be("Rua das Flores, 123");
        result.Bairro.Should().Be("Centro");
        result.CEP.Should().Be("01234-567");
        result.Cidade.Should().Be(1);
        result.Fone.Should().Be("(11) 99999-9999");
        result.Observacao.Should().Be("Observação teste");
        result.EMail.Should().Be("test@email.com");
        result.CNH.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Class.Should().Be("A");
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFColaboradores(Cargo: null, Cliente: null, Sexo: null, Nome: null, CPF: null, RG: null, DtNasc: null, Idade: null, Endereco: null, Bairro: null, CEP: null, Cidade: null, Fone: null, Observacao: null, EMail: null, CNH: null, Class: null);
        _mockColaboradoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFColaboradores.Object);
        // Act
        var result = _colaboradoresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Cargo.Should().Be(0);
        result.Cliente.Should().Be(0);
        result.Sexo.Should().Be(false);
        result.Nome.Should().Be(string.Empty);
        result.CPF.Should().Be(string.Empty);
        result.RG.Should().Be(string.Empty);
        result.DtNasc.Should().Be(string.Empty);
        result.Idade.Should().Be(0);
        result.Endereco.Should().Be(string.Empty);
        result.Bairro.Should().Be(string.Empty);
        result.CEP.Should().Be(string.Empty);
        result.Cidade.Should().Be(0);
        result.Fone.Should().Be(string.Empty);
        result.Observacao.Should().Be(string.Empty);
        result.EMail.Should().Be(string.Empty);
        result.CNH.Should().Be(string.Empty);
        result.Class.Should().Be(string.Empty);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFColaboradores();
        _mockColaboradoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFColaboradores.Object);
        // Act
        var result = _colaboradoresWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockColaboradoresFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFColaboradores();
        _mockColaboradoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFColaboradores.Object);
        // Act
        var result = _colaboradoresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockColaboradoresFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFColaboradores();
        _mockColaboradoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFColaboradores.Object);
        // Act
        var result = _colaboradoresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockColaboradoresFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFColaboradores();
        _mockColaboradoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFColaboradores.Object);
        // Act
        _colaboradoresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockColaboradoresFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFColaboradoresInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFColaboradores.Setup(f => f.Dispose());
        SetupMockFColaboradores();
        _mockColaboradoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFColaboradores.Object);
        // Act
        _colaboradoresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFColaboradores.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockColaboradoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _colaboradoresWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFColaboradores(Cargo: 1, Cliente: 1, Sexo: false, Nome: "João", CPF: "544.506.718-13", RG: "12.345.678-9", DtNasc: "24/04/1975", Idade: 1, Endereco: "Rua das Flores, 123", Bairro: "Centro", CEP: "01234-567", Cidade: 1, Fone: "(11) 99999-9999", Observacao: "Observação teste", EMail: "test@email.com", CNH: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", Class: "A");
        _mockColaboradoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFColaboradores.Object);
        // Act
        var result = _colaboradoresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.Cargo.Should().Be(1);
        result.Cliente.Should().Be(1);
        result.Sexo.Should().Be(false);
        result.Nome.Should().Be("João");
        result.CPF.Should().Be("544.506.718-13");
        result.RG.Should().Be("12.345.678-9");
        result.DtNasc.Should().Be("24/04/1975");
        result.Idade.Should().Be(1);
        result.Endereco.Should().Be("Rua das Flores, 123");
        result.Bairro.Should().Be("Centro");
        result.CEP.Should().Be("01234-567");
        result.Cidade.Should().Be(1);
        result.Fone.Should().Be("(11) 99999-9999");
        result.Observacao.Should().Be("Observação teste");
        result.EMail.Should().Be("test@email.com");
        result.CNH.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Class.Should().Be("A");
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "Nome = @{DBColaboradoresDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBColaboradoresDicInfo.CampoNome}", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"),
        };
        SetupMockFColaboradores();
        _mockColaboradoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFColaboradores.Object);
        // Act
        _colaboradoresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockColaboradoresFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBColaboradoresDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#region DateTime Tests
    [Fact]
    public void Read_WithValidDateDtNascFields_ShouldParseAndSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var testDate = "31/12/2024";
        SetupMockFColaboradores(DtNasc: testDate);
        _mockColaboradoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFColaboradores.Object);
        // Act
        var result = _colaboradoresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtNasc.Should().Be("31/12/2024");
    }

    [Fact]
    public void Read_WithInvalidDateDtNascStrings_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFColaboradores(DtNasc: "invalid-date");
        _mockColaboradoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFColaboradores.Object);
        // Act
        var result = _colaboradoresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtNasc.Should().Be("");
    }

    [Fact]
    public void Read_WithNullDateDtNascFields_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFColaboradores(DtNasc: null);
        _mockColaboradoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFColaboradores.Object);
        // Act
        var result = _colaboradoresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtNasc.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("31/12/2024")]
    [InlineData("2025/01/01T23:59:59")]
    [InlineData("2000-02-29")] // Leap year
    [InlineData("2025/01/02T14:30:45.123")]
    public void Read_WithValidDateDtNascFormats_ShouldParseCorrectly(string dateString)
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedDate = DateTime.Parse(dateString);
        SetupMockFColaboradores(DtNasc: dateString);
        _mockColaboradoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFColaboradores.Object);
        // Act
        var result = _colaboradoresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtNasc.Should().Be(dateString);
    }
#endregion
#endregion
}