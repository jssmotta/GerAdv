// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Resp = MenphisSI.GerAdv.Models.Response;
using RespAll = MenphisSI.GerAdv.Models.Response.All;

namespace MenphisSI.GerAdv.Tests.Controllers;
public class ClientesControllerTests
{
    private readonly Mock<IClientesService> _mockService;
    private readonly ClientesController _controller;
    public ClientesControllerTests()
    {
        _mockService = new Mock<IClientesService>();
        _controller = new ClientesController(_mockService.Object);
        // Setup ModelState for validation tests
        _controller.ControllerContext = new ControllerContext
        {
            HttpContext = new DefaultHttpContext()
        };
    }

    [Fact]
    public void HealthCheck_ReturnsOkWithStatus()
    {
        // Act
        var result = _controller.HealthCheck();
        // Assert
        result.Should().BeOfType<OkObjectResult>();
        OkObjectResult? okResult = result as OkObjectResult;
        _ = okResult.Value.Should().NotBeNull();
        HealthStatus value = okResult.Value as HealthStatus;
        value.Status.Should().Be("Healthy");
    }

    [Fact]
    public async Task GetAll_WithValidParameters_ReturnsOkWithData()
    {
        // Arrange
        var max = 10;
        var expectedData = new List<RespAll.ClientesResponseAll>
        {
            new RespAll.ClientesResponseAll
            {
                Id = 1
            },
            new RespAll.ClientesResponseAll
            {
                Id = 2
            }
        };
        _mockService.Setup(x => x.GetAll(max, "test-uri", It.IsAny<CancellationToken>())).ReturnsAsync(expectedData);
        // Act
        var result = await _controller.GetAll(max, "test-uri");
        // Assert
        result.Should().BeOfType<OkObjectResult>();
        var okResult = result as OkObjectResult;
        okResult.Value.Should().BeEquivalentTo(expectedData);
        _mockService.Verify(x => x.GetAll(max, "test-uri", It.IsAny<CancellationToken>()), Times.Once);
    }

    [Fact]
    public async Task GetAll_WithZeroMax_ReturnsEmptyList()
    {
        // Arrange
        var max = 0;
        var expectedData = new List<RespAll.ClientesResponseAll>();
        _mockService.Setup(x => x.GetAll(max, "test-uri", It.IsAny<CancellationToken>())).ReturnsAsync(expectedData);
        // Act
        var result = await _controller.GetAll(max, "test-uri");
        // Assert
        result.Should().BeOfType<OkObjectResult>();
        var okResult = result as OkObjectResult;
        okResult.Value.Should().BeEquivalentTo(expectedData);
    }

    [Fact]
    public async Task Filter_WithValidFilter_ReturnsFilteredData()
    {
        // Arrange
        var max = 10;
        var filter = new Filters.FilterClientes
        { /* Set filter properties */
        };
        var expectedData = new List<RespAll.ClientesResponseAll>
        {
            new RespAll.ClientesResponseAll
            {
                Id = 1
            }
        };
        _mockService.Setup(x => x.Filter(max, filter, "test-uri")).ReturnsAsync(expectedData);
        // Act
        var result = await _controller.Filter(max, filter, "test-uri");
        // Assert
        result.Should().BeOfType<OkObjectResult>();
        var okResult = result as OkObjectResult;
        okResult.Value.Should().BeEquivalentTo(expectedData);
    }

    [Fact]
    public async Task Filter_WithInvalidModelState_ReturnsBadRequest()
    {
        // Arrange
        _controller.ModelState.AddModelError("test", "Test error");
        var filter = new Filters.FilterClientes();
        // Act
        var result = await _controller.Filter(10, filter, "test-uri");
        // Assert
        result.Should().BeOfType<BadRequestObjectResult>();
    }

    [Fact]
    public async Task GetById_WithExistingId_ReturnsOkWithData()
    {
        // Arrange
        int id = 1;
        var expectedData = new Resp.ClientesResponse
        {
            Id = id
        };
        _mockService.Setup(x => x.GetById(id, "test-uri", It.IsAny<CancellationToken>())).ReturnsAsync(expectedData);
        // Act
        var result = await _controller.GetById(id, "test-uri");
        // Assert
        result.Should().BeOfType<OkObjectResult>();
        var okResult = result as OkObjectResult;
        okResult.Value.Should().BeEquivalentTo(expectedData);
    }

    [Fact]
    public async Task GetById_WithNonExistingId_ReturnsNotFound()
    {
        // Arrange
        int id = 999;
        _mockService.Setup(x => x.GetById(id, "test-uri", It.IsAny<CancellationToken>())).ReturnsAsync((Resp.ClientesResponse? )null);
        // Act
        var result = await _controller.GetById(id, "test-uri");
        // Assert
        result.Should().BeOfType<NotFoundResult>();
    }

    [Fact]
    public async Task GetById_WithCancellation_PropagatesCancellationToken()
    {
        // Arrange
        int id = 1;
        var cts = new CancellationTokenSource();
        cts.Cancel();
        _mockService.Setup(x => x.GetById(id, "test-uri", It.IsAny<CancellationToken>())).ThrowsAsync(new OperationCanceledException());
        // Act & Assert
        await Assert.ThrowsAsync<OperationCanceledException>(() => _controller.GetById(id, "test-uri", cts.Token));
    }

    [Fact]
    public async Task GetListN_WithValidParameters_ReturnsOkWithData()
    {
        // Arrange
        var max = 10;
        var filter = new Filters.FilterClientes();
        var expectedData = new List<NomeID>
        {
            new NomeID
            {
                ID = 1,
                Nome = "Teste"
            }
        };
        _mockService.Setup(x => x.GetListN(max, filter, "test-uri", It.IsAny<CancellationToken>())).ReturnsAsync(expectedData);
        // Act
        var result = await _controller.GetListN(max, filter, "test-uri");
        // Assert
        result.Should().BeOfType<OkObjectResult>();
        var okResult = result as OkObjectResult;
        okResult.Value.Should().BeEquivalentTo(expectedData);
    }

    [Fact]
    public async Task AddAndUpdate_WithValidData_ReturnsOkWithResult()
    {
        // Arrange
        var model = new Models.Clientes
        {
            Id = 0,
        // Set other required properties
        };
        var expectedResult = new Resp.ClientesResponse
        {
            Id = 1
        };
        _mockService.Setup(x => x.AddAndUpdate(It.IsAny<Models.Clientes>(), "test-uri")).ReturnsAsync(expectedResult);
        // Act
        var result = await _controller.AddAndUpdate(model, "test-uri");
        // Assert
        result.Should().BeOfType<OkObjectResult>();
        var okResult = result as OkObjectResult;
        okResult.Value.Should().BeEquivalentTo(expectedResult);
    }

    [Fact]
    public async Task AddAndUpdate_WithInvalidModelState_ReturnsBadRequest()
    {
        // Arrange
        _controller.ModelState.AddModelError("test", "Test error");
        var model = new Models.Clientes();
        // Act
        var result = await _controller.AddAndUpdate(model, "test-uri");
        // Assert
        result.Should().BeOfType<BadRequestObjectResult>();
    }

    [Fact]
    public async Task AddAndUpdate_WhenServiceReturnsNull_ReturnsBadRequest()
    {
        // Arrange
        var model = new Models.Clientes();
        _mockService.Setup(x => x.AddAndUpdate(It.IsAny<Models.Clientes>(), "test-uri")).ReturnsAsync((Resp.ClientesResponse? )null);
        // Act
        var result = await _controller.AddAndUpdate(model, "test-uri");
        // Assert
        result.Should().BeOfType<BadRequestResult>();
    }

    [Fact]
    public async Task AddAndUpdate_WhenExceptionOccurs_ReturnsInternalServerError()
    {
        // Arrange
        var model = new Models.Clientes();
        _mockService.Setup(x => x.AddAndUpdate(It.IsAny<Models.Clientes>(), "test-uri")).ThrowsAsync(new Exception("Test exception"));
        // Act
        var result = await _controller.AddAndUpdate(model, "test-uri");
        // Assert
        result.Should().BeOfType<ObjectResult>();
        var objectResult = result as ObjectResult;
        objectResult.StatusCode.Should().Be(500);
        Error500 value = objectResult.Value as Error500;
        value.success.Should().BeFalse();
        value.message.Should().Be("Test exception");
    }

    [Fact]
    public async Task Delete_WithExistingId_ReturnsOkWithResult()
    {
        // Arrange
        int id = 1;
        var expectedResult = new Resp.ClientesResponse
        {
            Id = id
        };
        _mockService.Setup(x => x.Delete(id, "test-uri")).ReturnsAsync(expectedResult);
        // Act
        var result = await _controller.Delete(id, "test-uri");
        // Assert
        result.Should().BeOfType<OkObjectResult>();
        var okResult = result as OkObjectResult;
        okResult.Value.Should().BeEquivalentTo(expectedResult);
    }

    [Fact]
    public async Task Delete_WithNonExistingId_ReturnsNotFound()
    {
        // Arrange
        int id = 999;
        _mockService.Setup(x => x.Delete(id, "test-uri")).ReturnsAsync((Resp.ClientesResponse? )null);
        // Act
        var result = await _controller.Delete(id, "test-uri");
        // Assert
        result.Should().BeOfType<NotFoundResult>();
    }

    [Fact]
    public async Task Delete_WhenForeignKeyConstraintViolation_ReturnsConflict()
    {
        // Arrange
        int id = 1;
        _mockService.Setup(x => x.Delete(id, "test-uri")).ThrowsAsync(new Exception("Foreign key constraint violation"));
        // Act
        var result = await _controller.Delete(id, "test-uri");
        // Assert
        result.Should().BeOfType<ConflictObjectResult>();
        var conflictResult = result as ConflictObjectResult;
        Error500 value = conflictResult.Value as Error500;
        value.success.Should().BeFalse();
        value.message.Should().Contain("Não é possível excluir");
    }

    [Fact]
    public async Task Validation_WithValidData_ReturnsOkWithResult()
    {
        // Arrange
        var model = new Models.Clientes
        {
        // Set required properties
        };
        var expectedResult = new Resp.ClientesResponse
        {
            Id = 1
        };
        _mockService.Setup(x => x.Validation(It.IsAny<Models.Clientes>(), "test-uri")).ReturnsAsync(expectedResult);
        // Act
        var result = await _controller.Validation(model, "test-uri");
        // Assert
        result.Should().BeOfType<OkObjectResult>();
        var okResult = result as OkObjectResult;
        okResult.Value.Should().BeEquivalentTo(expectedResult);
    }

    [Fact]
    public async Task Validation_WithInvalidModelState_ReturnsBadRequest()
    {
        // Arrange
        _controller.ModelState.AddModelError("test", "Test error");
        var model = new Models.Clientes();
        // Act
        var result = await _controller.Validation(model, "test-uri");
        // Assert
        result.Should().BeOfType<BadRequestObjectResult>();
    }

    [Fact]
    public async Task Validation_WhenServiceReturnsNull_ReturnsBadRequest()
    {
        // Arrange
        var model = new Models.Clientes();
        _mockService.Setup(x => x.Validation(It.IsAny<Models.Clientes>(), "test-uri")).ReturnsAsync((Resp.ClientesResponse? )null);
        // Act
        var result = await _controller.Validation(model, "test-uri");
        // Assert
        result.Should().BeOfType<BadRequestResult>();
    }

    [Fact]
    public async Task Validation_WhenExceptionOccurs_ReturnsInternalServerError()
    {
        // Arrange
        var model = new Models.Clientes();
        _mockService.Setup(x => x.Validation(It.IsAny<Models.Clientes>(), "test-uri")).ThrowsAsync(new Exception("Validation error"));
        // Act
        var result = await _controller.Validation(model, "test-uri");
        // Assert
        result.Should().BeOfType<ObjectResult>();
        var objectResult = result as ObjectResult;
        objectResult.StatusCode.Should().Be(500);
    }
}