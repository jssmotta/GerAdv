// 100% auto-generated by Source Genesys Core
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming
public partial class DBRecados
{
    [XmlIgnore]
    private protected bool pFldFClienteNome, pFldFDe, pFldFPara, pFldFAssunto, pFldFConcluido, pFldFProcesso, pFldFCliente, pFldFRecado, pFldFUrgente, pFldFImportante, pFldFHora, pFldFData, pFldFVoltara, pFldFPessoal, pFldFRetornar, pFldFRetornoData, pFldFEmotion, pFldFInternetID, pFldFUploaded, pFldFNatureza, pFldFBIU, pFldFAguardarRetorno, pFldFAguardarRetornoPara, pFldFAguardarRetornoOK, pFldFParaID, pFldFNaoPublicavel, pFldFIsContatoCRM, pFldFMasterID, pFldFListaPara, pFldFTyped, pFldFAssuntoRecado, pFldFHistorico, pFldFContatoCRM, pFldFLigacoes, pFldFAgenda;
    [XmlIgnore]
    private protected int m_FProcesso, m_FCliente, m_FEmotion, m_FInternetID, m_FNatureza, m_FParaID, m_FMasterID, m_FAssuntoRecado, m_FHistorico, m_FContatoCRM, m_FLigacoes, m_FAgenda;
    [XmlIgnore]
    private protected string? m_FClienteNome, m_FDe, m_FPara, m_FAssunto, m_FRecado, m_FAguardarRetornoPara, m_FListaPara;
    [XmlIgnore]
    private protected DateTime? m_FHora, m_FData, m_FRetornoData;
    [XmlIgnore]
    private protected bool m_FConcluido, m_FUrgente, m_FImportante, m_FVoltara, m_FPessoal, m_FRetornar, m_FUploaded, m_FBIU, m_FAguardarRetorno, m_FAguardarRetornoOK, m_FNaoPublicavel, m_FIsContatoCRM, m_FTyped;
    [StringLength(255, ErrorMessage = "A propriedade FClienteNome da tabela Recados deve ter no máximo 255 caracteres.")]
    public string? FClienteNome
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FClienteNome ?? string.Empty;
        set
        {
            pFldFClienteNome = pFldFClienteNome || !(m_FClienteNome ?? string.Empty).Equals(value);
            if (pFldFClienteNome)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FClienteNome = trimmed.Length > 255 ? trimmed.AsSpan(0, 255).ToString() : trimmed;
            }
        }
    }

    [StringLength(50, ErrorMessage = "A propriedade FDe da tabela Recados deve ter no máximo 50 caracteres.")]
    public string? FDe
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDe ?? string.Empty;
        set
        {
            pFldFDe = pFldFDe || !(m_FDe ?? string.Empty).Equals(value);
            if (pFldFDe)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FDe = trimmed.Length > 50 ? trimmed.AsSpan(0, 50).ToString() : trimmed;
            }
        }
    }

    [StringLength(50, ErrorMessage = "A propriedade FPara da tabela Recados deve ter no máximo 50 caracteres.")]
    public string? FPara
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPara ?? string.Empty;
        set
        {
            pFldFPara = pFldFPara || !(m_FPara ?? string.Empty).Equals(value);
            if (pFldFPara)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FPara = trimmed.Length > 50 ? trimmed.AsSpan(0, 50).ToString() : trimmed;
            }
        }
    }

    [StringLength(255, ErrorMessage = "A propriedade FAssunto da tabela Recados deve ter no máximo 255 caracteres.")]
    public string? FAssunto
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAssunto ?? string.Empty;
        set
        {
            pFldFAssunto = pFldFAssunto || !(m_FAssunto ?? string.Empty).Equals(value);
            if (pFldFAssunto)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FAssunto = trimmed.Length > 255 ? trimmed.AsSpan(0, 255).ToString() : trimmed;
            }
        }
    }

    public bool FConcluido
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FConcluido;
        set
        {
            pFldFConcluido = pFldFConcluido || value != m_FConcluido;
            if (pFldFConcluido)
                m_FConcluido = value;
        }
    }

    public int FProcesso
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FProcesso;
        set
        {
            pFldFProcesso = pFldFProcesso || value != m_FProcesso;
            if (pFldFProcesso)
                m_FProcesso = value;
        }
    }

    public int FCliente
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCliente;
        set
        {
            pFldFCliente = pFldFCliente || value != m_FCliente;
            if (pFldFCliente)
                m_FCliente = value;
        }
    }

    public string? FRecado
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FRecado ?? string.Empty;
        set
        {
            pFldFRecado = pFldFRecado || !(m_FRecado ?? string.Empty).Equals(value);
            if (pFldFRecado)
                m_FRecado = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public bool FUrgente
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FUrgente;
        set
        {
            pFldFUrgente = pFldFUrgente || value != m_FUrgente;
            if (pFldFUrgente)
                m_FUrgente = value;
        }
    }

    public bool FImportante
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FImportante;
        set
        {
            pFldFImportante = pFldFImportante || value != m_FImportante;
            if (pFldFImportante)
                m_FImportante = value;
        }
    }

    public string? FHora
    {
        // fdDate2 TRACE CODE
        get => $"{m_FHora:HH:mm}";
        set
        {
            if (string.IsNullOrEmpty(value))
            {
                pFldFHora = pFldFHora || m_FHora != null;
                m_FHora = null;
                return;
            }

            if (value.IsEquals(DevourerOne.PNow))
            {
                pFldFHora = true;
                m_FHora = DevourerOne.DateTimeUtc;
            }
            else
            {
                if (value.IsEquals($"{m_FHora:HH:mm}"))
                    return;
                if (!DateTime.TryParse(value, out var dateTime))
                    return;
                pFldFHora = true;
                m_FHora = dateTime;
            }
        }
    }

    public string? FData
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FData is null || m_FData == DevourerOne.DDataZerada ? string.Empty : m_FData.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFData, m_FData, value)is not (true, var changed, var data))
                return;
            (pFldFData, m_FData) = (changed, data);
        }
    }

    public bool FVoltara
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FVoltara;
        set
        {
            pFldFVoltara = pFldFVoltara || value != m_FVoltara;
            if (pFldFVoltara)
                m_FVoltara = value;
        }
    }

    public bool FPessoal
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPessoal;
        set
        {
            pFldFPessoal = pFldFPessoal || value != m_FPessoal;
            if (pFldFPessoal)
                m_FPessoal = value;
        }
    }

    public bool FRetornar
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FRetornar;
        set
        {
            pFldFRetornar = pFldFRetornar || value != m_FRetornar;
            if (pFldFRetornar)
                m_FRetornar = value;
        }
    }

    public string? FRetornoData
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FRetornoData is null || m_FRetornoData == DevourerOne.DDataZerada ? string.Empty : m_FRetornoData.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFRetornoData, m_FRetornoData, value)is not (true, var changed, var data))
                return;
            (pFldFRetornoData, m_FRetornoData) = (changed, data);
        }
    }

    public int FEmotion
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEmotion;
        set
        {
            pFldFEmotion = pFldFEmotion || value != m_FEmotion;
            if (pFldFEmotion)
                m_FEmotion = value;
        }
    }

    public int FInternetID
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FInternetID;
        set
        {
            pFldFInternetID = pFldFInternetID || value != m_FInternetID;
            if (pFldFInternetID)
                m_FInternetID = value;
        }
    }

    public bool FUploaded
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FUploaded;
        set
        {
            pFldFUploaded = pFldFUploaded || value != m_FUploaded;
            if (pFldFUploaded)
                m_FUploaded = value;
        }
    }

    public int FNatureza
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNatureza;
        set
        {
            pFldFNatureza = pFldFNatureza || value != m_FNatureza;
            if (pFldFNatureza)
                m_FNatureza = value;
        }
    }

    public bool FBIU
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FBIU;
        set
        {
            pFldFBIU = pFldFBIU || value != m_FBIU;
            if (pFldFBIU)
                m_FBIU = value;
        }
    }

    public bool FAguardarRetorno
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAguardarRetorno;
        set
        {
            pFldFAguardarRetorno = pFldFAguardarRetorno || value != m_FAguardarRetorno;
            if (pFldFAguardarRetorno)
                m_FAguardarRetorno = value;
        }
    }

    [StringLength(255, ErrorMessage = "A propriedade FAguardarRetornoPara da tabela Recados deve ter no máximo 255 caracteres.")]
    public string? FAguardarRetornoPara
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAguardarRetornoPara ?? string.Empty;
        set
        {
            pFldFAguardarRetornoPara = pFldFAguardarRetornoPara || !(m_FAguardarRetornoPara ?? string.Empty).Equals(value);
            if (pFldFAguardarRetornoPara)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FAguardarRetornoPara = trimmed.Length > 255 ? trimmed.AsSpan(0, 255).ToString() : trimmed;
            }
        }
    }

    public bool FAguardarRetornoOK
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAguardarRetornoOK;
        set
        {
            pFldFAguardarRetornoOK = pFldFAguardarRetornoOK || value != m_FAguardarRetornoOK;
            if (pFldFAguardarRetornoOK)
                m_FAguardarRetornoOK = value;
        }
    }

    public int FParaID
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FParaID;
        set
        {
            pFldFParaID = pFldFParaID || value != m_FParaID;
            if (pFldFParaID)
                m_FParaID = value;
        }
    }

    public bool FNaoPublicavel
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNaoPublicavel;
        set
        {
            pFldFNaoPublicavel = pFldFNaoPublicavel || value != m_FNaoPublicavel;
            if (pFldFNaoPublicavel)
                m_FNaoPublicavel = value;
        }
    }

    public bool FIsContatoCRM
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FIsContatoCRM;
        set
        {
            pFldFIsContatoCRM = pFldFIsContatoCRM || value != m_FIsContatoCRM;
            if (pFldFIsContatoCRM)
                m_FIsContatoCRM = value;
        }
    }

    public int FMasterID
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FMasterID;
        set
        {
            pFldFMasterID = pFldFMasterID || value != m_FMasterID;
            if (pFldFMasterID)
                m_FMasterID = value;
        }
    }

    public string? FListaPara
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FListaPara ?? string.Empty;
        set
        {
            pFldFListaPara = pFldFListaPara || !(m_FListaPara ?? string.Empty).Equals(value);
            if (pFldFListaPara)
                m_FListaPara = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public bool FTyped
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FTyped;
        set
        {
            pFldFTyped = pFldFTyped || value != m_FTyped;
            if (pFldFTyped)
                m_FTyped = value;
        }
    }

    public int FAssuntoRecado
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAssuntoRecado;
        set
        {
            pFldFAssuntoRecado = pFldFAssuntoRecado || value != m_FAssuntoRecado;
            if (pFldFAssuntoRecado)
                m_FAssuntoRecado = value;
        }
    }

    public int FHistorico
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FHistorico;
        set
        {
            pFldFHistorico = pFldFHistorico || value != m_FHistorico;
            if (pFldFHistorico)
                m_FHistorico = value;
        }
    }

    public int FContatoCRM
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FContatoCRM;
        set
        {
            pFldFContatoCRM = pFldFContatoCRM || value != m_FContatoCRM;
            if (pFldFContatoCRM)
                m_FContatoCRM = value;
        }
    }

    public int FLigacoes
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FLigacoes;
        set
        {
            pFldFLigacoes = pFldFLigacoes || value != m_FLigacoes;
            if (pFldFLigacoes)
                m_FLigacoes = value;
        }
    }

    public int FAgenda
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAgenda;
        set
        {
            pFldFAgenda = pFldFAgenda || value != m_FAgenda;
            if (pFldFAgenda)
                m_FAgenda = value;
        }
    }

    public bool IVisto() => m_FVisto;
    public int IQuemCad() => m_FQuemCad;
    public int IQuemAtu() => m_FQuemAtu;
    public DateTime IDtCad() => MDtCad;
    public DateTime IDtAtu() => MDtAtu;
    public string IDtCadDataX_DataHora() => MDtCadDataX_DataHora;
    public string IDtAtuDataX_DataHora() => MDtAtuDataX_DataHora;
    public void SetAuditor(int usuarioId) => AuditorQuem = usuarioId;
    public string IMDtCadDataX_DataHora() => MDtAtuDataX_DataHora;
    public string ITabelaName() => PTabelaNome;
    public string ICampoCodigo() => CampoCodigo;
    public string ICampoNome() => CampoNome;
    public string IPrefixo() => PTabelaPrefixo;
    public ImmutableArray<DBInfoSystem> IFieldsRaw() => throw new NotImplementedException();
    public ImmutableArray<DBInfoSystem> IPkFields() => throw new NotImplementedException();
    public ImmutableArray<DBInfoSystem> IPkIndicesFields() => throw new NotImplementedException();
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => false;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetID() => ID;
}