// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class InstanciaService
{
    private static (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterInstancia filtro)
    {
        var parameters = new List<SqlParameter>();
        if (!string.IsNullOrEmpty(filtro.LiminarPedida))
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.LiminarPedida)}", ApplyWildCard(filtro.WildcardChar, filtro.LiminarPedida)));
        }

        if (!string.IsNullOrEmpty(filtro.Objeto))
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.Objeto)}", ApplyWildCard(filtro.WildcardChar, filtro.Objeto)));
        }

        if (filtro.StatusResultado != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.StatusResultado)}", filtro.StatusResultado));
        }

        if (filtro.StatusResultado_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.StatusResultado)}_end", filtro.StatusResultado_end));
        }

        if (filtro.LiminarPendente != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.LiminarPendente)}", filtro.LiminarPendente));
        }

        if (filtro.InterpusemosRecurso != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.InterpusemosRecurso)}", filtro.InterpusemosRecurso));
        }

        if (filtro.LiminarConcedida != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.LiminarConcedida)}", filtro.LiminarConcedida));
        }

        if (filtro.LiminarNegada != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.LiminarNegada)}", filtro.LiminarNegada));
        }

        if (filtro.Processo != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.Processo)}", filtro.Processo));
        }

        if (!filtro.Data.IsEmpty())
        {
            if (DateTime.TryParse(filtro.Data, out var dataParam))
                parameters.Add(new($"@{nameof(DBInstanciaDicInfo.Data)}", dataParam));
        }

        if (!filtro.Data_end.IsEmpty())
        {
            if (DateTime.TryParse(filtro.Data_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBInstanciaDicInfo.Data)}_end", dataParam));
        }

        if (filtro.LiminarParcial != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.LiminarParcial)}", filtro.LiminarParcial));
        }

        if (!string.IsNullOrEmpty(filtro.LiminarResultado))
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.LiminarResultado)}", ApplyWildCard(filtro.WildcardChar, filtro.LiminarResultado)));
        }

        if (!string.IsNullOrEmpty(filtro.NroProcesso))
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.NroProcesso)}", ApplyWildCard(filtro.WildcardChar, filtro.NroProcesso)));
        }

        if (filtro.Divisao != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.Divisao)}", filtro.Divisao));
        }

        if (filtro.Divisao_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.Divisao)}_end", filtro.Divisao_end));
        }

        if (filtro.LiminarCliente != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.LiminarCliente)}", filtro.LiminarCliente));
        }

        if (filtro.Comarca != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.Comarca)}", filtro.Comarca));
        }

        if (filtro.Comarca_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.Comarca)}_end", filtro.Comarca_end));
        }

        if (filtro.SubDivisao != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.SubDivisao)}", filtro.SubDivisao));
        }

        if (filtro.SubDivisao_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.SubDivisao)}_end", filtro.SubDivisao_end));
        }

        if (filtro.Principal != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.Principal)}", filtro.Principal));
        }

        if (filtro.Acao != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.Acao)}", filtro.Acao));
        }

        if (filtro.Foro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.Foro)}", filtro.Foro));
        }

        if (filtro.TipoRecurso != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.TipoRecurso)}", filtro.TipoRecurso));
        }

        if (!string.IsNullOrEmpty(filtro.ZKey))
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.ZKey)}", ApplyWildCard(filtro.WildcardChar, filtro.ZKey)));
        }

        if (filtro.ZKeyQuem != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.ZKeyQuem)}", filtro.ZKeyQuem));
        }

        if (filtro.ZKeyQuem_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.ZKeyQuem)}_end", filtro.ZKeyQuem_end));
        }

        if (!filtro.ZKeyQuando.IsEmpty())
        {
            if (DateTime.TryParse(filtro.ZKeyQuando, out var dataParam))
                parameters.Add(new($"@{nameof(DBInstanciaDicInfo.ZKeyQuando)}", dataParam));
        }

        if (!filtro.ZKeyQuando_end.IsEmpty())
        {
            if (DateTime.TryParse(filtro.ZKeyQuando_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBInstanciaDicInfo.ZKeyQuando)}_end", dataParam));
        }

        if (!string.IsNullOrEmpty(filtro.NroAntigo))
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.NroAntigo)}", ApplyWildCard(filtro.WildcardChar, filtro.NroAntigo)));
        }

        if (!string.IsNullOrEmpty(filtro.AccessCode))
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.AccessCode)}", ApplyWildCard(filtro.WildcardChar, filtro.AccessCode)));
        }

        if (filtro.Julgador != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.Julgador)}", filtro.Julgador));
        }

        if (filtro.Julgador_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.Julgador)}_end", filtro.Julgador_end));
        }

        if (!string.IsNullOrEmpty(filtro.ZKeyIA))
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.ZKeyIA)}", ApplyWildCard(filtro.WildcardChar, filtro.ZKeyIA)));
        }

        if (!string.IsNullOrEmpty(filtro.GUID))
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.GUID)}", ApplyWildCard(filtro.WildcardChar, filtro.GUID)));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
        }

        if (filtro.Codigo_filtro_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBInstanciaDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
        }

        if (filtro.LogicalOperator.IsEmpty() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        cWhere.Append(filtro.LiminarPedida.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.LiminarPedida}]  {DevourerConsts.MsiCollate} like @{nameof(DBInstanciaDicInfo.LiminarPedida)}");
        cWhere.Append(filtro.Objeto.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.Objeto}]  {DevourerConsts.MsiCollate} like @{nameof(DBInstanciaDicInfo.Objeto)}");
        if (!filtro.StatusResultado.IsEmpty() && filtro.StatusResultado_end.IsEmpty())
        {
            cWhere.Append(filtro.StatusResultado <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.StatusResultado}] >= @{nameof(DBInstanciaDicInfo.StatusResultado)}");
        }
        else
        {
            cWhere.Append((filtro.StatusResultado <= 0 && filtro.StatusResultado_end <= 0) ? string.Empty : (!(filtro.StatusResultado <= 0) && !(filtro.StatusResultado_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBInstanciaDicInfo.StatusResultado} BETWEEN @{nameof(DBInstanciaDicInfo.StatusResultado)} AND @{nameof(DBInstanciaDicInfo.StatusResultado)}_end" : !(filtro.StatusResultado <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBInstanciaDicInfo.StatusResultado} = @{nameof(DBInstanciaDicInfo.StatusResultado)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBInstanciaDicInfo.StatusResultado} <= @{nameof(DBInstanciaDicInfo.StatusResultado)}_end");
        }

        cWhere.Append(filtro.LiminarPendente == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.LiminarPendente}] = @{nameof(DBInstanciaDicInfo.LiminarPendente)}");
        cWhere.Append(filtro.InterpusemosRecurso == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.InterpusemosRecurso}] = @{nameof(DBInstanciaDicInfo.InterpusemosRecurso)}");
        cWhere.Append(filtro.LiminarConcedida == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.LiminarConcedida}] = @{nameof(DBInstanciaDicInfo.LiminarConcedida)}");
        cWhere.Append(filtro.LiminarNegada == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.LiminarNegada}] = @{nameof(DBInstanciaDicInfo.LiminarNegada)}");
        cWhere.Append(filtro.Processo <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.Processo}] = @{nameof(DBInstanciaDicInfo.Processo)}");
        if (!filtro.Data.IsEmpty() && filtro.Data_end.IsEmpty())
        {
            cWhere.Append(filtro.Data.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.Data}], 103) >= CONVERT(DATE, @{nameof(DBInstanciaDicInfo.Data)}, 103)");
        }
        else
        {
            cWhere.Append((filtro.Data.IsEmpty() && filtro.Data_end.IsEmpty()) ? string.Empty : (!(filtro.Data.IsEmpty()) && !(filtro.Data_end.IsEmpty())) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBInstanciaDicInfo.Data} BETWEEN @{nameof(DBInstanciaDicInfo.Data)} AND @{nameof(DBInstanciaDicInfo.Data)}_end" : !(filtro.Data.IsEmpty()) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBInstanciaDicInfo.Data} = @{nameof(DBInstanciaDicInfo.Data)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBInstanciaDicInfo.Data} <= @{nameof(DBInstanciaDicInfo.Data)}_end");
        }

        cWhere.Append(filtro.LiminarParcial == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.LiminarParcial}] = @{nameof(DBInstanciaDicInfo.LiminarParcial)}");
        cWhere.Append(filtro.LiminarResultado.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.LiminarResultado}]  {DevourerConsts.MsiCollate} like @{nameof(DBInstanciaDicInfo.LiminarResultado)}");
        cWhere.Append(filtro.NroProcesso.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.NroProcesso}]  {DevourerConsts.MsiCollate} like @{nameof(DBInstanciaDicInfo.NroProcesso)}");
        if (!filtro.Divisao.IsEmpty() && filtro.Divisao_end.IsEmpty())
        {
            cWhere.Append(filtro.Divisao <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.Divisao}] >= @{nameof(DBInstanciaDicInfo.Divisao)}");
        }
        else
        {
            cWhere.Append((filtro.Divisao <= 0 && filtro.Divisao_end <= 0) ? string.Empty : (!(filtro.Divisao <= 0) && !(filtro.Divisao_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBInstanciaDicInfo.Divisao} BETWEEN @{nameof(DBInstanciaDicInfo.Divisao)} AND @{nameof(DBInstanciaDicInfo.Divisao)}_end" : !(filtro.Divisao <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBInstanciaDicInfo.Divisao} = @{nameof(DBInstanciaDicInfo.Divisao)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBInstanciaDicInfo.Divisao} <= @{nameof(DBInstanciaDicInfo.Divisao)}_end");
        }

        cWhere.Append(filtro.LiminarCliente == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.LiminarCliente}] = @{nameof(DBInstanciaDicInfo.LiminarCliente)}");
        if (!filtro.Comarca.IsEmpty() && filtro.Comarca_end.IsEmpty())
        {
            cWhere.Append(filtro.Comarca <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.Comarca}] >= @{nameof(DBInstanciaDicInfo.Comarca)}");
        }
        else
        {
            cWhere.Append((filtro.Comarca <= 0 && filtro.Comarca_end <= 0) ? string.Empty : (!(filtro.Comarca <= 0) && !(filtro.Comarca_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBInstanciaDicInfo.Comarca} BETWEEN @{nameof(DBInstanciaDicInfo.Comarca)} AND @{nameof(DBInstanciaDicInfo.Comarca)}_end" : !(filtro.Comarca <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBInstanciaDicInfo.Comarca} = @{nameof(DBInstanciaDicInfo.Comarca)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBInstanciaDicInfo.Comarca} <= @{nameof(DBInstanciaDicInfo.Comarca)}_end");
        }

        if (!filtro.SubDivisao.IsEmpty() && filtro.SubDivisao_end.IsEmpty())
        {
            cWhere.Append(filtro.SubDivisao <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.SubDivisao}] >= @{nameof(DBInstanciaDicInfo.SubDivisao)}");
        }
        else
        {
            cWhere.Append((filtro.SubDivisao <= 0 && filtro.SubDivisao_end <= 0) ? string.Empty : (!(filtro.SubDivisao <= 0) && !(filtro.SubDivisao_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBInstanciaDicInfo.SubDivisao} BETWEEN @{nameof(DBInstanciaDicInfo.SubDivisao)} AND @{nameof(DBInstanciaDicInfo.SubDivisao)}_end" : !(filtro.SubDivisao <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBInstanciaDicInfo.SubDivisao} = @{nameof(DBInstanciaDicInfo.SubDivisao)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBInstanciaDicInfo.SubDivisao} <= @{nameof(DBInstanciaDicInfo.SubDivisao)}_end");
        }

        cWhere.Append(filtro.Principal == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.Principal}] = @{nameof(DBInstanciaDicInfo.Principal)}");
        cWhere.Append(filtro.Acao <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.Acao}] = @{nameof(DBInstanciaDicInfo.Acao)}");
        cWhere.Append(filtro.Foro <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.Foro}] = @{nameof(DBInstanciaDicInfo.Foro)}");
        cWhere.Append(filtro.TipoRecurso <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.TipoRecurso}] = @{nameof(DBInstanciaDicInfo.TipoRecurso)}");
        cWhere.Append(filtro.ZKey.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.ZKey}]  {DevourerConsts.MsiCollate} like @{nameof(DBInstanciaDicInfo.ZKey)}");
        if (!filtro.ZKeyQuem.IsEmpty() && filtro.ZKeyQuem_end.IsEmpty())
        {
            cWhere.Append(filtro.ZKeyQuem <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.ZKeyQuem}] >= @{nameof(DBInstanciaDicInfo.ZKeyQuem)}");
        }
        else
        {
            cWhere.Append((filtro.ZKeyQuem <= 0 && filtro.ZKeyQuem_end <= 0) ? string.Empty : (!(filtro.ZKeyQuem <= 0) && !(filtro.ZKeyQuem_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBInstanciaDicInfo.ZKeyQuem} BETWEEN @{nameof(DBInstanciaDicInfo.ZKeyQuem)} AND @{nameof(DBInstanciaDicInfo.ZKeyQuem)}_end" : !(filtro.ZKeyQuem <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBInstanciaDicInfo.ZKeyQuem} = @{nameof(DBInstanciaDicInfo.ZKeyQuem)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBInstanciaDicInfo.ZKeyQuem} <= @{nameof(DBInstanciaDicInfo.ZKeyQuem)}_end");
        }

        if (!filtro.ZKeyQuando.IsEmpty() && filtro.ZKeyQuando_end.IsEmpty())
        {
            cWhere.Append(filtro.ZKeyQuando.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.ZKeyQuando}], 103) >= CONVERT(DATE, @{nameof(DBInstanciaDicInfo.ZKeyQuando)}, 103)");
        }
        else
        {
            cWhere.Append((filtro.ZKeyQuando.IsEmpty() && filtro.ZKeyQuando_end.IsEmpty()) ? string.Empty : (!(filtro.ZKeyQuando.IsEmpty()) && !(filtro.ZKeyQuando_end.IsEmpty())) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBInstanciaDicInfo.ZKeyQuando} BETWEEN @{nameof(DBInstanciaDicInfo.ZKeyQuando)} AND @{nameof(DBInstanciaDicInfo.ZKeyQuando)}_end" : !(filtro.ZKeyQuando.IsEmpty()) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBInstanciaDicInfo.ZKeyQuando} = @{nameof(DBInstanciaDicInfo.ZKeyQuando)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBInstanciaDicInfo.ZKeyQuando} <= @{nameof(DBInstanciaDicInfo.ZKeyQuando)}_end");
        }

        cWhere.Append(filtro.NroAntigo.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.NroAntigo}]  {DevourerConsts.MsiCollate} like @{nameof(DBInstanciaDicInfo.NroAntigo)}");
        cWhere.Append(filtro.AccessCode.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.AccessCode}]  {DevourerConsts.MsiCollate} like @{nameof(DBInstanciaDicInfo.AccessCode)}");
        if (!filtro.Julgador.IsEmpty() && filtro.Julgador_end.IsEmpty())
        {
            cWhere.Append(filtro.Julgador <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.Julgador}] >= @{nameof(DBInstanciaDicInfo.Julgador)}");
        }
        else
        {
            cWhere.Append((filtro.Julgador <= 0 && filtro.Julgador_end <= 0) ? string.Empty : (!(filtro.Julgador <= 0) && !(filtro.Julgador_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBInstanciaDicInfo.Julgador} BETWEEN @{nameof(DBInstanciaDicInfo.Julgador)} AND @{nameof(DBInstanciaDicInfo.Julgador)}_end" : !(filtro.Julgador <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBInstanciaDicInfo.Julgador} = @{nameof(DBInstanciaDicInfo.Julgador)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBInstanciaDicInfo.Julgador} <= @{nameof(DBInstanciaDicInfo.Julgador)}_end");
        }

        cWhere.Append(filtro.ZKeyIA.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.ZKeyIA}]  {DevourerConsts.MsiCollate} like @{nameof(DBInstanciaDicInfo.ZKeyIA)}");
        cWhere.Append(filtro.GUID.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.GUID}]  {DevourerConsts.MsiCollate} like @{nameof(DBInstanciaDicInfo.GUID)}");
        if (!filtro.Codigo_filtro.IsEmpty() && filtro.Codigo_filtro_end.IsEmpty())
        {
            cWhere.Append(filtro.Codigo_filtro <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBInstanciaDicInfo.PTabelaNome}].[{DBInstanciaDicInfo.CampoCodigo}] >= @{nameof(DBInstanciaDicInfo.CampoCodigo)}");
        }
        else
        {
            cWhere.Append((filtro.Codigo_filtro <= 0 && filtro.Codigo_filtro_end <= 0) ? string.Empty : (!(filtro.Codigo_filtro <= 0) && !(filtro.Codigo_filtro_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBInstanciaDicInfo.CampoCodigo} BETWEEN @{nameof(DBInstanciaDicInfo.CampoCodigo)} AND @{nameof(DBInstanciaDicInfo.CampoCodigo)}_end" : !(filtro.Codigo_filtro <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBInstanciaDicInfo.CampoCodigo} = @{nameof(DBInstanciaDicInfo.CampoCodigo)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBInstanciaDicInfo.CampoCodigo} <= @{nameof(DBInstanciaDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private static string ApplyWildCard(char wildcardChar, string value)
    {
        if (wildcardChar == '\0' || wildcardChar == ' ')
        {
            return value;
        }

        var result = $"{wildcardChar}{value.Replace(" ", wildcardChar.ToString())}{wildcardChar}";
        return result;
    }

    public async Task<IEnumerable<NomeID>> GetListN([FromQuery] int max, [FromBody] Filters.FilterInstancia? filtro, [FromRoute, Required] string uri, CancellationToken token)
    {
        // Tracking: 20250606-0
        ThrowIfDisposed();
        var filtroResult = filtro == null ? null : WFiltro(filtro!);
        string where = filtroResult?.where ?? string.Empty;
        List<SqlParameter> parameters = filtroResult?.parametros ?? [];
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new Exception($"Coneão nula.");
        }

        var keyCache = await reader.ReadStringAuditor(uri, "", [], oCnn);
        var cacheKey = $"{uri}-Instancia-{max}-{where.GetHashCode()}-GetListN-{keyCache}";
        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId)
        };
        return await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataListNAsync(max, uri, where, parameters, cancel), entryOptions, cancellationToken: token) ?? [];
    }

    private async Task<IEnumerable<NomeID>> GetDataListNAsync(int max, string uri, string where, List<SqlParameter> parameters, CancellationToken token)
    {
        var result = new List<NomeID>(max);
        var lista = await reader.ListarN(max, uri, where, parameters, DBInstanciaDicInfo.CampoNome);
        foreach (var item in lista)
        {
            if (token.IsCancellationRequested)
                break;
            if (item?.FNome != null)
            {
                result.Add(new NomeID { Nome = item.FNome, ID = item.ID });
            }
        }

        return result;
    }

    private async Task<IEnumerable<InstanciaResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}