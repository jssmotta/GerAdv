// 100% auto-generated by Source Genesys Core
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming 1
public partial class DBClientes
{
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool pFldFEmpresa, pFldFIcone, pFldFNomeMae, pFldFRGDataExp, pFldFGUID, pFldFInativo, pFldFQuemIndicou, pFldFSendEMail, pFldFNome, pFldFAdv, pFldFIDRep, pFldFJuridica, pFldFNomeFantasia, pFldFClass, pFldFTipo, pFldFDtNasc, pFldFInscEst, pFldFQualificacao, pFldFSexo, pFldFIdade, pFldFCNPJ, pFldFCPF, pFldFRG, pFldFTipoCaptacao, pFldFObservacao, pFldFEndereco, pFldFBairro, pFldFCidade, pFldFCEP, pFldFFax, pFldFFone, pFldFData, pFldFHomePage, pFldFEMail, pFldFObito, pFldFNomePai, pFldFRGOExpeditor, pFldFRegimeTributacao, pFldFEnquadramentoEmpresa, pFldFReportECBOnly, pFldFProBono, pFldFCNH, pFldFPessoaContato, pFldFEtiqueta, pFldFAni, pFldFBold;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected int m_FEmpresa, m_FAdv, m_FIDRep, m_FIdade, m_FCidade, m_FRegimeTributacao, m_FEnquadramentoEmpresa;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected string? m_FIcone, m_FNomeMae, m_FGUID, m_FQuemIndicou, m_FNome, m_FNomeFantasia, m_FClass, m_FInscEst, m_FQualificacao, m_FCNPJ, m_FCPF, m_FRG, m_FObservacao, m_FEndereco, m_FBairro, m_FCEP, m_FFax, m_FFone, m_FHomePage, m_FEMail, m_FNomePai, m_FRGOExpeditor, m_FCNH, m_FPessoaContato;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected DateTime? m_FRGDataExp, m_FDtNasc, m_FData;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool m_FInativo, m_FSendEMail, m_FJuridica, m_FTipo, m_FSexo, m_FTipoCaptacao, m_FObito, m_FReportECBOnly, m_FProBono, m_FEtiqueta, m_FAni, m_FBold;
    public virtual int FEmpresa
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEmpresa;
        set
        {
            pFldFEmpresa = pFldFEmpresa || value != m_FEmpresa;
            if (pFldFEmpresa)
                m_FEmpresa = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(255, ErrorMessage = "A propriedade FIcone da tabela Clientes deve ter no máximo 255 caracteres.")]
    public virtual string? FIcone
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FIcone ?? string.Empty;
        set
        {
            pFldFIcone = pFldFIcone || !(m_FIcone ?? string.Empty).Equals(value);
            if (pFldFIcone)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FIcone = trimmed.Length > 255 ? trimmed.AsSpan(0, 255).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(80, ErrorMessage = "A propriedade FNomeMae da tabela Clientes deve ter no máximo 80 caracteres.")]
    public virtual string? FNomeMae
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNomeMae ?? string.Empty;
        set
        {
            pFldFNomeMae = pFldFNomeMae || !(m_FNomeMae ?? string.Empty).Equals(value);
            if (pFldFNomeMae)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FNomeMae = trimmed.Length > 80 ? trimmed.AsSpan(0, 80).ToString() : trimmed;
            }
        }
    }

    public virtual string? FRGDataExp
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FRGDataExp is null || m_FRGDataExp == DevourerOne.DDataZerada ? string.Empty : m_FRGDataExp.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFRGDataExp, m_FRGDataExp, value)is not (true, var changed, var data))
                return;
            (pFldFRGDataExp, m_FRGDataExp) = (changed, data);
        }
    }

    // Tracking Code: 20250503
    [StringLength(150, ErrorMessage = "A propriedade FGUID da tabela Clientes deve ter no máximo 150 caracteres.")]
    public virtual string? FGUID
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FGUID ?? string.Empty;
        set
        {
            pFldFGUID = pFldFGUID || !(m_FGUID ?? string.Empty).Equals(value);
            if (pFldFGUID)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FGUID = trimmed.Length > 150 ? trimmed.AsSpan(0, 150).ToString() : trimmed;
            }
        }
    }

    public virtual bool FInativo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FInativo;
        set
        {
            pFldFInativo = pFldFInativo || value != m_FInativo;
            if (pFldFInativo)
                m_FInativo = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(80, ErrorMessage = "A propriedade FQuemIndicou da tabela Clientes deve ter no máximo 80 caracteres.")]
    public virtual string? FQuemIndicou
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FQuemIndicou ?? string.Empty;
        set
        {
            pFldFQuemIndicou = pFldFQuemIndicou || !(m_FQuemIndicou ?? string.Empty).Equals(value);
            if (pFldFQuemIndicou)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FQuemIndicou = trimmed.Length > 80 ? trimmed.AsSpan(0, 80).ToString() : trimmed;
            }
        }
    }

    public virtual bool FSendEMail
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FSendEMail;
        set
        {
            pFldFSendEMail = pFldFSendEMail || value != m_FSendEMail;
            if (pFldFSendEMail)
                m_FSendEMail = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(80, ErrorMessage = "A propriedade FNome da tabela Clientes deve ter no máximo 80 caracteres.")]
    public virtual string? FNome
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNome ?? string.Empty;
        set
        {
            pFldFNome = pFldFNome || !(m_FNome ?? string.Empty).Equals(value);
            if (pFldFNome)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FNome = trimmed.Length > 80 ? trimmed.AsSpan(0, 80).ToString() : trimmed;
            }
        }
    }

    public virtual int FAdv
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAdv;
        set
        {
            pFldFAdv = pFldFAdv || value != m_FAdv;
            if (pFldFAdv)
                m_FAdv = value;
        }
    }

    public virtual int FIDRep
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FIDRep;
        set
        {
            pFldFIDRep = pFldFIDRep || value != m_FIDRep;
            if (pFldFIDRep)
                m_FIDRep = value;
        }
    }

    public virtual bool FJuridica
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FJuridica;
        set
        {
            pFldFJuridica = pFldFJuridica || value != m_FJuridica;
            if (pFldFJuridica)
                m_FJuridica = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(80, ErrorMessage = "A propriedade FNomeFantasia da tabela Clientes deve ter no máximo 80 caracteres.")]
    public virtual string? FNomeFantasia
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNomeFantasia ?? string.Empty;
        set
        {
            pFldFNomeFantasia = pFldFNomeFantasia || !(m_FNomeFantasia ?? string.Empty).Equals(value);
            if (pFldFNomeFantasia)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FNomeFantasia = trimmed.Length > 80 ? trimmed.AsSpan(0, 80).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(1, ErrorMessage = "A propriedade FClass da tabela Clientes deve ter no máximo 1 caracteres.")]
    public virtual string? FClass
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FClass ?? string.Empty;
        set
        {
            pFldFClass = pFldFClass || !(m_FClass ?? string.Empty).Equals(value);
            if (pFldFClass)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FClass = trimmed.Length > 1 ? trimmed.AsSpan(0, 1).ToString() : trimmed;
            }
        }
    }

    public virtual bool FTipo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FTipo;
        set
        {
            pFldFTipo = pFldFTipo || value != m_FTipo;
            if (pFldFTipo)
                m_FTipo = value;
        }
    }

    public virtual string? FDtNasc
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDtNasc is null || m_FDtNasc == DevourerOne.DDataZerada ? string.Empty : m_FDtNasc.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFDtNasc, m_FDtNasc, value)is not (true, var changed, var data))
                return;
            (pFldFDtNasc, m_FDtNasc) = (changed, data);
        }
    }

    // Tracking Code: 20250503
    [StringLength(15, ErrorMessage = "A propriedade FInscEst da tabela Clientes deve ter no máximo 15 caracteres.")]
    public virtual string? FInscEst
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FInscEst ?? string.Empty;
        set
        {
            pFldFInscEst = pFldFInscEst || !(m_FInscEst ?? string.Empty).Equals(value);
            if (pFldFInscEst)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FInscEst = trimmed.Length > 15 ? trimmed.AsSpan(0, 15).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(100, ErrorMessage = "A propriedade FQualificacao da tabela Clientes deve ter no máximo 100 caracteres.")]
    public virtual string? FQualificacao
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FQualificacao ?? string.Empty;
        set
        {
            pFldFQualificacao = pFldFQualificacao || !(m_FQualificacao ?? string.Empty).Equals(value);
            if (pFldFQualificacao)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FQualificacao = trimmed.Length > 100 ? trimmed.AsSpan(0, 100).ToString() : trimmed;
            }
        }
    }

    public virtual bool FSexo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FSexo;
        set
        {
            pFldFSexo = pFldFSexo || value != m_FSexo;
            if (pFldFSexo)
                m_FSexo = value;
        }
    }

    public virtual int FIdade
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FIdade;
        set
        {
            pFldFIdade = pFldFIdade || value != m_FIdade;
            if (pFldFIdade)
                m_FIdade = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(14, ErrorMessage = "A propriedade FCNPJ da tabela Clientes deve ter no máximo 14 caracteres.")]
    public virtual string? FCNPJ
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCNPJ ?? string.Empty;
        set
        {
            pFldFCNPJ = pFldFCNPJ || !(m_FCNPJ ?? string.Empty).Equals(value);
            if (pFldFCNPJ)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FCNPJ = trimmed.Length > 14 ? trimmed.AsSpan(0, 14).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(11, ErrorMessage = "A propriedade FCPF da tabela Clientes deve ter no máximo 11 caracteres.")]
    public virtual string? FCPF
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCPF ?? string.Empty;
        set
        {
            pFldFCPF = pFldFCPF || !(m_FCPF ?? string.Empty).Equals(value);
            if (pFldFCPF)
            {
                var trimmed = (value?.Trim() ?? string.Empty).ClearInputCpf();
                var valueCpf = trimmed.Length > 11 ? trimmed.AsSpan(0, 11).ToString() : trimmed;
                if (valueCpf.Length < 11)
                {
                    valueCpf = string.Empty;
                }

                if (valueCpf.Length == 0 || valueCpf.IsValidCpf())
                    m_FCPF = valueCpf;
                else
                    throw new ArgumentException("CPF inválido ou não informado corretamente.", nameof(value));
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(50, ErrorMessage = "A propriedade FRG da tabela Clientes deve ter no máximo 50 caracteres.")]
    public virtual string? FRG
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FRG ?? string.Empty;
        set
        {
            pFldFRG = pFldFRG || !(m_FRG ?? string.Empty).Equals(value);
            if (pFldFRG)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FRG = trimmed.Length > 50 ? trimmed.AsSpan(0, 50).ToString() : trimmed;
            }
        }
    }

    public virtual bool FTipoCaptacao
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FTipoCaptacao;
        set
        {
            pFldFTipoCaptacao = pFldFTipoCaptacao || value != m_FTipoCaptacao;
            if (pFldFTipoCaptacao)
                m_FTipoCaptacao = value;
        }
    }

    // Tracking Code: 20250503
    public virtual string? FObservacao
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FObservacao ?? string.Empty;
        set
        {
            pFldFObservacao = pFldFObservacao || !(m_FObservacao ?? string.Empty).Equals(value);
            if (pFldFObservacao)
                m_FObservacao = value.trim().FixAbc() ?? string.Empty;
        }
    }

    // Tracking Code: 20250503
    [StringLength(80, ErrorMessage = "A propriedade FEndereco da tabela Clientes deve ter no máximo 80 caracteres.")]
    public virtual string? FEndereco
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEndereco ?? string.Empty;
        set
        {
            pFldFEndereco = pFldFEndereco || !(m_FEndereco ?? string.Empty).Equals(value);
            if (pFldFEndereco)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FEndereco = trimmed.Length > 80 ? trimmed.AsSpan(0, 80).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(50, ErrorMessage = "A propriedade FBairro da tabela Clientes deve ter no máximo 50 caracteres.")]
    public virtual string? FBairro
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FBairro ?? string.Empty;
        set
        {
            pFldFBairro = pFldFBairro || !(m_FBairro ?? string.Empty).Equals(value);
            if (pFldFBairro)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FBairro = trimmed.Length > 50 ? trimmed.AsSpan(0, 50).ToString() : trimmed;
            }
        }
    }

    public virtual int FCidade
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCidade;
        set
        {
            pFldFCidade = pFldFCidade || value != m_FCidade;
            if (pFldFCidade)
                m_FCidade = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(10, ErrorMessage = "A propriedade FCEP da tabela Clientes deve ter no máximo 10 caracteres.")]
    public virtual string? FCEP
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCEP ?? string.Empty;
        set
        {
            pFldFCEP = pFldFCEP || !(m_FCEP ?? string.Empty).Equals(value);
            if (pFldFCEP)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FCEP = trimmed.Length > 10 ? trimmed.AsSpan(0, 10).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    public virtual string? FFax
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FFax ?? string.Empty;
        set
        {
            pFldFFax = pFldFFax || !(m_FFax ?? string.Empty).Equals(value);
            if (pFldFFax)
                m_FFax = value.trim().FixAbc() ?? string.Empty;
        }
    }

    // Tracking Code: 20250503
    public virtual string? FFone
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FFone ?? string.Empty;
        set
        {
            pFldFFone = pFldFFone || !(m_FFone ?? string.Empty).Equals(value);
            if (pFldFFone)
                m_FFone = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public virtual string? FData
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FData is null || m_FData == DevourerOne.DDataZerada ? string.Empty : m_FData.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFData, m_FData, value)is not (true, var changed, var data))
                return;
            (pFldFData, m_FData) = (changed, data);
        }
    }

    // Tracking Code: 20250503
    [StringLength(60, ErrorMessage = "A propriedade FHomePage da tabela Clientes deve ter no máximo 60 caracteres.")]
    public virtual string? FHomePage
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FHomePage ?? string.Empty;
        set
        {
            pFldFHomePage = pFldFHomePage || !(m_FHomePage ?? string.Empty).Equals(value);
            if (pFldFHomePage)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FHomePage = trimmed.Length > 60 ? trimmed.AsSpan(0, 60).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(255, ErrorMessage = "A propriedade FEMail da tabela Clientes deve ter no máximo 255 caracteres.")]
    public virtual string? FEMail
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEMail ?? string.Empty;
        set
        {
            pFldFEMail = pFldFEMail || !(m_FEMail ?? string.Empty).Equals(value);
            if (pFldFEMail)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FEMail = trimmed.Length > 255 ? trimmed.AsSpan(0, 255).ToString() : trimmed;
                if (m_FEMail.IsValidEmail())
                    return;
                throw new ArgumentException("E-mail inválido ou não informado corretamente.", nameof(value));
            }
        }
    }

    public virtual bool FObito
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FObito;
        set
        {
            pFldFObito = pFldFObito || value != m_FObito;
            if (pFldFObito)
                m_FObito = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(80, ErrorMessage = "A propriedade FNomePai da tabela Clientes deve ter no máximo 80 caracteres.")]
    public virtual string? FNomePai
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNomePai ?? string.Empty;
        set
        {
            pFldFNomePai = pFldFNomePai || !(m_FNomePai ?? string.Empty).Equals(value);
            if (pFldFNomePai)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FNomePai = trimmed.Length > 80 ? trimmed.AsSpan(0, 80).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(30, ErrorMessage = "A propriedade FRGOExpeditor da tabela Clientes deve ter no máximo 30 caracteres.")]
    public virtual string? FRGOExpeditor
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FRGOExpeditor ?? string.Empty;
        set
        {
            pFldFRGOExpeditor = pFldFRGOExpeditor || !(m_FRGOExpeditor ?? string.Empty).Equals(value);
            if (pFldFRGOExpeditor)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FRGOExpeditor = trimmed.Length > 30 ? trimmed.AsSpan(0, 30).ToString() : trimmed;
            }
        }
    }

    public virtual int FRegimeTributacao
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FRegimeTributacao;
        set
        {
            pFldFRegimeTributacao = pFldFRegimeTributacao || value != m_FRegimeTributacao;
            if (pFldFRegimeTributacao)
                m_FRegimeTributacao = value;
        }
    }

    public virtual int FEnquadramentoEmpresa
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEnquadramentoEmpresa;
        set
        {
            pFldFEnquadramentoEmpresa = pFldFEnquadramentoEmpresa || value != m_FEnquadramentoEmpresa;
            if (pFldFEnquadramentoEmpresa)
                m_FEnquadramentoEmpresa = value;
        }
    }

    public virtual bool FReportECBOnly
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FReportECBOnly;
        set
        {
            pFldFReportECBOnly = pFldFReportECBOnly || value != m_FReportECBOnly;
            if (pFldFReportECBOnly)
                m_FReportECBOnly = value;
        }
    }

    public virtual bool FProBono
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FProBono;
        set
        {
            pFldFProBono = pFldFProBono || value != m_FProBono;
            if (pFldFProBono)
                m_FProBono = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(100, ErrorMessage = "A propriedade FCNH da tabela Clientes deve ter no máximo 100 caracteres.")]
    public virtual string? FCNH
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCNH ?? string.Empty;
        set
        {
            pFldFCNH = pFldFCNH || !(m_FCNH ?? string.Empty).Equals(value);
            if (pFldFCNH)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FCNH = trimmed.Length > 100 ? trimmed.AsSpan(0, 100).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(120, ErrorMessage = "A propriedade FPessoaContato da tabela Clientes deve ter no máximo 120 caracteres.")]
    public virtual string? FPessoaContato
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPessoaContato ?? string.Empty;
        set
        {
            pFldFPessoaContato = pFldFPessoaContato || !(m_FPessoaContato ?? string.Empty).Equals(value);
            if (pFldFPessoaContato)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FPessoaContato = trimmed.Length > 120 ? trimmed.AsSpan(0, 120).ToString() : trimmed;
            }
        }
    }

    public virtual bool FEtiqueta
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEtiqueta;
        set
        {
            pFldFEtiqueta = pFldFEtiqueta || value != m_FEtiqueta;
            if (pFldFEtiqueta)
                m_FEtiqueta = value;
        }
    }

    public virtual bool FAni
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAni;
        set
        {
            pFldFAni = pFldFAni || value != m_FAni;
            if (pFldFAni)
                m_FAni = value;
        }
    }

    public virtual bool FBold
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FBold;
        set
        {
            pFldFBold = pFldFBold || value != m_FBold;
            if (pFldFBold)
                m_FBold = value;
        }
    }

    public void SetAuditor(int usuarioId) => AuditorQuem = usuarioId;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITabelaName() => PTabelaNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoCodigo() => CampoCodigo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoNome() => CampoNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string IPrefixo() => PTabelaPrefixo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITypeFieldCode() => "int";
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IdIsIdentity() => false;
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetID() => ID;
}