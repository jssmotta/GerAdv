// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class ForoWriterTests
{
    private readonly Mock<IFForoFactory> _mockForoFactory;
    private readonly Mock<FForo> _mockFForo;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly ForoWriter _foroWriter;
    public ForoWriterTests()
    {
        _mockForoFactory = new Mock<IFForoFactory>();
        _mockFForo = new Mock<FForo>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _foroWriter = new ForoWriter(_mockForoFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var foro = CreateValidForoModel();
        foro.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockForoFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFForo.Object);
        _mockFForo.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _foroWriter.WriteAsync(foro, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFForo.Object);
        _mockForoFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockForoFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFForo.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var foro = CreateValidForoModel();
        foro.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockForoFactory.Setup(x => x.CreateFromIdAsync(foro.Id, _mockConnection.Object)).ReturnsAsync(_mockFForo.Object);
        _mockFForo.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _foroWriter.WriteAsync(foro, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFForo.Object);
        _mockForoFactory.Verify(x => x.CreateFromIdAsync(foro.Id, _mockConnection.Object), Times.Once);
        _mockForoFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFForo.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var foro = CreateValidForoModel();
        var auditorQuem = 99;
        _mockForoFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFForo.Object);
        _mockFForo.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _foroWriter.WriteAsync(foro, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFForo.Object);
        _mockFForo.VerifySet(x => x.FEMail = foro.EMail, Times.Once);
        _mockFForo.VerifySet(x => x.FNome = foro.Nome, Times.Once);
        _mockFForo.VerifySet(x => x.FUnico = foro.Unico, Times.Once);
        _mockFForo.VerifySet(x => x.FCidade = foro.Cidade, Times.Once);
        _mockFForo.VerifySet(x => x.FSite = foro.Site, Times.Once);
        _mockFForo.VerifySet(x => x.FEndereco = foro.Endereco, Times.Once);
        _mockFForo.VerifySet(x => x.FBairro = foro.Bairro, Times.Once);
        _mockFForo.VerifySet(x => x.FFone = foro.Fone, Times.Once);
        _mockFForo.VerifySet(x => x.FFax = foro.Fax, Times.Once);
        _mockFForo.VerifySet(x => x.FCEP = It.IsAny<string>(), Times.Once); // CEP é limpo pelo ClearInputCep()
        _mockFForo.VerifySet(x => x.FOBS = foro.OBS, Times.Once);
        _mockFForo.VerifySet(x => x.FUnicoConfirmado = foro.UnicoConfirmado, Times.Once);
        _mockFForo.VerifySet(x => x.FWeb = foro.Web, Times.Once);
        _mockFForo.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var foro = CreateValidForoModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockForoFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _foroWriter.WriteAsync(foro, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var foro = CreateValidForoModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockForoFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFForo.Object);
        _mockFForo.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _foroWriter.WriteAsync(foro, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var foroResponse = new ForoResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockForoFactory.Setup(x => x.DeleteAsync(operadorId, foroResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _foroWriter.Delete(foroResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockForoFactory.Verify(x => x.DeleteAsync(operadorId, foroResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var foroResponse = new ForoResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockForoFactory.Setup(x => x.DeleteAsync(operadorId, foroResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _foroWriter.Delete(foroResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var foroResponse = new ForoResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockForoFactory.Setup(x => x.DeleteAsync(operadorId, foroResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _foroWriter.Delete(foroResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new ForoWriter(_mockForoFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new ForoWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.Foro CreateValidForoModel()
    {
        return new Models.Foro
        {
            Id = 0,
            EMail = "test@email.com",
            Nome = "João",
            Unico = false,
            Cidade = 1,
            Site = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Endereco = "Rua das Flores, 123",
            Bairro = "Centro",
            Fone = "(11) 99999-9999",
            Fax = "(11) 88888-9999",
            CEP = "01234-567",
            OBS = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            UnicoConfirmado = false,
            Web = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
    }
#endregion
}