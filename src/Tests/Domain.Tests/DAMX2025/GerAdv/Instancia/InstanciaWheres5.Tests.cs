// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class InstanciaWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFInstanciaFactory> _mockInstanciaFactory;
    private readonly Mock<FInstancia> _mockFInstancia;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly InstanciaWhere _instanciaWhere;
    public InstanciaWhereTests()
    {
        _mockInstanciaFactory = new Mock<IFInstanciaFactory>();
        _mockFInstancia = new Mock<FInstancia>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _instanciaWhere = new InstanciaWhere(_mockInstanciaFactory.Object);
    }

    public void Dispose()
    {
        _mockInstanciaFactory?.Reset();
        _mockFInstancia?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "AAAAAAAAAAAAAAAAAAAAAAA")
        };
    }

    private void SetupMockFInstancia(string? LiminarPedida = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string? Objeto = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", int? StatusResultado = 1, bool? LiminarPendente = false, bool? InterpusemosRecurso = true, bool? LiminarConcedida = false, bool? LiminarNegada = true, int? Processo = 1, string? Data = "27/05/2022", bool? LiminarParcial = false, string? LiminarResultado = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string? NroProcesso = "AAAAAAAAAAAAAAAAAAAAAAA", int? Divisao = 1, bool? LiminarCliente = true, int? Comarca = 1, int? SubDivisao = 1, bool? Principal = false, int? Acao = 1, int? Foro = 1, int? TipoRecurso = 1, string? ZKey = "AAAAAAAAAAAAAAAAAAAAAAA", int? ZKeyQuem = 1, string? ZKeyQuando = "24/04/1975", string? NroAntigo = "AAAAAAAAAAAAAAAAAAAAAAA", string? AccessCode = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", int? Julgador = 1, string? ZKeyIA = "AAAAAAAAAAAAAAAAAAAAAAA")
    {
        _mockFInstancia.Setup(f => f.FLiminarPedida).Returns(LiminarPedida ?? string.Empty);
        _mockFInstancia.Setup(f => f.FObjeto).Returns(Objeto ?? string.Empty);
        _mockFInstancia.Setup(f => f.FStatusResultado).Returns(StatusResultado ?? 0);
        _mockFInstancia.Setup(f => f.FLiminarPendente).Returns(LiminarPendente ?? false);
        _mockFInstancia.Setup(f => f.FInterpusemosRecurso).Returns(InterpusemosRecurso ?? false);
        _mockFInstancia.Setup(f => f.FLiminarConcedida).Returns(LiminarConcedida ?? false);
        _mockFInstancia.Setup(f => f.FLiminarNegada).Returns(LiminarNegada ?? false);
        _mockFInstancia.Setup(f => f.FProcesso).Returns(Processo ?? 0);
        _mockFInstancia.Setup(f => f.FData).Returns(Data ?? string.Empty);
        _mockFInstancia.Setup(f => f.FLiminarParcial).Returns(LiminarParcial ?? false);
        _mockFInstancia.Setup(f => f.FLiminarResultado).Returns(LiminarResultado ?? string.Empty);
        _mockFInstancia.Setup(f => f.FNroProcesso).Returns(NroProcesso ?? string.Empty);
        _mockFInstancia.Setup(f => f.FDivisao).Returns(Divisao ?? 0);
        _mockFInstancia.Setup(f => f.FLiminarCliente).Returns(LiminarCliente ?? false);
        _mockFInstancia.Setup(f => f.FComarca).Returns(Comarca ?? 0);
        _mockFInstancia.Setup(f => f.FSubDivisao).Returns(SubDivisao ?? 0);
        _mockFInstancia.Setup(f => f.FPrincipal).Returns(Principal ?? false);
        _mockFInstancia.Setup(f => f.FAcao).Returns(Acao ?? 0);
        _mockFInstancia.Setup(f => f.FForo).Returns(Foro ?? 0);
        _mockFInstancia.Setup(f => f.FTipoRecurso).Returns(TipoRecurso ?? 0);
        _mockFInstancia.Setup(f => f.FZKey).Returns(ZKey ?? string.Empty);
        _mockFInstancia.Setup(f => f.FZKeyQuem).Returns(ZKeyQuem ?? 0);
        _mockFInstancia.Setup(f => f.FZKeyQuando).Returns(ZKeyQuando ?? string.Empty);
        _mockFInstancia.Setup(f => f.FNroAntigo).Returns(NroAntigo ?? string.Empty);
        _mockFInstancia.Setup(f => f.FAccessCode).Returns(AccessCode ?? string.Empty);
        _mockFInstancia.Setup(f => f.FJulgador).Returns(Julgador ?? 0);
        _mockFInstancia.Setup(f => f.FZKeyIA).Returns(ZKeyIA ?? string.Empty);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFInstanciaFactory>();
        // Act
        var instanciaWhere = new InstanciaWhere(mockFactory.Object);
        // Assert
        instanciaWhere.Should().NotBeNull();
        instanciaWhere.Should().BeAssignableTo<IInstanciaWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFInstanciaFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new InstanciaWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnInstanciaResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFInstancia();
        _mockInstanciaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFInstancia.Object);
        // Act
        var result = _instanciaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.LiminarPedida.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.Objeto.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.StatusResultado.Should().Be(1);
        result.LiminarPendente.Should().Be(false);
        result.InterpusemosRecurso.Should().Be(true);
        result.LiminarConcedida.Should().Be(false);
        result.LiminarNegada.Should().Be(true);
        result.Processo.Should().Be(1);
        result.Data.Should().Be("27/05/2022");
        result.LiminarParcial.Should().Be(false);
        result.LiminarResultado.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.NroProcesso.Should().Be("AAAAAAAAAAAAAAAAAAAAAAA");
        result.Divisao.Should().Be(1);
        result.LiminarCliente.Should().Be(true);
        result.Comarca.Should().Be(1);
        result.SubDivisao.Should().Be(1);
        result.Principal.Should().Be(false);
        result.Acao.Should().Be(1);
        result.Foro.Should().Be(1);
        result.TipoRecurso.Should().Be(1);
        result.ZKey.Should().Be("AAAAAAAAAAAAAAAAAAAAAAA");
        result.ZKeyQuem.Should().Be(1);
        result.ZKeyQuando.Should().Be("24/04/1975");
        result.NroAntigo.Should().Be("AAAAAAAAAAAAAAAAAAAAAAA");
        result.AccessCode.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Julgador.Should().Be(1);
        result.ZKeyIA.Should().Be("AAAAAAAAAAAAAAAAAAAAAAA");
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFInstancia(LiminarPedida: null, Objeto: null, StatusResultado: null, LiminarPendente: null, InterpusemosRecurso: null, LiminarConcedida: null, LiminarNegada: null, Processo: null, Data: null, LiminarParcial: null, LiminarResultado: null, NroProcesso: null, Divisao: null, LiminarCliente: null, Comarca: null, SubDivisao: null, Principal: null, Acao: null, Foro: null, TipoRecurso: null, ZKey: null, ZKeyQuem: null, ZKeyQuando: null, NroAntigo: null, AccessCode: null, Julgador: null, ZKeyIA: null);
        _mockInstanciaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFInstancia.Object);
        // Act
        var result = _instanciaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.LiminarPedida.Should().Be(string.Empty);
        result.Objeto.Should().Be(string.Empty);
        result.StatusResultado.Should().Be(0);
        result.LiminarPendente.Should().Be(false);
        result.InterpusemosRecurso.Should().Be(false);
        result.LiminarConcedida.Should().Be(false);
        result.LiminarNegada.Should().Be(false);
        result.Processo.Should().Be(0);
        result.Data.Should().Be(string.Empty);
        result.LiminarParcial.Should().Be(false);
        result.LiminarResultado.Should().Be(string.Empty);
        result.NroProcesso.Should().Be(string.Empty);
        result.Divisao.Should().Be(0);
        result.LiminarCliente.Should().Be(false);
        result.Comarca.Should().Be(0);
        result.SubDivisao.Should().Be(0);
        result.Principal.Should().Be(false);
        result.Acao.Should().Be(0);
        result.Foro.Should().Be(0);
        result.TipoRecurso.Should().Be(0);
        result.ZKey.Should().Be(string.Empty);
        result.ZKeyQuem.Should().Be(0);
        result.ZKeyQuando.Should().Be(string.Empty);
        result.NroAntigo.Should().Be(string.Empty);
        result.AccessCode.Should().Be(string.Empty);
        result.Julgador.Should().Be(0);
        result.ZKeyIA.Should().Be(string.Empty);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFInstancia();
        _mockInstanciaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFInstancia.Object);
        // Act
        var result = _instanciaWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockInstanciaFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFInstancia();
        _mockInstanciaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFInstancia.Object);
        // Act
        var result = _instanciaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockInstanciaFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFInstancia();
        _mockInstanciaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFInstancia.Object);
        // Act
        var result = _instanciaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockInstanciaFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFInstancia();
        _mockInstanciaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFInstancia.Object);
        // Act
        _instanciaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockInstanciaFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFInstanciaInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFInstancia.Setup(f => f.Dispose());
        SetupMockFInstancia();
        _mockInstanciaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFInstancia.Object);
        // Act
        _instanciaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFInstancia.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockInstanciaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _instanciaWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFInstancia(LiminarPedida: "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", Objeto: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", StatusResultado: 1, LiminarPendente: false, InterpusemosRecurso: true, LiminarConcedida: false, LiminarNegada: true, Processo: 1, Data: "27/05/2022", LiminarParcial: false, LiminarResultado: "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", NroProcesso: "AAAAAAAAAAAAAAAAAAAAAAA", Divisao: 1, LiminarCliente: true, Comarca: 1, SubDivisao: 1, Principal: false, Acao: 1, Foro: 1, TipoRecurso: 1, ZKey: "AAAAAAAAAAAAAAAAAAAAAAA", ZKeyQuem: 1, ZKeyQuando: "24/04/1975", NroAntigo: "AAAAAAAAAAAAAAAAAAAAAAA", AccessCode: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", Julgador: 1, ZKeyIA: "AAAAAAAAAAAAAAAAAAAAAAA");
        _mockInstanciaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFInstancia.Object);
        // Act
        var result = _instanciaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.LiminarPedida.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.Objeto.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.StatusResultado.Should().Be(1);
        result.LiminarPendente.Should().Be(false);
        result.InterpusemosRecurso.Should().Be(true);
        result.LiminarConcedida.Should().Be(false);
        result.LiminarNegada.Should().Be(true);
        result.Processo.Should().Be(1);
        result.Data.Should().Be("27/05/2022");
        result.LiminarParcial.Should().Be(false);
        result.LiminarResultado.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.NroProcesso.Should().Be("AAAAAAAAAAAAAAAAAAAAAAA");
        result.Divisao.Should().Be(1);
        result.LiminarCliente.Should().Be(true);
        result.Comarca.Should().Be(1);
        result.SubDivisao.Should().Be(1);
        result.Principal.Should().Be(false);
        result.Acao.Should().Be(1);
        result.Foro.Should().Be(1);
        result.TipoRecurso.Should().Be(1);
        result.ZKey.Should().Be("AAAAAAAAAAAAAAAAAAAAAAA");
        result.ZKeyQuem.Should().Be(1);
        result.ZKeyQuando.Should().Be("24/04/1975");
        result.NroAntigo.Should().Be("AAAAAAAAAAAAAAAAAAAAAAA");
        result.AccessCode.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Julgador.Should().Be(1);
        result.ZKeyIA.Should().Be("AAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "NroProcesso = @{DBInstanciaDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBInstanciaDicInfo.CampoNome}", "AAAAAAAAAAAAAAAAAAAAAAA"),
        };
        SetupMockFInstancia();
        _mockInstanciaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFInstancia.Object);
        // Act
        _instanciaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockInstanciaFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBInstanciaDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#region DateTime Tests
    [Fact]
    public void Read_WithValidDateZKeyQuandoFields_ShouldParseAndSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var testDate = "31/12/2024";
        SetupMockFInstancia(ZKeyQuando: testDate);
        _mockInstanciaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFInstancia.Object);
        // Act
        var result = _instanciaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.ZKeyQuando.Should().Be("31/12/2024");
    }

    [Fact]
    public void Read_WithInvalidDateZKeyQuandoStrings_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFInstancia(ZKeyQuando: "invalid-date");
        _mockInstanciaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFInstancia.Object);
        // Act
        var result = _instanciaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.ZKeyQuando.Should().Be("");
    }

    [Fact]
    public void Read_WithNullDateZKeyQuandoFields_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFInstancia(ZKeyQuando: null);
        _mockInstanciaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFInstancia.Object);
        // Act
        var result = _instanciaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.ZKeyQuando.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("31/12/2024")]
    [InlineData("2025/01/01T23:59:59")]
    [InlineData("2000-02-29")] // Leap year
    [InlineData("2025/01/02T14:30:45.123")]
    public void Read_WithValidDateZKeyQuandoFormats_ShouldParseCorrectly(string dateString)
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedDate = DateTime.Parse(dateString);
        SetupMockFInstancia(ZKeyQuando: dateString);
        _mockInstanciaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFInstancia.Object);
        // Act
        var result = _instanciaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.ZKeyQuando.Should().Be(dateString);
    }
#endregion
#endregion
}