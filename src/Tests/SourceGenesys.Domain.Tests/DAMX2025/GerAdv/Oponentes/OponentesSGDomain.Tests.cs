// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBOponentes - Nome da classe (ex: DBClientes)
/// Oponentes - Nome da tabela (ex: Clientes)
/// opo - Prefixo dos campos (ex: cli)
/// opoCodigo - Nome do campo código (ex: cliCodigo)
/// opoNome - Nome do campo nome (ex: cliNome)
/// DBOponentes.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBOponentesTests : IDisposable
{
    private readonly DBOponentes _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBOponentesTests()
    {
        _instance = new DBOponentes();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("opoCodigo", typeof(int));
        dt.Columns.Add("opoQuemCad", typeof(int));
        dt.Columns.Add("opoDtCad", typeof(DateTime));
        dt.Columns.Add("opoQuemAtu", typeof(int));
        dt.Columns.Add("opoDtAtu", typeof(DateTime));
        dt.Columns.Add("opoVisto", typeof(bool));
        dt.Columns.Add("opoEMPFuncao", typeof(int));
        dt.Columns.Add("opoGUID", typeof(string));
        dt.Columns.Add("opoCTPSNumero", typeof(string));
        dt.Columns.Add("opoSite", typeof(string));
        dt.Columns.Add("opoCTPSSerie", typeof(string));
        dt.Columns.Add("opoNome", typeof(string));
        dt.Columns.Add("opoAdv", typeof(int));
        dt.Columns.Add("opoEMPCliente", typeof(int));
        dt.Columns.Add("opoIDRep", typeof(int));
        dt.Columns.Add("opoPIS", typeof(string));
        dt.Columns.Add("opoContato", typeof(string));
        dt.Columns.Add("opoCNPJ", typeof(string));
        dt.Columns.Add("opoRG", typeof(string));
        dt.Columns.Add("opoJuridica", typeof(string));
        dt.Columns.Add("opoTipo", typeof(string));
        dt.Columns.Add("opoSexo", typeof(string));
        dt.Columns.Add("opoCPF", typeof(string));
        dt.Columns.Add("opoEndereco", typeof(string));
        dt.Columns.Add("opoFone", typeof(string));
        dt.Columns.Add("opoFax", typeof(string));
        dt.Columns.Add("opoCidade", typeof(int));
        dt.Columns.Add("opoBairro", typeof(string));
        dt.Columns.Add("opoCEP", typeof(string));
        dt.Columns.Add("opoInscEst", typeof(string));
        dt.Columns.Add("opoObservacao", typeof(string));
        dt.Columns.Add("opoEMail", typeof(string));
        dt.Columns.Add("opoClass", typeof(string));
        dt.Columns.Add("opoTop", typeof(string));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("Oponentes", DBOponentes.PTabelaNome);
        Assert.Equal(" Oponentes.* ", DBOponentes.CamposSqlX);
        Assert.Equal("opoCodigo", DBOponentes.CampoCodigo);
        Assert.Equal("opoNome", DBOponentes.CampoNome);
        Assert.Equal("opo", DBOponentes.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBOponentes();
        Assert.Equal(0, instance.ID);
        Assert.Equal("Oponentes", instance.ITabelaName());
        Assert.Equal("opo", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBOponentes((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBOponentes((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["opoCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBOponentes(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("Oponentes", cadastro.ITabelaName());
        Assert.Equal("opoCodigo", cadastro.ICampoCodigo());
        Assert.Equal("opoNome", cadastro.ICampoNome());
        Assert.Equal("opo", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBOponentes.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBOponentes.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBOponentes.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBOponentes();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBOponentes();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnTrue()
    {
        Assert.True(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void EMPFuncao_ShouldAcceptIntegerValues(int value)
    {
        _instance.FEMPFuncao = value;
        Assert.Equal(value, _instance.FEMPFuncao);
    }

    [Fact]
    public void EMPFuncao_DefaultValue_ShouldBeZero()
    {
        var instance = new DBOponentes();
        Assert.Equal(0, instance.FEMPFuncao);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void GUID_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FGUID = input;
        Assert.Equal(expected, _instance.FGUID);
    }

    [Fact]
    public void GUID_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FGUID = longString;
        Assert.True(_instance.FGUID.Length <= 100);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void CTPSNumero_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FCTPSNumero = input;
        Assert.Equal(expected, _instance.FCTPSNumero);
    }

    [Fact]
    public void CTPSNumero_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 15 + 10);
        _instance.FCTPSNumero = longString;
        Assert.True(_instance.FCTPSNumero.Length <= 15);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Site_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FSite = input;
        Assert.Equal(expected, _instance.FSite);
    }

    [Fact]
    public void Site_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 150 + 10);
        _instance.FSite = longString;
        Assert.True(_instance.FSite.Length <= 150);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void CTPSSerie_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FCTPSSerie = input;
        Assert.Equal(expected, _instance.FCTPSSerie);
    }

    [Fact]
    public void CTPSSerie_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 10 + 10);
        _instance.FCTPSSerie = longString;
        Assert.True(_instance.FCTPSSerie.Length <= 10);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Nome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNome = input;
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void Nome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FNome = longString;
        Assert.True(_instance.FNome.Length <= 80);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Adv_ShouldAcceptIntegerValues(int value)
    {
        _instance.FAdv = value;
        Assert.Equal(value, _instance.FAdv);
    }

    [Fact]
    public void Adv_DefaultValue_ShouldBeZero()
    {
        var instance = new DBOponentes();
        Assert.Equal(0, instance.FAdv);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void EMPCliente_ShouldAcceptIntegerValues(int value)
    {
        _instance.FEMPCliente = value;
        Assert.Equal(value, _instance.FEMPCliente);
    }

    [Fact]
    public void EMPCliente_DefaultValue_ShouldBeZero()
    {
        var instance = new DBOponentes();
        Assert.Equal(0, instance.FEMPCliente);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void IDRep_ShouldAcceptIntegerValues(int value)
    {
        _instance.FIDRep = value;
        Assert.Equal(value, _instance.FIDRep);
    }

    [Fact]
    public void IDRep_DefaultValue_ShouldBeZero()
    {
        var instance = new DBOponentes();
        Assert.Equal(0, instance.FIDRep);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void PIS_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FPIS = input;
        Assert.Equal(expected, _instance.FPIS);
    }

    [Fact]
    public void PIS_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 20 + 10);
        _instance.FPIS = longString;
        Assert.True(_instance.FPIS.Length <= 20);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Contato_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FContato = input;
        Assert.Equal(expected, _instance.FContato);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void RG_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FRG = input;
        Assert.Equal(expected, _instance.FRG);
    }

    [Fact]
    public void RG_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 12 + 10);
        _instance.FRG = longString;
        Assert.True(_instance.FRG.Length <= 12);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Juridica_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FJuridica = value;
        Assert.Equal(value, _instance.FJuridica);
    }

    [Fact]
    public void Juridica_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBOponentes();
        Assert.False(instance.FJuridica);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Tipo_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FTipo = value;
        Assert.Equal(value, _instance.FTipo);
    }

    [Fact]
    public void Tipo_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBOponentes();
        Assert.False(instance.FTipo);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Sexo_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FSexo = value;
        Assert.Equal(value, _instance.FSexo);
    }

    [Fact]
    public void Sexo_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBOponentes();
        Assert.False(instance.FSexo);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Endereco_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FEndereco = input;
        Assert.Equal(expected, _instance.FEndereco);
    }

    [Fact]
    public void Endereco_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FEndereco = longString;
        Assert.True(_instance.FEndereco.Length <= 80);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Fone_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FFone = input;
        Assert.Equal(expected, _instance.FFone);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Fax_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FFax = input;
        Assert.Equal(expected, _instance.FFax);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cidade_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCidade = value;
        Assert.Equal(value, _instance.FCidade);
    }

    [Fact]
    public void Cidade_DefaultValue_ShouldBeZero()
    {
        var instance = new DBOponentes();
        Assert.Equal(0, instance.FCidade);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Bairro_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FBairro = input;
        Assert.Equal(expected, _instance.FBairro);
    }

    [Fact]
    public void Bairro_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FBairro = longString;
        Assert.True(_instance.FBairro.Length <= 50);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void InscEst_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FInscEst = input;
        Assert.Equal(expected, _instance.FInscEst);
    }

    [Fact]
    public void InscEst_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 15 + 10);
        _instance.FInscEst = longString;
        Assert.True(_instance.FInscEst.Length <= 15);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Observacao_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FObservacao = input;
        Assert.Equal(expected, _instance.FObservacao);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData(" A", "A")]
    public void Class_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FClass = input;
        Assert.Equal(expected, _instance.FClass);
    }

    [Fact]
    public void Class_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 1 + 10);
        _instance.FClass = longString;
        Assert.True(_instance.FClass.Length <= 1);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Top_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FTop = value;
        Assert.Equal(value, _instance.FTop);
    }

    [Fact]
    public void Top_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBOponentes();
        Assert.False(instance.FTop);
    }

    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}