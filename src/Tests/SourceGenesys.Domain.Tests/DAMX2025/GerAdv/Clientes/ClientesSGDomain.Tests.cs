// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBClientes - Nome da classe (ex: DBClientes)
/// Clientes - Nome da tabela (ex: Clientes)
/// cli - Prefixo dos campos (ex: cli)
/// cliCodigo - Nome do campo código (ex: cliCodigo)
/// cliNome - Nome do campo nome (ex: cliNome)
/// DBClientes.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBClientesTests : IDisposable
{
    private readonly DBClientes _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBClientesTests()
    {
        _instance = new DBClientes();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("cliCodigo", typeof(int));
        dt.Columns.Add("cliQuemCad", typeof(int));
        dt.Columns.Add("cliDtCad", typeof(DateTime));
        dt.Columns.Add("cliQuemAtu", typeof(int));
        dt.Columns.Add("cliDtAtu", typeof(DateTime));
        dt.Columns.Add("cliVisto", typeof(bool));
        dt.Columns.Add("cliEmpresa", typeof(int));
        dt.Columns.Add("cliIcone", typeof(string));
        dt.Columns.Add("cliNomeMae", typeof(string));
        dt.Columns.Add("cliRGDataExp", typeof(DateTime));
        dt.Columns.Add("cliGUID", typeof(string));
        dt.Columns.Add("cliInativo", typeof(string));
        dt.Columns.Add("cliQuemIndicou", typeof(string));
        dt.Columns.Add("cliSendEMail", typeof(string));
        dt.Columns.Add("cliNome", typeof(string));
        dt.Columns.Add("cliAdv", typeof(int));
        dt.Columns.Add("cliIDRep", typeof(int));
        dt.Columns.Add("cliJuridica", typeof(string));
        dt.Columns.Add("cliNomeFantasia", typeof(string));
        dt.Columns.Add("cliClass", typeof(string));
        dt.Columns.Add("cliTipo", typeof(string));
        dt.Columns.Add("cliDtNasc", typeof(DateTime));
        dt.Columns.Add("cliInscEst", typeof(string));
        dt.Columns.Add("cliQualificacao", typeof(string));
        dt.Columns.Add("cliSexo", typeof(string));
        dt.Columns.Add("cliIdade", typeof(int));
        dt.Columns.Add("cliCNPJ", typeof(string));
        dt.Columns.Add("cliCPF", typeof(string));
        dt.Columns.Add("cliRG", typeof(string));
        dt.Columns.Add("cliTipoCaptacao", typeof(string));
        dt.Columns.Add("cliObservacao", typeof(string));
        dt.Columns.Add("cliEndereco", typeof(string));
        dt.Columns.Add("cliBairro", typeof(string));
        dt.Columns.Add("cliCidade", typeof(int));
        dt.Columns.Add("cliCEP", typeof(string));
        dt.Columns.Add("cliFax", typeof(string));
        dt.Columns.Add("cliFone", typeof(string));
        dt.Columns.Add("cliData", typeof(string));
        dt.Columns.Add("cliHomePage", typeof(string));
        dt.Columns.Add("cliEMail", typeof(string));
        dt.Columns.Add("cliObito", typeof(string));
        dt.Columns.Add("cliNomePai", typeof(string));
        dt.Columns.Add("cliRGOExpeditor", typeof(string));
        dt.Columns.Add("cliRegimeTributacao", typeof(int));
        dt.Columns.Add("cliEnquadramentoEmpresa", typeof(int));
        dt.Columns.Add("cliReportECBOnly", typeof(string));
        dt.Columns.Add("cliProBono", typeof(string));
        dt.Columns.Add("cliCNH", typeof(string));
        dt.Columns.Add("cliPessoaContato", typeof(string));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("Clientes", DBClientes.PTabelaNome);
        Assert.Equal(" Clientes.* ", DBClientes.CamposSqlX);
        Assert.Equal("cliCodigo", DBClientes.CampoCodigo);
        Assert.Equal("cliNome", DBClientes.CampoNome);
        Assert.Equal("cli", DBClientes.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBClientes();
        Assert.Equal(0, instance.ID);
        Assert.Equal("Clientes", instance.ITabelaName());
        Assert.Equal("cli", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBClientes((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBClientes((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["cliCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBClientes(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("Clientes", cadastro.ITabelaName());
        Assert.Equal("cliCodigo", cadastro.ICampoCodigo());
        Assert.Equal("cliNome", cadastro.ICampoNome());
        Assert.Equal("cli", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBClientes.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBClientes.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBClientes.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBClientes();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBClientes();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnTrue()
    {
        Assert.True(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Empresa_ShouldAcceptIntegerValues(int value)
    {
        _instance.FEmpresa = value;
        Assert.Equal(value, _instance.FEmpresa);
    }

    [Fact]
    public void Empresa_DefaultValue_ShouldBeZero()
    {
        var instance = new DBClientes();
        Assert.Equal(0, instance.FEmpresa);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Icone_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FIcone = input;
        Assert.Equal(expected, _instance.FIcone);
    }

    [Fact]
    public void Icone_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 255 + 10);
        _instance.FIcone = longString;
        Assert.True(_instance.FIcone.Length <= 255);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void NomeMae_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNomeMae = input;
        Assert.Equal(expected, _instance.FNomeMae);
    }

    [Fact]
    public void NomeMae_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FNomeMae = longString;
        Assert.True(_instance.FNomeMae.Length <= 80);
    }

    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void RGDataExp_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FRGDataExp = dateString;
        Assert.Equal(dateString, _instance.FRGDataExp);
    }

    [Fact]
    public void RGDataExp_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBClientes();
        Assert.Equal(string.Empty, instance.FRGDataExp);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void GUID_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FGUID = input;
        Assert.Equal(expected, _instance.FGUID);
    }

    [Fact]
    public void GUID_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 150 + 10);
        _instance.FGUID = longString;
        Assert.True(_instance.FGUID.Length <= 150);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Inativo_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FInativo = value;
        Assert.Equal(value, _instance.FInativo);
    }

    [Fact]
    public void Inativo_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBClientes();
        Assert.False(instance.FInativo);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Inativo_ShouldAcceptIntegerValues(int value)
{
    _instance.FInativo = value;
    Assert.Equal(value, _instance.FInativo);
}

[Fact]
public void Inativo_DefaultValue_ShouldBeZero()
{
    var instance = new DBClientes();
    Assert.Equal(0, instance.Inativo);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Inativo_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FInativo = dateString;
    Assert.Equal(dateString, _instance.FInativo);
}

[Fact]
public void Inativo_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBClientes();
    Assert.Equal(string.Empty, instance.Inativo);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Inativo_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FInativo = input;
        Assert.Equal(expected, _instance.FInativo);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FInativo = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Inativo_ValidEmail_ShouldAccept(string email)
{
    _instance.FInativo = email;
    Assert.Equal(email, _instance.FInativo);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Inativo_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FInativo = email);
}
*/
    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void QuemIndicou_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FQuemIndicou = input;
        Assert.Equal(expected, _instance.FQuemIndicou);
    }

    [Fact]
    public void QuemIndicou_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FQuemIndicou = longString;
        Assert.True(_instance.FQuemIndicou.Length <= 80);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void SendEMail_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FSendEMail = value;
        Assert.Equal(value, _instance.FSendEMail);
    }

    [Fact]
    public void SendEMail_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBClientes();
        Assert.False(instance.FSendEMail);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void SendEMail_ShouldAcceptIntegerValues(int value)
{
    _instance.FSendEMail = value;
    Assert.Equal(value, _instance.FSendEMail);
}

[Fact]
public void SendEMail_DefaultValue_ShouldBeZero()
{
    var instance = new DBClientes();
    Assert.Equal(0, instance.SendEMail);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void SendEMail_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FSendEMail = dateString;
    Assert.Equal(dateString, _instance.FSendEMail);
}

[Fact]
public void SendEMail_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBClientes();
    Assert.Equal(string.Empty, instance.SendEMail);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void SendEMail_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FSendEMail = input;
        Assert.Equal(expected, _instance.FSendEMail);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FSendEMail = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void SendEMail_ValidEmail_ShouldAccept(string email)
{
    _instance.FSendEMail = email;
    Assert.Equal(email, _instance.FSendEMail);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void SendEMail_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FSendEMail = email);
}
*/
    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Nome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNome = input;
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void Nome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FNome = longString;
        Assert.True(_instance.FNome.Length <= 80);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Adv_ShouldAcceptIntegerValues(int value)
    {
        _instance.FAdv = value;
        Assert.Equal(value, _instance.FAdv);
    }

    [Fact]
    public void Adv_DefaultValue_ShouldBeZero()
    {
        var instance = new DBClientes();
        Assert.Equal(0, instance.FAdv);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void IDRep_ShouldAcceptIntegerValues(int value)
    {
        _instance.FIDRep = value;
        Assert.Equal(value, _instance.FIDRep);
    }

    [Fact]
    public void IDRep_DefaultValue_ShouldBeZero()
    {
        var instance = new DBClientes();
        Assert.Equal(0, instance.FIDRep);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Juridica_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FJuridica = value;
        Assert.Equal(value, _instance.FJuridica);
    }

    [Fact]
    public void Juridica_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBClientes();
        Assert.False(instance.FJuridica);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Juridica_ShouldAcceptIntegerValues(int value)
{
    _instance.FJuridica = value;
    Assert.Equal(value, _instance.FJuridica);
}

[Fact]
public void Juridica_DefaultValue_ShouldBeZero()
{
    var instance = new DBClientes();
    Assert.Equal(0, instance.Juridica);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Juridica_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FJuridica = dateString;
    Assert.Equal(dateString, _instance.FJuridica);
}

[Fact]
public void Juridica_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBClientes();
    Assert.Equal(string.Empty, instance.Juridica);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Juridica_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FJuridica = input;
        Assert.Equal(expected, _instance.FJuridica);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FJuridica = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Juridica_ValidEmail_ShouldAccept(string email)
{
    _instance.FJuridica = email;
    Assert.Equal(email, _instance.FJuridica);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Juridica_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FJuridica = email);
}
*/
    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void NomeFantasia_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNomeFantasia = input;
        Assert.Equal(expected, _instance.FNomeFantasia);
    }

    [Fact]
    public void NomeFantasia_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FNomeFantasia = longString;
        Assert.True(_instance.FNomeFantasia.Length <= 80);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData(" A", "A")]
    public void Class_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FClass = input;
        Assert.Equal(expected, _instance.FClass);
    }

    [Fact]
    public void Class_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 1 + 10);
        _instance.FClass = longString;
        Assert.True(_instance.FClass.Length <= 1);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Tipo_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FTipo = value;
        Assert.Equal(value, _instance.FTipo);
    }

    [Fact]
    public void Tipo_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBClientes();
        Assert.False(instance.FTipo);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Tipo_ShouldAcceptIntegerValues(int value)
{
    _instance.FTipo = value;
    Assert.Equal(value, _instance.FTipo);
}

[Fact]
public void Tipo_DefaultValue_ShouldBeZero()
{
    var instance = new DBClientes();
    Assert.Equal(0, instance.Tipo);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Tipo_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FTipo = dateString;
    Assert.Equal(dateString, _instance.FTipo);
}

[Fact]
public void Tipo_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBClientes();
    Assert.Equal(string.Empty, instance.Tipo);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Tipo_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FTipo = input;
        Assert.Equal(expected, _instance.FTipo);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FTipo = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Tipo_ValidEmail_ShouldAccept(string email)
{
    _instance.FTipo = email;
    Assert.Equal(email, _instance.FTipo);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Tipo_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FTipo = email);
}
*/
    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void DtNasc_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FDtNasc = dateString;
        Assert.Equal(dateString, _instance.FDtNasc);
    }

    [Fact]
    public void DtNasc_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBClientes();
        Assert.Equal(string.Empty, instance.FDtNasc);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void InscEst_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FInscEst = input;
        Assert.Equal(expected, _instance.FInscEst);
    }

    [Fact]
    public void InscEst_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 15 + 10);
        _instance.FInscEst = longString;
        Assert.True(_instance.FInscEst.Length <= 15);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Qualificacao_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FQualificacao = input;
        Assert.Equal(expected, _instance.FQualificacao);
    }

    [Fact]
    public void Qualificacao_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FQualificacao = longString;
        Assert.True(_instance.FQualificacao.Length <= 100);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Sexo_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FSexo = value;
        Assert.Equal(value, _instance.FSexo);
    }

    [Fact]
    public void Sexo_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBClientes();
        Assert.False(instance.FSexo);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Sexo_ShouldAcceptIntegerValues(int value)
{
    _instance.FSexo = value;
    Assert.Equal(value, _instance.FSexo);
}

[Fact]
public void Sexo_DefaultValue_ShouldBeZero()
{
    var instance = new DBClientes();
    Assert.Equal(0, instance.Sexo);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Sexo_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FSexo = dateString;
    Assert.Equal(dateString, _instance.FSexo);
}

[Fact]
public void Sexo_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBClientes();
    Assert.Equal(string.Empty, instance.Sexo);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Sexo_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FSexo = input;
        Assert.Equal(expected, _instance.FSexo);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FSexo = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Sexo_ValidEmail_ShouldAccept(string email)
{
    _instance.FSexo = email;
    Assert.Equal(email, _instance.FSexo);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Sexo_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FSexo = email);
}
*/
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Idade_ShouldAcceptIntegerValues(int value)
    {
        _instance.FIdade = value;
        Assert.Equal(value, _instance.FIdade);
    }

    [Fact]
    public void Idade_DefaultValue_ShouldBeZero()
    {
        var instance = new DBClientes();
        Assert.Equal(0, instance.FIdade);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void RG_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FRG = input;
        Assert.Equal(expected, _instance.FRG);
    }

    [Fact]
    public void RG_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FRG = longString;
        Assert.True(_instance.FRG.Length <= 50);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void TipoCaptacao_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FTipoCaptacao = value;
        Assert.Equal(value, _instance.FTipoCaptacao);
    }

    [Fact]
    public void TipoCaptacao_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBClientes();
        Assert.False(instance.FTipoCaptacao);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void TipoCaptacao_ShouldAcceptIntegerValues(int value)
{
    _instance.FTipoCaptacao = value;
    Assert.Equal(value, _instance.FTipoCaptacao);
}

[Fact]
public void TipoCaptacao_DefaultValue_ShouldBeZero()
{
    var instance = new DBClientes();
    Assert.Equal(0, instance.TipoCaptacao);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void TipoCaptacao_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FTipoCaptacao = dateString;
    Assert.Equal(dateString, _instance.FTipoCaptacao);
}

[Fact]
public void TipoCaptacao_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBClientes();
    Assert.Equal(string.Empty, instance.TipoCaptacao);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void TipoCaptacao_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FTipoCaptacao = input;
        Assert.Equal(expected, _instance.FTipoCaptacao);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FTipoCaptacao = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void TipoCaptacao_ValidEmail_ShouldAccept(string email)
{
    _instance.FTipoCaptacao = email;
    Assert.Equal(email, _instance.FTipoCaptacao);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void TipoCaptacao_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FTipoCaptacao = email);
}
*/
    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Observacao_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FObservacao = input;
        Assert.Equal(expected, _instance.FObservacao);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Endereco_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FEndereco = input;
        Assert.Equal(expected, _instance.FEndereco);
    }

    [Fact]
    public void Endereco_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FEndereco = longString;
        Assert.True(_instance.FEndereco.Length <= 80);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Bairro_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FBairro = input;
        Assert.Equal(expected, _instance.FBairro);
    }

    [Fact]
    public void Bairro_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FBairro = longString;
        Assert.True(_instance.FBairro.Length <= 50);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cidade_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCidade = value;
        Assert.Equal(value, _instance.FCidade);
    }

    [Fact]
    public void Cidade_DefaultValue_ShouldBeZero()
    {
        var instance = new DBClientes();
        Assert.Equal(0, instance.FCidade);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Fax_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FFax = input;
        Assert.Equal(expected, _instance.FFax);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Fone_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FFone = input;
        Assert.Equal(expected, _instance.FFone);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void HomePage_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FHomePage = input;
        Assert.Equal(expected, _instance.FHomePage);
    }

    [Fact]
    public void HomePage_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 60 + 10);
        _instance.FHomePage = longString;
        Assert.True(_instance.FHomePage.Length <= 60);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Obito_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FObito = value;
        Assert.Equal(value, _instance.FObito);
    }

    [Fact]
    public void Obito_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBClientes();
        Assert.False(instance.FObito);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Obito_ShouldAcceptIntegerValues(int value)
{
    _instance.FObito = value;
    Assert.Equal(value, _instance.FObito);
}

[Fact]
public void Obito_DefaultValue_ShouldBeZero()
{
    var instance = new DBClientes();
    Assert.Equal(0, instance.Obito);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Obito_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FObito = dateString;
    Assert.Equal(dateString, _instance.FObito);
}

[Fact]
public void Obito_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBClientes();
    Assert.Equal(string.Empty, instance.Obito);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Obito_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FObito = input;
        Assert.Equal(expected, _instance.FObito);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FObito = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Obito_ValidEmail_ShouldAccept(string email)
{
    _instance.FObito = email;
    Assert.Equal(email, _instance.FObito);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Obito_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FObito = email);
}
*/
    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void NomePai_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNomePai = input;
        Assert.Equal(expected, _instance.FNomePai);
    }

    [Fact]
    public void NomePai_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FNomePai = longString;
        Assert.True(_instance.FNomePai.Length <= 80);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void RGOExpeditor_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FRGOExpeditor = input;
        Assert.Equal(expected, _instance.FRGOExpeditor);
    }

    [Fact]
    public void RGOExpeditor_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 30 + 10);
        _instance.FRGOExpeditor = longString;
        Assert.True(_instance.FRGOExpeditor.Length <= 30);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void RegimeTributacao_ShouldAcceptIntegerValues(int value)
    {
        _instance.FRegimeTributacao = value;
        Assert.Equal(value, _instance.FRegimeTributacao);
    }

    [Fact]
    public void RegimeTributacao_DefaultValue_ShouldBeZero()
    {
        var instance = new DBClientes();
        Assert.Equal(0, instance.FRegimeTributacao);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void EnquadramentoEmpresa_ShouldAcceptIntegerValues(int value)
    {
        _instance.FEnquadramentoEmpresa = value;
        Assert.Equal(value, _instance.FEnquadramentoEmpresa);
    }

    [Fact]
    public void EnquadramentoEmpresa_DefaultValue_ShouldBeZero()
    {
        var instance = new DBClientes();
        Assert.Equal(0, instance.FEnquadramentoEmpresa);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void ReportECBOnly_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FReportECBOnly = value;
        Assert.Equal(value, _instance.FReportECBOnly);
    }

    [Fact]
    public void ReportECBOnly_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBClientes();
        Assert.False(instance.FReportECBOnly);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void ReportECBOnly_ShouldAcceptIntegerValues(int value)
{
    _instance.FReportECBOnly = value;
    Assert.Equal(value, _instance.FReportECBOnly);
}

[Fact]
public void ReportECBOnly_DefaultValue_ShouldBeZero()
{
    var instance = new DBClientes();
    Assert.Equal(0, instance.ReportECBOnly);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void ReportECBOnly_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FReportECBOnly = dateString;
    Assert.Equal(dateString, _instance.FReportECBOnly);
}

[Fact]
public void ReportECBOnly_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBClientes();
    Assert.Equal(string.Empty, instance.ReportECBOnly);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void ReportECBOnly_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FReportECBOnly = input;
        Assert.Equal(expected, _instance.FReportECBOnly);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FReportECBOnly = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void ReportECBOnly_ValidEmail_ShouldAccept(string email)
{
    _instance.FReportECBOnly = email;
    Assert.Equal(email, _instance.FReportECBOnly);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void ReportECBOnly_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FReportECBOnly = email);
}
*/
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void ProBono_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FProBono = value;
        Assert.Equal(value, _instance.FProBono);
    }

    [Fact]
    public void ProBono_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBClientes();
        Assert.False(instance.FProBono);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void ProBono_ShouldAcceptIntegerValues(int value)
{
    _instance.FProBono = value;
    Assert.Equal(value, _instance.FProBono);
}

[Fact]
public void ProBono_DefaultValue_ShouldBeZero()
{
    var instance = new DBClientes();
    Assert.Equal(0, instance.ProBono);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void ProBono_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FProBono = dateString;
    Assert.Equal(dateString, _instance.FProBono);
}

[Fact]
public void ProBono_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBClientes();
    Assert.Equal(string.Empty, instance.ProBono);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void ProBono_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FProBono = input;
        Assert.Equal(expected, _instance.FProBono);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FProBono = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void ProBono_ValidEmail_ShouldAccept(string email)
{
    _instance.FProBono = email;
    Assert.Equal(email, _instance.FProBono);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void ProBono_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FProBono = email);
}
*/
    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void CNH_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FCNH = input;
        Assert.Equal(expected, _instance.FCNH);
    }

    [Fact]
    public void CNH_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FCNH = longString;
        Assert.True(_instance.FCNH.Length <= 100);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void PessoaContato_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FPessoaContato = input;
        Assert.Equal(expected, _instance.FPessoaContato);
    }

    [Fact]
    public void PessoaContato_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 120 + 10);
        _instance.FPessoaContato = longString;
        Assert.True(_instance.FPessoaContato.Length <= 120);
    }

    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}