// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IClientesValidation
{
    Task<bool> ValidateReg(Models.Clientes reg, IClientesService service, ICidadeReader cidadeReader, IRegimeTributacaoReader regimetributacaoReader, IEnquadramentoEmpresaReader enquadramentoempresaReader, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
    Task<bool> CanDelete(int? id, IClientesService service, IAgendaService agendaService, IClientesSociosService clientessociosService, IColaboradoresService colaboradoresService, IContaCorrenteService contacorrenteService, IContratosService contratosService, IDiario2Service diario2Service, IGruposEmpresasService gruposempresasService, IHonorariosDadosContratoService honorariosdadoscontratoService, IHorasTrabService horastrabService, ILigacoesService ligacoesService, IOperadoresService operadoresService, IPreClientesService preclientesService, IProDespesasService prodespesasService, IReuniaoService reuniaoService, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
}

public class ClientesValidation : IClientesValidation
{
    public async Task<bool> CanDelete(int? id, IClientesService service, IAgendaService agendaService, IClientesSociosService clientessociosService, IColaboradoresService colaboradoresService, IContaCorrenteService contacorrenteService, IContratosService contratosService, IDiario2Service diario2Service, IGruposEmpresasService gruposempresasService, IHonorariosDadosContratoService honorariosdadoscontratoService, IHorasTrabService horastrabService, ILigacoesService ligacoesService, IOperadoresService operadoresService, IPreClientesService preclientesService, IProDespesasService prodespesasService, IReuniaoService reuniaoService, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (id == null || id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id ?? default, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        var agendaExists0 = await agendaService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterAgenda { Cliente = id ?? default }, uri);
        if (agendaExists0 != null && agendaExists0.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Compromisso associados a ele.");
        var clientessociosExists1 = await clientessociosService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterClientesSocios { Cliente = id ?? default }, uri);
        if (clientessociosExists1 != null && clientessociosExists1.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Clientes Socios associados a ele.");
        var colaboradoresExists2 = await colaboradoresService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterColaboradores { Cliente = id ?? default }, uri);
        if (colaboradoresExists2 != null && colaboradoresExists2.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Colaboradores associados a ele.");
        var contacorrenteExists3 = await contacorrenteService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterContaCorrente { Cliente = id ?? default }, uri);
        if (contacorrenteExists3 != null && contacorrenteExists3.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Conta Corrente associados a ele.");
        var contratosExists4 = await contratosService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterContratos { Cliente = id ?? default }, uri);
        if (contratosExists4 != null && contratosExists4.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Contratos associados a ele.");
        var diario2Exists5 = await diario2Service.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterDiario2 { Cliente = id ?? default }, uri);
        if (diario2Exists5 != null && diario2Exists5.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Diario2 associados a ele.");
        var gruposempresasExists6 = await gruposempresasService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterGruposEmpresas { Cliente = id ?? default }, uri);
        if (gruposempresasExists6 != null && gruposempresasExists6.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Grupos Empresas associados a ele.");
        var honorariosdadoscontratoExists7 = await honorariosdadoscontratoService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterHonorariosDadosContrato { Cliente = id ?? default }, uri);
        if (honorariosdadoscontratoExists7 != null && honorariosdadoscontratoExists7.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Honorarios Dados Contrato associados a ele.");
        var horastrabExists8 = await horastrabService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterHorasTrab { Cliente = id ?? default }, uri);
        if (horastrabExists8 != null && horastrabExists8.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Horas Trab associados a ele.");
        var ligacoesExists9 = await ligacoesService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterLigacoes { Cliente = id ?? default }, uri);
        if (ligacoesExists9 != null && ligacoesExists9.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Ligacoes associados a ele.");
        var operadoresExists10 = await operadoresService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterOperadores { Cliente = id ?? default }, uri);
        if (operadoresExists10 != null && operadoresExists10.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Operadores associados a ele.");
        var preclientesExists11 = await preclientesService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterPreClientes { IDRep = id ?? default }, uri);
        if (preclientesExists11 != null && preclientesExists11.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Pre Clientes associados a ele.");
        var prodespesasExists12 = await prodespesasService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterProDespesas { Cliente = id ?? default }, uri);
        if (prodespesasExists12 != null && prodespesasExists12.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Pro Despesas associados a ele.");
        var reuniaoExists13 = await reuniaoService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterReuniao { Cliente = id ?? default }, uri);
        if (reuniaoExists13 != null && reuniaoExists13.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Reunião associados a ele.");
        return true;
    }

    private bool ValidSizes(Models.Clientes reg)
    {
        if (reg.Icone != null && reg.Icone.Length > DBClientesDicInfo.CliIcone.FTamanho)
            throw new SGValidationException($"Icone deve ter no máximo {DBClientesDicInfo.CliIcone.FTamanho} caracteres.");
        if (reg.NomeMae != null && reg.NomeMae.Length > DBClientesDicInfo.CliNomeMae.FTamanho)
            throw new SGValidationException($"NomeMae deve ter no máximo {DBClientesDicInfo.CliNomeMae.FTamanho} caracteres.");
        if (reg.QuemIndicou != null && reg.QuemIndicou.Length > DBClientesDicInfo.CliQuemIndicou.FTamanho)
            throw new SGValidationException($"QuemIndicou deve ter no máximo {DBClientesDicInfo.CliQuemIndicou.FTamanho} caracteres.");
        if (reg.Nome != null && reg.Nome.Length > DBClientesDicInfo.CliNome.FTamanho)
            throw new SGValidationException($"Nome deve ter no máximo {DBClientesDicInfo.CliNome.FTamanho} caracteres.");
        if (reg.NomeFantasia != null && reg.NomeFantasia.Length > DBClientesDicInfo.CliNomeFantasia.FTamanho)
            throw new SGValidationException($"NomeFantasia deve ter no máximo {DBClientesDicInfo.CliNomeFantasia.FTamanho} caracteres.");
        if (reg.Class != null && reg.Class.Length > DBClientesDicInfo.CliClass.FTamanho)
            throw new SGValidationException($"Class deve ter no máximo {DBClientesDicInfo.CliClass.FTamanho} caracteres.");
        if (reg.InscEst != null && reg.InscEst.Length > DBClientesDicInfo.CliInscEst.FTamanho)
            throw new SGValidationException($"InscEst deve ter no máximo {DBClientesDicInfo.CliInscEst.FTamanho} caracteres.");
        if (reg.Qualificacao != null && reg.Qualificacao.Length > DBClientesDicInfo.CliQualificacao.FTamanho)
            throw new SGValidationException($"Qualificacao deve ter no máximo {DBClientesDicInfo.CliQualificacao.FTamanho} caracteres.");
        if (reg.CNPJ != null && reg.CNPJ.ClearInputCepCpfCnpj().Length > DBClientesDicInfo.CliCNPJ.FTamanho)
            throw new SGValidationException($"CNPJ deve ter no máximo {DBClientesDicInfo.CliCNPJ.FTamanho} caracteres.");
        if (reg.CPF != null && reg.CPF.ClearInputCepCpfCnpj().Length > DBClientesDicInfo.CliCPF.FTamanho)
            throw new SGValidationException($"CPF deve ter no máximo {DBClientesDicInfo.CliCPF.FTamanho} caracteres.");
        if (reg.RG != null && reg.RG.Length > DBClientesDicInfo.CliRG.FTamanho)
            throw new SGValidationException($"RG deve ter no máximo {DBClientesDicInfo.CliRG.FTamanho} caracteres.");
        if (reg.Endereco != null && reg.Endereco.Length > DBClientesDicInfo.CliEndereco.FTamanho)
            throw new SGValidationException($"Endereco deve ter no máximo {DBClientesDicInfo.CliEndereco.FTamanho} caracteres.");
        if (reg.Bairro != null && reg.Bairro.Length > DBClientesDicInfo.CliBairro.FTamanho)
            throw new SGValidationException($"Bairro deve ter no máximo {DBClientesDicInfo.CliBairro.FTamanho} caracteres.");
        if (reg.CEP != null && reg.CEP.ClearInputCepCpfCnpj().Length > DBClientesDicInfo.CliCEP.FTamanho)
            throw new SGValidationException($"CEP deve ter no máximo {DBClientesDicInfo.CliCEP.FTamanho} caracteres.");
        if (reg.HomePage != null && reg.HomePage.Length > DBClientesDicInfo.CliHomePage.FTamanho)
            throw new SGValidationException($"HomePage deve ter no máximo {DBClientesDicInfo.CliHomePage.FTamanho} caracteres.");
        if (reg.NomePai != null && reg.NomePai.Length > DBClientesDicInfo.CliNomePai.FTamanho)
            throw new SGValidationException($"NomePai deve ter no máximo {DBClientesDicInfo.CliNomePai.FTamanho} caracteres.");
        if (reg.RGOExpeditor != null && reg.RGOExpeditor.Length > DBClientesDicInfo.CliRGOExpeditor.FTamanho)
            throw new SGValidationException($"RGOExpeditor deve ter no máximo {DBClientesDicInfo.CliRGOExpeditor.FTamanho} caracteres.");
        if (reg.CNH != null && reg.CNH.Length > DBClientesDicInfo.CliCNH.FTamanho)
            throw new SGValidationException($"CNH deve ter no máximo {DBClientesDicInfo.CliCNH.FTamanho} caracteres.");
        if (reg.PessoaContato != null && reg.PessoaContato.Length > DBClientesDicInfo.CliPessoaContato.FTamanho)
            throw new SGValidationException($"PessoaContato deve ter no máximo {DBClientesDicInfo.CliPessoaContato.FTamanho} caracteres.");
        if (reg.GUID != null && reg.GUID.Length > DBClientesDicInfo.CliGUID.FTamanho)
            throw new SGValidationException($"GUID deve ter no máximo {DBClientesDicInfo.CliGUID.FTamanho} caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.Clientes reg, IClientesService service, ICidadeReader cidadeReader, IRegimeTributacaoReader regimetributacaoReader, IEnquadramentoEmpresaReader enquadramentoempresaReader, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Nome))
            throw new SGValidationException("Nome é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.EMail != null && reg.EMail.Length > 0 && !reg.EMail.IsValidEmail())
            throw new SGValidationException($"EMail em formato inválido.");
        if (!string.IsNullOrWhiteSpace(reg.DtNasc))
        {
            if (DateTime.TryParse(reg.DtNasc, out DateTime dataAniversario))
            {
                if (dataAniversario < new DateTime(1900, 1, 1))
                    throw new SGValidationException("Data Nascimento não pode ser anterior a 01/01/1900.");
                if (dataAniversario > DateTime.Now)
                    throw new SGValidationException("DtNasc não pode ser uma data futura.");
            }
        }

        if (!string.IsNullOrWhiteSpace(reg.RGDataExp))
        {
            if (DateTime.TryParse(reg.RGDataExp, out DateTime dataAntiga))
            {
                if (dataAntiga < new DateTime(1900, 1, 1))
                    throw new SGValidationException("RGDataExp não pode ser anterior a 01/01/1900.");
            }
        }

        if (reg.CPF != null && reg.CPF.Length > 0 && !reg.CPF.IsValidCpf())
            throw new SGValidationException("CPF inválido.");
        if (!string.IsNullOrWhiteSpace(reg.CPF))
        {
            var testaCpf = await IsCpfDuplicado(reg, service, uri);
            if (testaCpf.Item1 && testaCpf.Item2 != null)
            {
                throw new SGValidationException($"Clientes ({testaCpf.Item2.Nome}) com cpf '{reg.CPF.MaskCpf()}' já cadastrado.");
            }
            else if (testaCpf.Item1)
            {
                throw new SGValidationException($"Clientes com cpf '{reg.CPF.MaskCpf()}' já cadastrado.");
            }
        }

        if (reg.CNPJ != null && reg.CNPJ.Length > 0 && !reg.CNPJ.IsValidCnpj())
            throw new SGValidationException("CNPJ inválido.");
        if (!string.IsNullOrWhiteSpace(reg.CNPJ) && await IsCnpjDuplicado(reg, service, uri))
            throw new SGValidationException($"Clientes com cnpj {reg.CNPJ.MaskCnpj()} já cadastrado.");
        // Cidade
        if (!reg.Cidade.IsEmptyIDNumber())
        {
            var regCidade = await cidadeReader.Read(reg.Cidade, oCnn);
            if (regCidade == null || regCidade.Id != reg.Cidade)
            {
                throw new SGValidationException($"Cidade não encontrado ({regCidade?.Id}).");
            }
        }

        // RegimeTributacao
        if (!reg.RegimeTributacao.IsEmptyIDNumber())
        {
            var regRegimeTributacao = await regimetributacaoReader.Read(reg.RegimeTributacao, oCnn);
            if (regRegimeTributacao == null || regRegimeTributacao.Id != reg.RegimeTributacao)
            {
                throw new SGValidationException($"Regime Tributacao não encontrado ({regRegimeTributacao?.Id}).");
            }
        }

        // EnquadramentoEmpresa
        if (!reg.EnquadramentoEmpresa.IsEmptyIDNumber())
        {
            var regEnquadramentoEmpresa = await enquadramentoempresaReader.Read(reg.EnquadramentoEmpresa, oCnn);
            if (regEnquadramentoEmpresa == null || regEnquadramentoEmpresa.Id != reg.EnquadramentoEmpresa)
            {
                throw new SGValidationException($"Enquadramento Empresa não encontrado ({regEnquadramentoEmpresa?.Id}).");
            }
        }

        return true;
    }

    private async Task<bool> IsCnpjDuplicado(Models.Clientes reg, IClientesService service, string uri)
    {
        if (reg.CNPJ.ClearInputCnpj().Length == 0)
            return false;
        var existingClientes = (await service.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterClientes { CNPJ = reg.CNPJ.ClearInputCnpj() }, uri)).FirstOrDefault();
        return existingClientes != null && existingClientes.Id > 0 && existingClientes.Id != reg.Id;
    }

    private async Task<(bool, ClientesResponseAll? )> IsCpfDuplicado(Models.Clientes reg, IClientesService service, string uri)
    {
        if (reg.CPF.ClearInputCpf().Length == 0)
            return (false, null);
        var existingClientes = (await service.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterClientes { CPF = reg.CPF.ClearInputCpf() }, uri)).FirstOrDefault();
        return (existingClientes != null && existingClientes.Id > 0 && existingClientes.Id != reg.Id, existingClientes);
    }
}