// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Readers;
public partial class AgendaSemanaReader(IFAgendaSemanaFactory agendasemanaFactory) : IAgendaSemanaReader
{
    private readonly IFAgendaSemanaFactory _agendasemanaFactory = agendasemanaFactory;
    public async Task<IEnumerable<AgendaSemanaResponseAll>> Listar(int max, string uri, string cWhere, List<SqlParameter> parameters, string order, CancellationToken cancellationToken) => await ListarTabela(BuildSqlQuery(DBAgendaSemana.CamposSqlX, cWhere, order, max), parameters, uri, caching: DevourerOne.PCachingDefault, max: max, cancellationToken: cancellationToken);
    private async Task<IEnumerable<AgendaSemanaResponseAll>> ListarTabela(string sql, List<SqlParameter> parameters, string uri, bool caching = DevourerOne.PCachingDefault, int max = 200, CancellationToken cancellationToken = default)
    {
        var result = new List<AgendaSemanaResponseAll>(max);
        await using var connection = Configuracoes.GetConnectionByUri(uri);
        await using var cmd = new SqlCommand(cmdText: ConfiguracoesDBT.CmdSql(sql), connection: connection?.InnerConnection)
        {
            CommandTimeout = 30
        };
        foreach (var param in parameters)
        {
            if (!cmd.Parameters.Contains(param.ParameterName))
            {
                var newParam = new SqlParameter(param.ParameterName, param.Value)
                {
                    SqlDbType = param.SqlDbType,
                    Direction = param.Direction,
                    Size = param.Size,
                    Precision = param.Precision,
                    Scale = param.Scale
                };
                cmd.Parameters.Add(newParam);
            }
        }

        await using var reader = await cmd.ExecuteReaderAsync(CommandBehavior.SingleResult);
        while (await reader.ReadAsync())
        {
            if (cancellationToken.IsCancellationRequested)
                return result;
            result.Add(ReadAll(_agendasemanaFactory.CreateFromReader(reader), reader)!);
        }

        return result;
    }

    public AgendaSemanaResponse? Read(SG.GerAdv.DBAgendaSemana dbRec) // Track 002.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var agendasemana = new AgendaSemanaResponse
        {
            Id = dbRec.ID,
            ParaNome = dbRec.FParaNome ?? string.Empty,
            Data = dbRec.FData ?? string.Empty,
            Funcionario = dbRec.FFuncionario,
            Advogado = dbRec.FAdvogado,
            Hora = dbRec.FHora ?? string.Empty,
            TipoCompromisso = dbRec.FTipoCompromisso,
            Compromisso = dbRec.FCompromisso ?? string.Empty,
            Concluido = dbRec.FConcluido,
            Liberado = dbRec.FLiberado,
            Importante = dbRec.FImportante,
            HoraFinal = dbRec.FHoraFinal ?? string.Empty,
            Nome = dbRec.FNome ?? string.Empty,
            Cliente = dbRec.FCliente,
            NomeCliente = dbRec.FNomeCliente ?? string.Empty,
            Tipo = dbRec.FTipo ?? string.Empty,
        };
        return agendasemana;
    }

    public AgendaSemanaResponseAll? ReadAll(SG.GerAdv.DBAgendaSemana dbRec, IDataRecord dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var agendasemana = new AgendaSemanaResponseAll
        {
            Id = dbRec.ID,
            ParaNome = dbRec.FParaNome ?? string.Empty,
            Data = dbRec.FData ?? string.Empty,
            Funcionario = dbRec.FFuncionario,
            Advogado = dbRec.FAdvogado,
            Hora = dbRec.FHora ?? string.Empty,
            TipoCompromisso = dbRec.FTipoCompromisso,
            Compromisso = dbRec.FCompromisso ?? string.Empty,
            Concluido = dbRec.FConcluido,
            Liberado = dbRec.FLiberado,
            Importante = dbRec.FImportante,
            HoraFinal = dbRec.FHoraFinal ?? string.Empty,
            Nome = dbRec.FNome ?? string.Empty,
            Cliente = dbRec.FCliente,
            NomeCliente = dbRec.FNomeCliente ?? string.Empty,
            Tipo = dbRec.FTipo ?? string.Empty,
        };
        try
        {
            agendasemana.NomeFuncionarios = dr[DBFuncionariosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agendasemana.NomeAdvogados = dr[DBAdvogadosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agendasemana.DescricaoTipoCompromisso = dr[DBTipoCompromissoDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agendasemana.NomeClientes = dr[DBClientesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return agendasemana;
    }
}