// 100% auto-generated by Source Genesys WebApi Front & Back Creator
                     // copyright © 2000-2025 Menphis - Sistemas Inteligentes
                     // This file is part of the Source Genesys project                     
                    // GridsMobile.tsx
'use client';
import React from 'react';
import { Grid, GridColumn } from '@progress/kendo-react-grid';
import { IAdvogados } from '../../Interfaces/interface.Advogados';
import { useRouter } from 'next/navigation';
import { useMemo, useCallback } from 'react';
import { applyFilter, CRUD_CONSTANTS, formatCurrency, formatDateBrowser } from '@/app/tools/crud';
import { SvgIcon } from '@progress/kendo-react-common';
import { fileExcelIcon, filePdfIcon, pencilIcon, trashIcon, searchIcon } from '@progress/kendo-svg-icons';
import { useGridFilter } from '@/app/hooks/useGridFilter';
import { useGridSort } from '@/app/hooks/useGridSort';
import { useGridPagination } from '@/app/hooks/useGridPagination';
import '@/app/styles/MobileCrudGrid.css';
interface AdvogadosGridProps {
  data: IAdvogados[];
  onRowClick: (advogados: IAdvogados) => void;
  onDeleteClick: (e: any) => void;
  setSelectedId: (id: number | null) => void;
}
export const AdvogadosGridMobileComponent = React.memo(
({
  data, 
  onRowClick, 
  onDeleteClick, 
  setSelectedId, 

}: AdvogadosGridProps) => {
const router = useRouter();

const RowNumberCell = (props: any) => <td>{props.dataIndex + 1}</td>;
// Hook para paginação
const { page, handlePageChange } = useGridPagination({
  initialSkip: 0, 
  initialTake: 10, 
});
// Configuração dos filtros iniciais
const initialFilters = {
  nome: '',
};
// Lógica de filtro customizada usando useCallback
const filterLogic = useCallback((data: IAdvogados, filters: Record<string, any>) => {
  const nomeMatches = applyFilter(data, 'nome', filters.nome);
  return nomeMatches
  ;
}, []);
// Hook para filtros
const { columnFilters, filteredData, handleFilterChange } = useGridFilter({
  data, 
  initialFilters, 
  filterLogic, 
});
// Hook para ordenação
const { sort, sortedData, handleSortChange } = useGridSort({
  data: filteredData, 
});
const handleRowClick = (e: any) => {
  onRowClick(e.dataItem);
};

const openSearchCellAgenda = (id: number) => {
  router.push(`/pages/agenda/?advogados=${id}`);
};
const SearchFromCellAgenda = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellAgenda(props.dataItem.id)}><span title='Pesquisar relacionados em Compromisso'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellAgendaFinanceiro = (id: number) => {
  router.push(`/pages/agendafinanceiro/?advogados=${id}`);
};
const SearchFromCellAgendaFinanceiro = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellAgendaFinanceiro(props.dataItem.id)}><span title='Pesquisar relacionados em Agenda Financeiro'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellAgendaQuem = (id: number) => {
  router.push(`/pages/agendaquem/?advogados=${id}`);
};
const SearchFromCellAgendaQuem = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellAgendaQuem(props.dataItem.id)}><span title='Pesquisar relacionados em Agenda Quem'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellAgendaRepetir = (id: number) => {
  router.push(`/pages/agendarepetir/?advogados=${id}`);
};
const SearchFromCellAgendaRepetir = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellAgendaRepetir(props.dataItem.id)}><span title='Pesquisar relacionados em Agenda Repetir'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellContratos = (id: number) => {
  router.push(`/pages/contratos/?advogados=${id}`);
};
const SearchFromCellContratos = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellContratos(props.dataItem.id)}><span title='Pesquisar relacionados em Contratos'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellHorasTrab = (id: number) => {
  router.push(`/pages/horastrab/?advogados=${id}`);
};
const SearchFromCellHorasTrab = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellHorasTrab(props.dataItem.id)}><span title='Pesquisar relacionados em Horas Trab'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellParceriaProc = (id: number) => {
  router.push(`/pages/parceriaproc/?advogados=${id}`);
};
const SearchFromCellParceriaProc = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellParceriaProc(props.dataItem.id)}><span title='Pesquisar relacionados em Parceria Proc'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellProcessos = (id: number) => {
  router.push(`/pages/processos/?advogados=${id}`);
};
const SearchFromCellProcessos = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellProcessos(props.dataItem.id)}><span title='Pesquisar relacionados em Processos'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellProProcuradores = (id: number) => {
  router.push(`/pages/proprocuradores/?advogados=${id}`);
};
const SearchFromCellProProcuradores = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellProProcuradores(props.dataItem.id)}><span title='Pesquisar relacionados em Pro Procuradores'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const gridColumns = useMemo(() => [
  <GridColumn field='index' title='#' sortable={false} filterable={false} width='55px' cells={{ data: RowNumberCell }} />,
  <GridColumn field='nome' title='Nome' />,
  <GridColumn format='{0:n0}' field='index' title='#' sortable={false} filterable={false} width='55px' cells={{ data: RowNumberCell }} />, <GridColumn
  field='id_edit_Agenda'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Compromisso'
  cells={{ data: SearchFromCellAgenda }}
  />, 
  <GridColumn
  field='id_edit_AgendaFinanceiro'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Agenda Financeiro'
  cells={{ data: SearchFromCellAgendaFinanceiro }}
  />, 
  <GridColumn
  field='id_edit_AgendaQuem'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Agenda Quem'
  cells={{ data: SearchFromCellAgendaQuem }}
  />, 
  <GridColumn
  field='id_edit_AgendaRepetir'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Agenda Repetir'
  cells={{ data: SearchFromCellAgendaRepetir }}
  />, 
  <GridColumn
  field='id_edit_Contratos'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Contratos'
  cells={{ data: SearchFromCellContratos }}
  />, 
  <GridColumn
  field='id_edit_HorasTrab'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Horas Trab'
  cells={{ data: SearchFromCellHorasTrab }}
  />, 
  <GridColumn
  field='id_edit_ParceriaProc'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Parceria Proc'
  cells={{ data: SearchFromCellParceriaProc }}
  />, 
  <GridColumn
  field='id_edit_Processos'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Processos'
  cells={{ data: SearchFromCellProcessos }}
  />, 
  <GridColumn
  field='id_edit_ProProcuradores'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Pro Procuradores'
  cells={{ data: SearchFromCellProProcuradores }}
  />, 
  ], []);
  const DeleteRow = (e: any) => {
    return (
    <td>
      <span onClick={() => onDeleteClick(e) } title='Excluit item' ><SvgIcon icon={trashIcon} /></span>
    </td>
  );
};
return (
<>
<Grid
className='grid-mobile-crud grid-mobile-advogados'
data={sortedData.slice(page.skip, page.skip + page.take)}
skip={page.skip}
take={page.take}
total={sortedData.length}
pageable={{
  pageSizes: Array.from(CRUD_CONSTANTS.PAGINATION.PAGE_SIZES), 
  buttonCount: CRUD_CONSTANTS.PAGINATION.BUTTON_COUNT, 
}}
onPageChange={handlePageChange}
sortable={true}
sort={sort}
onSortChange={handleSortChange}
resizable={true}
reorderable={true}
filterable={true}
onFilterChange={handleFilterChange}
onRowClick={(e) => handleRowClick(e)}>
{gridColumns}
</Grid>
</>
);
}
);