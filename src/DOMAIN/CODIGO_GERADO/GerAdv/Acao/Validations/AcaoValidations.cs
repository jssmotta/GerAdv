// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IAcaoValidation
{
    Task<bool> ValidateReg(Models.Acao reg, IAcaoService service, IJusticaReader justicaReader, IAreaReader areaReader, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
    Task<bool> CanDelete(int? id, IAcaoService service, IInstanciaService instanciaService, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
}

public class AcaoValidation : IAcaoValidation
{
    public async Task<bool> CanDelete(int? id, IAcaoService service, IInstanciaService instanciaService, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (id == null || id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id ?? default, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        var instanciaExists0 = await instanciaService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterInstancia { Acao = id ?? default }, uri);
        if (instanciaExists0 != null && instanciaExists0.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Instancia associados a ele.");
        return true;
    }

    private bool ValidSizes(Models.Acao reg)
    {
        if (reg.Descricao != null && reg.Descricao.Length > DBAcaoDicInfo.AcaDescricao.FTamanho)
            throw new SGValidationException($"Descricao deve ter no máximo {DBAcaoDicInfo.AcaDescricao.FTamanho} caracteres.");
        if (reg.GUID != null && reg.GUID.Length > DBAcaoDicInfo.AcaGUID.FTamanho)
            throw new SGValidationException($"GUID deve ter no máximo {DBAcaoDicInfo.AcaGUID.FTamanho} caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.Acao reg, IAcaoService service, IJusticaReader justicaReader, IAreaReader areaReader, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Descricao))
            throw new SGValidationException("Descrição é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        // Justica
        if (!reg.Justica.IsEmptyIDNumber())
        {
            var regJustica = await justicaReader.Read(reg.Justica, oCnn);
            if (regJustica == null || regJustica.Id != reg.Justica)
            {
                throw new SGValidationException($"Justiça não encontrado ({regJustica?.Id}).");
            }
        }

        // Area
        if (!reg.Area.IsEmptyIDNumber())
        {
            var regArea = await areaReader.Read(reg.Area, oCnn);
            if (regArea == null || regArea.Id != reg.Area)
            {
                throw new SGValidationException($"Área não encontrado ({regArea?.Id}).");
            }
        }

        return true;
    }
}