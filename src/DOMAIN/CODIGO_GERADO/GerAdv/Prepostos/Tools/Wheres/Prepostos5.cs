// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Wheres;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IPrepostosWhere
{
    PrepostosResponse Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn);
}

public partial class PrepostosWhere(IFPrepostosFactory prepostosFactory) : IPrepostosWhere
{
    private readonly IFPrepostosFactory _prepostosFactory = prepostosFactory;
    public PrepostosResponse Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn)
    {
        using var dbRec = _prepostosFactory.CreateFromParameters(parameters, oCnn, sqlWhere: where);
        var prepostos = new PrepostosResponse
        {
            Id = dbRec.ID,
            Nome = dbRec.FNome ?? string.Empty,
            Funcao = dbRec.FFuncao,
            Setor = dbRec.FSetor,
            Qualificacao = dbRec.FQualificacao ?? string.Empty,
            Sexo = dbRec.FSexo,
            Idade = dbRec.FIdade,
            CPF = dbRec.FCPF ?? string.Empty,
            RG = dbRec.FRG ?? string.Empty,
            Registro = dbRec.FRegistro ?? string.Empty,
            CTPSNumero = dbRec.FCTPSNumero ?? string.Empty,
            CTPSSerie = dbRec.FCTPSSerie ?? string.Empty,
            PIS = dbRec.FPIS ?? string.Empty,
            Salario = dbRec.FSalario,
            LiberaAgenda = dbRec.FLiberaAgenda,
            Observacao = dbRec.FObservacao ?? string.Empty,
            Endereco = dbRec.FEndereco ?? string.Empty,
            Bairro = dbRec.FBairro ?? string.Empty,
            Cidade = dbRec.FCidade,
            CEP = dbRec.FCEP ?? string.Empty,
            Fone = dbRec.FFone ?? string.Empty,
            Fax = dbRec.FFax ?? string.Empty,
            EMail = dbRec.FEMail ?? string.Empty,
            Pai = dbRec.FPai ?? string.Empty,
            Mae = dbRec.FMae ?? string.Empty,
            Class = dbRec.FClass ?? string.Empty,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDtNasc, out DateTime XDtNasc))
        {
            prepostos.DtNasc = dbRec.FDtNasc;
            prepostos.DtNasc_date = XDtNasc;
        }

        if (DateTime.TryParse(dbRec.FPeriodo_Ini, out DateTime XPeriodo_Ini))
        {
            prepostos.Periodo_Ini = dbRec.FPeriodo_Ini;
            prepostos.Periodo_Ini_date = XPeriodo_Ini;
        }

        if (DateTime.TryParse(dbRec.FPeriodo_Fim, out DateTime XPeriodo_Fim))
        {
            prepostos.Periodo_Fim = dbRec.FPeriodo_Fim;
            prepostos.Periodo_Fim_date = XPeriodo_Fim;
        }

        if (DateTime.TryParse(dbRec.FCTPSDtEmissao, out DateTime XCTPSDtEmissao))
        {
            prepostos.CTPSDtEmissao = dbRec.FCTPSDtEmissao;
            prepostos.CTPSDtEmissao_date = XCTPSDtEmissao;
        }

        return prepostos;
    }
}