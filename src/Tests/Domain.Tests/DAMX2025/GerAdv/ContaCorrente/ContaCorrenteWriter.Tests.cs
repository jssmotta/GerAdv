// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class ContaCorrenteWriterTests
{
    private readonly Mock<IFContaCorrenteFactory> _mockContaCorrenteFactory;
    private readonly Mock<FContaCorrente> _mockFContaCorrente;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly ContaCorrenteWriter _contacorrenteWriter;
    public ContaCorrenteWriterTests()
    {
        _mockContaCorrenteFactory = new Mock<IFContaCorrenteFactory>();
        _mockFContaCorrente = new Mock<FContaCorrente>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _contacorrenteWriter = new ContaCorrenteWriter(_mockContaCorrenteFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var contacorrente = CreateValidContaCorrenteModel();
        contacorrente.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockContaCorrenteFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFContaCorrente.Object);
        _mockFContaCorrente.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _contacorrenteWriter.WriteAsync(contacorrente, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFContaCorrente.Object);
        _mockContaCorrenteFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockContaCorrenteFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFContaCorrente.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var contacorrente = CreateValidContaCorrenteModel();
        contacorrente.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockContaCorrenteFactory.Setup(x => x.CreateFromIdAsync(contacorrente.Id, _mockConnection.Object)).ReturnsAsync(_mockFContaCorrente.Object);
        _mockFContaCorrente.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _contacorrenteWriter.WriteAsync(contacorrente, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFContaCorrente.Object);
        _mockContaCorrenteFactory.Verify(x => x.CreateFromIdAsync(contacorrente.Id, _mockConnection.Object), Times.Once);
        _mockContaCorrenteFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFContaCorrente.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var contacorrente = CreateValidContaCorrenteModel();
        var auditorQuem = 99;
        _mockContaCorrenteFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFContaCorrente.Object);
        _mockFContaCorrente.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _contacorrenteWriter.WriteAsync(contacorrente, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFContaCorrente.Object);
        _mockFContaCorrente.VerifySet(x => x.FCIAcordo = contacorrente.CIAcordo, Times.Once);
        _mockFContaCorrente.VerifySet(x => x.FGUID = contacorrente.GUID, Times.Once);
        _mockFContaCorrente.VerifySet(x => x.FQuitado = contacorrente.Quitado, Times.Once);
        _mockFContaCorrente.VerifySet(x => x.FIDContrato = contacorrente.IDContrato, Times.Once);
        _mockFContaCorrente.VerifySet(x => x.FQuitadoID = contacorrente.QuitadoID, Times.Once);
        _mockFContaCorrente.VerifySet(x => x.FDebitoID = contacorrente.DebitoID, Times.Once);
        _mockFContaCorrente.VerifySet(x => x.FLivroCaixaID = contacorrente.LivroCaixaID, Times.Once);
        _mockFContaCorrente.VerifySet(x => x.FSucumbencia = contacorrente.Sucumbencia, Times.Once);
        _mockFContaCorrente.VerifySet(x => x.FDistRegra = contacorrente.DistRegra, Times.Once);
        _mockFContaCorrente.VerifySet(x => x.FDtOriginal = contacorrente.DtOriginal.ToString(), Times.Once);
        _mockFContaCorrente.VerifySet(x => x.FProcesso = contacorrente.Processo, Times.Once);
        _mockFContaCorrente.VerifySet(x => x.FParcelaX = contacorrente.ParcelaX, Times.Once);
        _mockFContaCorrente.VerifySet(x => x.FValor = contacorrente.Valor, Times.Once);
        _mockFContaCorrente.VerifySet(x => x.FData = contacorrente.Data, Times.Once);
        _mockFContaCorrente.VerifySet(x => x.FCliente = contacorrente.Cliente, Times.Once);
        _mockFContaCorrente.VerifySet(x => x.FHistorico = contacorrente.Historico, Times.Once);
        _mockFContaCorrente.VerifySet(x => x.FContrato = contacorrente.Contrato, Times.Once);
        _mockFContaCorrente.VerifySet(x => x.FPago = contacorrente.Pago, Times.Once);
        _mockFContaCorrente.VerifySet(x => x.FDistribuir = contacorrente.Distribuir, Times.Once);
        _mockFContaCorrente.VerifySet(x => x.FLC = contacorrente.LC, Times.Once);
        _mockFContaCorrente.VerifySet(x => x.FIDHTrab = contacorrente.IDHTrab, Times.Once);
        _mockFContaCorrente.VerifySet(x => x.FNroParcelas = contacorrente.NroParcelas, Times.Once);
        _mockFContaCorrente.VerifySet(x => x.FValorPrincipal = contacorrente.ValorPrincipal, Times.Once);
        _mockFContaCorrente.VerifySet(x => x.FParcelaPrincipalID = contacorrente.ParcelaPrincipalID, Times.Once);
        _mockFContaCorrente.VerifySet(x => x.FHide = contacorrente.Hide, Times.Once);
        _mockFContaCorrente.VerifySet(x => x.FDataPgto = contacorrente.DataPgto.ToString(), Times.Once);
        _mockFContaCorrente.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithNullDtOriginal_ShouldNotSetFDtOriginal()
    {
        // Arrange
        var contacorrente = CreateValidContaCorrenteModel();
        contacorrente.DtOriginal = null;
        var auditorQuem = 123;
        _mockContaCorrenteFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFContaCorrente.Object);
        _mockFContaCorrente.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _contacorrenteWriter.WriteAsync(contacorrente, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFContaCorrente.VerifySet(x => x.FDtOriginal = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WithNullDataPgto_ShouldNotSetFDataPgto()
    {
        // Arrange
        var contacorrente = CreateValidContaCorrenteModel();
        contacorrente.DataPgto = null;
        var auditorQuem = 123;
        _mockContaCorrenteFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFContaCorrente.Object);
        _mockFContaCorrente.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _contacorrenteWriter.WriteAsync(contacorrente, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFContaCorrente.VerifySet(x => x.FDataPgto = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var contacorrente = CreateValidContaCorrenteModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockContaCorrenteFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _contacorrenteWriter.WriteAsync(contacorrente, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var contacorrente = CreateValidContaCorrenteModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockContaCorrenteFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFContaCorrente.Object);
        _mockFContaCorrente.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _contacorrenteWriter.WriteAsync(contacorrente, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var contacorrenteResponse = new ContaCorrenteResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockContaCorrenteFactory.Setup(x => x.DeleteAsync(operadorId, contacorrenteResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _contacorrenteWriter.Delete(contacorrenteResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockContaCorrenteFactory.Verify(x => x.DeleteAsync(operadorId, contacorrenteResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var contacorrenteResponse = new ContaCorrenteResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockContaCorrenteFactory.Setup(x => x.DeleteAsync(operadorId, contacorrenteResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _contacorrenteWriter.Delete(contacorrenteResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var contacorrenteResponse = new ContaCorrenteResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockContaCorrenteFactory.Setup(x => x.DeleteAsync(operadorId, contacorrenteResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _contacorrenteWriter.Delete(contacorrenteResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new ContaCorrenteWriter(_mockContaCorrenteFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new ContaCorrenteWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.ContaCorrente CreateValidContaCorrenteModel()
    {
        return new Models.ContaCorrente
        {
            Id = 0,
            CIAcordo = 1,
            GUID = Guid.NewGuid().ToString(),
            Quitado = false,
            IDContrato = 1,
            QuitadoID = 1,
            DebitoID = 1,
            LivroCaixaID = 1,
            Sucumbencia = false,
            DistRegra = false,
            DtOriginal = "24/04/1975",
            Processo = 1,
            ParcelaX = 1,
            Valor = 0m,
            Data = "27/05/2022",
            Cliente = 1,
            Historico = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Contrato = false,
            Pago = false,
            Distribuir = false,
            LC = false,
            IDHTrab = 1,
            NroParcelas = 1,
            ValorPrincipal = 0m,
            ParcelaPrincipalID = 1,
            Hide = false,
            DataPgto = "24/04/1975"
        };
    }
#endregion
}