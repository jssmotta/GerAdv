// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// ============================================
// ARQUIVO: DBUpdateTests.cs.txt (Principal)
// ============================================
namespace MenphisSI.GerAdv.Tests;
public class DBBensMateriaisUpdate : IDisposable
{
    private readonly DBBensMateriais _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBBensMateriaisUpdate()
    {
        _instance = new DBBensMateriais();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void DefaultConstructor_ShouldCreateInstance_WithDefaultValues()
    {
        // Act
        var bensmateriais = new DBBensMateriais();
        // Assert
        bensmateriais.Should().NotBeNull();
        bensmateriais.ITabelaName().Should().Be("BensMateriais");
        bensmateriais.ID.Should().Be(0);
    }

    [Fact]
    public void AllProperties_WithValidValues_ShouldSetCorrectly()
    {
        // Arrange
        var bensmateriais = new DBBensMateriais
        {
            FNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FNFNRO = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FNroSerieProduto = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FComprador = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FObservacoes = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FNomeVendedor = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FGUID = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        };
        // Assert - All properties should be set bensmateriais.FNome.Should().Be( "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        bensmateriais.FNFNRO.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        bensmateriais.FNroSerieProduto.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        bensmateriais.FComprador.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        bensmateriais.FObservacoes.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        bensmateriais.FNomeVendedor.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        bensmateriais.FGUID.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public void StringProperties_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var bensmateriais = new DBBensMateriais();
        var longString = new string ('X', 300);
        bensmateriais.FNome = longString; // MAX: 80
        bensmateriais.FNFNRO = longString; // MAX: 255
        bensmateriais.FNroSerieProduto = longString; // MAX: 100
        bensmateriais.FComprador = longString; // MAX: 100
        bensmateriais.FNomeVendedor = longString; // MAX: 255
        bensmateriais.FGUID = longString; // MAX: 100
        // Assert - All properties should be set bensmateriais.FNome.Should().HaveLength(80);
        bensmateriais.FNFNRO.Should().HaveLength(255);
        bensmateriais.FNroSerieProduto.Should().HaveLength(100);
        bensmateriais.FComprador.Should().HaveLength(100);
        bensmateriais.FNomeVendedor.Should().HaveLength(255);
        bensmateriais.FGUID.Should().HaveLength(100);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNome_Property_ShouldAcceptValidNames(string Nome)
    {
        // Arrange
        var bensmateriais = new DBBensMateriais
        {
            // Act
            FNome = Nome
        };
        // Assert
        bensmateriais.FNome.Should().Be(Nome);
    }

    [Fact]
    public void FNome_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var bensmateriais = new DBBensMateriais
        {
            // Act
            FNome = null
        };
        // Assert
        bensmateriais.FNome.Should().Be(string.Empty);
    }

    [Fact]
    public void SqlWhereConstructor_WithNullConnection_ShouldNotThrow()
    {
        // Arrange
        var sqlWhere = "bmtCodigo = 1";
        // Act & Assert
        var BensMateriais = new DBBensMateriais(sqlWhere, null);
        BensMateriais.Should().NotBeNull();
    }

    [Fact]
    public void ParameterizedConstructor_WithNullConnection_ShouldReturnEarly()
    {
        // Arrange
        var parameters = new List<SqlParameter>();
        var nome = "TesteNome";
        // Act
        var bensmateriais = new DBBensMateriais(parameters, nome, null);
        // Assert
        bensmateriais.Should().NotBeNull();
        bensmateriais.ID.Should().Be(0); // Should not have loaded any data
    }

    [Fact]
    public void FNome_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var bensmateriais = new DBBensMateriais();
        var longName = new string ('A', 80 + 10); // Exceeds 80 character limit
        // Act
        bensmateriais.FNome = longName;
        // Assert
        bensmateriais.FNome.Should().HaveLength(80);
    }

    [Fact]
    public void FNome_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FNome = null;
        // Act
        var result = _instance.FNome;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FNome_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FNome = expectedValue;
        // Act
        var result = _instance.FNome;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FNome_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNome = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNome = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FNome = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FNome = value;
        // Act
        _instance.FNome = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = "Original Value";
        // Act
        _instance.FNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = "First Value";
        // Act
        _instance.FNome = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNome = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNome_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FNome = input;
        // Assert
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void FNome_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = null;
        // Act
        _instance.FNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = "Existing Value";
        // Act
        _instance.FNome = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNFNRO_Property_ShouldAcceptValidNames(string NFNRO)
    {
        // Arrange
        var bensmateriais = new DBBensMateriais
        {
            // Act
            FNFNRO = NFNRO
        };
        // Assert
        bensmateriais.FNFNRO.Should().Be(NFNRO);
    }

    [Fact]
    public void FNFNRO_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var bensmateriais = new DBBensMateriais
        {
            // Act
            FNFNRO = null
        };
        // Assert
        bensmateriais.FNFNRO.Should().Be(string.Empty);
    }

    [Fact]
    public void FNFNRO_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var bensmateriais = new DBBensMateriais();
        var longName = new string ('A', 255 + 10); // Exceeds 255 character limit
        // Act
        bensmateriais.FNFNRO = longName;
        // Assert
        bensmateriais.FNFNRO.Should().HaveLength(255);
    }

    [Fact]
    public void FNFNRO_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FNFNRO = null;
        // Act
        var result = _instance.FNFNRO;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FNFNRO_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FNFNRO = expectedValue;
        // Act
        var result = _instance.FNFNRO;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FNFNRO_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNFNRO", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNFNRO = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FNFNRO);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNFNRO_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNFNRO", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNFNRO = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FNFNRO);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FNFNRO_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNFNRO", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FNFNRO = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FNFNRO);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNFNRO_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNFNRO", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FNFNRO = value;
        // Act
        _instance.FNFNRO = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNFNRO_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNFNRO", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNFNRO = "Original Value";
        // Act
        _instance.FNFNRO = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNFNRO_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNFNRO", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNFNRO = "First Value";
        // Act
        _instance.FNFNRO = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNFNRO_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNFNRO", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNFNRO = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FNFNRO);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNFNRO_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FNFNRO = input;
        // Assert
        Assert.Equal(expected, _instance.FNFNRO);
    }

    [Fact]
    public void FNFNRO_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNFNRO", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNFNRO = null;
        // Act
        _instance.FNFNRO = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNFNRO_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNFNRO", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNFNRO = "Existing Value";
        // Act
        _instance.FNFNRO = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData(1000.50)]
    [InlineData(0)]
    [InlineData(-100.25)]
    public void FValorBem_Property_ShouldAcceptDecimalValues(decimal ValorBem)
    {
        // Arrange
        var bensmateriais = new DBBensMateriais();
        // Act
        bensmateriais.FValorBem = ValorBem;
        // Assert
        bensmateriais.FValorBem.Should().Be(ValorBem);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNroSerieProduto_Property_ShouldAcceptValidNames(string NroSerieProduto)
    {
        // Arrange
        var bensmateriais = new DBBensMateriais
        {
            // Act
            FNroSerieProduto = NroSerieProduto
        };
        // Assert
        bensmateriais.FNroSerieProduto.Should().Be(NroSerieProduto);
    }

    [Fact]
    public void FNroSerieProduto_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var bensmateriais = new DBBensMateriais
        {
            // Act
            FNroSerieProduto = null
        };
        // Assert
        bensmateriais.FNroSerieProduto.Should().Be(string.Empty);
    }

    [Fact]
    public void FNroSerieProduto_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var bensmateriais = new DBBensMateriais();
        var longName = new string ('A', 100 + 10); // Exceeds 100 character limit
        // Act
        bensmateriais.FNroSerieProduto = longName;
        // Assert
        bensmateriais.FNroSerieProduto.Should().HaveLength(100);
    }

    [Fact]
    public void FNroSerieProduto_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FNroSerieProduto = null;
        // Act
        var result = _instance.FNroSerieProduto;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FNroSerieProduto_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FNroSerieProduto = expectedValue;
        // Act
        var result = _instance.FNroSerieProduto;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FNroSerieProduto_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNroSerieProduto", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNroSerieProduto = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FNroSerieProduto);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNroSerieProduto_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNroSerieProduto", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNroSerieProduto = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FNroSerieProduto);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FNroSerieProduto_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNroSerieProduto", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FNroSerieProduto = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FNroSerieProduto);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNroSerieProduto_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNroSerieProduto", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FNroSerieProduto = value;
        // Act
        _instance.FNroSerieProduto = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNroSerieProduto_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNroSerieProduto", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNroSerieProduto = "Original Value";
        // Act
        _instance.FNroSerieProduto = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNroSerieProduto_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNroSerieProduto", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNroSerieProduto = "First Value";
        // Act
        _instance.FNroSerieProduto = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNroSerieProduto_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNroSerieProduto", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNroSerieProduto = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FNroSerieProduto);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNroSerieProduto_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FNroSerieProduto = input;
        // Assert
        Assert.Equal(expected, _instance.FNroSerieProduto);
    }

    [Fact]
    public void FNroSerieProduto_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNroSerieProduto", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNroSerieProduto = null;
        // Act
        _instance.FNroSerieProduto = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNroSerieProduto_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNroSerieProduto", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNroSerieProduto = "Existing Value";
        // Act
        _instance.FNroSerieProduto = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FComprador_Property_ShouldAcceptValidNames(string Comprador)
    {
        // Arrange
        var bensmateriais = new DBBensMateriais
        {
            // Act
            FComprador = Comprador
        };
        // Assert
        bensmateriais.FComprador.Should().Be(Comprador);
    }

    [Fact]
    public void FComprador_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var bensmateriais = new DBBensMateriais
        {
            // Act
            FComprador = null
        };
        // Assert
        bensmateriais.FComprador.Should().Be(string.Empty);
    }

    [Fact]
    public void FComprador_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var bensmateriais = new DBBensMateriais();
        var longName = new string ('A', 100 + 10); // Exceeds 100 character limit
        // Act
        bensmateriais.FComprador = longName;
        // Assert
        bensmateriais.FComprador.Should().HaveLength(100);
    }

    [Fact]
    public void FComprador_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FComprador = null;
        // Act
        var result = _instance.FComprador;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FComprador_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FComprador = expectedValue;
        // Act
        var result = _instance.FComprador;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FComprador_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFComprador", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FComprador = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FComprador);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FComprador_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFComprador", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FComprador = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FComprador);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FComprador_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFComprador", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FComprador = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FComprador);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FComprador_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFComprador", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FComprador = value;
        // Act
        _instance.FComprador = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FComprador_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFComprador", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FComprador = "Original Value";
        // Act
        _instance.FComprador = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FComprador_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFComprador", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FComprador = "First Value";
        // Act
        _instance.FComprador = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FComprador_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFComprador", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FComprador = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FComprador);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FComprador_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FComprador = input;
        // Assert
        Assert.Equal(expected, _instance.FComprador);
    }

    [Fact]
    public void FComprador_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFComprador", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FComprador = null;
        // Act
        _instance.FComprador = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FComprador_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFComprador", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FComprador = "Existing Value";
        // Act
        _instance.FComprador = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FObservacoes_Property_ShouldAcceptValidNames(string Observacoes)
    {
        // Arrange
        var bensmateriais = new DBBensMateriais
        {
            // Act
            FObservacoes = Observacoes
        };
        // Assert
        bensmateriais.FObservacoes.Should().Be(Observacoes);
    }

    [Fact]
    public void FObservacoes_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var bensmateriais = new DBBensMateriais
        {
            // Act
            FObservacoes = null
        };
        // Assert
        bensmateriais.FObservacoes.Should().Be(string.Empty);
    }

    [Fact]
    public void FObservacoes_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FObservacoes = null;
        // Act
        var result = _instance.FObservacoes;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FObservacoes_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FObservacoes = expectedValue;
        // Act
        var result = _instance.FObservacoes;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FObservacoes_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFObservacoes", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FObservacoes = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FObservacoes);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObservacoes_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFObservacoes", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FObservacoes = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FObservacoes);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FObservacoes_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFObservacoes", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  ";
        var expectedValue = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM";
        // Act
        _instance.FObservacoes = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FObservacoes);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObservacoes_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFObservacoes", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FObservacoes = value;
        // Act
        _instance.FObservacoes = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObservacoes_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFObservacoes", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObservacoes = "Original Value";
        // Act
        _instance.FObservacoes = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObservacoes_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFObservacoes", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObservacoes = "First Value";
        // Act
        _instance.FObservacoes = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObservacoes_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFObservacoes", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FObservacoes = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FObservacoes);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData
    [InlineData
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMc")]
    public void FObservacoes_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FObservacoes = input;
        // Assert
        Assert.Equal(expected, _instance.FObservacoes);
    }

    [Fact]
    public void FObservacoes_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFObservacoes", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObservacoes = null;
        // Act
        _instance.FObservacoes = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FObservacoes_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFObservacoes", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FObservacoes = "Existing Value";
        // Act
        _instance.FObservacoes = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNomeVendedor_Property_ShouldAcceptValidNames(string NomeVendedor)
    {
        // Arrange
        var bensmateriais = new DBBensMateriais
        {
            // Act
            FNomeVendedor = NomeVendedor
        };
        // Assert
        bensmateriais.FNomeVendedor.Should().Be(NomeVendedor);
    }

    [Fact]
    public void FNomeVendedor_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var bensmateriais = new DBBensMateriais
        {
            // Act
            FNomeVendedor = null
        };
        // Assert
        bensmateriais.FNomeVendedor.Should().Be(string.Empty);
    }

    [Fact]
    public void FNomeVendedor_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var bensmateriais = new DBBensMateriais();
        var longName = new string ('A', 255 + 10); // Exceeds 255 character limit
        // Act
        bensmateriais.FNomeVendedor = longName;
        // Assert
        bensmateriais.FNomeVendedor.Should().HaveLength(255);
    }

    [Fact]
    public void FNomeVendedor_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FNomeVendedor = null;
        // Act
        var result = _instance.FNomeVendedor;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FNomeVendedor_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FNomeVendedor = expectedValue;
        // Act
        var result = _instance.FNomeVendedor;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FNomeVendedor_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNomeVendedor", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNomeVendedor = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FNomeVendedor);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNomeVendedor_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNomeVendedor", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNomeVendedor = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FNomeVendedor);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FNomeVendedor_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNomeVendedor", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FNomeVendedor = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FNomeVendedor);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNomeVendedor_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNomeVendedor", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FNomeVendedor = value;
        // Act
        _instance.FNomeVendedor = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNomeVendedor_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNomeVendedor", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNomeVendedor = "Original Value";
        // Act
        _instance.FNomeVendedor = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNomeVendedor_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNomeVendedor", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNomeVendedor = "First Value";
        // Act
        _instance.FNomeVendedor = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNomeVendedor_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNomeVendedor", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNomeVendedor = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FNomeVendedor);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNomeVendedor_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FNomeVendedor = input;
        // Assert
        Assert.Equal(expected, _instance.FNomeVendedor);
    }

    [Fact]
    public void FNomeVendedor_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNomeVendedor", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNomeVendedor = null;
        // Act
        _instance.FNomeVendedor = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNomeVendedor_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBBensMateriais).GetField("pFldFNomeVendedor", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNomeVendedor = "Existing Value";
        // Act
        _instance.FNomeVendedor = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

#region Testes de GUID
    [Fact]
    public void GUID_DefaultValue_ShouldBeEmpty()
    {
        Assert.Equal(string.Empty, _instance.FGUID);
    }

    [Fact]
    public void GUID_SetValidGUID_ShouldStore()
    {
        var guid = Guid.NewGuid().ToString();
        _instance.FGUID = guid;
        Assert.Equal(guid, _instance.FGUID);
    }

#endregion
    [Fact]
    public void TabelaNome_Property_ShouldReturnCorrectTableName()
    {
        // Arrange
        var bensmateriais = new DBBensMateriais();
        // Act & Assert
        bensmateriais.TabelaNome.Should().Be("BensMateriais");
    }

    public virtual void Dispose()
    {
    // Cleanup resources if needed
    }
}