// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class OperadoresService
{
    private (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterOperadores filtro)
    {
        var parameters = new List<SqlParameter>();
        if (filtro.Enviado != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOperadoresDicInfo.Enviado)}", filtro.Enviado));
        }

        if (filtro.Casa != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOperadoresDicInfo.Casa)}", filtro.Casa));
        }

        if (filtro.CasaID != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOperadoresDicInfo.CasaID)}", filtro.CasaID));
        }

        if (filtro.CasaID_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOperadoresDicInfo.CasaID)}_end", filtro.CasaID_end));
        }

        if (filtro.CasaCodigo != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOperadoresDicInfo.CasaCodigo)}", filtro.CasaCodigo));
        }

        if (filtro.CasaCodigo_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOperadoresDicInfo.CasaCodigo)}_end", filtro.CasaCodigo_end));
        }

        if (filtro.IsNovo != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOperadoresDicInfo.IsNovo)}", filtro.IsNovo));
        }

        if (filtro.Cliente != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOperadoresDicInfo.Cliente)}", filtro.Cliente));
        }

        if (filtro.Grupo != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOperadoresDicInfo.Grupo)}", filtro.Grupo));
        }

        if (filtro.Grupo_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOperadoresDicInfo.Grupo)}_end", filtro.Grupo_end));
        }

        if (!string.IsNullOrEmpty(filtro.Nome))
        {
            parameters.Add(new($"@{nameof(DBOperadoresDicInfo.Nome)}", ApplyWildCard(filtro.WildcardChar, filtro.Nome)));
        }

        if (!string.IsNullOrEmpty(filtro.EMail))
        {
            parameters.Add(new($"@{nameof(DBOperadoresDicInfo.EMail)}", ApplyWildCard(filtro.WildcardChar, filtro.EMail)));
        }

        if (!string.IsNullOrEmpty(filtro.Senha))
        {
            parameters.Add(new($"@{nameof(DBOperadoresDicInfo.Senha)}", ApplyWildCard(filtro.WildcardChar, filtro.Senha)));
        }

        if (filtro.Ativado != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOperadoresDicInfo.Ativado)}", filtro.Ativado));
        }

        if (filtro.AtualizarSenha != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOperadoresDicInfo.AtualizarSenha)}", filtro.AtualizarSenha));
        }

        if (!string.IsNullOrEmpty(filtro.Senha256))
        {
            parameters.Add(new($"@{nameof(DBOperadoresDicInfo.Senha256)}", ApplyWildCard(filtro.WildcardChar, filtro.Senha256)));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOperadoresDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
        }

        if (filtro.Codigo_filtro_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBOperadoresDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
        }

        if (filtro.LogicalOperator.IsEmptyX() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        cWhere.Append(filtro.Enviado == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadoresDicInfo.PTabelaNome}].[{DBOperadoresDicInfo.Enviado}] = @{nameof(DBOperadoresDicInfo.Enviado)}");
        cWhere.Append(filtro.Casa == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadoresDicInfo.PTabelaNome}].[{DBOperadoresDicInfo.Casa}] = @{nameof(DBOperadoresDicInfo.Casa)}");
        if (!(filtro.CasaID.IsEmptyX()) && filtro.CasaID_end.IsEmptyX())
        {
            cWhere.Append(filtro.CasaID.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadoresDicInfo.PTabelaNome}].[{DBOperadoresDicInfo.CasaID}] = @{nameof(DBOperadoresDicInfo.CasaID)}");
        }
        else if (!(filtro.CasaID.IsEmptyX()) && !(filtro.CasaID_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadoresDicInfo.PTabelaNome}].{DBOperadoresDicInfo.CasaID} BETWEEN @{nameof(DBOperadoresDicInfo.CasaID)} AND @{nameof(DBOperadoresDicInfo.CasaID)}_end");
        }

        if (!(filtro.CasaCodigo.IsEmptyX()) && filtro.CasaCodigo_end.IsEmptyX())
        {
            cWhere.Append(filtro.CasaCodigo.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadoresDicInfo.PTabelaNome}].[{DBOperadoresDicInfo.CasaCodigo}] = @{nameof(DBOperadoresDicInfo.CasaCodigo)}");
        }
        else if (!(filtro.CasaCodigo.IsEmptyX()) && !(filtro.CasaCodigo_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadoresDicInfo.PTabelaNome}].{DBOperadoresDicInfo.CasaCodigo} BETWEEN @{nameof(DBOperadoresDicInfo.CasaCodigo)} AND @{nameof(DBOperadoresDicInfo.CasaCodigo)}_end");
        }

        cWhere.Append(filtro.IsNovo == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadoresDicInfo.PTabelaNome}].[{DBOperadoresDicInfo.IsNovo}] = @{nameof(DBOperadoresDicInfo.IsNovo)}");
        cWhere.Append(filtro.Cliente.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadoresDicInfo.PTabelaNome}].[{DBOperadoresDicInfo.Cliente}] = @{nameof(DBOperadoresDicInfo.Cliente)}");
        if (!(filtro.Grupo.IsEmptyX()) && filtro.Grupo_end.IsEmptyX())
        {
            cWhere.Append(filtro.Grupo.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadoresDicInfo.PTabelaNome}].[{DBOperadoresDicInfo.Grupo}] = @{nameof(DBOperadoresDicInfo.Grupo)}");
        }
        else if (!(filtro.Grupo.IsEmptyX()) && !(filtro.Grupo_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadoresDicInfo.PTabelaNome}].{DBOperadoresDicInfo.Grupo} BETWEEN @{nameof(DBOperadoresDicInfo.Grupo)} AND @{nameof(DBOperadoresDicInfo.Grupo)}_end");
        }

        cWhere.Append(filtro.Nome.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadoresDicInfo.PTabelaNome}].[{DBOperadoresDicInfo.Nome}]  {DevourerConsts.MsiCollate} like @{nameof(DBOperadoresDicInfo.Nome)}");
        cWhere.Append(filtro.EMail.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadoresDicInfo.PTabelaNome}].[{DBOperadoresDicInfo.EMail}]  {DevourerConsts.MsiCollate} like @{nameof(DBOperadoresDicInfo.EMail)}");
        cWhere.Append(filtro.Senha.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadoresDicInfo.PTabelaNome}].[{DBOperadoresDicInfo.Senha}]  {DevourerConsts.MsiCollate} like @{nameof(DBOperadoresDicInfo.Senha)}");
        cWhere.Append(filtro.Ativado == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadoresDicInfo.PTabelaNome}].[{DBOperadoresDicInfo.Ativado}] = @{nameof(DBOperadoresDicInfo.Ativado)}");
        cWhere.Append(filtro.AtualizarSenha == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadoresDicInfo.PTabelaNome}].[{DBOperadoresDicInfo.AtualizarSenha}] = @{nameof(DBOperadoresDicInfo.AtualizarSenha)}");
        cWhere.Append(filtro.Senha256.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadoresDicInfo.PTabelaNome}].[{DBOperadoresDicInfo.Senha256}]  {DevourerConsts.MsiCollate} like @{nameof(DBOperadoresDicInfo.Senha256)}");
        if (!(filtro.Codigo_filtro.IsEmptyX()) && filtro.Codigo_filtro_end.IsEmptyX())
        {
            cWhere.Append(filtro.Codigo_filtro.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadoresDicInfo.PTabelaNome}].[{DBOperadoresDicInfo.CampoCodigo}] = @{nameof(DBOperadoresDicInfo.CampoCodigo)}");
        }
        else if (!(filtro.Codigo_filtro.IsEmptyX()) && !(filtro.Codigo_filtro_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadoresDicInfo.PTabelaNome}].{DBOperadoresDicInfo.CampoCodigo} BETWEEN @{nameof(DBOperadoresDicInfo.CampoCodigo)} AND @{nameof(DBOperadoresDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private string ApplyWildCard(char wildcardChar, string value)
    {
        if (wildcardChar == '\0' || wildcardChar == ' ')
        {
            return value;
        }

        var result = $"{wildcardChar}{value.Replace(" ", wildcardChar.ToString())}{wildcardChar}";
        return result;
    }

    private string GetFilterHash(Filters.FilterOperadores? filtro)
    {
        if (filtro == null)
            return string.Empty;
        var json = JsonSerializer.Serialize(filtro);
        using var sha256 = SHA256.Create();
        var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(json));
        return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
    }

    public async Task<IEnumerable<NomeID>> GetListN([FromQuery] int max, [FromBody] Filters.FilterOperadores? filtro, [FromRoute, Required] string uri, CancellationToken token)
    {
        // Tracking: 20250606-0
        ThrowIfDisposed();
        var filtroResult = filtro == null ? null : WFiltro(filtro!);
        string where = filtroResult?.where ?? string.Empty;
        List<SqlParameter> parameters = filtroResult?.parametros ?? [];
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new Exception($"Coneão nula.");
        }

        var keyCache = await reader.ReadStringAuditor(max, uri, "", [], oCnn);
        var cacheKey = $"{uri}-Operadores-{max}-{where.GetHashCode()}-GetListN-{keyCache}";
        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId)
        };
        return await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataListNAsync(max, uri, where, parameters, cancel), entryOptions, cancellationToken: token) ?? [];
    }

    private async Task<IEnumerable<NomeID>> GetDataListNAsync(int max, string uri, string where, List<SqlParameter> parameters, CancellationToken token)
    {
        var result = new List<NomeID>(max);
        var lista = await reader.ListarN(max, uri, where, parameters, DBOperadoresDicInfo.CampoNome);
        foreach (var item in lista)
        {
            if (token.IsCancellationRequested)
                break;
            if (item?.FNome != null)
            {
                result.Add(new NomeID { Nome = item.FNome, ID = item.ID });
            }
        }

        return result;
    }

    private async Task<IEnumerable<OperadoresResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}