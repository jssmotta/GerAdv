// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class UFWriterTests
{
    private readonly Mock<IFUFFactory> _mockUFFactory;
    private readonly Mock<FUF> _mockFUF;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly UFWriter _ufWriter;
    public UFWriterTests()
    {
        _mockUFFactory = new Mock<IFUFFactory>();
        _mockFUF = new Mock<FUF>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _ufWriter = new UFWriter(_mockUFFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var uf = CreateValidUFModel();
        uf.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockUFFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFUF.Object);
        _mockFUF.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _ufWriter.WriteAsync(uf, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFUF.Object);
        _mockUFFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockUFFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFUF.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var uf = CreateValidUFModel();
        uf.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockUFFactory.Setup(x => x.CreateFromIdAsync(uf.Id, _mockConnection.Object)).ReturnsAsync(_mockFUF.Object);
        _mockFUF.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _ufWriter.WriteAsync(uf, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFUF.Object);
        _mockUFFactory.Verify(x => x.CreateFromIdAsync(uf.Id, _mockConnection.Object), Times.Once);
        _mockUFFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFUF.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var uf = CreateValidUFModel();
        var auditorQuem = 99;
        _mockUFFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFUF.Object);
        _mockFUF.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _ufWriter.WriteAsync(uf, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFUF.Object);
        _mockFUF.VerifySet(x => x.FDDD = uf.DDD, Times.Once);
        _mockFUF.VerifySet(x => x.FID = uf.IdUF, Times.Once);
        _mockFUF.VerifySet(x => x.FPais = uf.Pais, Times.Once);
        _mockFUF.VerifySet(x => x.FTop = uf.Top, Times.Once);
        _mockFUF.VerifySet(x => x.FDescricao = uf.Descricao, Times.Once);
        _mockFUF.VerifySet(x => x.FGUID = uf.GUID, Times.Once);
        _mockFUF.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var uf = CreateValidUFModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockUFFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _ufWriter.WriteAsync(uf, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var uf = CreateValidUFModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockUFFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFUF.Object);
        _mockFUF.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _ufWriter.WriteAsync(uf, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var ufResponse = new UFResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockUFFactory.Setup(x => x.DeleteAsync(operadorId, ufResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _ufWriter.Delete(ufResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockUFFactory.Verify(x => x.DeleteAsync(operadorId, ufResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var ufResponse = new UFResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockUFFactory.Setup(x => x.DeleteAsync(operadorId, ufResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _ufWriter.Delete(ufResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var ufResponse = new UFResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockUFFactory.Setup(x => x.DeleteAsync(operadorId, ufResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _ufWriter.Delete(ufResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new UFWriter(_mockUFFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new UFWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.UF CreateValidUFModel()
    {
        return new Models.UF
        {
            Id = 0,
            DDD = "AAAAAAAA",
            IdUF = "SP",
            Pais = 1,
            Top = false,
            Descricao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            GUID = Guid.NewGuid().ToString()
        };
    }
#endregion
}