// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class PreClientesWriterTests
{
    private readonly Mock<IFPreClientesFactory> _mockPreClientesFactory;
    private readonly Mock<FPreClientes> _mockFPreClientes;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly PreClientesWriter _preclientesWriter;
    public PreClientesWriterTests()
    {
        _mockPreClientesFactory = new Mock<IFPreClientesFactory>();
        _mockFPreClientes = new Mock<FPreClientes>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _preclientesWriter = new PreClientesWriter(_mockPreClientesFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var preclientes = CreateValidPreClientesModel();
        preclientes.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockPreClientesFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFPreClientes.Object);
        _mockFPreClientes.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _preclientesWriter.WriteAsync(preclientes, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFPreClientes.Object);
        _mockPreClientesFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockPreClientesFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFPreClientes.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var preclientes = CreateValidPreClientesModel();
        preclientes.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockPreClientesFactory.Setup(x => x.CreateFromIdAsync(preclientes.Id, _mockConnection.Object)).ReturnsAsync(_mockFPreClientes.Object);
        _mockFPreClientes.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _preclientesWriter.WriteAsync(preclientes, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFPreClientes.Object);
        _mockPreClientesFactory.Verify(x => x.CreateFromIdAsync(preclientes.Id, _mockConnection.Object), Times.Once);
        _mockPreClientesFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFPreClientes.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var preclientes = CreateValidPreClientesModel();
        var auditorQuem = 99;
        _mockPreClientesFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFPreClientes.Object);
        _mockFPreClientes.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _preclientesWriter.WriteAsync(preclientes, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFPreClientes.Object);
        _mockFPreClientes.VerifySet(x => x.FInativo = preclientes.Inativo, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FQuemIndicou = preclientes.QuemIndicou, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FNome = preclientes.Nome, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FAdv = preclientes.Adv, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FIDRep = preclientes.IDRep, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FJuridica = preclientes.Juridica, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FNomeFantasia = preclientes.NomeFantasia, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FClass = preclientes.Class, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FTipo = preclientes.Tipo, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FDtNasc = preclientes.DtNasc.ToString(), Times.Once);
        _mockFPreClientes.VerifySet(x => x.FInscEst = preclientes.InscEst, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FQualificacao = preclientes.Qualificacao, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FSexo = preclientes.Sexo, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FIdade = preclientes.Idade, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FCNPJ = It.IsAny<string>(), Times.Once); // CNPJ é limpo pelo ClearInputCnpj()
        _mockFPreClientes.VerifySet(x => x.FCPF = It.IsAny<string>(), Times.Once); // CPF é limpo pelo ClearInputCpf()
        _mockFPreClientes.VerifySet(x => x.FRG = preclientes.RG, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FTipoCaptacao = preclientes.TipoCaptacao, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FObservacao = preclientes.Observacao, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FEndereco = preclientes.Endereco, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FBairro = preclientes.Bairro, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FCidade = preclientes.Cidade, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FCEP = It.IsAny<string>(), Times.Once); // CEP é limpo pelo ClearInputCep()
        _mockFPreClientes.VerifySet(x => x.FFax = preclientes.Fax, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FFone = preclientes.Fone, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FData = preclientes.Data, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FHomePage = preclientes.HomePage, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FEMail = preclientes.EMail, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FAssistido = preclientes.Assistido, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FAssRG = preclientes.AssRG, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FAssCPF = preclientes.AssCPF, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FAssEndereco = preclientes.AssEndereco, Times.Once);
        _mockFPreClientes.VerifySet(x => x.FCNH = preclientes.CNH, Times.Once);
        _mockFPreClientes.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithNullDtNasc_ShouldNotSetFDtNasc()
    {
        // Arrange
        var preclientes = CreateValidPreClientesModel();
        preclientes.DtNasc = null;
        var auditorQuem = 123;
        _mockPreClientesFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFPreClientes.Object);
        _mockFPreClientes.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _preclientesWriter.WriteAsync(preclientes, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFPreClientes.VerifySet(x => x.FDtNasc = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var preclientes = CreateValidPreClientesModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockPreClientesFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _preclientesWriter.WriteAsync(preclientes, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var preclientes = CreateValidPreClientesModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockPreClientesFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFPreClientes.Object);
        _mockFPreClientes.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _preclientesWriter.WriteAsync(preclientes, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var preclientesResponse = new PreClientesResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockPreClientesFactory.Setup(x => x.DeleteAsync(operadorId, preclientesResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _preclientesWriter.Delete(preclientesResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockPreClientesFactory.Verify(x => x.DeleteAsync(operadorId, preclientesResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var preclientesResponse = new PreClientesResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockPreClientesFactory.Setup(x => x.DeleteAsync(operadorId, preclientesResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _preclientesWriter.Delete(preclientesResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var preclientesResponse = new PreClientesResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockPreClientesFactory.Setup(x => x.DeleteAsync(operadorId, preclientesResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _preclientesWriter.Delete(preclientesResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new PreClientesWriter(_mockPreClientesFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new PreClientesWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.PreClientes CreateValidPreClientesModel()
    {
        return new Models.PreClientes
        {
            Id = 0,
            Inativo = false,
            QuemIndicou = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Nome = "João",
            Adv = 1,
            IDRep = 1,
            Juridica = false,
            NomeFantasia = "João",
            Class = "A",
            Tipo = false,
            DtNasc = "24/04/1975",
            InscEst = "AAAAAAAAAAAAA",
            Qualificacao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Sexo = false,
            Idade = 1,
            CNPJ = "93016944000138",
            CPF = "544.506.718-13",
            RG = "12.345.678-9",
            TipoCaptacao = false,
            Observacao = "Observação teste",
            Endereco = "Rua das Flores, 123",
            Bairro = "Centro",
            Cidade = 1,
            CEP = "01234-567",
            Fax = "(11) 88888-9999",
            Fone = "(11) 99999-9999",
            Data = "27/05/2022",
            HomePage = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            EMail = "test@email.com",
            Assistido = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            AssRG = "12.345.678-9",
            AssCPF = "544.506.718-13",
            AssEndereco = "Rua das Flores, 123",
            CNH = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
    }
#endregion
}