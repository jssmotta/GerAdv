// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// GridsDesktopHoook.tsx - Versão Refatorada
'use client';
import React, { useMemo, useCallback, useState, useEffect } from 'react';
import {
  Grid, 
  GridColumn, 
  GridSortChangeEvent, 
  GridColumnReorderEvent, 
} from '@progress/kendo-react-grid';
import { useRouter } from 'next/navigation';
import { useSystemContext } from '@/app/context/SystemContext';
import { IProSucumbencia } from '../../Interfaces/interface.ProSucumbencia';
import { CRUD_CONSTANTS, formatCurrency, formatDateBrowser } from '@/app/tools/crud';
import { SvgIcon } from '@progress/kendo-react-common';
import { pencilIcon, searchIcon } from '@progress/kendo-svg-icons';
import { useHiddenColumns } from '@/app/hooks/useHiddenColumns';
import { GridColumnMenu } from '@/app/components/Cruds/GridColumnMenu';
import { getExportColumns, useExportToExcel } from '@/app/hooks/useExportToExcel';
import { getExportColumnsPdf, useExportToPdf } from '@/app/hooks/useExportToPdf';
import { orderBy } from '@progress/kendo-data-query';
import { ExportButtons } from '@/app/components/Cruds/ExportButtons';
import { useProSucumbenciaGrid } from '../../Hooks/hookProSucumbenciaGrid';
interface ProSucumbenciaGridProps {
  data: IProSucumbencia[];
  onRowClick: (prosucumbencia: IProSucumbencia) => void;
  onDeleteClick: (e: any) => void;
  setSelectedId: (id: number | null) => void;
}
export const ProSucumbenciaGridDesktopComponent = React.memo(({
  data, 
  onRowClick, 
  onDeleteClick, 
  setSelectedId, 

}: ProSucumbenciaGridProps) => {

const router = useRouter();
const { systemContext } = useSystemContext();
const defaultHiddenColumns = [''];
// ===== ESTADO LOCAL PARA REORDENAÇÃO =====
const [columnsOrder, setColumnsOrder] = useState<string[]>(['data',
'nropastaprocessos',
'nroprocessoinstancia',
'nometipoorigemsucumbencia']);
// Carregar ordem salva do localStorage na inicialização
useEffect(() => {
  try {
    const savedOrder = localStorage.getItem(btoa('prosucumbencia-columns-order'));
    if (savedOrder) {
      const parsedOrder = JSON.parse(savedOrder);
      if (Array.isArray(parsedOrder) && parsedOrder.length > 0) {
        setColumnsOrder(parsedOrder);
      }
    }
  } catch (error) {
  console.warn('Não foi possível carregar a ordem das colunas:', error);
}
}, []);

// ===== USO DO HOOK CENTRALIZADO =====
const {
  filteredData, 
  sort, 
  handleSortChange, 
  page, 
  handlePageChange, 
  handleFilterChange, 
  handleRowClick: hookHandleRowClick, 
  RowNumberCell, 
  DeleteRow, 
} = useProSucumbenciaGrid({
data, 
onRowClick, 
onDeleteClick, 
setSelectedId, 
initialTake: 10, 
useCustomSort: true, 
});
// ===== ORDENAÇÃO CUSTOMIZADA PARA DESKTOP =====
const sortedData = useMemo(() => orderBy(filteredData, sort), [filteredData, sort]);
const handleSortChangeCustom = useCallback((event: GridSortChangeEvent) => {
  handleSortChange(event);
}, [handleSortChange]);
// ===== HANDLER PARA REORDENAÇÃO DE COLUNAS =====
const handleColumnReorder = useCallback((event: GridColumnReorderEvent) => {
  if (event.columns) {
    const newOrder = event.columns
    .filter((col: any) => col.field && columnsOrder.includes(col.field))
    .map((col: any) => col.field);
    setColumnsOrder(prevOrder => {
      if (newOrder.length > 0 && JSON.stringify(newOrder) !== JSON.stringify(prevOrder)) {
        // Salvar no localStorage
        try {
          localStorage.setItem(btoa('prosucumbencia-columns-order'), JSON.stringify(newOrder));
        } catch (error) {
        console.warn('Não foi possível salvar a ordem das colunas:', error);
      }
      return newOrder;
    }
    return prevOrder;
  });
}
}, []);
// ===== COMPONENTES ESPECÍFICOS DO DESKTOP =====
const EditRow = useCallback((e: any) => {
  return (
  <td>
    <span onClick={() => hookHandleRowClick(e)} title='Editar item'>
      <SvgIcon icon={pencilIcon} />
    </span>
  </td>
);
}, [hookHandleRowClick]);
// ===== DEFINIR COLUMN MAP BÁSICO (SEM DEPENDÊNCIA DO HOOK) =====
const basicColumnMap: Record<string, React.ReactElement> = useMemo(() => ({

  'data': (
  <GridColumn
  key='data'
  field='data'
  title='Data'
  sortable={true}
  filterable={true}
  />
  ), /* Track G.02 */
  'nropastaprocessos': (
  <GridColumn
  key='nropastaprocessos'

  field='nropastaprocessos'
  title='Processos'
  sortable={false} filterable={false}

  />
  ), /* Track G.04 */
  'nroprocessoinstancia': (
  <GridColumn
  key='nroprocessoinstancia'

  field='nroprocessoinstancia'
  title='Instancia'
  sortable={false} filterable={false}

  />
  ), /* Track G.04 */
  'nometipoorigemsucumbencia': (
  <GridColumn
  key='nometipoorigemsucumbencia'

  field='nometipoorigemsucumbencia'
  title='Tipo Origem Sucumbencia'
  sortable={false} filterable={false}

  />
  ), /* Track G.04 */
  // ← Colunas aqui
}), []);
// ===== CONFIGURAÇÃO DE COLUNAS BASE (PARA HIDDEN COLUMNS) =====
const baseGridColumns = useMemo(() => [
  <GridColumn format='{0:n0}' field='index' title='#' sortable={false} filterable={false} width='55px' cells={{ data: RowNumberCell }} />,
  <GridColumn format='{0:n0}' hidden={true}  field='id' title='Código' sortable={true} filterable={true} width='55px' />,
  ], [RowNumberCell, EditRow, DeleteRow]);
  // ===== GERENCIAMENTO DE COLUNAS OCULTAS (SEM INTERFERIR NA REORDENAÇÃO) =====
  const {
    columnsState, 
    initialized, 
    handleColumnsStateChange
  } = useHiddenColumns({
  gridColumns: baseGridColumns, 
  columnMap: basicColumnMap, // ← Usar basicColumnMap ao invés de columnMap
  systemContextId: systemContext?.Id, 
  tableName: 'prosucumbencia',
  defaultHiddenColumns
});
// ===== Helper para verificar se coluna está visível (APÓS INICIALIZAÇÃO DO HOOK) =====
const isColumnVisible = useCallback((field: string) => {
  if (!columnsState) {
    // ✅ CAMPOS QUE INICIAM HIDDEN POR PADRÃO
    return !defaultHiddenColumns.includes(field);
  }
  const columnState = columnsState.find(state => state.field === field);
  return columnState ? !columnState.hidden: true;
}, [columnsState, defaultHiddenColumns]);
// ===== FUNÇÃO PARA RESETAR ORDEM =====
const resetColumnsOrder = useCallback(() => {
  const defaultOrder = ['nome', 'precomeia', 'precointeira'];
  setColumnsOrder(defaultOrder);
  localStorage.removeItem(btoa('prosucumbencia-columns-order'));
}, []);
// ===== CONFIGURAÇÃO DE COLUNAS FINAIS (REORDENADAS + OCULTAS) =====
const finalGridColumns = useMemo(() => {
  // Montar array de colunas na ordem especificada
  const finalColumns = [
  <GridColumn format='{0:n0}' field='index' title='#' sortable={false} filterable={false} width='55px' cells={{ data: RowNumberCell }} />,
  <GridColumn format='{0:n0}' hidden={true}  field='id' title='Código' sortable={true} filterable={true} width='55px' />,

  // Colunas reordenáveis na ordem especificada
  ...columnsOrder.map(field => basicColumnMap[field]).filter(Boolean).map(column => {
    const props = (column as React.ReactElement<any>).props;
    return React.cloneElement(column, { ...props, hidden: !isColumnVisible(props.field) });
  }), 
  // Colunas fixas do final (SEM hidden: !isColumnVisible)
  <GridColumn
  field='id_edit_row'
  width={'55px'}
  title='Editar registro'
  sortable={false}
  filterable={false}
  cells={{ data: EditRow }}
  reorderable={false}
  />, 
  <GridColumn
  key='delete'
  field='id_delete_row'
  width={'55px'}
  title='Excluir registro'
  sortable={false}
  filterable={false}
  cells={{ data: DeleteRow }}
  reorderable={false}
  />
];

return finalColumns;
}, [columnsOrder, isColumnVisible, RowNumberCell, EditRow, DeleteRow, basicColumnMap]);
// ===== MENU DE COLUNAS SEPARADO (NÃO PASSADO PARA O GRID) =====
const columnMenuComponent = GridColumnMenu({
  columnsState, 
  onColumnsStateChange: handleColumnsStateChange
});
// ===== CONFIGURAÇÕES DE EXPORTAÇÃO =====
const exportColumns = getExportColumns(finalGridColumns, columnsState, ['id', 'index']);
const { exportToExcel } = useExportToExcel({
  filename: 'planilha-prosucumbencia',
  columns: exportColumns, 
  sheetName: 'ProSucumbencia'
});
const handleExportFiltered = useCallback(() => {
  exportToExcel(filteredData, {
    customFilename: `excel-ProSucumbencia-${new Date().toISOString().replace('T', '_').substring(0, 16).replace(':', '-')}`,
  });
}, [exportToExcel, filteredData]);
const exportColumnsPdf = getExportColumnsPdf(finalGridColumns, columnsState, ['id', 'index']);
const { exportToPdf } = useExportToPdf({
  filename: 'pdf-prosucumbencia',
  columns: exportColumnsPdf, 
  title: 'ProSucumbencia'
});
const handleExportFilteredPdf = useCallback(() => {
  exportToPdf(filteredData, {
    customFilename: `pdf-ProSucumbencia-${new Date().toISOString().replace('T', '_').substring(0, 16).replace(':', '-')}`,
  });
}, [exportToPdf, filteredData]);
// ===== DADOS PAGINADOS =====
const paginatedSortedData = useMemo(() => {
  if (!sortedData || sortedData.length === 0) {
    return [];
  }
  return sortedData.slice(page.skip, page.skip + page.take);
}, [sortedData, page.skip, page.take]);
// ===== RENDER =====
return (
<>
{initialized && (
  <Grid
  key={`prosucumbencia-grid-${JSON.stringify(columnsOrder)}-${JSON.stringify(columnsState)}`}
  columnMenu={columnMenuComponent}
  className='grid-desktop-crud grid-desktop-prosucumbencia'
  data={paginatedSortedData}
  skip={page.skip}
  take={page.take}
  total={sortedData.length}
  pageable={{
    pageSizes: Array.from(CRUD_CONSTANTS.PAGINATION.PAGE_SIZES), 
    buttonCount: CRUD_CONSTANTS.PAGINATION.BUTTON_COUNT, 
  }}
  onPageChange={handlePageChange}
  rowReorderable={true}
  sortable={true}
  sort={sort}
  onSortChange={handleSortChangeCustom}
  resizable={true}
  reorderable={true}
  onColumnReorder={handleColumnReorder}
  filterable={true}
  onFilterChange={handleFilterChange}
  onRowDoubleClick={(e) => hookHandleRowClick(e)}
>
{finalGridColumns}
</Grid>
)}
<div style={{ marginTop: '10px' }}>

</div>
</>
);
});