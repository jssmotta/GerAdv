// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// Tracking: Forms.tsx.txt
'use client';
import { IClientes } from '@/app/GerAdv_TS/Clientes/Interfaces/interface.Clientes';
import { useRouter } from 'next/navigation';
import React, { useEffect, useState, useRef } from 'react';
import { useSystemContext } from '@/app/context/SystemContext';
import { getParamFromUrl } from '@/app/tools/helpers';
import '@/app/styles/CrudFormsBase.css';
import '@/app/styles/CrudFormsMobile.css';
import '@/app/styles/CrudForms.css'; // [ INDEX_SIZE ]
import ButtonSalvarCrud from '@/app/components/Cruds/ButtonSalvarCrud';
import { useIsMobile } from '@/app/context/MobileContext';
import DeleteButton from '@/app/components/Cruds/DeleteButton';
import { ClientesApi } from '../../Apis/ApiClientes';
import { useValidationsClientes } from '../../Hooks/hookClientes';
import CidadeComboBox from '@/app/GerAdv_TS/Cidade/ComboBox/Cidade';
import RegimeTributacaoComboBox from '@/app/GerAdv_TS/RegimeTributacao/ComboBox/RegimeTributacao';
import EnquadramentoEmpresaComboBox from '@/app/GerAdv_TS/EnquadramentoEmpresa/ComboBox/EnquadramentoEmpresa';
import { CidadeApi } from '@/app/GerAdv_TS/Cidade/Apis/ApiCidade';
import { RegimeTributacaoApi } from '@/app/GerAdv_TS/RegimeTributacao/Apis/ApiRegimeTributacao';
import { EnquadramentoEmpresaApi } from '@/app/GerAdv_TS/EnquadramentoEmpresa/Apis/ApiEnquadramentoEmpresa';
import InputName from '@/app/components/Inputs/InputName';
import InputInput from '@/app/components/Inputs/InputInput'
import InputCheckbox from '@/app/components/Inputs/InputCheckbox';
import InputCnpj from '@/app/components/Inputs/InputCnpj'
import InputCpf from '@/app/components/Inputs/InputCpf'
import InputCep from '@/app/components/Inputs/InputCep'
interface ClientesFormProps {
  clientesData: IClientes;
  onChange: (e: any) => void;
  onSubmit: (e: React.FormEvent) => void;
  onClose: () => void;
  onError?: () => void;
  onReload?: () => void;
  onSuccess?: (registro?: any) => void;
}

export const ClientesForm: React.FC<ClientesFormProps> = ({
  clientesData, 
  onChange, 
  onSubmit, 
  onClose, 
  onError, 
  onReload, 
  onSuccess, 
}) => {
const router = useRouter();
const { systemContext } = useSystemContext();
const isMobile = useIsMobile();
const dadoApi = new ClientesApi(systemContext?.Uri ?? '', systemContext?.Token ?? '');
const [isSubmitting, setIsSubmitting] = useState(false);
const initialized = useRef(false);
const validationForm = useValidationsClientes();
const [nomeCidade, setNomeCidade] = useState('');
const cidadeApi = new CidadeApi(systemContext?.Uri ?? '', systemContext?.Token ?? '');
const [nomeRegimeTributacao, setNomeRegimeTributacao] = useState('');
const regimetributacaoApi = new RegimeTributacaoApi(systemContext?.Uri ?? '', systemContext?.Token ?? '');
const [nomeEnquadramentoEmpresa, setNomeEnquadramentoEmpresa] = useState('');
const enquadramentoempresaApi = new EnquadramentoEmpresaApi(systemContext?.Uri ?? '', systemContext?.Token ?? '');

if (getParamFromUrl('cidade') > 0) {
  if (clientesData.id === 0 && clientesData.cidade == 0) {
    cidadeApi
    .getById(getParamFromUrl('cidade'))
    .then((response) => {
      setNomeCidade(response.data.nome);
    })
    .catch((error) => {
      console.log('Error unexpected');
    });

    clientesData.cidade = getParamFromUrl('cidade');
  }
}

if (getParamFromUrl('regimetributacao') > 0) {
  if (clientesData.id === 0 && clientesData.regimetributacao == 0) {
    regimetributacaoApi
    .getById(getParamFromUrl('regimetributacao'))
    .then((response) => {
      setNomeRegimeTributacao(response.data.nome);
    })
    .catch((error) => {
      console.log('Error unexpected');
    });

    clientesData.regimetributacao = getParamFromUrl('regimetributacao');
  }
}

if (getParamFromUrl('enquadramentoempresa') > 0) {
  if (clientesData.id === 0 && clientesData.enquadramentoempresa == 0) {
    enquadramentoempresaApi
    .getById(getParamFromUrl('enquadramentoempresa'))
    .then((response) => {
      setNomeEnquadramentoEmpresa(response.data.nome);
    })
    .catch((error) => {
      console.log('Error unexpected');
    });

    clientesData.enquadramentoempresa = getParamFromUrl('enquadramentoempresa');
  }
}
const addValorCidade = (e: any) => {
  if (e?.id>0)
    onChange({ target: { name: 'cidade', value: e.id } });
  };
  const addValorRegimeTributacao = (e: any) => {
    if (e?.id>0)
      onChange({ target: { name: 'regimetributacao', value: e.id } });
    };
    const addValorEnquadramentoEmpresa = (e: any) => {
      if (e?.id>0)
        onChange({ target: { name: 'enquadramentoempresa', value: e.id } });
      };
      const onConfirm = (e: React.FormEvent) => {
        e.preventDefault();
        if (e.stopPropagation) e.stopPropagation();

          if (!isSubmitting) {
            setIsSubmitting(true);

            try {
              onSubmit(e);
            } catch (error) {
            console.log('Erro ao submeter formulário de Clientes:');
            setIsSubmitting(false);
            if (onError) onError();
            }
          }
        };
        const handleCancel = () => {
          if (onReload) {
            onReload(); // Recarrega os dados originais
          } else {
          onClose(); // Comportamento padrão se não há callback de recarga
        }
      };

      const handleDirectSave = () => {
        if (!isSubmitting) {
          setIsSubmitting(true);

          try {
            const syntheticEvent = {
              preventDefault: () => { }, 
              target: document.getElementById(`ClientesForm-${clientesData.id}`)
            } as unknown as React.FormEvent;

            onSubmit(syntheticEvent);
          } catch (error) {
          console.log('Erro ao salvar Clientes diretamente');
          setIsSubmitting(false);
          if (onError) onError();
          }
        }
      };
      useEffect(() => {
        const el = document.querySelector('.nameFormMobile');
        if (el) {
          el.textContent = clientesData?.id == 0 ? 'Editar Clientes' : 'Adicionar Clientes';
        }
      }, [clientesData.id]);
      return (
      <>
      {!isMobile ? <style jsx global>{`
        @media (max-width: 1366px) {
          html {
            zoom: 0.8 !important;
          }
        }
        `}</style> : null}

        <div className={isMobile ? 'form-container form-container-Clientes' : 'form-container form-container-Clientes'}>

          <form className='formInputCadInc' id={`ClientesForm-${clientesData.id}`} onSubmit={onConfirm}>
            {!isMobile && (
              <ButtonSalvarCrud isMobile={false} validationForm={validationForm} entity='Clientes' data={clientesData} isSubmitting={isSubmitting} onClose={onClose} formId={`ClientesForm-${clientesData.id}`} preventPropagation={true} onSave={handleDirectSave} onCancel={handleCancel} />
              )}
              <div className='grid-container'>

                <InputName
                type='text'
                id='nome'
                label='Nome'
                dataForm={clientesData}
                className='inputIncNome'
                name='nome'
                value={clientesData.nome}
                placeholder={`Informe Nome`}
                onChange={onChange}
                required
                />

                <InputInput
                type='text'
                maxLength={2048}
                id='empresa'
                label='Empresa'
                dataForm={clientesData}
                className='inputIncNome'
                name='empresa'
                value={clientesData.empresa}
                onChange={onChange}
                />


                <InputInput
                type='text'
                maxLength={255}
                id='icone'
                label='Icone'
                dataForm={clientesData}
                className='inputIncNome'
                name='icone'
                value={clientesData.icone}
                onChange={onChange}
                />


                <InputInput
                type='text'
                maxLength={80}
                id='nomemae'
                label='NomeMae'
                dataForm={clientesData}
                className='inputIncNome'
                name='nomemae'
                value={clientesData.nomemae}
                onChange={onChange}
                />


                <InputInput
                type='text'
                maxLength={2048}
                id='rgdataexp'
                label='RGDataExp'
                dataForm={clientesData}
                className='inputIncNome'
                name='rgdataexp'
                value={clientesData.rgdataexp}
                onChange={onChange}
                />

                <InputCheckbox dataForm={clientesData} label='Inativo' name='inativo' checked={clientesData.inativo} onChange={onChange} />

                <InputInput
                type='text'
                maxLength={80}
                id='quemindicou'
                label='QuemIndicou'
                dataForm={clientesData}
                className='inputIncNome'
                name='quemindicou'
                value={clientesData.quemindicou}
                onChange={onChange}
                />

                <InputCheckbox dataForm={clientesData} label='SendEMail' name='sendemail' checked={clientesData.sendemail} onChange={onChange} />

                <InputInput
                type='text'
                maxLength={2048}
                id='adv'
                label='Adv'
                dataForm={clientesData}
                className='inputIncNome'
                name='adv'
                value={clientesData.adv}
                onChange={onChange}
                />

              </div><div className='grid-container'>
                <InputInput
                type='text'
                maxLength={2048}
                id='idrep'
                label='IDRep'
                dataForm={clientesData}
                className='inputIncNome'
                name='idrep'
                value={clientesData.idrep}
                onChange={onChange}
                />

                <InputCheckbox dataForm={clientesData} label='Juridica' name='juridica' checked={clientesData.juridica} onChange={onChange} />

                <InputInput
                type='text'
                maxLength={80}
                id='nomefantasia'
                label='NomeFantasia'
                dataForm={clientesData}
                className='inputIncNome'
                name='nomefantasia'
                value={clientesData.nomefantasia}
                onChange={onChange}
                />


                <InputInput
                type='text'
                maxLength={1}
                id='class'
                label='Class'
                dataForm={clientesData}
                className='inputIncNome'
                name='class'
                value={clientesData.class}
                onChange={onChange}
                />

                <InputCheckbox dataForm={clientesData} label='Tipo' name='tipo' checked={clientesData.tipo} onChange={onChange} />

                <InputInput
                type='text'
                maxLength={2048}
                id='dtnasc'
                label='DtNasc'
                dataForm={clientesData}
                className='inputIncNome'
                name='dtnasc'
                value={clientesData.dtnasc}
                onChange={onChange}
                />


                <InputInput
                type='text'
                maxLength={15}
                id='inscest'
                label='InscEst'
                dataForm={clientesData}
                className='inputIncNome'
                name='inscest'
                value={clientesData.inscest}
                onChange={onChange}
                />


                <InputInput
                type='text'
                maxLength={100}
                id='qualificacao'
                label='Qualificacao'
                dataForm={clientesData}
                className='inputIncNome'
                name='qualificacao'
                value={clientesData.qualificacao}
                onChange={onChange}
                />

                <InputCheckbox dataForm={clientesData} label='Sexo' name='sexo' checked={clientesData.sexo} onChange={onChange} />
              </div><div className='grid-container'>
                <InputInput
                type='text'
                maxLength={2048}
                id='idade'
                label='Idade'
                dataForm={clientesData}
                className='inputIncNome'
                name='idade'
                value={clientesData.idade}
                onChange={onChange}
                />


                <InputCnpj
                type='text'
                id='cnpj'
                label='CNPJ'
                dataForm={clientesData}
                className='inputIncNome'
                name='cnpj'
                value={clientesData.cnpj}
                onChange={onChange}
                />


                <InputCpf
                type='text'
                id='cpf'
                label='CPF'
                dataForm={clientesData}
                className='inputIncNome'
                name='cpf'
                value={clientesData.cpf}
                onChange={onChange}
                />


                <InputInput
                type='text'
                maxLength={50}
                id='rg'
                label='RG'
                dataForm={clientesData}
                className='inputIncNome'
                name='rg'
                value={clientesData.rg}
                onChange={onChange}
                />

                <InputCheckbox dataForm={clientesData} label='TipoCaptacao' name='tipocaptacao' checked={clientesData.tipocaptacao} onChange={onChange} />

                <InputInput
                type='text'
                maxLength={2147483647}
                id='observacao'
                label='Observacao'
                dataForm={clientesData}
                className='inputIncNome'
                name='observacao'
                value={clientesData.observacao}
                onChange={onChange}
                />


                <InputInput
                type='text'
                maxLength={80}
                id='endereco'
                label='Endereco'
                dataForm={clientesData}
                className='inputIncNome'
                name='endereco'
                value={clientesData.endereco}
                onChange={onChange}
                />


                <InputInput
                type='text'
                maxLength={50}
                id='bairro'
                label='Bairro'
                dataForm={clientesData}
                className='inputIncNome'
                name='bairro'
                value={clientesData.bairro}
                onChange={onChange}
                />


                <CidadeComboBox
                name={'cidade'}
                dataForm={clientesData}
                value={clientesData.cidade}
                setValue={addValorCidade}
                label={'Cidade'}
                />
              </div><div className='grid-container'>
                <InputCep
                type='text'
                id='cep'
                label='CEP'
                dataForm={clientesData}
                className='inputIncNome'
                name='cep'
                value={clientesData.cep}
                onChange={onChange}
                />


                <InputInput
                type='text'
                maxLength={2147483647}
                id='fax'
                label='Fax'
                dataForm={clientesData}
                className='inputIncNome'
                name='fax'
                value={clientesData.fax}
                onChange={onChange}
                />


                <InputInput
                type='text'
                maxLength={2147483647}
                id='fone'
                label='Fone'
                dataForm={clientesData}
                className='inputIncNome'
                name='fone'
                value={clientesData.fone}
                onChange={onChange}
                />


                <InputInput
                type='text'
                maxLength={2048}
                id='data'
                label='Data'
                dataForm={clientesData}
                className='inputIncNome'
                name='data'
                value={clientesData.data}
                onChange={onChange}
                />


                <InputInput
                type='text'
                maxLength={60}
                id='homepage'
                label='HomePage'
                dataForm={clientesData}
                className='inputIncNome'
                name='homepage'
                value={clientesData.homepage}
                onChange={onChange}
                />


                <InputInput
                type='email'
                maxLength={255}
                id='email'
                label='EMail'
                dataForm={clientesData}
                className='inputIncNome'
                name='email'
                value={clientesData.email}
                onChange={onChange}
                />

                <InputCheckbox dataForm={clientesData} label='Obito' name='obito' checked={clientesData.obito} onChange={onChange} />

                <InputInput
                type='text'
                maxLength={80}
                id='nomepai'
                label='NomePai'
                dataForm={clientesData}
                className='inputIncNome'
                name='nomepai'
                value={clientesData.nomepai}
                onChange={onChange}
                />


                <InputInput
                type='text'
                maxLength={30}
                id='rgoexpeditor'
                label='RGOExpeditor'
                dataForm={clientesData}
                className='inputIncNome'
                name='rgoexpeditor'
                value={clientesData.rgoexpeditor}
                onChange={onChange}
                />

              </div><div className='grid-container'>
                <RegimeTributacaoComboBox
                name={'regimetributacao'}
                dataForm={clientesData}
                value={clientesData.regimetributacao}
                setValue={addValorRegimeTributacao}
                label={'Regime Tributacao'}
                />

                <EnquadramentoEmpresaComboBox
                name={'enquadramentoempresa'}
                dataForm={clientesData}
                value={clientesData.enquadramentoempresa}
                setValue={addValorEnquadramentoEmpresa}
                label={'Enquadramento Empresa'}
                />
                <InputCheckbox dataForm={clientesData} label='ReportECBOnly' name='reportecbonly' checked={clientesData.reportecbonly} onChange={onChange} />
                <InputCheckbox dataForm={clientesData} label='ProBono' name='probono' checked={clientesData.probono} onChange={onChange} />

                <InputInput
                type='text'
                maxLength={100}
                id='cnh'
                label='CNH'
                dataForm={clientesData}
                className='inputIncNome'
                name='cnh'
                value={clientesData.cnh}
                onChange={onChange}
                />


                <InputInput
                type='text'
                maxLength={120}
                id='pessoacontato'
                label='PessoaContato'
                dataForm={clientesData}
                className='inputIncNome'
                name='pessoacontato'
                value={clientesData.pessoacontato}
                onChange={onChange}
                />

              </div>
            </form>


            {isMobile && (
              <ButtonSalvarCrud isMobile={true} validationForm={validationForm} entity='Clientes' data={clientesData} isSubmitting={isSubmitting} onClose={onClose} formId={`ClientesForm-${clientesData.id}`} preventPropagation={true} onSave={handleDirectSave} onCancel={handleCancel} />
              )}
              <DeleteButton page={'/pages/clientes'} id={clientesData.id} closeModel={onClose} dadoApi={dadoApi} />
            </div>
            <div className='form-spacer'></div>
            </>
          );
        };