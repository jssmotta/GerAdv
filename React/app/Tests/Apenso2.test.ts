// 100% auto-generated by Source Genesys WebApi Front & Back Creator
                     // copyright © 2000-2025 Menphis - Sistemas Inteligentes
                     // This file is part of the Source Genesys project                     
                    // Tests.tsx.txt
import { renderHook, act, waitFor } from '@testing-library/react';
import { jest, describe, beforeEach, test, expect } from '@jest/globals';
import { useApenso2Form, useApenso2List, useValidationsApenso2 } from '../GerAdv_TS/Apenso2/Hooks/hookApenso2';
import { IApenso2 } from '../GerAdv_TS/Apenso2/Interfaces/interface.Apenso2';
import { IApenso2Service } from '../GerAdv_TS/Apenso2/Services/Apenso2.service';
import { Apenso2TestEmpty } from '../GerAdv_TS/Models/Apenso2';


// Mock do serviço
const mockApenso2Service: jest.Mocked<IApenso2Service> = {
  fetchApenso2ById: jest.fn(),
  saveApenso2: jest.fn(),
  
  getAll: jest.fn(),
  deleteApenso2: jest.fn(),
  validateApenso2: jest.fn(),
};

beforeAll(() => {
  jest.spyOn(console, 'log').mockImplementation(() => {});
  jest.spyOn(console, 'error').mockImplementation(() => {});
});

// Mock dos dados iniciais
const initialApenso2: IApenso2 = { ...Apenso2TestEmpty() };

describe('useApenso2Form', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('deve inicializar com dados corretos', () => {
    const { result } = renderHook(() => 
      useApenso2Form(initialApenso2, mockApenso2Service)
    );

    expect(result.current.data).toEqual(initialApenso2);
    expect(result.current.loading).toBe(false);
    expect(result.current.error).toBe(null);
  });

  test('deve atualizar dados com handleChange', () => {
    const { result } = renderHook(() => 
      useApenso2Form(initialApenso2, mockApenso2Service)
    );

    const mockEvent = {
      target: {
        name: 'campo',
        value: 'Novo Apenso2',
        type: 'text',
        checked: false
      }
    };

    act(() => {
      result.current.handleChange(mockEvent);
    });

    expect(result.current.data.campo).toBe('Novo Apenso2');
  });

   test('deve carregar Apenso2 por ID', async () => {
    const mockApenso2 = { ...initialApenso2, id: 1, campo: 'Apenso2 Teste' };
    mockApenso2Service.fetchApenso2ById.mockResolvedValue(mockApenso2);

    const { result } = renderHook(() => 
      useApenso2Form(initialApenso2, mockApenso2Service)
    );

    await act(async () => {
      await result.current.loadApenso2(1);
    });

    expect(mockApenso2Service.fetchApenso2ById).toHaveBeenCalledWith(1);
    expect(result.current.data).toEqual(mockApenso2);
    expect(result.current.loading).toBe(false);
  });

  test('deve lidar com erro ao carregar Apenso2', async () => {
    const errorMessage = 'Erro ao carregar Apenso2';
    mockApenso2Service.fetchApenso2ById.mockRejectedValue(new Error(errorMessage));

    const { result } = renderHook(() => 
      useApenso2Form(initialApenso2, mockApenso2Service)
    );

    await act(async () => {
      await result.current.loadApenso2(1);
    });

    expect(result.current.error).toBe(errorMessage);
    expect(result.current.loading).toBe(false);
  });

  test('deve resetar formulário', () => {
    const { result } = renderHook(() => 
      useApenso2Form(initialApenso2, mockApenso2Service)
    );

    // Primeiro, modifica os dados
    act(() => {
      result.current.setData({ ...initialApenso2, campo: 'Teste' });
    });

    // Depois reseta
    act(() => {
      result.current.resetForm();
    });

    expect(result.current.data).toEqual(initialApenso2);
    expect(result.current.error).toBe(null);
  });

  test('não deve carregar quando ID é 0', async () => {
    const { result } = renderHook(() => 
      useApenso2Form(initialApenso2, mockApenso2Service)
    );

    await act(async () => {
      await result.current.loadApenso2(0);
    });

    expect(mockApenso2Service.fetchApenso2ById).not.toHaveBeenCalled();
    expect(result.current.data).toEqual(initialApenso2);
  });
});

describe('useApenso2List', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('deve inicializar com estado correto', () => {
    const { result } = renderHook(() => 
      useApenso2List(mockApenso2Service)
    );

    expect(result.current.data).toEqual([]);
    expect(result.current.loading).toBe(false);
    expect(result.current.error).toBe(null);
  });

  test('deve buscar dados com fetchData', async () => {
    const mockData = [
      { ...initialApenso2, id: 1, campo: 'Apenso2 1' },
      { ...initialApenso2, id: 2, campo: 'Apenso2 2' }
    ];
    mockApenso2Service.getAll.mockResolvedValue(mockData);

    const { result } = renderHook(() => 
      useApenso2List(mockApenso2Service)
    );

    await act(async () => {
      await result.current.fetchData();
    });

    expect(mockApenso2Service.getAll).toHaveBeenCalled();
    expect(result.current.data).toEqual(mockData);
    expect(result.current.loading).toBe(false);
  });

  test('deve lidar com erro na busca', async () => {
    const errorMessage = 'Erro ao carregar lista';
    mockApenso2Service.getAll.mockRejectedValue(new Error(errorMessage));

    const { result } = renderHook(() => 
      useApenso2List(mockApenso2Service)
    );

    await act(async () => {
      await result.current.fetchData();
    });

    expect(result.current.error).toBe(errorMessage);
    expect(result.current.loading).toBe(false);
  });

  test('deve buscar dados com filtro', async () => {
    const mockData = [{ ...initialApenso2, id: 1, campo: 'Apenso2 Filtrado' }];
    const filtro = { campo: 'Apenso2' };
    mockApenso2Service.getAll.mockResolvedValue(mockData);

    const { result } = renderHook(() => 
      useApenso2List(mockApenso2Service)
    );

    await act(async () => {
      await result.current.fetchData(filtro);
    });

    expect(mockApenso2Service.getAll).toHaveBeenCalledWith(filtro);
    expect(result.current.data).toEqual(mockData);
  });
});

describe('useValidationsApenso2', () => {
  test('deve validar dados corretos', () => {
    const { result } = renderHook(() => useValidationsApenso2());

    const validData = { ...initialApenso2, campo: 'Apenso2 Válido' };
    const validation = result.current.validate(validData);

    expect(validation.isValid).toBe(true);
    expect(validation.message).toBe('');
  });


  

  

  test('deve invalidar dados nulos', () => {
    const { result } = renderHook(() => useValidationsApenso2());

    const validation = result.current.validate(null as any);

    expect(validation.isValid).toBe(false);
    expect(validation.message).toBe('Dados não informados.');
  });
});


// Teste de integração para múltiplos hooks
describe('Integração de hooks', () => {
  test('deve funcionar em conjunto', async () => {
    const mockData = [{ ...initialApenso2, id: 1, campo: 'Apenso2 Teste' }];
    mockApenso2Service.getAll.mockResolvedValue(mockData);
    

    // Usa múltiplos hooks
    const { result: listResult } = renderHook(() => 
      useApenso2List(mockApenso2Service)
    );
    
       

    const { result: validationResult } = renderHook(() => 
      useValidationsApenso2()
    );

    // Busca dados na lista
    await act(async () => {
      await listResult.current.fetchData();
    });

    
   

    // Valida dados
    const validation = validationResult.current.validate(mockData[0]);

    expect(listResult.current.data).toEqual(mockData);
    
  
    expect(validation.isValid).toBe(true);
  });
});