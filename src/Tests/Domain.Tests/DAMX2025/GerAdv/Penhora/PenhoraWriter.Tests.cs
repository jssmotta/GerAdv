// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class PenhoraWriterTests
{
    private readonly Mock<IFPenhoraFactory> _mockPenhoraFactory;
    private readonly Mock<FPenhora> _mockFPenhora;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly PenhoraWriter _penhoraWriter;
    public PenhoraWriterTests()
    {
        _mockPenhoraFactory = new Mock<IFPenhoraFactory>();
        _mockFPenhora = new Mock<FPenhora>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _penhoraWriter = new PenhoraWriter(_mockPenhoraFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var penhora = CreateValidPenhoraModel();
        penhora.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockPenhoraFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFPenhora.Object);
        _mockFPenhora.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _penhoraWriter.WriteAsync(penhora, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFPenhora.Object);
        _mockPenhoraFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockPenhoraFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFPenhora.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var penhora = CreateValidPenhoraModel();
        penhora.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockPenhoraFactory.Setup(x => x.CreateFromIdAsync(penhora.Id, _mockConnection.Object)).ReturnsAsync(_mockFPenhora.Object);
        _mockFPenhora.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _penhoraWriter.WriteAsync(penhora, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFPenhora.Object);
        _mockPenhoraFactory.Verify(x => x.CreateFromIdAsync(penhora.Id, _mockConnection.Object), Times.Once);
        _mockPenhoraFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFPenhora.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var penhora = CreateValidPenhoraModel();
        var auditorQuem = 99;
        _mockPenhoraFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFPenhora.Object);
        _mockFPenhora.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _penhoraWriter.WriteAsync(penhora, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFPenhora.Object);
        _mockFPenhora.VerifySet(x => x.FProcesso = penhora.Processo, Times.Once);
        _mockFPenhora.VerifySet(x => x.FNome = penhora.Nome, Times.Once);
        _mockFPenhora.VerifySet(x => x.FDescricao = penhora.Descricao, Times.Once);
        _mockFPenhora.VerifySet(x => x.FDataPenhora = penhora.DataPenhora.ToString(), Times.Once);
        _mockFPenhora.VerifySet(x => x.FPenhoraStatus = penhora.PenhoraStatus, Times.Once);
        _mockFPenhora.VerifySet(x => x.FMaster = penhora.Master, Times.Once);
        _mockFPenhora.VerifySet(x => x.FGUID = penhora.GUID, Times.Once);
        _mockFPenhora.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithNullDataPenhora_ShouldNotSetFDataPenhora()
    {
        // Arrange
        var penhora = CreateValidPenhoraModel();
        penhora.DataPenhora = null;
        var auditorQuem = 123;
        _mockPenhoraFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFPenhora.Object);
        _mockFPenhora.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _penhoraWriter.WriteAsync(penhora, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFPenhora.VerifySet(x => x.FDataPenhora = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var penhora = CreateValidPenhoraModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockPenhoraFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _penhoraWriter.WriteAsync(penhora, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var penhora = CreateValidPenhoraModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockPenhoraFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFPenhora.Object);
        _mockFPenhora.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _penhoraWriter.WriteAsync(penhora, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var penhoraResponse = new PenhoraResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockPenhoraFactory.Setup(x => x.DeleteAsync(operadorId, penhoraResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _penhoraWriter.Delete(penhoraResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockPenhoraFactory.Verify(x => x.DeleteAsync(operadorId, penhoraResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var penhoraResponse = new PenhoraResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockPenhoraFactory.Setup(x => x.DeleteAsync(operadorId, penhoraResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _penhoraWriter.Delete(penhoraResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var penhoraResponse = new PenhoraResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockPenhoraFactory.Setup(x => x.DeleteAsync(operadorId, penhoraResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _penhoraWriter.Delete(penhoraResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new PenhoraWriter(_mockPenhoraFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new PenhoraWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.Penhora CreateValidPenhoraModel()
    {
        return new Models.Penhora
        {
            Id = 0,
            Processo = 1,
            Nome = "João",
            Descricao = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            DataPenhora = "04:04",
            PenhoraStatus = 1,
            Master = 1,
            GUID = Guid.NewGuid().ToString()
        };
    }
#endregion
}