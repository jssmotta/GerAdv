// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBAdvogados - Nome da classe (ex: DBClientes)
/// Advogados - Nome da tabela (ex: Clientes)
/// adv - Prefixo dos campos (ex: cli)
/// advCodigo - Nome do campo código (ex: cliCodigo)
/// advNome - Nome do campo nome (ex: cliNome)
/// DBAdvogados.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBAdvogadosTests : IDisposable
{
    private readonly DBAdvogados _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBAdvogadosTests()
    {
        _instance = new DBAdvogados();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("advCodigo", typeof(int));
        dt.Columns.Add("advQuemCad", typeof(int));
        dt.Columns.Add("advDtCad", typeof(DateTime));
        dt.Columns.Add("advQuemAtu", typeof(int));
        dt.Columns.Add("advDtAtu", typeof(DateTime));
        dt.Columns.Add("advVisto", typeof(bool));
        dt.Columns.Add("advCargo", typeof(int));
        dt.Columns.Add("advEMailPro", typeof(string));
        dt.Columns.Add("advCPF", typeof(string));
        dt.Columns.Add("advNome", typeof(string));
        dt.Columns.Add("advRG", typeof(string));
        dt.Columns.Add("advCasa", typeof(string));
        dt.Columns.Add("advNomeMae", typeof(string));
        dt.Columns.Add("advEscritorio", typeof(int));
        dt.Columns.Add("advGUID", typeof(string));
        dt.Columns.Add("advEstagiario", typeof(string));
        dt.Columns.Add("advOAB", typeof(string));
        dt.Columns.Add("advNomeCompleto", typeof(string));
        dt.Columns.Add("advEndereco", typeof(string));
        dt.Columns.Add("advCidade", typeof(int));
        dt.Columns.Add("advCEP", typeof(string));
        dt.Columns.Add("advSexo", typeof(string));
        dt.Columns.Add("advBairro", typeof(string));
        dt.Columns.Add("advCTPSSerie", typeof(string));
        dt.Columns.Add("advCTPS", typeof(string));
        dt.Columns.Add("advFone", typeof(string));
        dt.Columns.Add("advFax", typeof(string));
        dt.Columns.Add("advComissao", typeof(int));
        dt.Columns.Add("advDtInicio", typeof(DateTime));
        dt.Columns.Add("advDtFim", typeof(DateTime));
        dt.Columns.Add("advDtNasc", typeof(DateTime));
        dt.Columns.Add("advSalario", typeof(decimal));
        dt.Columns.Add("advSecretaria", typeof(string));
        dt.Columns.Add("advTextoProcuracao", typeof(string));
        dt.Columns.Add("advEMail", typeof(string));
        dt.Columns.Add("advEspecializacao", typeof(string));
        dt.Columns.Add("advPasta", typeof(string));
        dt.Columns.Add("advObservacao", typeof(string));
        dt.Columns.Add("advContaBancaria", typeof(string));
        dt.Columns.Add("advParcTop", typeof(string));
        dt.Columns.Add("advClass", typeof(string));
        dt.Columns.Add("advTop", typeof(string));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("Advogados", DBAdvogados.PTabelaNome);
        Assert.Equal(" Advogados.* ", DBAdvogados.CamposSqlX);
        Assert.Equal("advCodigo", DBAdvogados.CampoCodigo);
        Assert.Equal("advNome", DBAdvogados.CampoNome);
        Assert.Equal("adv", DBAdvogados.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBAdvogados();
        Assert.Equal(0, instance.ID);
        Assert.Equal("Advogados", instance.ITabelaName());
        Assert.Equal("adv", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBAdvogados((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBAdvogados((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["advCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBAdvogados(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("Advogados", cadastro.ITabelaName());
        Assert.Equal("advCodigo", cadastro.ICampoCodigo());
        Assert.Equal("advNome", cadastro.ICampoNome());
        Assert.Equal("adv", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBAdvogados.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBAdvogados.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBAdvogados.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBAdvogados();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBAdvogados();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnTrue()
    {
        Assert.True(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cargo_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCargo = value;
        Assert.Equal(value, _instance.FCargo);
    }

    [Fact]
    public void Cargo_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAdvogados();
        Assert.Equal(0, instance.FCargo);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void EMailPro_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FEMailPro = input;
        Assert.Equal(expected, _instance.FEMailPro);
    }

    [Fact]
    public void EMailPro_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 255 + 10);
        _instance.FEMailPro = longString;
        Assert.True(_instance.FEMailPro.Length <= 255);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Nome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNome = input;
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void Nome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FNome = longString;
        Assert.True(_instance.FNome.Length <= 50);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void RG_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FRG = input;
        Assert.Equal(expected, _instance.FRG);
    }

    [Fact]
    public void RG_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 30 + 10);
        _instance.FRG = longString;
        Assert.True(_instance.FRG.Length <= 30);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Casa_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FCasa = value;
        Assert.Equal(value, _instance.FCasa);
    }

    [Fact]
    public void Casa_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBAdvogados();
        Assert.False(instance.FCasa);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void NomeMae_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNomeMae = input;
        Assert.Equal(expected, _instance.FNomeMae);
    }

    [Fact]
    public void NomeMae_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FNomeMae = longString;
        Assert.True(_instance.FNomeMae.Length <= 80);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Escritorio_ShouldAcceptIntegerValues(int value)
    {
        _instance.FEscritorio = value;
        Assert.Equal(value, _instance.FEscritorio);
    }

    [Fact]
    public void Escritorio_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAdvogados();
        Assert.Equal(0, instance.FEscritorio);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void GUID_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FGUID = input;
        Assert.Equal(expected, _instance.FGUID);
    }

    [Fact]
    public void GUID_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 150 + 10);
        _instance.FGUID = longString;
        Assert.True(_instance.FGUID.Length <= 150);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Estagiario_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FEstagiario = value;
        Assert.Equal(value, _instance.FEstagiario);
    }

    [Fact]
    public void Estagiario_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBAdvogados();
        Assert.False(instance.FEstagiario);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void OAB_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FOAB = input;
        Assert.Equal(expected, _instance.FOAB);
    }

    [Fact]
    public void OAB_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 12 + 10);
        _instance.FOAB = longString;
        Assert.True(_instance.FOAB.Length <= 12);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void NomeCompleto_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNomeCompleto = input;
        Assert.Equal(expected, _instance.FNomeCompleto);
    }

    [Fact]
    public void NomeCompleto_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FNomeCompleto = longString;
        Assert.True(_instance.FNomeCompleto.Length <= 50);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Endereco_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FEndereco = input;
        Assert.Equal(expected, _instance.FEndereco);
    }

    [Fact]
    public void Endereco_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FEndereco = longString;
        Assert.True(_instance.FEndereco.Length <= 80);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cidade_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCidade = value;
        Assert.Equal(value, _instance.FCidade);
    }

    [Fact]
    public void Cidade_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAdvogados();
        Assert.Equal(0, instance.FCidade);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Sexo_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FSexo = value;
        Assert.Equal(value, _instance.FSexo);
    }

    [Fact]
    public void Sexo_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBAdvogados();
        Assert.False(instance.FSexo);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Bairro_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FBairro = input;
        Assert.Equal(expected, _instance.FBairro);
    }

    [Fact]
    public void Bairro_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FBairro = longString;
        Assert.True(_instance.FBairro.Length <= 50);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void CTPSSerie_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FCTPSSerie = input;
        Assert.Equal(expected, _instance.FCTPSSerie);
    }

    [Fact]
    public void CTPSSerie_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 10 + 10);
        _instance.FCTPSSerie = longString;
        Assert.True(_instance.FCTPSSerie.Length <= 10);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void CTPS_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FCTPS = input;
        Assert.Equal(expected, _instance.FCTPS);
    }

    [Fact]
    public void CTPS_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 15 + 10);
        _instance.FCTPS = longString;
        Assert.True(_instance.FCTPS.Length <= 15);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Fone_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FFone = input;
        Assert.Equal(expected, _instance.FFone);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Fax_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FFax = input;
        Assert.Equal(expected, _instance.FFax);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Comissao_ShouldAcceptIntegerValues(int value)
    {
        _instance.FComissao = value;
        Assert.Equal(value, _instance.FComissao);
    }

    [Fact]
    public void Comissao_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAdvogados();
        Assert.Equal(0, instance.FComissao);
    }

    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void DtInicio_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FDtInicio = dateString;
        Assert.Equal(dateString, _instance.FDtInicio);
    }

    [Fact]
    public void DtInicio_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBAdvogados();
        Assert.Equal(string.Empty, instance.FDtInicio);
    }

    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void DtFim_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FDtFim = dateString;
        Assert.Equal(dateString, _instance.FDtFim);
    }

    [Fact]
    public void DtFim_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBAdvogados();
        Assert.Equal(string.Empty, instance.FDtFim);
    }

    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void DtNasc_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FDtNasc = dateString;
        Assert.Equal(dateString, _instance.FDtNasc);
    }

    [Fact]
    public void DtNasc_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBAdvogados();
        Assert.Equal(string.Empty, instance.FDtNasc);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Secretaria_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FSecretaria = input;
        Assert.Equal(expected, _instance.FSecretaria);
    }

    [Fact]
    public void Secretaria_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 20 + 10);
        _instance.FSecretaria = longString;
        Assert.True(_instance.FSecretaria.Length <= 20);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void TextoProcuracao_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FTextoProcuracao = input;
        Assert.Equal(expected, _instance.FTextoProcuracao);
    }

    [Fact]
    public void TextoProcuracao_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 200 + 10);
        _instance.FTextoProcuracao = longString;
        Assert.True(_instance.FTextoProcuracao.Length <= 200);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Especializacao_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FEspecializacao = input;
        Assert.Equal(expected, _instance.FEspecializacao);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Pasta_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FPasta = input;
        Assert.Equal(expected, _instance.FPasta);
    }

    [Fact]
    public void Pasta_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 200 + 10);
        _instance.FPasta = longString;
        Assert.True(_instance.FPasta.Length <= 200);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Observacao_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FObservacao = input;
        Assert.Equal(expected, _instance.FObservacao);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void ContaBancaria_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FContaBancaria = input;
        Assert.Equal(expected, _instance.FContaBancaria);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void ParcTop_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FParcTop = value;
        Assert.Equal(value, _instance.FParcTop);
    }

    [Fact]
    public void ParcTop_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBAdvogados();
        Assert.False(instance.FParcTop);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData(" A", "A")]
    public void Class_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FClass = input;
        Assert.Equal(expected, _instance.FClass);
    }

    [Fact]
    public void Class_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 1 + 10);
        _instance.FClass = longString;
        Assert.True(_instance.FClass.Length <= 1);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Top_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FTop = value;
        Assert.Equal(value, _instance.FTop);
    }

    [Fact]
    public void Top_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBAdvogados();
        Assert.False(instance.FTop);
    }

    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}