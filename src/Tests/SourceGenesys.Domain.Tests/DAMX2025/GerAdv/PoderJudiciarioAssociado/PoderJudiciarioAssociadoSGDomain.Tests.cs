// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBPoderJudiciarioAssociado - Nome da classe (ex: DBClientes)
/// PoderJudiciarioAssociado - Nome da tabela (ex: Clientes)
/// pja - Prefixo dos campos (ex: cli)
/// pjaCodigo - Nome do campo código (ex: cliCodigo)
///  - Nome do campo nome (ex: cliNome)
/// DBPoderJudiciarioAssociado.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBPoderJudiciarioAssociadoTests : IDisposable
{
    private readonly DBPoderJudiciarioAssociado _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBPoderJudiciarioAssociadoTests()
    {
        _instance = new DBPoderJudiciarioAssociado();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("pjaCodigo", typeof(int));
        dt.Columns.Add("pjaQuemCad", typeof(int));
        dt.Columns.Add("pjaDtCad", typeof(DateTime));
        dt.Columns.Add("pjaQuemAtu", typeof(int));
        dt.Columns.Add("pjaDtAtu", typeof(DateTime));
        dt.Columns.Add("pjaVisto", typeof(bool));
        dt.Columns.Add("pjaJustica", typeof(int));
        dt.Columns.Add("pjaJusticaNome", typeof(string));
        dt.Columns.Add("pjaArea", typeof(int));
        dt.Columns.Add("pjaAreaNome", typeof(string));
        dt.Columns.Add("pjaTribunal", typeof(int));
        dt.Columns.Add("pjaTribunalNome", typeof(string));
        dt.Columns.Add("pjaForo", typeof(int));
        dt.Columns.Add("pjaForoNome", typeof(string));
        dt.Columns.Add("pjaCidade", typeof(int));
        dt.Columns.Add("pjaSubDivisaoNome", typeof(string));
        dt.Columns.Add("pjaCidadeNome", typeof(string));
        dt.Columns.Add("pjaSubDivisao", typeof(int));
        dt.Columns.Add("pjaGUID", typeof(string));
        dt.Columns.Add("pjaTipo", typeof(int));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("PoderJudiciarioAssociado", DBPoderJudiciarioAssociado.PTabelaNome);
        Assert.Equal(" PoderJudiciarioAssociado.* ", DBPoderJudiciarioAssociado.CamposSqlX);
        Assert.Equal("pjaCodigo", DBPoderJudiciarioAssociado.CampoCodigo);
        Assert.Equal("", DBPoderJudiciarioAssociado.CampoNome);
        Assert.Equal("pja", DBPoderJudiciarioAssociado.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBPoderJudiciarioAssociado();
        Assert.Equal(0, instance.ID);
        Assert.Equal("PoderJudiciarioAssociado", instance.ITabelaName());
        Assert.Equal("pja", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBPoderJudiciarioAssociado((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBPoderJudiciarioAssociado((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["pjaCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBPoderJudiciarioAssociado(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("PoderJudiciarioAssociado", cadastro.ITabelaName());
        Assert.Equal("pjaCodigo", cadastro.ICampoCodigo());
        Assert.Equal("", cadastro.ICampoNome());
        Assert.Equal("pja", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBPoderJudiciarioAssociado.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBPoderJudiciarioAssociado.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBPoderJudiciarioAssociado.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBPoderJudiciarioAssociado();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBPoderJudiciarioAssociado();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnFalse()
    {
        Assert.False(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Justica_ShouldAcceptIntegerValues(int value)
    {
        _instance.FJustica = value;
        Assert.Equal(value, _instance.FJustica);
    }

    [Fact]
    public void Justica_DefaultValue_ShouldBeZero()
    {
        var instance = new DBPoderJudiciarioAssociado();
        Assert.Equal(0, instance.FJustica);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void JusticaNome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FJusticaNome = input;
        Assert.Equal(expected, _instance.FJusticaNome);
    }

    [Fact]
    public void JusticaNome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 255 + 10);
        _instance.FJusticaNome = longString;
        Assert.True(_instance.FJusticaNome.Length <= 255);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Area_ShouldAcceptIntegerValues(int value)
    {
        _instance.FArea = value;
        Assert.Equal(value, _instance.FArea);
    }

    [Fact]
    public void Area_DefaultValue_ShouldBeZero()
    {
        var instance = new DBPoderJudiciarioAssociado();
        Assert.Equal(0, instance.FArea);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void AreaNome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FAreaNome = input;
        Assert.Equal(expected, _instance.FAreaNome);
    }

    [Fact]
    public void AreaNome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 255 + 10);
        _instance.FAreaNome = longString;
        Assert.True(_instance.FAreaNome.Length <= 255);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Tribunal_ShouldAcceptIntegerValues(int value)
    {
        _instance.FTribunal = value;
        Assert.Equal(value, _instance.FTribunal);
    }

    [Fact]
    public void Tribunal_DefaultValue_ShouldBeZero()
    {
        var instance = new DBPoderJudiciarioAssociado();
        Assert.Equal(0, instance.FTribunal);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void TribunalNome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FTribunalNome = input;
        Assert.Equal(expected, _instance.FTribunalNome);
    }

    [Fact]
    public void TribunalNome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 255 + 10);
        _instance.FTribunalNome = longString;
        Assert.True(_instance.FTribunalNome.Length <= 255);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Foro_ShouldAcceptIntegerValues(int value)
    {
        _instance.FForo = value;
        Assert.Equal(value, _instance.FForo);
    }

    [Fact]
    public void Foro_DefaultValue_ShouldBeZero()
    {
        var instance = new DBPoderJudiciarioAssociado();
        Assert.Equal(0, instance.FForo);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void ForoNome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FForoNome = input;
        Assert.Equal(expected, _instance.FForoNome);
    }

    [Fact]
    public void ForoNome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 255 + 10);
        _instance.FForoNome = longString;
        Assert.True(_instance.FForoNome.Length <= 255);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cidade_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCidade = value;
        Assert.Equal(value, _instance.FCidade);
    }

    [Fact]
    public void Cidade_DefaultValue_ShouldBeZero()
    {
        var instance = new DBPoderJudiciarioAssociado();
        Assert.Equal(0, instance.FCidade);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void SubDivisaoNome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FSubDivisaoNome = input;
        Assert.Equal(expected, _instance.FSubDivisaoNome);
    }

    [Fact]
    public void SubDivisaoNome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 255 + 10);
        _instance.FSubDivisaoNome = longString;
        Assert.True(_instance.FSubDivisaoNome.Length <= 255);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void CidadeNome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FCidadeNome = input;
        Assert.Equal(expected, _instance.FCidadeNome);
    }

    [Fact]
    public void CidadeNome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 255 + 10);
        _instance.FCidadeNome = longString;
        Assert.True(_instance.FCidadeNome.Length <= 255);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void SubDivisao_ShouldAcceptIntegerValues(int value)
    {
        _instance.FSubDivisao = value;
        Assert.Equal(value, _instance.FSubDivisao);
    }

    [Fact]
    public void SubDivisao_DefaultValue_ShouldBeZero()
    {
        var instance = new DBPoderJudiciarioAssociado();
        Assert.Equal(0, instance.FSubDivisao);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void GUID_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FGUID = input;
        Assert.Equal(expected, _instance.FGUID);
    }

    [Fact]
    public void GUID_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FGUID = longString;
        Assert.True(_instance.FGUID.Length <= 100);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Tipo_ShouldAcceptIntegerValues(int value)
    {
        _instance.FTipo = value;
        Assert.Equal(value, _instance.FTipo);
    }

    [Fact]
    public void Tipo_DefaultValue_ShouldBeZero()
    {
        var instance = new DBPoderJudiciarioAssociado();
        Assert.Equal(0, instance.FTipo);
    }

    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}