// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class UFWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFUFFactory> _mockUFFactory;
    private readonly Mock<FUF> _mockFUF;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly UFWhere _ufWhere;
    public UFWhereTests()
    {
        _mockUFFactory = new Mock<IFUFFactory>();
        _mockFUF = new Mock<FUF>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _ufWhere = new UFWhere(_mockUFFactory.Object);
    }

    public void Dispose()
    {
        _mockUFFactory?.Reset();
        _mockFUF?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "AA")
        };
    }

    private void SetupMockFUF(string? DDD = "AAAAAAAA", string? ID = "AA", int? Pais = 1, bool? Top = false, string? Descricao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
    {
        _mockFUF.Setup(f => f.FDDD).Returns(DDD ?? string.Empty);
        _mockFUF.Setup(f => f.FID).Returns(ID ?? string.Empty);
        _mockFUF.Setup(f => f.FPais).Returns(Pais ?? 0);
        _mockFUF.Setup(f => f.FTop).Returns(Top ?? false);
        _mockFUF.Setup(f => f.FDescricao).Returns(Descricao ?? string.Empty);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFUFFactory>();
        // Act
        var ufWhere = new UFWhere(mockFactory.Object);
        // Assert
        ufWhere.Should().NotBeNull();
        ufWhere.Should().BeAssignableTo<IUFWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFUFFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new UFWhere(nullFactory));
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFUF();
        _mockUFFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFUF.Object);
        // Act
        var result = _ufWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockUFFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFUF();
        _mockUFFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFUF.Object);
        // Act
        var result = _ufWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockUFFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFUF();
        _mockUFFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFUF.Object);
        // Act
        var result = _ufWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockUFFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFUF();
        _mockUFFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFUF.Object);
        // Act
        _ufWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockUFFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFUFInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFUF.Setup(f => f.Dispose());
        SetupMockFUF();
        _mockUFFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFUF.Object);
        // Act
        _ufWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFUF.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockUFFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _ufWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "IdUF = @{DBUFDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBUFDicInfo.CampoNome}", "AA"),
        };
        SetupMockFUF();
        _mockUFFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFUF.Object);
        // Act
        _ufWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockUFFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBUFDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }
#region DateTime Tests
#endregion
#endregion
}