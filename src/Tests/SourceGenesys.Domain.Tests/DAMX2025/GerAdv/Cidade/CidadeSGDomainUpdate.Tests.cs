// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// ============================================
// ARQUIVO: DBUpdateTests.cs.txt (Principal)
// ============================================
namespace MenphisSI.GerAdv.Tests;
public class DBCidadeUpdate : IDisposable
{
    private readonly DBCidade _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBCidadeUpdate()
    {
        _instance = new DBCidade();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void DefaultConstructor_ShouldCreateInstance_WithDefaultValues()
    {
        // Act
        var cidade = new DBCidade();
        // Assert
        cidade.Should().NotBeNull();
        cidade.ITabelaName().Should().Be("Cidade");
        cidade.ID.Should().Be(0);
    }

    [Fact]
    public void AllProperties_WithValidValues_ShouldSetCorrectly()
    {
        // Arrange
        var cidade = new DBCidade
        {
            FDDD = "AAAAAAAAAA",
            FNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FSigla = "AAAAAAAAAA",
            FGUID = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        };
        // Assert - All properties should be set cidade.FDDD.Should().Be( "AAAAAAAAAA");
        cidade.FNome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        cidade.FSigla.Should().Be("AAAAAAAAAA");
        cidade.FGUID.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public void StringProperties_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var cidade = new DBCidade();
        var longString = new string ('X', 300);
        cidade.FDDD = longString; // MAX: 10
        cidade.FNome = longString; // MAX: 40
        cidade.FSigla = longString; // MAX: 10
        cidade.FGUID = longString; // MAX: 100
        // Assert - All properties should be set cidade.FDDD.Should().HaveLength(10);
        cidade.FNome.Should().HaveLength(40);
        cidade.FSigla.Should().HaveLength(10);
        cidade.FGUID.Should().HaveLength(100);
    }

    [Theory]
    [InlineData("AAAAAAAA")]
    [InlineData("BBBBBBB")]
    [InlineData("CCCCCCCCc")]
    public void FDDD_Property_ShouldAcceptValidNames(string DDD)
    {
        // Arrange
        var cidade = new DBCidade
        {
            // Act
            FDDD = DDD
        };
        // Assert
        cidade.FDDD.Should().Be(DDD);
    }

    [Fact]
    public void FDDD_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var cidade = new DBCidade
        {
            // Act
            FDDD = null
        };
        // Assert
        cidade.FDDD.Should().Be(string.Empty);
    }

    [Fact]
    public void FDDD_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var cidade = new DBCidade();
        var longName = new string ('A', 10 + 10); // Exceeds 10 character limit
        // Act
        cidade.FDDD = longName;
        // Assert
        cidade.FDDD.Should().HaveLength(10);
    }

    [Fact]
    public void FDDD_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FDDD = null;
        // Act
        var result = _instance.FDDD;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FDDD_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FDDD = expectedValue;
        // Act
        var result = _instance.FDDD;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FDDD_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBCidade).GetField("pFldFDDD", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FDDD = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FDDD);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FDDD_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBCidade).GetField("pFldFDDD", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FDDD = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FDDD);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FDDD_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBCidade).GetField("pFldFDDD", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAA  ";
        var expectedValue = "AAAAAAAA";
        // Act
        _instance.FDDD = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FDDD);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FDDD_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBCidade).GetField("pFldFDDD", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FDDD = value;
        // Act
        _instance.FDDD = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FDDD_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBCidade).GetField("pFldFDDD", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FDDD = "Original Value";
        // Act
        _instance.FDDD = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FDDD_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBCidade).GetField("pFldFDDD", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FDDD = "First Value";
        // Act
        _instance.FDDD = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FDDD_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBCidade).GetField("pFldFDDD", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FDDD = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FDDD);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAA", "AAAAAAAA")]
    [InlineData("  BBBBBBB  ", "BBBBBBB")]
    [InlineData("CCCCCCCCc", "CCCCCCCCc")]
    public void FDDD_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FDDD = input;
        // Assert
        Assert.Equal(expected, _instance.FDDD);
    }

    [Fact]
    public void FDDD_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBCidade).GetField("pFldFDDD", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FDDD = null;
        // Act
        _instance.FDDD = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FDDD_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBCidade).GetField("pFldFDDD", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FDDD = "Existing Value";
        // Act
        _instance.FDDD = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNome_Property_ShouldAcceptValidNames(string Nome)
    {
        // Arrange
        var cidade = new DBCidade
        {
            // Act
            FNome = Nome
        };
        // Assert
        cidade.FNome.Should().Be(Nome);
    }

    [Fact]
    public void FNome_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var cidade = new DBCidade
        {
            // Act
            FNome = null
        };
        // Assert
        cidade.FNome.Should().Be(string.Empty);
    }

    [Fact]
    public void SqlWhereConstructor_WithNullConnection_ShouldNotThrow()
    {
        // Arrange
        var sqlWhere = "cidCodigo = 1";
        // Act & Assert
        var Cidade = new DBCidade(sqlWhere, null);
        Cidade.Should().NotBeNull();
    }

    [Fact]
    public void ParameterizedConstructor_WithNullConnection_ShouldReturnEarly()
    {
        // Arrange
        var parameters = new List<SqlParameter>();
        var nome = "TesteNome";
        // Act
        var cidade = new DBCidade(parameters, nome, null);
        // Assert
        cidade.Should().NotBeNull();
        cidade.ID.Should().Be(0); // Should not have loaded any data
    }

    [Fact]
    public void FNome_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var cidade = new DBCidade();
        var longName = new string ('A', 40 + 10); // Exceeds 40 character limit
        // Act
        cidade.FNome = longName;
        // Assert
        cidade.FNome.Should().HaveLength(40);
    }

    [Fact]
    public void FNome_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FNome = null;
        // Act
        var result = _instance.FNome;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FNome_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FNome = expectedValue;
        // Act
        var result = _instance.FNome;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FNome_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBCidade).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNome = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBCidade).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNome = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBCidade).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FNome = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBCidade).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FNome = value;
        // Act
        _instance.FNome = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBCidade).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = "Original Value";
        // Act
        _instance.FNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBCidade).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = "First Value";
        // Act
        _instance.FNome = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBCidade).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNome = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNome_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FNome = input;
        // Assert
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void FNome_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBCidade).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = null;
        // Act
        _instance.FNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBCidade).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = "Existing Value";
        // Act
        _instance.FNome = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAA")]
    [InlineData("BBBBBBB")]
    [InlineData("CCCCCCCCc")]
    public void FSigla_Property_ShouldAcceptValidNames(string Sigla)
    {
        // Arrange
        var cidade = new DBCidade
        {
            // Act
            FSigla = Sigla
        };
        // Assert
        cidade.FSigla.Should().Be(Sigla);
    }

    [Fact]
    public void FSigla_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var cidade = new DBCidade
        {
            // Act
            FSigla = null
        };
        // Assert
        cidade.FSigla.Should().Be(string.Empty);
    }

    [Fact]
    public void FSigla_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var cidade = new DBCidade();
        var longName = new string ('A', 10 + 10); // Exceeds 10 character limit
        // Act
        cidade.FSigla = longName;
        // Assert
        cidade.FSigla.Should().HaveLength(10);
    }

    [Fact]
    public void FSigla_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FSigla = null;
        // Act
        var result = _instance.FSigla;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FSigla_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FSigla = expectedValue;
        // Act
        var result = _instance.FSigla;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FSigla_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBCidade).GetField("pFldFSigla", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FSigla = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FSigla);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSigla_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBCidade).GetField("pFldFSigla", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FSigla = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FSigla);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FSigla_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBCidade).GetField("pFldFSigla", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAA  ";
        var expectedValue = "AAAAAAAA";
        // Act
        _instance.FSigla = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FSigla);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSigla_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBCidade).GetField("pFldFSigla", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FSigla = value;
        // Act
        _instance.FSigla = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSigla_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBCidade).GetField("pFldFSigla", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSigla = "Original Value";
        // Act
        _instance.FSigla = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSigla_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBCidade).GetField("pFldFSigla", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSigla = "First Value";
        // Act
        _instance.FSigla = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSigla_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBCidade).GetField("pFldFSigla", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FSigla = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FSigla);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAA", "AAAAAAAA")]
    [InlineData("  BBBBBBB  ", "BBBBBBB")]
    [InlineData("CCCCCCCCc", "CCCCCCCCc")]
    public void FSigla_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FSigla = input;
        // Assert
        Assert.Equal(expected, _instance.FSigla);
    }

    [Fact]
    public void FSigla_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBCidade).GetField("pFldFSigla", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSigla = null;
        // Act
        _instance.FSigla = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSigla_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBCidade).GetField("pFldFSigla", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSigla = "Existing Value";
        // Act
        _instance.FSigla = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

#region Testes de GUID
    [Fact]
    public void GUID_DefaultValue_ShouldBeEmpty()
    {
        Assert.Equal(string.Empty, _instance.FGUID);
    }

    [Fact]
    public void GUID_SetValidGUID_ShouldStore()
    {
        var guid = Guid.NewGuid().ToString();
        _instance.FGUID = guid;
        Assert.Equal(guid, _instance.FGUID);
    }

#endregion
    [Fact]
    public void TabelaNome_Property_ShouldReturnCorrectTableName()
    {
        // Arrange
        var cidade = new DBCidade();
        // Act & Assert
        cidade.TabelaNome.Should().Be("Cidade");
    }

    public virtual void Dispose()
    {
    // Cleanup resources if needed
    }
}