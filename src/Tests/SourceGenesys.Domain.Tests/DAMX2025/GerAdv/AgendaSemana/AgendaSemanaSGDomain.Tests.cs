// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBAgendaSemana - Nome da classe (ex: DBClientes)
/// AgendaSemana - Nome da tabela (ex: Clientes)
/// xxx - Prefixo dos campos (ex: cli)
/// xxxCodigo - Nome do campo código (ex: cliCodigo)
/// xxxParaNome - Nome do campo nome (ex: cliNome)
/// DBAgendaSemana.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBAgendaSemanaTests : IDisposable
{
    private readonly DBAgendaSemana _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBAgendaSemanaTests()
    {
        _instance = new DBAgendaSemana();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("xxxCodigo", typeof(int));
        dt.Columns.Add("xxxParaNome", typeof(string));
        dt.Columns.Add("xxxData", typeof(string));
        dt.Columns.Add("xxxFuncionario", typeof(int));
        dt.Columns.Add("xxxAdvogado", typeof(int));
        dt.Columns.Add("xxxHora", typeof(string));
        dt.Columns.Add("xxxTipoCompromisso", typeof(int));
        dt.Columns.Add("xxxCompromisso", typeof(string));
        dt.Columns.Add("xxxConcluido", typeof(string));
        dt.Columns.Add("xxxLiberado", typeof(string));
        dt.Columns.Add("xxxImportante", typeof(string));
        dt.Columns.Add("xxxHoraFinal", typeof(string));
        dt.Columns.Add("xxxNome", typeof(string));
        dt.Columns.Add("xxxCliente", typeof(int));
        dt.Columns.Add("xxxNomeCliente", typeof(string));
        dt.Columns.Add("xxxTipo", typeof(string));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("AgendaSemana", DBAgendaSemana.PTabelaNome);
        Assert.Equal(" AgendaSemana.* ", DBAgendaSemana.CamposSqlX);
        Assert.Equal("xxxCodigo", DBAgendaSemana.CampoCodigo);
        Assert.Equal("xxxParaNome", DBAgendaSemana.CampoNome);
        Assert.Equal("xxx", DBAgendaSemana.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBAgendaSemana();
        Assert.Equal(0, instance.ID);
        Assert.Equal("AgendaSemana", instance.ITabelaName());
        Assert.Equal("xxx", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBAgendaSemana((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBAgendaSemana((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["xxxCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBAgendaSemana(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBAgendaSemana.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBAgendaSemana.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBAgendaSemana.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBAgendaSemana();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBAgendaSemana();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnFalse()
    {
        Assert.False(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnTrue()
    {
        Assert.True(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnTrue()
    {
        Assert.True(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void ParaNome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FParaNome = input;
        Assert.Equal(expected, _instance.FParaNome);
    }

    [Fact]
    public void ParaNome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 60 + 10);
        _instance.FParaNome = longString;
        Assert.True(_instance.FParaNome.Length <= 60);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Funcionario_ShouldAcceptIntegerValues(int value)
    {
        _instance.FFuncionario = value;
        Assert.Equal(value, _instance.FFuncionario);
    }

    [Fact]
    public void Funcionario_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgendaSemana();
        Assert.Equal(0, instance.FFuncionario);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Advogado_ShouldAcceptIntegerValues(int value)
    {
        _instance.FAdvogado = value;
        Assert.Equal(value, _instance.FAdvogado);
    }

    [Fact]
    public void Advogado_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgendaSemana();
        Assert.Equal(0, instance.FAdvogado);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void TipoCompromisso_ShouldAcceptIntegerValues(int value)
    {
        _instance.FTipoCompromisso = value;
        Assert.Equal(value, _instance.FTipoCompromisso);
    }

    [Fact]
    public void TipoCompromisso_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgendaSemana();
        Assert.Equal(0, instance.FTipoCompromisso);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Compromisso_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FCompromisso = input;
        Assert.Equal(expected, _instance.FCompromisso);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Concluido_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FConcluido = value;
        Assert.Equal(value, _instance.FConcluido);
    }

    [Fact]
    public void Concluido_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBAgendaSemana();
        Assert.False(instance.FConcluido);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Liberado_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FLiberado = value;
        Assert.Equal(value, _instance.FLiberado);
    }

    [Fact]
    public void Liberado_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBAgendaSemana();
        Assert.False(instance.FLiberado);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Importante_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FImportante = value;
        Assert.Equal(value, _instance.FImportante);
    }

    [Fact]
    public void Importante_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBAgendaSemana();
        Assert.False(instance.FImportante);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Nome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNome = input;
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void Nome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FNome = longString;
        Assert.True(_instance.FNome.Length <= 80);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cliente_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCliente = value;
        Assert.Equal(value, _instance.FCliente);
    }

    [Fact]
    public void Cliente_DefaultValue_ShouldBeZero()
    {
        var instance = new DBAgendaSemana();
        Assert.Equal(0, instance.FCliente);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void NomeCliente_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNomeCliente = input;
        Assert.Equal(expected, _instance.FNomeCliente);
    }

    [Fact]
    public void NomeCliente_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FNomeCliente = longString;
        Assert.True(_instance.FNomeCliente.Length <= 80);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Tipo_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FTipo = input;
        Assert.Equal(expected, _instance.FTipo);
    }

    [Fact]
    public void Tipo_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FTipo = longString;
        Assert.True(_instance.FTipo.Length <= 100);
    }

    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}