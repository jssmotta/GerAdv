// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class ProcessOutputEngineWriterTests
{
    private readonly Mock<IFProcessOutputEngineFactory> _mockProcessOutputEngineFactory;
    private readonly Mock<FProcessOutputEngine> _mockFProcessOutputEngine;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly ProcessOutputEngineWriter _processoutputengineWriter;
    public ProcessOutputEngineWriterTests()
    {
        _mockProcessOutputEngineFactory = new Mock<IFProcessOutputEngineFactory>();
        _mockFProcessOutputEngine = new Mock<FProcessOutputEngine>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _processoutputengineWriter = new ProcessOutputEngineWriter(_mockProcessOutputEngineFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var processoutputengine = CreateValidProcessOutputEngineModel();
        processoutputengine.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockProcessOutputEngineFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFProcessOutputEngine.Object);
        _mockFProcessOutputEngine.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _processoutputengineWriter.WriteAsync(processoutputengine, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFProcessOutputEngine.Object);
        _mockProcessOutputEngineFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockProcessOutputEngineFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFProcessOutputEngine.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var processoutputengine = CreateValidProcessOutputEngineModel();
        processoutputengine.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockProcessOutputEngineFactory.Setup(x => x.CreateFromIdAsync(processoutputengine.Id, _mockConnection.Object)).ReturnsAsync(_mockFProcessOutputEngine.Object);
        _mockFProcessOutputEngine.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _processoutputengineWriter.WriteAsync(processoutputengine, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFProcessOutputEngine.Object);
        _mockProcessOutputEngineFactory.Verify(x => x.CreateFromIdAsync(processoutputengine.Id, _mockConnection.Object), Times.Once);
        _mockProcessOutputEngineFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFProcessOutputEngine.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var processoutputengine = CreateValidProcessOutputEngineModel();
        var auditorQuem = 99;
        _mockProcessOutputEngineFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFProcessOutputEngine.Object);
        _mockFProcessOutputEngine.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _processoutputengineWriter.WriteAsync(processoutputengine, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFProcessOutputEngine.Object);
        _mockFProcessOutputEngine.VerifySet(x => x.FNome = processoutputengine.Nome, Times.Once);
        _mockFProcessOutputEngine.VerifySet(x => x.FDatabase = processoutputengine.Database, Times.Once);
        _mockFProcessOutputEngine.VerifySet(x => x.FTabela = processoutputengine.Tabela, Times.Once);
        _mockFProcessOutputEngine.VerifySet(x => x.FCampo = processoutputengine.Campo, Times.Once);
        _mockFProcessOutputEngine.VerifySet(x => x.FValor = processoutputengine.Valor, Times.Once);
        _mockFProcessOutputEngine.VerifySet(x => x.FOutput = processoutputengine.Output, Times.Once);
        _mockFProcessOutputEngine.VerifySet(x => x.FAdministrador = processoutputengine.Administrador, Times.Once);
        _mockFProcessOutputEngine.VerifySet(x => x.FOutputSource = processoutputengine.OutputSource, Times.Once);
        _mockFProcessOutputEngine.VerifySet(x => x.FDisabledItem = processoutputengine.DisabledItem, Times.Once);
        _mockFProcessOutputEngine.VerifySet(x => x.FIDModulo = processoutputengine.IDModulo, Times.Once);
        _mockFProcessOutputEngine.VerifySet(x => x.FIsOnlyProcesso = processoutputengine.IsOnlyProcesso, Times.Once);
        _mockFProcessOutputEngine.VerifySet(x => x.FMyID = processoutputengine.MyID, Times.Once);
        _mockFProcessOutputEngine.VerifySet(x => x.FGUID = processoutputengine.GUID, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var processoutputengine = CreateValidProcessOutputEngineModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockProcessOutputEngineFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _processoutputengineWriter.WriteAsync(processoutputengine, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var processoutputengine = CreateValidProcessOutputEngineModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockProcessOutputEngineFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFProcessOutputEngine.Object);
        _mockFProcessOutputEngine.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _processoutputengineWriter.WriteAsync(processoutputengine, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var processoutputengineResponse = new ProcessOutputEngineResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockProcessOutputEngineFactory.Setup(x => x.DeleteAsync(operadorId, processoutputengineResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _processoutputengineWriter.Delete(processoutputengineResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockProcessOutputEngineFactory.Verify(x => x.DeleteAsync(operadorId, processoutputengineResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var processoutputengineResponse = new ProcessOutputEngineResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockProcessOutputEngineFactory.Setup(x => x.DeleteAsync(operadorId, processoutputengineResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _processoutputengineWriter.Delete(processoutputengineResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var processoutputengineResponse = new ProcessOutputEngineResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockProcessOutputEngineFactory.Setup(x => x.DeleteAsync(operadorId, processoutputengineResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _processoutputengineWriter.Delete(processoutputengineResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new ProcessOutputEngineWriter(_mockProcessOutputEngineFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new ProcessOutputEngineWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.ProcessOutputEngine CreateValidProcessOutputEngineModel()
    {
        return new Models.ProcessOutputEngine
        {
            Id = 0,
            Nome = "João",
            Database = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Tabela = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Campo = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Valor = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Output = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Administrador = false,
            OutputSource = 1,
            DisabledItem = false,
            IDModulo = 1,
            IsOnlyProcesso = false,
            MyID = 1,
            GUID = Guid.NewGuid().ToString()
        };
    }
#endregion
}