// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IAlertasValidation
{
    Task<bool> ValidateReg(Models.Alertas reg, IAlertasService service, IOperadorReader operadorReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, IAlertasService service, IAlertasEnviadosService alertasenviadosService, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class AlertasValidation : IAlertasValidation
{
    public async Task<bool> CanDelete(int id, IAlertasService service, IAlertasEnviadosService alertasenviadosService, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        var alertasenviadosExists0 = await alertasenviadosService.Filter(new Filters.FilterAlertasEnviados { Alerta = id }, uri);
        if (alertasenviadosExists0 != null && alertasenviadosExists0.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Alertas Enviados associados a ele.");
        return true;
    }

    private bool ValidSizes(Models.Alertas reg)
    {
        if (reg.Nome != null && reg.Nome.Length > 2048)
            throw new SGValidationException($"Nome deve ter no máximo 2048 caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.Alertas reg, IAlertasService service, IOperadorReader operadorReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Nome))
            throw new SGValidationException("Nome é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.Data.IsEmpty())
            throw new SGValidationException("Data é obrigatório.");
        if (reg.Operador == 0)
            throw new SGValidationException("Operador é obrigatório.");
        // Operador
        {
            var regOperador = await operadorReader.Read(reg.Operador, oCnn);
            if (regOperador == null || regOperador.Id != reg.Operador)
            {
                throw new SGValidationException($"Operador não encontrado ({regOperador?.Id}).");
            }
        }

        return true;
    }
}