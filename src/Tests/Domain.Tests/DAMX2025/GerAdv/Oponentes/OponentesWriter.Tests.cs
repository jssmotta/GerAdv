// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class OponentesWriterTests
{
    private readonly Mock<IFOponentesFactory> _mockOponentesFactory;
    private readonly Mock<FOponentes> _mockFOponentes;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly OponentesWriter _oponentesWriter;
    public OponentesWriterTests()
    {
        _mockOponentesFactory = new Mock<IFOponentesFactory>();
        _mockFOponentes = new Mock<FOponentes>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _oponentesWriter = new OponentesWriter(_mockOponentesFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var oponentes = CreateValidOponentesModel();
        oponentes.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockOponentesFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFOponentes.Object);
        _mockFOponentes.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _oponentesWriter.WriteAsync(oponentes, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFOponentes.Object);
        _mockOponentesFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockOponentesFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFOponentes.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var oponentes = CreateValidOponentesModel();
        oponentes.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockOponentesFactory.Setup(x => x.CreateFromIdAsync(oponentes.Id, _mockConnection.Object)).ReturnsAsync(_mockFOponentes.Object);
        _mockFOponentes.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _oponentesWriter.WriteAsync(oponentes, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFOponentes.Object);
        _mockOponentesFactory.Verify(x => x.CreateFromIdAsync(oponentes.Id, _mockConnection.Object), Times.Once);
        _mockOponentesFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFOponentes.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var oponentes = CreateValidOponentesModel();
        var auditorQuem = 99;
        _mockOponentesFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFOponentes.Object);
        _mockFOponentes.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _oponentesWriter.WriteAsync(oponentes, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFOponentes.Object);
        _mockFOponentes.VerifySet(x => x.FEMPFuncao = oponentes.EMPFuncao, Times.Once);
        _mockFOponentes.VerifySet(x => x.FGUID = oponentes.GUID, Times.Once);
        _mockFOponentes.VerifySet(x => x.FCTPSNumero = oponentes.CTPSNumero, Times.Once);
        _mockFOponentes.VerifySet(x => x.FSite = oponentes.Site, Times.Once);
        _mockFOponentes.VerifySet(x => x.FCTPSSerie = oponentes.CTPSSerie, Times.Once);
        _mockFOponentes.VerifySet(x => x.FNome = oponentes.Nome, Times.Once);
        _mockFOponentes.VerifySet(x => x.FAdv = oponentes.Adv, Times.Once);
        _mockFOponentes.VerifySet(x => x.FEMPCliente = oponentes.EMPCliente, Times.Once);
        _mockFOponentes.VerifySet(x => x.FIDRep = oponentes.IDRep, Times.Once);
        _mockFOponentes.VerifySet(x => x.FPIS = oponentes.PIS, Times.Once);
        _mockFOponentes.VerifySet(x => x.FContato = oponentes.Contato, Times.Once);
        _mockFOponentes.VerifySet(x => x.FCNPJ = It.IsAny<string>(), Times.Once); // CNPJ é limpo pelo ClearInputCnpj()
        _mockFOponentes.VerifySet(x => x.FRG = oponentes.RG, Times.Once);
        _mockFOponentes.VerifySet(x => x.FJuridica = oponentes.Juridica, Times.Once);
        _mockFOponentes.VerifySet(x => x.FTipo = oponentes.Tipo, Times.Once);
        _mockFOponentes.VerifySet(x => x.FSexo = oponentes.Sexo, Times.Once);
        _mockFOponentes.VerifySet(x => x.FCPF = It.IsAny<string>(), Times.Once); // CPF é limpo pelo ClearInputCpf()
        _mockFOponentes.VerifySet(x => x.FEndereco = oponentes.Endereco, Times.Once);
        _mockFOponentes.VerifySet(x => x.FFone = oponentes.Fone, Times.Once);
        _mockFOponentes.VerifySet(x => x.FFax = oponentes.Fax, Times.Once);
        _mockFOponentes.VerifySet(x => x.FCidade = oponentes.Cidade, Times.Once);
        _mockFOponentes.VerifySet(x => x.FBairro = oponentes.Bairro, Times.Once);
        _mockFOponentes.VerifySet(x => x.FCEP = It.IsAny<string>(), Times.Once); // CEP é limpo pelo ClearInputCep()
        _mockFOponentes.VerifySet(x => x.FInscEst = oponentes.InscEst, Times.Once);
        _mockFOponentes.VerifySet(x => x.FObservacao = oponentes.Observacao, Times.Once);
        _mockFOponentes.VerifySet(x => x.FEMail = oponentes.EMail, Times.Once);
        _mockFOponentes.VerifySet(x => x.FClass = oponentes.Class, Times.Once);
        _mockFOponentes.VerifySet(x => x.FTop = oponentes.Top, Times.Once);
        _mockFOponentes.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var oponentes = CreateValidOponentesModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockOponentesFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _oponentesWriter.WriteAsync(oponentes, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var oponentes = CreateValidOponentesModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockOponentesFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFOponentes.Object);
        _mockFOponentes.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _oponentesWriter.WriteAsync(oponentes, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var oponentesResponse = new OponentesResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockOponentesFactory.Setup(x => x.DeleteAsync(operadorId, oponentesResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _oponentesWriter.Delete(oponentesResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockOponentesFactory.Verify(x => x.DeleteAsync(operadorId, oponentesResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var oponentesResponse = new OponentesResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockOponentesFactory.Setup(x => x.DeleteAsync(operadorId, oponentesResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _oponentesWriter.Delete(oponentesResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var oponentesResponse = new OponentesResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockOponentesFactory.Setup(x => x.DeleteAsync(operadorId, oponentesResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _oponentesWriter.Delete(oponentesResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new OponentesWriter(_mockOponentesFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new OponentesWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.Oponentes CreateValidOponentesModel()
    {
        return new Models.Oponentes
        {
            Id = 0,
            EMPFuncao = 1,
            GUID = Guid.NewGuid().ToString(),
            CTPSNumero = "AAAAAAAAAAAAA",
            Site = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            CTPSSerie = "AAAAAAAA",
            Nome = "João",
            Adv = 1,
            EMPCliente = 1,
            IDRep = 1,
            PIS = "AAAAAAAAAAAAAAAAAA",
            Contato = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            CNPJ = "93016944000138",
            RG = "12.345.678-9",
            Juridica = false,
            Tipo = false,
            Sexo = false,
            CPF = "544.506.718-13",
            Endereco = "Rua das Flores, 123",
            Fone = "(11) 99999-9999",
            Fax = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Cidade = 1,
            Bairro = "Centro",
            CEP = "01234-567",
            InscEst = "AAAAAAAAAAAAA",
            Observacao = "Observação teste",
            EMail = "test@email.com",
            Class = "A",
            Top = false
        };
    }
#endregion
}