// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IOperadorValidation
{
    Task<bool> ValidateReg(Models.Operador reg, IOperadorService service, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
    Task<bool> CanDelete(int? id, IOperadorService service, IAgendaService agendaService, IDiario2Service diario2Service, IGUTAtividadesService gutatividadesService, IOperadorEMailPopupService operadoremailpopupService, IOperadorGruposAgendaService operadorgruposagendaService, IPontoVirtualAcessosService pontovirtualacessosService, ISMSAliceService smsaliceService, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
}

public class OperadorValidation : IOperadorValidation
{
    public async Task<bool> CanDelete(int? id, IOperadorService service, IAgendaService agendaService, IDiario2Service diario2Service, IGUTAtividadesService gutatividadesService, IOperadorEMailPopupService operadoremailpopupService, IOperadorGruposAgendaService operadorgruposagendaService, IPontoVirtualAcessosService pontovirtualacessosService, ISMSAliceService smsaliceService, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (id == null || id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id ?? default, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        var agendaExists0 = await agendaService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterAgenda { Usuario = id ?? default }, uri);
        if (agendaExists0 != null && agendaExists0.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Compromisso associados a ele.");
        var diario2Exists1 = await diario2Service.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterDiario2 { Operador = id ?? default }, uri);
        if (diario2Exists1 != null && diario2Exists1.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Diario2 associados a ele.");
        var gutatividadesExists2 = await gutatividadesService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterGUTAtividades { Operador = id ?? default }, uri);
        if (gutatividadesExists2 != null && gutatividadesExists2.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela G U T Atividades associados a ele.");
        var operadoremailpopupExists3 = await operadoremailpopupService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterOperadorEMailPopup { Operador = id ?? default }, uri);
        if (operadoremailpopupExists3 != null && operadoremailpopupExists3.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Operador E Mail Popup associados a ele.");
        var operadorgruposagendaExists4 = await operadorgruposagendaService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterOperadorGruposAgenda { Operador = id ?? default }, uri);
        if (operadorgruposagendaExists4 != null && operadorgruposagendaExists4.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Operador Grupos Agenda associados a ele.");
        var pontovirtualacessosExists5 = await pontovirtualacessosService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterPontoVirtualAcessos { Operador = id ?? default }, uri);
        if (pontovirtualacessosExists5 != null && pontovirtualacessosExists5.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Ponto Virtual Acessos associados a ele.");
        var smsaliceExists6 = await smsaliceService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterSMSAlice { Operador = id ?? default }, uri);
        if (smsaliceExists6 != null && smsaliceExists6.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela S M S Alice associados a ele.");
        return true;
    }

    private bool ValidSizes(Models.Operador reg)
    {
        if (reg.Nome != null && reg.Nome.Length > DBOperadorDicInfo.OperNome.FTamanho)
            throw new SGValidationException($"Nome deve ter no máximo {DBOperadorDicInfo.OperNome.FTamanho} caracteres.");
        if (reg.Nick != null && reg.Nick.Length > DBOperadorDicInfo.OperNick.FTamanho)
            throw new SGValidationException($"Nick deve ter no máximo {DBOperadorDicInfo.OperNick.FTamanho} caracteres.");
        if (reg.MinhaDescricao != null && reg.MinhaDescricao.Length > DBOperadorDicInfo.OperMinhaDescricao.FTamanho)
            throw new SGValidationException($"MinhaDescricao deve ter no máximo {DBOperadorDicInfo.OperMinhaDescricao.FTamanho} caracteres.");
        if (reg.GUID != null && reg.GUID.Length > DBOperadorDicInfo.OperGUID.FTamanho)
            throw new SGValidationException($"GUID deve ter no máximo {DBOperadorDicInfo.OperGUID.FTamanho} caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.Operador reg, IOperadorService service, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Nome))
            throw new SGValidationException("Nome é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.EMail != null && reg.EMail.Length > 0 && !reg.EMail.IsValidEmail())
            throw new SGValidationException($"EMail em formato inválido.");
        if (reg.EMailNet != null && reg.EMailNet.Length > 0 && !reg.EMailNet.IsValidEmail())
            throw new SGValidationException($"EMailNet em formato inválido.");
        if (!string.IsNullOrWhiteSpace(reg.DataLimiteReset))
        {
            if (DateTime.TryParse(reg.DataLimiteReset, out DateTime dataAntiga))
            {
                if (dataAntiga < new DateTime(1900, 1, 1))
                    throw new SGValidationException("DataLimiteReset não pode ser anterior a 01/01/1900.");
            }
        }

        await Task.Delay(0);
        return true;
    }
}