// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using MenphisSI.GerAdv.Models.Response.All;
using MenphisSI.GerAdv.Readers;
using System.Data;

namespace MenphisSI.GerAdv.Tests.Readers;
/// <summary>
/// Comprehensive unit tests for AgendaRelatorioReader class
/// Tests all public methods including async operations, data reading, and data transformation
/// </summary>
public class AgendaRelatorioReaderTests : IDisposable
{
    private readonly Mock<IFAgendaRelatorioFactory> _mockAgendaRelatorioFactory;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IDataRecord> _mockDataRecord;
    private readonly AgendaRelatorioReader _agendarelatorioReader;
    public AgendaRelatorioReaderTests()
    {
        _mockAgendaRelatorioFactory = new Mock<IFAgendaRelatorioFactory>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockDataRecord = new Mock<IDataRecord>();
        _agendarelatorioReader = new AgendaRelatorioReader(_mockAgendaRelatorioFactory.Object);
    }

#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldInitializeReader()
    {
        // Act & Assert
        _agendarelatorioReader.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new AgendaRelatorioReader(null !));
    }

#endregion
#region Listar Tests
    [Fact]
    public async Task Listar_WithValidParameters_ShouldCallListarTabela()
    {
        // Arrange
        var max = 10;
        var uri = "valid-uri"; // This would need to be a valid URI in actual implementation
        var cWhere = "carCodigo > 0";
        var parameters = new List<SqlParameter>();
        var order = "carNome";
        var cancellationToken = CancellationToken.None;
        // Act & Assert
        // Since this calls external dependencies and database connections,
        // we expect it to throw an exception with our test setup
        await Assert.ThrowsAsync<Exception>(() => _agendarelatorioReader.Listar(max, uri, cWhere, parameters, order, cancellationToken));
    }

    [Fact]
    public async Task Listar_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        var max = 10;
        var uri = "test-uri";
        var cWhere = "carCodigo > 0";
        var parameters = new List<SqlParameter>();
        var order = "carNome";
        var cancellationToken = new CancellationToken(true); // Already cancelled
        // Act & Assert
        // Even with cancellation, this should throw an exception due to invalid URI
        await Assert.ThrowsAsync<Exception>(() => _agendarelatorioReader.Listar(max, uri, cWhere, parameters, order, cancellationToken));
    }

#endregion
#region Read with Where and Parameters Tests
#endregion
#region Read with FAgendaRelatorio Tests
    [Fact]
    public void Read_WithValidFAgendaRelatorio_ShouldReturnAgendaRelatorioResponse()
    {
        // Arrange
        var dbRec = new FAgendaRelatorio
        {
            ID = 123,
            FxxxParaNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
        // Act
        var result = _agendarelatorioReader.Read(dbRec);
        // Assert
        result.Should().NotBeNull();
        result?.Id.Should().Be(123);
        result?.xxxParaNome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public void Read_WithNullFAgendaRelatorio_ShouldReturnNull()
    {
        // Arrange
        FAgendaRelatorio? dbRec = null;
        // Act
        var result = _agendarelatorioReader.Read(dbRec);
        // Assert
        result.Should().BeNull();
    }

    [Fact]
    public void Read_WithFAgendaRelatorioNullNome_ShouldReturnEmptyStringForNome()
    {
        // Arrange
        var dbRec = new FAgendaRelatorio
        {
            ID = 123,
            FxxxParaNome = null
        };
        // Act
        var result = _agendarelatorioReader.Read(dbRec);
        // Assert
        result.Should().NotBeNull();
        result?.Id.Should().Be(123);
        result?.xxxParaNome.Should().Be(string.Empty);
    }

#endregion
#region Read with DBAgendaRelatorio Tests
    [Fact]
    public void Read_WithValidSGDBAgendaRelatorio_ShouldReturnAgendaRelatorioResponse()
    {
        // Arrange
        var dbRec = new DBAgendaRelatorio
        {
            ID = 123,
            FxxxParaNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
        // Act
        var result = _agendarelatorioReader.Read(dbRec);
        // Assert
        result.Should().NotBeNull();
        result?.Id.Should().Be(123);
        result?.xxxParaNome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public void Read_WithNullSGDBAgendaRelatorio_ShouldReturnNull()
    {
        // Arrange
        DBAgendaRelatorio? dbRec = null;
        // Act
        var result = _agendarelatorioReader.Read(dbRec);
        // Assert
        result.Should().BeNull();
    }

    [Fact]
    public void Read_WithSGDBAgendaRelatorioNullNome_ShouldReturnEmptyStringForNome()
    {
        // Arrange
        var dbRec = new DBAgendaRelatorio
        {
            ID = 123,
            FxxxParaNome = null // This should result in empty string in response
        };
        // Act
        var result = _agendarelatorioReader.Read(dbRec);
        // Assert
        result.Should().NotBeNull();
        result?.Id.Should().Be(123);
        result?.xxxParaNome.Should().Be(string.Empty);
    }

#endregion
#region ReadAll with FAgendaRelatorio and IDataRecord Tests
    [Fact]
    public void ReadAll_WithValidFAgendaRelatorioAndDataRecord_ShouldReturnAgendaRelatorioResponseAll()
    {
        // Arrange
        var dbRec = new FAgendaRelatorio
        {
            ID = 123,
            FxxxParaNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
        // Act
        var result = _agendarelatorioReader.ReadAll(dbRec, _mockDataRecord.Object);
        // Assert
        result.Should().NotBeNull();
        result?.Id.Should().Be(123);
        result?.xxxParaNome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public void ReadAll_WithNullFAgendaRelatorioAndDataRecord_ShouldReturnNull()
    {
        // Arrange
        FAgendaRelatorio? dbRec = null;
        // Act
        var result = _agendarelatorioReader.ReadAll(dbRec, _mockDataRecord.Object);
        // Assert
        result.Should().BeNull();
    }

    [Fact]
    public void ReadAll_WithFAgendaRelatorioNullNomeAndDataRecord_ShouldReturnEmptyStringForNome()
    {
        // Arrange
        var dbRec = new FAgendaRelatorio
        {
            ID = 123,
            FxxxParaNome = null
        };
        // Act
        var result = _agendarelatorioReader.ReadAll(dbRec, _mockDataRecord.Object);
        // Assert
        result.Should().NotBeNull();
        result?.Id.Should().Be(123);
        result?.xxxParaNome.Should().Be(string.Empty);
    }

#endregion
#region ReadAll with DBAgendaRelatorio and DataRow Tests
    [Fact]
    public void ReadAll_WithValidSGDBAgendaRelatorioAndDataRow_ShouldReturnAgendaRelatorioResponseAll()
    {
        // Arrange
        var dbRec = new DBAgendaRelatorio
        {
            ID = 123,
            FxxxParaNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
        // Act
        var result = _agendarelatorioReader.ReadAll(dbRec, null);
        // Assert
        result.Should().NotBeNull();
        result?.Id.Should().Be(123);
        result?.xxxParaNome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public void ReadAll_WithNullSGDBAgendaRelatorioAndDataRow_ShouldReturnNull()
    {
        // Arrange
        DBAgendaRelatorio? dbRec = null;
        // Act
        var result = _agendarelatorioReader.ReadAll(dbRec, null);
        // Assert
        result.Should().BeNull();
    }

    [Fact]
    public void ReadAll_WithSGDBAgendaRelatorioNullNomeAndDataRow_ShouldReturnEmptyStringForNome()
    {
        // Arrange
        var dbRec = new DBAgendaRelatorio
        {
            ID = 123,
            FxxxParaNome = null // This should result in empty string in response
        };
        // Act
        var result = _agendarelatorioReader.ReadAll(dbRec, null);
        // Assert
        result.Should().NotBeNull();
        result?.Id.Should().Be(123);
        result?.xxxParaNome.Should().Be(string.Empty);
    }

#endregion
#region Data Consistency Tests
    [Theory]
    [InlineData(1, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData(999, "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData(0, "")]
    public void Read_WithVariousData_ShouldMaintainConsistency(int id, string nome)
    {
        // Arrange
        var dbRec = new FAgendaRelatorio
        {
            ID = id,
            FxxxParaNome = nome
        };
        // Act
        var result = _agendarelatorioReader.Read(dbRec);
        // Assert
        if (id == 0)
        {
            result.Should().NotBeNull();
            result?.Id.Should().Be(id);
        }
        else
        {
            result.Should().NotBeNull();
            result?.Id.Should().Be(id);
            result?.xxxParaNome.Should().Be(nome);
        }
    }

    [Theory]
    [InlineData(1, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData(999, "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData(0, "")]
    public void ReadAll_WithVariousData_ShouldMaintainConsistency(int id, string nome)
    {
        // Arrange
        var dbRec = new FAgendaRelatorio
        {
            ID = id,
            FxxxParaNome = nome
        };
        // Act
        var result = _agendarelatorioReader.ReadAll(dbRec, _mockDataRecord.Object);
        // Assert
        result.Should().NotBeNull();
        result?.Id.Should().Be(id);
        result?.xxxParaNome.Should().Be(nome);
    }

#endregion
#region Async Behavior Tests
    [Fact]
    public async Task Listar_WithInvalidUri_ShouldThrowException()
    {
        // Arrange
        var max = 10;
        var uri = "test-uri"; // Invalid URI
        var cWhere = "";
        var parameters = new List<SqlParameter>();
        var order = "";
        var cancellationToken = CancellationToken.None;
        // Act & Assert
        // This should throw an exception because the URI is invalid
        await Assert.ThrowsAsync<Exception>(() => _agendarelatorioReader.Listar(max, uri, cWhere, parameters, order, cancellationToken));
    }

#endregion
#region Integration-like Tests
    [Fact]
    public void Read_FAgendaRelatorio_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var testId = 456;
        var testNome = "MA";
        var dbRec = new FAgendaRelatorio
        {
            ID = testId,
            FxxxParaNome = testNome
        };
        // Act
        var result = _agendarelatorioReader.Read(dbRec);
        // Assert
        result.Should().NotBeNull();
        result.Should().BeOfType<AgendaRelatorioResponse>();
        result!.Id.Should().Be(testId);
        result.xxxParaNome.Should().Be(testNome);
    }

    [Fact]
    public void ReadAll_FAgendaRelatorio_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var testId = 789;
        var testNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        var dbRec = new FAgendaRelatorio
        {
            ID = testId,
            FxxxParaNome = testNome
        };
        // Act
        var result = _agendarelatorioReader.ReadAll(dbRec, _mockDataRecord.Object);
        // Assert
        result.Should().NotBeNull();
        result.Should().BeOfType<AgendaRelatorioResponseAll>();
        result!.Id.Should().Be(testId);
        result.xxxParaNome.Should().Be(testNome);
    }

#endregion
#region Dispose
    public virtual void Dispose()
    {
        // Clean up any resources if needed
        GC.SuppressFinalize(this);
    }
#endregion
}