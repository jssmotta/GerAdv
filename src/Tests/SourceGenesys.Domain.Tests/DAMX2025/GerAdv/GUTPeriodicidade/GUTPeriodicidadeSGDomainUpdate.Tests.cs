// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// ============================================
// ARQUIVO: DBUpdateTests.cs.txt (Principal)
// ============================================
namespace MenphisSI.GerAdv.Tests;
public class DBGUTPeriodicidadeUpdate : IDisposable
{
    private readonly DBGUTPeriodicidade _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBGUTPeriodicidadeUpdate()
    {
        _instance = new DBGUTPeriodicidade();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void DefaultConstructor_ShouldCreateInstance_WithDefaultValues()
    {
        // Act
        var gutperiodicidade = new DBGUTPeriodicidade();
        // Assert
        gutperiodicidade.Should().NotBeNull();
        gutperiodicidade.ITabelaName().Should().Be("GUTPeriodicidade");
        gutperiodicidade.ID.Should().Be(0);
    }

    [Fact]
    public void AllProperties_WithValidValues_ShouldSetCorrectly()
    {
        // Arrange
        var gutperiodicidade = new DBGUTPeriodicidade
        {
            FNome = "AAAAAAAAAAAAAAAAAAAA",
            FGUID = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        };
        // Assert - All properties should be set gutperiodicidade.FNome.Should().Be( "AAAAAAAAAAAAAAAAAAAA");
        gutperiodicidade.FGUID.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public void StringProperties_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var gutperiodicidade = new DBGUTPeriodicidade();
        var longString = new string ('X', 300);
        gutperiodicidade.FNome = longString; // MAX: 20
        gutperiodicidade.FGUID = longString; // MAX: 50
        // Assert - All properties should be set gutperiodicidade.FNome.Should().HaveLength(20);
        gutperiodicidade.FGUID.Should().HaveLength(50);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCc")]
    public void FNome_Property_ShouldAcceptValidNames(string Nome)
    {
        // Arrange
        var gutperiodicidade = new DBGUTPeriodicidade
        {
            // Act
            FNome = Nome
        };
        // Assert
        gutperiodicidade.FNome.Should().Be(Nome);
    }

    [Fact]
    public void FNome_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var gutperiodicidade = new DBGUTPeriodicidade
        {
            // Act
            FNome = null
        };
        // Assert
        gutperiodicidade.FNome.Should().Be(string.Empty);
    }

    [Fact]
    public void SqlWhereConstructor_WithNullConnection_ShouldNotThrow()
    {
        // Arrange
        var sqlWhere = "pcgCodigo = 1";
        // Act & Assert
        var GUTPeriodicidade = new DBGUTPeriodicidade(sqlWhere, null);
        GUTPeriodicidade.Should().NotBeNull();
    }

    [Fact]
    public void ParameterizedConstructor_WithNullConnection_ShouldReturnEarly()
    {
        // Arrange
        var parameters = new List<SqlParameter>();
        var nome = "TesteNome";
        // Act
        var gutperiodicidade = new DBGUTPeriodicidade(parameters, nome, null);
        // Assert
        gutperiodicidade.Should().NotBeNull();
        gutperiodicidade.ID.Should().Be(0); // Should not have loaded any data
    }

    [Fact]
    public void FNome_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var gutperiodicidade = new DBGUTPeriodicidade();
        var longName = new string ('A', 20 + 10); // Exceeds 20 character limit
        // Act
        gutperiodicidade.FNome = longName;
        // Assert
        gutperiodicidade.FNome.Should().HaveLength(20);
    }

    [Fact]
    public void FNome_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FNome = null;
        // Act
        var result = _instance.FNome;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FNome_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FNome = expectedValue;
        // Act
        var result = _instance.FNome;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FNome_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBGUTPeriodicidade).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNome = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBGUTPeriodicidade).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNome = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBGUTPeriodicidade).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FNome = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBGUTPeriodicidade).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FNome = value;
        // Act
        _instance.FNome = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBGUTPeriodicidade).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = "Original Value";
        // Act
        _instance.FNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBGUTPeriodicidade).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = "First Value";
        // Act
        _instance.FNome = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBGUTPeriodicidade).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNome = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCc")]
    public void FNome_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FNome = input;
        // Assert
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void FNome_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBGUTPeriodicidade).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = null;
        // Act
        _instance.FNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBGUTPeriodicidade).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = "Existing Value";
        // Act
        _instance.FNome = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

#region Testes de GUID
    [Fact]
    public void GUID_DefaultValue_ShouldBeEmpty()
    {
        Assert.Equal(string.Empty, _instance.FGUID);
    }

    [Fact]
    public void GUID_SetValidGUID_ShouldStore()
    {
        var guid = Guid.NewGuid().ToString();
        _instance.FGUID = guid;
        Assert.Equal(guid, _instance.FGUID);
    }

#endregion
    [Fact]
    public void TabelaNome_Property_ShouldReturnCorrectTableName()
    {
        // Arrange
        var gutperiodicidade = new DBGUTPeriodicidade();
        // Act & Assert
        gutperiodicidade.TabelaNome.Should().Be("GUTPeriodicidade");
    }

    public virtual void Dispose()
    {
    // Cleanup resources if needed
    }
}