// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Writers;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IProcessOutputEngineWriter
{
    Task<FProcessOutputEngine> WriteAsync(Models.ProcessOutputEngine processoutputengine, int auditorQuem, MsiSqlConnection oCnn);
    Task Delete(ProcessOutputEngineResponse processoutputengine, int operadorId, MsiSqlConnection oCnn);
}

public class ProcessOutputEngineWriter(IFProcessOutputEngineFactory processoutputengineFactory) : IProcessOutputEngineWriter
{
    private readonly IFProcessOutputEngineFactory _processoutputengineFactory = processoutputengineFactory ?? throw new ArgumentNullException(nameof(processoutputengineFactory));
    public virtual async Task Delete(ProcessOutputEngineResponse processoutputengine, int operadorId, MsiSqlConnection oCnn)
    {
        await _processoutputengineFactory.DeleteAsync(operadorId, processoutputengine.Id, oCnn);
    }

    public virtual async Task<FProcessOutputEngine> WriteAsync(Models.ProcessOutputEngine processoutputengine, int auditorQuem, MsiSqlConnection oCnn)
    {
        using var dbRec = await (processoutputengine.Id.IsEmptyIDNumber() ? _processoutputengineFactory.CreateAsync() : _processoutputengineFactory.CreateFromIdAsync(processoutputengine.Id, oCnn));
        dbRec.FNome = processoutputengine.Nome;
        dbRec.FDatabase = processoutputengine.Database;
        dbRec.FTabela = processoutputengine.Tabela;
        dbRec.FCampo = processoutputengine.Campo;
        dbRec.FValor = processoutputengine.Valor;
        dbRec.FOutput = processoutputengine.Output;
        dbRec.FAdministrador = processoutputengine.Administrador;
        dbRec.FGUID = processoutputengine.GUID;
        dbRec.FOutputSource = processoutputengine.OutputSource;
        dbRec.FDisabledItem = processoutputengine.DisabledItem;
        dbRec.FIDModulo = processoutputengine.IDModulo;
        dbRec.FIsOnlyProcesso = processoutputengine.IsOnlyProcesso;
        dbRec.FMyID = processoutputengine.MyID;
        dbRec.AuditorQuem = auditorQuem;
        await dbRec.UpdateAsync(oCnn);
        return dbRec;
    }
}