// 100% auto-generated by Source Genesys WebApi Front & Back Creator
                     // copyright © 2000-2025 Menphis - Sistemas Inteligentes
                     // This file is part of the Source Genesys project                     
                    'use client';
import { CRUD_CONSTANTS } from '@/app/tools/crud';
import { ReuniaoApi, ReuniaoApiError } from '../Apis/ApiReuniao';
import { FilterReuniao } from '../Filters/Reuniao';
import { IReuniao } from '../Interfaces/interface.Reuniao';
import { ReuniaoEmpty } from '../../Models/Reuniao';

export class ReuniaoValidator {
  static validateReuniao(reuniao: IReuniao): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];

    // Atualmente não há validações de regras de negócio específicas
    // Todas as validações são feitas nos inputs correspondentes
    
    return {
      isValid: errors.length === 0,
      errors
    };
  }
}

export interface IReuniaoService {
  fetchReuniaoById: (id: number) => Promise<IReuniao>;
  saveReuniao: (reuniao: IReuniao) => Promise<IReuniao>;  
  
  getAll: (filtro?: FilterReuniao) => Promise<IReuniao[]>;
  deleteReuniao: (id: number) => Promise<void>;
  validateReuniao: (reuniao: IReuniao) => { isValid: boolean; errors: string[] };
}

export class ReuniaoService implements IReuniaoService {
  constructor(private api: ReuniaoApi) {}

  async fetchReuniaoById(id: number): Promise<IReuniao> {
    if (id <= 0) {
      throw new ReuniaoApiError('ID inválido', 400, 'INVALID_ID');
    }

    try {
      
      const response = await this.api.getById(id);
      return response.data;

    } catch (error) {
      if (error instanceof ReuniaoApiError) {
        throw error;
      }
      throw new ReuniaoApiError('Erro ao buscar reuniao', 500, 'FETCH_ERROR', error);
    }
  }

  async saveReuniao(reuniao: IReuniao): Promise<IReuniao> {    
    const validation = this.validateReuniao(reuniao);
    if (!validation.isValid) {
      throw new ReuniaoApiError(
        `Dados inválidos: ${validation.errors.join(', ')}`,
        400,
        'VALIDATION_ERROR'
      );
    }

    try {
      const response = await this.api.addAndUpdate(reuniao);
      return response.data;
    } catch (error) {
      if (error instanceof ReuniaoApiError) {
        throw error;
      }
      throw new ReuniaoApiError('Erro ao salvar reuniao', 500, 'SAVE_ERROR', error);
    }
  }

  
  

   async getAll(
    filtro?: FilterReuniao,
    onOnlineData?: (data: IReuniao[]) => void
  ): Promise<IReuniao[]> {
    try {
      // Carrega dados offline primeiro
      const preloadResponse = await this.api.filterPreload(filtro ?? {});
      const offlineData = preloadResponse?.data || [];

      if (onOnlineData) {
        // Busca dados online em background e envia via callback
        this.api.filter(filtro ?? {})
          .then(response => {
            if (response?.data) {
              onOnlineData(response.data);
            }
          })
          .catch(error => {
            console.log('Error fetching online Reuniao');
          });
        // Retorna offline imediatamente
        return offlineData;
      } else {
        // Se não há callback, aguarda dados online e retorna
        try {
          const onlineResponse = await this.api.filter(filtro ?? {});
          return onlineResponse?.data || offlineData;
        } catch (error) {
          console.log('Error fetching online Reuniao');
          return offlineData;
        }
      }
    } catch (error) {
      console.log('Error fetching all Reuniao:');
      return [];
    }
  }


  async deleteReuniao(id: number): Promise<void> {
    if (id <= 0) {
      throw new ReuniaoApiError('ID inválido para exclusão', 400, 'INVALID_ID');
    }

    try {
      await this.api.delete(id);
    } catch (error) {
      if (error instanceof ReuniaoApiError) {
        throw error;
      }
      throw new ReuniaoApiError('Erro ao excluir reuniao', 500, 'DELETE_ERROR', error);
    }
  }

  validateReuniao(reuniao: IReuniao): { isValid: boolean; errors: string[] } {
    return ReuniaoValidator.validateReuniao(reuniao);
  }
}