// 100% auto-generated by Source Genesys Core
// copyright Â© 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming 1
public partial class DBEscritorios
{
    public DBEscritorios(DataRow? dbRec)
    {
        if (dbRec is null)
            return;
        InitFromRecord(name =>
        {
            try
            {
                return dbRec[name];
            }
            catch
            {
                return DBNull.Value;
            }
        });
    }

    public DBEscritorios(SqlDataReader? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do Escritorios: {ex.Message}", ex);
        }
    }

    private void InitFromRecord(Func<string, object?> getValue)
    {
        if (DBNull.Value.Equals(getValue(CampoCodigo)))
            return;
        ID = Convert.ToInt32(getValue(CampoCodigo));
        // Checkpoint Carregar 
        try
        {
            if (!DBNull.Value.Equals(getValue(DBEscritoriosDicInfo.Bold)))
                m_FBold = Convert.ToBoolean(getValue(DBEscritoriosDicInfo.Bold));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBEscritoriosDicInfo.Casa)))
                m_FCasa = Convert.ToBoolean(getValue(DBEscritoriosDicInfo.Casa));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBEscritoriosDicInfo.Cidade)))
                m_FCidade = Convert.ToInt32(getValue(DBEscritoriosDicInfo.Cidade));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBEscritoriosDicInfo.Correspondente)))
                m_FCorrespondente = Convert.ToBoolean(getValue(DBEscritoriosDicInfo.Correspondente));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBEscritoriosDicInfo.DtAtu)))
                m_FDtAtu = Convert.ToDateTime(getValue(DBEscritoriosDicInfo.DtAtu));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBEscritoriosDicInfo.DtCad)))
                m_FDtCad = Convert.ToDateTime(getValue(DBEscritoriosDicInfo.DtCad));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBEscritoriosDicInfo.Etiqueta)))
                m_FEtiqueta = Convert.ToBoolean(getValue(DBEscritoriosDicInfo.Etiqueta));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBEscritoriosDicInfo.Parceria)))
                m_FParceria = Convert.ToBoolean(getValue(DBEscritoriosDicInfo.Parceria));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBEscritoriosDicInfo.QuemAtu)))
                m_FQuemAtu = Convert.ToInt32(getValue(DBEscritoriosDicInfo.QuemAtu));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBEscritoriosDicInfo.QuemCad)))
                m_FQuemCad = Convert.ToInt32(getValue(DBEscritoriosDicInfo.QuemCad));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBEscritoriosDicInfo.Top)))
                m_FTop = Convert.ToBoolean(getValue(DBEscritoriosDicInfo.Top));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBEscritoriosDicInfo.Visto)))
                m_FVisto = Convert.ToBoolean(getValue(DBEscritoriosDicInfo.Visto));
        }
        catch
        {
        }

        try
        {
            m_FAdvResponsavel = getValue(DBEscritoriosDicInfo.AdvResponsavel)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FBairro = getValue(DBEscritoriosDicInfo.Bairro)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FCEP = getValue(DBEscritoriosDicInfo.CEP)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FCNPJ = getValue(DBEscritoriosDicInfo.CNPJ)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FEMail = getValue(DBEscritoriosDicInfo.EMail)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FEndereco = getValue(DBEscritoriosDicInfo.Endereco)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FFax = getValue(DBEscritoriosDicInfo.Fax)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FFone = getValue(DBEscritoriosDicInfo.Fone)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FGUID = getValue(DBEscritoriosDicInfo.GUID)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FInscEst = getValue(DBEscritoriosDicInfo.InscEst)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FNome = getValue(DBEscritoriosDicInfo.Nome)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FOAB = getValue(DBEscritoriosDicInfo.OAB)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FOBS = getValue(DBEscritoriosDicInfo.OBS)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FSecretaria = getValue(DBEscritoriosDicInfo.Secretaria)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FSite = getValue(DBEscritoriosDicInfo.Site)?.ToString() ?? string.Empty;
        }
        catch
        {
        }
    }

    public void CarregarDadosBd(DataRow? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do Escritorios: {ex.Message}", ex);
        }
    }

    public void CarregarDadosBd(SqlDataReader? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do Escritorios: {ex.Message}", ex);
        }
    }
}