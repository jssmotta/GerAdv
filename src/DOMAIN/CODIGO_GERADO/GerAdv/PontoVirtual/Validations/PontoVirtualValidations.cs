// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IPontoVirtualValidation
{
    Task<bool> ValidateReg(Models.PontoVirtual reg, IPontoVirtualService service, IOperadorReader operadorReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int? id, IPontoVirtualService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class PontoVirtualValidation : IPontoVirtualValidation
{
    public async Task<bool> CanDelete(int? id, IPontoVirtualService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id == null || id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id ?? default, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.PontoVirtual reg)
    {
        if (reg.Key != null && reg.Key.Length > DBPontoVirtualDicInfo.PvtKey.FTamanho)
            throw new SGValidationException($"Key deve ter no máximo {DBPontoVirtualDicInfo.PvtKey.FTamanho} caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.PontoVirtual reg, IPontoVirtualService service, IOperadorReader operadorReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.HoraEntrada.IsEmpty())
            throw new SGValidationException("HoraEntrada é obrigatório.");
        if (!DateTime.TryParse(reg.HoraEntrada, out _))
        {
            throw new SGValidationException($"HoraEntrada inválida: {reg.HoraEntrada}");
        }

        if (reg.HoraEntrada.IsEmpty())
            throw new SGValidationException("HoraEntrada é obrigatório.");
        if (reg.HoraSaida.IsEmpty())
            throw new SGValidationException("HoraSaida é obrigatório.");
        if (!DateTime.TryParse(reg.HoraSaida, out _))
        {
            throw new SGValidationException($"HoraSaida inválida: {reg.HoraSaida}");
        }

        if (reg.HoraSaida.IsEmpty())
            throw new SGValidationException("HoraSaida é obrigatório.");
        if (reg.Operador == 0)
            throw new SGValidationException("Operador é obrigatório.");
        if (!string.IsNullOrWhiteSpace(reg.HoraEntrada))
        {
            if (DateTime.TryParse(reg.HoraEntrada, out DateTime dataAntiga))
            {
                if (dataAntiga < new DateTime(1900, 1, 1))
                    throw new SGValidationException("HoraEntrada não pode ser anterior a 01/01/1900.");
            }
        }

        if (!string.IsNullOrWhiteSpace(reg.HoraSaida))
        {
            if (DateTime.TryParse(reg.HoraSaida, out DateTime dataAntiga))
            {
                if (dataAntiga < new DateTime(1900, 1, 1))
                    throw new SGValidationException("HoraSaida não pode ser anterior a 01/01/1900.");
            }
        }

        // Operador
        {
            var regOperador = await operadorReader.Read(reg.Operador, oCnn);
            if (regOperador == null || regOperador.Id != reg.Operador)
            {
                throw new SGValidationException($"Operador não encontrado ({regOperador?.Id}).");
            }
        }

        return true;
    }
}