// 100% auto-generated by Source Genesys Core
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming 1
public partial class DBAndamentosMD
{
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool pFldFGUID, pFldFNome, pFldFProcesso, pFldFAndamento, pFldFPathFull, pFldFUNC;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected int m_FProcesso, m_FAndamento;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected string? m_FGUID, m_FNome, m_FPathFull, m_FUNC;
    // Tracking Code: 20250503
    [StringLength(100, ErrorMessage = "A propriedade FGUID da tabela AndamentosMD deve ter no máximo 100 caracteres.")]
    public virtual string? FGUID
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FGUID ?? string.Empty;
        set
        {
            pFldFGUID = pFldFGUID || !(m_FGUID ?? string.Empty).Equals(value);
            if (pFldFGUID)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FGUID = trimmed.Length > 100 ? trimmed.AsSpan(0, 100).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(255, ErrorMessage = "A propriedade FNome da tabela AndamentosMD deve ter no máximo 255 caracteres.")]
    public virtual string? FNome
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNome ?? string.Empty;
        set
        {
            pFldFNome = pFldFNome || !(m_FNome ?? string.Empty).Equals(value);
            if (pFldFNome)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FNome = trimmed.Length > 255 ? trimmed.AsSpan(0, 255).ToString() : trimmed;
            }
        }
    }

    public virtual int FProcesso
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FProcesso;
        set
        {
            pFldFProcesso = pFldFProcesso || value != m_FProcesso;
            if (pFldFProcesso)
                m_FProcesso = value;
        }
    }

    public virtual int FAndamento
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAndamento;
        set
        {
            pFldFAndamento = pFldFAndamento || value != m_FAndamento;
            if (pFldFAndamento)
                m_FAndamento = value;
        }
    }

    // Tracking Code: 20250503
    public virtual string? FPathFull
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPathFull ?? string.Empty;
        set
        {
            pFldFPathFull = pFldFPathFull || !(m_FPathFull ?? string.Empty).Equals(value);
            if (pFldFPathFull)
                m_FPathFull = value.trim().FixAbc() ?? string.Empty;
        }
    }

    // Tracking Code: 20250503
    public virtual string? FUNC
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FUNC ?? string.Empty;
        set
        {
            pFldFUNC = pFldFUNC || !(m_FUNC ?? string.Empty).Equals(value);
            if (pFldFUNC)
                m_FUNC = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public void SetAuditor(int usuarioId) => AuditorQuem = usuarioId;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITabelaName() => PTabelaNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoCodigo() => CampoCodigo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoNome() => CampoNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string IPrefixo() => PTabelaPrefixo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITypeFieldCode() => "int";
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IdIsIdentity() => false;
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetID() => ID;
}