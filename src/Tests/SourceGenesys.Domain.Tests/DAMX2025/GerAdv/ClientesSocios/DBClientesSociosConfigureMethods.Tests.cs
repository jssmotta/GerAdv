// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
/// <summary>
/// Comprehensive unit tests for ConfigureUpdateFields and ConfigureAuditorFields methods in DBClientesSocios class
/// These methods are critical for database update operations and auditing functionality
/// Tests both synchronous and asynchronous Update methods
/// </summary>
public class DBClientesSociosConfigureMethodsTests : IDisposable
{
    private readonly DBClientesSocios _clientessocios;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBClientesSociosConfigureMethodsTests()
    {
        _clientessocios = new DBClientesSocios();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void ConfigureUpdateFields_WhenNoFieldsChanged_ShouldNotUpdateDatabase()
    {
        // Arrange
        ResetAllFieldFlags();
        _clientessocios.ID = 1; // Update scenario
        // Act
        var result = _clientessocios.Update(_mockConnection.Object);
        // Assert - Should return 0 because no fields changed
        result.Should().Be(0);
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WhenNoFieldsChanged_ShouldNotUpdateDatabase()
    {
        // Arrange
        ResetAllFieldFlags();
        _clientessocios.ID = 1; // Update scenario
        // Act & Assert - For async, when no fields changed and it's an update, it should return 0 or throw exception
        try
        {
            var result = await _clientessocios.UpdateAsync(_mockConnection.Object);
            // If no exception is thrown, verify the result indicates no update was needed
            result.Should().Be(0, "When no fields changed in update scenario, should return 0");
        }
        catch (Exception ex)
        {
            // If exception is thrown due to mocked connection, that's also acceptable
            ex.Should().NotBeNull();
        }
    }

#region Helper Methods
    private void SetFieldFlag(string fieldName, bool value)
    {
        var field = typeof(DBClientesSocios).GetField(fieldName, BindingFlags.NonPublic | BindingFlags.Instance);
        field?.SetValue(_clientessocios, value);
    }

    private void SetFieldValue(string fieldName, object? value)
    {
        var field = typeof(DBClientesSocios).GetField(fieldName, BindingFlags.NonPublic | BindingFlags.Instance);
        try
        {
            field?.SetValue(_clientessocios, value);
        }
        catch
        {
            field?.SetValue(_clientessocios, Convert.ToDateTime(value));
        }
    }

    private void ResetAllFieldFlags()
    {
        var fieldFlags = new[]
        {
            "pFldFSomenteRepresentante",
            "pFldFGUID",
            "pFldFIdade",
            "pFldFIsRepresentanteLegal",
            "pFldFQualificacao",
            "pFldFSexo",
            "pFldFDtNasc",
            "pFldFNome",
            "pFldFSite",
            "pFldFRepresentanteLegal",
            "pFldFCliente",
            "pFldFEndereco",
            "pFldFBairro",
            "pFldFCEP",
            "pFldFCidade",
            "pFldFRG",
            "pFldFCPF",
            "pFldFFone",
            "pFldFParticipacao",
            "pFldFCargo",
            "pFldFEMail",
            "pFldFObs",
            "pFldFCNH",
            "pFldFDataContrato",
            "pFldFCNPJ",
            "pFldFInscEst",
            "pFldFSocioEmpresaAdminNome",
            "pFldFEnderecoSocio",
            "pFldFBairroSocio",
            "pFldFCEPSocio",
            "pFldFCidadeSocio",
            "pFldFRGDataExp",
            "pFldFSocioEmpresaAdminSomente",
            "pFldFTipo",
            "pFldFFax",
            "pFldFClass",
        };
        foreach (var flag in fieldFlags)
        {
            SetFieldFlag(flag, false);
        }
    }

    private void SetAllFieldFlags(bool value)
    {
        var fieldFlags = new[]
        {
            "pFldFSomenteRepresentante",
            "pFldFGUID",
            "pFldFIdade",
            "pFldFIsRepresentanteLegal",
            "pFldFQualificacao",
            "pFldFSexo",
            "pFldFDtNasc",
            "pFldFNome",
            "pFldFSite",
            "pFldFRepresentanteLegal",
            "pFldFCliente",
            "pFldFEndereco",
            "pFldFBairro",
            "pFldFCEP",
            "pFldFCidade",
            "pFldFRG",
            "pFldFCPF",
            "pFldFFone",
            "pFldFParticipacao",
            "pFldFCargo",
            "pFldFEMail",
            "pFldFObs",
            "pFldFCNH",
            "pFldFDataContrato",
            "pFldFCNPJ",
            "pFldFInscEst",
            "pFldFSocioEmpresaAdminNome",
            "pFldFEnderecoSocio",
            "pFldFBairroSocio",
            "pFldFCEPSocio",
            "pFldFCidadeSocio",
            "pFldFRGDataExp",
            "pFldFSocioEmpresaAdminSomente",
            "pFldFTipo",
            "pFldFFax",
            "pFldFClass",
        };
        foreach (var flag in fieldFlags)
        {
            SetFieldFlag(flag, value);
        }
    }

    private void SetAllFieldValues()
    {
        SetFieldValue("m_FSomenteRepresentante", false);
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FIdade", 123);
        SetFieldValue("m_FIsRepresentanteLegal", false);
        SetFieldValue("m_FQualificacao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FSexo", false);
        SetFieldValue("m_FDtNasc", DateTime.Today.AddDays(7));
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FRepresentanteLegal", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FCliente", 123);
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FCEP", "AAAAAAAA");
        SetFieldValue("m_FCidade", 123);
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FCPF", "40392285029");
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        SetFieldValue("m_FParticipacao", "AAAAAAAA");
        SetFieldValue("m_FCargo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FEMail", "menphis@menphis.com.br");
        SetFieldValue("m_FObs", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        SetFieldValue("m_FCNH", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FDataContrato", DateTime.Today.AddDays(8));
        SetFieldValue("m_FCNPJ", "93016944000138");
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        SetFieldValue("m_FSocioEmpresaAdminNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FEnderecoSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FBairroSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FCEPSocio", "AAAAAAAA");
        SetFieldValue("m_FCidadeSocio", 123);
        SetFieldValue("m_FRGDataExp", DateTime.Today.AddDays(9));
        SetFieldValue("m_FSocioEmpresaAdminSomente", false);
        SetFieldValue("m_FTipo", false);
        SetFieldValue("m_FFax
        SetFieldValue("m_FClass", "A");
    }

#endregion
#region Fields_All
    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithGUIDFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsGUID_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsGUID_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithGUIDFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsGUIDChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncGUID_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncGUID_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertGUID_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsGUID_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _clientessocios.ID = 123; // Update scenario
        _clientessocios.AuditorQuem = 7;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsGUID_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsGUID_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _clientessocios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsGUID_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _clientessocios.ID = 0;
        _clientessocios.AuditorQuem = 10;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _clientessocios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsGUID_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _clientessocios.ID = id;
        _clientessocios.AuditorQuem = 15;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _clientessocios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncGUID_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncGUID_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsGUID_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 123;
        _clientessocios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _clientessocios.FGUID.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsGUID_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _clientessocios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _clientessocios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsGUID_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsGUID_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", null);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncGUID_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FGUID", "");
        SetFieldValue("m_FCompromisso", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsGUID_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _clientessocios.FGUID.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.FIdade.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithQualificacaoFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFQualificacao", true);
        SetFieldValue("m_FQualificacao", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsQualificacao_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFQualificacao", true); // At least one field must change
        SetFieldValue("m_FQualificacao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsQualificacao_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFQualificacao", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FQualificacao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithQualificacaoFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFQualificacao", true);
        SetFieldValue("m_FQualificacao", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsQualificacaoChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFQualificacao", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FQualificacao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncQualificacao_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFQualificacao", true);
        SetFieldValue("m_FQualificacao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncQualificacao_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFQualificacao", true);
        SetFieldValue("m_FQualificacao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertQualificacao_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFQualificacao", true); // At least one field must change
        SetFieldValue("m_FQualificacao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsQualificacao_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _clientessocios.ID = 123; // Update scenario
        _clientessocios.AuditorQuem = 7;
        SetFieldFlag("pFldFQualificacao", true); // At least one field must change
        SetFieldValue("m_FQualificacao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsQualificacao_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFQualificacao", true); // At least one field must change
        SetFieldValue("m_FQualificacao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsQualificacao_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFQualificacao", true); // At least one field must change
        SetFieldValue("m_FQualificacao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _clientessocios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsQualificacao_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _clientessocios.ID = 0;
        _clientessocios.AuditorQuem = 10;
        SetFieldFlag("pFldFQualificacao", true); // At least one field must change
        SetFieldValue("m_FQualificacao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _clientessocios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsQualificacao_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _clientessocios.ID = id;
        _clientessocios.AuditorQuem = 15;
        SetFieldFlag("pFldFQualificacao", true); // At least one field must change
        SetFieldValue("m_FQualificacao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _clientessocios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncQualificacao_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFQualificacao", true); // At least one field must change
        SetFieldValue("m_FQualificacao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncQualificacao_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFQualificacao", true); // At least one field must change
        SetFieldValue("m_FQualificacao", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsQualificacao_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 123;
        _clientessocios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _clientessocios.FQualificacao.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsQualificacao_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _clientessocios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _clientessocios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFQualificacao", true);
        SetFieldValue("m_FQualificacao", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsQualificacao_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFQualificacao", true);
        SetFieldValue("m_FQualificacao", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsQualificacao_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFQualificacao", true);
        SetFieldValue("m_FQualificacao", null);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncQualificacao_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFQualificacao", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FQualificacao", "");
        SetFieldValue("m_FCompromisso", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsQualificacao_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _clientessocios.FQualificacao.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.FIdade.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithNomeFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true);
        SetFieldValue("m_FNome", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsNome_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true); // At least one field must change
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsNome_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithNomeFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true);
        SetFieldValue("m_FNome", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsNomeChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncNome_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true);
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncNome_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true);
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertNome_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFNome", true); // At least one field must change
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsNome_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _clientessocios.ID = 123; // Update scenario
        _clientessocios.AuditorQuem = 7;
        SetFieldFlag("pFldFNome", true); // At least one field must change
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsNome_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFNome", true); // At least one field must change
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsNome_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFNome", true); // At least one field must change
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _clientessocios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsNome_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _clientessocios.ID = 0;
        _clientessocios.AuditorQuem = 10;
        SetFieldFlag("pFldFNome", true); // At least one field must change
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _clientessocios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsNome_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _clientessocios.ID = id;
        _clientessocios.AuditorQuem = 15;
        SetFieldFlag("pFldFNome", true); // At least one field must change
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _clientessocios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncNome_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFNome", true); // At least one field must change
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncNome_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFNome", true); // At least one field must change
        SetFieldValue("m_FNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsNome_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 123;
        _clientessocios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _clientessocios.FNome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsNome_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _clientessocios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _clientessocios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFNome", true);
        SetFieldValue("m_FNome", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsNome_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true);
        SetFieldValue("m_FNome", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsNome_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true);
        SetFieldValue("m_FNome", null);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncNome_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFNome", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FNome", "");
        SetFieldValue("m_FCompromisso", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsNome_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _clientessocios.FNome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.FIdade.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithSiteFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSite", true);
        SetFieldValue("m_FSite", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsSite_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSite", true); // At least one field must change
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsSite_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSite", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithSiteFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSite", true);
        SetFieldValue("m_FSite", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsSiteChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSite", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncSite_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSite", true);
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncSite_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSite", true);
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertSite_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFSite", true); // At least one field must change
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsSite_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _clientessocios.ID = 123; // Update scenario
        _clientessocios.AuditorQuem = 7;
        SetFieldFlag("pFldFSite", true); // At least one field must change
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsSite_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFSite", true); // At least one field must change
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsSite_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFSite", true); // At least one field must change
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _clientessocios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsSite_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _clientessocios.ID = 0;
        _clientessocios.AuditorQuem = 10;
        SetFieldFlag("pFldFSite", true); // At least one field must change
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _clientessocios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsSite_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _clientessocios.ID = id;
        _clientessocios.AuditorQuem = 15;
        SetFieldFlag("pFldFSite", true); // At least one field must change
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _clientessocios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncSite_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFSite", true); // At least one field must change
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncSite_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFSite", true); // At least one field must change
        SetFieldValue("m_FSite", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsSite_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 123;
        _clientessocios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _clientessocios.FSite.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsSite_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _clientessocios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _clientessocios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFSite", true);
        SetFieldValue("m_FSite", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsSite_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSite", true);
        SetFieldValue("m_FSite", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsSite_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSite", true);
        SetFieldValue("m_FSite", null);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncSite_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSite", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FSite", "");
        SetFieldValue("m_FCompromisso", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsSite_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _clientessocios.FSite.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.FIdade.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithRepresentanteLegalFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRepresentanteLegal", true);
        SetFieldValue("m_FRepresentanteLegal", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsRepresentanteLegal_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRepresentanteLegal", true); // At least one field must change
        SetFieldValue("m_FRepresentanteLegal", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsRepresentanteLegal_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRepresentanteLegal", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FRepresentanteLegal", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithRepresentanteLegalFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRepresentanteLegal", true);
        SetFieldValue("m_FRepresentanteLegal", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsRepresentanteLegalChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRepresentanteLegal", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FRepresentanteLegal", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncRepresentanteLegal_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRepresentanteLegal", true);
        SetFieldValue("m_FRepresentanteLegal", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncRepresentanteLegal_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRepresentanteLegal", true);
        SetFieldValue("m_FRepresentanteLegal", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertRepresentanteLegal_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFRepresentanteLegal", true); // At least one field must change
        SetFieldValue("m_FRepresentanteLegal", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsRepresentanteLegal_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _clientessocios.ID = 123; // Update scenario
        _clientessocios.AuditorQuem = 7;
        SetFieldFlag("pFldFRepresentanteLegal", true); // At least one field must change
        SetFieldValue("m_FRepresentanteLegal", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsRepresentanteLegal_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFRepresentanteLegal", true); // At least one field must change
        SetFieldValue("m_FRepresentanteLegal", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsRepresentanteLegal_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFRepresentanteLegal", true); // At least one field must change
        SetFieldValue("m_FRepresentanteLegal", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _clientessocios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsRepresentanteLegal_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _clientessocios.ID = 0;
        _clientessocios.AuditorQuem = 10;
        SetFieldFlag("pFldFRepresentanteLegal", true); // At least one field must change
        SetFieldValue("m_FRepresentanteLegal", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _clientessocios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsRepresentanteLegal_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _clientessocios.ID = id;
        _clientessocios.AuditorQuem = 15;
        SetFieldFlag("pFldFRepresentanteLegal", true); // At least one field must change
        SetFieldValue("m_FRepresentanteLegal", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _clientessocios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncRepresentanteLegal_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFRepresentanteLegal", true); // At least one field must change
        SetFieldValue("m_FRepresentanteLegal", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncRepresentanteLegal_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFRepresentanteLegal", true); // At least one field must change
        SetFieldValue("m_FRepresentanteLegal", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsRepresentanteLegal_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 123;
        _clientessocios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _clientessocios.FRepresentanteLegal.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsRepresentanteLegal_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _clientessocios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _clientessocios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFRepresentanteLegal", true);
        SetFieldValue("m_FRepresentanteLegal", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsRepresentanteLegal_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRepresentanteLegal", true);
        SetFieldValue("m_FRepresentanteLegal", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsRepresentanteLegal_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRepresentanteLegal", true);
        SetFieldValue("m_FRepresentanteLegal", null);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncRepresentanteLegal_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRepresentanteLegal", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FRepresentanteLegal", "");
        SetFieldValue("m_FCompromisso", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsRepresentanteLegal_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _clientessocios.FRepresentanteLegal.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.FIdade.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithEnderecoFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true);
        SetFieldValue("m_FEndereco", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsEndereco_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true); // At least one field must change
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsEndereco_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithEnderecoFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true);
        SetFieldValue("m_FEndereco", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsEnderecoChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncEndereco_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true);
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncEndereco_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true);
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertEndereco_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFEndereco", true); // At least one field must change
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsEndereco_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _clientessocios.ID = 123; // Update scenario
        _clientessocios.AuditorQuem = 7;
        SetFieldFlag("pFldFEndereco", true); // At least one field must change
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsEndereco_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFEndereco", true); // At least one field must change
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsEndereco_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFEndereco", true); // At least one field must change
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _clientessocios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsEndereco_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _clientessocios.ID = 0;
        _clientessocios.AuditorQuem = 10;
        SetFieldFlag("pFldFEndereco", true); // At least one field must change
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _clientessocios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsEndereco_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _clientessocios.ID = id;
        _clientessocios.AuditorQuem = 15;
        SetFieldFlag("pFldFEndereco", true); // At least one field must change
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _clientessocios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncEndereco_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFEndereco", true); // At least one field must change
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncEndereco_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFEndereco", true); // At least one field must change
        SetFieldValue("m_FEndereco", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsEndereco_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 123;
        _clientessocios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _clientessocios.FEndereco.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsEndereco_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _clientessocios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _clientessocios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFEndereco", true);
        SetFieldValue("m_FEndereco", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsEndereco_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true);
        SetFieldValue("m_FEndereco", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsEndereco_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true);
        SetFieldValue("m_FEndereco", null);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncEndereco_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEndereco", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FEndereco", "");
        SetFieldValue("m_FCompromisso", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsEndereco_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _clientessocios.FEndereco.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.FIdade.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithBairroFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true);
        SetFieldValue("m_FBairro", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsBairro_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true); // At least one field must change
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsBairro_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithBairroFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true);
        SetFieldValue("m_FBairro", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsBairroChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncBairro_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true);
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncBairro_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true);
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertBairro_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFBairro", true); // At least one field must change
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsBairro_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _clientessocios.ID = 123; // Update scenario
        _clientessocios.AuditorQuem = 7;
        SetFieldFlag("pFldFBairro", true); // At least one field must change
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsBairro_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFBairro", true); // At least one field must change
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsBairro_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFBairro", true); // At least one field must change
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _clientessocios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsBairro_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _clientessocios.ID = 0;
        _clientessocios.AuditorQuem = 10;
        SetFieldFlag("pFldFBairro", true); // At least one field must change
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _clientessocios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsBairro_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _clientessocios.ID = id;
        _clientessocios.AuditorQuem = 15;
        SetFieldFlag("pFldFBairro", true); // At least one field must change
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _clientessocios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncBairro_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFBairro", true); // At least one field must change
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncBairro_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFBairro", true); // At least one field must change
        SetFieldValue("m_FBairro", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsBairro_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 123;
        _clientessocios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _clientessocios.FBairro.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsBairro_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _clientessocios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _clientessocios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFBairro", true);
        SetFieldValue("m_FBairro", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsBairro_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true);
        SetFieldValue("m_FBairro", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsBairro_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true);
        SetFieldValue("m_FBairro", null);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncBairro_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairro", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FBairro", "");
        SetFieldValue("m_FCompromisso", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsBairro_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _clientessocios.FBairro.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.FIdade.Should().Be(123);
    }

    [Fact]
    public void ConfigureUpdateFieldsCEP_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _clientessocios.FCEP.Should().Be("AAAAAAAA");
        _clientessocios.FIdade.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithRGFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRG", true);
        SetFieldValue("m_FRG", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsRG_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRG", true); // At least one field must change
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsRG_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRG", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithRGFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRG", true);
        SetFieldValue("m_FRG", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsRGChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRG", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncRG_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRG", true);
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncRG_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRG", true);
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertRG_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFRG", true); // At least one field must change
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsRG_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _clientessocios.ID = 123; // Update scenario
        _clientessocios.AuditorQuem = 7;
        SetFieldFlag("pFldFRG", true); // At least one field must change
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsRG_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFRG", true); // At least one field must change
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsRG_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFRG", true); // At least one field must change
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _clientessocios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsRG_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _clientessocios.ID = 0;
        _clientessocios.AuditorQuem = 10;
        SetFieldFlag("pFldFRG", true); // At least one field must change
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _clientessocios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsRG_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _clientessocios.ID = id;
        _clientessocios.AuditorQuem = 15;
        SetFieldFlag("pFldFRG", true); // At least one field must change
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _clientessocios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncRG_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFRG", true); // At least one field must change
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncRG_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFRG", true); // At least one field must change
        SetFieldValue("m_FRG", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsRG_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 123;
        _clientessocios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _clientessocios.FRG.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsRG_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _clientessocios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _clientessocios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFRG", true);
        SetFieldValue("m_FRG", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsRG_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRG", true);
        SetFieldValue("m_FRG", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsRG_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRG", true);
        SetFieldValue("m_FRG", null);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncRG_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFRG", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FRG", "");
        SetFieldValue("m_FCompromisso", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsRG_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _clientessocios.FRG.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.FIdade.Should().Be(123);
    }

    [Fact]
    public void ConfigureUpdateFieldsCPF_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _clientessocios.FCPF.Should().Be("40392285029");
        _clientessocios.FIdade.Should().Be(123);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithFoneFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true);
        SetFieldValue("m_FFone", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsFone_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true); // At least one field must change
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _clientessocios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsFone_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithFoneFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true);
        SetFieldValue("m_FFone", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsFoneChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncFone_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true);
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _clientessocios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncFone_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true);
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertFone_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFFone", true); // At least one field must change
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsFone_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _clientessocios.ID = 123; // Update scenario
        _clientessocios.AuditorQuem = 7;
        SetFieldFlag("pFldFFone", true); // At least one field must change
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsFone_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFFone", true); // At least one field must change
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsFone_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFFone", true); // At least one field must change
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _clientessocios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsFone_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _clientessocios.ID = 0;
        _clientessocios.AuditorQuem = 10;
        SetFieldFlag("pFldFFone", true); // At least one field must change
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _clientessocios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsFone_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _clientessocios.ID = id;
        _clientessocios.AuditorQuem = 15;
        SetFieldFlag("pFldFFone", true); // At least one field must change
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _clientessocios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncFone_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFFone", true); // At least one field must change
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncFone_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFFone", true); // At least one field must change
        SetFieldValue("m_FFone", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsFone_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 123;
        _clientessocios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _clientessocios.FFone.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _clientessocios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsFone_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _clientessocios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _clientessocios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFFone", true);
        SetFieldValue("m_FFone", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsFone_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true);
        SetFieldValue("m_FFone", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsFone_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true);
        SetFieldValue("m_FFone", null);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncFone_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFone", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FFone", "");
        SetFieldValue("m_FCompromisso", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsFone_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _clientessocios.FFone.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _clientessocios.FIdade.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithParticipacaoFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParticipacao", true);
        SetFieldValue("m_FParticipacao", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsParticipacao_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParticipacao", true); // At least one field must change
        SetFieldValue("m_FParticipacao", "AAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsParticipacao_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParticipacao", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FParticipacao", "AAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithParticipacaoFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParticipacao", true);
        SetFieldValue("m_FParticipacao", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsParticipacaoChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParticipacao", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FParticipacao", "AAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncParticipacao_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParticipacao", true);
        SetFieldValue("m_FParticipacao", "AAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncParticipacao_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParticipacao", true);
        SetFieldValue("m_FParticipacao", "AAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertParticipacao_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFParticipacao", true); // At least one field must change
        SetFieldValue("m_FParticipacao", "AAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsParticipacao_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _clientessocios.ID = 123; // Update scenario
        _clientessocios.AuditorQuem = 7;
        SetFieldFlag("pFldFParticipacao", true); // At least one field must change
        SetFieldValue("m_FParticipacao", "AAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsParticipacao_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFParticipacao", true); // At least one field must change
        SetFieldValue("m_FParticipacao", "AAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsParticipacao_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFParticipacao", true); // At least one field must change
        SetFieldValue("m_FParticipacao", "AAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _clientessocios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsParticipacao_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _clientessocios.ID = 0;
        _clientessocios.AuditorQuem = 10;
        SetFieldFlag("pFldFParticipacao", true); // At least one field must change
        SetFieldValue("m_FParticipacao", "AAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _clientessocios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsParticipacao_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _clientessocios.ID = id;
        _clientessocios.AuditorQuem = 15;
        SetFieldFlag("pFldFParticipacao", true); // At least one field must change
        SetFieldValue("m_FParticipacao", "AAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _clientessocios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncParticipacao_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFParticipacao", true); // At least one field must change
        SetFieldValue("m_FParticipacao", "AAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncParticipacao_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFParticipacao", true); // At least one field must change
        SetFieldValue("m_FParticipacao", "AAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsParticipacao_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 123;
        _clientessocios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _clientessocios.FParticipacao.Should().Be("AAAAAAAA");
        _clientessocios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsParticipacao_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _clientessocios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _clientessocios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFParticipacao", true);
        SetFieldValue("m_FParticipacao", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsParticipacao_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParticipacao", true);
        SetFieldValue("m_FParticipacao", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsParticipacao_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParticipacao", true);
        SetFieldValue("m_FParticipacao", null);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncParticipacao_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParticipacao", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FParticipacao", "");
        SetFieldValue("m_FCompromisso", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsParticipacao_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _clientessocios.FParticipacao.Should().Be("AAAAAAAA");
        _clientessocios.FIdade.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithCargoFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCargo", true);
        SetFieldValue("m_FCargo", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsCargo_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCargo", true); // At least one field must change
        SetFieldValue("m_FCargo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsCargo_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCargo", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FCargo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithCargoFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCargo", true);
        SetFieldValue("m_FCargo", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsCargoChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCargo", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FCargo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncCargo_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCargo", true);
        SetFieldValue("m_FCargo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncCargo_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCargo", true);
        SetFieldValue("m_FCargo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertCargo_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFCargo", true); // At least one field must change
        SetFieldValue("m_FCargo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsCargo_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _clientessocios.ID = 123; // Update scenario
        _clientessocios.AuditorQuem = 7;
        SetFieldFlag("pFldFCargo", true); // At least one field must change
        SetFieldValue("m_FCargo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsCargo_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFCargo", true); // At least one field must change
        SetFieldValue("m_FCargo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsCargo_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFCargo", true); // At least one field must change
        SetFieldValue("m_FCargo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _clientessocios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsCargo_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _clientessocios.ID = 0;
        _clientessocios.AuditorQuem = 10;
        SetFieldFlag("pFldFCargo", true); // At least one field must change
        SetFieldValue("m_FCargo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _clientessocios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsCargo_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _clientessocios.ID = id;
        _clientessocios.AuditorQuem = 15;
        SetFieldFlag("pFldFCargo", true); // At least one field must change
        SetFieldValue("m_FCargo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _clientessocios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncCargo_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFCargo", true); // At least one field must change
        SetFieldValue("m_FCargo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncCargo_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFCargo", true); // At least one field must change
        SetFieldValue("m_FCargo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsCargo_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 123;
        _clientessocios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _clientessocios.FCargo.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsCargo_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _clientessocios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _clientessocios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFCargo", true);
        SetFieldValue("m_FCargo", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsCargo_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCargo", true);
        SetFieldValue("m_FCargo", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsCargo_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCargo", true);
        SetFieldValue("m_FCargo", null);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncCargo_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCargo", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FCargo", "");
        SetFieldValue("m_FCompromisso", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsCargo_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _clientessocios.FCargo.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.FIdade.Should().Be(123);
    }

    [Fact]
    public void ConfigureUpdateFieldsEMail_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _clientessocios.FEMail.Should().Be("menphis@menphis.com.br");
        _clientessocios.FIdade.Should().Be(123);
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithObsFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFObs", true);
        SetFieldValue("m_FObs", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsObs_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFObs", true); // At least one field must change
        SetFieldValue("m_FObs", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _clientessocios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsObs_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFObs", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FObs", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithObsFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFObs", true);
        SetFieldValue("m_FObs", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsObsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFObs", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FObs", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncObs_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFObs", true);
        SetFieldValue("m_FObs", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _clientessocios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncObs_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFObs", true);
        SetFieldValue("m_FObs", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertObs_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFObs", true); // At least one field must change
        SetFieldValue("m_FObs", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsObs_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _clientessocios.ID = 123; // Update scenario
        _clientessocios.AuditorQuem = 7;
        SetFieldFlag("pFldFObs", true); // At least one field must change
        SetFieldValue("m_FObs", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsObs_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFObs", true); // At least one field must change
        SetFieldValue("m_FObs", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsObs_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFObs", true); // At least one field must change
        SetFieldValue("m_FObs", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _clientessocios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsObs_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _clientessocios.ID = 0;
        _clientessocios.AuditorQuem = 10;
        SetFieldFlag("pFldFObs", true); // At least one field must change
        SetFieldValue("m_FObs", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _clientessocios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsObs_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _clientessocios.ID = id;
        _clientessocios.AuditorQuem = 15;
        SetFieldFlag("pFldFObs", true); // At least one field must change
        SetFieldValue("m_FObs", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _clientessocios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncObs_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFObs", true); // At least one field must change
        SetFieldValue("m_FObs", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncObs_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFObs", true); // At least one field must change
        SetFieldValue("m_FObs", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsObs_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 123;
        _clientessocios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _clientessocios.FObs.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _clientessocios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsObs_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _clientessocios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _clientessocios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFObs", true);
        SetFieldValue("m_FObs", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsObs_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFObs", true);
        SetFieldValue("m_FObs", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsObs_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFObs", true);
        SetFieldValue("m_FObs", null);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncObs_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFObs", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FObs", "");
        SetFieldValue("m_FCompromisso", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsObs_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _clientessocios.FObs.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        _clientessocios.FIdade.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithCNHFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCNH", true);
        SetFieldValue("m_FCNH", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsCNH_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCNH", true); // At least one field must change
        SetFieldValue("m_FCNH", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsCNH_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCNH", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FCNH", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithCNHFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCNH", true);
        SetFieldValue("m_FCNH", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsCNHChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCNH", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FCNH", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncCNH_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCNH", true);
        SetFieldValue("m_FCNH", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncCNH_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCNH", true);
        SetFieldValue("m_FCNH", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertCNH_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFCNH", true); // At least one field must change
        SetFieldValue("m_FCNH", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsCNH_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _clientessocios.ID = 123; // Update scenario
        _clientessocios.AuditorQuem = 7;
        SetFieldFlag("pFldFCNH", true); // At least one field must change
        SetFieldValue("m_FCNH", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsCNH_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFCNH", true); // At least one field must change
        SetFieldValue("m_FCNH", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsCNH_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFCNH", true); // At least one field must change
        SetFieldValue("m_FCNH", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _clientessocios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsCNH_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _clientessocios.ID = 0;
        _clientessocios.AuditorQuem = 10;
        SetFieldFlag("pFldFCNH", true); // At least one field must change
        SetFieldValue("m_FCNH", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _clientessocios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsCNH_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _clientessocios.ID = id;
        _clientessocios.AuditorQuem = 15;
        SetFieldFlag("pFldFCNH", true); // At least one field must change
        SetFieldValue("m_FCNH", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _clientessocios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncCNH_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFCNH", true); // At least one field must change
        SetFieldValue("m_FCNH", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncCNH_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFCNH", true); // At least one field must change
        SetFieldValue("m_FCNH", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsCNH_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 123;
        _clientessocios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _clientessocios.FCNH.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsCNH_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _clientessocios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _clientessocios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFCNH", true);
        SetFieldValue("m_FCNH", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsCNH_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCNH", true);
        SetFieldValue("m_FCNH", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsCNH_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCNH", true);
        SetFieldValue("m_FCNH", null);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncCNH_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCNH", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FCNH", "");
        SetFieldValue("m_FCompromisso", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsCNH_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _clientessocios.FCNH.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.FIdade.Should().Be(123);
    }

    [Fact]
    public void ConfigureUpdateFieldsCNPJ_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _clientessocios.FCNPJ.Should().Be("93016944000138");
        _clientessocios.FIdade.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithInscEstFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFInscEst", true);
        SetFieldValue("m_FInscEst", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsInscEst_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFInscEst", true); // At least one field must change
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsInscEst_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFInscEst", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithInscEstFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFInscEst", true);
        SetFieldValue("m_FInscEst", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsInscEstChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFInscEst", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncInscEst_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFInscEst", true);
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncInscEst_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFInscEst", true);
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertInscEst_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFInscEst", true); // At least one field must change
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsInscEst_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _clientessocios.ID = 123; // Update scenario
        _clientessocios.AuditorQuem = 7;
        SetFieldFlag("pFldFInscEst", true); // At least one field must change
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsInscEst_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFInscEst", true); // At least one field must change
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsInscEst_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFInscEst", true); // At least one field must change
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _clientessocios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsInscEst_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _clientessocios.ID = 0;
        _clientessocios.AuditorQuem = 10;
        SetFieldFlag("pFldFInscEst", true); // At least one field must change
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _clientessocios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsInscEst_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _clientessocios.ID = id;
        _clientessocios.AuditorQuem = 15;
        SetFieldFlag("pFldFInscEst", true); // At least one field must change
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _clientessocios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncInscEst_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFInscEst", true); // At least one field must change
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncInscEst_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFInscEst", true); // At least one field must change
        SetFieldValue("m_FInscEst", "AAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsInscEst_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 123;
        _clientessocios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _clientessocios.FInscEst.Should().Be("AAAAAAAAAAAAA");
        _clientessocios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsInscEst_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _clientessocios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _clientessocios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFInscEst", true);
        SetFieldValue("m_FInscEst", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsInscEst_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFInscEst", true);
        SetFieldValue("m_FInscEst", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsInscEst_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFInscEst", true);
        SetFieldValue("m_FInscEst", null);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncInscEst_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFInscEst", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FInscEst", "");
        SetFieldValue("m_FCompromisso", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsInscEst_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _clientessocios.FInscEst.Should().Be("AAAAAAAAAAAAA");
        _clientessocios.FIdade.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithSocioEmpresaAdminNomeFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSocioEmpresaAdminNome", true);
        SetFieldValue("m_FSocioEmpresaAdminNome", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsSocioEmpresaAdminNome_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSocioEmpresaAdminNome", true); // At least one field must change
        SetFieldValue("m_FSocioEmpresaAdminNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsSocioEmpresaAdminNome_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSocioEmpresaAdminNome", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FSocioEmpresaAdminNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithSocioEmpresaAdminNomeFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSocioEmpresaAdminNome", true);
        SetFieldValue("m_FSocioEmpresaAdminNome", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsSocioEmpresaAdminNomeChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSocioEmpresaAdminNome", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FSocioEmpresaAdminNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncSocioEmpresaAdminNome_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSocioEmpresaAdminNome", true);
        SetFieldValue("m_FSocioEmpresaAdminNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncSocioEmpresaAdminNome_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSocioEmpresaAdminNome", true);
        SetFieldValue("m_FSocioEmpresaAdminNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertSocioEmpresaAdminNome_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFSocioEmpresaAdminNome", true); // At least one field must change
        SetFieldValue("m_FSocioEmpresaAdminNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsSocioEmpresaAdminNome_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _clientessocios.ID = 123; // Update scenario
        _clientessocios.AuditorQuem = 7;
        SetFieldFlag("pFldFSocioEmpresaAdminNome", true); // At least one field must change
        SetFieldValue("m_FSocioEmpresaAdminNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsSocioEmpresaAdminNome_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFSocioEmpresaAdminNome", true); // At least one field must change
        SetFieldValue("m_FSocioEmpresaAdminNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsSocioEmpresaAdminNome_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFSocioEmpresaAdminNome", true); // At least one field must change
        SetFieldValue("m_FSocioEmpresaAdminNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _clientessocios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsSocioEmpresaAdminNome_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _clientessocios.ID = 0;
        _clientessocios.AuditorQuem = 10;
        SetFieldFlag("pFldFSocioEmpresaAdminNome", true); // At least one field must change
        SetFieldValue("m_FSocioEmpresaAdminNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _clientessocios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsSocioEmpresaAdminNome_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _clientessocios.ID = id;
        _clientessocios.AuditorQuem = 15;
        SetFieldFlag("pFldFSocioEmpresaAdminNome", true); // At least one field must change
        SetFieldValue("m_FSocioEmpresaAdminNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _clientessocios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncSocioEmpresaAdminNome_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFSocioEmpresaAdminNome", true); // At least one field must change
        SetFieldValue("m_FSocioEmpresaAdminNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncSocioEmpresaAdminNome_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFSocioEmpresaAdminNome", true); // At least one field must change
        SetFieldValue("m_FSocioEmpresaAdminNome", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsSocioEmpresaAdminNome_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 123;
        _clientessocios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _clientessocios.FSocioEmpresaAdminNome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsSocioEmpresaAdminNome_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _clientessocios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _clientessocios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFSocioEmpresaAdminNome", true);
        SetFieldValue("m_FSocioEmpresaAdminNome", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsSocioEmpresaAdminNome_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSocioEmpresaAdminNome", true);
        SetFieldValue("m_FSocioEmpresaAdminNome", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsSocioEmpresaAdminNome_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSocioEmpresaAdminNome", true);
        SetFieldValue("m_FSocioEmpresaAdminNome", null);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncSocioEmpresaAdminNome_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFSocioEmpresaAdminNome", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FSocioEmpresaAdminNome", "");
        SetFieldValue("m_FCompromisso", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsSocioEmpresaAdminNome_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _clientessocios.FSocioEmpresaAdminNome.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.FIdade.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithEnderecoSocioFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEnderecoSocio", true);
        SetFieldValue("m_FEnderecoSocio", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsEnderecoSocio_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEnderecoSocio", true); // At least one field must change
        SetFieldValue("m_FEnderecoSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsEnderecoSocio_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEnderecoSocio", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FEnderecoSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithEnderecoSocioFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEnderecoSocio", true);
        SetFieldValue("m_FEnderecoSocio", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsEnderecoSocioChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEnderecoSocio", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FEnderecoSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncEnderecoSocio_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEnderecoSocio", true);
        SetFieldValue("m_FEnderecoSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncEnderecoSocio_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEnderecoSocio", true);
        SetFieldValue("m_FEnderecoSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertEnderecoSocio_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFEnderecoSocio", true); // At least one field must change
        SetFieldValue("m_FEnderecoSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsEnderecoSocio_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _clientessocios.ID = 123; // Update scenario
        _clientessocios.AuditorQuem = 7;
        SetFieldFlag("pFldFEnderecoSocio", true); // At least one field must change
        SetFieldValue("m_FEnderecoSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsEnderecoSocio_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFEnderecoSocio", true); // At least one field must change
        SetFieldValue("m_FEnderecoSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsEnderecoSocio_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFEnderecoSocio", true); // At least one field must change
        SetFieldValue("m_FEnderecoSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _clientessocios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsEnderecoSocio_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _clientessocios.ID = 0;
        _clientessocios.AuditorQuem = 10;
        SetFieldFlag("pFldFEnderecoSocio", true); // At least one field must change
        SetFieldValue("m_FEnderecoSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _clientessocios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsEnderecoSocio_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _clientessocios.ID = id;
        _clientessocios.AuditorQuem = 15;
        SetFieldFlag("pFldFEnderecoSocio", true); // At least one field must change
        SetFieldValue("m_FEnderecoSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _clientessocios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncEnderecoSocio_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFEnderecoSocio", true); // At least one field must change
        SetFieldValue("m_FEnderecoSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncEnderecoSocio_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFEnderecoSocio", true); // At least one field must change
        SetFieldValue("m_FEnderecoSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsEnderecoSocio_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 123;
        _clientessocios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _clientessocios.FEnderecoSocio.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsEnderecoSocio_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _clientessocios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _clientessocios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFEnderecoSocio", true);
        SetFieldValue("m_FEnderecoSocio", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsEnderecoSocio_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEnderecoSocio", true);
        SetFieldValue("m_FEnderecoSocio", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsEnderecoSocio_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEnderecoSocio", true);
        SetFieldValue("m_FEnderecoSocio", null);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncEnderecoSocio_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFEnderecoSocio", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FEnderecoSocio", "");
        SetFieldValue("m_FCompromisso", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsEnderecoSocio_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _clientessocios.FEnderecoSocio.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.FIdade.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithBairroSocioFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairroSocio", true);
        SetFieldValue("m_FBairroSocio", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsBairroSocio_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairroSocio", true); // At least one field must change
        SetFieldValue("m_FBairroSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsBairroSocio_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairroSocio", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FBairroSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithBairroSocioFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairroSocio", true);
        SetFieldValue("m_FBairroSocio", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsBairroSocioChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairroSocio", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FBairroSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncBairroSocio_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairroSocio", true);
        SetFieldValue("m_FBairroSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncBairroSocio_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairroSocio", true);
        SetFieldValue("m_FBairroSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertBairroSocio_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFBairroSocio", true); // At least one field must change
        SetFieldValue("m_FBairroSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsBairroSocio_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _clientessocios.ID = 123; // Update scenario
        _clientessocios.AuditorQuem = 7;
        SetFieldFlag("pFldFBairroSocio", true); // At least one field must change
        SetFieldValue("m_FBairroSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsBairroSocio_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFBairroSocio", true); // At least one field must change
        SetFieldValue("m_FBairroSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsBairroSocio_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFBairroSocio", true); // At least one field must change
        SetFieldValue("m_FBairroSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _clientessocios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsBairroSocio_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _clientessocios.ID = 0;
        _clientessocios.AuditorQuem = 10;
        SetFieldFlag("pFldFBairroSocio", true); // At least one field must change
        SetFieldValue("m_FBairroSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _clientessocios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsBairroSocio_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _clientessocios.ID = id;
        _clientessocios.AuditorQuem = 15;
        SetFieldFlag("pFldFBairroSocio", true); // At least one field must change
        SetFieldValue("m_FBairroSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _clientessocios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncBairroSocio_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFBairroSocio", true); // At least one field must change
        SetFieldValue("m_FBairroSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncBairroSocio_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFBairroSocio", true); // At least one field must change
        SetFieldValue("m_FBairroSocio", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsBairroSocio_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 123;
        _clientessocios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _clientessocios.FBairroSocio.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsBairroSocio_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _clientessocios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _clientessocios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFBairroSocio", true);
        SetFieldValue("m_FBairroSocio", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsBairroSocio_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairroSocio", true);
        SetFieldValue("m_FBairroSocio", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsBairroSocio_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairroSocio", true);
        SetFieldValue("m_FBairroSocio", null);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncBairroSocio_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFBairroSocio", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FBairroSocio", "");
        SetFieldValue("m_FCompromisso", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsBairroSocio_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _clientessocios.FBairroSocio.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.FIdade.Should().Be(123);
    }

    [Theory]
    [InlineData("AAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithCEPSocioFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCEPSocio", true);
        SetFieldValue("m_FCEPSocio", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsCEPSocio_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCEPSocio", true); // At least one field must change
        SetFieldValue("m_FCEPSocio", "AAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsCEPSocio_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCEPSocio", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FCEPSocio", "AAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithCEPSocioFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCEPSocio", true);
        SetFieldValue("m_FCEPSocio", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsCEPSocioChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCEPSocio", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FCEPSocio", "AAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncCEPSocio_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCEPSocio", true);
        SetFieldValue("m_FCEPSocio", "AAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncCEPSocio_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCEPSocio", true);
        SetFieldValue("m_FCEPSocio", "AAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertCEPSocio_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFCEPSocio", true); // At least one field must change
        SetFieldValue("m_FCEPSocio", "AAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsCEPSocio_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _clientessocios.ID = 123; // Update scenario
        _clientessocios.AuditorQuem = 7;
        SetFieldFlag("pFldFCEPSocio", true); // At least one field must change
        SetFieldValue("m_FCEPSocio", "AAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsCEPSocio_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFCEPSocio", true); // At least one field must change
        SetFieldValue("m_FCEPSocio", "AAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsCEPSocio_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFCEPSocio", true); // At least one field must change
        SetFieldValue("m_FCEPSocio", "AAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _clientessocios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsCEPSocio_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _clientessocios.ID = 0;
        _clientessocios.AuditorQuem = 10;
        SetFieldFlag("pFldFCEPSocio", true); // At least one field must change
        SetFieldValue("m_FCEPSocio", "AAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _clientessocios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsCEPSocio_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _clientessocios.ID = id;
        _clientessocios.AuditorQuem = 15;
        SetFieldFlag("pFldFCEPSocio", true); // At least one field must change
        SetFieldValue("m_FCEPSocio", "AAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _clientessocios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncCEPSocio_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFCEPSocio", true); // At least one field must change
        SetFieldValue("m_FCEPSocio", "AAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncCEPSocio_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFCEPSocio", true); // At least one field must change
        SetFieldValue("m_FCEPSocio", "AAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsCEPSocio_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 123;
        _clientessocios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _clientessocios.FCEPSocio.Should().Be("AAAAAAAA");
        _clientessocios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsCEPSocio_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _clientessocios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _clientessocios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFCEPSocio", true);
        SetFieldValue("m_FCEPSocio", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsCEPSocio_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCEPSocio", true);
        SetFieldValue("m_FCEPSocio", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsCEPSocio_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCEPSocio", true);
        SetFieldValue("m_FCEPSocio", null);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncCEPSocio_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFCEPSocio", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FCEPSocio", "");
        SetFieldValue("m_FCompromisso", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsCEPSocio_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _clientessocios.FCEPSocio.Should().Be("AAAAAAAA");
        _clientessocios.FIdade.Should().Be(123);
    }

    [Theory]
    [InlineDataame")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithFaxFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true);
        SetFieldValue("m_FFax", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsFax_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true); // At least one field must change
        SetFieldValue("m_FFax
        _clientessocios.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsFax_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FFax", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineDataame")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithFaxFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true);
        SetFieldValue("m_FFax", value);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsFaxChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FFax
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncFax_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true);
        SetFieldValue("m_FFax
        _clientessocios.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncFax_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true);
        SetFieldValue("m_FFax
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertFax_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFFax", true); // At least one field must change
        SetFieldValue("m_FFax
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsFax_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _clientessocios.ID = 123; // Update scenario
        _clientessocios.AuditorQuem = 7;
        SetFieldFlag("pFldFFax", true); // At least one field must change
        SetFieldValue("m_FFax
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsFax_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFFax", true); // At least one field must change
        SetFieldValue("m_FFax
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsFax_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFFax", true); // At least one field must change
        SetFieldValue("m_FFax
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _clientessocios.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsFax_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _clientessocios.ID = 0;
        _clientessocios.AuditorQuem = 10;
        SetFieldFlag("pFldFFax", true); // At least one field must change
        SetFieldValue("m_FFax", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _clientessocios.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsFax_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _clientessocios.ID = id;
        _clientessocios.AuditorQuem = 15;
        SetFieldFlag("pFldFFax", true); // At least one field must change
        SetFieldValue("m_FFax
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _clientessocios.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncFax_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 5;
        SetFieldFlag("pFldFFax", true); // At least one field must change
        SetFieldValue("m_FFax
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _clientessocios.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncFax_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _clientessocios.ID = 0; // Insert scenario
        _clientessocios.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFFax", true); // At least one field must change
        SetFieldValue("m_FFax
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _clientessocios.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsFax_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 123;
        _clientessocios.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _clientessocios.FFax.Should().Be
        _clientessocios.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsFax_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _clientessocios.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _clientessocios.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFFax", true);
        SetFieldValue("m_FFax", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsFax_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true);
        SetFieldValue("m_FFax", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsFax_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true);
        SetFieldValue("m_FFax", null);
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncFax_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFFax", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FFax", "");
        SetFieldValue("m_FCompromisso", "");
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _clientessocios.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsFax_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _clientessocios.FFax.Should().Be
        _clientessocios.FIdade.Should().Be(123);
    }

    [Fact]
    public void ConfigureUpdateFieldsClass_Integration_WithAllFieldsChanged_ShouldProcessAllFields()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _clientessocios.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _clientessocios.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - All field values should be preserved
        _clientessocios.FClass.Should().Be("A");
        _clientessocios.FIdade.Should().Be(123);
    }

#endregion
    public virtual void Dispose()
    {
        _clientessocios?.Dispose();
    }
}