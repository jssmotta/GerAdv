// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface ITipoValorProcessoValidation
{
    Task<bool> ValidateReg(Models.TipoValorProcesso reg, ITipoValorProcessoService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, ITipoValorProcessoService service, IProValoresService provaloresService, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class TipoValorProcessoValidation : ITipoValorProcessoValidation
{
    public async Task<bool> CanDelete(int id, ITipoValorProcessoService service, IProValoresService provaloresService, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        var provaloresExists0 = await provaloresService.Filter(new Filters.FilterProValores { TipoValorProcesso = id }, uri);
        if (provaloresExists0 != null && provaloresExists0.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Pro Valores associados a ele.");
        return true;
    }

    private bool ValidSizes(Models.TipoValorProcesso reg)
    {
        if (reg.Descricao.Length > 100)
            throw new SGValidationException($"Descricao deve ter no máximo 100 caracteres.");
        if (reg.GUID.Length > 50)
            throw new SGValidationException($"GUID deve ter no máximo 50 caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.TipoValorProcesso reg, ITipoValorProcessoService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Descricao))
            throw new SGValidationException("Descrição é obrigatório");
        if (await IsDuplicado(reg, service, uri))
            throw new SGValidationException($"Tipo Valor Processo '{reg.Descricao}'  - Descricao");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.Descricao.IsEmpty())
            throw new SGValidationException("Descricao é obrigatório.");
        if (reg.GUID.IsEmpty())
            throw new SGValidationException("GUID é obrigatório.");
        return true;
    }

    private async Task<bool> IsDuplicado(Models.TipoValorProcesso reg, ITipoValorProcessoService service, string uri)
    {
        var existingTipoValorProcesso = (await service.Filter(new Filters.FilterTipoValorProcesso { Descricao = reg.Descricao }, uri)).FirstOrDefault(); // TRACK 10042025
        return existingTipoValorProcesso != null && existingTipoValorProcesso.Id > 0 && existingTipoValorProcesso.Id != reg.Id;
    }
}