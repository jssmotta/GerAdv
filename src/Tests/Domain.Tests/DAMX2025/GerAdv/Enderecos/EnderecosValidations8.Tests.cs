// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class EnderecosValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFEnderecosFactory> _mockEnderecosFactory;
    private readonly Mock<IEnderecosReader> _mockReader;
    private readonly EnderecosValidation _validation;
    private readonly Mock<IEnderecosService> _mockEnderecosService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<ICidadeReader> _mockCidadeReader;
    private readonly EnderecosService _service;
    private readonly string _validUri = "test-uri";
    public EnderecosValidationTests()
    {
        _mockEnderecosFactory = new Mock<IFEnderecosFactory>();
        _mockReader = new Mock<IEnderecosReader>();
        _validation = new EnderecosValidation();
        _mockEnderecosService = new Mock<IEnderecosService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockCidadeReader = new Mock<ICidadeReader>();
    }

#region Class Structure Tests
    [Fact]
    public void EnderecosValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IEnderecosValidation>();
    }

    [Fact]
    public void EnderecosValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(EnderecosValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void EnderecosValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(EnderecosValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.Enderecos CreateValidEnderecos()
    {
        return new Models.Enderecos
        {
            Id = 1,
            TopIndex = false,
            Descricao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Contato = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            DtNasc = "24/04/1975",
            Endereco = "Rua das Flores, 123",
            Bairro = "Centro",
            Privativo = true,
            AddContato = false,
            CEP = "01234-567",
            OAB = "AAAAAAAAAAAAAAAAAA",
            OBS = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Fone = "(11) 99999-9999",
            Fax = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Tratamento = "AAAAAAAAAAAAAAAAAA",
            Cidade = 0,
            Site = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            EMail = "test@email.com",
            Quem = 0,
            QuemIndicou = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            ReportECBOnly = true
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockEnderecosService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterEnderecos>(), It.IsAny<string>())).ReturnsAsync(new List<EnderecosResponseAll>());
        // Setup other mocks but don't override the Enderecoss service mock
        _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.CidadeResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockEnderecosService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterEnderecos>(), It.IsAny<string>())).ReturnsAsync(new List<EnderecosResponseAll>());
        // Setup other mocks but don't override the Enderecoss service mock
        _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.CidadeResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var enderecos = new Models.Enderecos
        {
            Id = 1,
            TopIndex = false,
            Descricao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Contato = null,
            DtNasc = null,
            Endereco = null,
            Bairro = null,
            Privativo = true,
            AddContato = false,
            CEP = null,
            OAB = null,
            OBS = null,
            Fone = null,
            Fax = null,
            Tratamento = null,
            Site = null,
            EMail = null,
            QuemIndicou = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(enderecos, _mockEnderecosService.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockEnderecosService.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region EMail Validation Tests
    [Fact]
    public async Task ValidateReg_WithInvalidEMail_ShouldThrowSGValidationException()
    {
        // Arrange
        var enderecos = CreateValidEnderecos();
        enderecos.EMail = "invalid-email";
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(enderecos, _mockEnderecosService.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("formato inválido.");
    }

    [Fact]
    public async Task ValidateReg_WithValidEMail_ShouldPass()
    {
        // Arrange
        var enderecos = CreateValidEnderecos();
        enderecos.EMail = "menphis@example.com";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(enderecos, _mockEnderecosService.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithEmptyEMail_ShouldPass()
    {
        // Arrange
        var enderecos = CreateValidEnderecos();
        enderecos.EMail = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(enderecos, _mockEnderecosService.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region DtNasc Validation Tests
    [Theory]
    [InlineData("01/01/1899")]
    [InlineData("31/12/1899")]
    public async Task ValidateReg_WithDtNascBeforeMinDate_ShouldThrowSGValidationException(string invalidDate)
    {
        // Arrange
        var enderecos = CreateValidEnderecos();
        enderecos.DtNasc = invalidDate;
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(enderecos, _mockEnderecosService.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("01/01/1900.");
    }

    [Fact]
    public async Task ValidateReg_WithValidDtNasc_ShouldPass()
    {
        // Arrange
        var enderecos = CreateValidEnderecos();
        enderecos.DtNasc = "01/01/1990";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(enderecos, _mockEnderecosService.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullDtNasc_ShouldPass()
    {
        // Arrange
        var enderecos = CreateValidEnderecos();
        enderecos.DtNasc = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(enderecos, _mockEnderecosService.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithInvalidDateDtNascFormat_ShouldPass()
    {
        // Arrange
        var enderecos = CreateValidEnderecos();
        enderecos.DtNasc = "invalid-date";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(enderecos, _mockEnderecosService.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue(); // Invalid format is ignored, not validated
    }

    [Fact]
    public async Task ValidateReg_WithEmptyDtNasc_ShouldPass()
    {
        // Arrange
        var enderecos = CreateValidEnderecos();
        enderecos.DtNasc = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(enderecos, _mockEnderecosService.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateRegDtNasc_WithBoundaryValues_ShouldPass()
    {
        // Arrange
        var enderecos = CreateValidEnderecos();
        enderecos.DtNasc = "01/01/1900"; // Exactly on the boundary
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(enderecos, _mockEnderecosService.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithTodayDateDtNasc_ShouldPass()
    {
        // Arrange
        var enderecos = CreateValidEnderecos();
        enderecos.DtNasc = DateTime.Now.ToString("dd/MM/yyyy");
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(enderecos, _mockEnderecosService.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithTomorrowDateDtNasc_ShouldNotPass()
    {
        // Arrange
        var enderecos = CreateValidEnderecos();
        enderecos.DtNasc = DateTime.Now.AddDays(1).ToString("dd/MM/yyyy");
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(enderecos, _mockEnderecosService.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não pode ser uma data futura.");
    }

#region Foreign Key Validation Tests - Cidade
    [Fact]
    public async Task ValidateReg_WithInvalidCidade_ShouldThrowSGValidationException()
    {
        // Arrange
        var enderecos = CreateValidEnderecos();
        enderecos.Cidade = 999;
        _mockCidadeReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.CidadeResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(enderecos, _mockEnderecosService.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedCidadeId_ShouldThrowSGValidationException()
    {
        // Arrange
        var enderecos = CreateValidEnderecos();
        enderecos.Cidade = 999;
        var reg888 = new Models.Response.CidadeResponse
        {
            Id = 888
        }; // Different ID
        _mockCidadeReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(enderecos, _mockEnderecosService.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidCidade_ShouldPass()
    {
        // Arrange
        var enderecos = CreateValidEnderecos();
        enderecos.Cidade = 123;
        var reg123 = new Models.Response.CidadeResponse
        {
            Id = 123
        };
        _mockCidadeReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(enderecos, _mockEnderecosService.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyCidade_ShouldPass()
    {
        // Arrange
        var enderecos = CreateValidEnderecos();
        enderecos.Cidade = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(enderecos, _mockEnderecosService.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockCidadeReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}