// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
/// <summary>
/// Comprehensive unit tests for ConfigureUpdateFields and ConfigureAuditorFields methods in DBSituacao class
/// These methods are critical for database update operations and auditing functionality
/// Tests both synchronous and asynchronous Update methods
/// </summary>
public class DBSituacaoConfigureMethodsTests : IDisposable
{
    private readonly DBSituacao _situacao;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBSituacaoConfigureMethodsTests()
    {
        _situacao = new DBSituacao();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void ConfigureUpdateFields_WhenNoFieldsChanged_ShouldNotUpdateDatabase()
    {
        // Arrange
        ResetAllFieldFlags();
        _situacao.ID = 1; // Update scenario
        // Act
        var result = _situacao.Update(_mockConnection.Object);
        // Assert - Should return 0 because no fields changed
        result.Should().Be(0);
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WhenNoFieldsChanged_ShouldNotUpdateDatabase()
    {
        // Arrange
        ResetAllFieldFlags();
        _situacao.ID = 1; // Update scenario
        // Act & Assert - For async, when no fields changed and it's an update, it should return 0 or throw exception
        try
        {
            var result = await _situacao.UpdateAsync(_mockConnection.Object);
            // If no exception is thrown, verify the result indicates no update was needed
            result.Should().Be(0, "When no fields changed in update scenario, should return 0");
        }
        catch (Exception ex)
        {
            // If exception is thrown due to mocked connection, that's also acceptable
            ex.Should().NotBeNull();
        }
    }

#region Helper Methods
    private void SetFieldFlag(string fieldName, bool value)
    {
        var field = typeof(DBSituacao).GetField(fieldName, BindingFlags.NonPublic | BindingFlags.Instance);
        field?.SetValue(_situacao, value);
    }

    private void SetFieldValue(string fieldName, object? value)
    {
        var field = typeof(DBSituacao).GetField(fieldName, BindingFlags.NonPublic | BindingFlags.Instance);
        try
        {
            field?.SetValue(_situacao, value);
        }
        catch
        {
            field?.SetValue(_situacao, Convert.ToDateTime(value));
        }
    }

    private void ResetAllFieldFlags()
    {
        var fieldFlags = new[]
        {
            "pFldFParte_Int",
            "pFldFGUID",
            "pFldFParte_Opo",
            "pFldFTop",
        };
        foreach (var flag in fieldFlags)
        {
            SetFieldFlag(flag, false);
        }
    }

    private void SetAllFieldFlags(bool value)
    {
        var fieldFlags = new[]
        {
            "pFldFParte_Int",
            "pFldFGUID",
            "pFldFParte_Opo",
            "pFldFTop",
        };
        foreach (var flag in fieldFlags)
        {
            SetFieldFlag(flag, value);
        }
    }

    private void SetAllFieldValues()
    {
        SetFieldValue("m_FParte_Int", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FParte_Opo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        SetFieldValue("m_FTop", false);
    }

#endregion
#region Fields_All
    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithParte_IntFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParte_Int", true);
        SetFieldValue("m_FParte_Int", value);
        _situacao.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsParte_Int_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParte_Int", true); // At least one field must change
        SetFieldValue("m_FParte_Int", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _situacao.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsParte_Int_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParte_Int", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FParte_Int", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _situacao.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithParte_IntFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParte_Int", true);
        SetFieldValue("m_FParte_Int", value);
        _situacao.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _situacao.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsParte_IntChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParte_Int", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FParte_Int", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _situacao.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _situacao.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncParte_Int_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParte_Int", true);
        SetFieldValue("m_FParte_Int", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _situacao.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _situacao.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncParte_Int_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParte_Int", true);
        SetFieldValue("m_FParte_Int", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _situacao.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _situacao.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertParte_Int_ShouldSetInsertAuditFields()
    {
        // Arrange
        _situacao.ID = 0; // Insert scenario
        _situacao.AuditorQuem = 5;
        SetFieldFlag("pFldFParte_Int", true); // At least one field must change
        SetFieldValue("m_FParte_Int", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _situacao.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsParte_Int_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _situacao.ID = 123; // Update scenario
        _situacao.AuditorQuem = 7;
        SetFieldFlag("pFldFParte_Int", true); // At least one field must change
        SetFieldValue("m_FParte_Int", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _situacao.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsParte_Int_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _situacao.ID = 0; // Insert scenario
        _situacao.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFParte_Int", true); // At least one field must change
        SetFieldValue("m_FParte_Int", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _situacao.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsParte_Int_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _situacao.ID = 0; // Insert scenario
        _situacao.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFParte_Int", true); // At least one field must change
        SetFieldValue("m_FParte_Int", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _situacao.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsParte_Int_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _situacao.ID = 0;
        _situacao.AuditorQuem = 10;
        SetFieldFlag("pFldFParte_Int", true); // At least one field must change
        SetFieldValue("m_FParte_Int", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _situacao.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsParte_Int_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _situacao.ID = id;
        _situacao.AuditorQuem = 15;
        SetFieldFlag("pFldFParte_Int", true); // At least one field must change
        SetFieldValue("m_FParte_Int", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _situacao.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncParte_Int_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _situacao.ID = 0; // Insert scenario
        _situacao.AuditorQuem = 5;
        SetFieldFlag("pFldFParte_Int", true); // At least one field must change
        SetFieldValue("m_FParte_Int", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _situacao.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _situacao.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncParte_Int_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _situacao.ID = 0; // Insert scenario
        _situacao.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFParte_Int", true); // At least one field must change
        SetFieldValue("m_FParte_Int", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _situacao.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _situacao.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsParte_Int_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _situacao.ID = 123;
        _situacao.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _situacao.FParte_Int.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _situacao.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsParte_Int_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _situacao.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _situacao.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFParte_Int", true);
        SetFieldValue("m_FParte_Int", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsParte_Int_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParte_Int", true);
        SetFieldValue("m_FParte_Int", "");
        _situacao.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsParte_Int_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParte_Int", true);
        SetFieldValue("m_FParte_Int", null);
        _situacao.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncParte_Int_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParte_Int", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FParte_Int", "");
        SetFieldValue("m_FCompromisso", "");
        _situacao.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _situacao.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithGUIDFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", value);
        _situacao.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsGUID_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _situacao.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsGUID_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _situacao.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithGUIDFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", value);
        _situacao.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _situacao.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsGUIDChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _situacao.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _situacao.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncGUID_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _situacao.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _situacao.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncGUID_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _situacao.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _situacao.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertGUID_ShouldSetInsertAuditFields()
    {
        // Arrange
        _situacao.ID = 0; // Insert scenario
        _situacao.AuditorQuem = 5;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _situacao.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsGUID_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _situacao.ID = 123; // Update scenario
        _situacao.AuditorQuem = 7;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _situacao.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsGUID_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _situacao.ID = 0; // Insert scenario
        _situacao.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _situacao.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsGUID_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _situacao.ID = 0; // Insert scenario
        _situacao.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _situacao.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsGUID_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _situacao.ID = 0;
        _situacao.AuditorQuem = 10;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _situacao.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsGUID_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _situacao.ID = id;
        _situacao.AuditorQuem = 15;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _situacao.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncGUID_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _situacao.ID = 0; // Insert scenario
        _situacao.AuditorQuem = 5;
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _situacao.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _situacao.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncGUID_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _situacao.ID = 0; // Insert scenario
        _situacao.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFGUID", true); // At least one field must change
        SetFieldValue("m_FGUID", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _situacao.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _situacao.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsGUID_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _situacao.ID = 123;
        _situacao.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _situacao.FGUID.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _situacao.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsGUID_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _situacao.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _situacao.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsGUID_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", "");
        _situacao.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsGUID_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldValue("m_FGUID", null);
        _situacao.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncGUID_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFGUID", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FGUID", "");
        SetFieldValue("m_FCompromisso", "");
        _situacao.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _situacao.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public void ConfigureUpdateFields_WithParte_OpoFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParte_Opo", true);
        SetFieldValue("m_FParte_Opo", value);
        _situacao.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsParte_Opo_OnInsert_ShouldConfigureBooleanFieldsAutomatically()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParte_Opo", true); // At least one field must change
        SetFieldValue("m_FParte_Opo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _situacao.ID = 0; // Insert scenario
        SetFieldValue("m_FCancelou", true);
        SetFieldValue("m_FRecibo", false);
        SetFieldValue("m_FNaoCampareceu", true);
        SetFieldValue("m_FLiberado", false);
        SetFieldValue("m_FImportante", true);
        SetFieldValue("m_FConcluido", false);
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureUpdateFieldsParte_Opo_WithMultipleFieldsChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParte_Opo", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FParte_Opo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _situacao.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAA Name")]
    [InlineData("Another Client")]
    [InlineData("Valid Client")]
    public async Task ConfigureUpdateFieldsAsync_WithParte_OpoFieldChanged_ShouldProcessUpdate(string value)
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParte_Opo", true);
        SetFieldValue("m_FParte_Opo", value);
        _situacao.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _situacao.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsync_WithMultipleFieldsParte_OpoChanged_ShouldProcessAllChanges()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParte_Opo", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FParte_Opo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _situacao.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _situacao.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncParte_Opo_WithCancellationToken_ShouldRespectCancellation()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParte_Opo", true);
        SetFieldValue("m_FParte_Opo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _situacao.ID = 0; // Insert scenario
        using var cts = new CancellationTokenSource();
        cts.Cancel(); // Cancel immediately
        // Act & Assert - Should throw OperationCanceledException or another exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _situacao.UpdateAsync(_mockConnection.Object, cancellationToken: cts.Token));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureUpdateFieldsAsyncParte_Opo_WithTimeout_ShouldRespectTimeout()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParte_Opo", true);
        SetFieldValue("m_FParte_Opo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _situacao.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _situacao.UpdateAsync(_mockConnection.Object, timeoutSeconds: 1));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureAuditorFields_WhenInsertParte_Opo_ShouldSetInsertAuditFields()
    {
        // Arrange
        _situacao.ID = 0; // Insert scenario
        _situacao.AuditorQuem = 5;
        SetFieldFlag("pFldFParte_Opo", true); // At least one field must change
        SetFieldValue("m_FParte_Opo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _situacao.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public void ConfigureAuditorFieldsParte_Opo_WhenUpdate_ShouldSetUpdateAuditFields()
    {
        // Arrange
        _situacao.ID = 123; // Update scenario
        _situacao.AuditorQuem = 7;
        SetFieldFlag("pFldFParte_Opo", true); // At least one field must change
        SetFieldValue("m_FParte_Opo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        _situacao.AuditorQuem.Should().Be(7);
    }

    [Fact]
    public void ConfigureAuditorFieldsParte_Opo_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _situacao.ID = 0; // Insert scenario
        _situacao.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFParte_Opo", true); // At least one field must change
        SetFieldValue("m_FParte_Opo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _situacao.AuditorQuem.Should().Be(1);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(5)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsParte_Opo_WhenAuditorQuemHasValue_ShouldPreserveValue(int auditorValue)
    {
        // Arrange
        _situacao.ID = 0; // Insert scenario
        _situacao.AuditorQuem = auditorValue;
        SetFieldFlag("pFldFParte_Opo", true); // At least one field must change
        SetFieldValue("m_FParte_Opo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should preserve its value
        _situacao.AuditorQuem.Should().Be(auditorValue);
    }

    [Fact]
    public void ConfigureAuditorFieldsParte_Opo_WithZeroID_ShouldBeConsideredInsert()
    {
        // Arrange
        _situacao.ID = 0;
        _situacao.AuditorQuem = 10;
        SetFieldFlag("pFldFParte_Opo", true); // At least one field must change
        SetFieldValue("m_FParte_Opo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for insert
        _situacao.AuditorQuem.Should().Be(10);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(100)]
    [InlineData(999)]
    public void ConfigureAuditorFieldsParte_Opo_WithNonZeroID_ShouldBeConsideredUpdate(int id)
    {
        // Arrange
        _situacao.ID = id;
        _situacao.AuditorQuem = 15;
        SetFieldFlag("pFldFParte_Opo", true); // At least one field must change
        SetFieldValue("m_FParte_Opo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Should maintain auditor value for update
        _situacao.AuditorQuem.Should().Be(15);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncParte_Opo_WhenInsert_ShouldSetInsertAuditFields()
    {
        // Arrange
        _situacao.ID = 0; // Insert scenario
        _situacao.AuditorQuem = 5;
        SetFieldFlag("pFldFParte_Opo", true); // At least one field must change
        SetFieldValue("m_FParte_Opo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection but audit fields should be set
        var exception = await Record.ExceptionAsync(async () => await _situacao.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        _situacao.AuditorQuem.Should().Be(5);
    }

    [Fact]
    public async Task ConfigureAuditorFieldsAsyncParte_Opo_WhenAuditorQuemIsZero_ShouldSetToDefaultValue()
    {
        // Arrange
        _situacao.ID = 0; // Insert scenario
        _situacao.AuditorQuem = 0; // Should be set to 1
        SetFieldFlag("pFldFParte_Opo", true); // At least one field must change
        SetFieldValue("m_FParte_Opo", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _situacao.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - AuditorQuem should be set to default value of 1
        _situacao.AuditorQuem.Should().Be(1);
    }

    [Fact]
    public void ConfigureMethodsParte_Opo_Integration_BothMethodsWorkTogether_ShouldNotInterfere()
    {
        // Arrange
        SetAllFieldFlags(true);
        SetAllFieldValues();
        _situacao.ID = 123;
        _situacao.AuditorQuem = 99;
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
        // Assert - Both update and audit configuration should work
        _situacao.FParte_Opo.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _situacao.AuditorQuem.Should().Be(99);
    }

    [Fact]
    public void ConfigureFieldsParte_Opo_Integration_FieldChangeTracking_ShouldWorkCorrectly()
    {
        // Arrange
        _situacao.ID = 1; // Update scenario
        // Initially no changes
        var result1 = _situacao.Update(_mockConnection.Object);
        result1.Should().Be(0, "No fields changed, should return 0");
        // Now change a field
        SetFieldFlag("pFldFParte_Opo", true);
        SetFieldValue("m_FParte_Opo", "New Client Name");
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsParte_Opo_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParte_Opo", true);
        SetFieldValue("m_FParte_Opo", "");
        _situacao.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public void ConfigureFieldsParte_Opo_EdgeCase_NullStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParte_Opo", true);
        SetFieldValue("m_FParte_Opo", null);
        _situacao.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = Record.Exception(() => _situacao.Update(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

    [Fact]
    public async Task ConfigureFieldsAsyncParte_Opo_EdgeCase_EmptyStringValues_ShouldBeHandled()
    {
        // Arrange
        ResetAllFieldFlags();
        SetFieldFlag("pFldFParte_Opo", true);
        SetFieldFlag("pFldFCompromisso", true);
        SetFieldValue("m_FParte_Opo", "");
        SetFieldValue("m_FCompromisso", "");
        _situacao.ID = 0; // Insert scenario
        // Act & Assert - Should throw exception due to mocked connection
        var exception = await Record.ExceptionAsync(async () => await _situacao.UpdateAsync(_mockConnection.Object));
        exception.Should().NotBeNull();
    }

#endregion
    public virtual void Dispose()
    {
        _situacao?.Dispose();
    }
}