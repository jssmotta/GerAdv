// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class OperadorEMailPopupValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFOperadorEMailPopupFactory> _mockOperadorEMailPopupFactory;
    private readonly Mock<IOperadorEMailPopupReader> _mockReader;
    private readonly OperadorEMailPopupValidation _validation;
    private readonly Mock<IOperadorEMailPopupService> _mockOperadorEMailPopupService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IOperadorReader> _mockOperadorReader;
    private readonly OperadorEMailPopupService _service;
    private readonly string _validUri = "test-uri";
    public OperadorEMailPopupValidationTests()
    {
        _mockOperadorEMailPopupFactory = new Mock<IFOperadorEMailPopupFactory>();
        _mockReader = new Mock<IOperadorEMailPopupReader>();
        _validation = new OperadorEMailPopupValidation();
        _mockOperadorEMailPopupService = new Mock<IOperadorEMailPopupService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockOperadorReader = new Mock<IOperadorReader>();
    }

#region Class Structure Tests
    [Fact]
    public void OperadorEMailPopupValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IOperadorEMailPopupValidation>();
    }

    [Fact]
    public void OperadorEMailPopupValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(OperadorEMailPopupValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void OperadorEMailPopupValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(OperadorEMailPopupValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.OperadorEMailPopup CreateValidOperadorEMailPopup()
    {
        return new Models.OperadorEMailPopup
        {
            Id = 1,
            Operador = 0,
            Nome = "João",
            SMTP = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            POP3 = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Autenticacao = false,
            Descricao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Usuario = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            PortaSmtp = 0,
            PortaPop3 = 0,
            Assinatura = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM"
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockOperadorEMailPopupService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterOperadorEMailPopup>(), It.IsAny<string>())).ReturnsAsync(new List<OperadorEMailPopupResponseAll>());
        // Setup other mocks but don't override the OperadorEMailPopups service mock
        _mockOperadorReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.OperadorResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockOperadorEMailPopupService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterOperadorEMailPopup>(), It.IsAny<string>())).ReturnsAsync(new List<OperadorEMailPopupResponseAll>());
        // Setup other mocks but don't override the OperadorEMailPopups service mock
        _mockOperadorReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.OperadorResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var operadoremailpopup = new Models.OperadorEMailPopup
        {
            Id = 1,
            Nome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            SMTP = null,
            POP3 = null,
            Autenticacao = false,
            Descricao = null,
            Usuario = null,
            Assinatura = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(operadoremailpopup, _mockOperadorEMailPopupService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockOperadorEMailPopupService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region Foreign Key Validation Tests - Operador
    [Fact]
    public async Task ValidateReg_WithInvalidOperador_ShouldThrowSGValidationException()
    {
        // Arrange
        var operadoremailpopup = CreateValidOperadorEMailPopup();
        operadoremailpopup.Operador = 999;
        _mockOperadorReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.OperadorResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(operadoremailpopup, _mockOperadorEMailPopupService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedOperadorId_ShouldThrowSGValidationException()
    {
        // Arrange
        var operadoremailpopup = CreateValidOperadorEMailPopup();
        operadoremailpopup.Operador = 999;
        var reg888 = new Models.Response.OperadorResponse
        {
            Id = 888
        }; // Different ID
        _mockOperadorReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(operadoremailpopup, _mockOperadorEMailPopupService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidOperador_ShouldPass()
    {
        // Arrange
        var operadoremailpopup = CreateValidOperadorEMailPopup();
        operadoremailpopup.Operador = 123;
        var reg123 = new Models.Response.OperadorResponse
        {
            Id = 123
        };
        _mockOperadorReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(operadoremailpopup, _mockOperadorEMailPopupService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyOperador_ShouldPass()
    {
        // Arrange
        var operadoremailpopup = CreateValidOperadorEMailPopup();
        operadoremailpopup.Operador = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(operadoremailpopup, _mockOperadorEMailPopupService.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockOperadorReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}