// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Writers;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IHistoricoWriter
{
    Task<FHistorico> WriteAsync(Models.Historico historico, int auditorQuem, MsiSqlConnection oCnn);
    Task Delete(HistoricoResponse historico, int operadorId, MsiSqlConnection oCnn);
}

public class HistoricoWriter(IFHistoricoFactory historicoFactory) : IHistoricoWriter
{
    private readonly IFHistoricoFactory _historicoFactory = historicoFactory;
    public async Task Delete(HistoricoResponse historico, int operadorId, MsiSqlConnection oCnn)
    {
        await _historicoFactory.DeleteAsync(operadorId, historico.Id, oCnn);
    }

    public async Task<FHistorico> WriteAsync(Models.Historico historico, int auditorQuem, MsiSqlConnection oCnn)
    {
        using var dbRec = await (historico.Id.IsEmptyIDNumber() ? _historicoFactory.CreateAsync() : _historicoFactory.CreateFromIdAsync(historico.Id, oCnn));
        dbRec.FExtraID = historico.ExtraID;
        dbRec.FIDNE = historico.IDNE;
        dbRec.FExtraGUID = historico.ExtraGUID;
        dbRec.FLiminarOrigem = historico.LiminarOrigem;
        dbRec.FNaoPublicavel = historico.NaoPublicavel;
        dbRec.FProcesso = historico.Processo;
        dbRec.FPrecatoria = historico.Precatoria;
        dbRec.FApenso = historico.Apenso;
        dbRec.FIDInstProcesso = historico.IDInstProcesso;
        dbRec.FFase = historico.Fase;
        dbRec.FData = historico.Data;
        dbRec.FObservacao = historico.Observacao;
        dbRec.FAgendado = historico.Agendado;
        dbRec.FConcluido = historico.Concluido;
        dbRec.FMesmaAgenda = historico.MesmaAgenda;
        dbRec.FSAD = historico.SAD;
        dbRec.FResumido = historico.Resumido;
        dbRec.FStatusAndamento = historico.StatusAndamento;
        dbRec.FTop = historico.Top;
        dbRec.FGUID = historico.GUID;
        dbRec.AuditorQuem = auditorQuem;
        await dbRec.UpdateAsync(oCnn);
        return dbRec;
    }
}