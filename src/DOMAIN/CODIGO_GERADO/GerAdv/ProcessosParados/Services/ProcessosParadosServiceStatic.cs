// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class ProcessosParadosService
{
    private (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterProcessosParados filtro)
    {
        var parameters = new List<SqlParameter>();
        if (filtro.Processo != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.Processo)}", filtro.Processo));
        }

        if (filtro.Processo_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.Processo)}_end", filtro.Processo_end));
        }

        if (filtro.Semana != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.Semana)}", filtro.Semana));
        }

        if (filtro.Semana_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.Semana)}_end", filtro.Semana_end));
        }

        if (filtro.Ano != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.Ano)}", filtro.Ano));
        }

        if (filtro.Ano_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.Ano)}_end", filtro.Ano_end));
        }

        if (!filtro.DataHora.IsEmptyDX())
        {
            if (DateTime.TryParse(filtro.DataHora, out var dataParam))
                parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.DataHora)}", dataParam));
        }

        if (!filtro.DataHora_end.IsEmptyDX())
        {
            if (DateTime.TryParse(filtro.DataHora_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.DataHora)}_end", dataParam));
        }

        if (filtro.Operador != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.Operador)}", filtro.Operador));
        }

        if (!filtro.DataHistorico.IsEmptyDX())
        {
            if (DateTime.TryParse(filtro.DataHistorico, out var dataParam))
                parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.DataHistorico)}", dataParam));
        }

        if (!filtro.DataHistorico_end.IsEmptyDX())
        {
            if (DateTime.TryParse(filtro.DataHistorico_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.DataHistorico)}_end", dataParam));
        }

        if (!filtro.DataNENotas.IsEmptyDX())
        {
            if (DateTime.TryParse(filtro.DataNENotas, out var dataParam))
                parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.DataNENotas)}", dataParam));
        }

        if (!filtro.DataNENotas_end.IsEmptyDX())
        {
            if (DateTime.TryParse(filtro.DataNENotas_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.DataNENotas)}_end", dataParam));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
        }

        if (filtro.Codigo_filtro_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBProcessosParadosDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
        }

        if (filtro.LogicalOperator.IsEmptyX() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        if (!(filtro.Processo.IsEmptyX()) && filtro.Processo_end.IsEmptyX())
        {
            cWhere.Append(filtro.Processo.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessosParadosDicInfo.PTabelaNome}].[{DBProcessosParadosDicInfo.Processo}] = @{nameof(DBProcessosParadosDicInfo.Processo)}");
        }
        else if (!(filtro.Processo.IsEmptyX()) && !(filtro.Processo_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessosParadosDicInfo.PTabelaNome}].{DBProcessosParadosDicInfo.Processo} BETWEEN @{nameof(DBProcessosParadosDicInfo.Processo)} AND @{nameof(DBProcessosParadosDicInfo.Processo)}_end");
        }

        if (!(filtro.Semana.IsEmptyX()) && filtro.Semana_end.IsEmptyX())
        {
            cWhere.Append(filtro.Semana.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessosParadosDicInfo.PTabelaNome}].[{DBProcessosParadosDicInfo.Semana}] = @{nameof(DBProcessosParadosDicInfo.Semana)}");
        }
        else if (!(filtro.Semana.IsEmptyX()) && !(filtro.Semana_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessosParadosDicInfo.PTabelaNome}].{DBProcessosParadosDicInfo.Semana} BETWEEN @{nameof(DBProcessosParadosDicInfo.Semana)} AND @{nameof(DBProcessosParadosDicInfo.Semana)}_end");
        }

        if (!(filtro.Ano.IsEmptyX()) && filtro.Ano_end.IsEmptyX())
        {
            cWhere.Append(filtro.Ano.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessosParadosDicInfo.PTabelaNome}].[{DBProcessosParadosDicInfo.Ano}] = @{nameof(DBProcessosParadosDicInfo.Ano)}");
        }
        else if (!(filtro.Ano.IsEmptyX()) && !(filtro.Ano_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessosParadosDicInfo.PTabelaNome}].{DBProcessosParadosDicInfo.Ano} BETWEEN @{nameof(DBProcessosParadosDicInfo.Ano)} AND @{nameof(DBProcessosParadosDicInfo.Ano)}_end");
        }

        if (!(filtro.DataHora.IsEmptyDX()) && filtro.DataHora_end.IsEmptyDX())
        {
            cWhere.Append(filtro.DataHora.IsEmptyDX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBProcessosParadosDicInfo.PTabelaNome}].[{DBProcessosParadosDicInfo.DataHora}], 103) = CONVERT(DATE, @{nameof(DBProcessosParadosDicInfo.DataHora)}, 103)");
        }
        else if (!(filtro.DataHora.IsEmptyDX()) && !(filtro.DataHora_end.IsEmptyDX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessosParadosDicInfo.PTabelaNome}].{DBProcessosParadosDicInfo.DataHora} BETWEEN @{nameof(DBProcessosParadosDicInfo.DataHora)} AND @{nameof(DBProcessosParadosDicInfo.DataHora)}_end");
        }

        cWhere.Append(filtro.Operador.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessosParadosDicInfo.PTabelaNome}].[{DBProcessosParadosDicInfo.Operador}] = @{nameof(DBProcessosParadosDicInfo.Operador)}");
        if (!(filtro.DataHistorico.IsEmptyDX()) && filtro.DataHistorico_end.IsEmptyDX())
        {
            cWhere.Append(filtro.DataHistorico.IsEmptyDX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBProcessosParadosDicInfo.PTabelaNome}].[{DBProcessosParadosDicInfo.DataHistorico}], 103) = CONVERT(DATE, @{nameof(DBProcessosParadosDicInfo.DataHistorico)}, 103)");
        }
        else if (!(filtro.DataHistorico.IsEmptyDX()) && !(filtro.DataHistorico_end.IsEmptyDX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessosParadosDicInfo.PTabelaNome}].{DBProcessosParadosDicInfo.DataHistorico} BETWEEN @{nameof(DBProcessosParadosDicInfo.DataHistorico)} AND @{nameof(DBProcessosParadosDicInfo.DataHistorico)}_end");
        }

        if (!(filtro.DataNENotas.IsEmptyDX()) && filtro.DataNENotas_end.IsEmptyDX())
        {
            cWhere.Append(filtro.DataNENotas.IsEmptyDX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBProcessosParadosDicInfo.PTabelaNome}].[{DBProcessosParadosDicInfo.DataNENotas}], 103) = CONVERT(DATE, @{nameof(DBProcessosParadosDicInfo.DataNENotas)}, 103)");
        }
        else if (!(filtro.DataNENotas.IsEmptyDX()) && !(filtro.DataNENotas_end.IsEmptyDX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessosParadosDicInfo.PTabelaNome}].{DBProcessosParadosDicInfo.DataNENotas} BETWEEN @{nameof(DBProcessosParadosDicInfo.DataNENotas)} AND @{nameof(DBProcessosParadosDicInfo.DataNENotas)}_end");
        }

        if (!(filtro.Codigo_filtro.IsEmptyX()) && filtro.Codigo_filtro_end.IsEmptyX())
        {
            cWhere.Append(filtro.Codigo_filtro.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessosParadosDicInfo.PTabelaNome}].[{DBProcessosParadosDicInfo.CampoCodigo}] = @{nameof(DBProcessosParadosDicInfo.CampoCodigo)}");
        }
        else if (!(filtro.Codigo_filtro.IsEmptyX()) && !(filtro.Codigo_filtro_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessosParadosDicInfo.PTabelaNome}].{DBProcessosParadosDicInfo.CampoCodigo} BETWEEN @{nameof(DBProcessosParadosDicInfo.CampoCodigo)} AND @{nameof(DBProcessosParadosDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private string ApplyWildCard(char wildcardChar, string value)
    {
        if (wildcardChar == '\0' || wildcardChar == ' ')
        {
            return value;
        }

        var result = $"{wildcardChar}{value.Replace(" ", wildcardChar.ToString())}{wildcardChar}";
        return result;
    }

    private string GetFilterHash(Filters.FilterProcessosParados? filtro)
    {
        if (filtro == null)
            return string.Empty;
        var json = JsonSerializer.Serialize(filtro);
        using var sha256 = SHA256.Create();
        var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(json));
        return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
    }

    private async Task<IEnumerable<ProcessosParadosResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}