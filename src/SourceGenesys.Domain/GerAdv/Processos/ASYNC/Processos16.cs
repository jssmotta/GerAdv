// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
public partial class DBProcessos
{
    /// <summary>
    /// Factory method async para carregar [tableMin]
    /// </summary>
    public static async Task<DBProcessos> CreateAsync(int nCodigo, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        var registro = new DBProcessos();
        await registro.CarregarAsync(nCodigo, oCnn, cancellationToken);
        return registro;
    }

    /// <summary>
    /// Carregar dados async
    /// </summary>
    protected async Task CarregarAsync(int id, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        if (id.IsEmptyIDNumber() || oCnn is null)
            return;
        using var cmd = new SqlCommand($"{ConfiguracoesDBT.SQLNoCount}SELECT TOP (1) {CamposSqlX} FROM {PTabelaNome.dbo(oCnn)} WHERE [{CampoCodigo}] = @ThisIDToLoad", oCnn.InnerConnection);
        cmd.Parameters.AddWithValue("@ThisIDToLoad", id);
        using var ds = await ConfiguracoesDBT.GetDataTableAsync(cmd, CommandBehavior.SingleRow, oCnn, cancellationToken);
        if (ds?.Rows.Count > 0)
        {
            CarregarDadosBd(ds.Rows[0]);
        }
    }

#if (!NOTSTORED_Processos)
    /// <summary>
    /// Update async com timeout e cancellation
    /// </summary>
    public async Task<int> UpdateAsync(MsiSqlConnection? oCnn, int insertId = 0, CancellationToken cancellationToken = default, int timeoutSeconds = 30)
    {
        var isInsert = insertId == 0 && ID == 0;
        if (!isInsert && !HasAnyFieldChanged())
            return 0;
        if (oCnn is null)
        {
#if DEBUG
            PTabelaNome.PopupBox("oCnn is null - UpdateAsync()");
#endif
            return 0;
        }

        try
        {
            var updateTool = new DBToolWTable32Async(PTabelaNome, CampoCodigo, ID == 0)
            {
                IsMachineCode = true,
            };
            updateTool.Where = isInsert ? string.Empty : $"{CampoCodigo}={ID}";
            ConfigureUpdateFields(updateTool);
            ConfigureAuditorFields(updateTool);
            if (insertId != 0)
            {
                return await GravaNewIdAsync(updateTool, insertId, oCnn, cancellationToken);
            }

            var result = await updateTool.RecUpdateAsync(oCnn, cancellationToken);
            if (updateTool.Insert && result == "OK")
            {
                ID = updateTool.GetCodigo();
                if (ID == 0)
                {
                    Error = -2;
                    ErrorDescription = "O registro não pode ser incluído, tente mais tarde.";
                    return Error;
                }
            }

            return result == "OK" ? 0 : -1;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (Exception ex)
        {
            Error = -1;
            ErrorDescription = ex.Message;
            return Error;
        }
    }

#endif
    /// <summary>
    /// Verificar se existe async
    /// </summary>
    public static async Task<bool> ExisteAsync(int id, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        if (oCnn is null || id <= 0)
            return false;
        var existe = await ConfiguracoesDBT.GetScalarAsync<int?>($"SELECT 1 FROM {PTabelaNome.dbo(oCnn)} WHERE {CampoCodigo} = {id}", oCnn, cancellationToken);
        return existe.HasValue;
    }

    /// <summary>
    /// Delete async
    /// </summary>
    /// <param name = "operadorId">For future Audity</param>
    /// <param name = "id"></param>
    /// <param name = "oCnn"></param>
    /// <param name = "cancellationToken"></param>
    /// <returns></returns>
    /// <exception cref = "InvalidOperationException"></exception>
    public static async Task<bool> DeleteRecordAsync(int operadorId, int id, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        if (oCnn is null || id <= 0)
            return false;
        var sql = $"DELETE FROM {PTabelaNome.dbo(oCnn)} WHERE {CampoCodigo} = @Id";
        try
        {
            using var cmd = new SqlCommand(sql, oCnn.InnerConnection);
            cmd.Parameters.AddWithValue("@Id", id);
            var rowsAffected = await cmd.ExecuteNonQueryAsync(cancellationToken);
            return rowsAffected > 0;
        }
        catch (SqlException ex)when (ex.Number == 547)
        {
            throw new InvalidOperationException("Este registro não pode ser excluído, pois está vinculado a outros registros.");
        }
    }

#if (!NOTSTORED_Processos)
    // Helper methods
    private bool HasAnyFieldChanged() => pFldFAdvParc || pFldFAJGPedidoNegado || pFldFAJGCliente || pFldFAJGPedidoNegadoOPO || pFldFNotificarPOE || pFldFValorProvisionado || pFldFAJGOponente || pFldFValorCacheCalculo || pFldFAJGPedidoOPO || pFldFValorCacheCalculoProv || pFldFConsiderarParado || pFldFValorCalculado || pFldFAJGConcedidoOPO || pFldFCobranca || pFldFDataEntrada || pFldFPenhora || pFldFAJGPedido || pFldFTipoBaixa || pFldFClassRisco || pFldFIsApenso || pFldFValorCausaInicial || pFldFAJGConcedido || pFldFObsBCX || pFldFValorCausaDefinitivo || pFldFPercProbExito || pFldFMNA || pFldFPercExito || pFldFNroExtra || pFldFAdvOpo || pFldFExtra || pFldFJustica || pFldFAdvogado || pFldFNroCaixa || pFldFPreposto || pFldFCliente || pFldFOponente || pFldFArea || pFldFCidade || pFldFSituacao || pFldFIDSituacao || pFldFValor || pFldFRito || pFldFFato || pFldFNroPasta || pFldFAtividade || pFldFCaixaMorto || pFldFBaixado || pFldFDtBaixa || pFldFMotivoBaixa || pFldFOBS || pFldFPrinted || pFldFZKey || pFldFZKeyQuem || pFldFZKeyQuando || pFldFResumo || pFldFNaoImprimir || pFldFEletronico || pFldFNroContrato || pFldFPercProbExitoJustificativa || pFldFHonorarioValor || pFldFHonorarioPercentual || pFldFHonorarioSucumbencia || pFldFFaseAuditoria || pFldFValorCondenacao || pFldFValorCondenacaoCalculado || pFldFValorCondenacaoProvisorio || pFldFGUID;
    private void ConfigureUpdateFields(DBToolWTable32Async updateTool)
    {
        if (pFldFAdvParc)
            updateTool.Fields(DBProcessosDicInfo.AdvParc, m_FAdvParc, ETiposCampos.FNumber);
        if (pFldFAJGPedidoNegado)
            updateTool.Fields(DBProcessosDicInfo.AJGPedidoNegado, m_FAJGPedidoNegado, ETiposCampos.FBoolean);
        if (pFldFAJGCliente)
            updateTool.Fields(DBProcessosDicInfo.AJGCliente, m_FAJGCliente, ETiposCampos.FBoolean);
        if (pFldFAJGPedidoNegadoOPO)
            updateTool.Fields(DBProcessosDicInfo.AJGPedidoNegadoOPO, m_FAJGPedidoNegadoOPO, ETiposCampos.FBoolean);
        if (pFldFNotificarPOE)
            updateTool.Fields(DBProcessosDicInfo.NotificarPOE, m_FNotificarPOE, ETiposCampos.FBoolean);
        if (pFldFValorProvisionado)
            updateTool.Fields(DBProcessosDicInfo.ValorProvisionado, m_FValorProvisionado, ETiposCampos.FDecimal);
        if (pFldFAJGOponente)
            updateTool.Fields(DBProcessosDicInfo.AJGOponente, m_FAJGOponente, ETiposCampos.FBoolean);
        if (pFldFValorCacheCalculo)
            updateTool.Fields(DBProcessosDicInfo.ValorCacheCalculo, m_FValorCacheCalculo, ETiposCampos.FDecimal);
        if (pFldFAJGPedidoOPO)
            updateTool.Fields(DBProcessosDicInfo.AJGPedidoOPO, m_FAJGPedidoOPO, ETiposCampos.FBoolean);
        if (pFldFValorCacheCalculoProv)
            updateTool.Fields(DBProcessosDicInfo.ValorCacheCalculoProv, m_FValorCacheCalculoProv, ETiposCampos.FDecimal);
        if (pFldFConsiderarParado)
            updateTool.Fields(DBProcessosDicInfo.ConsiderarParado, m_FConsiderarParado, ETiposCampos.FBoolean);
        if (pFldFValorCalculado)
            updateTool.Fields(DBProcessosDicInfo.ValorCalculado, m_FValorCalculado, ETiposCampos.FBoolean);
        if (pFldFAJGConcedidoOPO)
            updateTool.Fields(DBProcessosDicInfo.AJGConcedidoOPO, m_FAJGConcedidoOPO, ETiposCampos.FBoolean);
        if (pFldFCobranca)
            updateTool.Fields(DBProcessosDicInfo.Cobranca, m_FCobranca, ETiposCampos.FBoolean);
        if (pFldFDataEntrada)
            updateTool.Fields(DBProcessosDicInfo.DataEntrada, m_FDataEntrada, ETiposCampos.FDate);
        if (pFldFPenhora)
            updateTool.Fields(DBProcessosDicInfo.Penhora, m_FPenhora, ETiposCampos.FBoolean);
        if (pFldFAJGPedido)
            updateTool.Fields(DBProcessosDicInfo.AJGPedido, m_FAJGPedido, ETiposCampos.FBoolean);
        if (pFldFTipoBaixa)
            updateTool.Fields(DBProcessosDicInfo.TipoBaixa, m_FTipoBaixa, ETiposCampos.FNumber);
        if (pFldFClassRisco)
            updateTool.Fields(DBProcessosDicInfo.ClassRisco, m_FClassRisco, ETiposCampos.FNumber);
        if (pFldFIsApenso)
            updateTool.Fields(DBProcessosDicInfo.IsApenso, m_FIsApenso, ETiposCampos.FBoolean);
        if (pFldFValorCausaInicial)
            updateTool.Fields(DBProcessosDicInfo.ValorCausaInicial, m_FValorCausaInicial, ETiposCampos.FDecimal);
        if (pFldFAJGConcedido)
            updateTool.Fields(DBProcessosDicInfo.AJGConcedido, m_FAJGConcedido, ETiposCampos.FBoolean);
        if (pFldFObsBCX)
            updateTool.Fields(DBProcessosDicInfo.ObsBCX, m_FObsBCX, ETiposCampos.FString);
        if (pFldFValorCausaDefinitivo)
            updateTool.Fields(DBProcessosDicInfo.ValorCausaDefinitivo, m_FValorCausaDefinitivo, ETiposCampos.FDecimal);
        if (pFldFPercProbExito)
            updateTool.Fields(DBProcessosDicInfo.PercProbExito, m_FPercProbExito, ETiposCampos.FDecimal);
        if (pFldFMNA)
            updateTool.Fields(DBProcessosDicInfo.MNA, m_FMNA, ETiposCampos.FBoolean);
        if (pFldFPercExito)
            updateTool.Fields(DBProcessosDicInfo.PercExito, m_FPercExito, ETiposCampos.FDecimal);
        if (pFldFNroExtra)
            updateTool.Fields(DBProcessosDicInfo.NroExtra, m_FNroExtra, ETiposCampos.FString);
        if (pFldFAdvOpo)
            updateTool.Fields(DBProcessosDicInfo.AdvOpo, m_FAdvOpo, ETiposCampos.FNumber);
        if (pFldFExtra)
            updateTool.Fields(DBProcessosDicInfo.Extra, m_FExtra, ETiposCampos.FBoolean);
        if (pFldFJustica)
            updateTool.Fields(DBProcessosDicInfo.Justica, m_FJustica, ETiposCampos.FNumber);
        if (pFldFAdvogado)
            updateTool.Fields(DBProcessosDicInfo.Advogado, m_FAdvogado, ETiposCampos.FNumber);
        if (pFldFNroCaixa)
            updateTool.Fields(DBProcessosDicInfo.NroCaixa, m_FNroCaixa, ETiposCampos.FString);
        if (pFldFPreposto)
            updateTool.Fields(DBProcessosDicInfo.Preposto, m_FPreposto, ETiposCampos.FNumber);
        if (pFldFCliente)
            updateTool.Fields(DBProcessosDicInfo.Cliente, m_FCliente, ETiposCampos.FNumber);
        if (pFldFOponente)
            updateTool.Fields(DBProcessosDicInfo.Oponente, m_FOponente, ETiposCampos.FNumber);
        if (pFldFArea)
            updateTool.Fields(DBProcessosDicInfo.Area, m_FArea, ETiposCampos.FNumber);
        if (pFldFCidade)
            updateTool.Fields(DBProcessosDicInfo.Cidade, m_FCidade, ETiposCampos.FNumber);
        if (pFldFSituacao)
            updateTool.Fields(DBProcessosDicInfo.Situacao, m_FSituacao, ETiposCampos.FNumber);
        if (pFldFIDSituacao)
            updateTool.Fields(DBProcessosDicInfo.IDSituacao, m_FIDSituacao, ETiposCampos.FBoolean);
        if (pFldFValor)
            updateTool.Fields(DBProcessosDicInfo.Valor, m_FValor, ETiposCampos.FDecimal);
        if (pFldFRito)
            updateTool.Fields(DBProcessosDicInfo.Rito, m_FRito, ETiposCampos.FNumber);
        if (pFldFFato)
            updateTool.Fields(DBProcessosDicInfo.Fato, m_FFato, ETiposCampos.FString);
        if (pFldFNroPasta)
            updateTool.Fields(DBProcessosDicInfo.NroPasta, m_FNroPasta, ETiposCampos.FString);
        if (pFldFAtividade)
            updateTool.Fields(DBProcessosDicInfo.Atividade, m_FAtividade, ETiposCampos.FNumber);
        if (pFldFCaixaMorto)
            updateTool.Fields(DBProcessosDicInfo.CaixaMorto, m_FCaixaMorto, ETiposCampos.FString);
        if (pFldFBaixado)
            updateTool.Fields(DBProcessosDicInfo.Baixado, m_FBaixado, ETiposCampos.FBoolean);
        if (pFldFDtBaixa)
            updateTool.Fields(DBProcessosDicInfo.DtBaixa, m_FDtBaixa, ETiposCampos.FDate);
        if (pFldFMotivoBaixa)
            updateTool.Fields(DBProcessosDicInfo.MotivoBaixa, m_FMotivoBaixa, ETiposCampos.FString);
        if (pFldFOBS)
            updateTool.Fields(DBProcessosDicInfo.OBS, m_FOBS, ETiposCampos.FString);
        if (pFldFPrinted)
            updateTool.Fields(DBProcessosDicInfo.Printed, m_FPrinted, ETiposCampos.FBoolean);
        if (pFldFZKey)
            updateTool.Fields(DBProcessosDicInfo.ZKey, m_FZKey, ETiposCampos.FString);
        if (pFldFZKeyQuem)
            updateTool.Fields(DBProcessosDicInfo.ZKeyQuem, m_FZKeyQuem, ETiposCampos.FNumber);
        if (pFldFZKeyQuando)
            updateTool.Fields(DBProcessosDicInfo.ZKeyQuando, m_FZKeyQuando, ETiposCampos.FDate);
        if (pFldFResumo)
            updateTool.Fields(DBProcessosDicInfo.Resumo, m_FResumo, ETiposCampos.FString);
        if (pFldFNaoImprimir)
            updateTool.Fields(DBProcessosDicInfo.NaoImprimir, m_FNaoImprimir, ETiposCampos.FBoolean);
        if (pFldFEletronico)
            updateTool.Fields(DBProcessosDicInfo.Eletronico, m_FEletronico, ETiposCampos.FBoolean);
        if (pFldFNroContrato)
            updateTool.Fields(DBProcessosDicInfo.NroContrato, m_FNroContrato, ETiposCampos.FString);
        if (pFldFPercProbExitoJustificativa)
            updateTool.Fields(DBProcessosDicInfo.PercProbExitoJustificativa, m_FPercProbExitoJustificativa, ETiposCampos.FString);
        if (pFldFHonorarioValor)
            updateTool.Fields(DBProcessosDicInfo.HonorarioValor, m_FHonorarioValor, ETiposCampos.FDecimal);
        if (pFldFHonorarioPercentual)
            updateTool.Fields(DBProcessosDicInfo.HonorarioPercentual, m_FHonorarioPercentual, ETiposCampos.FDecimal);
        if (pFldFHonorarioSucumbencia)
            updateTool.Fields(DBProcessosDicInfo.HonorarioSucumbencia, m_FHonorarioSucumbencia, ETiposCampos.FDecimal);
        if (pFldFFaseAuditoria)
            updateTool.Fields(DBProcessosDicInfo.FaseAuditoria, m_FFaseAuditoria, ETiposCampos.FNumber);
        if (pFldFValorCondenacao)
            updateTool.Fields(DBProcessosDicInfo.ValorCondenacao, m_FValorCondenacao, ETiposCampos.FDecimal);
        if (pFldFValorCondenacaoCalculado)
            updateTool.Fields(DBProcessosDicInfo.ValorCondenacaoCalculado, m_FValorCondenacaoCalculado, ETiposCampos.FDecimal);
        if (pFldFValorCondenacaoProvisorio)
            updateTool.Fields(DBProcessosDicInfo.ValorCondenacaoProvisorio, m_FValorCondenacaoProvisorio, ETiposCampos.FNumber);
        if (pFldFGUID)
            updateTool.Fields(DBProcessosDicInfo.GUID, m_FGUID, ETiposCampos.FString);
    }

#endif
    private void ConfigureAuditorFields(DBToolWTable32Async updateTool)
    {
        var isInsert = ID.IsEmptyIDNumber();
        if (m_AuditorQuem == 0)
            AuditorQuem = 1;
        if (isInsert)
            updateTool.Fields(DBProcessosDicInfo.QuemCad, AuditorQuem, ETiposCampos.FNumber);
        if (isInsert)
            updateTool.Fields(DBProcessosDicInfo.DtCad, DevourerOne.DateTimeUtc, ETiposCampos.FDate);
        if (!isInsert)
            updateTool.Fields(DBProcessosDicInfo.QuemAtu, AuditorQuem, ETiposCampos.FNumber);
        if (!isInsert)
            updateTool.Fields(DBProcessosDicInfo.DtAtu, DevourerOne.DateTimeUtc, ETiposCampos.FDate);
        updateTool.Fields(DBProcessosDicInfo.Visto, false, ETiposCampos.FBoolean);
    }

    private async Task<int> GravaNewIdAsync(DBToolWTable32Async updateTool, int insertId, MsiSqlConnection oCnn, CancellationToken cancellationToken)
    {
        ID = insertId;
        updateTool.Fields(CampoCodigo, insertId, ETiposCampos.FNumber);
        var result = await updateTool.RecUpdateAsync(oCnn, cancellationToken, true);
        return result == "OK" ? 0 : -3;
    }
}