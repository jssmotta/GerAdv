// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class ProValoresWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFProValoresFactory> _mockProValoresFactory;
    private readonly Mock<FProValores> _mockFProValores;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly ProValoresWhere _provaloresWhere;
    public ProValoresWhereTests()
    {
        _mockProValoresFactory = new Mock<IFProValoresFactory>();
        _mockFProValores = new Mock<FProValores>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _provaloresWhere = new ProValoresWhere(_mockProValoresFactory.Object);
    }

    public void Dispose()
    {
        _mockProValoresFactory?.Reset();
        _mockFProValores?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "27/05/2022")
        };
    }

    private void SetupMockFProValores(string? Guid = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", int? Processo = 1, int? TipoValorProcesso = 1, string? Indice = "AAAAAAAAAAAAAAAAAA", bool? Ignorar = false, string? Data = "27/05/2022", decimal? ValorOriginal = 1m, decimal? PercMulta = 1m, decimal? ValorMulta = 1m, decimal? PercJuros = 1m, decimal? ValorOriginalCorrigidoIndice = 1m, decimal? ValorMultaCorrigido = 1m, decimal? ValorJurosCorrigido = 1m, decimal? ValorFinal = 1m, string? DataUltimaCorrecao = "24/04/1975")
    {
        _mockFProValores.Setup(f => f.FGuid).Returns(Guid ?? string.Empty);
        _mockFProValores.Setup(f => f.FProcesso).Returns(Processo ?? 0);
        _mockFProValores.Setup(f => f.FTipoValorProcesso).Returns(TipoValorProcesso ?? 0);
        _mockFProValores.Setup(f => f.FIndice).Returns(Indice ?? string.Empty);
        _mockFProValores.Setup(f => f.FIgnorar).Returns(Ignorar ?? false);
        _mockFProValores.Setup(f => f.FData).Returns(Data ?? string.Empty);
        _mockFProValores.Setup(f => f.FValorOriginal).Returns(ValorOriginal ?? 0m);
        _mockFProValores.Setup(f => f.FPercMulta).Returns(PercMulta ?? 0m);
        _mockFProValores.Setup(f => f.FValorMulta).Returns(ValorMulta ?? 0m);
        _mockFProValores.Setup(f => f.FPercJuros).Returns(PercJuros ?? 0m);
        _mockFProValores.Setup(f => f.FValorOriginalCorrigidoIndice).Returns(ValorOriginalCorrigidoIndice ?? 0m);
        _mockFProValores.Setup(f => f.FValorMultaCorrigido).Returns(ValorMultaCorrigido ?? 0m);
        _mockFProValores.Setup(f => f.FValorJurosCorrigido).Returns(ValorJurosCorrigido ?? 0m);
        _mockFProValores.Setup(f => f.FValorFinal).Returns(ValorFinal ?? 0m);
        _mockFProValores.Setup(f => f.FDataUltimaCorrecao).Returns(DataUltimaCorrecao ?? string.Empty);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFProValoresFactory>();
        // Act
        var provaloresWhere = new ProValoresWhere(mockFactory.Object);
        // Assert
        provaloresWhere.Should().NotBeNull();
        provaloresWhere.Should().BeAssignableTo<IProValoresWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFProValoresFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new ProValoresWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnProValoresResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFProValores();
        _mockProValoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFProValores.Object);
        // Act
        var result = _provaloresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.Guid.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Processo.Should().Be(1);
        result.TipoValorProcesso.Should().Be(1);
        result.Indice.Should().Be("AAAAAAAAAAAAAAAAAA");
        result.Ignorar.Should().Be(false);
        result.Data.Should().Be("27/05/2022");
        result.ValorOriginal.Should().Be(1m);
        result.PercMulta.Should().Be(1m);
        result.ValorMulta.Should().Be(1m);
        result.PercJuros.Should().Be(1m);
        result.ValorOriginalCorrigidoIndice.Should().Be(1m);
        result.ValorMultaCorrigido.Should().Be(1m);
        result.ValorJurosCorrigido.Should().Be(1m);
        result.ValorFinal.Should().Be(1m);
        result.DataUltimaCorrecao.Should().Be("24/04/1975");
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFProValores(Guid: null, Processo: null, TipoValorProcesso: null, Indice: null, Ignorar: null, Data: null, ValorOriginal: null, PercMulta: null, ValorMulta: null, PercJuros: null, ValorOriginalCorrigidoIndice: null, ValorMultaCorrigido: null, ValorJurosCorrigido: null, ValorFinal: null, DataUltimaCorrecao: null);
        _mockProValoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFProValores.Object);
        // Act
        var result = _provaloresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Guid.Should().Be(string.Empty);
        result.Processo.Should().Be(0);
        result.TipoValorProcesso.Should().Be(0);
        result.Indice.Should().Be(string.Empty);
        result.Ignorar.Should().Be(false);
        result.Data.Should().Be(string.Empty);
        result.ValorOriginal.Should().Be(0m);
        result.PercMulta.Should().Be(0m);
        result.ValorMulta.Should().Be(0m);
        result.PercJuros.Should().Be(0m);
        result.ValorOriginalCorrigidoIndice.Should().Be(0m);
        result.ValorMultaCorrigido.Should().Be(0m);
        result.ValorJurosCorrigido.Should().Be(0m);
        result.ValorFinal.Should().Be(0m);
        result.DataUltimaCorrecao.Should().Be(string.Empty);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFProValores();
        _mockProValoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFProValores.Object);
        // Act
        var result = _provaloresWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockProValoresFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFProValores();
        _mockProValoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFProValores.Object);
        // Act
        var result = _provaloresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockProValoresFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFProValores();
        _mockProValoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFProValores.Object);
        // Act
        var result = _provaloresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockProValoresFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFProValores();
        _mockProValoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFProValores.Object);
        // Act
        _provaloresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockProValoresFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFProValoresInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFProValores.Setup(f => f.Dispose());
        SetupMockFProValores();
        _mockProValoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFProValores.Object);
        // Act
        _provaloresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFProValores.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockProValoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _provaloresWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFProValores(Guid: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", Processo: 1, TipoValorProcesso: 1, Indice: "AAAAAAAAAAAAAAAAAA", Ignorar: false, Data: "27/05/2022", ValorOriginal: 1m, PercMulta: 1m, ValorMulta: 1m, PercJuros: 1m, ValorOriginalCorrigidoIndice: 1m, ValorMultaCorrigido: 1m, ValorJurosCorrigido: 1m, ValorFinal: 1m, DataUltimaCorrecao: "24/04/1975");
        _mockProValoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFProValores.Object);
        // Act
        var result = _provaloresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.Guid.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Processo.Should().Be(1);
        result.TipoValorProcesso.Should().Be(1);
        result.Indice.Should().Be("AAAAAAAAAAAAAAAAAA");
        result.Ignorar.Should().Be(false);
        result.Data.Should().Be("27/05/2022");
        result.ValorOriginal.Should().Be(1m);
        result.PercMulta.Should().Be(1m);
        result.ValorMulta.Should().Be(1m);
        result.PercJuros.Should().Be(1m);
        result.ValorOriginalCorrigidoIndice.Should().Be(1m);
        result.ValorMultaCorrigido.Should().Be(1m);
        result.ValorJurosCorrigido.Should().Be(1m);
        result.ValorFinal.Should().Be(1m);
        result.DataUltimaCorrecao.Should().Be("24/04/1975");
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "Data = @{DBProValoresDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBProValoresDicInfo.CampoNome}", "27/05/2022"),
        };
        SetupMockFProValores();
        _mockProValoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFProValores.Object);
        // Act
        _provaloresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockProValoresFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBProValoresDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#region DateTime Tests
    [Fact]
    public void Read_WithValidDateDataUltimaCorrecaoFields_ShouldParseAndSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var testDate = "31/12/2024";
        SetupMockFProValores(DataUltimaCorrecao: testDate);
        _mockProValoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFProValores.Object);
        // Act
        var result = _provaloresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataUltimaCorrecao.Should().Be("31/12/2024");
    }

    [Fact]
    public void Read_WithInvalidDateDataUltimaCorrecaoStrings_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFProValores(DataUltimaCorrecao: "invalid-date");
        _mockProValoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFProValores.Object);
        // Act
        var result = _provaloresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataUltimaCorrecao.Should().Be("");
    }

    [Fact]
    public void Read_WithNullDateDataUltimaCorrecaoFields_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFProValores(DataUltimaCorrecao: null);
        _mockProValoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFProValores.Object);
        // Act
        var result = _provaloresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataUltimaCorrecao.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("31/12/2024")]
    [InlineData("2025/01/01T23:59:59")]
    [InlineData("2000-02-29")] // Leap year
    [InlineData("2025/01/02T14:30:45.123")]
    public void Read_WithValidDateDataUltimaCorrecaoFormats_ShouldParseCorrectly(string dateString)
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedDate = DateTime.Parse(dateString);
        SetupMockFProValores(DataUltimaCorrecao: dateString);
        _mockProValoresFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFProValores.Object);
        // Act
        var result = _provaloresWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataUltimaCorrecao.Should().Be(dateString);
    }
#endregion
#endregion
}