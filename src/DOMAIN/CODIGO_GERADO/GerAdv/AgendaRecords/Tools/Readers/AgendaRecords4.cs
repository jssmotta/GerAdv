// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Readers;
public partial class AgendaRecordsReader(IFAgendaRecordsFactory agendarecordsFactory) : IAgendaRecordsReader
{
    private readonly IFAgendaRecordsFactory _agendarecordsFactory = agendarecordsFactory;
    public async Task<IEnumerable<AgendaRecordsResponseAll>> Listar(int max, string uri, string cWhere, List<SqlParameter> parameters, string order, CancellationToken cancellationToken) => await ListarTabela(BuildSqlQuery(DBAgendaRecords.CamposSqlX, cWhere, order, max), parameters, uri, caching: DevourerOne.PCachingDefault, max: max, cancellationToken: cancellationToken);
    private async Task<IEnumerable<AgendaRecordsResponseAll>> ListarTabela(string sql, List<SqlParameter> parameters, string uri, bool caching = DevourerOne.PCachingDefault, int max = 200, CancellationToken cancellationToken = default)
    {
        var result = new List<AgendaRecordsResponseAll>(max);
        await using var connection = Configuracoes.GetConnectionByUri(uri);
        await using var cmd = new SqlCommand(cmdText: ConfiguracoesDBT.CmdSql(sql), connection: connection?.InnerConnection)
        {
            CommandTimeout = 30
        };
        foreach (var param in parameters)
        {
            if (!cmd.Parameters.Contains(param.ParameterName))
            {
                var newParam = new SqlParameter(param.ParameterName, param.Value)
                {
                    SqlDbType = param.SqlDbType,
                    Direction = param.Direction,
                    Size = param.Size,
                    Precision = param.Precision,
                    Scale = param.Scale
                };
                cmd.Parameters.Add(newParam);
            }
        }

        await using var reader = await cmd.ExecuteReaderAsync(CommandBehavior.SingleResult);
        while (await reader.ReadAsync())
        {
            if (cancellationToken.IsCancellationRequested)
                return result;
            result.Add(ReadAll(_agendarecordsFactory.CreateFromReader(reader), reader)!);
        }

        return result;
    }

    public async Task<AgendaRecordsResponse?> Read(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _agendarecordsFactory.CreateFromIdAsync(id, oCnn);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public async Task<Models.AgendaRecords?> ReadM(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _agendarecordsFactory.CreateFromIdAsync(id, oCnn);
        var agendarecords = new Models.AgendaRecords
        {
            Id = dbRec.ID,
            Agenda = dbRec.FAgenda,
            Julgador = dbRec.FJulgador,
            ClientesSocios = dbRec.FClientesSocios,
            Perito = dbRec.FPerito,
            Colaborador = dbRec.FColaborador,
            Foro = dbRec.FForo,
            Aviso1 = dbRec.FAviso1,
            Aviso2 = dbRec.FAviso2,
            Aviso3 = dbRec.FAviso3,
            CrmAviso1 = dbRec.FCrmAviso1,
            CrmAviso2 = dbRec.FCrmAviso2,
            CrmAviso3 = dbRec.FCrmAviso3,
        };
        if (DateTime.TryParse(dbRec.FDataAviso1, out DateTime XDataAviso1))
        {
            agendarecords.DataAviso1 = dbRec.FDataAviso1;
            agendarecords.DataAviso1_date = XDataAviso1;
        }

        if (DateTime.TryParse(dbRec.FDataAviso2, out DateTime XDataAviso2))
        {
            agendarecords.DataAviso2 = dbRec.FDataAviso2;
            agendarecords.DataAviso2_date = XDataAviso2;
        }

        if (DateTime.TryParse(dbRec.FDataAviso3, out DateTime XDataAviso3))
        {
            agendarecords.DataAviso3 = dbRec.FDataAviso3;
            agendarecords.DataAviso3_date = XDataAviso3;
        }

        return agendarecords;
    }

    public AgendaRecordsResponse? Read(FAgendaRecords dbRec, MsiSqlConnection oCnn)
    {
        return Read(dbRec);
    }

    public AgendaRecordsResponse? Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn)
    {
        using var dbRec = _agendarecordsFactory.CreateFromParameters(parameters, oCnn, sqlWhere: where);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public AgendaRecordsResponse? Read(FAgendaRecords dbRec) // Track 001.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var agendarecords = new AgendaRecordsResponse
        {
            Id = dbRec.ID,
            Agenda = dbRec.FAgenda,
            Julgador = dbRec.FJulgador,
            ClientesSocios = dbRec.FClientesSocios,
            Perito = dbRec.FPerito,
            Colaborador = dbRec.FColaborador,
            Foro = dbRec.FForo,
            Aviso1 = dbRec.FAviso1,
            Aviso2 = dbRec.FAviso2,
            Aviso3 = dbRec.FAviso3,
            CrmAviso1 = dbRec.FCrmAviso1,
            CrmAviso2 = dbRec.FCrmAviso2,
            CrmAviso3 = dbRec.FCrmAviso3,
        };
        if (DateTime.TryParse(dbRec.FDataAviso1, out DateTime XDataAviso1))
        {
            agendarecords.DataAviso1 = dbRec.FDataAviso1;
            agendarecords.DataAviso1_date = XDataAviso1;
        }

        if (DateTime.TryParse(dbRec.FDataAviso2, out DateTime XDataAviso2))
        {
            agendarecords.DataAviso2 = dbRec.FDataAviso2;
            agendarecords.DataAviso2_date = XDataAviso2;
        }

        if (DateTime.TryParse(dbRec.FDataAviso3, out DateTime XDataAviso3))
        {
            agendarecords.DataAviso3 = dbRec.FDataAviso3;
            agendarecords.DataAviso3_date = XDataAviso3;
        }

        return agendarecords;
    }

    public AgendaRecordsResponse? Read(SG.GerAdv.DBAgendaRecords dbRec) // Track 002.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var agendarecords = new AgendaRecordsResponse
        {
            Id = dbRec.ID,
            Agenda = dbRec.FAgenda,
            Julgador = dbRec.FJulgador,
            ClientesSocios = dbRec.FClientesSocios,
            Perito = dbRec.FPerito,
            Colaborador = dbRec.FColaborador,
            Foro = dbRec.FForo,
            Aviso1 = dbRec.FAviso1,
            Aviso2 = dbRec.FAviso2,
            Aviso3 = dbRec.FAviso3,
            CrmAviso1 = dbRec.FCrmAviso1,
            CrmAviso2 = dbRec.FCrmAviso2,
            CrmAviso3 = dbRec.FCrmAviso3,
        };
        if (DateTime.TryParse(dbRec.FDataAviso1, out DateTime XDataAviso1))
        {
            agendarecords.DataAviso1 = dbRec.FDataAviso1;
            agendarecords.DataAviso1_date = XDataAviso1;
        }

        if (DateTime.TryParse(dbRec.FDataAviso2, out DateTime XDataAviso2))
        {
            agendarecords.DataAviso2 = dbRec.FDataAviso2;
            agendarecords.DataAviso2_date = XDataAviso2;
        }

        if (DateTime.TryParse(dbRec.FDataAviso3, out DateTime XDataAviso3))
        {
            agendarecords.DataAviso3 = dbRec.FDataAviso3;
            agendarecords.DataAviso3_date = XDataAviso3;
        }

        return agendarecords;
    }

    public AgendaRecordsResponseAll? ReadAll(FAgendaRecords dbRec, IDataRecord dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var agendarecords = new AgendaRecordsResponseAll
        {
            Id = dbRec.ID,
            Agenda = dbRec.FAgenda,
            Julgador = dbRec.FJulgador,
            ClientesSocios = dbRec.FClientesSocios,
            Perito = dbRec.FPerito,
            Colaborador = dbRec.FColaborador,
            Foro = dbRec.FForo,
            Aviso1 = dbRec.FAviso1,
            Aviso2 = dbRec.FAviso2,
            Aviso3 = dbRec.FAviso3,
            CrmAviso1 = dbRec.FCrmAviso1,
            CrmAviso2 = dbRec.FCrmAviso2,
            CrmAviso3 = dbRec.FCrmAviso3,
        };
        if (DateTime.TryParse(dbRec.FDataAviso1, out DateTime XDataAviso1))
        {
            agendarecords.DataAviso1 = dbRec.FDataAviso1;
            agendarecords.DataAviso1_date = XDataAviso1;
        }

        if (DateTime.TryParse(dbRec.FDataAviso2, out DateTime XDataAviso2))
        {
            agendarecords.DataAviso2 = dbRec.FDataAviso2;
            agendarecords.DataAviso2_date = XDataAviso2;
        }

        if (DateTime.TryParse(dbRec.FDataAviso3, out DateTime XDataAviso3))
        {
            agendarecords.DataAviso3 = dbRec.FDataAviso3;
            agendarecords.DataAviso3_date = XDataAviso3;
        }

        try
        {
            agendarecords.NomeClientesSocios = dr[DBClientesSociosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agendarecords.NomeColaboradores = dr[DBColaboradoresDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agendarecords.NomeForo = dr[DBForoDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return agendarecords;
    }

    public AgendaRecordsResponseAll? ReadAll(SG.GerAdv.DBAgendaRecords dbRec, DataRow dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var agendarecords = new AgendaRecordsResponseAll
        {
            Id = dbRec.ID,
            Agenda = dbRec.FAgenda,
            Julgador = dbRec.FJulgador,
            ClientesSocios = dbRec.FClientesSocios,
            Perito = dbRec.FPerito,
            Colaborador = dbRec.FColaborador,
            Foro = dbRec.FForo,
            Aviso1 = dbRec.FAviso1,
            Aviso2 = dbRec.FAviso2,
            Aviso3 = dbRec.FAviso3,
            CrmAviso1 = dbRec.FCrmAviso1,
            CrmAviso2 = dbRec.FCrmAviso2,
            CrmAviso3 = dbRec.FCrmAviso3,
        };
        if (DateTime.TryParse(dbRec.FDataAviso1, out DateTime XDataAviso1))
        {
            agendarecords.DataAviso1 = dbRec.FDataAviso1;
            agendarecords.DataAviso1_date = XDataAviso1;
        }

        if (DateTime.TryParse(dbRec.FDataAviso2, out DateTime XDataAviso2))
        {
            agendarecords.DataAviso2 = dbRec.FDataAviso2;
            agendarecords.DataAviso2_date = XDataAviso2;
        }

        if (DateTime.TryParse(dbRec.FDataAviso3, out DateTime XDataAviso3))
        {
            agendarecords.DataAviso3 = dbRec.FDataAviso3;
            agendarecords.DataAviso3_date = XDataAviso3;
        }

        try
        {
            agendarecords.NomeClientesSocios = dr[DBClientesSociosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agendarecords.NomeColaboradores = dr[DBColaboradoresDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            agendarecords.NomeForo = dr[DBForoDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return agendarecords;
    }
}