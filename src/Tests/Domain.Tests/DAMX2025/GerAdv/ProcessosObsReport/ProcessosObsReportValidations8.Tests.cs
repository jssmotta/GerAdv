// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class ProcessosObsReportValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFProcessosObsReportFactory> _mockProcessosObsReportFactory;
    private readonly Mock<IProcessosObsReportReader> _mockReader;
    private readonly ProcessosObsReportValidation _validation;
    private readonly Mock<IProcessosObsReportService> _mockProcessosObsReportService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly ProcessosObsReportService _service;
    private readonly string _validUri = "test-uri";
    public ProcessosObsReportValidationTests()
    {
        _mockProcessosObsReportFactory = new Mock<IFProcessosObsReportFactory>();
        _mockReader = new Mock<IProcessosObsReportReader>();
        _validation = new ProcessosObsReportValidation();
        _mockProcessosObsReportService = new Mock<IProcessosObsReportService>();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

#region Class Structure Tests
    [Fact]
    public void ProcessosObsReportValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IProcessosObsReportValidation>();
    }

    [Fact]
    public void ProcessosObsReportValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(ProcessosObsReportValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void ProcessosObsReportValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(ProcessosObsReportValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.ProcessosObsReport CreateValidProcessosObsReport()
    {
        return new Models.ProcessosObsReport
        {
            Id = 1,
            Data = "27/05/2022",
            Processo = 1,
            Observacao = "Observação teste",
            Historico = 0
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockProcessosObsReportService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterProcessosObsReport>(), It.IsAny<string>())).ReturnsAsync(new List<ProcessosObsReportResponseAll>());
    // Setup other mocks but don't override the ProcessosObsReports service mock
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockProcessosObsReportService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterProcessosObsReport>(), It.IsAny<string>())).ReturnsAsync(new List<ProcessosObsReportResponseAll>());
    // Setup other mocks but don't override the ProcessosObsReports service mock
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var processosobsreport = new Models.ProcessosObsReport
        {
            Id = 1,
            Data = "27/05/2022",
            Processo = 1,
            Observacao = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(processosobsreport, _mockProcessosObsReportService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockProcessosObsReportService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region ValidateReg Required Data Method Tests 
    [Fact]
    public async Task ValidateReg_WithEmptyData_ShouldThrowSGValidationException()
    {
        // Arrange
        var processosobsreport = CreateValidProcessosObsReport();
        processosobsreport.Data = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(processosobsreport, _mockProcessosObsReportService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullData_ShouldThrowSGValidationException()
    {
        // Arrange
        var processosobsreport = CreateValidProcessosObsReport();
        processosobsreport.Data = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(processosobsreport, _mockProcessosObsReportService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataData_ShouldReturnTrue()
    {
        // Arrange
        var processosobsreport = CreateValidProcessosObsReport();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(processosobsreport, _mockProcessosObsReportService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceData_ShouldThrowSGValidationException()
    {
        // Arrange
        var processosobsreport = CreateValidProcessosObsReport();
        processosobsreport.Data = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(processosobsreport, _mockProcessosObsReportService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}