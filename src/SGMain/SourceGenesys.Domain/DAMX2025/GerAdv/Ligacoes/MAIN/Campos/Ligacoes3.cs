// 100% auto-generated by Source Genesys Core
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming 1
public partial class DBLigacoes
{
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool pFldFAssunto, pFldFAgeClienteAvisado, pFldFCelular, pFldFCliente, pFldFContato, pFldFDataRealizada, pFldFQuemID, pFldFTelefonista, pFldFUltimoAviso, pFldFHoraFinal, pFldFNome, pFldFQuemCodigo, pFldFSolicitante, pFldFPara, pFldFFone, pFldFRamal, pFldFParticular, pFldFRealizada, pFldFStatus, pFldFData, pFldFHora, pFldFUrgente, pFldFGUID, pFldFLigarPara, pFldFProcesso, pFldFStartScreen, pFldFEmotion, pFldFBold;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected int m_FAgeClienteAvisado, m_FCliente, m_FQuemID, m_FTelefonista, m_FQuemCodigo, m_FSolicitante, m_FRamal, m_FProcesso, m_FEmotion;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected string? m_FAssunto, m_FContato, m_FNome, m_FPara, m_FFone, m_FStatus, m_FGUID, m_FLigarPara;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected DateTime? m_FDataRealizada, m_FUltimoAviso, m_FHoraFinal, m_FData, m_FHora;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool m_FCelular, m_FParticular, m_FRealizada, m_FUrgente, m_FStartScreen, m_FBold;
    // Tracking Code: 20250503
    [StringLength(200, ErrorMessage = "A propriedade FAssunto da tabela Ligacoes deve ter no máximo 200 caracteres.")]
    public virtual string? FAssunto
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAssunto ?? string.Empty;
        set
        {
            pFldFAssunto = pFldFAssunto || !(m_FAssunto ?? string.Empty).Equals(value);
            if (pFldFAssunto)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FAssunto = trimmed.Length > 200 ? trimmed.AsSpan(0, 200).ToString() : trimmed;
            }
        }
    }

    public virtual int FAgeClienteAvisado
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAgeClienteAvisado;
        set
        {
            pFldFAgeClienteAvisado = pFldFAgeClienteAvisado || value != m_FAgeClienteAvisado;
            if (pFldFAgeClienteAvisado)
                m_FAgeClienteAvisado = value;
        }
    }

    public virtual bool FCelular
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCelular;
        set
        {
            pFldFCelular = pFldFCelular || value != m_FCelular;
            if (pFldFCelular)
                m_FCelular = value;
        }
    }

    public virtual int FCliente
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCliente;
        set
        {
            pFldFCliente = pFldFCliente || value != m_FCliente;
            if (pFldFCliente)
                m_FCliente = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(200, ErrorMessage = "A propriedade FContato da tabela Ligacoes deve ter no máximo 200 caracteres.")]
    public virtual string? FContato
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FContato ?? string.Empty;
        set
        {
            pFldFContato = pFldFContato || !(m_FContato ?? string.Empty).Equals(value);
            if (pFldFContato)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FContato = trimmed.Length > 200 ? trimmed.AsSpan(0, 200).ToString() : trimmed;
            }
        }
    }

    public virtual string? FDataRealizada
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDataRealizada is null || m_FDataRealizada == DevourerOne.DDataZerada ? string.Empty : m_FDataRealizada.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFDataRealizada, m_FDataRealizada, value)is not (true, var changed, var data))
                return;
            (pFldFDataRealizada, m_FDataRealizada) = (changed, data);
        }
    }

    public virtual int FQuemID
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FQuemID;
        set
        {
            pFldFQuemID = pFldFQuemID || value != m_FQuemID;
            if (pFldFQuemID)
                m_FQuemID = value;
        }
    }

    public virtual int FTelefonista
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FTelefonista;
        set
        {
            pFldFTelefonista = pFldFTelefonista || value != m_FTelefonista;
            if (pFldFTelefonista)
                m_FTelefonista = value;
        }
    }

    public virtual string? FUltimoAviso
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FUltimoAviso is null || m_FUltimoAviso == DevourerOne.DDataZerada ? string.Empty : m_FUltimoAviso.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFUltimoAviso, m_FUltimoAviso, value)is not (true, var changed, var data))
                return;
            (pFldFUltimoAviso, m_FUltimoAviso) = (changed, data);
        }
    }

    public virtual string? FHoraFinal
    {
        // fdDate2 TRACE CODE
        get => $"{m_FHoraFinal:HH:mm}";
        set
        {
            if (string.IsNullOrEmpty(value))
            {
                pFldFHoraFinal = pFldFHoraFinal || m_FHoraFinal != null;
                m_FHoraFinal = null;
                return;
            }

            if (value.IsEquals(DevourerOne.PNow))
            {
                pFldFHoraFinal = true;
                m_FHoraFinal = DevourerOne.DateTimeUtc;
            }
            else
            {
                if (value.IsEquals($"{m_FHoraFinal:HH:mm}"))
                    return;
                if (!DateTime.TryParse(value, out var dateTime))
                    return;
                pFldFHoraFinal = true;
                m_FHoraFinal = dateTime;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(50, ErrorMessage = "A propriedade FNome da tabela Ligacoes deve ter no máximo 50 caracteres.")]
    public virtual string? FNome
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNome ?? string.Empty;
        set
        {
            pFldFNome = pFldFNome || !(m_FNome ?? string.Empty).Equals(value);
            if (pFldFNome)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FNome = trimmed.Length > 50 ? trimmed.AsSpan(0, 50).ToString() : trimmed;
            }
        }
    }

    public virtual int FQuemCodigo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FQuemCodigo;
        set
        {
            pFldFQuemCodigo = pFldFQuemCodigo || value != m_FQuemCodigo;
            if (pFldFQuemCodigo)
                m_FQuemCodigo = value;
        }
    }

    public virtual int FSolicitante
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FSolicitante;
        set
        {
            pFldFSolicitante = pFldFSolicitante || value != m_FSolicitante;
            if (pFldFSolicitante)
                m_FSolicitante = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(100, ErrorMessage = "A propriedade FPara da tabela Ligacoes deve ter no máximo 100 caracteres.")]
    public virtual string? FPara
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPara ?? string.Empty;
        set
        {
            pFldFPara = pFldFPara || !(m_FPara ?? string.Empty).Equals(value);
            if (pFldFPara)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FPara = trimmed.Length > 100 ? trimmed.AsSpan(0, 100).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    public virtual string? FFone
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FFone ?? string.Empty;
        set
        {
            pFldFFone = pFldFFone || !(m_FFone ?? string.Empty).Equals(value);
            if (pFldFFone)
                m_FFone = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public virtual int FRamal
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FRamal;
        set
        {
            pFldFRamal = pFldFRamal || value != m_FRamal;
            if (pFldFRamal)
                m_FRamal = value;
        }
    }

    public virtual bool FParticular
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FParticular;
        set
        {
            pFldFParticular = pFldFParticular || value != m_FParticular;
            if (pFldFParticular)
                m_FParticular = value;
        }
    }

    public virtual bool FRealizada
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FRealizada;
        set
        {
            pFldFRealizada = pFldFRealizada || value != m_FRealizada;
            if (pFldFRealizada)
                m_FRealizada = value;
        }
    }

    // Tracking Code: 20250503
    public virtual string? FStatus
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FStatus ?? string.Empty;
        set
        {
            pFldFStatus = pFldFStatus || !(m_FStatus ?? string.Empty).Equals(value);
            if (pFldFStatus)
                m_FStatus = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public virtual string? FData
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FData is null || m_FData == DevourerOne.DDataZerada ? string.Empty : m_FData.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFData, m_FData, value)is not (true, var changed, var data))
                return;
            (pFldFData, m_FData) = (changed, data);
        }
    }

    public virtual string? FHora
    {
        // fdDate2 TRACE CODE
        get => $"{m_FHora:HH:mm}";
        set
        {
            if (string.IsNullOrEmpty(value))
            {
                pFldFHora = pFldFHora || m_FHora != null;
                m_FHora = null;
                return;
            }

            if (value.IsEquals(DevourerOne.PNow))
            {
                pFldFHora = true;
                m_FHora = DevourerOne.DateTimeUtc;
            }
            else
            {
                if (value.IsEquals($"{m_FHora:HH:mm}"))
                    return;
                if (!DateTime.TryParse(value, out var dateTime))
                    return;
                pFldFHora = true;
                m_FHora = dateTime;
            }
        }
    }

    public virtual bool FUrgente
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FUrgente;
        set
        {
            pFldFUrgente = pFldFUrgente || value != m_FUrgente;
            if (pFldFUrgente)
                m_FUrgente = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(100, ErrorMessage = "A propriedade FGUID da tabela Ligacoes deve ter no máximo 100 caracteres.")]
    public virtual string? FGUID
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FGUID ?? string.Empty;
        set
        {
            pFldFGUID = pFldFGUID || !(m_FGUID ?? string.Empty).Equals(value);
            if (pFldFGUID)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FGUID = trimmed.Length > 100 ? trimmed.AsSpan(0, 100).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(255, ErrorMessage = "A propriedade FLigarPara da tabela Ligacoes deve ter no máximo 255 caracteres.")]
    public virtual string? FLigarPara
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FLigarPara ?? string.Empty;
        set
        {
            pFldFLigarPara = pFldFLigarPara || !(m_FLigarPara ?? string.Empty).Equals(value);
            if (pFldFLigarPara)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FLigarPara = trimmed.Length > 255 ? trimmed.AsSpan(0, 255).ToString() : trimmed;
            }
        }
    }

    public virtual int FProcesso
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FProcesso;
        set
        {
            pFldFProcesso = pFldFProcesso || value != m_FProcesso;
            if (pFldFProcesso)
                m_FProcesso = value;
        }
    }

    public virtual bool FStartScreen
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FStartScreen;
        set
        {
            pFldFStartScreen = pFldFStartScreen || value != m_FStartScreen;
            if (pFldFStartScreen)
                m_FStartScreen = value;
        }
    }

    public virtual int FEmotion
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEmotion;
        set
        {
            pFldFEmotion = pFldFEmotion || value != m_FEmotion;
            if (pFldFEmotion)
                m_FEmotion = value;
        }
    }

    public virtual bool FBold
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FBold;
        set
        {
            pFldFBold = pFldFBold || value != m_FBold;
            if (pFldFBold)
                m_FBold = value;
        }
    }

    public void SetAuditor(int usuarioId) => AuditorQuem = usuarioId;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITabelaName() => PTabelaNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoCodigo() => CampoCodigo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoNome() => CampoNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string IPrefixo() => PTabelaPrefixo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITypeFieldCode() => "int";
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IdIsIdentity() => false;
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetID() => ID;
}