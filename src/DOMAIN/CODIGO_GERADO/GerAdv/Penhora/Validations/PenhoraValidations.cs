// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IPenhoraValidation
{
    Task<bool> ValidateReg(Models.Penhora reg, IPenhoraService service, IPenhoraStatusReader penhorastatusReader, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
    Task<bool> CanDelete(int? id, IPenhoraService service, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
}

public class PenhoraValidation : IPenhoraValidation
{
    public async Task<bool> CanDelete(int? id, IPenhoraService service, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (id == null || id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id ?? default, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.Penhora reg)
    {
        if (reg.Nome != null && reg.Nome.Length > DBPenhoraDicInfo.PhrNome.FTamanho)
            throw new SGValidationException($"Nome deve ter no máximo {DBPenhoraDicInfo.PhrNome.FTamanho} caracteres.");
        if (reg.GUID != null && reg.GUID.Length > DBPenhoraDicInfo.PhrGUID.FTamanho)
            throw new SGValidationException($"GUID deve ter no máximo {DBPenhoraDicInfo.PhrGUID.FTamanho} caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.Penhora reg, IPenhoraService service, IPenhoraStatusReader penhorastatusReader, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Nome))
            throw new SGValidationException("Nome é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (!string.IsNullOrWhiteSpace(reg.DataPenhora))
        {
            if (DateTime.TryParse(reg.DataPenhora, out DateTime dataAntiga))
            {
                if (dataAntiga < new DateTime(1900, 1, 1))
                    throw new SGValidationException("DataPenhora não pode ser anterior a 01/01/1900.");
            }
        }

        // PenhoraStatus
        if (!reg.PenhoraStatus.IsEmptyIDNumber())
        {
            var regPenhoraStatus = await penhorastatusReader.Read(reg.PenhoraStatus, oCnn);
            if (regPenhoraStatus == null || regPenhoraStatus.Id != reg.PenhoraStatus)
            {
                throw new SGValidationException($"Penhora Status não encontrado ({regPenhoraStatus?.Id}).");
            }
        }

        return true;
    }
}