// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class OperadorValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFOperadorFactory> _mockOperadorFactory;
    private readonly Mock<IOperadorReader> _mockReader;
    private readonly OperadorValidation _validation;
    private readonly Mock<IOperadorService> _mockOperadorService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly OperadorService _service;
    private readonly string _validUri = "test-uri";
    public OperadorValidationTests()
    {
        _mockOperadorFactory = new Mock<IFOperadorFactory>();
        _mockReader = new Mock<IOperadorReader>();
        _validation = new OperadorValidation();
        _mockOperadorService = new Mock<IOperadorService>();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

#region Class Structure Tests
    [Fact]
    public void OperadorValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IOperadorValidation>();
    }

    [Fact]
    public void OperadorValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(OperadorValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void OperadorValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(OperadorValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.Operador CreateValidOperador()
    {
        return new Models.Operador
        {
            Id = 1,
            EMail = "test@email.com",
            Pasta = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Telefonista = false,
            Master = true,
            Nome = "João",
            Nick = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Excluido = false,
            Situacao = true,
            MinhaDescricao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            EMailNet = "test@email.com",
            OnLine = false,
            SysOp = true,
            IsFinanceiro = false,
            Top = true,
            Sexo = false,
            Basico = true,
            Externo = false,
            EMailConfirmado = true,
            DataLimiteReset = "24/04/1975"
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockOperadorService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterOperador>(), It.IsAny<string>())).ReturnsAsync(new List<OperadorResponseAll>());
    // Setup other mocks but don't override the Operadors service mock
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockOperadorService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterOperador>(), It.IsAny<string>())).ReturnsAsync(new List<OperadorResponseAll>());
    // Setup other mocks but don't override the Operadors service mock
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var operador = new Models.Operador
        {
            Id = 1,
            EMail = null,
            Pasta = null,
            Telefonista = false,
            Master = true,
            Nome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Nick = null,
            Excluido = false,
            Situacao = true,
            MinhaDescricao = null,
            EMailNet = null,
            DataLimiteReset = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(operador, _mockOperadorService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockOperadorService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region EMail Validation Tests
    [Fact]
    public async Task ValidateReg_WithInvalidEMail_ShouldThrowSGValidationException()
    {
        // Arrange
        var operador = CreateValidOperador();
        operador.EMail = "invalid-email";
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(operador, _mockOperadorService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("formato inválido.");
    }

    [Fact]
    public async Task ValidateReg_WithValidEMail_ShouldPass()
    {
        // Arrange
        var operador = CreateValidOperador();
        operador.EMail = "menphis@example.com";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(operador, _mockOperadorService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithEmptyEMail_ShouldPass()
    {
        // Arrange
        var operador = CreateValidOperador();
        operador.EMail = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(operador, _mockOperadorService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region EMailNet Validation Tests
    [Fact]
    public async Task ValidateReg_WithInvalidEMailNet_ShouldThrowSGValidationException()
    {
        // Arrange
        var operador = CreateValidOperador();
        operador.EMailNet = "invalid-email";
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(operador, _mockOperadorService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("formato inválido.");
    }

    [Fact]
    public async Task ValidateReg_WithValidEMailNet_ShouldPass()
    {
        // Arrange
        var operador = CreateValidOperador();
        operador.EMailNet = "menphis@example.com";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(operador, _mockOperadorService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithEmptyEMailNet_ShouldPass()
    {
        // Arrange
        var operador = CreateValidOperador();
        operador.EMailNet = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(operador, _mockOperadorService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region DataLimiteReset Validation Tests
    [Theory]
    [InlineData("01/01/1899")]
    [InlineData("31/12/1899")]
    public async Task ValidateReg_WithDataLimiteResetBeforeMinDate_ShouldThrowSGValidationException(string invalidDate)
    {
        // Arrange
        var operador = CreateValidOperador();
        operador.DataLimiteReset = invalidDate;
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(operador, _mockOperadorService.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("01/01/1900.");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataLimiteReset_ShouldPass()
    {
        // Arrange
        var operador = CreateValidOperador();
        operador.DataLimiteReset = "01/01/1990";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(operador, _mockOperadorService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullDataLimiteReset_ShouldPass()
    {
        // Arrange
        var operador = CreateValidOperador();
        operador.DataLimiteReset = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(operador, _mockOperadorService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithInvalidDateDataLimiteResetFormat_ShouldPass()
    {
        // Arrange
        var operador = CreateValidOperador();
        operador.DataLimiteReset = "invalid-date";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(operador, _mockOperadorService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue(); // Invalid format is ignored, not validated
    }

    [Fact]
    public async Task ValidateReg_WithEmptyDataLimiteReset_ShouldPass()
    {
        // Arrange
        var operador = CreateValidOperador();
        operador.DataLimiteReset = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(operador, _mockOperadorService.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}