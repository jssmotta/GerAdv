// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class ProSucumbenciaValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFProSucumbenciaFactory> _mockProSucumbenciaFactory;
    private readonly Mock<IProSucumbenciaReader> _mockReader;
    private readonly ProSucumbenciaValidation _validation;
    private readonly Mock<IProSucumbenciaService> _mockProSucumbenciaService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IInstanciaReader> _mockInstanciaReader;
    private readonly Mock<ITipoOrigemSucumbenciaReader> _mockTipoOrigemSucumbenciaReader;
    private readonly ProSucumbenciaService _service;
    private readonly string _validUri = "test-uri";
    public ProSucumbenciaValidationTests()
    {
        _mockProSucumbenciaFactory = new Mock<IFProSucumbenciaFactory>();
        _mockReader = new Mock<IProSucumbenciaReader>();
        _validation = new ProSucumbenciaValidation();
        _mockProSucumbenciaService = new Mock<IProSucumbenciaService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockInstanciaReader = new Mock<IInstanciaReader>();
        _mockTipoOrigemSucumbenciaReader = new Mock<ITipoOrigemSucumbenciaReader>();
    }

#region Class Structure Tests
    [Fact]
    public void ProSucumbenciaValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IProSucumbenciaValidation>();
    }

    [Fact]
    public void ProSucumbenciaValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(ProSucumbenciaValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void ProSucumbenciaValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(ProSucumbenciaValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.ProSucumbencia CreateValidProSucumbencia()
    {
        return new Models.ProSucumbencia
        {
            Id = 1,
            Processo = 1,
            Instancia = 0,
            Data = "27/05/2022",
            Nome = "João",
            TipoOrigemSucumbencia = 1,
            Valor = 1m,
            Percentual = "AAA",
            GUID = Guid.NewGuid().ToString()
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockProSucumbenciaService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterProSucumbencia>(), It.IsAny<string>())).ReturnsAsync(new List<ProSucumbenciaResponseAll>());
        // Setup other mocks but don't override the ProSucumbencias service mock
        _mockInstanciaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.InstanciaResponse { Id = id }));
        _mockTipoOrigemSucumbenciaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.TipoOrigemSucumbenciaResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockProSucumbenciaService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterProSucumbencia>(), It.IsAny<string>())).ReturnsAsync(new List<ProSucumbenciaResponseAll>());
        // Setup other mocks but don't override the ProSucumbencias service mock
        _mockInstanciaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.InstanciaResponse { Id = 0 }));
        _mockTipoOrigemSucumbenciaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.TipoOrigemSucumbenciaResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var prosucumbencia = new Models.ProSucumbencia
        {
            Id = 1,
            Processo = 1,
            Data = "27/05/2022",
            Nome
            TipoOrigemSucumbencia = 1,
            Percentual = null,
            GUID = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(prosucumbencia, _mockProSucumbenciaService.Object, _mockInstanciaReader.Object, _mockTipoOrigemSucumbenciaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockProSucumbenciaService.Object, _mockInstanciaReader.Object, _mockTipoOrigemSucumbenciaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region ValidateReg Required Data Method Tests 
    [Fact]
    public async Task ValidateReg_WithEmptyData_ShouldThrowSGValidationException()
    {
        // Arrange
        var prosucumbencia = CreateValidProSucumbencia();
        prosucumbencia.Data = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(prosucumbencia, _mockProSucumbenciaService.Object, _mockInstanciaReader.Object, _mockTipoOrigemSucumbenciaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullData_ShouldThrowSGValidationException()
    {
        // Arrange
        var prosucumbencia = CreateValidProSucumbencia();
        prosucumbencia.Data = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(prosucumbencia, _mockProSucumbenciaService.Object, _mockInstanciaReader.Object, _mockTipoOrigemSucumbenciaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataData_ShouldReturnTrue()
    {
        // Arrange
        var prosucumbencia = CreateValidProSucumbencia();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(prosucumbencia, _mockProSucumbenciaService.Object, _mockInstanciaReader.Object, _mockTipoOrigemSucumbenciaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceData_ShouldThrowSGValidationException()
    {
        // Arrange
        var prosucumbencia = CreateValidProSucumbencia();
        prosucumbencia.Data = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(prosucumbencia, _mockProSucumbenciaService.Object, _mockInstanciaReader.Object, _mockTipoOrigemSucumbenciaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
#region ValidateReg Required Nome Method Tests 
    [Fact]
    public async Task ValidateReg_WithEmptyNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var prosucumbencia = CreateValidProSucumbencia();
        prosucumbencia.Nome = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(prosucumbencia, _mockProSucumbenciaService.Object, _mockInstanciaReader.Object, _mockTipoOrigemSucumbenciaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var prosucumbencia = CreateValidProSucumbencia();
        prosucumbencia.Nome = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(prosucumbencia, _mockProSucumbenciaService.Object, _mockInstanciaReader.Object, _mockTipoOrigemSucumbenciaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataNome_ShouldReturnTrue()
    {
        // Arrange
        var prosucumbencia = CreateValidProSucumbencia();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(prosucumbencia, _mockProSucumbenciaService.Object, _mockInstanciaReader.Object, _mockTipoOrigemSucumbenciaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var prosucumbencia = CreateValidProSucumbencia();
        prosucumbencia.Nome = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(prosucumbencia, _mockProSucumbenciaService.Object, _mockInstanciaReader.Object, _mockTipoOrigemSucumbenciaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
#region ValidateReg Required GUID Method Tests 
    [Fact]
    public async Task ValidateReg_WithEmptyGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var prosucumbencia = CreateValidProSucumbencia();
        prosucumbencia.GUID = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(prosucumbencia, _mockProSucumbenciaService.Object, _mockInstanciaReader.Object, _mockTipoOrigemSucumbenciaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var prosucumbencia = CreateValidProSucumbencia();
        prosucumbencia.GUID = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(prosucumbencia, _mockProSucumbenciaService.Object, _mockInstanciaReader.Object, _mockTipoOrigemSucumbenciaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataGUID_ShouldReturnTrue()
    {
        // Arrange
        var prosucumbencia = CreateValidProSucumbencia();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(prosucumbencia, _mockProSucumbenciaService.Object, _mockInstanciaReader.Object, _mockTipoOrigemSucumbenciaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var prosucumbencia = CreateValidProSucumbencia();
        prosucumbencia.GUID = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(prosucumbencia, _mockProSucumbenciaService.Object, _mockInstanciaReader.Object, _mockTipoOrigemSucumbenciaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
#region Foreign Key Validation Tests - Instancia
    [Fact]
    public async Task ValidateReg_WithInvalidInstancia_ShouldThrowSGValidationException()
    {
        // Arrange
        var prosucumbencia = CreateValidProSucumbencia();
        prosucumbencia.Instancia = 999;
        _mockInstanciaReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.InstanciaResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(prosucumbencia, _mockProSucumbenciaService.Object, _mockInstanciaReader.Object, _mockTipoOrigemSucumbenciaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedInstanciaId_ShouldThrowSGValidationException()
    {
        // Arrange
        var prosucumbencia = CreateValidProSucumbencia();
        prosucumbencia.Instancia = 999;
        var reg888 = new Models.Response.InstanciaResponse
        {
            Id = 888
        }; // Different ID
        _mockInstanciaReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(prosucumbencia, _mockProSucumbenciaService.Object, _mockInstanciaReader.Object, _mockTipoOrigemSucumbenciaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidInstancia_ShouldPass()
    {
        // Arrange
        var prosucumbencia = CreateValidProSucumbencia();
        prosucumbencia.Instancia = 123;
        var reg123 = new Models.Response.InstanciaResponse
        {
            Id = 123
        };
        _mockInstanciaReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(prosucumbencia, _mockProSucumbenciaService.Object, _mockInstanciaReader.Object, _mockTipoOrigemSucumbenciaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyInstancia_ShouldPass()
    {
        // Arrange
        var prosucumbencia = CreateValidProSucumbencia();
        prosucumbencia.Instancia = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(prosucumbencia, _mockProSucumbenciaService.Object, _mockInstanciaReader.Object, _mockTipoOrigemSucumbenciaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockInstanciaReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - TipoOrigemSucumbencia
    [Fact]
    public async Task ValidateReg_WithInvalidTipoOrigemSucumbencia_ShouldThrowSGValidationException()
    {
        // Arrange
        var prosucumbencia = CreateValidProSucumbencia();
        prosucumbencia.TipoOrigemSucumbencia = 999;
        _mockTipoOrigemSucumbenciaReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.TipoOrigemSucumbenciaResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(prosucumbencia, _mockProSucumbenciaService.Object, _mockInstanciaReader.Object, _mockTipoOrigemSucumbenciaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedTipoOrigemSucumbenciaId_ShouldThrowSGValidationException()
    {
        // Arrange
        var prosucumbencia = CreateValidProSucumbencia();
        prosucumbencia.TipoOrigemSucumbencia = 999;
        var reg888 = new Models.Response.TipoOrigemSucumbenciaResponse
        {
            Id = 888
        }; // Different ID
        _mockTipoOrigemSucumbenciaReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(prosucumbencia, _mockProSucumbenciaService.Object, _mockInstanciaReader.Object, _mockTipoOrigemSucumbenciaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidTipoOrigemSucumbencia_ShouldPass()
    {
        // Arrange
        var prosucumbencia = CreateValidProSucumbencia();
        prosucumbencia.TipoOrigemSucumbencia = 123;
        var reg123 = new Models.Response.TipoOrigemSucumbenciaResponse
        {
            Id = 123
        };
        _mockTipoOrigemSucumbenciaReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(prosucumbencia, _mockProSucumbenciaService.Object, _mockInstanciaReader.Object, _mockTipoOrigemSucumbenciaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}