// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Resp = MenphisSI.GerAdv.Models.Response;
using RespAll = MenphisSI.GerAdv.Models.Response.All;

namespace MenphisSI.GerAdv.Tests.Controllers;
public class AgendaSemanaControllerTests
{
    private readonly Mock<IAgendaSemanaService> _mockService;
    private readonly AgendaSemanaController _controller;
    public AgendaSemanaControllerTests()
    {
        _mockService = new Mock<IAgendaSemanaService>();
        _controller = new AgendaSemanaController(_mockService.Object);
        // Setup ModelState for validation tests
        _controller.ControllerContext = new ControllerContext
        {
            HttpContext = new DefaultHttpContext()
        };
    }

    [Fact]
    public void HealthCheck_ReturnsOkWithStatus()
    {
        // Act
        var result = _controller.HealthCheck();
        // Assert
        result.Should().BeOfType<OkObjectResult>();
        OkObjectResult? okResult = result as OkObjectResult;
        _ = okResult.Value.Should().NotBeNull();
        dynamic value = okResult.Value;
        ((string)value.Status).Should().Be("Healthy");
    }

    [Fact]
    public async Task Filter_WithValidFilter_ReturnsFilteredData()
    {
        // Arrange
        var max = 10;
        var filter = new Filters.FilterAgendaSemana
        { /* Set filter properties */
        };
        var expectedData = new List<RespAll.AgendaSemanaResponseAll>
        {
            new RespAll.AgendaSemanaResponseAll
            {
                Id = 1
            }
        };
        _mockService.Setup(x => x.Filter(max, filter, "test-uri")).ReturnsAsync(expectedData);
        // Act
        var result = await _controller.Filter(max, filter, "test-uri");
        // Assert
        result.Should().BeOfType<OkObjectResult>();
        var okResult = result as OkObjectResult;
        okResult.Value.Should().BeEquivalentTo(expectedData);
    }

    [Fact]
    public async Task Filter_WithInvalidModelState_ReturnsBadRequest()
    {
        // Arrange
        _controller.ModelState.AddModelError("test", "Test error");
        var filter = new Filters.FilterAgendaSemana();
        // Act
        var result = await _controller.Filter(10, filter, "test-uri");
        // Assert
        result.Should().BeOfType<BadRequestObjectResult>();
    }
}