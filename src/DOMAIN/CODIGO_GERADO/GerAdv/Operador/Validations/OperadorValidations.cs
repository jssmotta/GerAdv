// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IOperadorValidation
{
    Task<bool> ValidateReg(Models.Operador reg, IOperadorService service, IStatusBiuReader statusbiuReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, IOperadorService service, IAgendaService agendaService, IAgendaFinanceiroService agendafinanceiroService, IAlarmSMSService alarmsmsService, IAlertasService alertasService, IAlertasEnviadosService alertasenviadosService, IContatoCRMService contatocrmService, IContatoCRMOperadorService contatocrmoperadorService, IDiario2Service diario2Service, IGUTAtividadesService gutatividadesService, IOperadorEMailPopupService operadoremailpopupService, IOperadorGrupoService operadorgrupoService, IOperadorGruposAgendaService operadorgruposagendaService, IOperadorGruposAgendaOperadoresService operadorgruposagendaoperadoresService, IPontoVirtualService pontovirtualService, IPontoVirtualAcessosService pontovirtualacessosService, IProcessosParadosService processosparadosService, IProcessOutputRequestService processoutputrequestService, IReuniaoPessoasService reuniaopessoasService, ISMSAliceService smsaliceService, IStatusBiuService statusbiuService, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class OperadorValidation : IOperadorValidation
{
    public async Task<bool> CanDelete(int id, IOperadorService service, IAgendaService agendaService, IAgendaFinanceiroService agendafinanceiroService, IAlarmSMSService alarmsmsService, IAlertasService alertasService, IAlertasEnviadosService alertasenviadosService, IContatoCRMService contatocrmService, IContatoCRMOperadorService contatocrmoperadorService, IDiario2Service diario2Service, IGUTAtividadesService gutatividadesService, IOperadorEMailPopupService operadoremailpopupService, IOperadorGrupoService operadorgrupoService, IOperadorGruposAgendaService operadorgruposagendaService, IOperadorGruposAgendaOperadoresService operadorgruposagendaoperadoresService, IPontoVirtualService pontovirtualService, IPontoVirtualAcessosService pontovirtualacessosService, IProcessosParadosService processosparadosService, IProcessOutputRequestService processoutputrequestService, IReuniaoPessoasService reuniaopessoasService, ISMSAliceService smsaliceService, IStatusBiuService statusbiuService, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        var agendaExists0 = await agendaService.Filter(new Filters.FilterAgenda { Usuario = id }, uri);
        if (agendaExists0 != null && agendaExists0.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Compromisso associados a ele.");
        var agendafinanceiroExists1 = await agendafinanceiroService.Filter(new Filters.FilterAgendaFinanceiro { Usuario = id }, uri);
        if (agendafinanceiroExists1 != null && agendafinanceiroExists1.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Agenda Financeiro associados a ele.");
        var alarmsmsExists2 = await alarmsmsService.Filter(new Filters.FilterAlarmSMS { Operador = id }, uri);
        if (alarmsmsExists2 != null && alarmsmsExists2.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Alarm S M S associados a ele.");
        var alertasExists3 = await alertasService.Filter(new Filters.FilterAlertas { Operador = id }, uri);
        if (alertasExists3 != null && alertasExists3.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Alertas associados a ele.");
        var alertasenviadosExists4 = await alertasenviadosService.Filter(new Filters.FilterAlertasEnviados { Operador = id }, uri);
        if (alertasenviadosExists4 != null && alertasenviadosExists4.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Alertas Enviados associados a ele.");
        var contatocrmExists5 = await contatocrmService.Filter(new Filters.FilterContatoCRM { Operador = id }, uri);
        if (contatocrmExists5 != null && contatocrmExists5.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Contato C R M associados a ele.");
        var contatocrmoperadorExists6 = await contatocrmoperadorService.Filter(new Filters.FilterContatoCRMOperador { Operador = id }, uri);
        if (contatocrmoperadorExists6 != null && contatocrmoperadorExists6.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Contato C R M Operador associados a ele.");
        var diario2Exists7 = await diario2Service.Filter(new Filters.FilterDiario2 { Operador = id }, uri);
        if (diario2Exists7 != null && diario2Exists7.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Diario2 associados a ele.");
        var gutatividadesExists8 = await gutatividadesService.Filter(new Filters.FilterGUTAtividades { Operador = id }, uri);
        if (gutatividadesExists8 != null && gutatividadesExists8.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela G U T Atividades associados a ele.");
        var operadoremailpopupExists9 = await operadoremailpopupService.Filter(new Filters.FilterOperadorEMailPopup { Operador = id }, uri);
        if (operadoremailpopupExists9 != null && operadoremailpopupExists9.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Operador E Mail Popup associados a ele.");
        var operadorgrupoExists10 = await operadorgrupoService.Filter(new Filters.FilterOperadorGrupo { Operador = id }, uri);
        if (operadorgrupoExists10 != null && operadorgrupoExists10.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Operador Grupo associados a ele.");
        var operadorgruposagendaExists11 = await operadorgruposagendaService.Filter(new Filters.FilterOperadorGruposAgenda { Operador = id }, uri);
        if (operadorgruposagendaExists11 != null && operadorgruposagendaExists11.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Operador Grupos Agenda associados a ele.");
        var operadorgruposagendaoperadoresExists12 = await operadorgruposagendaoperadoresService.Filter(new Filters.FilterOperadorGruposAgendaOperadores { Operador = id }, uri);
        if (operadorgruposagendaoperadoresExists12 != null && operadorgruposagendaoperadoresExists12.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Operador Grupos Agenda Operadores associados a ele.");
        var pontovirtualExists13 = await pontovirtualService.Filter(new Filters.FilterPontoVirtual { Operador = id }, uri);
        if (pontovirtualExists13 != null && pontovirtualExists13.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Ponto Virtual associados a ele.");
        var pontovirtualacessosExists14 = await pontovirtualacessosService.Filter(new Filters.FilterPontoVirtualAcessos { Operador = id }, uri);
        if (pontovirtualacessosExists14 != null && pontovirtualacessosExists14.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Ponto Virtual Acessos associados a ele.");
        var processosparadosExists15 = await processosparadosService.Filter(new Filters.FilterProcessosParados { Operador = id }, uri);
        if (processosparadosExists15 != null && processosparadosExists15.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Processos Parados associados a ele.");
        var processoutputrequestExists16 = await processoutputrequestService.Filter(new Filters.FilterProcessOutputRequest { Operador = id }, uri);
        if (processoutputrequestExists16 != null && processoutputrequestExists16.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Process Output Request associados a ele.");
        var reuniaopessoasExists17 = await reuniaopessoasService.Filter(new Filters.FilterReuniaoPessoas { Operador = id }, uri);
        if (reuniaopessoasExists17 != null && reuniaopessoasExists17.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Reuniao Pessoas associados a ele.");
        var smsaliceExists18 = await smsaliceService.Filter(new Filters.FilterSMSAlice { Operador = id }, uri);
        if (smsaliceExists18 != null && smsaliceExists18.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela S M S Alice associados a ele.");
        var statusbiuExists19 = await statusbiuService.Filter(new Filters.FilterStatusBiu { Operador = id }, uri);
        if (statusbiuExists19 != null && statusbiuExists19.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Status Biu associados a ele.");
        return true;
    }

    private bool ValidSizes(Models.Operador reg)
    {
        if (reg.Nome.Length > 40)
            throw new SGValidationException($"Nome deve ter no máximo 40 caracteres.");
        if (reg.Nick.Length > 50)
            throw new SGValidationException($"Nick deve ter no máximo 50 caracteres.");
        if (reg.Ramal.Length > 20)
            throw new SGValidationException($"Ramal deve ter no máximo 20 caracteres.");
        if (reg.MinhaDescricao.Length > 255)
            throw new SGValidationException($"MinhaDescricao deve ter no máximo 255 caracteres.");
        if (reg.OnlineIP.Length > 50)
            throw new SGValidationException($"OnlineIP deve ter no máximo 50 caracteres.");
        if (reg.StatusMessage.Length > 1024)
            throw new SGValidationException($"StatusMessage deve ter no máximo 1024 caracteres.");
        if (reg.Senha256.Length > 4000)
            throw new SGValidationException($"Senha256 deve ter no máximo 4000 caracteres.");
        if (reg.SuporteSenha256.Length > 4000)
            throw new SGValidationException($"SuporteSenha256 deve ter no máximo 4000 caracteres.");
        if (reg.SuporteNomeSolicitante.Length > 100)
            throw new SGValidationException($"SuporteNomeSolicitante deve ter no máximo 100 caracteres.");
        if (reg.SuporteIpUltimoAcesso.Length > 80)
            throw new SGValidationException($"SuporteIpUltimoAcesso deve ter no máximo 80 caracteres.");
        if (reg.GUID.Length > 50)
            throw new SGValidationException($"GUID deve ter no máximo 50 caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.Operador reg, IOperadorService service, IStatusBiuReader statusbiuReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Nome))
            throw new SGValidationException("Nome é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.EMail.Length > 0 && !reg.EMail.IsValidEmail())
            throw new SGValidationException($"EMail em formato inválido.");
        if (reg.EMailNet.Length > 0 && !reg.EMailNet.IsValidEmail())
            throw new SGValidationException($"EMailNet em formato inválido.");
        // StatusBiu
        if (!reg.StatusId.IsEmptyIDNumber())
        {
            var regStatusBiu = await statusbiuReader.Read(reg.StatusId, oCnn);
            if (regStatusBiu == null || regStatusBiu.Id != reg.StatusId)
            {
                throw new SGValidationException($"Status Biu não encontrado ({regStatusBiu?.Id}).");
            }
        }

        return true;
    }
}