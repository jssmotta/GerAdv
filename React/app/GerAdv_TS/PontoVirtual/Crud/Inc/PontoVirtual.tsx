// 100% auto-generated by Source Genesys WebApi Front & Back Creator
                     // copyright © 2000-2025 Menphis - Sistemas Inteligentes
                     // This file is part of the Source Genesys project                     
                    // Tracking: CrudInc.tsx.txt
'use client';
import React, { useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { PontoVirtualApi } from '../../Apis/ApiPontoVirtual';
import { useIsMobile } from '@/app/context/MobileContext';
import { useSystemContext } from '@/app/context/SystemContext';
import { NotificationService } from '@/app/services/notification.service';
import { NotificationComponent } from '@/app/components/Cruds/NotificationComponent';
import { IPontoVirtualFormProps } from '../../Interfaces/interface.PontoVirtual';
import { PontoVirtualService } from '../../Services/PontoVirtual.service';
import { usePontoVirtualForm, useValidationsPontoVirtual } from '../../Hooks/hookPontoVirtual';
import { PontoVirtualEmpty } from '../../../Models/PontoVirtual';
import { PontoVirtualForm } from '../Forms/PontoVirtual';

const PontoVirtualInc: React.FC<IPontoVirtualFormProps> = ({ id, onClose, onError, onSuccess }) => {
  const { systemContext } = useSystemContext();
  const isMobile = useIsMobile();
  const router = useRouter();
  const pontovirtualService = new PontoVirtualService(
  new PontoVirtualApi(systemContext?.Uri ?? '', systemContext?.Token ?? '')
);
const notificationService = new NotificationService();
const { data, handleChange, loadPontoVirtual } = usePontoVirtualForm(
PontoVirtualEmpty(), 
pontovirtualService
);
useEffect(() => {
  loadPontoVirtual(id);
}, [id]);

const handleSubmit = async (e: React.FormEvent) => {
  e.preventDefault();
  try {
    const savedPontoVirtual = await pontovirtualService.savePontoVirtual(data);
    if (savedPontoVirtual.id) {
      notificationService.showNotification('Registro salvo com sucesso!', 'success');
      const PDelayApiWrite = 333;
      setTimeout(() => {
        if (onSuccess) {
          onSuccess(savedPontoVirtual);
        }
      }, PDelayApiWrite);
    } else {
    if (onError) {
      onError();
    }
    notificationService.showNotification('Error salvando registro.', 'error');
  }
} catch (error) {
if (onError) {
  onError();
}
notificationService.showNotification('Error salvando registro.', 'error');
}
};
const handleReload = () => {
  loadPontoVirtual(id);
};
return (
<>
<NotificationComponent notificationService={notificationService} />
<PontoVirtualForm
pontovirtualData={data}
onChange={handleChange}
onSubmit={handleSubmit}
onClose={onClose}
onError={onError}
onReload={handleReload}
onSuccess={onSuccess}
/>
</>
);
};
export default PontoVirtualInc;