// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class HorasTrabValidationTests : IDisposable
{
    private readonly HorasTrabValidation _validation;
    private readonly Mock<IHorasTrabService> _mockHorasTrabService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IClientesReader> _mockClientesReader;
    private readonly Mock<IAdvogadosReader> _mockAdvogadosReader;
    private readonly Mock<IFuncionariosReader> _mockFuncionariosReader;
    private readonly Mock<IServicosReader> _mockServicosReader;
    private readonly HorasTrabService _service;
    private readonly string _validUri = "test-uri";
    public HorasTrabValidationTests()
    {
        _validation = new HorasTrabValidation();
        _mockHorasTrabService = new Mock<IHorasTrabService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockClientesReader = new Mock<IClientesReader>();
        _mockAdvogadosReader = new Mock<IAdvogadosReader>();
        _mockFuncionariosReader = new Mock<IFuncionariosReader>();
        _mockServicosReader = new Mock<IServicosReader>();
    }

#region Class Structure Tests
    [Fact]
    public void HorasTrabValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IHorasTrabValidation>();
    }

    [Fact]
    public void HorasTrabValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(HorasTrabValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void HorasTrabValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(HorasTrabValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private static Models.HorasTrab CreateValidHorasTrab()
    {
        return new Models.HorasTrab
        {
            Id = 1,
            IDContatoCRM = 0,
            Honorario = false,
            IDAgenda = 0,
            Data = "27/05/2022",
            Cliente = 0,
            Status = 0,
            Processo = 0,
            Advogado = 0,
            Funcionario = 0,
            HrIni = "AAA",
            HrFim = "AAA",
            Tempo = 1m,
            Valor = 1m,
            OBS = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Anexo = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            AnexoComp = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            AnexoUNC = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Servico = 0
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockHorasTrabService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterHorasTrab>(), It.IsAny<string>())).ReturnsAsync([]);
        // Setup other mocks but don't override the HorasTrabs service mock
        _ = _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new ClientesResponse { Id = id }));
        _ = _mockAdvogadosReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new AdvogadosResponse { Id = id }));
        _ = _mockFuncionariosReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new FuncionariosResponse { Id = id }));
        _ = _mockServicosReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new ServicosResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockHorasTrabService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterHorasTrab>(), It.IsAny<string>())).ReturnsAsync([]);
        // Setup other mocks but don't override the HorasTrabs service mock
        _ = _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new ClientesResponse { Id = 0 }));
        _ = _mockAdvogadosReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new AdvogadosResponse { Id = 0 }));
        _ = _mockFuncionariosReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new FuncionariosResponse { Id = 0 }));
        _ = _mockServicosReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new ServicosResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var horastrab = new Models.HorasTrab
        {
            Id = 1,
            Honorario = false,
            Data = "27/05/2022",
            HrIni = null,
            HrFim = null,
            OBS = null,
            Anexo = null,
            AnexoComp = null,
            AnexoUNC = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(horastrab, _mockHorasTrabService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockServicosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockHorasTrabService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockServicosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region Foreign Key Validation Tests - Clientes
    [Fact]
    public async Task ValidateReg_WithInvalidClientes_ShouldThrowSGValidationException()
    {
        // Arrange
        var horastrab = CreateValidHorasTrab();
        horastrab.Cliente = 999;
        _mockClientesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.ClientesResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(horastrab, _mockHorasTrabService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockServicosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedClientesId_ShouldThrowSGValidationException()
    {
        // Arrange
        var horastrab = CreateValidHorasTrab();
        horastrab.Cliente = 999;
        var reg888 = new Models.Response.ClientesResponse
        {
            Id = 888
        }; // Different ID
        _mockClientesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(horastrab, _mockHorasTrabService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockServicosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidClientes_ShouldPass()
    {
        // Arrange
        var horastrab = CreateValidHorasTrab();
        horastrab.Cliente = 123;
        var reg123 = new Models.Response.ClientesResponse
        {
            Id = 123
        };
        _mockClientesReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(horastrab, _mockHorasTrabService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockServicosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyClientes_ShouldPass()
    {
        // Arrange
        var horastrab = CreateValidHorasTrab();
        horastrab.Cliente = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(horastrab, _mockHorasTrabService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockServicosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockClientesReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - Advogados
    [Fact]
    public async Task ValidateReg_WithInvalidAdvogados_ShouldThrowSGValidationException()
    {
        // Arrange
        var horastrab = CreateValidHorasTrab();
        horastrab.Advogado = 999;
        _mockAdvogadosReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.AdvogadosResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(horastrab, _mockHorasTrabService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockServicosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedAdvogadosId_ShouldThrowSGValidationException()
    {
        // Arrange
        var horastrab = CreateValidHorasTrab();
        horastrab.Advogado = 999;
        var reg888 = new Models.Response.AdvogadosResponse
        {
            Id = 888
        }; // Different ID
        _mockAdvogadosReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(horastrab, _mockHorasTrabService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockServicosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidAdvogados_ShouldPass()
    {
        // Arrange
        var horastrab = CreateValidHorasTrab();
        horastrab.Advogado = 123;
        var reg123 = new Models.Response.AdvogadosResponse
        {
            Id = 123
        };
        _mockAdvogadosReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(horastrab, _mockHorasTrabService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockServicosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyAdvogados_ShouldPass()
    {
        // Arrange
        var horastrab = CreateValidHorasTrab();
        horastrab.Advogado = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(horastrab, _mockHorasTrabService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockServicosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockAdvogadosReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - Funcionarios
    [Fact]
    public async Task ValidateReg_WithInvalidFuncionarios_ShouldThrowSGValidationException()
    {
        // Arrange
        var horastrab = CreateValidHorasTrab();
        horastrab.Funcionario = 999;
        _mockFuncionariosReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.FuncionariosResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(horastrab, _mockHorasTrabService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockServicosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedFuncionariosId_ShouldThrowSGValidationException()
    {
        // Arrange
        var horastrab = CreateValidHorasTrab();
        horastrab.Funcionario = 999;
        var reg888 = new Models.Response.FuncionariosResponse
        {
            Id = 888
        }; // Different ID
        _mockFuncionariosReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(horastrab, _mockHorasTrabService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockServicosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidFuncionarios_ShouldPass()
    {
        // Arrange
        var horastrab = CreateValidHorasTrab();
        horastrab.Funcionario = 123;
        var reg123 = new Models.Response.FuncionariosResponse
        {
            Id = 123
        };
        _mockFuncionariosReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(horastrab, _mockHorasTrabService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockServicosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyFuncionarios_ShouldPass()
    {
        // Arrange
        var horastrab = CreateValidHorasTrab();
        horastrab.Funcionario = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(horastrab, _mockHorasTrabService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockServicosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockFuncionariosReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - Servicos
    [Fact]
    public async Task ValidateReg_WithInvalidServicos_ShouldThrowSGValidationException()
    {
        // Arrange
        var horastrab = CreateValidHorasTrab();
        horastrab.Servico = 999;
        _mockServicosReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.ServicosResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(horastrab, _mockHorasTrabService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockServicosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedServicosId_ShouldThrowSGValidationException()
    {
        // Arrange
        var horastrab = CreateValidHorasTrab();
        horastrab.Servico = 999;
        var reg888 = new Models.Response.ServicosResponse
        {
            Id = 888
        }; // Different ID
        _mockServicosReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(horastrab, _mockHorasTrabService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockServicosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidServicos_ShouldPass()
    {
        // Arrange
        var horastrab = CreateValidHorasTrab();
        horastrab.Servico = 123;
        var reg123 = new Models.Response.ServicosResponse
        {
            Id = 123
        };
        _mockServicosReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(horastrab, _mockHorasTrabService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockServicosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyServicos_ShouldPass()
    {
        // Arrange
        var horastrab = CreateValidHorasTrab();
        horastrab.Servico = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(horastrab, _mockHorasTrabService.Object, _mockClientesReader.Object, _mockAdvogadosReader.Object, _mockFuncionariosReader.Object, _mockServicosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockServicosReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}