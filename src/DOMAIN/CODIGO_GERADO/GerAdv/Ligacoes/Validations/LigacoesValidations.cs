// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface ILigacoesValidation
{
    Task<bool> ValidateReg(Models.Ligacoes reg, ILigacoesService service, IClientesReader clientesReader, IRamalReader ramalReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int? id, ILigacoesService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class LigacoesValidation : ILigacoesValidation
{
    public async Task<bool> CanDelete(int? id, ILigacoesService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id == null || id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id ?? default, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.Ligacoes reg)
    {
        if (reg.Assunto != null && reg.Assunto.Length > DBLigacoesDicInfo.LigAssunto.FTamanho)
            throw new SGValidationException($"Assunto deve ter no máximo {DBLigacoesDicInfo.LigAssunto.FTamanho} caracteres.");
        if (reg.Contato != null && reg.Contato.Length > DBLigacoesDicInfo.LigContato.FTamanho)
            throw new SGValidationException($"Contato deve ter no máximo {DBLigacoesDicInfo.LigContato.FTamanho} caracteres.");
        if (reg.Nome != null && reg.Nome.Length > DBLigacoesDicInfo.LigNome.FTamanho)
            throw new SGValidationException($"Nome deve ter no máximo {DBLigacoesDicInfo.LigNome.FTamanho} caracteres.");
        if (reg.Para != null && reg.Para.Length > DBLigacoesDicInfo.LigPara.FTamanho)
            throw new SGValidationException($"Para deve ter no máximo {DBLigacoesDicInfo.LigPara.FTamanho} caracteres.");
        if (reg.LigarPara != null && reg.LigarPara.Length > DBLigacoesDicInfo.LigLigarPara.FTamanho)
            throw new SGValidationException($"LigarPara deve ter no máximo {DBLigacoesDicInfo.LigLigarPara.FTamanho} caracteres.");
        if (reg.GUID != null && reg.GUID.Length > DBLigacoesDicInfo.LigGUID.FTamanho)
            throw new SGValidationException($"GUID deve ter no máximo {DBLigacoesDicInfo.LigGUID.FTamanho} caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.Ligacoes reg, ILigacoesService service, IClientesReader clientesReader, IRamalReader ramalReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Nome))
            throw new SGValidationException("Nome é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (!string.IsNullOrWhiteSpace(reg.DataRealizada))
        {
            if (DateTime.TryParse(reg.DataRealizada, out DateTime dataAntiga))
            {
                if (dataAntiga < new DateTime(1900, 1, 1))
                    throw new SGValidationException("DataRealizada não pode ser anterior a 01/01/1900.");
            }
        }

        if (!string.IsNullOrWhiteSpace(reg.UltimoAviso))
        {
            if (DateTime.TryParse(reg.UltimoAviso, out DateTime dataAntiga))
            {
                if (dataAntiga < new DateTime(1900, 1, 1))
                    throw new SGValidationException("UltimoAviso não pode ser anterior a 01/01/1900.");
            }
        }

        // Clientes
        if (!reg.Cliente.IsEmptyIDNumber())
        {
            var regClientes = await clientesReader.Read(reg.Cliente, oCnn);
            if (regClientes == null || regClientes.Id != reg.Cliente)
            {
                throw new SGValidationException($"Clientes não encontrado ({regClientes?.Id}).");
            }
        }

        // Ramal
        if (!reg.Ramal.IsEmptyIDNumber())
        {
            var regRamal = await ramalReader.Read(reg.Ramal, oCnn);
            if (regRamal == null || regRamal.Id != reg.Ramal)
            {
                throw new SGValidationException($"Ramal não encontrado ({regRamal?.Id}).");
            }
        }

        return true;
    }
}