// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBOperador - Nome da classe (ex: DBClientes)
/// Operador - Nome da tabela (ex: Clientes)
/// oper - Prefixo dos campos (ex: cli)
/// operCodigo - Nome do campo código (ex: cliCodigo)
/// operNome - Nome do campo nome (ex: cliNome)
/// DBOperador.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBOperadorTests : IDisposable
{
    private readonly DBOperador _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBOperadorTests()
    {
        _instance = new DBOperador();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("operCodigo", typeof(int));
        dt.Columns.Add("operQuemCad", typeof(int));
        dt.Columns.Add("operDtCad", typeof(DateTime));
        dt.Columns.Add("operQuemAtu", typeof(int));
        dt.Columns.Add("operDtAtu", typeof(DateTime));
        dt.Columns.Add("operVisto", typeof(bool));
        dt.Columns.Add("operEMail", typeof(string));
        dt.Columns.Add("operPasta", typeof(string));
        dt.Columns.Add("operTelefonista", typeof(string));
        dt.Columns.Add("operMaster", typeof(string));
        dt.Columns.Add("operNome", typeof(string));
        dt.Columns.Add("operNick", typeof(string));
        dt.Columns.Add("operRamal", typeof(string));
        dt.Columns.Add("operCadID", typeof(string));
        dt.Columns.Add("operCadCod", typeof(int));
        dt.Columns.Add("operExcluido", typeof(string));
        dt.Columns.Add("operSituacao", typeof(string));
        dt.Columns.Add("operComputador", typeof(int));
        dt.Columns.Add("operMinhaDescricao", typeof(string));
        dt.Columns.Add("operUltimoLogoff", typeof(DateTime));
        dt.Columns.Add("operEMailNet", typeof(string));
        dt.Columns.Add("operOnlineIP", typeof(string));
        dt.Columns.Add("operOnLine", typeof(string));
        dt.Columns.Add("operSysOp", typeof(string));
        dt.Columns.Add("operStatusId", typeof(int));
        dt.Columns.Add("operStatusMessage", typeof(string));
        dt.Columns.Add("operIsFinanceiro", typeof(string));
        dt.Columns.Add("operGUID", typeof(string));
        dt.Columns.Add("operTop", typeof(string));
        dt.Columns.Add("operSexo", typeof(string));
        dt.Columns.Add("operBasico", typeof(string));
        dt.Columns.Add("operExterno", typeof(string));
        dt.Columns.Add("operSenha256", typeof(string));
        dt.Columns.Add("operEMailConfirmado", typeof(string));
        dt.Columns.Add("operDataLimiteReset", typeof(DateTime));
        dt.Columns.Add("operSuporteSenha256", typeof(string));
        dt.Columns.Add("operSuporteMaxAge", typeof(DateTime));
        dt.Columns.Add("operSuporteNomeSolicitante", typeof(string));
        dt.Columns.Add("operSuporteUltimoAcesso", typeof(DateTime));
        dt.Columns.Add("operSuporteIpUltimoAcesso", typeof(string));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("Operador", DBOperador.PTabelaNome);
        Assert.Equal(" Operador.* ", DBOperador.CamposSqlX);
        Assert.Equal("operCodigo", DBOperador.CampoCodigo);
        Assert.Equal("operNome", DBOperador.CampoNome);
        Assert.Equal("oper", DBOperador.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBOperador();
        Assert.Equal(0, instance.ID);
        Assert.Equal("Operador", instance.ITabelaName());
        Assert.Equal("oper", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBOperador((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBOperador((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["operCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBOperador(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("Operador", cadastro.ITabelaName());
        Assert.Equal("operCodigo", cadastro.ICampoCodigo());
        Assert.Equal("operNome", cadastro.ICampoNome());
        Assert.Equal("oper", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBOperador.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBOperador.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBOperador.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBOperador();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBOperador();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnTrue()
    {
        Assert.True(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Pasta_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FPasta = input;
        Assert.Equal(expected, _instance.FPasta);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Telefonista_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FTelefonista = value;
        Assert.Equal(value, _instance.FTelefonista);
    }

    [Fact]
    public void Telefonista_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBOperador();
        Assert.False(instance.FTelefonista);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Telefonista_ShouldAcceptIntegerValues(int value)
{
    _instance.FTelefonista = value;
    Assert.Equal(value, _instance.FTelefonista);
}

[Fact]
public void Telefonista_DefaultValue_ShouldBeZero()
{
    var instance = new DBOperador();
    Assert.Equal(0, instance.Telefonista);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Telefonista_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FTelefonista = dateString;
    Assert.Equal(dateString, _instance.FTelefonista);
}

[Fact]
public void Telefonista_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBOperador();
    Assert.Equal(string.Empty, instance.Telefonista);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Telefonista_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FTelefonista = input;
        Assert.Equal(expected, _instance.FTelefonista);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FTelefonista = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Telefonista_ValidEmail_ShouldAccept(string email)
{
    _instance.FTelefonista = email;
    Assert.Equal(email, _instance.FTelefonista);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Telefonista_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FTelefonista = email);
}
*/
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Master_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FMaster = value;
        Assert.Equal(value, _instance.FMaster);
    }

    [Fact]
    public void Master_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBOperador();
        Assert.False(instance.FMaster);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Master_ShouldAcceptIntegerValues(int value)
{
    _instance.FMaster = value;
    Assert.Equal(value, _instance.FMaster);
}

[Fact]
public void Master_DefaultValue_ShouldBeZero()
{
    var instance = new DBOperador();
    Assert.Equal(0, instance.Master);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Master_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FMaster = dateString;
    Assert.Equal(dateString, _instance.FMaster);
}

[Fact]
public void Master_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBOperador();
    Assert.Equal(string.Empty, instance.Master);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Master_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FMaster = input;
        Assert.Equal(expected, _instance.FMaster);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FMaster = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Master_ValidEmail_ShouldAccept(string email)
{
    _instance.FMaster = email;
    Assert.Equal(email, _instance.FMaster);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Master_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FMaster = email);
}
*/
    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Nome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNome = input;
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void Nome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 40 + 10);
        _instance.FNome = longString;
        Assert.True(_instance.FNome.Length <= 40);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Nick_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNick = input;
        Assert.Equal(expected, _instance.FNick);
    }

    [Fact]
    public void Nick_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FNick = longString;
        Assert.True(_instance.FNick.Length <= 50);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Ramal_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FRamal = input;
        Assert.Equal(expected, _instance.FRamal);
    }

    [Fact]
    public void Ramal_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 20 + 10);
        _instance.FRamal = longString;
        Assert.True(_instance.FRamal.Length <= 20);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Excluido_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FExcluido = value;
        Assert.Equal(value, _instance.FExcluido);
    }

    [Fact]
    public void Excluido_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBOperador();
        Assert.False(instance.FExcluido);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Excluido_ShouldAcceptIntegerValues(int value)
{
    _instance.FExcluido = value;
    Assert.Equal(value, _instance.FExcluido);
}

[Fact]
public void Excluido_DefaultValue_ShouldBeZero()
{
    var instance = new DBOperador();
    Assert.Equal(0, instance.Excluido);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Excluido_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FExcluido = dateString;
    Assert.Equal(dateString, _instance.FExcluido);
}

[Fact]
public void Excluido_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBOperador();
    Assert.Equal(string.Empty, instance.Excluido);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Excluido_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FExcluido = input;
        Assert.Equal(expected, _instance.FExcluido);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FExcluido = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Excluido_ValidEmail_ShouldAccept(string email)
{
    _instance.FExcluido = email;
    Assert.Equal(email, _instance.FExcluido);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Excluido_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FExcluido = email);
}
*/
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Situacao_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FSituacao = value;
        Assert.Equal(value, _instance.FSituacao);
    }

    [Fact]
    public void Situacao_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBOperador();
        Assert.False(instance.FSituacao);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Situacao_ShouldAcceptIntegerValues(int value)
{
    _instance.FSituacao = value;
    Assert.Equal(value, _instance.FSituacao);
}

[Fact]
public void Situacao_DefaultValue_ShouldBeZero()
{
    var instance = new DBOperador();
    Assert.Equal(0, instance.Situacao);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Situacao_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FSituacao = dateString;
    Assert.Equal(dateString, _instance.FSituacao);
}

[Fact]
public void Situacao_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBOperador();
    Assert.Equal(string.Empty, instance.Situacao);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Situacao_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FSituacao = input;
        Assert.Equal(expected, _instance.FSituacao);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FSituacao = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Situacao_ValidEmail_ShouldAccept(string email)
{
    _instance.FSituacao = email;
    Assert.Equal(email, _instance.FSituacao);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Situacao_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FSituacao = email);
}
*/
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Computador_ShouldAcceptIntegerValues(int value)
    {
        _instance.FComputador = value;
        Assert.Equal(value, _instance.FComputador);
    }

    [Fact]
    public void Computador_DefaultValue_ShouldBeZero()
    {
        var instance = new DBOperador();
        Assert.Equal(0, instance.FComputador);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void MinhaDescricao_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FMinhaDescricao = input;
        Assert.Equal(expected, _instance.FMinhaDescricao);
    }

    [Fact]
    public void MinhaDescricao_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 255 + 10);
        _instance.FMinhaDescricao = longString;
        Assert.True(_instance.FMinhaDescricao.Length <= 255);
    }

    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void UltimoLogoff_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FUltimoLogoff = dateString;
        Assert.Equal(dateString, _instance.FUltimoLogoff);
    }

    [Fact]
    public void UltimoLogoff_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBOperador();
        Assert.Equal(string.Empty, instance.FUltimoLogoff);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void EMailNet_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FEMailNet = input;
        Assert.Equal(expected, _instance.FEMailNet);
    }

    [Fact]
    public void EMailNet_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FEMailNet = longString;
        Assert.True(_instance.FEMailNet.Length <= 100);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void OnlineIP_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FOnlineIP = input;
        Assert.Equal(expected, _instance.FOnlineIP);
    }

    [Fact]
    public void OnlineIP_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FOnlineIP = longString;
        Assert.True(_instance.FOnlineIP.Length <= 50);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void OnLine_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FOnLine = value;
        Assert.Equal(value, _instance.FOnLine);
    }

    [Fact]
    public void OnLine_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBOperador();
        Assert.False(instance.FOnLine);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void OnLine_ShouldAcceptIntegerValues(int value)
{
    _instance.FOnLine = value;
    Assert.Equal(value, _instance.FOnLine);
}

[Fact]
public void OnLine_DefaultValue_ShouldBeZero()
{
    var instance = new DBOperador();
    Assert.Equal(0, instance.OnLine);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void OnLine_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FOnLine = dateString;
    Assert.Equal(dateString, _instance.FOnLine);
}

[Fact]
public void OnLine_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBOperador();
    Assert.Equal(string.Empty, instance.OnLine);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void OnLine_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FOnLine = input;
        Assert.Equal(expected, _instance.FOnLine);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FOnLine = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void OnLine_ValidEmail_ShouldAccept(string email)
{
    _instance.FOnLine = email;
    Assert.Equal(email, _instance.FOnLine);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void OnLine_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FOnLine = email);
}
*/
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void SysOp_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FSysOp = value;
        Assert.Equal(value, _instance.FSysOp);
    }

    [Fact]
    public void SysOp_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBOperador();
        Assert.False(instance.FSysOp);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void SysOp_ShouldAcceptIntegerValues(int value)
{
    _instance.FSysOp = value;
    Assert.Equal(value, _instance.FSysOp);
}

[Fact]
public void SysOp_DefaultValue_ShouldBeZero()
{
    var instance = new DBOperador();
    Assert.Equal(0, instance.SysOp);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void SysOp_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FSysOp = dateString;
    Assert.Equal(dateString, _instance.FSysOp);
}

[Fact]
public void SysOp_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBOperador();
    Assert.Equal(string.Empty, instance.SysOp);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void SysOp_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FSysOp = input;
        Assert.Equal(expected, _instance.FSysOp);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FSysOp = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void SysOp_ValidEmail_ShouldAccept(string email)
{
    _instance.FSysOp = email;
    Assert.Equal(email, _instance.FSysOp);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void SysOp_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FSysOp = email);
}
*/
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void StatusId_ShouldAcceptIntegerValues(int value)
    {
        _instance.FStatusId = value;
        Assert.Equal(value, _instance.FStatusId);
    }

    [Fact]
    public void StatusId_DefaultValue_ShouldBeZero()
    {
        var instance = new DBOperador();
        Assert.Equal(0, instance.FStatusId);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void StatusMessage_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FStatusMessage = input;
        Assert.Equal(expected, _instance.FStatusMessage);
    }

    [Fact]
    public void StatusMessage_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 1024 + 10);
        _instance.FStatusMessage = longString;
        Assert.True(_instance.FStatusMessage.Length <= 1024);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void IsFinanceiro_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FIsFinanceiro = value;
        Assert.Equal(value, _instance.FIsFinanceiro);
    }

    [Fact]
    public void IsFinanceiro_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBOperador();
        Assert.False(instance.FIsFinanceiro);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void IsFinanceiro_ShouldAcceptIntegerValues(int value)
{
    _instance.FIsFinanceiro = value;
    Assert.Equal(value, _instance.FIsFinanceiro);
}

[Fact]
public void IsFinanceiro_DefaultValue_ShouldBeZero()
{
    var instance = new DBOperador();
    Assert.Equal(0, instance.IsFinanceiro);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void IsFinanceiro_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FIsFinanceiro = dateString;
    Assert.Equal(dateString, _instance.FIsFinanceiro);
}

[Fact]
public void IsFinanceiro_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBOperador();
    Assert.Equal(string.Empty, instance.IsFinanceiro);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void IsFinanceiro_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FIsFinanceiro = input;
        Assert.Equal(expected, _instance.FIsFinanceiro);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FIsFinanceiro = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void IsFinanceiro_ValidEmail_ShouldAccept(string email)
{
    _instance.FIsFinanceiro = email;
    Assert.Equal(email, _instance.FIsFinanceiro);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void IsFinanceiro_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FIsFinanceiro = email);
}
*/
    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void GUID_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FGUID = input;
        Assert.Equal(expected, _instance.FGUID);
    }

    [Fact]
    public void GUID_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FGUID = longString;
        Assert.True(_instance.FGUID.Length <= 50);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Top_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FTop = value;
        Assert.Equal(value, _instance.FTop);
    }

    [Fact]
    public void Top_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBOperador();
        Assert.False(instance.FTop);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Top_ShouldAcceptIntegerValues(int value)
{
    _instance.FTop = value;
    Assert.Equal(value, _instance.FTop);
}

[Fact]
public void Top_DefaultValue_ShouldBeZero()
{
    var instance = new DBOperador();
    Assert.Equal(0, instance.Top);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Top_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FTop = dateString;
    Assert.Equal(dateString, _instance.FTop);
}

[Fact]
public void Top_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBOperador();
    Assert.Equal(string.Empty, instance.Top);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Top_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FTop = input;
        Assert.Equal(expected, _instance.FTop);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FTop = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Top_ValidEmail_ShouldAccept(string email)
{
    _instance.FTop = email;
    Assert.Equal(email, _instance.FTop);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Top_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FTop = email);
}
*/
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Sexo_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FSexo = value;
        Assert.Equal(value, _instance.FSexo);
    }

    [Fact]
    public void Sexo_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBOperador();
        Assert.False(instance.FSexo);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Sexo_ShouldAcceptIntegerValues(int value)
{
    _instance.FSexo = value;
    Assert.Equal(value, _instance.FSexo);
}

[Fact]
public void Sexo_DefaultValue_ShouldBeZero()
{
    var instance = new DBOperador();
    Assert.Equal(0, instance.Sexo);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Sexo_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FSexo = dateString;
    Assert.Equal(dateString, _instance.FSexo);
}

[Fact]
public void Sexo_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBOperador();
    Assert.Equal(string.Empty, instance.Sexo);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Sexo_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FSexo = input;
        Assert.Equal(expected, _instance.FSexo);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FSexo = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Sexo_ValidEmail_ShouldAccept(string email)
{
    _instance.FSexo = email;
    Assert.Equal(email, _instance.FSexo);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Sexo_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FSexo = email);
}
*/
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Basico_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FBasico = value;
        Assert.Equal(value, _instance.FBasico);
    }

    [Fact]
    public void Basico_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBOperador();
        Assert.False(instance.FBasico);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Basico_ShouldAcceptIntegerValues(int value)
{
    _instance.FBasico = value;
    Assert.Equal(value, _instance.FBasico);
}

[Fact]
public void Basico_DefaultValue_ShouldBeZero()
{
    var instance = new DBOperador();
    Assert.Equal(0, instance.Basico);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Basico_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FBasico = dateString;
    Assert.Equal(dateString, _instance.FBasico);
}

[Fact]
public void Basico_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBOperador();
    Assert.Equal(string.Empty, instance.Basico);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Basico_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FBasico = input;
        Assert.Equal(expected, _instance.FBasico);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FBasico = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Basico_ValidEmail_ShouldAccept(string email)
{
    _instance.FBasico = email;
    Assert.Equal(email, _instance.FBasico);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Basico_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FBasico = email);
}
*/
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Externo_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FExterno = value;
        Assert.Equal(value, _instance.FExterno);
    }

    [Fact]
    public void Externo_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBOperador();
        Assert.False(instance.FExterno);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Externo_ShouldAcceptIntegerValues(int value)
{
    _instance.FExterno = value;
    Assert.Equal(value, _instance.FExterno);
}

[Fact]
public void Externo_DefaultValue_ShouldBeZero()
{
    var instance = new DBOperador();
    Assert.Equal(0, instance.Externo);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Externo_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FExterno = dateString;
    Assert.Equal(dateString, _instance.FExterno);
}

[Fact]
public void Externo_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBOperador();
    Assert.Equal(string.Empty, instance.Externo);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Externo_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FExterno = input;
        Assert.Equal(expected, _instance.FExterno);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FExterno = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Externo_ValidEmail_ShouldAccept(string email)
{
    _instance.FExterno = email;
    Assert.Equal(email, _instance.FExterno);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Externo_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FExterno = email);
}
*/
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void EMailConfirmado_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FEMailConfirmado = value;
        Assert.Equal(value, _instance.FEMailConfirmado);
    }

    [Fact]
    public void EMailConfirmado_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBOperador();
        Assert.False(instance.FEMailConfirmado);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void EMailConfirmado_ShouldAcceptIntegerValues(int value)
{
    _instance.FEMailConfirmado = value;
    Assert.Equal(value, _instance.FEMailConfirmado);
}

[Fact]
public void EMailConfirmado_DefaultValue_ShouldBeZero()
{
    var instance = new DBOperador();
    Assert.Equal(0, instance.EMailConfirmado);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void EMailConfirmado_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FEMailConfirmado = dateString;
    Assert.Equal(dateString, _instance.FEMailConfirmado);
}

[Fact]
public void EMailConfirmado_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBOperador();
    Assert.Equal(string.Empty, instance.EMailConfirmado);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void EMailConfirmado_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FEMailConfirmado = input;
        Assert.Equal(expected, _instance.FEMailConfirmado);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FEMailConfirmado = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void EMailConfirmado_ValidEmail_ShouldAccept(string email)
{
    _instance.FEMailConfirmado = email;
    Assert.Equal(email, _instance.FEMailConfirmado);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void EMailConfirmado_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FEMailConfirmado = email);
}
*/
    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void DataLimiteReset_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FDataLimiteReset = dateString;
        Assert.Equal(dateString, _instance.FDataLimiteReset);
    }

    [Fact]
    public void DataLimiteReset_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBOperador();
        Assert.Equal(string.Empty, instance.FDataLimiteReset);
    }

    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void SuporteMaxAge_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FSuporteMaxAge = dateString;
        Assert.Equal(dateString, _instance.FSuporteMaxAge);
    }

    [Fact]
    public void SuporteMaxAge_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBOperador();
        Assert.Equal(string.Empty, instance.FSuporteMaxAge);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void SuporteNomeSolicitante_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FSuporteNomeSolicitante = input;
        Assert.Equal(expected, _instance.FSuporteNomeSolicitante);
    }

    [Fact]
    public void SuporteNomeSolicitante_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FSuporteNomeSolicitante = longString;
        Assert.True(_instance.FSuporteNomeSolicitante.Length <= 100);
    }

    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void SuporteUltimoAcesso_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FSuporteUltimoAcesso = dateString;
        Assert.Equal(dateString, _instance.FSuporteUltimoAcesso);
    }

    [Fact]
    public void SuporteUltimoAcesso_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBOperador();
        Assert.Equal(string.Empty, instance.FSuporteUltimoAcesso);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void SuporteIpUltimoAcesso_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FSuporteIpUltimoAcesso = input;
        Assert.Equal(expected, _instance.FSuporteIpUltimoAcesso);
    }

    [Fact]
    public void SuporteIpUltimoAcesso_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FSuporteIpUltimoAcesso = longString;
        Assert.True(_instance.FSuporteIpUltimoAcesso.Length <= 80);
    }

    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}