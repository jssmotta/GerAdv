// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBEnquadramentoEmpresa - Nome da classe (ex: DBClientes)
/// EnquadramentoEmpresa - Nome da tabela (ex: Clientes)
/// eqe - Prefixo dos campos (ex: cli)
/// eqeCodigo - Nome do campo código (ex: cliCodigo)
/// eqeNome - Nome do campo nome (ex: cliNome)
/// DBEnquadramentoEmpresa.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBEnquadramentoEmpresaTests : IDisposable
{
    private readonly DBEnquadramentoEmpresa _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBEnquadramentoEmpresaTests()
    {
        _instance = new DBEnquadramentoEmpresa();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("eqeCodigo", typeof(int));
        dt.Columns.Add("eqeQuemCad", typeof(int));
        dt.Columns.Add("eqeDtCad", typeof(DateTime));
        dt.Columns.Add("eqeQuemAtu", typeof(int));
        dt.Columns.Add("eqeDtAtu", typeof(DateTime));
        dt.Columns.Add("eqeVisto", typeof(bool));
        dt.Columns.Add("eqeNome", typeof(string));
        dt.Columns.Add("eqeGUID", typeof(string));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("EnquadramentoEmpresa", DBEnquadramentoEmpresa.PTabelaNome);
        Assert.Equal(" EnquadramentoEmpresa.* ", DBEnquadramentoEmpresa.CamposSqlX);
        Assert.Equal("eqeCodigo", DBEnquadramentoEmpresa.CampoCodigo);
        Assert.Equal("eqeNome", DBEnquadramentoEmpresa.CampoNome);
        Assert.Equal("eqe", DBEnquadramentoEmpresa.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBEnquadramentoEmpresa();
        Assert.Equal(0, instance.ID);
        Assert.Equal("EnquadramentoEmpresa", instance.ITabelaName());
        Assert.Equal("eqe", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBEnquadramentoEmpresa((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBEnquadramentoEmpresa((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["eqeCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBEnquadramentoEmpresa(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("EnquadramentoEmpresa", cadastro.ITabelaName());
        Assert.Equal("eqeCodigo", cadastro.ICampoCodigo());
        Assert.Equal("eqeNome", cadastro.ICampoNome());
        Assert.Equal("eqe", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBEnquadramentoEmpresa.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBEnquadramentoEmpresa.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBEnquadramentoEmpresa.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBEnquadramentoEmpresa();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBEnquadramentoEmpresa();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnTrue()
    {
        Assert.True(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Nome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNome = input;
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void Nome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FNome = longString;
        Assert.True(_instance.FNome.Length <= 50);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void GUID_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FGUID = input;
        Assert.Equal(expected, _instance.FGUID);
    }

    [Fact]
    public void GUID_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FGUID = longString;
        Assert.True(_instance.FGUID.Length <= 100);
    }

    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}