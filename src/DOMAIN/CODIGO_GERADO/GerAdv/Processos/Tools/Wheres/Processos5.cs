// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Wheres;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IProcessosWhere
{
    ProcessosResponse Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn);
}

public partial class ProcessosWhere(IFProcessosFactory processosFactory) : IProcessosWhere
{
    private readonly IFProcessosFactory _processosFactory = processosFactory;
    public ProcessosResponse Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn)
    {
        using var dbRec = _processosFactory.CreateFromParameters(parameters, oCnn, sqlWhere: where);
        var processos = new ProcessosResponse
        {
            Id = dbRec.ID,
            AdvParc = dbRec.FAdvParc,
            AJGPedidoNegado = dbRec.FAJGPedidoNegado,
            AJGCliente = dbRec.FAJGCliente,
            AJGPedidoNegadoOPO = dbRec.FAJGPedidoNegadoOPO,
            NotificarPOE = dbRec.FNotificarPOE,
            ValorProvisionado = dbRec.FValorProvisionado,
            AJGOponente = dbRec.FAJGOponente,
            ValorCacheCalculo = dbRec.FValorCacheCalculo,
            AJGPedidoOPO = dbRec.FAJGPedidoOPO,
            ValorCacheCalculoProv = dbRec.FValorCacheCalculoProv,
            ConsiderarParado = dbRec.FConsiderarParado,
            ValorCalculado = dbRec.FValorCalculado,
            AJGConcedidoOPO = dbRec.FAJGConcedidoOPO,
            Cobranca = dbRec.FCobranca,
            Penhora = dbRec.FPenhora,
            AJGPedido = dbRec.FAJGPedido,
            TipoBaixa = dbRec.FTipoBaixa,
            ClassRisco = dbRec.FClassRisco,
            IsApenso = dbRec.FIsApenso,
            ValorCausaInicial = dbRec.FValorCausaInicial,
            AJGConcedido = dbRec.FAJGConcedido,
            ObsBCX = dbRec.FObsBCX ?? string.Empty,
            ValorCausaDefinitivo = dbRec.FValorCausaDefinitivo,
            PercProbExito = dbRec.FPercProbExito,
            MNA = dbRec.FMNA,
            PercExito = dbRec.FPercExito,
            NroExtra = dbRec.FNroExtra ?? string.Empty,
            AdvOpo = dbRec.FAdvOpo,
            Extra = dbRec.FExtra,
            Justica = dbRec.FJustica,
            Advogado = dbRec.FAdvogado,
            NroCaixa = dbRec.FNroCaixa ?? string.Empty,
            Preposto = dbRec.FPreposto,
            Cliente = dbRec.FCliente,
            Oponente = dbRec.FOponente,
            Area = dbRec.FArea,
            Cidade = dbRec.FCidade,
            Situacao = dbRec.FSituacao,
            IDSituacao = dbRec.FIDSituacao,
            Valor = dbRec.FValor,
            Rito = dbRec.FRito,
            Fato = dbRec.FFato ?? string.Empty,
            NroPasta = dbRec.FNroPasta ?? string.Empty,
            Atividade = dbRec.FAtividade,
            CaixaMorto = dbRec.FCaixaMorto ?? string.Empty,
            Baixado = dbRec.FBaixado,
            MotivoBaixa = dbRec.FMotivoBaixa ?? string.Empty,
            OBS = dbRec.FOBS ?? string.Empty,
            Printed = dbRec.FPrinted,
            ZKey = dbRec.FZKey ?? string.Empty,
            ZKeyQuem = dbRec.FZKeyQuem,
            Resumo = dbRec.FResumo ?? string.Empty,
            NaoImprimir = dbRec.FNaoImprimir,
            Eletronico = dbRec.FEletronico,
            NroContrato = dbRec.FNroContrato ?? string.Empty,
            PercProbExitoJustificativa = dbRec.FPercProbExitoJustificativa ?? string.Empty,
            HonorarioValor = dbRec.FHonorarioValor,
            HonorarioPercentual = dbRec.FHonorarioPercentual,
            HonorarioSucumbencia = dbRec.FHonorarioSucumbencia,
            FaseAuditoria = dbRec.FFaseAuditoria,
            ValorCondenacao = dbRec.FValorCondenacao,
            ValorCondenacaoCalculado = dbRec.FValorCondenacaoCalculado,
            ValorCondenacaoProvisorio = dbRec.FValorCondenacaoProvisorio,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataEntrada, out DateTime XDataEntrada))
        {
            processos.DataEntrada = dbRec.FDataEntrada;
            processos.DataEntrada_date = XDataEntrada;
        }

        if (DateTime.TryParse(dbRec.FDtBaixa, out DateTime XDtBaixa))
        {
            processos.DtBaixa = dbRec.FDtBaixa;
            processos.DtBaixa_date = XDtBaixa;
        }

        if (DateTime.TryParse(dbRec.FZKeyQuando, out DateTime XZKeyQuando))
        {
            processos.ZKeyQuando = dbRec.FZKeyQuando;
            processos.ZKeyQuando_date = XZKeyQuando;
        }

        return processos;
    }
}