// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class RamalWriterTests
{
    private readonly Mock<IFRamalFactory> _mockRamalFactory;
    private readonly Mock<FRamal> _mockFRamal;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly RamalWriter _ramalWriter;
    public RamalWriterTests()
    {
        _mockRamalFactory = new Mock<IFRamalFactory>();
        _mockFRamal = new Mock<FRamal>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _ramalWriter = new RamalWriter(_mockRamalFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var ramal = CreateValidRamalModel();
        ramal.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockRamalFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFRamal.Object);
        _mockFRamal.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _ramalWriter.WriteAsync(ramal, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFRamal.Object);
        _mockRamalFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockRamalFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFRamal.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var ramal = CreateValidRamalModel();
        ramal.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockRamalFactory.Setup(x => x.CreateFromIdAsync(ramal.Id, _mockConnection.Object)).ReturnsAsync(_mockFRamal.Object);
        _mockFRamal.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _ramalWriter.WriteAsync(ramal, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFRamal.Object);
        _mockRamalFactory.Verify(x => x.CreateFromIdAsync(ramal.Id, _mockConnection.Object), Times.Once);
        _mockRamalFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFRamal.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var ramal = CreateValidRamalModel();
        var auditorQuem = 99;
        _mockRamalFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFRamal.Object);
        _mockFRamal.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _ramalWriter.WriteAsync(ramal, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFRamal.Object);
        _mockFRamal.VerifySet(x => x.FNome = ramal.Nome, Times.Once);
        _mockFRamal.VerifySet(x => x.FObs = ramal.Obs, Times.Once);
        _mockFRamal.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var ramal = CreateValidRamalModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockRamalFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _ramalWriter.WriteAsync(ramal, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var ramal = CreateValidRamalModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockRamalFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFRamal.Object);
        _mockFRamal.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _ramalWriter.WriteAsync(ramal, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var ramalResponse = new RamalResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockRamalFactory.Setup(x => x.DeleteAsync(operadorId, ramalResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _ramalWriter.Delete(ramalResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockRamalFactory.Verify(x => x.DeleteAsync(operadorId, ramalResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var ramalResponse = new RamalResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockRamalFactory.Setup(x => x.DeleteAsync(operadorId, ramalResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _ramalWriter.Delete(ramalResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var ramalResponse = new RamalResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockRamalFactory.Setup(x => x.DeleteAsync(operadorId, ramalResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _ramalWriter.Delete(ramalResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new RamalWriter(_mockRamalFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new RamalWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.Ramal CreateValidRamalModel()
    {
        return new Models.Ramal
        {
            Id = 0,
            Nome = "João",
            Obs = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM"
        };
    }
#endregion
}