#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Writers;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public static class AddServices
{
    public static void Add(WebApplicationBuilder builder)
    {
        builder.Services.AddSingleton<IAcaoWriter, Acao>();
        builder.Services.AddSingleton<IAdvogadosWriter, Advogados>();
        builder.Services.AddSingleton<IAgendaWriter, Agenda>();
        builder.Services.AddSingleton<IAgenda2AgendaWriter, Agenda2Agenda>();
        builder.Services.AddSingleton<IAgendaFinanceiroWriter, AgendaFinanceiro>();
        builder.Services.AddSingleton<IAgendaQuemWriter, AgendaQuem>();
        builder.Services.AddSingleton<IAgendaRecordsWriter, AgendaRecords>();
        builder.Services.AddSingleton<IAgendaRepetirWriter, AgendaRepetir>();
        builder.Services.AddSingleton<IAgendaRepetirDiasWriter, AgendaRepetirDias>();
        builder.Services.AddSingleton<IAgendaStatusWriter, AgendaStatus>();
        builder.Services.AddSingleton<IAlarmSMSWriter, AlarmSMS>();
        builder.Services.AddSingleton<IAlertasWriter, Alertas>();
        builder.Services.AddSingleton<IAlertasEnviadosWriter, AlertasEnviados>();
        builder.Services.AddSingleton<IAndamentosMDWriter, AndamentosMD>();
        builder.Services.AddSingleton<IAndCompWriter, AndComp>();
        builder.Services.AddSingleton<IAnexamentoRegistrosWriter, AnexamentoRegistros>();
        builder.Services.AddSingleton<IApensoWriter, Apenso>();
        builder.Services.AddSingleton<IApenso2Writer, Apenso2>();
        builder.Services.AddSingleton<IAreaWriter, Area>();
        builder.Services.AddSingleton<IAreasJusticaWriter, AreasJustica>();
        builder.Services.AddSingleton<IAtividadesWriter, Atividades>();
        builder.Services.AddSingleton<IAuditor4KWriter, Auditor4K>();
        builder.Services.AddSingleton<IBensClassificacaoWriter, BensClassificacao>();
        builder.Services.AddSingleton<IBensMateriaisWriter, BensMateriais>();
        builder.Services.AddSingleton<ICargosWriter, Cargos>();
        builder.Services.AddSingleton<ICargosEscWriter, CargosEsc>();
        builder.Services.AddSingleton<ICargosEscClassWriter, CargosEscClass>();
        builder.Services.AddSingleton<ICidadeWriter, Cidade>();
        builder.Services.AddSingleton<IClientesWriter, Clientes>();
        builder.Services.AddSingleton<IClientesSociosWriter, ClientesSocios>();
        builder.Services.AddSingleton<IColaboradoresWriter, Colaboradores>();
        builder.Services.AddSingleton<IContaCorrenteWriter, ContaCorrente>();
        builder.Services.AddSingleton<IContatoCRMWriter, ContatoCRM>();
        builder.Services.AddSingleton<IContatoCRMOperadorWriter, ContatoCRMOperador>();
        builder.Services.AddSingleton<IContatoCRMViewWriter, ContatoCRMView>();
        builder.Services.AddSingleton<IContratosWriter, Contratos>();
        builder.Services.AddSingleton<IDadosProcuracaoWriter, DadosProcuracao>();
        builder.Services.AddSingleton<IDiario2Writer, Diario2>();
        builder.Services.AddSingleton<IDivisaoTribunalWriter, DivisaoTribunal>();
        builder.Services.AddSingleton<IDocsRecebidosItensWriter, DocsRecebidosItens>();
        builder.Services.AddSingleton<IDocumentosWriter, Documentos>();
        builder.Services.AddSingleton<IEMPClassRiscosWriter, EMPClassRiscos>();
        builder.Services.AddSingleton<IEnderecosWriter, Enderecos>();
        builder.Services.AddSingleton<IEnderecoSistemaWriter, EnderecoSistema>();
        builder.Services.AddSingleton<IEndTitWriter, EndTit>();
        builder.Services.AddSingleton<IEnquadramentoEmpresaWriter, EnquadramentoEmpresa>();
        builder.Services.AddSingleton<IEscritoriosWriter, Escritorios>();
        builder.Services.AddSingleton<IEventoPrazoAgendaWriter, EventoPrazoAgenda>();
        builder.Services.AddSingleton<IFaseWriter, Fase>();
        builder.Services.AddSingleton<IFornecedoresWriter, Fornecedores>();
        builder.Services.AddSingleton<IForoWriter, Foro>();
        builder.Services.AddSingleton<IFuncaoWriter, Funcao>();
        builder.Services.AddSingleton<IFuncionariosWriter, Funcionarios>();
        builder.Services.AddSingleton<IGraphWriter, Graph>();
        builder.Services.AddSingleton<IGruposEmpresasWriter, GruposEmpresas>();
        builder.Services.AddSingleton<IGruposEmpresasCliWriter, GruposEmpresasCli>();
        builder.Services.AddSingleton<IGUTAtividadesWriter, GUTAtividades>();
        builder.Services.AddSingleton<IGUTAtividadesMatrizWriter, GUTAtividadesMatriz>();
        builder.Services.AddSingleton<IGUTMatrizWriter, GUTMatriz>();
        builder.Services.AddSingleton<IGUTPeriodicidadeWriter, GUTPeriodicidade>();
        builder.Services.AddSingleton<IGUTPeriodicidadeStatusWriter, GUTPeriodicidadeStatus>();
        builder.Services.AddSingleton<IGUTTipoWriter, GUTTipo>();
        builder.Services.AddSingleton<IHistoricoWriter, Historico>();
        builder.Services.AddSingleton<IHonorariosDadosContratoWriter, HonorariosDadosContrato>();
        builder.Services.AddSingleton<IHorasTrabWriter, HorasTrab>();
        builder.Services.AddSingleton<IInstanciaWriter, Instancia>();
        builder.Services.AddSingleton<IJusticaWriter, Justica>();
        builder.Services.AddSingleton<ILigacoesWriter, Ligacoes>();
        builder.Services.AddSingleton<ILivroCaixaWriter, LivroCaixa>();
        builder.Services.AddSingleton<ILivroCaixaClientesWriter, LivroCaixaClientes>();
        builder.Services.AddSingleton<IModelosDocumentosWriter, ModelosDocumentos>();
        builder.Services.AddSingleton<INECompromissosWriter, NECompromissos>();
        builder.Services.AddSingleton<INENotasWriter, NENotas>();
        builder.Services.AddSingleton<INEPalavrasChavesWriter, NEPalavrasChaves>();
        builder.Services.AddSingleton<IObjetosWriter, Objetos>();
        builder.Services.AddSingleton<IOperadorWriter, Operador>();
        builder.Services.AddSingleton<IOperadorEMailPopupWriter, OperadorEMailPopup>();
        builder.Services.AddSingleton<IOperadoresWriter, Operadores>();
        builder.Services.AddSingleton<IOperadorGrupoWriter, OperadorGrupo>();
        builder.Services.AddSingleton<IOperadorGruposWriter, OperadorGrupos>();
        builder.Services.AddSingleton<IOperadorGruposAgendaWriter, OperadorGruposAgenda>();
        builder.Services.AddSingleton<IOperadorGruposAgendaOperadoresWriter, OperadorGruposAgendaOperadores>();
        builder.Services.AddSingleton<IOponentesWriter, Oponentes>();
        builder.Services.AddSingleton<IOponentesRepLegalWriter, OponentesRepLegal>();
        builder.Services.AddSingleton<IOutrasPartesClienteWriter, OutrasPartesCliente>();
        builder.Services.AddSingleton<IPaisesWriter, Paises>();
        builder.Services.AddSingleton<IParceriaProcWriter, ParceriaProc>();
        builder.Services.AddSingleton<IParteClienteOutrasWriter, ParteClienteOutras>();
        builder.Services.AddSingleton<IPenhoraWriter, Penhora>();
        builder.Services.AddSingleton<IPenhoraStatusWriter, PenhoraStatus>();
        builder.Services.AddSingleton<IPoderJudiciarioAssociadoWriter, PoderJudiciarioAssociado>();
        builder.Services.AddSingleton<IPontoVirtualWriter, PontoVirtual>();
        builder.Services.AddSingleton<IPontoVirtualAcessosWriter, PontoVirtualAcessos>();
        builder.Services.AddSingleton<IPosicaoOutrasPartesWriter, PosicaoOutrasPartes>();
        builder.Services.AddSingleton<IPrecatoriaWriter, Precatoria>();
        builder.Services.AddSingleton<IPreClientesWriter, PreClientes>();
        builder.Services.AddSingleton<IPrepostosWriter, Prepostos>();
        builder.Services.AddSingleton<IProCDAWriter, ProCDA>();
        builder.Services.AddSingleton<IProcessosWriter, Processos>();
        builder.Services.AddSingleton<IProcessosObsReportWriter, ProcessosObsReport>();
        builder.Services.AddSingleton<IProcessosParadosWriter, ProcessosParados>();
        builder.Services.AddSingleton<IProcessOutputEngineWriter, ProcessOutputEngine>();
        builder.Services.AddSingleton<IProcessOutPutIDsWriter, ProcessOutPutIDs>();
        builder.Services.AddSingleton<IProcessOutputRequestWriter, ProcessOutputRequest>();
        builder.Services.AddSingleton<IProcessOutputSourcesWriter, ProcessOutputSources>();
        builder.Services.AddSingleton<IProDepositosWriter, ProDepositos>();
        builder.Services.AddSingleton<IProDespesasWriter, ProDespesas>();
        builder.Services.AddSingleton<IProObservacoesWriter, ProObservacoes>();
        builder.Services.AddSingleton<IProPartesWriter, ProPartes>();
        builder.Services.AddSingleton<IProProcuradoresWriter, ProProcuradores>();
        builder.Services.AddSingleton<IProResumosWriter, ProResumos>();
        builder.Services.AddSingleton<IProSucumbenciaWriter, ProSucumbencia>();
        builder.Services.AddSingleton<IProTipoBaixaWriter, ProTipoBaixa>();
        builder.Services.AddSingleton<IProValoresWriter, ProValores>();
        builder.Services.AddSingleton<IRamalWriter, Ramal>();
        builder.Services.AddSingleton<IRecadosWriter, Recados>();
        builder.Services.AddSingleton<IRegimeTributacaoWriter, RegimeTributacao>();
        builder.Services.AddSingleton<IReuniaoWriter, Reuniao>();
        builder.Services.AddSingleton<IReuniaoPessoasWriter, ReuniaoPessoas>();
        builder.Services.AddSingleton<IRitoWriter, Rito>();
        builder.Services.AddSingleton<IServicosWriter, Servicos>();
        builder.Services.AddSingleton<ISetorWriter, Setor>();
        builder.Services.AddSingleton<ISituacaoWriter, Situacao>();
        builder.Services.AddSingleton<ISMSAliceWriter, SMSAlice>();
        builder.Services.AddSingleton<IStatusAndamentoWriter, StatusAndamento>();
        builder.Services.AddSingleton<IStatusBiuWriter, StatusBiu>();
        builder.Services.AddSingleton<IStatusHTrabWriter, StatusHTrab>();
        builder.Services.AddSingleton<IStatusInstanciaWriter, StatusInstancia>();
        builder.Services.AddSingleton<IStatusTarefasWriter, StatusTarefas>();
        builder.Services.AddSingleton<ITerceirosWriter, Terceiros>();
        builder.Services.AddSingleton<ITipoCompromissoWriter, TipoCompromisso>();
        builder.Services.AddSingleton<ITipoContatoCRMWriter, TipoContatoCRM>();
        builder.Services.AddSingleton<ITipoEMailWriter, TipoEMail>();
        builder.Services.AddSingleton<ITipoEnderecoWriter, TipoEndereco>();
        builder.Services.AddSingleton<ITipoEnderecoSistemaWriter, TipoEnderecoSistema>();
        builder.Services.AddSingleton<ITipoModeloDocumentoWriter, TipoModeloDocumento>();
        builder.Services.AddSingleton<ITipoOrigemSucumbenciaWriter, TipoOrigemSucumbencia>();
        builder.Services.AddSingleton<ITipoProDespositoWriter, TipoProDesposito>();
        builder.Services.AddSingleton<ITipoRecursoWriter, TipoRecurso>();
        builder.Services.AddSingleton<ITiposAcaoWriter, TiposAcao>();
        builder.Services.AddSingleton<ITipoStatusBiuWriter, TipoStatusBiu>();
        builder.Services.AddSingleton<ITipoValorProcessoWriter, TipoValorProcesso>();
        builder.Services.AddSingleton<ITribEnderecosWriter, TribEnderecos>();
        builder.Services.AddSingleton<ITribunalWriter, Tribunal>();
        builder.Services.AddSingleton<IUFWriter, UF>();
        builder.Services.AddSingleton<IUltimosProcessosWriter, UltimosProcessos>();
        builder.Services.AddSingleton<IViaRecebimentoWriter, ViaRecebimento>();
    }
}