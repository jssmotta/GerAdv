// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class LigacoesService
{
    private static (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterLigacoes filtro)
    {
        var parameters = new List<SqlParameter>();
        if (!string.IsNullOrEmpty(filtro.Assunto))
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.Assunto)}", ApplyWildCard(filtro.WildcardChar, filtro.Assunto)));
        }

        if (filtro.AgeClienteAvisado != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.AgeClienteAvisado)}", filtro.AgeClienteAvisado));
        }

        if (filtro.AgeClienteAvisado_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.AgeClienteAvisado)}_end", filtro.AgeClienteAvisado_end));
        }

        if (filtro.Celular != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.Celular)}", filtro.Celular));
        }

        if (filtro.Cliente != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.Cliente)}", filtro.Cliente));
        }

        if (!string.IsNullOrEmpty(filtro.Contato))
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.Contato)}", ApplyWildCard(filtro.WildcardChar, filtro.Contato)));
        }

        if (!filtro.DataRealizada.IsEmpty())
        {
            if (DateTime.TryParse(filtro.DataRealizada, out var dataParam))
                parameters.Add(new($"@{nameof(DBLigacoesDicInfo.DataRealizada)}", dataParam));
        }

        if (!filtro.DataRealizada_end.IsEmpty())
        {
            if (DateTime.TryParse(filtro.DataRealizada_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBLigacoesDicInfo.DataRealizada)}_end", dataParam));
        }

        if (filtro.QuemID != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.QuemID)}", filtro.QuemID));
        }

        if (filtro.QuemID_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.QuemID)}_end", filtro.QuemID_end));
        }

        if (filtro.Telefonista != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.Telefonista)}", filtro.Telefonista));
        }

        if (filtro.Telefonista_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.Telefonista)}_end", filtro.Telefonista_end));
        }

        if (!filtro.UltimoAviso.IsEmpty())
        {
            if (DateTime.TryParse(filtro.UltimoAviso, out var dataParam))
                parameters.Add(new($"@{nameof(DBLigacoesDicInfo.UltimoAviso)}", dataParam));
        }

        if (!filtro.UltimoAviso_end.IsEmpty())
        {
            if (DateTime.TryParse(filtro.UltimoAviso_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBLigacoesDicInfo.UltimoAviso)}_end", dataParam));
        }

        if (!string.IsNullOrEmpty(filtro.Nome))
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.Nome)}", ApplyWildCard(filtro.WildcardChar, filtro.Nome)));
        }

        if (filtro.QuemCodigo != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.QuemCodigo)}", filtro.QuemCodigo));
        }

        if (filtro.QuemCodigo_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.QuemCodigo)}_end", filtro.QuemCodigo_end));
        }

        if (filtro.Solicitante != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.Solicitante)}", filtro.Solicitante));
        }

        if (filtro.Solicitante_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.Solicitante)}_end", filtro.Solicitante_end));
        }

        if (!string.IsNullOrEmpty(filtro.Para))
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.Para)}", ApplyWildCard(filtro.WildcardChar, filtro.Para)));
        }

        if (!string.IsNullOrEmpty(filtro.Fone))
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.Fone)}", ApplyWildCard(filtro.WildcardChar, filtro.Fone)));
        }

        if (filtro.Ramal != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.Ramal)}", filtro.Ramal));
        }

        if (filtro.Particular != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.Particular)}", filtro.Particular));
        }

        if (filtro.Realizada != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.Realizada)}", filtro.Realizada));
        }

        if (!string.IsNullOrEmpty(filtro.Status))
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.Status)}", ApplyWildCard(filtro.WildcardChar, filtro.Status)));
        }

        if (!filtro.Data.IsEmpty())
        {
            if (DateTime.TryParse(filtro.Data, out var dataParam))
                parameters.Add(new($"@{nameof(DBLigacoesDicInfo.Data)}", dataParam));
        }

        if (!filtro.Data_end.IsEmpty())
        {
            if (DateTime.TryParse(filtro.Data_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBLigacoesDicInfo.Data)}_end", dataParam));
        }

        if (filtro.Urgente != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.Urgente)}", filtro.Urgente));
        }

        if (!string.IsNullOrEmpty(filtro.LigarPara))
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.LigarPara)}", ApplyWildCard(filtro.WildcardChar, filtro.LigarPara)));
        }

        if (filtro.Processo != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.Processo)}", filtro.Processo));
        }

        if (filtro.StartScreen != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.StartScreen)}", filtro.StartScreen));
        }

        if (filtro.Emotion != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.Emotion)}", filtro.Emotion));
        }

        if (filtro.Emotion_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.Emotion)}_end", filtro.Emotion_end));
        }

        if (!string.IsNullOrEmpty(filtro.GUID))
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.GUID)}", ApplyWildCard(filtro.WildcardChar, filtro.GUID)));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
        }

        if (filtro.Codigo_filtro_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBLigacoesDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
        }

        if (filtro.LogicalOperator.IsEmpty() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        cWhere.Append(filtro.Assunto.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLigacoesDicInfo.PTabelaNome}].[{DBLigacoesDicInfo.Assunto}]  {DevourerConsts.MsiCollate} like @{nameof(DBLigacoesDicInfo.Assunto)}");
        if (!filtro.AgeClienteAvisado.IsEmpty() && filtro.AgeClienteAvisado_end.IsEmpty())
        {
            cWhere.Append(filtro.AgeClienteAvisado <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLigacoesDicInfo.PTabelaNome}].[{DBLigacoesDicInfo.AgeClienteAvisado}] >= @{nameof(DBLigacoesDicInfo.AgeClienteAvisado)}");
        }
        else
        {
            cWhere.Append((filtro.AgeClienteAvisado <= 0 && filtro.AgeClienteAvisado_end <= 0) ? string.Empty : (!(filtro.AgeClienteAvisado <= 0) && !(filtro.AgeClienteAvisado_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.AgeClienteAvisado} BETWEEN @{nameof(DBLigacoesDicInfo.AgeClienteAvisado)} AND @{nameof(DBLigacoesDicInfo.AgeClienteAvisado)}_end" : !(filtro.AgeClienteAvisado <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.AgeClienteAvisado} = @{nameof(DBLigacoesDicInfo.AgeClienteAvisado)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.AgeClienteAvisado} <= @{nameof(DBLigacoesDicInfo.AgeClienteAvisado)}_end");
        }

        cWhere.Append(filtro.Celular == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLigacoesDicInfo.PTabelaNome}].[{DBLigacoesDicInfo.Celular}] = @{nameof(DBLigacoesDicInfo.Celular)}");
        cWhere.Append(filtro.Cliente <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLigacoesDicInfo.PTabelaNome}].[{DBLigacoesDicInfo.Cliente}] = @{nameof(DBLigacoesDicInfo.Cliente)}");
        cWhere.Append(filtro.Contato.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLigacoesDicInfo.PTabelaNome}].[{DBLigacoesDicInfo.Contato}]  {DevourerConsts.MsiCollate} like @{nameof(DBLigacoesDicInfo.Contato)}");
        if (!filtro.DataRealizada.IsEmpty() && filtro.DataRealizada_end.IsEmpty())
        {
            cWhere.Append(filtro.DataRealizada.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBLigacoesDicInfo.PTabelaNome}].[{DBLigacoesDicInfo.DataRealizada}], 103) >= CONVERT(DATE, @{nameof(DBLigacoesDicInfo.DataRealizada)}, 103)");
        }
        else
        {
            cWhere.Append((filtro.DataRealizada.IsEmpty() && filtro.DataRealizada_end.IsEmpty()) ? string.Empty : (!(filtro.DataRealizada.IsEmpty()) && !(filtro.DataRealizada_end.IsEmpty())) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.DataRealizada} BETWEEN @{nameof(DBLigacoesDicInfo.DataRealizada)} AND @{nameof(DBLigacoesDicInfo.DataRealizada)}_end" : !(filtro.DataRealizada.IsEmpty()) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.DataRealizada} = @{nameof(DBLigacoesDicInfo.DataRealizada)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.DataRealizada} <= @{nameof(DBLigacoesDicInfo.DataRealizada)}_end");
        }

        if (!filtro.QuemID.IsEmpty() && filtro.QuemID_end.IsEmpty())
        {
            cWhere.Append(filtro.QuemID <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLigacoesDicInfo.PTabelaNome}].[{DBLigacoesDicInfo.QuemID}] >= @{nameof(DBLigacoesDicInfo.QuemID)}");
        }
        else
        {
            cWhere.Append((filtro.QuemID <= 0 && filtro.QuemID_end <= 0) ? string.Empty : (!(filtro.QuemID <= 0) && !(filtro.QuemID_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.QuemID} BETWEEN @{nameof(DBLigacoesDicInfo.QuemID)} AND @{nameof(DBLigacoesDicInfo.QuemID)}_end" : !(filtro.QuemID <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.QuemID} = @{nameof(DBLigacoesDicInfo.QuemID)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.QuemID} <= @{nameof(DBLigacoesDicInfo.QuemID)}_end");
        }

        if (!filtro.Telefonista.IsEmpty() && filtro.Telefonista_end.IsEmpty())
        {
            cWhere.Append(filtro.Telefonista <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLigacoesDicInfo.PTabelaNome}].[{DBLigacoesDicInfo.Telefonista}] >= @{nameof(DBLigacoesDicInfo.Telefonista)}");
        }
        else
        {
            cWhere.Append((filtro.Telefonista <= 0 && filtro.Telefonista_end <= 0) ? string.Empty : (!(filtro.Telefonista <= 0) && !(filtro.Telefonista_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.Telefonista} BETWEEN @{nameof(DBLigacoesDicInfo.Telefonista)} AND @{nameof(DBLigacoesDicInfo.Telefonista)}_end" : !(filtro.Telefonista <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.Telefonista} = @{nameof(DBLigacoesDicInfo.Telefonista)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.Telefonista} <= @{nameof(DBLigacoesDicInfo.Telefonista)}_end");
        }

        if (!filtro.UltimoAviso.IsEmpty() && filtro.UltimoAviso_end.IsEmpty())
        {
            cWhere.Append(filtro.UltimoAviso.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBLigacoesDicInfo.PTabelaNome}].[{DBLigacoesDicInfo.UltimoAviso}], 103) >= CONVERT(DATE, @{nameof(DBLigacoesDicInfo.UltimoAviso)}, 103)");
        }
        else
        {
            cWhere.Append((filtro.UltimoAviso.IsEmpty() && filtro.UltimoAviso_end.IsEmpty()) ? string.Empty : (!(filtro.UltimoAviso.IsEmpty()) && !(filtro.UltimoAviso_end.IsEmpty())) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.UltimoAviso} BETWEEN @{nameof(DBLigacoesDicInfo.UltimoAviso)} AND @{nameof(DBLigacoesDicInfo.UltimoAviso)}_end" : !(filtro.UltimoAviso.IsEmpty()) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.UltimoAviso} = @{nameof(DBLigacoesDicInfo.UltimoAviso)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.UltimoAviso} <= @{nameof(DBLigacoesDicInfo.UltimoAviso)}_end");
        }

        cWhere.Append(filtro.Nome.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLigacoesDicInfo.PTabelaNome}].[{DBLigacoesDicInfo.Nome}]  {DevourerConsts.MsiCollate} like @{nameof(DBLigacoesDicInfo.Nome)}");
        if (!filtro.QuemCodigo.IsEmpty() && filtro.QuemCodigo_end.IsEmpty())
        {
            cWhere.Append(filtro.QuemCodigo <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLigacoesDicInfo.PTabelaNome}].[{DBLigacoesDicInfo.QuemCodigo}] >= @{nameof(DBLigacoesDicInfo.QuemCodigo)}");
        }
        else
        {
            cWhere.Append((filtro.QuemCodigo <= 0 && filtro.QuemCodigo_end <= 0) ? string.Empty : (!(filtro.QuemCodigo <= 0) && !(filtro.QuemCodigo_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.QuemCodigo} BETWEEN @{nameof(DBLigacoesDicInfo.QuemCodigo)} AND @{nameof(DBLigacoesDicInfo.QuemCodigo)}_end" : !(filtro.QuemCodigo <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.QuemCodigo} = @{nameof(DBLigacoesDicInfo.QuemCodigo)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.QuemCodigo} <= @{nameof(DBLigacoesDicInfo.QuemCodigo)}_end");
        }

        if (!filtro.Solicitante.IsEmpty() && filtro.Solicitante_end.IsEmpty())
        {
            cWhere.Append(filtro.Solicitante <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLigacoesDicInfo.PTabelaNome}].[{DBLigacoesDicInfo.Solicitante}] >= @{nameof(DBLigacoesDicInfo.Solicitante)}");
        }
        else
        {
            cWhere.Append((filtro.Solicitante <= 0 && filtro.Solicitante_end <= 0) ? string.Empty : (!(filtro.Solicitante <= 0) && !(filtro.Solicitante_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.Solicitante} BETWEEN @{nameof(DBLigacoesDicInfo.Solicitante)} AND @{nameof(DBLigacoesDicInfo.Solicitante)}_end" : !(filtro.Solicitante <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.Solicitante} = @{nameof(DBLigacoesDicInfo.Solicitante)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.Solicitante} <= @{nameof(DBLigacoesDicInfo.Solicitante)}_end");
        }

        cWhere.Append(filtro.Para.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLigacoesDicInfo.PTabelaNome}].[{DBLigacoesDicInfo.Para}]  {DevourerConsts.MsiCollate} like @{nameof(DBLigacoesDicInfo.Para)}");
        cWhere.Append(filtro.Fone.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLigacoesDicInfo.PTabelaNome}].[{DBLigacoesDicInfo.Fone}]  {DevourerConsts.MsiCollate} like @{nameof(DBLigacoesDicInfo.Fone)}");
        cWhere.Append(filtro.Ramal <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLigacoesDicInfo.PTabelaNome}].[{DBLigacoesDicInfo.Ramal}] = @{nameof(DBLigacoesDicInfo.Ramal)}");
        cWhere.Append(filtro.Particular == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLigacoesDicInfo.PTabelaNome}].[{DBLigacoesDicInfo.Particular}] = @{nameof(DBLigacoesDicInfo.Particular)}");
        cWhere.Append(filtro.Realizada == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLigacoesDicInfo.PTabelaNome}].[{DBLigacoesDicInfo.Realizada}] = @{nameof(DBLigacoesDicInfo.Realizada)}");
        cWhere.Append(filtro.Status.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLigacoesDicInfo.PTabelaNome}].[{DBLigacoesDicInfo.Status}]  {DevourerConsts.MsiCollate} like @{nameof(DBLigacoesDicInfo.Status)}");
        if (!filtro.Data.IsEmpty() && filtro.Data_end.IsEmpty())
        {
            cWhere.Append(filtro.Data.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBLigacoesDicInfo.PTabelaNome}].[{DBLigacoesDicInfo.Data}], 103) >= CONVERT(DATE, @{nameof(DBLigacoesDicInfo.Data)}, 103)");
        }
        else
        {
            cWhere.Append((filtro.Data.IsEmpty() && filtro.Data_end.IsEmpty()) ? string.Empty : (!(filtro.Data.IsEmpty()) && !(filtro.Data_end.IsEmpty())) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.Data} BETWEEN @{nameof(DBLigacoesDicInfo.Data)} AND @{nameof(DBLigacoesDicInfo.Data)}_end" : !(filtro.Data.IsEmpty()) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.Data} = @{nameof(DBLigacoesDicInfo.Data)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.Data} <= @{nameof(DBLigacoesDicInfo.Data)}_end");
        }

        cWhere.Append(filtro.Urgente == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLigacoesDicInfo.PTabelaNome}].[{DBLigacoesDicInfo.Urgente}] = @{nameof(DBLigacoesDicInfo.Urgente)}");
        cWhere.Append(filtro.LigarPara.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLigacoesDicInfo.PTabelaNome}].[{DBLigacoesDicInfo.LigarPara}]  {DevourerConsts.MsiCollate} like @{nameof(DBLigacoesDicInfo.LigarPara)}");
        cWhere.Append(filtro.Processo <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLigacoesDicInfo.PTabelaNome}].[{DBLigacoesDicInfo.Processo}] = @{nameof(DBLigacoesDicInfo.Processo)}");
        cWhere.Append(filtro.StartScreen == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLigacoesDicInfo.PTabelaNome}].[{DBLigacoesDicInfo.StartScreen}] = @{nameof(DBLigacoesDicInfo.StartScreen)}");
        if (!filtro.Emotion.IsEmpty() && filtro.Emotion_end.IsEmpty())
        {
            cWhere.Append(filtro.Emotion <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLigacoesDicInfo.PTabelaNome}].[{DBLigacoesDicInfo.Emotion}] >= @{nameof(DBLigacoesDicInfo.Emotion)}");
        }
        else
        {
            cWhere.Append((filtro.Emotion <= 0 && filtro.Emotion_end <= 0) ? string.Empty : (!(filtro.Emotion <= 0) && !(filtro.Emotion_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.Emotion} BETWEEN @{nameof(DBLigacoesDicInfo.Emotion)} AND @{nameof(DBLigacoesDicInfo.Emotion)}_end" : !(filtro.Emotion <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.Emotion} = @{nameof(DBLigacoesDicInfo.Emotion)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.Emotion} <= @{nameof(DBLigacoesDicInfo.Emotion)}_end");
        }

        cWhere.Append(filtro.GUID.IsEmpty() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLigacoesDicInfo.PTabelaNome}].[{DBLigacoesDicInfo.GUID}]  {DevourerConsts.MsiCollate} like @{nameof(DBLigacoesDicInfo.GUID)}");
        if (!filtro.Codigo_filtro.IsEmpty() && filtro.Codigo_filtro_end.IsEmpty())
        {
            cWhere.Append(filtro.Codigo_filtro <= 0 ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBLigacoesDicInfo.PTabelaNome}].[{DBLigacoesDicInfo.CampoCodigo}] >= @{nameof(DBLigacoesDicInfo.CampoCodigo)}");
        }
        else
        {
            cWhere.Append((filtro.Codigo_filtro <= 0 && filtro.Codigo_filtro_end <= 0) ? string.Empty : (!(filtro.Codigo_filtro <= 0) && !(filtro.Codigo_filtro_end <= 0)) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.CampoCodigo} BETWEEN @{nameof(DBLigacoesDicInfo.CampoCodigo)} AND @{nameof(DBLigacoesDicInfo.CampoCodigo)}_end" : !(filtro.Codigo_filtro <= 0) ? (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.CampoCodigo} = @{nameof(DBLigacoesDicInfo.CampoCodigo)}" : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"{DBLigacoesDicInfo.CampoCodigo} <= @{nameof(DBLigacoesDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private static string ApplyWildCard(char wildcardChar, string value)
    {
        if (wildcardChar == '\0' || wildcardChar == ' ')
        {
            return value;
        }

        var result = $"{wildcardChar}{value.Replace(" ", wildcardChar.ToString())}{wildcardChar}";
        return result;
    }

    public async Task<IEnumerable<NomeID>> GetListN([FromQuery] int max, [FromBody] Filters.FilterLigacoes? filtro, [FromRoute, Required] string uri, CancellationToken token)
    {
        // Tracking: 20250606-0
        ThrowIfDisposed();
        var filtroResult = filtro == null ? null : WFiltro(filtro!);
        string where = filtroResult?.where ?? string.Empty;
        List<SqlParameter> parameters = filtroResult?.parametros ?? [];
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new Exception($"Coneão nula.");
        }

        var keyCache = await reader.ReadStringAuditor(uri, "", [], oCnn);
        var cacheKey = $"{uri}-Ligacoes-{max}-{where.GetHashCode()}-GetListN-{keyCache}";
        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId)
        };
        return await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataListNAsync(max, uri, where, parameters, cancel), entryOptions, cancellationToken: token) ?? [];
    }

    private async Task<IEnumerable<NomeID>> GetDataListNAsync(int max, string uri, string where, List<SqlParameter> parameters, CancellationToken token)
    {
        var result = new List<NomeID>(max);
        var lista = await reader.ListarN(max, uri, where, parameters, DBLigacoesDicInfo.CampoNome);
        foreach (var item in lista)
        {
            if (token.IsCancellationRequested)
                break;
            if (item?.FNome != null)
            {
                result.Add(new NomeID { Nome = item.FNome, ID = item.ID });
            }
        }

        return result;
    }

    private async Task<IEnumerable<LigacoesResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}