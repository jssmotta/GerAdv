// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Controller;
#pragma warning restore IDE0130 // Namespace does not match folder structure

[Route("api/v{version:apiVersion}/{uri}/[controller]/[action]")]
[ApiController]
[ApiVersion("1.0")]
public partial class HorasTrabController(IHorasTrabService horastrabService) : ControllerBase
{
    private readonly IHorasTrabService _horastrabService = horastrabService;
    private static readonly Logger _logger = LogManager.GetCurrentClassLogger();
    [HttpGet]
    [Authorize]
    public async Task<IActionResult> GetAll([FromQuery] int max, [FromRoute, Required] string uri)
    {
        //_logger.LogInfo("HorasTrab", "GetAll", $"max = {max}", uri);
        var result = await _horastrabService.GetAll(max, uri);
        return Ok(result);
    }

    [HttpPost]
    [Authorize]
    public async Task<IActionResult> Filter([FromQuery] int max, [FromBody] Filters.FilterHorasTrab filtro, [FromRoute, Required] string uri)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        //_logger.Info("HorasTrab: Filter called max {0} with filtro = {1}, {2}", max, filtro, uri);
        var result = await _horastrabService.Filter(max, filtro, uri);
        return Ok(result);
    }

    [HttpGet("{id}")]
    [Authorize]
    public async Task<IActionResult> GetById(int id, [FromRoute, Required] string uri, CancellationToken token = default)
    {
        //_logger.Info("HorasTrab: GetById called with id = {0}, {1}", id, uri);
        var result = await _horastrabService.GetById(id, uri, token);
        if (result == null)
        {
            _logger.Warn("GetById: No HorasTrab found with id = {0}, {1}", id, uri);
            return NotFound();
        }

        return Ok(result);
    }

    [HttpPost]
    [Authorize]
    public async Task<IActionResult> GetListN([FromQuery] int max, [FromBody] Filters.FilterHorasTrab? filtro, [FromRoute, Required] string uri)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        //_logger.Info($"HorasTrab: GetListN called, max {max}, {filtro} uri");
        var result = await _horastrabService.GetListN(max, filtro, uri);
        return Ok(result);
    }

    [EnableRateLimiting("DefaultPolicy")]
    [HttpPost]
    [Authorize]
    [ProducesResponseType(typeof(HorasTrabResponse), StatusCodes.Status200OK)]
    [ProducesResponseType(typeof(HorasTrabResponse), StatusCodes.Status201Created)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    [ProducesResponseType(StatusCodes.Status401Unauthorized)]
    [ProducesResponseType(StatusCodes.Status403Forbidden)]
    [ProducesResponseType(typeof(Error500), StatusCodes.Status500InternalServerError)]
    public async Task<IActionResult> AddAndUpdate([FromBody] Models.HorasTrab regHorasTrab, [FromRoute, Required] string uri)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        //_logger.LogInfo("HorasTrab", "AddAndUpdate", regHorasTrab, uri);
        try
        {
            var result = await _horastrabService.AddAndUpdate(regHorasTrab, uri);
            if (result == null)
            {
                _logger.Warn("HorasTrab: AddAndUpdate failed to add or update HorasTrab, {0}", uri);
                return BadRequest();
            }

            return Ok(result);
        }
        catch (Exception ex)
        {
            _logger.Error(ex, "HorasTrab: AddAndUpdate failed with exception for uri = {0}", uri);
            return StatusCode(500, new Error500 { success = false, data = "", message = ex.Message });
        }
    }

    [EnableRateLimiting("DefaultPolicy")]
    [Authorize]
    [HttpDelete]
    [ProducesResponseType(typeof(Error500), StatusCodes.Status500InternalServerError)]
    public async Task<IActionResult> Delete([FromQuery] int id, [FromRoute, Required] string uri)
    {
        //_logger.Info("HorasTrab: Delete called with id = {0}, {2}", id, uri);
        try
        {
            var result = await _horastrabService.Delete(id, uri);
            if (result == null)
            {
                _logger.Warn("Delete: No HorasTrab found to delete with id = {0}, {1}", id, uri);
                return NotFound();
            }

            return Ok(result);
        }
        catch (Exception ex)
        {
            _logger.Error(ex, "HorasTrab: Delete failed with exception for id = {0}, {1}", id, uri);
            return Conflict(new Error500 { success = false, data = "", message = "Não é possível excluir o registro porque ele está sendo referenciado/em uso em outra tabela." });
        }
    }

    [HttpPost]
    [Authorize]
    public async Task<IActionResult> Validation([FromBody] Models.HorasTrab regHorasTrab, [FromRoute, Required] string uri)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        try
        {
            var result = await _horastrabService.Validation(regHorasTrab, uri);
            if (result == null)
            {
                _logger.Warn("HorasTrab: Validation failed to add or update HorasTrab, {0}", uri);
                return BadRequest();
            }

            return Ok(result);
        }
        catch (Exception ex)
        {
            _logger.Error(ex, "HorasTrab: Validation failed with exception for uri = {0}", uri);
            return StatusCode(500, new { success = false, data = "", message = ex.Message });
        }
    }
}