// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
'use client';
import { CRUD_CONSTANTS } from '@/app/tools/crud';
import { PoderJudiciarioAssociadoApi, PoderJudiciarioAssociadoApiError } from '../Apis/ApiPoderJudiciarioAssociado';
import { FilterPoderJudiciarioAssociado } from '../Filters/PoderJudiciarioAssociado';
import { IPoderJudiciarioAssociado } from '../Interfaces/interface.PoderJudiciarioAssociado';
import { PoderJudiciarioAssociadoEmpty } from '../../Models/PoderJudiciarioAssociado';

export class PoderJudiciarioAssociadoValidator {
  static validatePoderJudiciarioAssociado(poderjudiciarioassociado: IPoderJudiciarioAssociado): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];

    // Atualmente não há validações de regras de negócio específicas
    // Todas as validações são feitas nos inputs correspondentes
    
    return {
      isValid: errors.length === 0,
      errors
    };
  }
}

export interface IPoderJudiciarioAssociadoService {
  fetchPoderJudiciarioAssociadoById: (id: number) => Promise<IPoderJudiciarioAssociado>;
  savePoderJudiciarioAssociado: (poderjudiciarioassociado: IPoderJudiciarioAssociado) => Promise<IPoderJudiciarioAssociado>;  
  
  getAll: (filtro?: FilterPoderJudiciarioAssociado) => Promise<IPoderJudiciarioAssociado[]>;
  deletePoderJudiciarioAssociado: (id: number) => Promise<void>;
  validatePoderJudiciarioAssociado: (poderjudiciarioassociado: IPoderJudiciarioAssociado) => { isValid: boolean; errors: string[] };
}

export class PoderJudiciarioAssociadoService implements IPoderJudiciarioAssociadoService {
  constructor(private api: PoderJudiciarioAssociadoApi) {}

  async fetchPoderJudiciarioAssociadoById(id: number): Promise<IPoderJudiciarioAssociado> {
    if (id <= 0) {
      throw new PoderJudiciarioAssociadoApiError('ID inválido', 400, 'INVALID_ID');
    }

    try {
      
      const response = await this.api.getById(id);
      return response.data;

    } catch (error) {
      if (error instanceof PoderJudiciarioAssociadoApiError) {
        throw error;
      }
      throw new PoderJudiciarioAssociadoApiError('Erro ao buscar poderjudiciarioassociado', 500, 'FETCH_ERROR', error);
    }
  }

  async savePoderJudiciarioAssociado(poderjudiciarioassociado: IPoderJudiciarioAssociado): Promise<IPoderJudiciarioAssociado> {    
    const validation = this.validatePoderJudiciarioAssociado(poderjudiciarioassociado);
    if (!validation.isValid) {
      throw new PoderJudiciarioAssociadoApiError(
        `Dados inválidos: ${validation.errors.join(', ')}`,
        400,
        'VALIDATION_ERROR'
      );
    }

    try {
      const response = await this.api.addAndUpdate(poderjudiciarioassociado);
      return response.data;
    } catch (error) {
      if (error instanceof PoderJudiciarioAssociadoApiError) {
        throw error;
      }
      throw new PoderJudiciarioAssociadoApiError('Erro ao salvar poderjudiciarioassociado', 500, 'SAVE_ERROR', error);
    }
  }

  
  

   async getAll(
    filtro?: FilterPoderJudiciarioAssociado,
    onOnlineData?: (data: IPoderJudiciarioAssociado[]) => void
  ): Promise<IPoderJudiciarioAssociado[]> {
    try {
      // Carrega dados offline primeiro
      const preloadResponse = await this.api.filterPreload(0, filtro ?? {});
      const offlineData = preloadResponse?.data || [];

      if (onOnlineData) {
        // Busca dados online em background e envia via callback
        this.api.filter(0, filtro ?? {})
          .then(response => {
            if (response?.data) {
              onOnlineData(response.data);
            }
          })
          .catch(error => {
            if (process.env.NEXT_PUBLIC_SHOW_LOG === '1')
                console.log('Error fetching online PoderJudiciarioAssociado');
          });
        // Retorna offline imediatamente
        return offlineData;
      } else {
        // Se não há callback, aguarda dados online e retorna
        try {
          const onlineResponse = await this.api.filter(0, filtro ?? {});
          return onlineResponse?.data || offlineData;
        } catch (error) {
            if (process.env.NEXT_PUBLIC_SHOW_LOG === '1')
                console.log('Error fetching online PoderJudiciarioAssociado');
          return offlineData;
        }
      }
    } catch (error) {
      if (process.env.NEXT_PUBLIC_SHOW_LOG === '1')
        console.log('Error fetching all PoderJudiciarioAssociado:');
      return [];
    }
  }


  async deletePoderJudiciarioAssociado(id: number): Promise<void> {
    if (id <= 0) {
      throw new PoderJudiciarioAssociadoApiError('ID inválido para exclusão', 400, 'INVALID_ID');
    }

    try {
      await this.api.delete(id);
    } catch (error) {
      if (error instanceof PoderJudiciarioAssociadoApiError) {
        throw error;
      }
      throw new PoderJudiciarioAssociadoApiError('Erro ao excluir poderjudiciarioassociado', 500, 'DELETE_ERROR', error);
    }
  }

  validatePoderJudiciarioAssociado(poderjudiciarioassociado: IPoderJudiciarioAssociado): { isValid: boolean; errors: string[] } {
    return PoderJudiciarioAssociadoValidator.validatePoderJudiciarioAssociado(poderjudiciarioassociado);
  }
}