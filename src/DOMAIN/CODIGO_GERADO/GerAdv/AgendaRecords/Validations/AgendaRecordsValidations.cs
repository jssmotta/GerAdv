// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IAgendaRecordsValidation
{
    Task<bool> ValidateReg(Models.AgendaRecords reg, IAgendaRecordsService service, IAgendaReader agendaReader, IClientesSociosReader clientessociosReader, IColaboradoresReader colaboradoresReader, IForoReader foroReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, IAgendaRecordsService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class AgendaRecordsValidation : IAgendaRecordsValidation
{
    public async Task<bool> CanDelete(int id, IAgendaRecordsService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.AgendaRecords reg)
    {
        return true;
    }

    public async Task<bool> ValidateReg(Models.AgendaRecords reg, IAgendaRecordsService service, IAgendaReader agendaReader, IClientesSociosReader clientessociosReader, IColaboradoresReader colaboradoresReader, IForoReader foroReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.Agenda == 0)
            throw new SGValidationException("Agenda é obrigatório.");
        // Agenda
        {
            var regAgenda = await agendaReader.Read(reg.Agenda, oCnn);
            if (regAgenda == null || regAgenda.Id != reg.Agenda)
            {
                throw new SGValidationException($"Compromisso não encontrado ({regAgenda?.Id}).");
            }
        }

        // ClientesSocios
        if (!reg.ClientesSocios.IsEmptyIDNumber())
        {
            var regClientesSocios = await clientessociosReader.Read(reg.ClientesSocios, oCnn);
            if (regClientesSocios == null || regClientesSocios.Id != reg.ClientesSocios)
            {
                throw new SGValidationException($"Clientes Socios não encontrado ({regClientesSocios?.Id}).");
            }
        }

        // Colaboradores
        if (!reg.Colaborador.IsEmptyIDNumber())
        {
            var regColaboradores = await colaboradoresReader.Read(reg.Colaborador, oCnn);
            if (regColaboradores == null || regColaboradores.Id != reg.Colaborador)
            {
                throw new SGValidationException($"Colaboradores não encontrado ({regColaboradores?.Id}).");
            }
        }

        // Foro
        if (!reg.Foro.IsEmptyIDNumber())
        {
            var regForo = await foroReader.Read(reg.Foro, oCnn);
            if (regForo == null || regForo.Id != reg.Foro)
            {
                throw new SGValidationException($"Foro não encontrado ({regForo?.Id}).");
            }
        }

        return true;
    }
}