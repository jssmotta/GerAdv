// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IBensMateriaisValidation
{
    Task<bool> ValidateReg(Models.BensMateriais reg, IBensMateriaisService service, IBensClassificacaoReader bensclassificacaoReader, IFornecedoresReader fornecedoresReader, ICidadeReader cidadeReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, IBensMateriaisService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class BensMateriaisValidation : IBensMateriaisValidation
{
    public async Task<bool> CanDelete(int id, IBensMateriaisService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.BensMateriais reg)
    {
        if (reg.Nome.Length > 80)
            throw new SGValidationException($"Nome deve ter no máximo 80 caracteres.");
        if (reg.NFNRO.Length > 255)
            throw new SGValidationException($"NFNRO deve ter no máximo 255 caracteres.");
        if (reg.NroSerieProduto.Length > 100)
            throw new SGValidationException($"NroSerieProduto deve ter no máximo 100 caracteres.");
        if (reg.Comprador.Length > 100)
            throw new SGValidationException($"Comprador deve ter no máximo 100 caracteres.");
        if (reg.NomeVendedor.Length > 255)
            throw new SGValidationException($"NomeVendedor deve ter no máximo 255 caracteres.");
        if (reg.GUID.Length > 100)
            throw new SGValidationException($"GUID deve ter no máximo 100 caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.BensMateriais reg, IBensMateriaisService service, IBensClassificacaoReader bensclassificacaoReader, IFornecedoresReader fornecedoresReader, ICidadeReader cidadeReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Nome))
            throw new SGValidationException("Nome é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        // BensClassificacao
        if (!reg.BensClassificacao.IsEmptyIDNumber())
        {
            var regBensClassificacao = await bensclassificacaoReader.Read(reg.BensClassificacao, oCnn);
            if (regBensClassificacao == null || regBensClassificacao.Id != reg.BensClassificacao)
            {
                throw new SGValidationException($"Bens Classificacao não encontrado ({regBensClassificacao?.Id}).");
            }
        }

        // Fornecedores
        if (!reg.Fornecedor.IsEmptyIDNumber())
        {
            var regFornecedores = await fornecedoresReader.Read(reg.Fornecedor, oCnn);
            if (regFornecedores == null || regFornecedores.Id != reg.Fornecedor)
            {
                throw new SGValidationException($"Fornecedores não encontrado ({regFornecedores?.Id}).");
            }
        }

        // Cidade
        if (!reg.Cidade.IsEmptyIDNumber())
        {
            var regCidade = await cidadeReader.Read(reg.Cidade, oCnn);
            if (regCidade == null || regCidade.Id != reg.Cidade)
            {
                throw new SGValidationException($"Cidade não encontrado ({regCidade?.Id}).");
            }
        }

        return true;
    }
}