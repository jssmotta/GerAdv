// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IAgendaSemanaValidation
{
    Task<bool> ValidateReg(Models.AgendaSemana reg, IAgendaSemanaService service, IFuncionariosReader funcionariosReader, IAdvogadosReader advogadosReader, ITipoCompromissoReader tipocompromissoReader, IClientesReader clientesReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, IAgendaSemanaService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class AgendaSemanaValidation : IAgendaSemanaValidation
{
    public async Task<bool> CanDelete(int id, IAgendaSemanaService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.AgendaSemana reg)
    {
        return true;
    }

    public async Task<bool> ValidateReg(Models.AgendaSemana reg, IAgendaSemanaService service, IFuncionariosReader funcionariosReader, IAdvogadosReader advogadosReader, ITipoCompromissoReader tipocompromissoReader, IClientesReader clientesReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        // Funcionarios
        if (!reg.Funcionario.IsEmptyIDNumber())
        {
            var regFuncionarios = await funcionariosReader.Read(reg.Funcionario, oCnn);
            if (regFuncionarios == null || regFuncionarios.Id != reg.Funcionario)
            {
                throw new SGValidationException($"Colaborador não encontrado ({regFuncionarios?.Id}).");
            }
        }

        // Advogados
        if (!reg.Advogado.IsEmptyIDNumber())
        {
            var regAdvogados = await advogadosReader.Read(reg.Advogado, oCnn);
            if (regAdvogados == null || regAdvogados.Id != reg.Advogado)
            {
                throw new SGValidationException($"Advogados não encontrado ({regAdvogados?.Id}).");
            }
        }

        // TipoCompromisso
        if (!reg.TipoCompromisso.IsEmptyIDNumber())
        {
            var regTipoCompromisso = await tipocompromissoReader.Read(reg.TipoCompromisso, oCnn);
            if (regTipoCompromisso == null || regTipoCompromisso.Id != reg.TipoCompromisso)
            {
                throw new SGValidationException($"Tipo Compromisso não encontrado ({regTipoCompromisso?.Id}).");
            }
        }

        // Clientes
        if (!reg.Cliente.IsEmptyIDNumber())
        {
            var regClientes = await clientesReader.Read(reg.Cliente, oCnn);
            if (regClientes == null || regClientes.Id != reg.Cliente)
            {
                throw new SGValidationException($"Clientes não encontrado ({regClientes?.Id}).");
            }
        }

        return true;
    }
}