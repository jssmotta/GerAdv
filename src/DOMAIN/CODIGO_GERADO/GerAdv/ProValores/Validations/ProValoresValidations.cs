// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IProValoresValidation
{
    Task<bool> ValidateReg(Models.ProValores reg, IProValoresService service, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
    Task<bool> CanDelete(int? id, IProValoresService service, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
}

public class ProValoresValidation : IProValoresValidation
{
    public async Task<bool> CanDelete(int? id, IProValoresService service, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (id == null || id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id ?? default, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.ProValores reg)
    {
        if (reg.Guid != null && reg.Guid.Length > DBProValoresDicInfo.PrvGuid.FTamanho)
            throw new SGValidationException($"GUID deve ter no máximo {DBProValoresDicInfo.PrvGuid.FTamanho} caracteres.");
        if (reg.Indice != null && reg.Indice.Length > DBProValoresDicInfo.PrvIndice.FTamanho)
            throw new SGValidationException($"Indice deve ter no máximo {DBProValoresDicInfo.PrvIndice.FTamanho} caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.ProValores reg, IProValoresService service, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Data))
            throw new SGValidationException("Data é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.Processo == 0)
            throw new SGValidationException("Processo é obrigatório.");
        if (reg.TipoValorProcesso == 0)
            throw new SGValidationException("TipoValorProcesso é obrigatório.");
        if (reg.Indice.IsEmpty())
            throw new SGValidationException("Indice é obrigatório.");
        if (reg.Data.IsEmpty())
            throw new SGValidationException("Data é obrigatório.");
        if (reg.ValorOriginal.IsEmpty())
            throw new SGValidationException("ValorOriginal é obrigatório.");
        if (!string.IsNullOrWhiteSpace(reg.DataUltimaCorrecao))
        {
            if (DateTime.TryParse(reg.DataUltimaCorrecao, out DateTime dataAntiga))
            {
                if (dataAntiga < new DateTime(1900, 1, 1))
                    throw new SGValidationException("DataUltimaCorrecao não pode ser anterior a 01/01/1900.");
            }
        }

        await Task.Delay(0);
        return true;
    }
}