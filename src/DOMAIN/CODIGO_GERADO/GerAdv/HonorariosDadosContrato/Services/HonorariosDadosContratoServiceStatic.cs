// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class HonorariosDadosContratoService
{
    public (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterHonorariosDadosContrato? filtro)
    {
        if (filtro == null)
            return null;
        var parameters = new List<SqlParameter>();
        if (filtro.Cliente != int.MinValue)
        {
            parameters.Add(new($"@{(DBHonorariosDadosContratoDicInfo.Cliente)}", filtro.Cliente));
            if (filtro.Cliente_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBHonorariosDadosContratoDicInfo.Cliente)}_end", filtro.Cliente_end));
            }
        }

        if (filtro.Fixo != int.MinValue)
        {
            parameters.Add(new($"@{(DBHonorariosDadosContratoDicInfo.Fixo)}", filtro.Fixo));
        }

        if (filtro.Variavel != int.MinValue)
        {
            parameters.Add(new($"@{(DBHonorariosDadosContratoDicInfo.Variavel)}", filtro.Variavel));
        }

        if (filtro.PercSucesso != decimal.MinValue)
        {
            parameters.Add(new($"@{(DBHonorariosDadosContratoDicInfo.PercSucesso)}", filtro.PercSucesso));
            if (filtro.PercSucesso_end != decimal.MinValue)
            {
                parameters.Add(new($"@{(DBHonorariosDadosContratoDicInfo.PercSucesso)}_end", filtro.PercSucesso_end));
            }
        }

        if (filtro.Processo != int.MinValue)
        {
            parameters.Add(new($"@{(DBHonorariosDadosContratoDicInfo.Processo)}", filtro.Processo));
            if (filtro.Processo_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBHonorariosDadosContratoDicInfo.Processo)}_end", filtro.Processo_end));
            }
        }

        if (!string.IsNullOrWhiteSpace(filtro.ArquivoContrato))
        {
            parameters.Add(new($"@{(DBHonorariosDadosContratoDicInfo.ArquivoContrato)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.ArquivoContrato)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.TextoContrato))
        {
            parameters.Add(new($"@{(DBHonorariosDadosContratoDicInfo.TextoContrato)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.TextoContrato)));
        }

        if (filtro.ValorFixo != decimal.MinValue)
        {
            parameters.Add(new($"@{(DBHonorariosDadosContratoDicInfo.ValorFixo)}", filtro.ValorFixo));
            if (filtro.ValorFixo_end != decimal.MinValue)
            {
                parameters.Add(new($"@{(DBHonorariosDadosContratoDicInfo.ValorFixo)}_end", filtro.ValorFixo_end));
            }
        }

        if (!string.IsNullOrWhiteSpace(filtro.Observacao))
        {
            parameters.Add(new($"@{(DBHonorariosDadosContratoDicInfo.Observacao)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Observacao)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Guid))
        {
            parameters.Add(new($"@{(DBHonorariosDadosContratoDicInfo.Guid)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Guid)));
        }

        if (!filtro.DataContrato.IsEmptyDX())
        {
            if (DateTime.TryParse(filtro.DataContrato, out var dataParam1))
                parameters.Add(new($"@{(DBHonorariosDadosContratoDicInfo.DataContrato)}", dataParam1));
            if (!filtro.DataContrato_end.IsEmptyDX())
            {
                if (DateTime.TryParse(filtro.DataContrato_end, out var dataParam2))
                    parameters.Add(new($"@{(DBHonorariosDadosContratoDicInfo.DataContrato)}_end", dataParam2));
            }
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{(DBHonorariosDadosContratoDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
            if (filtro.Codigo_filtro_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBHonorariosDadosContratoDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
            }
        }

        if (filtro.LogicalOperator.IsEmptyX() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        if (!(filtro.Cliente.IsEmptyX()) && filtro.Cliente_end.IsEmptyX())
        {
            cWhere.Append(filtro.Cliente.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHonorariosDadosContratoDicInfo.PTabelaNome}].[{DBHonorariosDadosContratoDicInfo.Cliente}] = @{(DBHonorariosDadosContratoDicInfo.Cliente)}");
        }
        else if (!(filtro.Cliente.IsEmptyX()) && !(filtro.Cliente_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHonorariosDadosContratoDicInfo.PTabelaNome}].{DBHonorariosDadosContratoDicInfo.Cliente} BETWEEN @{(DBHonorariosDadosContratoDicInfo.Cliente)} AND @{(DBHonorariosDadosContratoDicInfo.Cliente)}_end");
        }

        cWhere.Append(filtro.Fixo == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHonorariosDadosContratoDicInfo.PTabelaNome}].[{DBHonorariosDadosContratoDicInfo.Fixo}] = @{(DBHonorariosDadosContratoDicInfo.Fixo)}");
        cWhere.Append(filtro.Variavel == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHonorariosDadosContratoDicInfo.PTabelaNome}].[{DBHonorariosDadosContratoDicInfo.Variavel}] = @{(DBHonorariosDadosContratoDicInfo.Variavel)}");
        if (!(filtro.PercSucesso == decimal.MinValue) && filtro.PercSucesso_end == decimal.MinValue)
        {
            cWhere.Append(filtro.PercSucesso == decimal.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHonorariosDadosContratoDicInfo.PTabelaNome}].[{DBHonorariosDadosContratoDicInfo.PercSucesso}] = @{(DBHonorariosDadosContratoDicInfo.PercSucesso)}");
        }
        else if (!(filtro.PercSucesso == decimal.MinValue) && !(filtro.PercSucesso_end == decimal.MinValue))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHonorariosDadosContratoDicInfo.PTabelaNome}].{DBHonorariosDadosContratoDicInfo.PercSucesso} BETWEEN @{(DBHonorariosDadosContratoDicInfo.PercSucesso)} AND @{(DBHonorariosDadosContratoDicInfo.PercSucesso)}_end");
        }

        if (!(filtro.Processo.IsEmptyX()) && filtro.Processo_end.IsEmptyX())
        {
            cWhere.Append(filtro.Processo.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHonorariosDadosContratoDicInfo.PTabelaNome}].[{DBHonorariosDadosContratoDicInfo.Processo}] = @{(DBHonorariosDadosContratoDicInfo.Processo)}");
        }
        else if (!(filtro.Processo.IsEmptyX()) && !(filtro.Processo_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHonorariosDadosContratoDicInfo.PTabelaNome}].{DBHonorariosDadosContratoDicInfo.Processo} BETWEEN @{(DBHonorariosDadosContratoDicInfo.Processo)} AND @{(DBHonorariosDadosContratoDicInfo.Processo)}_end");
        }

        cWhere.Append(filtro.ArquivoContrato.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHonorariosDadosContratoDicInfo.PTabelaNome}].[{DBHonorariosDadosContratoDicInfo.ArquivoContrato}]  {DevourerConsts.MsiCollate} like @{(DBHonorariosDadosContratoDicInfo.ArquivoContrato)}");
        cWhere.Append(filtro.TextoContrato.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHonorariosDadosContratoDicInfo.PTabelaNome}].[{DBHonorariosDadosContratoDicInfo.TextoContrato}]  {DevourerConsts.MsiCollate} like @{(DBHonorariosDadosContratoDicInfo.TextoContrato)}");
        if (!(filtro.ValorFixo == decimal.MinValue) && filtro.ValorFixo_end == decimal.MinValue)
        {
            cWhere.Append(filtro.ValorFixo == decimal.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHonorariosDadosContratoDicInfo.PTabelaNome}].[{DBHonorariosDadosContratoDicInfo.ValorFixo}] = @{(DBHonorariosDadosContratoDicInfo.ValorFixo)}");
        }
        else if (!(filtro.ValorFixo == decimal.MinValue) && !(filtro.ValorFixo_end == decimal.MinValue))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHonorariosDadosContratoDicInfo.PTabelaNome}].{DBHonorariosDadosContratoDicInfo.ValorFixo} BETWEEN @{(DBHonorariosDadosContratoDicInfo.ValorFixo)} AND @{(DBHonorariosDadosContratoDicInfo.ValorFixo)}_end");
        }

        cWhere.Append(filtro.Observacao.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHonorariosDadosContratoDicInfo.PTabelaNome}].[{DBHonorariosDadosContratoDicInfo.Observacao}]  {DevourerConsts.MsiCollate} like @{(DBHonorariosDadosContratoDicInfo.Observacao)}");
        cWhere.Append(filtro.Guid.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHonorariosDadosContratoDicInfo.PTabelaNome}].[{DBHonorariosDadosContratoDicInfo.Guid}]  {DevourerConsts.MsiCollate} like @{(DBHonorariosDadosContratoDicInfo.Guid)}");
        if (!(filtro.DataContrato.IsEmptyDX()) && filtro.DataContrato_end.IsEmptyDX())
        {
            cWhere.Append(filtro.DataContrato.IsEmptyDX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBHonorariosDadosContratoDicInfo.PTabelaNome}].[{DBHonorariosDadosContratoDicInfo.DataContrato}], 103) = CONVERT(DATE, @{(DBHonorariosDadosContratoDicInfo.DataContrato)}, 103)");
        }
        else if (!(filtro.DataContrato.IsEmptyDX()) && !(filtro.DataContrato_end.IsEmptyDX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHonorariosDadosContratoDicInfo.PTabelaNome}].{DBHonorariosDadosContratoDicInfo.DataContrato} BETWEEN @{(DBHonorariosDadosContratoDicInfo.DataContrato)} AND @{(DBHonorariosDadosContratoDicInfo.DataContrato)}_end");
        }

        if (!(filtro.Codigo_filtro.IsEmptyX()) && filtro.Codigo_filtro_end.IsEmptyX())
        {
            cWhere.Append(filtro.Codigo_filtro.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHonorariosDadosContratoDicInfo.PTabelaNome}].[{DBHonorariosDadosContratoDicInfo.CampoCodigo}] = @{(DBHonorariosDadosContratoDicInfo.CampoCodigo)}");
        }
        else if (!(filtro.Codigo_filtro.IsEmptyX()) && !(filtro.Codigo_filtro_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHonorariosDadosContratoDicInfo.PTabelaNome}].{DBHonorariosDadosContratoDicInfo.CampoCodigo} BETWEEN @{(DBHonorariosDadosContratoDicInfo.CampoCodigo)} AND @{(DBHonorariosDadosContratoDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private string GetFilterHash(Filters.FilterHonorariosDadosContrato? filtro)
    {
        if (filtro == null)
            return string.Empty;
        var json = JsonSerializer.Serialize(filtro);
        using var sha256 = SHA256.Create();
        var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(json));
        return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
    }

    private async Task<IEnumerable<HonorariosDadosContratoResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}