// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// useDiario2Grid.ts
// Hook centralizado para lógicas compartilhadas dos grids de Diario2
'use client';
import { useCallback, useMemo, useState, useEffect } from 'react';
import { SortDescriptor } from '@progress/kendo-data-query';
import { IDiario2 } from '../Interfaces/interface.Diario2';
import { applyFilter, formatCurrency } from '@/app/tools/crud';
import { useGridFilter } from '@/app/hooks/useGridFilter';
import { useGridPagination } from '@/app/hooks/useGridPagination';
import { useGridSort } from '@/app/hooks/useGridSort';
import { SvgIcon } from '@progress/kendo-react-common';
import { trashIcon } from '@progress/kendo-svg-icons';
interface UseDiario2GridProps {
  data: IDiario2[];
  onRowClick: (diario2: IDiario2) => void;
  onDeleteClick: (e: any) => void;
  setSelectedId: (id: number | null) => void;
  initialTake?: number;
  useCustomSort?: boolean; // Para desktop que usa ordenação customizada
}
export const useDiario2Grid = ({
  data, 
  onRowClick, 
  onDeleteClick, 
  setSelectedId, 
  initialTake = 10, 
  useCustomSort = false
}: UseDiario2GridProps) => {
// ===== GERENCIAMENTO DE REORDENAÇÃO DE COLUNAS =====
const [columnsOrder, setColumnsOrder] = useState<string[]>([]);
// Definir ordem padrão das colunas
const defaultColumnsOrder = useMemo(() => [
  'data',
  'rnomeoperador',
  'nomeclientes',
  ], []);
  // Inicializar ordem das colunas se ainda não foi definida
  useEffect(() => {
    if (columnsOrder.length === 0) {
      setColumnsOrder(defaultColumnsOrder);
    }
  }, [columnsOrder.length, defaultColumnsOrder]);
  // Handler para reordenação de colunas do Telerik Grid
  const handleColumnsReorder = useCallback((event: any) => {

    // Filtrar apenas colunas reordenáveis (excluir index, edit, delete)
    const reorderableFields = event.columns
    .filter((col: any) =>
      col.field &&
      !['index', 'id_delete_row'].includes(col.field)
      )
      .map((col: any) => col.field);

      if (reorderableFields.length > 0 && JSON.stringify(reorderableFields) !== JSON.stringify(columnsOrder)) {

        setColumnsOrder(reorderableFields);

        // Persistir preferência no localStorage
        try {
          localStorage.setItem(btoa('diario2-columns-order'), JSON.stringify(reorderableFields));

        } catch (error) {

      }
    }

  }, [columnsOrder]);
  // Carregar ordem das colunas do localStorage na inicialização
  useEffect(() => {
    try {
      const savedOrder = localStorage.getItem(btoa('diario2-columns-order'));
      if (savedOrder) {
        const parsedOrder = JSON.parse(savedOrder);
        if (Array.isArray(parsedOrder) && parsedOrder.length > 0) {
          setColumnsOrder(parsedOrder);
        }
      }
    } catch (error) {
    console.warn('Não foi possível carregar a ordem das colunas:', error);
  }
}, []);
// ===== CONFIGURAÇÕES DE FILTROS =====
const initialFilters = useMemo(() => ({
  data: '',
}), []);
// Lógica de filtro customizada
const filterLogic = useCallback((data: IDiario2, filters: Record<string, any>) => {
  const dataMatches = applyFilter(data, 'data', filters.data);
  return dataMatches
  ;
}, []);
// Hook para filtros
const { columnFilters, filteredData, handleFilterChange } = useGridFilter({
  data, 
  initialFilters, 
  filterLogic, 
});
// ===== CONFIGURAÇÕES DE PAGINAÇÃO =====
const { page, handlePageChange } = useGridPagination({
  initialSkip: 0, 
  initialTake, 
});
// ===== CONFIGURAÇÕES DE ORDENAÇÃO =====
const initialSort: SortDescriptor[] = useMemo(() => [{ field: 'nome', dir: 'asc' }], []);

// Para mobile (usa useGridSort)
const { sort: mobileSort, sortedData: mobileSortedData, handleSortChange: mobileHandleSortChange } = useGridSort({
  data: filteredData, 
});
// Para desktop (usa ordenação customizada)
const [desktopSort, setDesktopSort] = useState<SortDescriptor[]>(initialSort);
// Função intermediária para o Grid do desktop
const handleDesktopSortChange = useCallback((e: { sort: SortDescriptor[] }) => {
  setDesktopSort(e.sort);
}, []);
// ===== COMPONENTES DE CÉLULAS COMPARTILHADOS =====
const RowNumberCell = useCallback((props: any) => <td>{props.dataIndex + 1}</td>, []);
// ===== HANDLERS COMPARTILHADOS =====
const handleRowClick = useCallback((e: any) => {
  onRowClick(e.dataItem);
}, [onRowClick]);
const DeleteRow = useCallback((e: any) => {
  return (
  <td>
    <span onClick={() => onDeleteClick(e)} title='Excluir item'><SvgIcon icon={trashIcon} /></span>
  </td>
);
}, [onDeleteClick]);
// ===== CONFIGURAÇÃO DE COLUNAS BASE E ORDENADAS =====
const baseColumns = useMemo(() => ([
  { key: 'RowNumberCell', component: RowNumberCell },
  { key: 'DeleteRow', component: DeleteRow },
  ]), [RowNumberCell, DeleteRow]);
  // Retorna as colunas na ordem definida pelo usuário (drag & drop)
  const orderedColumns = useMemo(() => {
    if (!columnsOrder || columnsOrder.length === 0) return baseColumns;
      // Ordena baseColumns conforme columnsOrder, mantendo extras no final
      const ordered = columnsOrder
      .map(key => baseColumns.find(col => col.key === key))
      .filter(Boolean);
      // Adiciona colunas que não estão em columnsOrder ao final
      const extras = baseColumns.filter(col => !columnsOrder.includes(col.key));
      return [...ordered, ...extras];
    }, [baseColumns, columnsOrder]);
    // Para compatibilidade, retorna função que devolve as colunas ordenadas
    const getBaseColumns = useCallback(() => orderedColumns, [orderedColumns]);
    // ===== DADOS PROCESSADOS =====
    const processedData = useMemo(() => {
      if (useCustomSort) {
        // Para desktop - usa ordenação customizada
        return filteredData;
      } else {
      // Para mobile - usa dados já ordenados pelo hook
      return mobileSortedData;
    }
  }, [useCustomSort, filteredData, mobileSortedData]);
  // Dados paginados
  const paginatedData = useMemo(() => {
    return processedData.slice(page.skip, page.skip + page.take);
  }, [processedData, page.skip, page.take]);
  // ===== CONFIGURAÇÕES DE GRID =====
  const gridConfig = useMemo(() => ({
    data: paginatedData, 
    skip: page.skip, 
    take: page.take, 
    total: processedData.length, 
    onPageChange: handlePageChange, 
    onFilterChange: handleFilterChange, 
    onRowClick: handleRowClick, 
    onColumnsReorder: handleColumnsReorder, 
    columnsOrder, 
  }), [paginatedData, page.skip, page.take, processedData.length, handlePageChange, handleFilterChange, handleRowClick, handleColumnsReorder, columnsOrder]);
  // ===== RETORNO DO HOOK =====
  return {
    // Dados processados
    filteredData, 
    processedData, 
    paginatedData, 

    // Configurações de filtro
    columnFilters, 
    handleFilterChange, 

    // Configurações de paginação
    page, 
    handlePageChange, 

    // Configurações de ordenação
    sort: useCustomSort ? desktopSort: mobileSort, 
    handleSortChange: useCustomSort ? handleDesktopSortChange: mobileHandleSortChange, 
    initialSort, 

    // Componentes de células
    RowNumberCell, 
    DeleteRow, 

    // Handlers
    handleRowClick, 

    // Reordenação de colunas
    columnsOrder, 
    handleColumnsReorder, 
    resetColumnsOrder: () => {

      setColumnsOrder(defaultColumnsOrder);
      localStorage.removeItem(btoa('diario2-columns-order'));
    }, 

    // Props originais (mantidos para compatibilidade)
    originalProps: {
      data, 
      onRowClick, 
      onDeleteClick, 
      setSelectedId, 
    }, 

    // Configurações do grid
    gridConfig, 

    // Utilitários
    getBaseColumns, 
    orderedColumns, 
  };
};