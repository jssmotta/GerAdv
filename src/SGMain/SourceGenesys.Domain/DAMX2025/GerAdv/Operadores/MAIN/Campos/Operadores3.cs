// 100% auto-generated by Source Genesys Core
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming 1
public partial class DBOperadores
{
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool pFldFEnviado, pFldFCasa, pFldFCasaID, pFldFCasaCodigo, pFldFIsNovo, pFldFCliente, pFldFGrupo, pFldFNome, pFldFEMail, pFldFSenha, pFldFAtivado, pFldFAtualizarSenha, pFldFSenha256, pFldFSuporteSenha256, pFldFSuporteMaxAge;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected int m_FCasaID, m_FCasaCodigo, m_FCliente, m_FGrupo;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected string? m_FNome, m_FEMail, m_FSenha, m_FSenha256, m_FSuporteSenha256;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected DateTime? m_FSuporteMaxAge;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool m_FEnviado, m_FCasa, m_FIsNovo, m_FAtivado, m_FAtualizarSenha;
    public virtual bool FEnviado
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEnviado;
        set
        {
            pFldFEnviado = pFldFEnviado || value != m_FEnviado;
            if (pFldFEnviado)
                m_FEnviado = value;
        }
    }

    public virtual bool FCasa
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCasa;
        set
        {
            pFldFCasa = pFldFCasa || value != m_FCasa;
            if (pFldFCasa)
                m_FCasa = value;
        }
    }

    public virtual int FCasaID
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCasaID;
        set
        {
            pFldFCasaID = pFldFCasaID || value != m_FCasaID;
            if (pFldFCasaID)
                m_FCasaID = value;
        }
    }

    public virtual int FCasaCodigo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCasaCodigo;
        set
        {
            pFldFCasaCodigo = pFldFCasaCodigo || value != m_FCasaCodigo;
            if (pFldFCasaCodigo)
                m_FCasaCodigo = value;
        }
    }

    public virtual bool FIsNovo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FIsNovo;
        set
        {
            pFldFIsNovo = pFldFIsNovo || value != m_FIsNovo;
            if (pFldFIsNovo)
                m_FIsNovo = value;
        }
    }

    public virtual int FCliente
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCliente;
        set
        {
            pFldFCliente = pFldFCliente || value != m_FCliente;
            if (pFldFCliente)
                m_FCliente = value;
        }
    }

    public virtual int FGrupo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FGrupo;
        set
        {
            pFldFGrupo = pFldFGrupo || value != m_FGrupo;
            if (pFldFGrupo)
                m_FGrupo = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(50, ErrorMessage = "A propriedade FNome da tabela Operadores deve ter no máximo 50 caracteres.")]
    public virtual string? FNome
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNome ?? string.Empty;
        set
        {
            pFldFNome = pFldFNome || !(m_FNome ?? string.Empty).Equals(value);
            if (pFldFNome)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FNome = trimmed.Length > 50 ? trimmed.AsSpan(0, 50).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(150, ErrorMessage = "A propriedade FEMail da tabela Operadores deve ter no máximo 150 caracteres.")]
    public virtual string? FEMail
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEMail ?? string.Empty;
        set
        {
            pFldFEMail = pFldFEMail || !(m_FEMail ?? string.Empty).Equals(value);
            if (pFldFEMail)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FEMail = trimmed.Length > 150 ? trimmed.AsSpan(0, 150).ToString() : trimmed;
                if (m_FEMail.IsValidEmail())
                    return;
                throw new ArgumentException("E-mail inválido ou não informado corretamente.", nameof(value));
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(10, ErrorMessage = "A propriedade FSenha da tabela Operadores deve ter no máximo 10 caracteres.")]
    public virtual string? FSenha
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FSenha ?? string.Empty;
        set
        {
            pFldFSenha = pFldFSenha || !(m_FSenha ?? string.Empty).Equals(value);
            if (pFldFSenha)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FSenha = trimmed.Length > 10 ? trimmed.AsSpan(0, 10).ToString() : trimmed;
            }
        }
    }

    public virtual bool FAtivado
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAtivado;
        set
        {
            pFldFAtivado = pFldFAtivado || value != m_FAtivado;
            if (pFldFAtivado)
                m_FAtivado = value;
        }
    }

    public virtual bool FAtualizarSenha
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAtualizarSenha;
        set
        {
            pFldFAtualizarSenha = pFldFAtualizarSenha || value != m_FAtualizarSenha;
            if (pFldFAtualizarSenha)
                m_FAtualizarSenha = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(4000, ErrorMessage = "A propriedade FSenha256 da tabela Operadores deve ter no máximo 4000 caracteres.")]
    public virtual string? FSenha256
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FSenha256 ?? string.Empty;
        set
        {
            pFldFSenha256 = pFldFSenha256 || !(m_FSenha256 ?? string.Empty).Equals(value);
            if (pFldFSenha256)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FSenha256 = trimmed.Length > 4000 ? trimmed.AsSpan(0, 4000).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(4000, ErrorMessage = "A propriedade FSuporteSenha256 da tabela Operadores deve ter no máximo 4000 caracteres.")]
    public virtual string? FSuporteSenha256
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FSuporteSenha256 ?? string.Empty;
        set
        {
            pFldFSuporteSenha256 = pFldFSuporteSenha256 || !(m_FSuporteSenha256 ?? string.Empty).Equals(value);
            if (pFldFSuporteSenha256)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FSuporteSenha256 = trimmed.Length > 4000 ? trimmed.AsSpan(0, 4000).ToString() : trimmed;
            }
        }
    }

    public virtual string? FSuporteMaxAge
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FSuporteMaxAge is null || m_FSuporteMaxAge == DevourerOne.DDataZerada ? string.Empty : m_FSuporteMaxAge.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFSuporteMaxAge, m_FSuporteMaxAge, value)is not (true, var changed, var data))
                return;
            (pFldFSuporteMaxAge, m_FSuporteMaxAge) = (changed, data);
        }
    }

    public void SetAuditor(int usuarioId) => AuditorQuem = usuarioId;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITabelaName() => PTabelaNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoCodigo() => CampoCodigo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoNome() => CampoNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string IPrefixo() => PTabelaPrefixo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITypeFieldCode() => "int";
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IdIsIdentity() => false;
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetID() => ID;
}