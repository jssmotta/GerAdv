// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface ILivroCaixaClientesValidation
{
    Task<bool> ValidateReg(Models.LivroCaixaClientes reg, ILivroCaixaClientesService service, ILivroCaixaReader livrocaixaReader, IClientesReader clientesReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, ILivroCaixaClientesService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class LivroCaixaClientesValidation : ILivroCaixaClientesValidation
{
    public async Task<bool> CanDelete(int id, ILivroCaixaClientesService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.LivroCaixaClientes reg)
    {
        return true;
    }

    public async Task<bool> ValidateReg(Models.LivroCaixaClientes reg, ILivroCaixaClientesService service, ILivroCaixaReader livrocaixaReader, IClientesReader clientesReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.LivroCaixa == 0)
            throw new SGValidationException("LivroCaixa é obrigatório.");
        if (reg.Cliente == 0)
            throw new SGValidationException("Cliente é obrigatório.");
        // LivroCaixa
        {
            var regLivroCaixa = await livrocaixaReader.Read(reg.LivroCaixa, oCnn);
            if (regLivroCaixa == null || regLivroCaixa.Id != reg.LivroCaixa)
            {
                throw new SGValidationException($"Livro Caixa não encontrado ({regLivroCaixa?.Id}).");
            }
        }

        // Clientes
        {
            var regClientes = await clientesReader.Read(reg.Cliente, oCnn);
            if (regClientes == null || regClientes.Id != reg.Cliente)
            {
                throw new SGValidationException($"Clientes não encontrado ({regClientes?.Id}).");
            }
        }

        return true;
    }
}