// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class PontoVirtualService
{
    private (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterPontoVirtual filtro)
    {
        var parameters = new List<SqlParameter>();
        if (!filtro.HoraEntrada.IsEmptyDX())
        {
            if (DateTime.TryParse(filtro.HoraEntrada, out var dataParam))
                parameters.Add(new($"@{nameof(DBPontoVirtualDicInfo.HoraEntrada)}", dataParam));
        }

        if (!filtro.HoraEntrada_end.IsEmptyDX())
        {
            if (DateTime.TryParse(filtro.HoraEntrada_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBPontoVirtualDicInfo.HoraEntrada)}_end", dataParam));
        }

        if (!filtro.HoraSaida.IsEmptyDX())
        {
            if (DateTime.TryParse(filtro.HoraSaida, out var dataParam))
                parameters.Add(new($"@{nameof(DBPontoVirtualDicInfo.HoraSaida)}", dataParam));
        }

        if (!filtro.HoraSaida_end.IsEmptyDX())
        {
            if (DateTime.TryParse(filtro.HoraSaida_end, out var dataParam))
                parameters.Add(new($"@{nameof(DBPontoVirtualDicInfo.HoraSaida)}_end", dataParam));
        }

        if (filtro.Operador != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBPontoVirtualDicInfo.Operador)}", filtro.Operador));
        }

        if (!string.IsNullOrEmpty(filtro.Key))
        {
            parameters.Add(new($"@{nameof(DBPontoVirtualDicInfo.Key)}", ApplyWildCard(filtro.WildcardChar, filtro.Key)));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBPontoVirtualDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
        }

        if (filtro.Codigo_filtro_end != int.MinValue)
        {
            parameters.Add(new($"@{nameof(DBPontoVirtualDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
        }

        if (filtro.LogicalOperator.IsEmptyX() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        if (!(filtro.HoraEntrada.IsEmptyDX()) && filtro.HoraEntrada_end.IsEmptyDX())
        {
            cWhere.Append(filtro.HoraEntrada.IsEmptyDX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBPontoVirtualDicInfo.PTabelaNome}].[{DBPontoVirtualDicInfo.HoraEntrada}], 103) = CONVERT(DATE, @{nameof(DBPontoVirtualDicInfo.HoraEntrada)}, 103)");
        }
        else if (!(filtro.HoraEntrada.IsEmptyDX()) && !(filtro.HoraEntrada_end.IsEmptyDX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBPontoVirtualDicInfo.PTabelaNome}].{DBPontoVirtualDicInfo.HoraEntrada} BETWEEN @{nameof(DBPontoVirtualDicInfo.HoraEntrada)} AND @{nameof(DBPontoVirtualDicInfo.HoraEntrada)}_end");
        }

        if (!(filtro.HoraSaida.IsEmptyDX()) && filtro.HoraSaida_end.IsEmptyDX())
        {
            cWhere.Append(filtro.HoraSaida.IsEmptyDX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBPontoVirtualDicInfo.PTabelaNome}].[{DBPontoVirtualDicInfo.HoraSaida}], 103) = CONVERT(DATE, @{nameof(DBPontoVirtualDicInfo.HoraSaida)}, 103)");
        }
        else if (!(filtro.HoraSaida.IsEmptyDX()) && !(filtro.HoraSaida_end.IsEmptyDX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBPontoVirtualDicInfo.PTabelaNome}].{DBPontoVirtualDicInfo.HoraSaida} BETWEEN @{nameof(DBPontoVirtualDicInfo.HoraSaida)} AND @{nameof(DBPontoVirtualDicInfo.HoraSaida)}_end");
        }

        cWhere.Append(filtro.Operador.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBPontoVirtualDicInfo.PTabelaNome}].[{DBPontoVirtualDicInfo.Operador}] = @{nameof(DBPontoVirtualDicInfo.Operador)}");
        cWhere.Append(filtro.Key.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBPontoVirtualDicInfo.PTabelaNome}].[{DBPontoVirtualDicInfo.Key}]  {DevourerConsts.MsiCollate} like @{nameof(DBPontoVirtualDicInfo.Key)}");
        if (!(filtro.Codigo_filtro.IsEmptyX()) && filtro.Codigo_filtro_end.IsEmptyX())
        {
            cWhere.Append(filtro.Codigo_filtro.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBPontoVirtualDicInfo.PTabelaNome}].[{DBPontoVirtualDicInfo.CampoCodigo}] = @{nameof(DBPontoVirtualDicInfo.CampoCodigo)}");
        }
        else if (!(filtro.Codigo_filtro.IsEmptyX()) && !(filtro.Codigo_filtro_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBPontoVirtualDicInfo.PTabelaNome}].{DBPontoVirtualDicInfo.CampoCodigo} BETWEEN @{nameof(DBPontoVirtualDicInfo.CampoCodigo)} AND @{nameof(DBPontoVirtualDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private string ApplyWildCard(char wildcardChar, string value)
    {
        if (wildcardChar == '\0' || wildcardChar == ' ')
        {
            return value;
        }

        var result = $"{wildcardChar}{value.Replace(" ", wildcardChar.ToString())}{wildcardChar}";
        return result;
    }

    private string GetFilterHash(Filters.FilterPontoVirtual? filtro)
    {
        if (filtro == null)
            return string.Empty;
        var json = JsonSerializer.Serialize(filtro);
        using var sha256 = SHA256.Create();
        var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(json));
        return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
    }

    private async Task<IEnumerable<PontoVirtualResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}