// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Readers;
public partial class ClientesSociosReader(IFClientesSociosFactory clientessociosFactory) : IClientesSociosReader
{
    private readonly IFClientesSociosFactory _clientessociosFactory = clientessociosFactory ?? throw new ArgumentNullException();
    public async Task<IEnumerable<DBNomeID>> ListarN(int max, string uri, string cWhere, List<SqlParameter>? parameters, string order) => await DevourerSqlData.ListarNomeID(BuildSqlQuery("cscCodigo, cscNome", cWhere, order, max), parameters, uri, caching: false, max: max);
    public async Task<IEnumerable<ClientesSociosResponseAll>> Listar(int max, string uri, string cWhere, List<SqlParameter>? parameters, string order, CancellationToken cancellationToken) => await ListarTabela(BuildSqlQuery(DBClientesSocios.CamposSqlX, cWhere, order, max), parameters, uri, caching: false, max: max, cancellationToken: cancellationToken);
    private async Task<IEnumerable<ClientesSociosResponseAll>> ListarTabela(string sql, List<SqlParameter>? parameters, string uri, bool caching = false, int max = 200, CancellationToken cancellationToken = default)
    {
        var result = new List<ClientesSociosResponseAll>(max);
        await using var connection = Configuracoes.GetConnectionByUri(uri);
        await using var cmd = new SqlCommand(cmdText: ConfiguracoesDBT.CmdSql(sql), connection: connection?.InnerConnection)
        {
            CommandTimeout = 30
        };
        foreach (var param in parameters)
        {
            if (!cmd.Parameters.Contains(param.ParameterName))
            {
                var newParam = new SqlParameter(param.ParameterName, param.Value)
                {
                    SqlDbType = param.SqlDbType,
                    Direction = param.Direction,
                    Size = param.Size,
                    Precision = param.Precision,
                    Scale = param.Scale
                };
                cmd.Parameters.Add(newParam);
            }
        }

        await using var reader = await cmd.ExecuteReaderAsync(CommandBehavior.SingleResult);
        while (await reader.ReadAsync())
        {
            if (cancellationToken.IsCancellationRequested)
                return result;
            result.Add(ReadAll(_clientessociosFactory.CreateFromReader(reader), reader)!);
        }

        return result;
    }

    public async Task<ClientesSociosResponse?> Read(int id, MsiSqlConnection? oCnn)
    {
        using var dbRec = await _clientessociosFactory.CreateFromIdAsync(id, oCnn);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public async Task<Models.ClientesSocios?> ReadM(int id, MsiSqlConnection? oCnn)
    {
        using var dbRec = await _clientessociosFactory.CreateFromIdAsync(id, oCnn);
        var clientessocios = new Models.ClientesSocios
        {
            Id = dbRec.ID,
            SomenteRepresentante = dbRec.FSomenteRepresentante,
            GUID = dbRec.FGUID ?? string.Empty,
            Idade = dbRec.FIdade,
            IsRepresentanteLegal = dbRec.FIsRepresentanteLegal,
            Qualificacao = dbRec.FQualificacao ?? string.Empty,
            Sexo = dbRec.FSexo,
            Nome = dbRec.FNome ?? string.Empty,
            Site = dbRec.FSite ?? string.Empty,
            RepresentanteLegal = dbRec.FRepresentanteLegal ?? string.Empty,
            Cliente = dbRec.FCliente,
            Endereco = dbRec.FEndereco ?? string.Empty,
            Bairro = dbRec.FBairro ?? string.Empty,
            CEP = dbRec.FCEP?.MaskCep() ?? string.Empty,
            Cidade = dbRec.FCidade,
            RG = dbRec.FRG ?? string.Empty,
            CPF = dbRec.FCPF?.MaskCpf() ?? string.Empty,
            Fone = dbRec.FFone ?? string.Empty,
            Participacao = dbRec.FParticipacao ?? string.Empty,
            Cargo = dbRec.FCargo ?? string.Empty,
            EMail = dbRec.FEMail ?? string.Empty,
            Obs = dbRec.FObs ?? string.Empty,
            CNH = dbRec.FCNH ?? string.Empty,
            CNPJ = dbRec.FCNPJ?.MaskCnpj() ?? string.Empty,
            InscEst = dbRec.FInscEst ?? string.Empty,
            SocioEmpresaAdminNome = dbRec.FSocioEmpresaAdminNome ?? string.Empty,
            EnderecoSocio = dbRec.FEnderecoSocio ?? string.Empty,
            BairroSocio = dbRec.FBairroSocio ?? string.Empty,
            CEPSocio = dbRec.FCEPSocio ?? string.Empty,
            CidadeSocio = dbRec.FCidadeSocio,
            SocioEmpresaAdminSomente = dbRec.FSocioEmpresaAdminSomente,
            Tipo = dbRec.FTipo,
            Fax = dbRec.FFax ?? string.Empty,
            Class = dbRec.FClass ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDtNasc, out DateTime XDtNasc))
        {
            clientessocios.DtNasc = dbRec.FDtNasc;
            clientessocios.DtNasc_date = XDtNasc;
        }

        if (DateTime.TryParse(dbRec.FDataContrato, out DateTime XDataContrato))
        {
            clientessocios.DataContrato = dbRec.FDataContrato;
            clientessocios.DataContrato_date = XDataContrato;
        }

        if (DateTime.TryParse(dbRec.FRGDataExp, out DateTime XRGDataExp))
        {
            clientessocios.RGDataExp = dbRec.FRGDataExp;
            clientessocios.RGDataExp_date = XRGDataExp;
        }

        return clientessocios;
    }

    public ClientesSociosResponse? Read(FClientesSocios dbRec, MsiSqlConnection? oCnn)
    {
        return Read(dbRec);
    }

    public ClientesSociosResponse? Read(string where, List<SqlParameter>? parameters, MsiSqlConnection? oCnn)
    {
        using var dbRec = _clientessociosFactory.CreateFromParameters(parameters, oCnn, sqlWhere: where);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public ClientesSociosResponse? Read(FClientesSocios dbRec) // Track 001.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var clientessocios = new ClientesSociosResponse
        {
            Id = dbRec.ID,
            SomenteRepresentante = dbRec.FSomenteRepresentante,
            GUID = dbRec.FGUID ?? string.Empty,
            Idade = dbRec.FIdade,
            IsRepresentanteLegal = dbRec.FIsRepresentanteLegal,
            Qualificacao = dbRec.FQualificacao ?? string.Empty,
            Sexo = dbRec.FSexo,
            Nome = dbRec.FNome ?? string.Empty,
            Site = dbRec.FSite ?? string.Empty,
            RepresentanteLegal = dbRec.FRepresentanteLegal ?? string.Empty,
            Cliente = dbRec.FCliente,
            Endereco = dbRec.FEndereco ?? string.Empty,
            Bairro = dbRec.FBairro ?? string.Empty,
            CEP = dbRec.FCEP?.MaskCep() ?? string.Empty,
            Cidade = dbRec.FCidade,
            RG = dbRec.FRG ?? string.Empty,
            CPF = dbRec.FCPF?.MaskCpf() ?? string.Empty,
            Fone = dbRec.FFone ?? string.Empty,
            Participacao = dbRec.FParticipacao ?? string.Empty,
            Cargo = dbRec.FCargo ?? string.Empty,
            EMail = dbRec.FEMail ?? string.Empty,
            Obs = dbRec.FObs ?? string.Empty,
            CNH = dbRec.FCNH ?? string.Empty,
            CNPJ = dbRec.FCNPJ?.MaskCnpj() ?? string.Empty,
            InscEst = dbRec.FInscEst ?? string.Empty,
            SocioEmpresaAdminNome = dbRec.FSocioEmpresaAdminNome ?? string.Empty,
            EnderecoSocio = dbRec.FEnderecoSocio ?? string.Empty,
            BairroSocio = dbRec.FBairroSocio ?? string.Empty,
            CEPSocio = dbRec.FCEPSocio ?? string.Empty,
            CidadeSocio = dbRec.FCidadeSocio,
            SocioEmpresaAdminSomente = dbRec.FSocioEmpresaAdminSomente,
            Tipo = dbRec.FTipo,
            Fax = dbRec.FFax ?? string.Empty,
            Class = dbRec.FClass ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDtNasc, out DateTime XDtNasc))
        {
            clientessocios.DtNasc = dbRec.FDtNasc;
            clientessocios.DtNasc_date = XDtNasc;
        }

        if (DateTime.TryParse(dbRec.FDataContrato, out DateTime XDataContrato))
        {
            clientessocios.DataContrato = dbRec.FDataContrato;
            clientessocios.DataContrato_date = XDataContrato;
        }

        if (DateTime.TryParse(dbRec.FRGDataExp, out DateTime XRGDataExp))
        {
            clientessocios.RGDataExp = dbRec.FRGDataExp;
            clientessocios.RGDataExp_date = XRGDataExp;
        }

        return clientessocios;
    }

    public ClientesSociosResponse? Read(SG.GerAdv.DBClientesSocios dbRec) // Track 002.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var clientessocios = new ClientesSociosResponse
        {
            Id = dbRec.ID,
            SomenteRepresentante = dbRec.FSomenteRepresentante,
            GUID = dbRec.FGUID ?? string.Empty,
            Idade = dbRec.FIdade,
            IsRepresentanteLegal = dbRec.FIsRepresentanteLegal,
            Qualificacao = dbRec.FQualificacao ?? string.Empty,
            Sexo = dbRec.FSexo,
            Nome = dbRec.FNome ?? string.Empty,
            Site = dbRec.FSite ?? string.Empty,
            RepresentanteLegal = dbRec.FRepresentanteLegal ?? string.Empty,
            Cliente = dbRec.FCliente,
            Endereco = dbRec.FEndereco ?? string.Empty,
            Bairro = dbRec.FBairro ?? string.Empty,
            CEP = dbRec.FCEP?.MaskCep() ?? string.Empty,
            Cidade = dbRec.FCidade,
            RG = dbRec.FRG ?? string.Empty,
            CPF = dbRec.FCPF?.MaskCpf() ?? string.Empty,
            Fone = dbRec.FFone ?? string.Empty,
            Participacao = dbRec.FParticipacao ?? string.Empty,
            Cargo = dbRec.FCargo ?? string.Empty,
            EMail = dbRec.FEMail ?? string.Empty,
            Obs = dbRec.FObs ?? string.Empty,
            CNH = dbRec.FCNH ?? string.Empty,
            CNPJ = dbRec.FCNPJ?.MaskCnpj() ?? string.Empty,
            InscEst = dbRec.FInscEst ?? string.Empty,
            SocioEmpresaAdminNome = dbRec.FSocioEmpresaAdminNome ?? string.Empty,
            EnderecoSocio = dbRec.FEnderecoSocio ?? string.Empty,
            BairroSocio = dbRec.FBairroSocio ?? string.Empty,
            CEPSocio = dbRec.FCEPSocio ?? string.Empty,
            CidadeSocio = dbRec.FCidadeSocio,
            SocioEmpresaAdminSomente = dbRec.FSocioEmpresaAdminSomente,
            Tipo = dbRec.FTipo,
            Fax = dbRec.FFax ?? string.Empty,
            Class = dbRec.FClass ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDtNasc, out DateTime XDtNasc))
        {
            clientessocios.DtNasc = dbRec.FDtNasc;
            clientessocios.DtNasc_date = XDtNasc;
        }

        if (DateTime.TryParse(dbRec.FDataContrato, out DateTime XDataContrato))
        {
            clientessocios.DataContrato = dbRec.FDataContrato;
            clientessocios.DataContrato_date = XDataContrato;
        }

        if (DateTime.TryParse(dbRec.FRGDataExp, out DateTime XRGDataExp))
        {
            clientessocios.RGDataExp = dbRec.FRGDataExp;
            clientessocios.RGDataExp_date = XRGDataExp;
        }

        return clientessocios;
    }

    public ClientesSociosResponseAll? ReadAll(FClientesSocios dbRec, IDataRecord dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var clientessocios = new ClientesSociosResponseAll
        {
            Id = dbRec.ID,
            SomenteRepresentante = dbRec.FSomenteRepresentante,
            GUID = dbRec.FGUID ?? string.Empty,
            Idade = dbRec.FIdade,
            IsRepresentanteLegal = dbRec.FIsRepresentanteLegal,
            Qualificacao = dbRec.FQualificacao ?? string.Empty,
            Sexo = dbRec.FSexo,
            Nome = dbRec.FNome ?? string.Empty,
            Site = dbRec.FSite ?? string.Empty,
            RepresentanteLegal = dbRec.FRepresentanteLegal ?? string.Empty,
            Cliente = dbRec.FCliente,
            Endereco = dbRec.FEndereco ?? string.Empty,
            Bairro = dbRec.FBairro ?? string.Empty,
            CEP = dbRec.FCEP?.MaskCep() ?? string.Empty,
            Cidade = dbRec.FCidade,
            RG = dbRec.FRG ?? string.Empty,
            CPF = dbRec.FCPF?.MaskCpf() ?? string.Empty,
            Fone = dbRec.FFone ?? string.Empty,
            Participacao = dbRec.FParticipacao ?? string.Empty,
            Cargo = dbRec.FCargo ?? string.Empty,
            EMail = dbRec.FEMail ?? string.Empty,
            Obs = dbRec.FObs ?? string.Empty,
            CNH = dbRec.FCNH ?? string.Empty,
            CNPJ = dbRec.FCNPJ?.MaskCnpj() ?? string.Empty,
            InscEst = dbRec.FInscEst ?? string.Empty,
            SocioEmpresaAdminNome = dbRec.FSocioEmpresaAdminNome ?? string.Empty,
            EnderecoSocio = dbRec.FEnderecoSocio ?? string.Empty,
            BairroSocio = dbRec.FBairroSocio ?? string.Empty,
            CEPSocio = dbRec.FCEPSocio ?? string.Empty,
            CidadeSocio = dbRec.FCidadeSocio,
            SocioEmpresaAdminSomente = dbRec.FSocioEmpresaAdminSomente,
            Tipo = dbRec.FTipo,
            Fax = dbRec.FFax ?? string.Empty,
            Class = dbRec.FClass ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDtNasc, out DateTime XDtNasc))
        {
            clientessocios.DtNasc = dbRec.FDtNasc;
            clientessocios.DtNasc_date = XDtNasc;
        }

        if (DateTime.TryParse(dbRec.FDataContrato, out DateTime XDataContrato))
        {
            clientessocios.DataContrato = dbRec.FDataContrato;
            clientessocios.DataContrato_date = XDataContrato;
        }

        if (DateTime.TryParse(dbRec.FRGDataExp, out DateTime XRGDataExp))
        {
            clientessocios.RGDataExp = dbRec.FRGDataExp;
            clientessocios.RGDataExp_date = XRGDataExp;
        }

        try
        {
            clientessocios.NomeClientes = dr[DBClientesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            clientessocios.NomeCidade = dr[DBCidadeDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return clientessocios;
    }

    public ClientesSociosResponseAll? ReadAll(SG.GerAdv.DBClientesSocios dbRec, DataRow dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var clientessocios = new ClientesSociosResponseAll
        {
            Id = dbRec.ID,
            SomenteRepresentante = dbRec.FSomenteRepresentante,
            GUID = dbRec.FGUID ?? string.Empty,
            Idade = dbRec.FIdade,
            IsRepresentanteLegal = dbRec.FIsRepresentanteLegal,
            Qualificacao = dbRec.FQualificacao ?? string.Empty,
            Sexo = dbRec.FSexo,
            Nome = dbRec.FNome ?? string.Empty,
            Site = dbRec.FSite ?? string.Empty,
            RepresentanteLegal = dbRec.FRepresentanteLegal ?? string.Empty,
            Cliente = dbRec.FCliente,
            Endereco = dbRec.FEndereco ?? string.Empty,
            Bairro = dbRec.FBairro ?? string.Empty,
            CEP = dbRec.FCEP?.MaskCep() ?? string.Empty,
            Cidade = dbRec.FCidade,
            RG = dbRec.FRG ?? string.Empty,
            CPF = dbRec.FCPF?.MaskCpf() ?? string.Empty,
            Fone = dbRec.FFone ?? string.Empty,
            Participacao = dbRec.FParticipacao ?? string.Empty,
            Cargo = dbRec.FCargo ?? string.Empty,
            EMail = dbRec.FEMail ?? string.Empty,
            Obs = dbRec.FObs ?? string.Empty,
            CNH = dbRec.FCNH ?? string.Empty,
            CNPJ = dbRec.FCNPJ?.MaskCnpj() ?? string.Empty,
            InscEst = dbRec.FInscEst ?? string.Empty,
            SocioEmpresaAdminNome = dbRec.FSocioEmpresaAdminNome ?? string.Empty,
            EnderecoSocio = dbRec.FEnderecoSocio ?? string.Empty,
            BairroSocio = dbRec.FBairroSocio ?? string.Empty,
            CEPSocio = dbRec.FCEPSocio ?? string.Empty,
            CidadeSocio = dbRec.FCidadeSocio,
            SocioEmpresaAdminSomente = dbRec.FSocioEmpresaAdminSomente,
            Tipo = dbRec.FTipo,
            Fax = dbRec.FFax ?? string.Empty,
            Class = dbRec.FClass ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDtNasc, out DateTime XDtNasc))
        {
            clientessocios.DtNasc = dbRec.FDtNasc;
            clientessocios.DtNasc_date = XDtNasc;
        }

        if (DateTime.TryParse(dbRec.FDataContrato, out DateTime XDataContrato))
        {
            clientessocios.DataContrato = dbRec.FDataContrato;
            clientessocios.DataContrato_date = XDataContrato;
        }

        if (DateTime.TryParse(dbRec.FRGDataExp, out DateTime XRGDataExp))
        {
            clientessocios.RGDataExp = dbRec.FRGDataExp;
            clientessocios.RGDataExp_date = XRGDataExp;
        }

        try
        {
            clientessocios.NomeClientes = dr[DBClientesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            clientessocios.NomeCidade = dr[DBCidadeDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return clientessocios;
    }
}