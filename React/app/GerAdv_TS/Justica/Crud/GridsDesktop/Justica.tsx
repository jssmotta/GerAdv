// 100% auto-generated by Source Genesys WebApi Front & Back Creator
                     // copyright © 2000-2025 Menphis - Sistemas Inteligentes
                     // This file is part of the Source Genesys project                     
                    // GridsDesktop.tsx - Versão Refatorada
'use client';
import React, { useMemo, useCallback, useState } from 'react';
import {
  Grid, 
  GridColumn, 
  GridSortChangeEvent, 
} from '@progress/kendo-react-grid';
import { useSystemContext } from '@/app/context/SystemContext';
import { IJustica } from '../../Interfaces/interface.Justica';
import { useRouter } from 'next/navigation';
import { applyFilter, CRUD_CONSTANTS, formatCurrency, formatDateBrowser } from '@/app/tools/crud';
import { SvgIcon } from '@progress/kendo-react-common';
import { useHiddenColumns } from '@/app/hooks/useHiddenColumns';
import { GridColumnMenu } from '@/app/components/Cruds/GridColumnMenu';
import { useGridFilter } from '@/app/hooks/useGridFilter';
import { useGridPagination } from '@/app/hooks/useGridPagination';
import { getExportColumns, useExportToExcel } from '@/app/hooks/useExportToExcel';
import { getExportColumnsPdf, useExportToPdf } from '@/app/hooks/useExportToPdf';
import { fileExcelIcon, filePdfIcon, pencilIcon, trashIcon, searchIcon } from '@progress/kendo-svg-icons';
import { orderBy, SortDescriptor } from '@progress/kendo-data-query';
import { Button } from '@progress/kendo-react-buttons';
import { ExportButtons } from '@/app/components/Cruds/ExportButtons';
interface JusticaGridProps {
  data: IJustica[];
  onRowClick: (justica: IJustica) => void;
  onDeleteClick: (e: any) => void;
  setSelectedId: (id: number | null) => void;
}
export const JusticaGridDesktopComponent = React.memo(
({
  data, 
  onRowClick, 
  onDeleteClick, 
  setSelectedId, 

}: JusticaGridProps) => {
const router = useRouter();
const { systemContext } = useSystemContext();
const RowNumberCell = (props: any) => <td>{props.dataIndex + 1}</td>;
// Hook para paginação
const { page, handlePageChange } = useGridPagination({
  initialSkip: 0, 
  initialTake: 10, 
});
// Configuração dos filtros iniciais
const initialFilters = {
  nome: '',
};
// Lógica de filtro customizada usando useCallback
const filterLogic = useCallback((data: IJustica, filters: Record<string, any>) => {
  const nomeMatches = applyFilter(data, 'nome', filters.nome);
  return nomeMatches
  ;
}, []);
// Hook para filtros
const { columnFilters, filteredData, handleFilterChange } = useGridFilter({
  data, 
  initialFilters, 
  filterLogic, 
});
const initialSort: SortDescriptor[] = [{ field: 'nome', dir: 'asc' }];
const [sort, setSort] = useState<SortDescriptor[]>(initialSort);
// Direct use of Kendo orderBy with native Date objects
const sortedData = orderBy(filteredData, sort);
const handleSortChange = (event: GridSortChangeEvent) => {
  setSort(event.sort);
};
const handleRowClick = (e: any) => {
  onRowClick(e.dataItem);
};

const openSearchCellAcao = (id: number) => {
  router.push(`/pages/acao/?justica=${id}`);
};
const SearchFromCellAcao = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellAcao(props.dataItem.id)}><span title='Pesquisar relacionados em Acao'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellAgenda = (id: number) => {
  router.push(`/pages/agenda/?justica=${id}`);
};
const SearchFromCellAgenda = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellAgenda(props.dataItem.id)}><span title='Pesquisar relacionados em Compromisso'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellAgendaFinanceiro = (id: number) => {
  router.push(`/pages/agendafinanceiro/?justica=${id}`);
};
const SearchFromCellAgendaFinanceiro = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellAgendaFinanceiro(props.dataItem.id)}><span title='Pesquisar relacionados em Agenda Financeiro'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellAreasJustica = (id: number) => {
  router.push(`/pages/areasjustica/?justica=${id}`);
};
const SearchFromCellAreasJustica = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellAreasJustica(props.dataItem.id)}><span title='Pesquisar relacionados em Areas Justica'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellDivisaoTribunal = (id: number) => {
  router.push(`/pages/divisaotribunal/?justica=${id}`);
};
const SearchFromCellDivisaoTribunal = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellDivisaoTribunal(props.dataItem.id)}><span title='Pesquisar relacionados em Divisao Tribunal'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellFase = (id: number) => {
  router.push(`/pages/fase/?justica=${id}`);
};
const SearchFromCellFase = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellFase(props.dataItem.id)}><span title='Pesquisar relacionados em Fase'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellObjetos = (id: number) => {
  router.push(`/pages/objetos/?justica=${id}`);
};
const SearchFromCellObjetos = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellObjetos(props.dataItem.id)}><span title='Pesquisar relacionados em Objetos'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellPoderJudiciarioAssociado = (id: number) => {
  router.push(`/pages/poderjudiciarioassociado/?justica=${id}`);
};
const SearchFromCellPoderJudiciarioAssociado = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellPoderJudiciarioAssociado(props.dataItem.id)}><span title='Pesquisar relacionados em Poder Judiciario Associado'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellProcessos = (id: number) => {
  router.push(`/pages/processos/?justica=${id}`);
};
const SearchFromCellProcessos = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellProcessos(props.dataItem.id)}><span title='Pesquisar relacionados em Processos'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellTipoRecurso = (id: number) => {
  router.push(`/pages/tiporecurso/?justica=${id}`);
};
const SearchFromCellTipoRecurso = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellTipoRecurso(props.dataItem.id)}><span title='Pesquisar relacionados em Tipo Recurso'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};
const openSearchCellTribunal = (id: number) => {
  router.push(`/pages/tribunal/?justica=${id}`);
};
const SearchFromCellTribunal = (props: any) => {
  return (
  <>
  <td>
    <div onClick={() => openSearchCellTribunal(props.dataItem.id)}><span title='Pesquisar relacionados em Tribunal'><SvgIcon icon={searchIcon} /></span></div>
  </td>
</>
);
};

const DeleteRow = (e: any) => {
  return (
  <td>
    <span onClick={() => onDeleteClick(e) } title='Excluit item' ><SvgIcon icon={trashIcon} /></span>
  </td>
);
};
const EditRow = (e: any) => {
  return (
  <td>
    <span onClick={() => handleRowClick(e)} title='Editar item' ><SvgIcon icon={pencilIcon} /></span>
  </td>
);
};
const gridColumns = useMemo(() => [
  <GridColumn format='{0:n0}' field='index' title='#' sortable={false} filterable={false} width='55px' cells={{ data: RowNumberCell }} />,
  <GridColumn format='{0:n0}' hidden={true}  field='id' title='Código' sortable={true} filterable={true} width='55px' />,
  <GridColumn field='nome' title='Nome' sortable={true} filterable={true} />, /* Track G.02 */
  <GridColumn
  field='id_edit_Acao'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Acao'
  cells={{ data: SearchFromCellAcao }}
  />, 
  <GridColumn
  field='id_edit_Agenda'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Compromisso'
  cells={{ data: SearchFromCellAgenda }}
  />, 
  <GridColumn
  field='id_edit_AgendaFinanceiro'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Agenda Financeiro'
  cells={{ data: SearchFromCellAgendaFinanceiro }}
  />, 
  <GridColumn
  field='id_edit_AreasJustica'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Areas Justica'
  cells={{ data: SearchFromCellAreasJustica }}
  />, 
  <GridColumn
  field='id_edit_DivisaoTribunal'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Divisao Tribunal'
  cells={{ data: SearchFromCellDivisaoTribunal }}
  />, 
  <GridColumn
  field='id_edit_Fase'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Fase'
  cells={{ data: SearchFromCellFase }}
  />, 
  <GridColumn
  field='id_edit_Objetos'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Objetos'
  cells={{ data: SearchFromCellObjetos }}
  />, 
  <GridColumn
  field='id_edit_PoderJudiciarioAssociado'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Poder Judiciario Associado'
  cells={{ data: SearchFromCellPoderJudiciarioAssociado }}
  />, 
  <GridColumn
  field='id_edit_Processos'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Processos'
  cells={{ data: SearchFromCellProcessos }}
  />, 
  <GridColumn
  field='id_edit_TipoRecurso'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Tipo Recurso'
  cells={{ data: SearchFromCellTipoRecurso }}
  />, 
  <GridColumn
  field='id_edit_Tribunal'
  filterable={false}
  sortable={false}
  width={'65px'}
  title='Tribunal'
  cells={{ data: SearchFromCellTribunal }}
  />, 

  <GridColumn
  field='id_edit_row'
  width={'55px'}
  title='Editar registro'
  sortable={false} filterable={false}
  cells={{ data: EditRow }} />, 
  <GridColumn
  field='id_delete_row'
  width={'55px'}
  title='Excluir registro'
  sortable={false} filterable={false}
  cells={{ data: DeleteRow }} />
  ], []);
  // Hook customizado para gerenciar colunas ocultas
  const {
    columnsState, 
    syncedGridColumns, 
    initialized, 
    handleColumnsStateChange
  } = useHiddenColumns({
  gridColumns, 
  systemContextId: systemContext?.Id, 
  tableName: 'justica'
});
// Componente do menu de colunas
const columnMenuComponent = GridColumnMenu({
  columnsState, 
  onColumnsStateChange: handleColumnsStateChange
});

return (
<>
{initialized && (
  <Grid
  columnMenu={columnMenuComponent}
  columnsState={columnsState}
  className='grid-desktop-crud grid-desktop-justica'
  data={sortedData.slice(page.skip, page.skip + page.take)}
  skip={page.skip}
  take={page.take}
  total={sortedData.length}
  pageable={{
    pageSizes: Array.from(CRUD_CONSTANTS.PAGINATION.PAGE_SIZES), 
    buttonCount: CRUD_CONSTANTS.PAGINATION.BUTTON_COUNT, 
  }}
  onPageChange={handlePageChange}
  rowReorderable={true}
  sortable={true}
  sort={sort}
  onSortChange={handleSortChange}
  resizable={true}
  reorderable={true}
  filterable={true}
  onFilterChange={handleFilterChange}
  onRowDoubleClick={(e) => handleRowClick(e)}>
  {syncedGridColumns}
</Grid>
)}
<div style={{ marginTop: '10px' }}>

</div>
</>
);
}
);