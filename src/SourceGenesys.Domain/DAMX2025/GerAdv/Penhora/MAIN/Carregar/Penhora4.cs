// 100% auto-generated by Source Genesys Core
// copyright Â© 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming
public partial class DBPenhora
{
    public DBPenhora(DataRow? dbRec)
    {
        if (dbRec is null)
            return;
        InitFromRecord(name =>
        {
            try
            {
                return dbRec[name];
            }
            catch
            {
                return DBNull.Value;
            }
        });
    }

    public DBPenhora(SqlDataReader? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do Penhora: {ex.Message}", ex);
        }
    }

    private void InitFromRecord(Func<string, object?> getValue)
    {
        if (DBNull.Value.Equals(getValue(CampoCodigo)))
            return;
        ID = Convert.ToInt32(getValue(CampoCodigo));
        // Checkpoint Carregar 
        try
        {
            if (!DBNull.Value.Equals(getValue(DBPenhoraDicInfo.DataPenhora)))
                m_FDataPenhora = Convert.ToDateTime(getValue(DBPenhoraDicInfo.DataPenhora));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBPenhoraDicInfo.DtAtu)))
                m_FDtAtu = Convert.ToDateTime(getValue(DBPenhoraDicInfo.DtAtu));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBPenhoraDicInfo.DtCad)))
                m_FDtCad = Convert.ToDateTime(getValue(DBPenhoraDicInfo.DtCad));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBPenhoraDicInfo.Master)))
                m_FMaster = Convert.ToInt32(getValue(DBPenhoraDicInfo.Master));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBPenhoraDicInfo.PenhoraStatus)))
                m_FPenhoraStatus = Convert.ToInt32(getValue(DBPenhoraDicInfo.PenhoraStatus));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBPenhoraDicInfo.Processo)))
                m_FProcesso = Convert.ToInt32(getValue(DBPenhoraDicInfo.Processo));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBPenhoraDicInfo.QuemAtu)))
                m_FQuemAtu = Convert.ToInt32(getValue(DBPenhoraDicInfo.QuemAtu));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBPenhoraDicInfo.QuemCad)))
                m_FQuemCad = Convert.ToInt32(getValue(DBPenhoraDicInfo.QuemCad));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBPenhoraDicInfo.Visto)))
                m_FVisto = Convert.ToBoolean(getValue(DBPenhoraDicInfo.Visto));
        }
        catch
        {
        }

        try
        {
            m_FDescricao = getValue(DBPenhoraDicInfo.Descricao)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FGUID = getValue(DBPenhoraDicInfo.GUID)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FNome = getValue(DBPenhoraDicInfo.Nome)?.ToString() ?? string.Empty;
        }
        catch
        {
        }
    }

    public void CarregarDadosBd(DataRow? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do Penhora: {ex.Message}", ex);
        }
    }

    public void CarregarDadosBd(SqlDataReader? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do Penhora: {ex.Message}", ex);
        }
    }
}