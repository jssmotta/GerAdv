// 100% auto-generated by Source Genesys Core
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming 1
public partial class DBInstancia
{
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool pFldFGUID, pFldFLiminarPedida, pFldFObjeto, pFldFStatusResultado, pFldFLiminarPendente, pFldFInterpusemosRecurso, pFldFLiminarConcedida, pFldFLiminarNegada, pFldFProcesso, pFldFData, pFldFLiminarParcial, pFldFLiminarResultado, pFldFNroProcesso, pFldFDivisao, pFldFLiminarCliente, pFldFComarca, pFldFSubDivisao, pFldFPrincipal, pFldFAcao, pFldFForo, pFldFTipoRecurso, pFldFZKey, pFldFZKeyQuem, pFldFZKeyQuando, pFldFNroAntigo, pFldFAccessCode, pFldFJulgador, pFldFZKeyIA;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected int m_FStatusResultado, m_FProcesso, m_FDivisao, m_FComarca, m_FSubDivisao, m_FAcao, m_FForo, m_FTipoRecurso, m_FZKeyQuem, m_FJulgador;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected string? m_FGUID, m_FLiminarPedida, m_FObjeto, m_FLiminarResultado, m_FNroProcesso, m_FZKey, m_FNroAntigo, m_FAccessCode, m_FZKeyIA;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected DateTime? m_FData, m_FZKeyQuando;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool m_FLiminarPendente, m_FInterpusemosRecurso, m_FLiminarConcedida, m_FLiminarNegada, m_FLiminarParcial, m_FLiminarCliente, m_FPrincipal;
    // Tracking Code: 20250503
    [StringLength(100, ErrorMessage = "A propriedade FGUID da tabela Instancia deve ter no máximo 100 caracteres.")]
    public virtual string? FGUID
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FGUID ?? string.Empty;
        set
        {
            pFldFGUID = pFldFGUID || !(m_FGUID ?? string.Empty).Equals(value);
            if (pFldFGUID)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FGUID = trimmed.Length > 100 ? trimmed.AsSpan(0, 100).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    public virtual string? FLiminarPedida
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FLiminarPedida ?? string.Empty;
        set
        {
            pFldFLiminarPedida = pFldFLiminarPedida || !(m_FLiminarPedida ?? string.Empty).Equals(value);
            if (pFldFLiminarPedida)
                m_FLiminarPedida = value.trim().FixAbc() ?? string.Empty;
        }
    }

    // Tracking Code: 20250503
    [StringLength(255, ErrorMessage = "A propriedade FObjeto da tabela Instancia deve ter no máximo 255 caracteres.")]
    public virtual string? FObjeto
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FObjeto ?? string.Empty;
        set
        {
            pFldFObjeto = pFldFObjeto || !(m_FObjeto ?? string.Empty).Equals(value);
            if (pFldFObjeto)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FObjeto = trimmed.Length > 255 ? trimmed.AsSpan(0, 255).ToString() : trimmed;
            }
        }
    }

    public virtual int FStatusResultado
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FStatusResultado;
        set
        {
            pFldFStatusResultado = pFldFStatusResultado || value != m_FStatusResultado;
            if (pFldFStatusResultado)
                m_FStatusResultado = value;
        }
    }

    public virtual bool FLiminarPendente
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FLiminarPendente;
        set
        {
            pFldFLiminarPendente = pFldFLiminarPendente || value != m_FLiminarPendente;
            if (pFldFLiminarPendente)
                m_FLiminarPendente = value;
        }
    }

    public virtual bool FInterpusemosRecurso
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FInterpusemosRecurso;
        set
        {
            pFldFInterpusemosRecurso = pFldFInterpusemosRecurso || value != m_FInterpusemosRecurso;
            if (pFldFInterpusemosRecurso)
                m_FInterpusemosRecurso = value;
        }
    }

    public virtual bool FLiminarConcedida
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FLiminarConcedida;
        set
        {
            pFldFLiminarConcedida = pFldFLiminarConcedida || value != m_FLiminarConcedida;
            if (pFldFLiminarConcedida)
                m_FLiminarConcedida = value;
        }
    }

    public virtual bool FLiminarNegada
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FLiminarNegada;
        set
        {
            pFldFLiminarNegada = pFldFLiminarNegada || value != m_FLiminarNegada;
            if (pFldFLiminarNegada)
                m_FLiminarNegada = value;
        }
    }

    public virtual int FProcesso
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FProcesso;
        set
        {
            pFldFProcesso = pFldFProcesso || value != m_FProcesso;
            if (pFldFProcesso)
                m_FProcesso = value;
        }
    }

    public virtual string? FData
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FData is null || m_FData == DevourerOne.DDataZerada ? string.Empty : m_FData.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFData, m_FData, value)is not (true, var changed, var data))
                return;
            (pFldFData, m_FData) = (changed, data);
        }
    }

    public virtual bool FLiminarParcial
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FLiminarParcial;
        set
        {
            pFldFLiminarParcial = pFldFLiminarParcial || value != m_FLiminarParcial;
            if (pFldFLiminarParcial)
                m_FLiminarParcial = value;
        }
    }

    // Tracking Code: 20250503
    public virtual string? FLiminarResultado
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FLiminarResultado ?? string.Empty;
        set
        {
            pFldFLiminarResultado = pFldFLiminarResultado || !(m_FLiminarResultado ?? string.Empty).Equals(value);
            if (pFldFLiminarResultado)
                m_FLiminarResultado = value.trim().FixAbc() ?? string.Empty;
        }
    }

    // Tracking Code: 20250503
    [StringLength(25, ErrorMessage = "A propriedade FNroProcesso da tabela Instancia deve ter no máximo 25 caracteres.")]
    public virtual string? FNroProcesso
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNroProcesso ?? string.Empty;
        set
        {
            pFldFNroProcesso = pFldFNroProcesso || !(m_FNroProcesso ?? string.Empty).Equals(value);
            if (pFldFNroProcesso)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FNroProcesso = trimmed.Length > 25 ? trimmed.AsSpan(0, 25).ToString() : trimmed;
            }
        }
    }

    public virtual int FDivisao
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDivisao;
        set
        {
            pFldFDivisao = pFldFDivisao || value != m_FDivisao;
            if (pFldFDivisao)
                m_FDivisao = value;
        }
    }

    public virtual bool FLiminarCliente
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FLiminarCliente;
        set
        {
            pFldFLiminarCliente = pFldFLiminarCliente || value != m_FLiminarCliente;
            if (pFldFLiminarCliente)
                m_FLiminarCliente = value;
        }
    }

    public virtual int FComarca
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FComarca;
        set
        {
            pFldFComarca = pFldFComarca || value != m_FComarca;
            if (pFldFComarca)
                m_FComarca = value;
        }
    }

    public virtual int FSubDivisao
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FSubDivisao;
        set
        {
            pFldFSubDivisao = pFldFSubDivisao || value != m_FSubDivisao;
            if (pFldFSubDivisao)
                m_FSubDivisao = value;
        }
    }

    public virtual bool FPrincipal
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPrincipal;
        set
        {
            pFldFPrincipal = pFldFPrincipal || value != m_FPrincipal;
            if (pFldFPrincipal)
                m_FPrincipal = value;
        }
    }

    public virtual int FAcao
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAcao;
        set
        {
            pFldFAcao = pFldFAcao || value != m_FAcao;
            if (pFldFAcao)
                m_FAcao = value;
        }
    }

    public virtual int FForo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FForo;
        set
        {
            pFldFForo = pFldFForo || value != m_FForo;
            if (pFldFForo)
                m_FForo = value;
        }
    }

    public virtual int FTipoRecurso
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FTipoRecurso;
        set
        {
            pFldFTipoRecurso = pFldFTipoRecurso || value != m_FTipoRecurso;
            if (pFldFTipoRecurso)
                m_FTipoRecurso = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(25, ErrorMessage = "A propriedade FZKey da tabela Instancia deve ter no máximo 25 caracteres.")]
    public virtual string? FZKey
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FZKey ?? string.Empty;
        set
        {
            pFldFZKey = pFldFZKey || !(m_FZKey ?? string.Empty).Equals(value);
            if (pFldFZKey)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FZKey = trimmed.Length > 25 ? trimmed.AsSpan(0, 25).ToString() : trimmed;
            }
        }
    }

    public virtual int FZKeyQuem
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FZKeyQuem;
        set
        {
            pFldFZKeyQuem = pFldFZKeyQuem || value != m_FZKeyQuem;
            if (pFldFZKeyQuem)
                m_FZKeyQuem = value;
        }
    }

    public virtual string? FZKeyQuando
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FZKeyQuando is null || m_FZKeyQuando == DevourerOne.DDataZerada ? string.Empty : m_FZKeyQuando.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFZKeyQuando, m_FZKeyQuando, value)is not (true, var changed, var data))
                return;
            (pFldFZKeyQuando, m_FZKeyQuando) = (changed, data);
        }
    }

    // Tracking Code: 20250503
    [StringLength(25, ErrorMessage = "A propriedade FNroAntigo da tabela Instancia deve ter no máximo 25 caracteres.")]
    public virtual string? FNroAntigo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNroAntigo ?? string.Empty;
        set
        {
            pFldFNroAntigo = pFldFNroAntigo || !(m_FNroAntigo ?? string.Empty).Equals(value);
            if (pFldFNroAntigo)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FNroAntigo = trimmed.Length > 25 ? trimmed.AsSpan(0, 25).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(100, ErrorMessage = "A propriedade FAccessCode da tabela Instancia deve ter no máximo 100 caracteres.")]
    public virtual string? FAccessCode
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAccessCode ?? string.Empty;
        set
        {
            pFldFAccessCode = pFldFAccessCode || !(m_FAccessCode ?? string.Empty).Equals(value);
            if (pFldFAccessCode)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FAccessCode = trimmed.Length > 100 ? trimmed.AsSpan(0, 100).ToString() : trimmed;
            }
        }
    }

    public virtual int FJulgador
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FJulgador;
        set
        {
            pFldFJulgador = pFldFJulgador || value != m_FJulgador;
            if (pFldFJulgador)
                m_FJulgador = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(25, ErrorMessage = "A propriedade FZKeyIA da tabela Instancia deve ter no máximo 25 caracteres.")]
    public virtual string? FZKeyIA
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FZKeyIA ?? string.Empty;
        set
        {
            pFldFZKeyIA = pFldFZKeyIA || !(m_FZKeyIA ?? string.Empty).Equals(value);
            if (pFldFZKeyIA)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FZKeyIA = trimmed.Length > 25 ? trimmed.AsSpan(0, 25).ToString() : trimmed;
            }
        }
    }

    public void SetAuditor(int usuarioId) => AuditorQuem = usuarioId;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITabelaName() => PTabelaNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoCodigo() => CampoCodigo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoNome() => CampoNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string IPrefixo() => PTabelaPrefixo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITypeFieldCode() => "int";
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IdIsIdentity() => false;
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetID() => ID;
}