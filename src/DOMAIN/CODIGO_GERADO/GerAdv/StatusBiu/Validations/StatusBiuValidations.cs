// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IStatusBiuValidation
{
    Task<bool> ValidateReg(Models.StatusBiu reg, IStatusBiuService service, ITipoStatusBiuReader tipostatusbiuReader, IOperadorReader operadorReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, IStatusBiuService service, IOperadorService operadorService, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class StatusBiuValidation : IStatusBiuValidation
{
    public async Task<bool> CanDelete(int id, IStatusBiuService service, IOperadorService operadorService, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        var operadorExists0 = await operadorService.Filter(new Filters.FilterOperador { StatusId = id }, uri);
        if (operadorExists0 != null && operadorExists0.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Operador associados a ele.");
        return true;
    }

    private bool ValidSizes(Models.StatusBiu reg)
    {
        if (reg.Nome.Length > 1024)
            throw new SGValidationException($"Nome deve ter no máximo 1024 caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.StatusBiu reg, IStatusBiuService service, ITipoStatusBiuReader tipostatusbiuReader, IOperadorReader operadorReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Nome))
            throw new SGValidationException("Nome é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.TipoStatusBiu == 0)
            throw new SGValidationException("TipoStatusBiu é obrigatório.");
        // TipoStatusBiu
        {
            var regTipoStatusBiu = await tipostatusbiuReader.Read(reg.TipoStatusBiu, oCnn);
            if (regTipoStatusBiu == null || regTipoStatusBiu.Id != reg.TipoStatusBiu)
            {
                throw new SGValidationException($"Staus  Usuários não encontrado ({regTipoStatusBiu?.Id}).");
            }
        }

        // Operador
        if (!reg.Operador.IsEmptyIDNumber())
        {
            var regOperador = await operadorReader.Read(reg.Operador, oCnn);
            if (regOperador == null || regOperador.Id != reg.Operador)
            {
                throw new SGValidationException($"Operador não encontrado ({regOperador?.Id}).");
            }
        }

        return true;
    }
}