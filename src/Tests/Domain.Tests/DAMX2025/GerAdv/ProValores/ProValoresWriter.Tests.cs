// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class ProValoresWriterTests
{
    private readonly Mock<IFProValoresFactory> _mockProValoresFactory;
    private readonly Mock<FProValores> _mockFProValores;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly ProValoresWriter _provaloresWriter;
    public ProValoresWriterTests()
    {
        _mockProValoresFactory = new Mock<IFProValoresFactory>();
        _mockFProValores = new Mock<FProValores>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _provaloresWriter = new ProValoresWriter(_mockProValoresFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var provalores = CreateValidProValoresModel();
        provalores.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockProValoresFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFProValores.Object);
        _mockFProValores.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _provaloresWriter.WriteAsync(provalores, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFProValores.Object);
        _mockProValoresFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockProValoresFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFProValores.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var provalores = CreateValidProValoresModel();
        provalores.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockProValoresFactory.Setup(x => x.CreateFromIdAsync(provalores.Id, _mockConnection.Object)).ReturnsAsync(_mockFProValores.Object);
        _mockFProValores.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _provaloresWriter.WriteAsync(provalores, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFProValores.Object);
        _mockProValoresFactory.Verify(x => x.CreateFromIdAsync(provalores.Id, _mockConnection.Object), Times.Once);
        _mockProValoresFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFProValores.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var provalores = CreateValidProValoresModel();
        var auditorQuem = 99;
        _mockProValoresFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFProValores.Object);
        _mockFProValores.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _provaloresWriter.WriteAsync(provalores, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFProValores.Object);
        _mockFProValores.VerifySet(x => x.FGuid = provalores.Guid, Times.Once);
        _mockFProValores.VerifySet(x => x.FProcesso = provalores.Processo, Times.Once);
        _mockFProValores.VerifySet(x => x.FTipoValorProcesso = provalores.TipoValorProcesso, Times.Once);
        _mockFProValores.VerifySet(x => x.FIndice = provalores.Indice, Times.Once);
        _mockFProValores.VerifySet(x => x.FIgnorar = provalores.Ignorar, Times.Once);
        _mockFProValores.VerifySet(x => x.FData = provalores.Data, Times.Once);
        _mockFProValores.VerifySet(x => x.FValorOriginal = provalores.ValorOriginal, Times.Once);
        _mockFProValores.VerifySet(x => x.FPercMulta = provalores.PercMulta, Times.Once);
        _mockFProValores.VerifySet(x => x.FValorMulta = provalores.ValorMulta, Times.Once);
        _mockFProValores.VerifySet(x => x.FPercJuros = provalores.PercJuros, Times.Once);
        _mockFProValores.VerifySet(x => x.FValorOriginalCorrigidoIndice = provalores.ValorOriginalCorrigidoIndice, Times.Once);
        _mockFProValores.VerifySet(x => x.FValorMultaCorrigido = provalores.ValorMultaCorrigido, Times.Once);
        _mockFProValores.VerifySet(x => x.FValorJurosCorrigido = provalores.ValorJurosCorrigido, Times.Once);
        _mockFProValores.VerifySet(x => x.FValorFinal = provalores.ValorFinal, Times.Once);
        _mockFProValores.VerifySet(x => x.FDataUltimaCorrecao = provalores.DataUltimaCorrecao.ToString(), Times.Once);
        _mockFProValores.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithNullDataUltimaCorrecao_ShouldNotSetFDataUltimaCorrecao()
    {
        // Arrange
        var provalores = CreateValidProValoresModel();
        provalores.DataUltimaCorrecao = null;
        var auditorQuem = 123;
        _mockProValoresFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFProValores.Object);
        _mockFProValores.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _provaloresWriter.WriteAsync(provalores, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFProValores.VerifySet(x => x.FDataUltimaCorrecao = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var provalores = CreateValidProValoresModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockProValoresFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _provaloresWriter.WriteAsync(provalores, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var provalores = CreateValidProValoresModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockProValoresFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFProValores.Object);
        _mockFProValores.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _provaloresWriter.WriteAsync(provalores, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var provaloresResponse = new ProValoresResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockProValoresFactory.Setup(x => x.DeleteAsync(operadorId, provaloresResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _provaloresWriter.Delete(provaloresResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockProValoresFactory.Verify(x => x.DeleteAsync(operadorId, provaloresResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var provaloresResponse = new ProValoresResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockProValoresFactory.Setup(x => x.DeleteAsync(operadorId, provaloresResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _provaloresWriter.Delete(provaloresResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var provaloresResponse = new ProValoresResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockProValoresFactory.Setup(x => x.DeleteAsync(operadorId, provaloresResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _provaloresWriter.Delete(provaloresResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new ProValoresWriter(_mockProValoresFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new ProValoresWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.ProValores CreateValidProValoresModel()
    {
        return new Models.ProValores
        {
            Id = 0,
            Guid = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Processo = 1,
            TipoValorProcesso = 1,
            Indice = "AAAAAAAAAAAAAAAAAA",
            Ignorar = false,
            Data = "27/05/2022",
            ValorOriginal = 1m,
            PercMulta = 1m,
            ValorMulta = 1m,
            PercJuros = 1m,
            ValorOriginalCorrigidoIndice = 1m,
            ValorMultaCorrigido = 1m,
            ValorJurosCorrigido = 1m,
            ValorFinal = 1m,
            DataUltimaCorrecao = "24/04/1975"
        };
    }
#endregion
}