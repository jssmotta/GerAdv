// 100% auto-generated by Source Genesys WebApi Front & Back Creator
                     // copyright © 2000-2025 Menphis - Sistemas Inteligentes
                     // This file is part of the Source Genesys project                     
                    import { useState } from 'react';
import InputInput from '@/app/components/Inputs/InputInput';
import InputDate from '@/app/components/Inputs/InputDate';
import InputHora from '@/app/components/Inputs/InputHora';
import InputValor from '@/app/components/Inputs/InputValor';
import InputComboFilterYesNo from '@/app/components/Inputs/InputComboFilterYesNo';
import { FilterHandlers } from '@/app/components/Cruds/GenericFilterDialog';
import { FilterModelosDocumentos } from '@/app/GerAdv_TS/ModelosDocumentos/Filters/ModelosDocumentos';
import TipoModeloDocumentoComboBox from '@/app/GerAdv_TS/TipoModeloDocumento/ComboBox/TipoModeloDocumento';
interface UseModelosDocumentosFilterProps {
  handleFetchWithFilter: (filtro?: FilterModelosDocumentos | undefined | null) => Promise<void>;
}
interface UseModelosDocumentosFilterReturn {
  // Estados
  showSearch: boolean;
  windowFilter: FilterModelosDocumentos;
  setWindowFilter: React.Dispatch<React.SetStateAction<FilterModelosDocumentos>>;
  // Handlers do Dialog
  handleSearch: () => void;
  handleCloseSearch: () => void;
  handleConfirmSearch: (filter: FilterModelosDocumentos) => Promise<void>;
  // Render function
  renderInputFilters: (handlers: FilterHandlers<FilterModelosDocumentos>) => React.ReactNode;
  // Utilitários
  clearFilter: () => void;
  hasActiveFilter: boolean;
}
export const useModelosDocumentosFilter = ({ handleFetchWithFilter }: UseModelosDocumentosFilterProps): UseModelosDocumentosFilterReturn => {
  const [showSearch, setShowSearch] = useState(false);
  const [windowFilter, setWindowFilter] = useState<FilterModelosDocumentos>({} as FilterModelosDocumentos);
  // Handlers do Dialog
  const handleSearch = () => {
    setShowSearch(true);
    const filterWildechar = {...windowFilter, wildcardChar: '%' } as FilterModelosDocumentos;
    setWindowFilter(filterWildechar);
  };
  const handleCloseSearch = () => {
    setShowSearch(false);
  };
  const handleConfirmSearch = async (filter: FilterModelosDocumentos) => {
    await handleFetchWithFilter(filter);
  };
  // Função para limpar filtros
  const clearFilter = () => {
    setWindowFilter({});
    sessionStorage.removeItem(btoa('ModelosDocumentosFilter'));
    handleFetchWithFilter({});
  };
  // Verificar se há filtros ativos
  const hasActiveFilter = Object.values(windowFilter).some(value =>
    value !== undefined && value !== null && value !== '' && value !== -2147483648
  );
  // Função para renderizar os campos de filtro
  const renderInputFilters = (handlers: FilterHandlers<FilterModelosDocumentos>) => (
  <>
  <InputInput
  type='text'
  id='nome'
  name='nome'
  value={handlers.windowFilter?.nome ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Nome'
  label='Nome'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='remuneracao'
  name='remuneracao'
  value={handlers.windowFilter?.remuneracao ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Remuneracao'
  label='Remuneracao'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='assinatura'
  name='assinatura'
  value={handlers.windowFilter?.assinatura ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Assinatura'
  label='Assinatura'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='header'
  name='header'
  value={handlers.windowFilter?.header ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Header'
  label='Header'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='footer'
  name='footer'
  value={handlers.windowFilter?.footer ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Footer'
  label='Footer'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='extra1'
  name='extra1'
  value={handlers.windowFilter?.extra1 ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Extra1'
  label='Extra1'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='extra2'
  name='extra2'
  value={handlers.windowFilter?.extra2 ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Extra2'
  label='Extra2'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='extra3'
  name='extra3'
  value={handlers.windowFilter?.extra3 ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Extra3'
  label='Extra3'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='outorgante'
  name='outorgante'
  value={handlers.windowFilter?.outorgante ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Outorgante'
  label='Outorgante'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='outorgados'
  name='outorgados'
  value={handlers.windowFilter?.outorgados ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Outorgados'
  label='Outorgados'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='poderes'
  name='poderes'
  value={handlers.windowFilter?.poderes ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Poderes'
  label='Poderes'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='objeto'
  name='objeto'
  value={handlers.windowFilter?.objeto ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Objeto'
  label='Objeto'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='titulo'
  name='titulo'
  value={handlers.windowFilter?.titulo ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Titulo'
  label='Titulo'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='testemunhas'
  name='testemunhas'
  value={handlers.windowFilter?.testemunhas ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Testemunhas'
  label='Testemunhas'
  className='inputIncNome inputSearch'
  />
  <TipoModeloDocumentoComboBox
  name='tipomodelodocumento'
  dataForm={null}
  value={handlers.windowFilter?.tipomodelodocumento}
  setValue={(e:any) => handlers.handleComboChange(e, 'tipomodelodocumento')}
  className='inputSearch inputSearchComboboxTab'
  label='Tipo Modelo Documento'
  />
  <InputInput
  type='text'
  id='css'
  name='css'
  value={handlers.windowFilter?.css ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe CSS'
  label='CSS'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='codigo_filtro'
  name='codigo_filtro'
  value={handlers.windowFilter?.codigo_filtro ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código do cadastro'
  label='Código (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='codigo_filtro_end'
  name='codigo_filtro_end'
  value={handlers.windowFilter?.codigo_filtro_end ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código final do cadastro'
  label='Código final'
  disabled={handlers.windowFilter?.codigo_filtro ? false: true}
  className='inputIncNome inputSearch'
  />
</>
);
return {
  // Estados
  showSearch, 
  windowFilter, 
  setWindowFilter, 
  // Handlers
  handleSearch, 
  handleCloseSearch, 
  handleConfirmSearch, 
  // Render function
  renderInputFilters, 
  // Utilitários
  clearFilter, 
  hasActiveFilter
};
};