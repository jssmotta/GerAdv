// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class OponentesWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFOponentesFactory> _mockOponentesFactory;
    private readonly Mock<FOponentes> _mockFOponentes;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly OponentesWhere _oponentesWhere;
    public OponentesWhereTests()
    {
        _mockOponentesFactory = new Mock<IFOponentesFactory>();
        _mockFOponentes = new Mock<FOponentes>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _oponentesWhere = new OponentesWhere(_mockOponentesFactory.Object);
    }

    public void Dispose()
    {
        _mockOponentesFactory?.Reset();
        _mockFOponentes?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
        };
    }

    private void SetupMockFOponentes(int? EMPFuncao = 1, string? CTPSNumero = "AAAAAAAAAAAAA", string? Site = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string? CTPSSerie = "AAAAAAAA", string? Nome = "João", int? Adv = 1, int? EMPCliente = 1, int? IDRep = 1, string? PIS = "AAAAAAAAAAAAAAAAAA", string? Contato = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string? CNPJ = "93016944000138", string? RG = "12.345.678-9", bool? Juridica = false, bool? Tipo = true, bool? Sexo = false, string? CPF = "544.506.718-13", string? Endereco = "Rua das Flores, 123", string? Fone = "(11) 99999-9999", string? Fax = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", int? Cidade = 1, string? Bairro = "Centro", string? CEP = "01234-567", string? InscEst = "AAAAAAAAAAAAA", string? Observacao = "Observação teste", string? EMail = "test@email.com", string? Class = "A", bool? Top = true)
    {
        _mockFOponentes.Setup(f => f.FEMPFuncao).Returns(EMPFuncao ?? 0);
        _mockFOponentes.Setup(f => f.FCTPSNumero).Returns(CTPSNumero ?? string.Empty);
        _mockFOponentes.Setup(f => f.FSite).Returns(Site ?? string.Empty);
        _mockFOponentes.Setup(f => f.FCTPSSerie).Returns(CTPSSerie ?? string.Empty);
        _mockFOponentes.Setup(f => f.FNome).Returns(Nome ?? string.Empty);
        _mockFOponentes.Setup(f => f.FAdv).Returns(Adv ?? 0);
        _mockFOponentes.Setup(f => f.FEMPCliente).Returns(EMPCliente ?? 0);
        _mockFOponentes.Setup(f => f.FIDRep).Returns(IDRep ?? 0);
        _mockFOponentes.Setup(f => f.FPIS).Returns(PIS ?? string.Empty);
        _mockFOponentes.Setup(f => f.FContato).Returns(Contato ?? string.Empty);
        _mockFOponentes.Setup(f => f.FCNPJ).Returns(CNPJ ?? string.Empty);
        _mockFOponentes.Setup(f => f.FRG).Returns(RG ?? string.Empty);
        _mockFOponentes.Setup(f => f.FJuridica).Returns(Juridica ?? false);
        _mockFOponentes.Setup(f => f.FTipo).Returns(Tipo ?? false);
        _mockFOponentes.Setup(f => f.FSexo).Returns(Sexo ?? false);
        _mockFOponentes.Setup(f => f.FCPF).Returns(CPF ?? string.Empty);
        _mockFOponentes.Setup(f => f.FEndereco).Returns(Endereco ?? string.Empty);
        _mockFOponentes.Setup(f => f.FFone).Returns(Fone ?? string.Empty);
        _mockFOponentes.Setup(f => f.FFax).Returns(Fax ?? string.Empty);
        _mockFOponentes.Setup(f => f.FCidade).Returns(Cidade ?? 0);
        _mockFOponentes.Setup(f => f.FBairro).Returns(Bairro ?? string.Empty);
        _mockFOponentes.Setup(f => f.FCEP).Returns(CEP ?? string.Empty);
        _mockFOponentes.Setup(f => f.FInscEst).Returns(InscEst ?? string.Empty);
        _mockFOponentes.Setup(f => f.FObservacao).Returns(Observacao ?? string.Empty);
        _mockFOponentes.Setup(f => f.FEMail).Returns(EMail ?? string.Empty);
        _mockFOponentes.Setup(f => f.FClass).Returns(Class ?? string.Empty);
        _mockFOponentes.Setup(f => f.FTop).Returns(Top ?? false);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFOponentesFactory>();
        // Act
        var oponentesWhere = new OponentesWhere(mockFactory.Object);
        // Assert
        oponentesWhere.Should().NotBeNull();
        oponentesWhere.Should().BeAssignableTo<IOponentesWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFOponentesFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new OponentesWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnOponentesResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFOponentes();
        _mockOponentesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOponentes.Object);
        // Act
        var result = _oponentesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.EMPFuncao.Should().Be(1);
        result.CTPSNumero.Should().Be("AAAAAAAAAAAAA");
        result.Site.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.CTPSSerie.Should().Be("AAAAAAAA");
        result.Nome.Should().Be("João");
        result.Adv.Should().Be(1);
        result.EMPCliente.Should().Be(1);
        result.IDRep.Should().Be(1);
        result.PIS.Should().Be("AAAAAAAAAAAAAAAAAA");
        result.Contato.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.CNPJ.Should().Be("93016944000138");
        result.RG.Should().Be("12.345.678-9");
        result.Juridica.Should().Be(false);
        result.Tipo.Should().Be(true);
        result.Sexo.Should().Be(false);
        result.CPF.Should().Be("544.506.718-13");
        result.Endereco.Should().Be("Rua das Flores, 123");
        result.Fone.Should().Be("(11) 99999-9999");
        result.Fax.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.Cidade.Should().Be(1);
        result.Bairro.Should().Be("Centro");
        result.CEP.Should().Be("01234-567");
        result.InscEst.Should().Be("AAAAAAAAAAAAA");
        result.Observacao.Should().Be("Observação teste");
        result.EMail.Should().Be("test@email.com");
        result.Class.Should().Be("A");
        result.Top.Should().Be(true);
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFOponentes(EMPFuncao: null, CTPSNumero: null, Site: null, CTPSSerie: null, Nome: null, Adv: null, EMPCliente: null, IDRep: null, PIS: null, Contato: null, CNPJ: null, RG: null, Juridica: null, Tipo: null, Sexo: null, CPF: null, Endereco: null, Fone: null, Fax: null, Cidade: null, Bairro: null, CEP: null, InscEst: null, Observacao: null, EMail: null, Class: null, Top: null);
        _mockOponentesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOponentes.Object);
        // Act
        var result = _oponentesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.EMPFuncao.Should().Be(0);
        result.CTPSNumero.Should().Be(string.Empty);
        result.Site.Should().Be(string.Empty);
        result.CTPSSerie.Should().Be(string.Empty);
        result.Nome.Should().Be(string.Empty);
        result.Adv.Should().Be(0);
        result.EMPCliente.Should().Be(0);
        result.IDRep.Should().Be(0);
        result.PIS.Should().Be(string.Empty);
        result.Contato.Should().Be(string.Empty);
        result.CNPJ.Should().Be(string.Empty);
        result.RG.Should().Be(string.Empty);
        result.Juridica.Should().Be(false);
        result.Tipo.Should().Be(false);
        result.Sexo.Should().Be(false);
        result.CPF.Should().Be(string.Empty);
        result.Endereco.Should().Be(string.Empty);
        result.Fone.Should().Be(string.Empty);
        result.Fax.Should().Be(string.Empty);
        result.Cidade.Should().Be(0);
        result.Bairro.Should().Be(string.Empty);
        result.CEP.Should().Be(string.Empty);
        result.InscEst.Should().Be(string.Empty);
        result.Observacao.Should().Be(string.Empty);
        result.EMail.Should().Be(string.Empty);
        result.Class.Should().Be(string.Empty);
        result.Top.Should().Be(false);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFOponentes();
        _mockOponentesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFOponentes.Object);
        // Act
        var result = _oponentesWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockOponentesFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFOponentes();
        _mockOponentesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOponentes.Object);
        // Act
        var result = _oponentesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockOponentesFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFOponentes();
        _mockOponentesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOponentes.Object);
        // Act
        var result = _oponentesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockOponentesFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFOponentes();
        _mockOponentesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOponentes.Object);
        // Act
        _oponentesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockOponentesFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFOponentesInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFOponentes.Setup(f => f.Dispose());
        SetupMockFOponentes();
        _mockOponentesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOponentes.Object);
        // Act
        _oponentesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFOponentes.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockOponentesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _oponentesWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFOponentes(EMPFuncao: 1, CTPSNumero: "AAAAAAAAAAAAA", Site: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", CTPSSerie: "AAAAAAAA", Nome: "João", Adv: 1, EMPCliente: 1, IDRep: 1, PIS: "AAAAAAAAAAAAAAAAAA", Contato: "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", CNPJ: "93016944000138", RG: "12.345.678-9", Juridica: false, Tipo: true, Sexo: false, CPF: "544.506.718-13", Endereco: "Rua das Flores, 123", Fone: "(11) 99999-9999", Fax: "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", Cidade: 1, Bairro: "Centro", CEP: "01234-567", InscEst: "AAAAAAAAAAAAA", Observacao: "Observação teste", EMail: "test@email.com", Class: "A", Top: true);
        _mockOponentesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOponentes.Object);
        // Act
        var result = _oponentesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.EMPFuncao.Should().Be(1);
        result.CTPSNumero.Should().Be("AAAAAAAAAAAAA");
        result.Site.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.CTPSSerie.Should().Be("AAAAAAAA");
        result.Nome.Should().Be("João");
        result.Adv.Should().Be(1);
        result.EMPCliente.Should().Be(1);
        result.IDRep.Should().Be(1);
        result.PIS.Should().Be("AAAAAAAAAAAAAAAAAA");
        result.Contato.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.CNPJ.Should().Be("93016944000138");
        result.RG.Should().Be("12.345.678-9");
        result.Juridica.Should().Be(false);
        result.Tipo.Should().Be(true);
        result.Sexo.Should().Be(false);
        result.CPF.Should().Be("544.506.718-13");
        result.Endereco.Should().Be("Rua das Flores, 123");
        result.Fone.Should().Be("(11) 99999-9999");
        result.Fax.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.Cidade.Should().Be(1);
        result.Bairro.Should().Be("Centro");
        result.CEP.Should().Be("01234-567");
        result.InscEst.Should().Be("AAAAAAAAAAAAA");
        result.Observacao.Should().Be("Observação teste");
        result.EMail.Should().Be("test@email.com");
        result.Class.Should().Be("A");
        result.Top.Should().Be(true);
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "Nome = @{DBOponentesDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBOponentesDicInfo.CampoNome}", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"),
        };
        SetupMockFOponentes();
        _mockOponentesFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOponentes.Object);
        // Act
        _oponentesWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockOponentesFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBOponentesDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }
#region DateTime Tests
#endregion
#endregion
}