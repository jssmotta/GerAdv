// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class PrepostosWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFPrepostosFactory> _mockPrepostosFactory;
    private readonly Mock<FPrepostos> _mockFPrepostos;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly PrepostosWhere _prepostosWhere;
    public PrepostosWhereTests()
    {
        _mockPrepostosFactory = new Mock<IFPrepostosFactory>();
        _mockFPrepostos = new Mock<FPrepostos>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _prepostosWhere = new PrepostosWhere(_mockPrepostosFactory.Object);
    }

    public void Dispose()
    {
        _mockPrepostosFactory?.Reset();
        _mockFPrepostos?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
        };
    }

    private void SetupMockFPrepostos(string? Nome = "João", int? Funcao = 1, int? Setor = 1, string? DtNasc = "24/04/1975", string? Qualificacao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", bool? Sexo = false, int? Idade = 1, string? CPF = "544.506.718-13", string? RG = "12.345.678-9", string? Periodo_Ini = "24/04/1975", string? Periodo_Fim = "24/04/1975", string? Registro = "AAAAAAAAAAAAAAAAAAAAAAAAAAAA", string? CTPSNumero = "AAAAAAAAAAAAA", string? CTPSSerie = "AAAAAAAA", string? CTPSDtEmissao = "24/04/1975", string? PIS = "AAAAAAAAAAAAAAAAAA", decimal? Salario = 0m, bool? LiberaAgenda = true, string? Observacao = "Observação teste", string? Endereco = "Rua das Flores, 123", string? Bairro = "Centro", int? Cidade = 1, string? CEP = "01234-567", string? Fone = "(11) 99999-9999", string? Fax = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string? EMail = "test@email.com", string? Pai = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string? Mae = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string? Class = "A")
    {
        _mockFPrepostos.Setup(f => f.FNome).Returns(Nome ?? string.Empty);
        _mockFPrepostos.Setup(f => f.FFuncao).Returns(Funcao ?? 0);
        _mockFPrepostos.Setup(f => f.FSetor).Returns(Setor ?? 0);
        _mockFPrepostos.Setup(f => f.FDtNasc).Returns(DtNasc ?? string.Empty);
        _mockFPrepostos.Setup(f => f.FQualificacao).Returns(Qualificacao ?? string.Empty);
        _mockFPrepostos.Setup(f => f.FSexo).Returns(Sexo ?? false);
        _mockFPrepostos.Setup(f => f.FIdade).Returns(Idade ?? 0);
        _mockFPrepostos.Setup(f => f.FCPF).Returns(CPF ?? string.Empty);
        _mockFPrepostos.Setup(f => f.FRG).Returns(RG ?? string.Empty);
        _mockFPrepostos.Setup(f => f.FPeriodo_Ini).Returns(Periodo_Ini ?? string.Empty);
        _mockFPrepostos.Setup(f => f.FPeriodo_Fim).Returns(Periodo_Fim ?? string.Empty);
        _mockFPrepostos.Setup(f => f.FRegistro).Returns(Registro ?? string.Empty);
        _mockFPrepostos.Setup(f => f.FCTPSNumero).Returns(CTPSNumero ?? string.Empty);
        _mockFPrepostos.Setup(f => f.FCTPSSerie).Returns(CTPSSerie ?? string.Empty);
        _mockFPrepostos.Setup(f => f.FCTPSDtEmissao).Returns(CTPSDtEmissao ?? string.Empty);
        _mockFPrepostos.Setup(f => f.FPIS).Returns(PIS ?? string.Empty);
        _mockFPrepostos.Setup(f => f.FSalario).Returns(Salario ?? 0m);
        _mockFPrepostos.Setup(f => f.FLiberaAgenda).Returns(LiberaAgenda ?? false);
        _mockFPrepostos.Setup(f => f.FObservacao).Returns(Observacao ?? string.Empty);
        _mockFPrepostos.Setup(f => f.FEndereco).Returns(Endereco ?? string.Empty);
        _mockFPrepostos.Setup(f => f.FBairro).Returns(Bairro ?? string.Empty);
        _mockFPrepostos.Setup(f => f.FCidade).Returns(Cidade ?? 0);
        _mockFPrepostos.Setup(f => f.FCEP).Returns(CEP ?? string.Empty);
        _mockFPrepostos.Setup(f => f.FFone).Returns(Fone ?? string.Empty);
        _mockFPrepostos.Setup(f => f.FFax).Returns(Fax ?? string.Empty);
        _mockFPrepostos.Setup(f => f.FEMail).Returns(EMail ?? string.Empty);
        _mockFPrepostos.Setup(f => f.FPai).Returns(Pai ?? string.Empty);
        _mockFPrepostos.Setup(f => f.FMae).Returns(Mae ?? string.Empty);
        _mockFPrepostos.Setup(f => f.FClass).Returns(Class ?? string.Empty);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFPrepostosFactory>();
        // Act
        var prepostosWhere = new PrepostosWhere(mockFactory.Object);
        // Assert
        prepostosWhere.Should().NotBeNull();
        prepostosWhere.Should().BeAssignableTo<IPrepostosWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFPrepostosFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new PrepostosWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnPrepostosResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFPrepostos();
        _mockPrepostosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPrepostos.Object);
        // Act
        var result = _prepostosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.Nome.Should().Be("João");
        result.Funcao.Should().Be(1);
        result.Setor.Should().Be(1);
        result.DtNasc.Should().Be("24/04/1975");
        result.Qualificacao.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Sexo.Should().Be(false);
        result.Idade.Should().Be(1);
        result.CPF.Should().Be("544.506.718-13");
        result.RG.Should().Be("12.345.678-9");
        result.Periodo_Ini.Should().Be("24/04/1975");
        result.Periodo_Fim.Should().Be("24/04/1975");
        result.Registro.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.CTPSNumero.Should().Be("AAAAAAAAAAAAA");
        result.CTPSSerie.Should().Be("AAAAAAAA");
        result.CTPSDtEmissao.Should().Be("24/04/1975");
        result.PIS.Should().Be("AAAAAAAAAAAAAAAAAA");
        result.Salario.Should().Be(0m);
        result.LiberaAgenda.Should().Be(true);
        result.Observacao.Should().Be("Observação teste");
        result.Endereco.Should().Be("Rua das Flores, 123");
        result.Bairro.Should().Be("Centro");
        result.Cidade.Should().Be(1);
        result.CEP.Should().Be("01234-567");
        result.Fone.Should().Be("(11) 99999-9999");
        result.Fax.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.EMail.Should().Be("test@email.com");
        result.Pai.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Mae.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Class.Should().Be("A");
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFPrepostos(Nome: null, Funcao: null, Setor: null, DtNasc: null, Qualificacao: null, Sexo: null, Idade: null, CPF: null, RG: null, Periodo_Ini: null, Periodo_Fim: null, Registro: null, CTPSNumero: null, CTPSSerie: null, CTPSDtEmissao: null, PIS: null, Salario: null, LiberaAgenda: null, Observacao: null, Endereco: null, Bairro: null, Cidade: null, CEP: null, Fone: null, Fax: null, EMail: null, Pai: null, Mae: null, Class: null);
        _mockPrepostosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPrepostos.Object);
        // Act
        var result = _prepostosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Nome.Should().Be(string.Empty);
        result.Funcao.Should().Be(0);
        result.Setor.Should().Be(0);
        result.DtNasc.Should().Be(string.Empty);
        result.Qualificacao.Should().Be(string.Empty);
        result.Sexo.Should().Be(false);
        result.Idade.Should().Be(0);
        result.CPF.Should().Be(string.Empty);
        result.RG.Should().Be(string.Empty);
        result.Periodo_Ini.Should().Be(string.Empty);
        result.Periodo_Fim.Should().Be(string.Empty);
        result.Registro.Should().Be(string.Empty);
        result.CTPSNumero.Should().Be(string.Empty);
        result.CTPSSerie.Should().Be(string.Empty);
        result.CTPSDtEmissao.Should().Be(string.Empty);
        result.PIS.Should().Be(string.Empty);
        result.Salario.Should().Be(0m);
        result.LiberaAgenda.Should().Be(false);
        result.Observacao.Should().Be(string.Empty);
        result.Endereco.Should().Be(string.Empty);
        result.Bairro.Should().Be(string.Empty);
        result.Cidade.Should().Be(0);
        result.CEP.Should().Be(string.Empty);
        result.Fone.Should().Be(string.Empty);
        result.Fax.Should().Be(string.Empty);
        result.EMail.Should().Be(string.Empty);
        result.Pai.Should().Be(string.Empty);
        result.Mae.Should().Be(string.Empty);
        result.Class.Should().Be(string.Empty);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFPrepostos();
        _mockPrepostosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFPrepostos.Object);
        // Act
        var result = _prepostosWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockPrepostosFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFPrepostos();
        _mockPrepostosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPrepostos.Object);
        // Act
        var result = _prepostosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockPrepostosFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFPrepostos();
        _mockPrepostosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPrepostos.Object);
        // Act
        var result = _prepostosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockPrepostosFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFPrepostos();
        _mockPrepostosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPrepostos.Object);
        // Act
        _prepostosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockPrepostosFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFPrepostosInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFPrepostos.Setup(f => f.Dispose());
        SetupMockFPrepostos();
        _mockPrepostosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPrepostos.Object);
        // Act
        _prepostosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFPrepostos.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockPrepostosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _prepostosWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFPrepostos(Nome: "João", Funcao: 1, Setor: 1, DtNasc: "24/04/1975", Qualificacao: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", Sexo: false, Idade: 1, CPF: "544.506.718-13", RG: "12.345.678-9", Periodo_Ini: "24/04/1975", Periodo_Fim: "24/04/1975", Registro: "AAAAAAAAAAAAAAAAAAAAAAAAAAAA", CTPSNumero: "AAAAAAAAAAAAA", CTPSSerie: "AAAAAAAA", CTPSDtEmissao: "24/04/1975", PIS: "AAAAAAAAAAAAAAAAAA", Salario: 0m, LiberaAgenda: true, Observacao: "Observação teste", Endereco: "Rua das Flores, 123", Bairro: "Centro", Cidade: 1, CEP: "01234-567", Fone: "(11) 99999-9999", Fax: "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", EMail: "test@email.com", Pai: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", Mae: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", Class: "A");
        _mockPrepostosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPrepostos.Object);
        // Act
        var result = _prepostosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.Nome.Should().Be("João");
        result.Funcao.Should().Be(1);
        result.Setor.Should().Be(1);
        result.DtNasc.Should().Be("24/04/1975");
        result.Qualificacao.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Sexo.Should().Be(false);
        result.Idade.Should().Be(1);
        result.CPF.Should().Be("544.506.718-13");
        result.RG.Should().Be("12.345.678-9");
        result.Periodo_Ini.Should().Be("24/04/1975");
        result.Periodo_Fim.Should().Be("24/04/1975");
        result.Registro.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.CTPSNumero.Should().Be("AAAAAAAAAAAAA");
        result.CTPSSerie.Should().Be("AAAAAAAA");
        result.CTPSDtEmissao.Should().Be("24/04/1975");
        result.PIS.Should().Be("AAAAAAAAAAAAAAAAAA");
        result.Salario.Should().Be(0m);
        result.LiberaAgenda.Should().Be(true);
        result.Observacao.Should().Be("Observação teste");
        result.Endereco.Should().Be("Rua das Flores, 123");
        result.Bairro.Should().Be("Centro");
        result.Cidade.Should().Be(1);
        result.CEP.Should().Be("01234-567");
        result.Fone.Should().Be("(11) 99999-9999");
        result.Fax.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.EMail.Should().Be("test@email.com");
        result.Pai.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Mae.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Class.Should().Be("A");
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "Nome = @{DBPrepostosDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBPrepostosDicInfo.CampoNome}", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"),
        };
        SetupMockFPrepostos();
        _mockPrepostosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPrepostos.Object);
        // Act
        _prepostosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockPrepostosFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBPrepostosDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#region DateTime Tests
    [Fact]
    public void Read_WithValidDateDtNascFields_ShouldParseAndSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var testDate = "31/12/2024";
        SetupMockFPrepostos(DtNasc: testDate);
        _mockPrepostosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPrepostos.Object);
        // Act
        var result = _prepostosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtNasc.Should().Be("31/12/2024");
    }

    [Fact]
    public void Read_WithInvalidDateDtNascStrings_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFPrepostos(DtNasc: "invalid-date");
        _mockPrepostosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPrepostos.Object);
        // Act
        var result = _prepostosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtNasc.Should().Be("");
    }

    [Fact]
    public void Read_WithNullDateDtNascFields_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFPrepostos(DtNasc: null);
        _mockPrepostosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPrepostos.Object);
        // Act
        var result = _prepostosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtNasc.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("31/12/2024")]
    [InlineData("2025/01/01T23:59:59")]
    [InlineData("2000-02-29")] // Leap year
    [InlineData("2025/01/02T14:30:45.123")]
    public void Read_WithValidDateDtNascFormats_ShouldParseCorrectly(string dateString)
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedDate = DateTime.Parse(dateString);
        SetupMockFPrepostos(DtNasc: dateString);
        _mockPrepostosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPrepostos.Object);
        // Act
        var result = _prepostosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtNasc.Should().Be(dateString);
    }

    [Fact]
    public void Read_WithValidDatePeriodo_IniFields_ShouldParseAndSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var testDate = "01/01/2025";
        SetupMockFPrepostos(Periodo_Ini: testDate);
        _mockPrepostosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPrepostos.Object);
        // Act
        var result = _prepostosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Periodo_Ini.Should().Be("01/01/2025");
    }

    [Fact]
    public void Read_WithInvalidDatePeriodo_IniStrings_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFPrepostos(Periodo_Ini: "invalid-date");
        _mockPrepostosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPrepostos.Object);
        // Act
        var result = _prepostosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Periodo_Ini.Should().Be("");
    }

    [Fact]
    public void Read_WithNullDatePeriodo_IniFields_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFPrepostos(Periodo_Ini: null);
        _mockPrepostosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPrepostos.Object);
        // Act
        var result = _prepostosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Periodo_Ini.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("01/01/2025")]
    [InlineData("2025/01/02T23:59:59")]
    [InlineData("2000-02-29")] // Leap year
    [InlineData("2025/01/03T14:30:45.123")]
    public void Read_WithValidDatePeriodo_IniFormats_ShouldParseCorrectly(string dateString)
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedDate = DateTime.Parse(dateString);
        SetupMockFPrepostos(Periodo_Ini: dateString);
        _mockPrepostosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPrepostos.Object);
        // Act
        var result = _prepostosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Periodo_Ini.Should().Be(dateString);
    }

    [Fact]
    public void Read_WithValidDatePeriodo_FimFields_ShouldParseAndSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var testDate = "02/01/2025";
        SetupMockFPrepostos(Periodo_Fim: testDate);
        _mockPrepostosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPrepostos.Object);
        // Act
        var result = _prepostosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Periodo_Fim.Should().Be("02/01/2025");
    }

    [Fact]
    public void Read_WithInvalidDatePeriodo_FimStrings_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFPrepostos(Periodo_Fim: "invalid-date");
        _mockPrepostosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPrepostos.Object);
        // Act
        var result = _prepostosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Periodo_Fim.Should().Be("");
    }

    [Fact]
    public void Read_WithNullDatePeriodo_FimFields_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFPrepostos(Periodo_Fim: null);
        _mockPrepostosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPrepostos.Object);
        // Act
        var result = _prepostosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Periodo_Fim.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("02/01/2025")]
    [InlineData("2025/01/03T23:59:59")]
    [InlineData("2000-02-29")] // Leap year
    [InlineData("2025/01/04T14:30:45.123")]
    public void Read_WithValidDatePeriodo_FimFormats_ShouldParseCorrectly(string dateString)
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedDate = DateTime.Parse(dateString);
        SetupMockFPrepostos(Periodo_Fim: dateString);
        _mockPrepostosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPrepostos.Object);
        // Act
        var result = _prepostosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Periodo_Fim.Should().Be(dateString);
    }

    [Fact]
    public void Read_WithValidDateCTPSDtEmissaoFields_ShouldParseAndSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var testDate = "03/01/2025";
        SetupMockFPrepostos(CTPSDtEmissao: testDate);
        _mockPrepostosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPrepostos.Object);
        // Act
        var result = _prepostosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.CTPSDtEmissao.Should().Be("03/01/2025");
    }

    [Fact]
    public void Read_WithInvalidDateCTPSDtEmissaoStrings_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFPrepostos(CTPSDtEmissao: "invalid-date");
        _mockPrepostosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPrepostos.Object);
        // Act
        var result = _prepostosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.CTPSDtEmissao.Should().Be("");
    }

    [Fact]
    public void Read_WithNullDateCTPSDtEmissaoFields_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFPrepostos(CTPSDtEmissao: null);
        _mockPrepostosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPrepostos.Object);
        // Act
        var result = _prepostosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.CTPSDtEmissao.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("03/01/2025")]
    [InlineData("2025/01/04T23:59:59")]
    [InlineData("2000-02-29")] // Leap year
    [InlineData("2025/01/05T14:30:45.123")]
    public void Read_WithValidDateCTPSDtEmissaoFormats_ShouldParseCorrectly(string dateString)
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedDate = DateTime.Parse(dateString);
        SetupMockFPrepostos(CTPSDtEmissao: dateString);
        _mockPrepostosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFPrepostos.Object);
        // Act
        var result = _prepostosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.CTPSDtEmissao.Should().Be(dateString);
    }
#endregion
#endregion
}