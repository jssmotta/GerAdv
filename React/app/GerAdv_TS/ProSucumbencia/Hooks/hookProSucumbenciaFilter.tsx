// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
import { useState } from 'react';
import InputInput from '@/app/components/Inputs/InputInput';
import InputDate from '@/app/components/Inputs/InputDate';
import InputHora from '@/app/components/Inputs/InputHora';
import InputValor from '@/app/components/Inputs/InputValor';
import InputComboFilterYesNo from '@/app/components/Inputs/InputComboFilterYesNo';
import { FilterHandlers } from '@/app/components/Cruds/GenericFilterDialog';
import { FilterProSucumbencia } from '@/app/GerAdv_TS/ProSucumbencia/Filters/ProSucumbencia';
import InstanciaComboBox from '@/app/GerAdv_TS/Instancia/ComboBox/Instancia';
import TipoOrigemSucumbenciaComboBox from '@/app/GerAdv_TS/TipoOrigemSucumbencia/ComboBox/TipoOrigemSucumbencia';
interface UseProSucumbenciaFilterProps {
  handleFetchWithFilter: (filtro?: FilterProSucumbencia | undefined | null) => Promise<void>;
}
interface UseProSucumbenciaFilterReturn {
  // Estados
  showSearch: boolean;
  windowFilter: FilterProSucumbencia;
  setWindowFilter: React.Dispatch<React.SetStateAction<FilterProSucumbencia>>;
  // Handlers do Dialog
  handleSearch: () => void;
  handleCloseSearch: () => void;
  handleConfirmSearch: (filter: FilterProSucumbencia) => Promise<void>;
  // Render function
  renderInputFilters: (handlers: FilterHandlers<FilterProSucumbencia>) => React.ReactNode;
  // Utilitários
  clearFilter: () => void;
  hasActiveFilter: boolean;
}
export const useProSucumbenciaFilter = ({ handleFetchWithFilter }: UseProSucumbenciaFilterProps): UseProSucumbenciaFilterReturn => {
  const [showSearch, setShowSearch] = useState(false);
  const [windowFilter, setWindowFilter] = useState<FilterProSucumbencia>({} as FilterProSucumbencia);
  // Handlers do Dialog
  const handleSearch = () => {
    setShowSearch(true);
    const filterWildechar = {...windowFilter, wildcardChar: '%' } as FilterProSucumbencia;
    setWindowFilter(filterWildechar);
  };
  const handleCloseSearch = () => {
    setShowSearch(false);
  };
  const handleConfirmSearch = async (filter: FilterProSucumbencia) => {
    await handleFetchWithFilter(filter);
  };
  // Função para limpar filtros
  const clearFilter = () => {
    setWindowFilter({});
    sessionStorage.removeItem(btoa('ProSucumbenciaFilter'));
    handleFetchWithFilter({});
  };
  // Verificar se há filtros ativos
  const hasActiveFilter = Object.values(windowFilter).some(value =>
    value !== undefined && value !== null && value !== '' && value !== -2147483648
  );
  // Função para renderizar os campos de filtro
  const renderInputFilters = (handlers: FilterHandlers<FilterProSucumbencia>) => (
  <>
  <InputInput
  type='text'
  id='processo'
  name='processo'
  value={handlers.windowFilter?.processo ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Processo'
  label='Processo (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='processo_end'
  name='processo_end'
  value={handlers.windowFilter?.processo_end ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Processo final'
  label='Processo final'
  disabled={handlers.windowFilter?.processo ? false: true}
  className='inputIncNome inputSearch'
  />
  <InstanciaComboBox
  name='instancia'
  dataForm={null}
  value={handlers.windowFilter?.instancia}
  setValue={(e:any) => handlers.handleComboChange(e, 'instancia')}
  className='inputSearch inputSearchComboboxTab'
  label='Instancia'
  />
  <InputInput
  type='text'
  id='data'
  name='data'
  value={handlers.windowFilter?.data ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Data'
  label='Data'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='nome'
  name='nome'
  value={handlers.windowFilter?.nome ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Nome'
  label='Nome'
  className='inputIncNome inputSearch'
  />
  <TipoOrigemSucumbenciaComboBox
  name='tipoorigemsucumbencia'
  dataForm={null}
  value={handlers.windowFilter?.tipoorigemsucumbencia}
  setValue={(e:any) => handlers.handleComboChange(e, 'tipoorigemsucumbencia')}
  className='inputSearch inputSearchComboboxTab'
  label='Tipo Origem Sucumbencia'
  />
  <InputValor
  type='text'
  id='valor'
  name='valor'
  value={handlers.windowFilter?.valor ?? 0}
  onChange={handlers.handleInputValorChange}
  label='Valor (igual ou começando com)'
  className='inputSearch inputSearchValor'
  />

  <InputValor
  type='text'
  id='valor_end'
  name='valor_end'
  value={handlers.windowFilter?.valor_end ?? 0}
  disabled={handlers.windowFilter?.valor != 0 ? false: true}
  onChange={handlers.handleInputValorChange}
  label='Valor (até)'
  className='inputSearch inputSearchValor inputSearchValorEnd'
  />

  <InputInput
  type='text'
  id='percentual'
  name='percentual'
  value={handlers.windowFilter?.percentual ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Percentual'
  label='Percentual'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='codigo_filtro'
  name='codigo_filtro'
  value={handlers.windowFilter?.codigo_filtro ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código do cadastro'
  label='Código (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='codigo_filtro_end'
  name='codigo_filtro_end'
  value={handlers.windowFilter?.codigo_filtro_end ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código final do cadastro'
  label='Código final'
  disabled={handlers.windowFilter?.codigo_filtro ? false: true}
  className='inputIncNome inputSearch'
  />
</>
);
return {
  // Estados
  showSearch, 
  windowFilter, 
  setWindowFilter, 
  // Handlers
  handleSearch, 
  handleCloseSearch, 
  handleConfirmSearch, 
  // Render function
  renderInputFilters, 
  // Utilitários
  clearFilter, 
  hasActiveFilter
};
};