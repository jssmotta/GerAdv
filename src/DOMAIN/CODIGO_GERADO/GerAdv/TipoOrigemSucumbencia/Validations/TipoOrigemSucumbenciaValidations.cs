// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface ITipoOrigemSucumbenciaValidation
{
    Task<bool> ValidateReg(Models.TipoOrigemSucumbencia reg, ITipoOrigemSucumbenciaService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int? id, ITipoOrigemSucumbenciaService service, IProSucumbenciaService prosucumbenciaService, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class TipoOrigemSucumbenciaValidation : ITipoOrigemSucumbenciaValidation
{
    public async Task<bool> CanDelete(int? id, ITipoOrigemSucumbenciaService service, IProSucumbenciaService prosucumbenciaService, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id == null || id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id ?? default, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        var prosucumbenciaExists0 = await prosucumbenciaService.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterProSucumbencia { TipoOrigemSucumbencia = id ?? default }, uri);
        if (prosucumbenciaExists0 != null && prosucumbenciaExists0.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Pro Sucumbencia associados a ele.");
        return true;
    }

    private bool ValidSizes(Models.TipoOrigemSucumbencia reg)
    {
        if (reg.Nome != null && reg.Nome.Length > DBTipoOrigemSucumbenciaDicInfo.TosNome.FTamanho)
            throw new SGValidationException($"Nome deve ter no máximo {DBTipoOrigemSucumbenciaDicInfo.TosNome.FTamanho} caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.TipoOrigemSucumbencia reg, ITipoOrigemSucumbenciaService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Nome))
            throw new SGValidationException("Nome é obrigatório");
        if (await IsDuplicado(reg, service, uri))
            throw new SGValidationException($"Tipo Origem Sucumbencia '{reg.Nome}'  - Nome");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        return true;
    }

    private async Task<bool> IsDuplicado(Models.TipoOrigemSucumbencia reg, ITipoOrigemSucumbenciaService service, string uri)
    {
        var existingTipoOrigemSucumbencia = (await service.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterTipoOrigemSucumbencia { Nome = reg.Nome }, uri)).FirstOrDefault(); // TRACK 10042025
        return existingTipoOrigemSucumbencia != null && existingTipoOrigemSucumbencia.Id > 0 && existingTipoOrigemSucumbencia.Id != reg.Id;
    }
}