// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class PreClientesValidationTests : IDisposable
{
    private readonly PreClientesValidation _validation;
    private readonly Mock<IPreClientesService> _mockPreClientesService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IClientesReader> _mockClientesReader;
    private readonly Mock<ICidadeReader> _mockCidadeReader;
    private readonly PreClientesService _service;
    private readonly string _validUri = "test-uri";
    public PreClientesValidationTests()
    {
        _validation = new PreClientesValidation();
        _mockPreClientesService = new Mock<IPreClientesService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockClientesReader = new Mock<IClientesReader>();
        _mockCidadeReader = new Mock<ICidadeReader>();
    }

#region Class Structure Tests
    [Fact]
    public void PreClientesValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IPreClientesValidation>();
    }

    [Fact]
    public void PreClientesValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(PreClientesValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void PreClientesValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(PreClientesValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private static Models.PreClientes CreateValidPreClientes()
    {
        return new Models.PreClientes
        {
            Id = 1,
            Inativo = false,
            QuemIndicou = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Nome = "João",
            Adv = 0,
            IDRep = 0,
            Juridica = true,
            NomeFantasia = "João",
            Class = "A",
            Tipo = false,
            DtNasc = "24/04/1975",
            InscEst = "AAAAAAAAAAAAA",
            Qualificacao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Sexo = true,
            Idade = 0,
            CNPJ = "93016944000138",
            CPF = "544.506.718-13",
            RG = "12.345.678-9",
            TipoCaptacao = false,
            Observacao = "Observação teste",
            Endereco = "Rua das Flores, 123",
            Bairro = "Centro",
            Cidade = 0,
            CEP = "01234-567",
            Fax = "(11) 88888-9999",
            Fone = "(11) 99999-9999",
            Data = "27/05/2022",
            HomePage = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            EMail = "test@email.com",
            Assistido = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            AssRG = "12.345.678-9",
            AssCPF = "544.506.718-13",
            AssEndereco = "Rua das Flores, 123",
            CNH = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockPreClientesService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterPreClientes>(), It.IsAny<string>())).ReturnsAsync([]);
        // Setup other mocks but don't override the PreClientess service mock
        _ = _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new ClientesResponse { Id = id }));
        _ = _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new CidadeResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockPreClientesService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterPreClientes>(), It.IsAny<string>())).ReturnsAsync([]);
        // Setup other mocks but don't override the PreClientess service mock
        _ = _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new ClientesResponse { Id = 0 }));
        _ = _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new CidadeResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var preclientes = new Models.PreClientes
        {
            Id = 1,
            Inativo = false,
            QuemIndicou = null,
            Nome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Juridica = true,
            NomeFantasia = null,
            Class = null,
            Tipo = false,
            DtNasc = null,
            InscEst = null,
            Qualificacao = null,
            Sexo = true,
            CNPJ = null,
            CPF = null,
            RG = null,
            TipoCaptacao = false,
            Observacao = null,
            Endereco = null,
            Bairro = null,
            CEP = null,
            Fax = null,
            Fone = null,
            Data = null,
            HomePage = null,
            EMail = null,
            Assistido = null,
            AssRG = null,
            AssCPF = null,
            AssEndereco = null,
            CNH = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region CPF Validation Tests
    [Fact]
    public async Task ValidateReg_WithDuplicateCPF_ShouldThrowSGValidationException()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.CPF = "81833354036";
        preclientes.Id = 1;
        var existingPreClientes = new PreClientesResponseAll
        {
            Id = 2,
            Nome = "Existing User",
            CPF = "81833354036"
        };
        // Setup the Filter method with any filter to see if it's being called
        _mockPreClientesService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterPreClientes>(), It.IsAny<string>())).ReturnsAsync(new List<PreClientesResponseAll> { existingPreClientes });
        // Setup other mocks but don't override the PreClientess service mock
        _ = _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new ClientesResponse { Id = id }));
        _ = _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new CidadeResponse { Id = id }));
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("já cadastrado");
        // Verify that the Filter method was called
        _mockPreClientesService.Verify(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterPreClientes>(), It.IsAny<string>()), Times.AtLeastOnce);
    }

    [Fact]
    public async Task ValidateReg_WithDuplicateCPF_NoName_ShouldThrowSGValidationException()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.CPF = "34666807004";
        preclientes.Id = 1;
        var existingPreClientes = new PreClientesResponseAll
        {
            Id = 2,
            Nome = "João",
            CPF = "34666807004"
        };
        _mockPreClientesService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterPreClientes>(), It.IsAny<string>())).ReturnsAsync(new List<PreClientesResponseAll> { existingPreClientes });
        // Setup other mocks but don't override the PreClientess service mock
        _ = _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new ClientesResponse { Id = id }));
        _ = _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new CidadeResponse { Id = id }));
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("já cadastrado");
        exception.Message.Should().Contain("(");
    }

    [Fact]
    public async Task ValidateReg_WithSameCPF_SameId_ShouldPass()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.CPF = "67290209117";
        preclientes.Id = 1;
        var existingPreClientes = new PreClientesResponseAll
        {
            Id = 1, // Same ID
            Nome = "Same User",
            CPF = "67290209117"
        };
        _mockPreClientesService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterPreClientes>(), It.IsAny<string>())).ReturnsAsync(new List<PreClientesResponseAll> { existingPreClientes });
        // Setup other mocks but don't override the PreClientess service mock
        _ = _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new ClientesResponse { Id = id }));
        _ = _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new CidadeResponse { Id = id }));
        // Act
        var result = await _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithEmptyCPF_ShouldPass()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.CPF = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullCPF_ShouldPass()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.CPF = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region CNPJ Validation Tests
    [Fact]
    public async Task ValidateReg_WithDuplicateCNPJ_ShouldThrowSGValidationException()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.CNPJ = "90724474000179";
        preclientes.Id = 1;
        var existingPreClientes = new PreClientesResponseAll
        {
            Id = 2,
            Nome = "Existing User",
            CNPJ = "90724474000179"
        };
        // Setup the Filter method with any filter to see if it's being called
        _mockPreClientesService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterPreClientes>(), It.IsAny<string>())).ReturnsAsync(new List<PreClientesResponseAll> { existingPreClientes });
        // Setup other mocks but don't override the PreClientess service mock
        _ = _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new ClientesResponse { Id = id }));
        _ = _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new CidadeResponse { Id = id }));
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("já cadastrado");
        // Verify that the Filter method was called
        _mockPreClientesService.Verify(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterPreClientes>(), It.IsAny<string>()), Times.AtLeastOnce);
    }

    [Fact]
    public async Task ValidateReg_WithDuplicateCNPJ_NoName_ShouldThrowSGValidationException()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.CNPJ = "84590488000144";
        preclientes.Id = 1;
        var existingPreClientes = new PreClientesResponseAll
        {
            Id = 2,
            Nome = "João",
            CNPJ = "84590488000144"
        };
        _mockPreClientesService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterPreClientes>(), It.IsAny<string>())).ReturnsAsync(new List<PreClientesResponseAll> { existingPreClientes });
        // Setup other mocks but don't override the PreClientess service mock
        _ = _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new ClientesResponse { Id = id }));
        _ = _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new CidadeResponse { Id = id }));
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("já cadastrado");
    }

    [Fact]
    public async Task ValidateReg_WithSameCNPJ_SameId_ShouldPass()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.CNPJ = "34692293000137";
        preclientes.Id = 1;
        var existingPreClientes = new PreClientesResponseAll
        {
            Id = 1, // Same ID
            Nome = "Same User",
            CNPJ = "34692293000137"
        };
        _mockPreClientesService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterPreClientes>(), It.IsAny<string>())).ReturnsAsync(new List<PreClientesResponseAll> { existingPreClientes });
        // Setup other mocks but don't override the PreClientess service mock
        _ = _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new ClientesResponse { Id = id }));
        _ = _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new CidadeResponse { Id = id }));
        // Act
        var result = await _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithEmptyCNPJ_ShouldPass()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.CNPJ = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullCNPJ_ShouldPass()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.CNPJ = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region EMail Validation Tests
    [Fact]
    public async Task ValidateReg_WithInvalidEMail_ShouldThrowSGValidationException()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.EMail = "invalid-email";
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("formato inválido.");
    }

    [Fact]
    public async Task ValidateReg_WithValidEMail_ShouldPass()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.EMail = "menphis@example.com";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithEmptyEMail_ShouldPass()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.EMail = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region DtNasc Validation Tests
    [Theory]
    [InlineData("01/01/1899")]
    [InlineData("31/12/1899")]
    public async Task ValidateReg_WithDtNascBeforeMinDate_ShouldThrowSGValidationException(string invalidDate)
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.DtNasc = invalidDate;
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("01/01/1900.");
    }

    [Fact]
    public async Task ValidateReg_WithValidDtNasc_ShouldPass()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.DtNasc = "01/01/1990";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullDtNasc_ShouldPass()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.DtNasc = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithInvalidDateDtNascFormat_ShouldPass()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.DtNasc = "invalid-date";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue(); // Invalid format is ignored, not validated
    }

    [Fact]
    public async Task ValidateReg_WithEmptyDtNasc_ShouldPass()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.DtNasc = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateRegDtNasc_WithBoundaryValues_ShouldPass()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.DtNasc = "01/01/1900"; // Exactly on the boundary
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithTodayDateDtNasc_ShouldPass()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.DtNasc = DateTime.Now.ToString("dd/MM/yyyy");
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithTomorrowDateDtNasc_ShouldNotPass()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.DtNasc = DateTime.Now.AddDays(1).ToString("dd/MM/yyyy");
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não pode ser uma data futura.");
    }

#region Foreign Key Validation Tests - Clientes
    [Fact]
    public async Task ValidateReg_WithInvalidClientes_ShouldThrowSGValidationException()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.IDRep = 999;
        _mockClientesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.ClientesResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedClientesId_ShouldThrowSGValidationException()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.IDRep = 999;
        var reg888 = new Models.Response.ClientesResponse
        {
            Id = 888
        }; // Different ID
        _mockClientesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidClientes_ShouldPass()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.IDRep = 123;
        var reg123 = new Models.Response.ClientesResponse
        {
            Id = 123
        };
        _mockClientesReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyClientes_ShouldPass()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.IDRep = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockClientesReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - Cidade
    [Fact]
    public async Task ValidateReg_WithInvalidCidade_ShouldThrowSGValidationException()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.Cidade = 999;
        _mockCidadeReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.CidadeResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedCidadeId_ShouldThrowSGValidationException()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.Cidade = 999;
        var reg888 = new Models.Response.CidadeResponse
        {
            Id = 888
        }; // Different ID
        _mockCidadeReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidCidade_ShouldPass()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.Cidade = 123;
        var reg123 = new Models.Response.CidadeResponse
        {
            Id = 123
        };
        _mockCidadeReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyCidade_ShouldPass()
    {
        // Arrange
        var preclientes = CreateValidPreClientes();
        preclientes.Cidade = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(preclientes, _mockPreClientesService.Object, _mockClientesReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockCidadeReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}