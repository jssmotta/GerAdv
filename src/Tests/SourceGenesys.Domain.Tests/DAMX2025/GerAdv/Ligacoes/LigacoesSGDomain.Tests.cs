// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBLigacoes - Nome da classe (ex: DBClientes)
/// Ligacoes - Nome da tabela (ex: Clientes)
/// lig - Prefixo dos campos (ex: cli)
/// ligCodigo - Nome do campo código (ex: cliCodigo)
/// ligNome - Nome do campo nome (ex: cliNome)
/// DBLigacoes.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBLigacoesTests : IDisposable
{
    private readonly DBLigacoes _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBLigacoesTests()
    {
        _instance = new DBLigacoes();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("ligCodigo", typeof(int));
        dt.Columns.Add("ligQuemCad", typeof(int));
        dt.Columns.Add("ligDtCad", typeof(DateTime));
        dt.Columns.Add("ligQuemAtu", typeof(int));
        dt.Columns.Add("ligDtAtu", typeof(DateTime));
        dt.Columns.Add("ligVisto", typeof(bool));
        dt.Columns.Add("ligAssunto", typeof(string));
        dt.Columns.Add("ligAgeClienteAvisado", typeof(int));
        dt.Columns.Add("ligCelular", typeof(string));
        dt.Columns.Add("ligCliente", typeof(int));
        dt.Columns.Add("ligContato", typeof(string));
        dt.Columns.Add("ligDataRealizada", typeof(DateTime));
        dt.Columns.Add("ligQuemID", typeof(int));
        dt.Columns.Add("ligTelefonista", typeof(int));
        dt.Columns.Add("ligUltimoAviso", typeof(DateTime));
        dt.Columns.Add("ligHoraFinal", typeof(string));
        dt.Columns.Add("ligNome", typeof(string));
        dt.Columns.Add("ligQuemCodigo", typeof(int));
        dt.Columns.Add("ligSolicitante", typeof(int));
        dt.Columns.Add("ligPara", typeof(string));
        dt.Columns.Add("ligFone", typeof(string));
        dt.Columns.Add("ligRamal", typeof(int));
        dt.Columns.Add("ligParticular", typeof(string));
        dt.Columns.Add("ligRealizada", typeof(string));
        dt.Columns.Add("ligStatus", typeof(string));
        dt.Columns.Add("ligData", typeof(string));
        dt.Columns.Add("ligHora", typeof(string));
        dt.Columns.Add("ligUrgente", typeof(string));
        dt.Columns.Add("ligGUID", typeof(string));
        dt.Columns.Add("ligLigarPara", typeof(string));
        dt.Columns.Add("ligProcesso", typeof(int));
        dt.Columns.Add("ligStartScreen", typeof(string));
        dt.Columns.Add("ligEmotion", typeof(int));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("Ligacoes", DBLigacoes.PTabelaNome);
        Assert.Equal(" Ligacoes.* ", DBLigacoes.CamposSqlX);
        Assert.Equal("ligCodigo", DBLigacoes.CampoCodigo);
        Assert.Equal("ligNome", DBLigacoes.CampoNome);
        Assert.Equal("lig", DBLigacoes.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBLigacoes();
        Assert.Equal(0, instance.ID);
        Assert.Equal("Ligacoes", instance.ITabelaName());
        Assert.Equal("lig", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBLigacoes((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBLigacoes((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["ligCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBLigacoes(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("Ligacoes", cadastro.ITabelaName());
        Assert.Equal("ligCodigo", cadastro.ICampoCodigo());
        Assert.Equal("ligNome", cadastro.ICampoNome());
        Assert.Equal("lig", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBLigacoes.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBLigacoes.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBLigacoes.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBLigacoes();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBLigacoes();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnTrue()
    {
        Assert.True(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Assunto_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FAssunto = input;
        Assert.Equal(expected, _instance.FAssunto);
    }

    [Fact]
    public void Assunto_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 200 + 10);
        _instance.FAssunto = longString;
        Assert.True(_instance.FAssunto.Length <= 200);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void AgeClienteAvisado_ShouldAcceptIntegerValues(int value)
    {
        _instance.FAgeClienteAvisado = value;
        Assert.Equal(value, _instance.FAgeClienteAvisado);
    }

    [Fact]
    public void AgeClienteAvisado_DefaultValue_ShouldBeZero()
    {
        var instance = new DBLigacoes();
        Assert.Equal(0, instance.FAgeClienteAvisado);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Celular_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FCelular = value;
        Assert.Equal(value, _instance.FCelular);
    }

    [Fact]
    public void Celular_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBLigacoes();
        Assert.False(instance.FCelular);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Celular_ShouldAcceptIntegerValues(int value)
{
    _instance.FCelular = value;
    Assert.Equal(value, _instance.FCelular);
}

[Fact]
public void Celular_DefaultValue_ShouldBeZero()
{
    var instance = new DBLigacoes();
    Assert.Equal(0, instance.Celular);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Celular_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FCelular = dateString;
    Assert.Equal(dateString, _instance.FCelular);
}

[Fact]
public void Celular_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBLigacoes();
    Assert.Equal(string.Empty, instance.Celular);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Celular_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FCelular = input;
        Assert.Equal(expected, _instance.FCelular);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FCelular = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Celular_ValidEmail_ShouldAccept(string email)
{
    _instance.FCelular = email;
    Assert.Equal(email, _instance.FCelular);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Celular_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FCelular = email);
}
*/
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cliente_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCliente = value;
        Assert.Equal(value, _instance.FCliente);
    }

    [Fact]
    public void Cliente_DefaultValue_ShouldBeZero()
    {
        var instance = new DBLigacoes();
        Assert.Equal(0, instance.FCliente);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Contato_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FContato = input;
        Assert.Equal(expected, _instance.FContato);
    }

    [Fact]
    public void Contato_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 200 + 10);
        _instance.FContato = longString;
        Assert.True(_instance.FContato.Length <= 200);
    }

    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void DataRealizada_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FDataRealizada = dateString;
        Assert.Equal(dateString, _instance.FDataRealizada);
    }

    [Fact]
    public void DataRealizada_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBLigacoes();
        Assert.Equal(string.Empty, instance.FDataRealizada);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void QuemID_ShouldAcceptIntegerValues(int value)
    {
        _instance.FQuemID = value;
        Assert.Equal(value, _instance.FQuemID);
    }

    [Fact]
    public void QuemID_DefaultValue_ShouldBeZero()
    {
        var instance = new DBLigacoes();
        Assert.Equal(0, instance.FQuemID);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Telefonista_ShouldAcceptIntegerValues(int value)
    {
        _instance.FTelefonista = value;
        Assert.Equal(value, _instance.FTelefonista);
    }

    [Fact]
    public void Telefonista_DefaultValue_ShouldBeZero()
    {
        var instance = new DBLigacoes();
        Assert.Equal(0, instance.FTelefonista);
    }

    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void UltimoAviso_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FUltimoAviso = dateString;
        Assert.Equal(dateString, _instance.FUltimoAviso);
    }

    [Fact]
    public void UltimoAviso_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBLigacoes();
        Assert.Equal(string.Empty, instance.FUltimoAviso);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Nome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNome = input;
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void Nome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FNome = longString;
        Assert.True(_instance.FNome.Length <= 50);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void QuemCodigo_ShouldAcceptIntegerValues(int value)
    {
        _instance.FQuemCodigo = value;
        Assert.Equal(value, _instance.FQuemCodigo);
    }

    [Fact]
    public void QuemCodigo_DefaultValue_ShouldBeZero()
    {
        var instance = new DBLigacoes();
        Assert.Equal(0, instance.FQuemCodigo);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Solicitante_ShouldAcceptIntegerValues(int value)
    {
        _instance.FSolicitante = value;
        Assert.Equal(value, _instance.FSolicitante);
    }

    [Fact]
    public void Solicitante_DefaultValue_ShouldBeZero()
    {
        var instance = new DBLigacoes();
        Assert.Equal(0, instance.FSolicitante);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Para_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FPara = input;
        Assert.Equal(expected, _instance.FPara);
    }

    [Fact]
    public void Para_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FPara = longString;
        Assert.True(_instance.FPara.Length <= 100);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Fone_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FFone = input;
        Assert.Equal(expected, _instance.FFone);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Ramal_ShouldAcceptIntegerValues(int value)
    {
        _instance.FRamal = value;
        Assert.Equal(value, _instance.FRamal);
    }

    [Fact]
    public void Ramal_DefaultValue_ShouldBeZero()
    {
        var instance = new DBLigacoes();
        Assert.Equal(0, instance.FRamal);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Particular_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FParticular = value;
        Assert.Equal(value, _instance.FParticular);
    }

    [Fact]
    public void Particular_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBLigacoes();
        Assert.False(instance.FParticular);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Particular_ShouldAcceptIntegerValues(int value)
{
    _instance.FParticular = value;
    Assert.Equal(value, _instance.FParticular);
}

[Fact]
public void Particular_DefaultValue_ShouldBeZero()
{
    var instance = new DBLigacoes();
    Assert.Equal(0, instance.Particular);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Particular_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FParticular = dateString;
    Assert.Equal(dateString, _instance.FParticular);
}

[Fact]
public void Particular_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBLigacoes();
    Assert.Equal(string.Empty, instance.Particular);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Particular_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FParticular = input;
        Assert.Equal(expected, _instance.FParticular);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FParticular = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Particular_ValidEmail_ShouldAccept(string email)
{
    _instance.FParticular = email;
    Assert.Equal(email, _instance.FParticular);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Particular_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FParticular = email);
}
*/
    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Realizada_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FRealizada = value;
        Assert.Equal(value, _instance.FRealizada);
    }

    [Fact]
    public void Realizada_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBLigacoes();
        Assert.False(instance.FRealizada);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Realizada_ShouldAcceptIntegerValues(int value)
{
    _instance.FRealizada = value;
    Assert.Equal(value, _instance.FRealizada);
}

[Fact]
public void Realizada_DefaultValue_ShouldBeZero()
{
    var instance = new DBLigacoes();
    Assert.Equal(0, instance.Realizada);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Realizada_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FRealizada = dateString;
    Assert.Equal(dateString, _instance.FRealizada);
}

[Fact]
public void Realizada_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBLigacoes();
    Assert.Equal(string.Empty, instance.Realizada);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Realizada_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FRealizada = input;
        Assert.Equal(expected, _instance.FRealizada);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FRealizada = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Realizada_ValidEmail_ShouldAccept(string email)
{
    _instance.FRealizada = email;
    Assert.Equal(email, _instance.FRealizada);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Realizada_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FRealizada = email);
}
*/
    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Status_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FStatus = input;
        Assert.Equal(expected, _instance.FStatus);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Urgente_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FUrgente = value;
        Assert.Equal(value, _instance.FUrgente);
    }

    [Fact]
    public void Urgente_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBLigacoes();
        Assert.False(instance.FUrgente);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void Urgente_ShouldAcceptIntegerValues(int value)
{
    _instance.FUrgente = value;
    Assert.Equal(value, _instance.FUrgente);
}

[Fact]
public void Urgente_DefaultValue_ShouldBeZero()
{
    var instance = new DBLigacoes();
    Assert.Equal(0, instance.Urgente);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void Urgente_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FUrgente = dateString;
    Assert.Equal(dateString, _instance.FUrgente);
}

[Fact]
public void Urgente_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBLigacoes();
    Assert.Equal(string.Empty, instance.Urgente);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void Urgente_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FUrgente = input;
        Assert.Equal(expected, _instance.FUrgente);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FUrgente = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void Urgente_ValidEmail_ShouldAccept(string email)
{
    _instance.FUrgente = email;
    Assert.Equal(email, _instance.FUrgente);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void Urgente_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FUrgente = email);
}
*/
    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void GUID_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FGUID = input;
        Assert.Equal(expected, _instance.FGUID);
    }

    [Fact]
    public void GUID_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 100 + 10);
        _instance.FGUID = longString;
        Assert.True(_instance.FGUID.Length <= 100);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void LigarPara_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FLigarPara = input;
        Assert.Equal(expected, _instance.FLigarPara);
    }

    [Fact]
    public void LigarPara_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 255 + 10);
        _instance.FLigarPara = longString;
        Assert.True(_instance.FLigarPara.Length <= 255);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Processo_ShouldAcceptIntegerValues(int value)
    {
        _instance.FProcesso = value;
        Assert.Equal(value, _instance.FProcesso);
    }

    [Fact]
    public void Processo_DefaultValue_ShouldBeZero()
    {
        var instance = new DBLigacoes();
        Assert.Equal(0, instance.FProcesso);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void StartScreen_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FStartScreen = value;
        Assert.Equal(value, _instance.FStartScreen);
    }

    [Fact]
    public void StartScreen_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBLigacoes();
        Assert.False(instance.FStartScreen);
    }

    /*
TEMPLATE_INTEGER_FIELD:
[Theory]
[InlineData(0)]
[InlineData(1)]
[InlineData(-1)]
[InlineData(int.MaxValue)]
[InlineData(int.MinValue)]
public void StartScreen_ShouldAcceptIntegerValues(int value)
{
    _instance.FStartScreen = value;
    Assert.Equal(value, _instance.FStartScreen);
}

[Fact]
public void StartScreen_DefaultValue_ShouldBeZero()
{
    var instance = new DBLigacoes();
    Assert.Equal(0, instance.StartScreen);
}
*/
    /*
TEMPLATE_DATETIME_FIELD:
[Theory]
[InlineData("01/01/2000")]
[InlineData("31/12/2023")]
[InlineData("15/08/2024")]
public void StartScreen_ShouldFormatDateCorrectly(string dateString)
{
    _instance.FStartScreen = dateString;
    Assert.Equal(dateString, _instance.FStartScreen);
}

[Fact]
public void StartScreen_EmptyDate_ShouldReturnEmptyString()
{
    var instance = new DBLigacoes();
    Assert.Equal(string.Empty, instance.StartScreen);
}
*/
    /*
TEMPLATE_CPF_FIELD:
[Theory]
[InlineData("91751637484", "91751637484")]
[InlineData("384.004.020-57", "38400402057")]
[InlineData("", "")]
public void StartScreen_ShouldValidateCPF(string input, string expected)
{
    if (input == "" || IsValidCPF(input))
    {
        _instance.FStartScreen = input;
        Assert.Equal(expected, _instance.FStartScreen);
    }
    else
    {
        Assert.Throws<ArgumentException>(() => _instance.FStartScreen = input);
    }
}
*/
    /*
TEMPLATE_EMAIL_FIELD:
[Theory]
[InlineData("test@example.com")]
[InlineData("user.name@domain.co.uk")]
public void StartScreen_ValidEmail_ShouldAccept(string email)
{
    _instance.FStartScreen = email;
    Assert.Equal(email, _instance.FStartScreen);
}

[Theory]
[InlineData("invalid-email")]
[InlineData("@domain.com")]
public void StartScreen_InvalidEmail_ShouldThrow(string email)
{
    Assert.Throws<ArgumentException>(() => _instance.FStartScreen = email);
}
*/
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Emotion_ShouldAcceptIntegerValues(int value)
    {
        _instance.FEmotion = value;
        Assert.Equal(value, _instance.FEmotion);
    }

    [Fact]
    public void Emotion_DefaultValue_ShouldBeZero()
    {
        var instance = new DBLigacoes();
        Assert.Equal(0, instance.FEmotion);
    }

    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}