// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Readers;
public partial class LigacoesReader(IFLigacoesFactory ligacoesFactory) : ILigacoesReader
{
    private readonly IFLigacoesFactory _ligacoesFactory = ligacoesFactory;
    public async Task<IEnumerable<DBNomeID>> ListarN(int max, string uri, string cWhere, List<SqlParameter> parameters, string order) => await DevourerSqlData.ListarNomeID(BuildSqlQuery("ligCodigo, ligNome", cWhere, order, max), parameters, uri, caching: DevourerOne.PCachingDefault, max: max);
    public async Task<IEnumerable<LigacoesResponseAll>> Listar(int max, string uri, string cWhere, List<SqlParameter> parameters, string order, CancellationToken cancellationToken) => await ListarTabela(BuildSqlQuery(DBLigacoes.CamposSqlX, cWhere, order, max), parameters, uri, caching: DevourerOne.PCachingDefault, max: max, cancellationToken: cancellationToken);
    private async Task<IEnumerable<LigacoesResponseAll>> ListarTabela(string sql, List<SqlParameter> parameters, string uri, bool caching = DevourerOne.PCachingDefault, int max = 200, CancellationToken cancellationToken = default)
    {
        var result = new List<LigacoesResponseAll>(max);
        await using var connection = Configuracoes.GetConnectionByUri(uri);
        await using var cmd = new SqlCommand(cmdText: ConfiguracoesDBT.CmdSql(sql), connection: connection?.InnerConnection)
        {
            CommandTimeout = 30
        };
        foreach (var param in parameters)
        {
            if (!cmd.Parameters.Contains(param.ParameterName))
            {
                var newParam = new SqlParameter(param.ParameterName, param.Value)
                {
                    SqlDbType = param.SqlDbType,
                    Direction = param.Direction,
                    Size = param.Size,
                    Precision = param.Precision,
                    Scale = param.Scale
                };
                cmd.Parameters.Add(newParam);
            }
        }

        await using var reader = await cmd.ExecuteReaderAsync(CommandBehavior.SingleResult);
        while (await reader.ReadAsync())
        {
            if (cancellationToken.IsCancellationRequested)
                return result;
            result.Add(ReadAll(_ligacoesFactory.CreateFromReader(reader), reader)!);
        }

        return result;
    }

    public async Task<LigacoesResponse?> Read(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _ligacoesFactory.CreateFromIdAsync(id, oCnn);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public async Task<Models.Ligacoes?> ReadM(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _ligacoesFactory.CreateFromIdAsync(id, oCnn);
        var ligacoes = new Models.Ligacoes
        {
            Id = dbRec.ID,
            Assunto = dbRec.FAssunto ?? string.Empty,
            AgeClienteAvisado = dbRec.FAgeClienteAvisado,
            Celular = dbRec.FCelular,
            Cliente = dbRec.FCliente,
            Contato = dbRec.FContato ?? string.Empty,
            QuemID = dbRec.FQuemID,
            Telefonista = dbRec.FTelefonista,
            Nome = dbRec.FNome ?? string.Empty,
            QuemCodigo = dbRec.FQuemCodigo,
            Solicitante = dbRec.FSolicitante,
            Para = dbRec.FPara ?? string.Empty,
            Fone = dbRec.FFone ?? string.Empty,
            Ramal = dbRec.FRamal,
            Particular = dbRec.FParticular,
            Realizada = dbRec.FRealizada,
            Status = dbRec.FStatus ?? string.Empty,
            Urgente = dbRec.FUrgente,
            LigarPara = dbRec.FLigarPara ?? string.Empty,
            Processo = dbRec.FProcesso,
            StartScreen = dbRec.FStartScreen,
            Emotion = dbRec.FEmotion,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataRealizada, out DateTime XDataRealizada))
        {
            ligacoes.DataRealizada = dbRec.FDataRealizada;
            ligacoes.DataRealizada_date = XDataRealizada;
        }

        if (DateTime.TryParse(dbRec.FUltimoAviso, out DateTime XUltimoAviso))
        {
            ligacoes.UltimoAviso = dbRec.FUltimoAviso;
            ligacoes.UltimoAviso_date = XUltimoAviso;
        }

        if (DateTime.TryParse(dbRec.FHoraFinal, out DateTime XHoraFinal))
        {
            ligacoes.HoraFinal = dbRec.FHoraFinal;
            ligacoes.HoraFinal_date = XHoraFinal;
        }

        if (DateTime.TryParse(dbRec.FData, out DateTime XData))
        {
            ligacoes.Data = dbRec.FData;
            ligacoes.Data_date = XData;
        }

        if (DateTime.TryParse(dbRec.FHora, out DateTime XHora))
        {
            ligacoes.Hora = dbRec.FHora;
            ligacoes.Hora_date = XHora;
        }

        return ligacoes;
    }

    public LigacoesResponse? Read(FLigacoes dbRec, MsiSqlConnection oCnn)
    {
        return Read(dbRec);
    }

    public LigacoesResponse? Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn)
    {
        using var dbRec = _ligacoesFactory.CreateFromParameters(parameters, oCnn, sqlWhere: where);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public LigacoesResponse? Read(FLigacoes dbRec) // Track 001.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var ligacoes = new LigacoesResponse
        {
            Id = dbRec.ID,
            Assunto = dbRec.FAssunto ?? string.Empty,
            AgeClienteAvisado = dbRec.FAgeClienteAvisado,
            Celular = dbRec.FCelular,
            Cliente = dbRec.FCliente,
            Contato = dbRec.FContato ?? string.Empty,
            QuemID = dbRec.FQuemID,
            Telefonista = dbRec.FTelefonista,
            Nome = dbRec.FNome ?? string.Empty,
            QuemCodigo = dbRec.FQuemCodigo,
            Solicitante = dbRec.FSolicitante,
            Para = dbRec.FPara ?? string.Empty,
            Fone = dbRec.FFone ?? string.Empty,
            Ramal = dbRec.FRamal,
            Particular = dbRec.FParticular,
            Realizada = dbRec.FRealizada,
            Status = dbRec.FStatus ?? string.Empty,
            Urgente = dbRec.FUrgente,
            LigarPara = dbRec.FLigarPara ?? string.Empty,
            Processo = dbRec.FProcesso,
            StartScreen = dbRec.FStartScreen,
            Emotion = dbRec.FEmotion,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataRealizada, out DateTime XDataRealizada))
        {
            ligacoes.DataRealizada = dbRec.FDataRealizada;
            ligacoes.DataRealizada_date = XDataRealizada;
        }

        if (DateTime.TryParse(dbRec.FUltimoAviso, out DateTime XUltimoAviso))
        {
            ligacoes.UltimoAviso = dbRec.FUltimoAviso;
            ligacoes.UltimoAviso_date = XUltimoAviso;
        }

        if (DateTime.TryParse(dbRec.FHoraFinal, out DateTime XHoraFinal))
        {
            ligacoes.HoraFinal = dbRec.FHoraFinal;
            ligacoes.HoraFinal_date = XHoraFinal;
        }

        if (DateTime.TryParse(dbRec.FData, out DateTime XData))
        {
            ligacoes.Data = dbRec.FData;
            ligacoes.Data_date = XData;
        }

        if (DateTime.TryParse(dbRec.FHora, out DateTime XHora))
        {
            ligacoes.Hora = dbRec.FHora;
            ligacoes.Hora_date = XHora;
        }

        return ligacoes;
    }

    public LigacoesResponse? Read(SG.GerAdv.DBLigacoes dbRec) // Track 002.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var ligacoes = new LigacoesResponse
        {
            Id = dbRec.ID,
            Assunto = dbRec.FAssunto ?? string.Empty,
            AgeClienteAvisado = dbRec.FAgeClienteAvisado,
            Celular = dbRec.FCelular,
            Cliente = dbRec.FCliente,
            Contato = dbRec.FContato ?? string.Empty,
            QuemID = dbRec.FQuemID,
            Telefonista = dbRec.FTelefonista,
            Nome = dbRec.FNome ?? string.Empty,
            QuemCodigo = dbRec.FQuemCodigo,
            Solicitante = dbRec.FSolicitante,
            Para = dbRec.FPara ?? string.Empty,
            Fone = dbRec.FFone ?? string.Empty,
            Ramal = dbRec.FRamal,
            Particular = dbRec.FParticular,
            Realizada = dbRec.FRealizada,
            Status = dbRec.FStatus ?? string.Empty,
            Urgente = dbRec.FUrgente,
            LigarPara = dbRec.FLigarPara ?? string.Empty,
            Processo = dbRec.FProcesso,
            StartScreen = dbRec.FStartScreen,
            Emotion = dbRec.FEmotion,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataRealizada, out DateTime XDataRealizada))
        {
            ligacoes.DataRealizada = dbRec.FDataRealizada;
            ligacoes.DataRealizada_date = XDataRealizada;
        }

        if (DateTime.TryParse(dbRec.FUltimoAviso, out DateTime XUltimoAviso))
        {
            ligacoes.UltimoAviso = dbRec.FUltimoAviso;
            ligacoes.UltimoAviso_date = XUltimoAviso;
        }

        if (DateTime.TryParse(dbRec.FHoraFinal, out DateTime XHoraFinal))
        {
            ligacoes.HoraFinal = dbRec.FHoraFinal;
            ligacoes.HoraFinal_date = XHoraFinal;
        }

        if (DateTime.TryParse(dbRec.FData, out DateTime XData))
        {
            ligacoes.Data = dbRec.FData;
            ligacoes.Data_date = XData;
        }

        if (DateTime.TryParse(dbRec.FHora, out DateTime XHora))
        {
            ligacoes.Hora = dbRec.FHora;
            ligacoes.Hora_date = XHora;
        }

        return ligacoes;
    }

    public LigacoesResponseAll? ReadAll(FLigacoes dbRec, IDataRecord dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var ligacoes = new LigacoesResponseAll
        {
            Id = dbRec.ID,
            Assunto = dbRec.FAssunto ?? string.Empty,
            AgeClienteAvisado = dbRec.FAgeClienteAvisado,
            Celular = dbRec.FCelular,
            Cliente = dbRec.FCliente,
            Contato = dbRec.FContato ?? string.Empty,
            QuemID = dbRec.FQuemID,
            Telefonista = dbRec.FTelefonista,
            Nome = dbRec.FNome ?? string.Empty,
            QuemCodigo = dbRec.FQuemCodigo,
            Solicitante = dbRec.FSolicitante,
            Para = dbRec.FPara ?? string.Empty,
            Fone = dbRec.FFone ?? string.Empty,
            Ramal = dbRec.FRamal,
            Particular = dbRec.FParticular,
            Realizada = dbRec.FRealizada,
            Status = dbRec.FStatus ?? string.Empty,
            Urgente = dbRec.FUrgente,
            LigarPara = dbRec.FLigarPara ?? string.Empty,
            Processo = dbRec.FProcesso,
            StartScreen = dbRec.FStartScreen,
            Emotion = dbRec.FEmotion,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataRealizada, out DateTime XDataRealizada))
        {
            ligacoes.DataRealizada = dbRec.FDataRealizada;
            ligacoes.DataRealizada_date = XDataRealizada;
        }

        if (DateTime.TryParse(dbRec.FUltimoAviso, out DateTime XUltimoAviso))
        {
            ligacoes.UltimoAviso = dbRec.FUltimoAviso;
            ligacoes.UltimoAviso_date = XUltimoAviso;
        }

        if (DateTime.TryParse(dbRec.FHoraFinal, out DateTime XHoraFinal))
        {
            ligacoes.HoraFinal = dbRec.FHoraFinal;
            ligacoes.HoraFinal_date = XHoraFinal;
        }

        if (DateTime.TryParse(dbRec.FData, out DateTime XData))
        {
            ligacoes.Data = dbRec.FData;
            ligacoes.Data_date = XData;
        }

        if (DateTime.TryParse(dbRec.FHora, out DateTime XHora))
        {
            ligacoes.Hora = dbRec.FHora;
            ligacoes.Hora_date = XHora;
        }

        try
        {
            ligacoes.NomeClientes = dr[DBClientesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            ligacoes.NomeRamal = dr[DBRamalDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            ligacoes.NroPastaProcessos = dr[DBProcessosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return ligacoes;
    }

    public LigacoesResponseAll? ReadAll(SG.GerAdv.DBLigacoes dbRec, DataRow dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var ligacoes = new LigacoesResponseAll
        {
            Id = dbRec.ID,
            Assunto = dbRec.FAssunto ?? string.Empty,
            AgeClienteAvisado = dbRec.FAgeClienteAvisado,
            Celular = dbRec.FCelular,
            Cliente = dbRec.FCliente,
            Contato = dbRec.FContato ?? string.Empty,
            QuemID = dbRec.FQuemID,
            Telefonista = dbRec.FTelefonista,
            Nome = dbRec.FNome ?? string.Empty,
            QuemCodigo = dbRec.FQuemCodigo,
            Solicitante = dbRec.FSolicitante,
            Para = dbRec.FPara ?? string.Empty,
            Fone = dbRec.FFone ?? string.Empty,
            Ramal = dbRec.FRamal,
            Particular = dbRec.FParticular,
            Realizada = dbRec.FRealizada,
            Status = dbRec.FStatus ?? string.Empty,
            Urgente = dbRec.FUrgente,
            LigarPara = dbRec.FLigarPara ?? string.Empty,
            Processo = dbRec.FProcesso,
            StartScreen = dbRec.FStartScreen,
            Emotion = dbRec.FEmotion,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataRealizada, out DateTime XDataRealizada))
        {
            ligacoes.DataRealizada = dbRec.FDataRealizada;
            ligacoes.DataRealizada_date = XDataRealizada;
        }

        if (DateTime.TryParse(dbRec.FUltimoAviso, out DateTime XUltimoAviso))
        {
            ligacoes.UltimoAviso = dbRec.FUltimoAviso;
            ligacoes.UltimoAviso_date = XUltimoAviso;
        }

        if (DateTime.TryParse(dbRec.FHoraFinal, out DateTime XHoraFinal))
        {
            ligacoes.HoraFinal = dbRec.FHoraFinal;
            ligacoes.HoraFinal_date = XHoraFinal;
        }

        if (DateTime.TryParse(dbRec.FData, out DateTime XData))
        {
            ligacoes.Data = dbRec.FData;
            ligacoes.Data_date = XData;
        }

        if (DateTime.TryParse(dbRec.FHora, out DateTime XHora))
        {
            ligacoes.Hora = dbRec.FHora;
            ligacoes.Hora_date = XHora;
        }

        try
        {
            ligacoes.NomeClientes = dr[DBClientesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            ligacoes.NomeRamal = dr[DBRamalDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            ligacoes.NroPastaProcessos = dr[DBProcessosDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return ligacoes;
    }
}