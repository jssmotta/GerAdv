// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class HorasTrabService
{
    public (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterHorasTrab? filtro)
    {
        if (filtro == null)
            return null;
        var parameters = new List<SqlParameter>();
        if (!string.IsNullOrWhiteSpace(filtro.GUID))
        {
            parameters.Add(new($"@{(DBHorasTrabDicInfo.GUID)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.GUID)));
        }

        if (filtro.IDContatoCRM != int.MinValue)
        {
            parameters.Add(new($"@{(DBHorasTrabDicInfo.IDContatoCRM)}", filtro.IDContatoCRM));
            if (filtro.IDContatoCRM_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBHorasTrabDicInfo.IDContatoCRM)}_end", filtro.IDContatoCRM_end));
            }
        }

        if (filtro.Honorario != int.MinValue)
        {
            parameters.Add(new($"@{(DBHorasTrabDicInfo.Honorario)}", filtro.Honorario));
        }

        if (filtro.IDAgenda != int.MinValue)
        {
            parameters.Add(new($"@{(DBHorasTrabDicInfo.IDAgenda)}", filtro.IDAgenda));
            if (filtro.IDAgenda_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBHorasTrabDicInfo.IDAgenda)}_end", filtro.IDAgenda_end));
            }
        }

        if (!string.IsNullOrWhiteSpace(filtro.Data))
        {
            parameters.Add(new($"@{(DBHorasTrabDicInfo.Data)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Data)));
        }

        if (filtro.Cliente != int.MinValue)
        {
            parameters.Add(new($"@{(DBHorasTrabDicInfo.Cliente)}", filtro.Cliente));
            if (filtro.Cliente_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBHorasTrabDicInfo.Cliente)}_end", filtro.Cliente_end));
            }
        }

        if (filtro.Status != int.MinValue)
        {
            parameters.Add(new($"@{(DBHorasTrabDicInfo.Status)}", filtro.Status));
            if (filtro.Status_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBHorasTrabDicInfo.Status)}_end", filtro.Status_end));
            }
        }

        if (filtro.Processo != int.MinValue)
        {
            parameters.Add(new($"@{(DBHorasTrabDicInfo.Processo)}", filtro.Processo));
            if (filtro.Processo_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBHorasTrabDicInfo.Processo)}_end", filtro.Processo_end));
            }
        }

        if (filtro.Advogado != int.MinValue)
        {
            parameters.Add(new($"@{(DBHorasTrabDicInfo.Advogado)}", filtro.Advogado));
            if (filtro.Advogado_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBHorasTrabDicInfo.Advogado)}_end", filtro.Advogado_end));
            }
        }

        if (filtro.Funcionario != int.MinValue)
        {
            parameters.Add(new($"@{(DBHorasTrabDicInfo.Funcionario)}", filtro.Funcionario));
            if (filtro.Funcionario_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBHorasTrabDicInfo.Funcionario)}_end", filtro.Funcionario_end));
            }
        }

        if (!string.IsNullOrWhiteSpace(filtro.HrIni))
        {
            parameters.Add(new($"@{(DBHorasTrabDicInfo.HrIni)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.HrIni)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.HrFim))
        {
            parameters.Add(new($"@{(DBHorasTrabDicInfo.HrFim)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.HrFim)));
        }

        if (filtro.Tempo != decimal.MinValue)
        {
            parameters.Add(new($"@{(DBHorasTrabDicInfo.Tempo)}", filtro.Tempo));
            if (filtro.Tempo_end != decimal.MinValue)
            {
                parameters.Add(new($"@{(DBHorasTrabDicInfo.Tempo)}_end", filtro.Tempo_end));
            }
        }

        if (filtro.Valor != decimal.MinValue)
        {
            parameters.Add(new($"@{(DBHorasTrabDicInfo.Valor)}", filtro.Valor));
            if (filtro.Valor_end != decimal.MinValue)
            {
                parameters.Add(new($"@{(DBHorasTrabDicInfo.Valor)}_end", filtro.Valor_end));
            }
        }

        if (!string.IsNullOrWhiteSpace(filtro.OBS))
        {
            parameters.Add(new($"@{(DBHorasTrabDicInfo.OBS)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.OBS)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Anexo))
        {
            parameters.Add(new($"@{(DBHorasTrabDicInfo.Anexo)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Anexo)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.AnexoComp))
        {
            parameters.Add(new($"@{(DBHorasTrabDicInfo.AnexoComp)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.AnexoComp)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.AnexoUNC))
        {
            parameters.Add(new($"@{(DBHorasTrabDicInfo.AnexoUNC)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.AnexoUNC)));
        }

        if (filtro.Servico != int.MinValue)
        {
            parameters.Add(new($"@{(DBHorasTrabDicInfo.Servico)}", filtro.Servico));
            if (filtro.Servico_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBHorasTrabDicInfo.Servico)}_end", filtro.Servico_end));
            }
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{(DBHorasTrabDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
            if (filtro.Codigo_filtro_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBHorasTrabDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
            }
        }

        if (filtro.LogicalOperator.IsEmptyX() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        cWhere.Append(filtro.GUID.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].[{DBHorasTrabDicInfo.GUID}]  {DevourerConsts.MsiCollate} like @{(DBHorasTrabDicInfo.GUID)}");
        if (!(filtro.IDContatoCRM.IsEmptyX()) && filtro.IDContatoCRM_end.IsEmptyX())
        {
            cWhere.Append(filtro.IDContatoCRM.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].[{DBHorasTrabDicInfo.IDContatoCRM}] = @{(DBHorasTrabDicInfo.IDContatoCRM)}");
        }
        else if (!(filtro.IDContatoCRM.IsEmptyX()) && !(filtro.IDContatoCRM_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].{DBHorasTrabDicInfo.IDContatoCRM} BETWEEN @{(DBHorasTrabDicInfo.IDContatoCRM)} AND @{(DBHorasTrabDicInfo.IDContatoCRM)}_end");
        }

        cWhere.Append(filtro.Honorario == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].[{DBHorasTrabDicInfo.Honorario}] = @{(DBHorasTrabDicInfo.Honorario)}");
        if (!(filtro.IDAgenda.IsEmptyX()) && filtro.IDAgenda_end.IsEmptyX())
        {
            cWhere.Append(filtro.IDAgenda.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].[{DBHorasTrabDicInfo.IDAgenda}] = @{(DBHorasTrabDicInfo.IDAgenda)}");
        }
        else if (!(filtro.IDAgenda.IsEmptyX()) && !(filtro.IDAgenda_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].{DBHorasTrabDicInfo.IDAgenda} BETWEEN @{(DBHorasTrabDicInfo.IDAgenda)} AND @{(DBHorasTrabDicInfo.IDAgenda)}_end");
        }

        cWhere.Append(filtro.Data.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].[{DBHorasTrabDicInfo.Data}]  {DevourerConsts.MsiCollate} like @{(DBHorasTrabDicInfo.Data)}");
        if (!(filtro.Cliente.IsEmptyX()) && filtro.Cliente_end.IsEmptyX())
        {
            cWhere.Append(filtro.Cliente.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].[{DBHorasTrabDicInfo.Cliente}] = @{(DBHorasTrabDicInfo.Cliente)}");
        }
        else if (!(filtro.Cliente.IsEmptyX()) && !(filtro.Cliente_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].{DBHorasTrabDicInfo.Cliente} BETWEEN @{(DBHorasTrabDicInfo.Cliente)} AND @{(DBHorasTrabDicInfo.Cliente)}_end");
        }

        if (!(filtro.Status.IsEmptyX()) && filtro.Status_end.IsEmptyX())
        {
            cWhere.Append(filtro.Status.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].[{DBHorasTrabDicInfo.Status}] = @{(DBHorasTrabDicInfo.Status)}");
        }
        else if (!(filtro.Status.IsEmptyX()) && !(filtro.Status_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].{DBHorasTrabDicInfo.Status} BETWEEN @{(DBHorasTrabDicInfo.Status)} AND @{(DBHorasTrabDicInfo.Status)}_end");
        }

        if (!(filtro.Processo.IsEmptyX()) && filtro.Processo_end.IsEmptyX())
        {
            cWhere.Append(filtro.Processo.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].[{DBHorasTrabDicInfo.Processo}] = @{(DBHorasTrabDicInfo.Processo)}");
        }
        else if (!(filtro.Processo.IsEmptyX()) && !(filtro.Processo_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].{DBHorasTrabDicInfo.Processo} BETWEEN @{(DBHorasTrabDicInfo.Processo)} AND @{(DBHorasTrabDicInfo.Processo)}_end");
        }

        if (!(filtro.Advogado.IsEmptyX()) && filtro.Advogado_end.IsEmptyX())
        {
            cWhere.Append(filtro.Advogado.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].[{DBHorasTrabDicInfo.Advogado}] = @{(DBHorasTrabDicInfo.Advogado)}");
        }
        else if (!(filtro.Advogado.IsEmptyX()) && !(filtro.Advogado_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].{DBHorasTrabDicInfo.Advogado} BETWEEN @{(DBHorasTrabDicInfo.Advogado)} AND @{(DBHorasTrabDicInfo.Advogado)}_end");
        }

        if (!(filtro.Funcionario.IsEmptyX()) && filtro.Funcionario_end.IsEmptyX())
        {
            cWhere.Append(filtro.Funcionario.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].[{DBHorasTrabDicInfo.Funcionario}] = @{(DBHorasTrabDicInfo.Funcionario)}");
        }
        else if (!(filtro.Funcionario.IsEmptyX()) && !(filtro.Funcionario_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].{DBHorasTrabDicInfo.Funcionario} BETWEEN @{(DBHorasTrabDicInfo.Funcionario)} AND @{(DBHorasTrabDicInfo.Funcionario)}_end");
        }

        cWhere.Append(filtro.HrIni.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].[{DBHorasTrabDicInfo.HrIni}]  {DevourerConsts.MsiCollate} like @{(DBHorasTrabDicInfo.HrIni)}");
        cWhere.Append(filtro.HrFim.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].[{DBHorasTrabDicInfo.HrFim}]  {DevourerConsts.MsiCollate} like @{(DBHorasTrabDicInfo.HrFim)}");
        if (!(filtro.Tempo == decimal.MinValue) && filtro.Tempo_end == decimal.MinValue)
        {
            cWhere.Append(filtro.Tempo == decimal.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].[{DBHorasTrabDicInfo.Tempo}] = @{(DBHorasTrabDicInfo.Tempo)}");
        }
        else if (!(filtro.Tempo == decimal.MinValue) && !(filtro.Tempo_end == decimal.MinValue))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].{DBHorasTrabDicInfo.Tempo} BETWEEN @{(DBHorasTrabDicInfo.Tempo)} AND @{(DBHorasTrabDicInfo.Tempo)}_end");
        }

        if (!(filtro.Valor == decimal.MinValue) && filtro.Valor_end == decimal.MinValue)
        {
            cWhere.Append(filtro.Valor == decimal.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].[{DBHorasTrabDicInfo.Valor}] = @{(DBHorasTrabDicInfo.Valor)}");
        }
        else if (!(filtro.Valor == decimal.MinValue) && !(filtro.Valor_end == decimal.MinValue))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].{DBHorasTrabDicInfo.Valor} BETWEEN @{(DBHorasTrabDicInfo.Valor)} AND @{(DBHorasTrabDicInfo.Valor)}_end");
        }

        cWhere.Append(filtro.OBS.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].[{DBHorasTrabDicInfo.OBS}]  {DevourerConsts.MsiCollate} like @{(DBHorasTrabDicInfo.OBS)}");
        cWhere.Append(filtro.Anexo.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].[{DBHorasTrabDicInfo.Anexo}]  {DevourerConsts.MsiCollate} like @{(DBHorasTrabDicInfo.Anexo)}");
        cWhere.Append(filtro.AnexoComp.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].[{DBHorasTrabDicInfo.AnexoComp}]  {DevourerConsts.MsiCollate} like @{(DBHorasTrabDicInfo.AnexoComp)}");
        cWhere.Append(filtro.AnexoUNC.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].[{DBHorasTrabDicInfo.AnexoUNC}]  {DevourerConsts.MsiCollate} like @{(DBHorasTrabDicInfo.AnexoUNC)}");
        if (!(filtro.Servico.IsEmptyX()) && filtro.Servico_end.IsEmptyX())
        {
            cWhere.Append(filtro.Servico.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].[{DBHorasTrabDicInfo.Servico}] = @{(DBHorasTrabDicInfo.Servico)}");
        }
        else if (!(filtro.Servico.IsEmptyX()) && !(filtro.Servico_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].{DBHorasTrabDicInfo.Servico} BETWEEN @{(DBHorasTrabDicInfo.Servico)} AND @{(DBHorasTrabDicInfo.Servico)}_end");
        }

        if (!(filtro.Codigo_filtro.IsEmptyX()) && filtro.Codigo_filtro_end.IsEmptyX())
        {
            cWhere.Append(filtro.Codigo_filtro.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].[{DBHorasTrabDicInfo.CampoCodigo}] = @{(DBHorasTrabDicInfo.CampoCodigo)}");
        }
        else if (!(filtro.Codigo_filtro.IsEmptyX()) && !(filtro.Codigo_filtro_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBHorasTrabDicInfo.PTabelaNome}].{DBHorasTrabDicInfo.CampoCodigo} BETWEEN @{(DBHorasTrabDicInfo.CampoCodigo)} AND @{(DBHorasTrabDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private string GetFilterHash(Filters.FilterHorasTrab? filtro)
    {
        if (filtro == null)
            return string.Empty;
        var json = JsonSerializer.Serialize(filtro);
        using var sha256 = SHA256.Create();
        var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(json));
        return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
    }

    public async Task<IEnumerable<NomeID>> GetListN([FromQuery] int max, [FromBody] Filters.FilterHorasTrab? filtro, [FromRoute, Required] string uri, CancellationToken token)
    {
        // Tracking: 20250606-0
        ThrowIfDisposed();
        var filtroResult = filtro == null ? null : WFiltro(filtro!);
        string where = filtroResult?.where ?? string.Empty;
        List<SqlParameter> parameters = filtroResult?.parametros ?? [];
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new Exception($"Coneão nula.");
        }

        var keyCache = await reader.ReadStringAuditor(max, uri, "", [], oCnn);
        var cacheKey = $"{uri}-HorasTrab-{max}-{where.GetHashCode()}-GetListN-{keyCache}";
        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId)
        };
        return await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataListNAsync(max, uri, where, parameters, cancel), entryOptions, cancellationToken: token) ?? [];
    }

    private async Task<IEnumerable<NomeID>> GetDataListNAsync(int max, string uri, string where, List<SqlParameter> parameters, CancellationToken token)
    {
        var result = new List<NomeID>(max);
        var lista = await reader.ListarN(max, uri, where, parameters, DBHorasTrabDicInfo.CampoNome);
        foreach (var item in lista)
        {
            if (token.IsCancellationRequested)
                break;
            if (item?.FNome != null)
            {
                result.Add(new NomeID { Nome = item.FNome, ID = item.ID });
            }
        }

        return result;
    }

    private async Task<IEnumerable<HorasTrabResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}