// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class GUTAtividadesValidationTests : IDisposable
{
    private readonly GUTAtividadesValidation _validation;
    private readonly Mock<IGUTAtividadesService> _mockGUTAtividadesService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IGUTPeriodicidadeReader> _mockGUTPeriodicidadeReader;
    private readonly Mock<IOperadorReader> _mockOperadorReader;
    private readonly GUTAtividadesService _service;
    private readonly string _validUri = "test-uri";
    public GUTAtividadesValidationTests()
    {
        _validation = new GUTAtividadesValidation();
        _mockGUTAtividadesService = new Mock<IGUTAtividadesService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockGUTPeriodicidadeReader = new Mock<IGUTPeriodicidadeReader>();
        _mockOperadorReader = new Mock<IOperadorReader>();
    }

#region Class Structure Tests
    [Fact]
    public void GUTAtividadesValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IGUTAtividadesValidation>();
    }

    [Fact]
    public void GUTAtividadesValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(GUTAtividadesValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void GUTAtividadesValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(GUTAtividadesValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private static Models.GUTAtividades CreateValidGUTAtividades()
    {
        return new Models.GUTAtividades
        {
            Id = 1,
            Nome = "João",
            Observacao = "Observação teste",
            GUTGrupo = 0,
            GUTPeriodicidade = 1,
            Operador = 0,
            Concluido = false,
            DataConcluido = "24/04/1975",
            DiasParaIniciar = 0,
            MinutosParaRealizar = 0,
            GUID = Guid.NewGuid().ToString()
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockGUTAtividadesService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterGUTAtividades>(), It.IsAny<string>())).ReturnsAsync([]);
        // Setup other mocks but don't override the GUTAtividadess service mock
        _ = _mockGUTPeriodicidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new GUTPeriodicidadeResponse { Id = id }));
        _ = _mockOperadorReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new OperadorResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockGUTAtividadesService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterGUTAtividades>(), It.IsAny<string>())).ReturnsAsync([]);
        // Setup other mocks but don't override the GUTAtividadess service mock
        _ = _mockGUTPeriodicidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new GUTPeriodicidadeResponse { Id = 0 }));
        _ = _mockOperadorReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new OperadorResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var gutatividades = new Models.GUTAtividades
        {
            Id = 1,
            Nome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Observacao = null,
            GUTPeriodicidade = 1,
            DataConcluido = null,
            GUID = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(gutatividades, _mockGUTAtividadesService.Object, _mockGUTPeriodicidadeReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockGUTAtividadesService.Object, _mockGUTPeriodicidadeReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region ValidateReg Required Nome Method Tests 
    [Fact]
    public async Task ValidateReg_WithEmptyNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var gutatividades = CreateValidGUTAtividades();
        gutatividades.Nome = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(gutatividades, _mockGUTAtividadesService.Object, _mockGUTPeriodicidadeReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var gutatividades = CreateValidGUTAtividades();
        gutatividades.Nome = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(gutatividades, _mockGUTAtividadesService.Object, _mockGUTPeriodicidadeReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataNome_ShouldReturnTrue()
    {
        // Arrange
        var gutatividades = CreateValidGUTAtividades();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(gutatividades, _mockGUTAtividadesService.Object, _mockGUTPeriodicidadeReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var gutatividades = CreateValidGUTAtividades();
        gutatividades.Nome = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(gutatividades, _mockGUTAtividadesService.Object, _mockGUTPeriodicidadeReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
#region ValidateReg Required GUID Method Tests 
    [Fact]
    public async Task ValidateReg_WithEmptyGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var gutatividades = CreateValidGUTAtividades();
        gutatividades.GUID = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(gutatividades, _mockGUTAtividadesService.Object, _mockGUTPeriodicidadeReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var gutatividades = CreateValidGUTAtividades();
        gutatividades.GUID = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(gutatividades, _mockGUTAtividadesService.Object, _mockGUTPeriodicidadeReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataGUID_ShouldReturnTrue()
    {
        // Arrange
        var gutatividades = CreateValidGUTAtividades();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(gutatividades, _mockGUTAtividadesService.Object, _mockGUTPeriodicidadeReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var gutatividades = CreateValidGUTAtividades();
        gutatividades.GUID = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(gutatividades, _mockGUTAtividadesService.Object, _mockGUTPeriodicidadeReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
#region DataConcluido Validation Tests
    [Theory]
    [InlineData("01/01/1899")]
    [InlineData("31/12/1899")]
    public async Task ValidateReg_WithDataConcluidoBeforeMinDate_ShouldThrowSGValidationException(string invalidDate)
    {
        // Arrange
        var gutatividades = CreateValidGUTAtividades();
        gutatividades.DataConcluido = invalidDate;
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(gutatividades, _mockGUTAtividadesService.Object, _mockGUTPeriodicidadeReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("01/01/1900.");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataConcluido_ShouldPass()
    {
        // Arrange
        var gutatividades = CreateValidGUTAtividades();
        gutatividades.DataConcluido = "01/01/1990";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(gutatividades, _mockGUTAtividadesService.Object, _mockGUTPeriodicidadeReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullDataConcluido_ShouldPass()
    {
        // Arrange
        var gutatividades = CreateValidGUTAtividades();
        gutatividades.DataConcluido = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(gutatividades, _mockGUTAtividadesService.Object, _mockGUTPeriodicidadeReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithInvalidDateDataConcluidoFormat_ShouldPass()
    {
        // Arrange
        var gutatividades = CreateValidGUTAtividades();
        gutatividades.DataConcluido = "invalid-date";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(gutatividades, _mockGUTAtividadesService.Object, _mockGUTPeriodicidadeReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue(); // Invalid format is ignored, not validated
    }

    [Fact]
    public async Task ValidateReg_WithEmptyDataConcluido_ShouldPass()
    {
        // Arrange
        var gutatividades = CreateValidGUTAtividades();
        gutatividades.DataConcluido = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(gutatividades, _mockGUTAtividadesService.Object, _mockGUTPeriodicidadeReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region Foreign Key Validation Tests - GUTPeriodicidade
    [Fact]
    public async Task ValidateReg_WithInvalidGUTPeriodicidade_ShouldThrowSGValidationException()
    {
        // Arrange
        var gutatividades = CreateValidGUTAtividades();
        gutatividades.GUTPeriodicidade = 999;
        _mockGUTPeriodicidadeReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.GUTPeriodicidadeResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(gutatividades, _mockGUTAtividadesService.Object, _mockGUTPeriodicidadeReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedGUTPeriodicidadeId_ShouldThrowSGValidationException()
    {
        // Arrange
        var gutatividades = CreateValidGUTAtividades();
        gutatividades.GUTPeriodicidade = 999;
        var reg888 = new Models.Response.GUTPeriodicidadeResponse
        {
            Id = 888
        }; // Different ID
        _mockGUTPeriodicidadeReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(gutatividades, _mockGUTAtividadesService.Object, _mockGUTPeriodicidadeReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidGUTPeriodicidade_ShouldPass()
    {
        // Arrange
        var gutatividades = CreateValidGUTAtividades();
        gutatividades.GUTPeriodicidade = 123;
        var reg123 = new Models.Response.GUTPeriodicidadeResponse
        {
            Id = 123
        };
        _mockGUTPeriodicidadeReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(gutatividades, _mockGUTAtividadesService.Object, _mockGUTPeriodicidadeReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region Foreign Key Validation Tests - Operador
    [Fact]
    public async Task ValidateReg_WithInvalidOperador_ShouldThrowSGValidationException()
    {
        // Arrange
        var gutatividades = CreateValidGUTAtividades();
        gutatividades.Operador = 999;
        _mockOperadorReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.OperadorResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(gutatividades, _mockGUTAtividadesService.Object, _mockGUTPeriodicidadeReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedOperadorId_ShouldThrowSGValidationException()
    {
        // Arrange
        var gutatividades = CreateValidGUTAtividades();
        gutatividades.Operador = 999;
        var reg888 = new Models.Response.OperadorResponse
        {
            Id = 888
        }; // Different ID
        _mockOperadorReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(gutatividades, _mockGUTAtividadesService.Object, _mockGUTPeriodicidadeReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidOperador_ShouldPass()
    {
        // Arrange
        var gutatividades = CreateValidGUTAtividades();
        gutatividades.Operador = 123;
        var reg123 = new Models.Response.OperadorResponse
        {
            Id = 123
        };
        _mockOperadorReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(gutatividades, _mockGUTAtividadesService.Object, _mockGUTPeriodicidadeReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyOperador_ShouldPass()
    {
        // Arrange
        var gutatividades = CreateValidGUTAtividades();
        gutatividades.Operador = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(gutatividades, _mockGUTAtividadesService.Object, _mockGUTPeriodicidadeReader.Object, _mockOperadorReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockOperadorReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}