// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// ============================================
// ARQUIVO: DBUpdateTests.cs.txt (Principal)
// ============================================
namespace MenphisSI.GerAdv.Tests;
public class DBTribunalUpdate : IDisposable
{
    private readonly DBTribunal _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    public DBTribunalUpdate()
    {
        _instance = new DBTribunal();
        _mockConnection = new Mock<MsiSqlConnection>();
    }

    [Fact]
    public void DefaultConstructor_ShouldCreateInstance_WithDefaultValues()
    {
        // Act
        var tribunal = new DBTribunal();
        // Assert
        tribunal.Should().NotBeNull();
        tribunal.ITabelaName().Should().Be("Tribunal");
        tribunal.ID.Should().Be(0);
    }

    [Fact]
    public void AllProperties_WithValidValues_ShouldSetCorrectly()
    {
        // Arrange
        var tribunal = new DBTribunal
        {
            FNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FGUID = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FDescricao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            FSigla = "AAAAAAAAAAAAAAAAAAAA",
            FWeb = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        };
        // Assert - All properties should be set tribunal.FNome.Should().Be( "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        tribunal.FGUID.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        tribunal.FDescricao.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        tribunal.FSigla.Should().Be("AAAAAAAAAAAAAAAAAAAA");
        tribunal.FWeb.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public void StringProperties_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var tribunal = new DBTribunal();
        var longString = new string ('X', 300);
        tribunal.FNome = longString; // MAX: 50
        tribunal.FGUID = longString; // MAX: 100
        tribunal.FDescricao = longString; // MAX: 50
        tribunal.FSigla = longString; // MAX: 20
        tribunal.FWeb = longString; // MAX: 255
        // Assert - All properties should be set tribunal.FNome.Should().HaveLength(50);
        tribunal.FGUID.Should().HaveLength(100);
        tribunal.FDescricao.Should().HaveLength(50);
        tribunal.FSigla.Should().HaveLength(20);
        tribunal.FWeb.Should().HaveLength(255);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNome_Property_ShouldAcceptValidNames(string Nome)
    {
        // Arrange
        var tribunal = new DBTribunal
        {
            // Act
            FNome = Nome
        };
        // Assert
        tribunal.FNome.Should().Be(Nome);
    }

    [Fact]
    public void FNome_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var tribunal = new DBTribunal
        {
            // Act
            FNome = null
        };
        // Assert
        tribunal.FNome.Should().Be(string.Empty);
    }

    [Fact]
    public void SqlWhereConstructor_WithNullConnection_ShouldNotThrow()
    {
        // Arrange
        var sqlWhere = "triCodigo = 1";
        // Act & Assert
        var Tribunal = new DBTribunal(sqlWhere, null);
        Tribunal.Should().NotBeNull();
    }

    [Fact]
    public void ParameterizedConstructor_WithNullConnection_ShouldReturnEarly()
    {
        // Arrange
        var parameters = new List<SqlParameter>();
        var nome = "TesteNome";
        // Act
        var tribunal = new DBTribunal(parameters, nome, null);
        // Assert
        tribunal.Should().NotBeNull();
        tribunal.ID.Should().Be(0); // Should not have loaded any data
    }

    [Fact]
    public void FNome_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var tribunal = new DBTribunal();
        var longName = new string ('A', 50 + 10); // Exceeds 50 character limit
        // Act
        tribunal.FNome = longName;
        // Assert
        tribunal.FNome.Should().HaveLength(50);
    }

    [Fact]
    public void FNome_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FNome = null;
        // Act
        var result = _instance.FNome;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FNome_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FNome = expectedValue;
        // Act
        var result = _instance.FNome;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FNome_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNome = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNome = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FNome = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FNome = value;
        // Act
        _instance.FNome = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = "Original Value";
        // Act
        _instance.FNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = "First Value";
        // Act
        _instance.FNome = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FNome = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FNome);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FNome_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FNome = input;
        // Assert
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void FNome_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = null;
        // Act
        _instance.FNome = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FNome_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFNome", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FNome = "Existing Value";
        // Act
        _instance.FNome = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FDescricao_Property_ShouldAcceptValidNames(string Descricao)
    {
        // Arrange
        var tribunal = new DBTribunal
        {
            // Act
            FDescricao = Descricao
        };
        // Assert
        tribunal.FDescricao.Should().Be(Descricao);
    }

    [Fact]
    public void FDescricao_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var tribunal = new DBTribunal
        {
            // Act
            FDescricao = null
        };
        // Assert
        tribunal.FDescricao.Should().Be(string.Empty);
    }

    [Fact]
    public void FDescricao_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var tribunal = new DBTribunal();
        var longName = new string ('A', 50 + 10); // Exceeds 50 character limit
        // Act
        tribunal.FDescricao = longName;
        // Assert
        tribunal.FDescricao.Should().HaveLength(50);
    }

    [Fact]
    public void FDescricao_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FDescricao = null;
        // Act
        var result = _instance.FDescricao;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FDescricao_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FDescricao = expectedValue;
        // Act
        var result = _instance.FDescricao;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FDescricao_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFDescricao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FDescricao = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FDescricao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FDescricao_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFDescricao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FDescricao = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FDescricao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FDescricao_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFDescricao", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FDescricao = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FDescricao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FDescricao_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFDescricao", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FDescricao = value;
        // Act
        _instance.FDescricao = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FDescricao_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFDescricao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FDescricao = "Original Value";
        // Act
        _instance.FDescricao = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FDescricao_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFDescricao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FDescricao = "First Value";
        // Act
        _instance.FDescricao = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FDescricao_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFDescricao", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FDescricao = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FDescricao);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FDescricao_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FDescricao = input;
        // Assert
        Assert.Equal(expected, _instance.FDescricao);
    }

    [Fact]
    public void FDescricao_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFDescricao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FDescricao = null;
        // Act
        _instance.FDescricao = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FDescricao_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFDescricao", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FDescricao = "Existing Value";
        // Act
        _instance.FDescricao = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCc")]
    public void FSigla_Property_ShouldAcceptValidNames(string Sigla)
    {
        // Arrange
        var tribunal = new DBTribunal
        {
            // Act
            FSigla = Sigla
        };
        // Assert
        tribunal.FSigla.Should().Be(Sigla);
    }

    [Fact]
    public void FSigla_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var tribunal = new DBTribunal
        {
            // Act
            FSigla = null
        };
        // Assert
        tribunal.FSigla.Should().Be(string.Empty);
    }

    [Fact]
    public void FSigla_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var tribunal = new DBTribunal();
        var longName = new string ('A', 20 + 10); // Exceeds 20 character limit
        // Act
        tribunal.FSigla = longName;
        // Assert
        tribunal.FSigla.Should().HaveLength(20);
    }

    [Fact]
    public void FSigla_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FSigla = null;
        // Act
        var result = _instance.FSigla;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FSigla_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FSigla = expectedValue;
        // Act
        var result = _instance.FSigla;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FSigla_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFSigla", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FSigla = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FSigla);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSigla_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFSigla", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FSigla = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FSigla);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FSigla_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFSigla", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FSigla = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FSigla);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSigla_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFSigla", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FSigla = value;
        // Act
        _instance.FSigla = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSigla_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFSigla", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSigla = "Original Value";
        // Act
        _instance.FSigla = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSigla_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFSigla", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSigla = "First Value";
        // Act
        _instance.FSigla = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSigla_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFSigla", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FSigla = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FSigla);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCc")]
    public void FSigla_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FSigla = input;
        // Assert
        Assert.Equal(expected, _instance.FSigla);
    }

    [Fact]
    public void FSigla_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFSigla", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSigla = null;
        // Act
        _instance.FSigla = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FSigla_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFSigla", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FSigla = "Existing Value";
        // Act
        _instance.FSigla = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FWeb_Property_ShouldAcceptValidNames(string Web)
    {
        // Arrange
        var tribunal = new DBTribunal
        {
            // Act
            FWeb = Web
        };
        // Assert
        tribunal.FWeb.Should().Be(Web);
    }

    [Fact]
    public void FWeb_WithNullValue_ShouldReturnEmptyString()
    {
        // Arrange
        var tribunal = new DBTribunal
        {
            // Act
            FWeb = null
        };
        // Assert
        tribunal.FWeb.Should().Be(string.Empty);
    }

    [Fact]
    public void FWeb_WithExcessiveLength_ShouldTruncateToMaxLength()
    {
        // Arrange
        var tribunal = new DBTribunal();
        var longName = new string ('A', 255 + 10); // Exceeds 255 character limit
        // Act
        tribunal.FWeb = longName;
        // Assert
        tribunal.FWeb.Should().HaveLength(255);
    }

    [Fact]
    public void FWeb_Get_WhenFieldIsNull_ReturnsEmptyString()
    {
        // Arrange
        _instance.FWeb = null;
        // Act
        var result = _instance.FWeb;
        // Assert
        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void FWeb_Get_WhenFieldHasValue_ReturnsValue()
    {
        // Arrange
        var expectedValue = "Test Value".Trim();
        _instance.FWeb = expectedValue;
        // Act
        var result = _instance.FWeb;
        // Assert
        Assert.Equal(expectedValue, result);
    }

    [Fact]
    public void FWeb_Set_WithNullValue_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFWeb", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FWeb = null;
        // Assert
        Assert.Equal(string.Empty, _instance.FWeb);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FWeb_Set_WithEmptyString_SetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFWeb", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FWeb = string.Empty;
        // Assert
        Assert.Equal(string.Empty, _instance.FWeb);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.False(fieldValue);
    }

    [Fact]
    public void FWeb_Set_WithValidValue_AppliesTransformationsAndSetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFWeb", BindingFlags.NonPublic | BindingFlags.Instance);
        var inputValue = "  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  ";
        var expectedValue = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
        // Act
        _instance.FWeb = inputValue;
        // Assert
        Assert.Equal(expectedValue, _instance.FWeb);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FWeb_Set_WithSameValue_SetFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFWeb", BindingFlags.NonPublic | BindingFlags.Instance);
        var value = "Test Value";
        _instance.FWeb = value;
        // Act
        _instance.FWeb = value;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FWeb_Set_WithDifferentValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFWeb", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FWeb = "Original Value";
        // Act
        _instance.FWeb = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FWeb_Set_MultipleTimes_FlagRemainsTrue()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFWeb", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FWeb = "First Value";
        // Act
        _instance.FWeb = "Second Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FWeb_Set_WithWhitespaceOnly_AppliesTrimAndSetsEmptyString()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFWeb", BindingFlags.NonPublic | BindingFlags.Instance);
        // Act
        _instance.FWeb = "   ";
        // Assert
        Assert.Equal(string.Empty, _instance.FWeb);
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Theory]
    [InlineData("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")]
    [InlineData("  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB  ", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")]
    [InlineData("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc")]
    public void FWeb_Set_AppliesFixAbcTransformation(string input, string expected)
    {
        // Act
        _instance.FWeb = input;
        // Assert
        Assert.Equal(expected, _instance.FWeb);
    }

    [Fact]
    public void FWeb_Set_FromNullToValue_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFWeb", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FWeb = null;
        // Act
        _instance.FWeb = "New Value";
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

    [Fact]
    public void FWeb_Set_FromValueToNull_SetsFlag()
    {
        // Arrange
        var fieldInfo = typeof(DBTribunal).GetField("pFldFWeb", BindingFlags.NonPublic | BindingFlags.Instance);
        _instance.FWeb = "Existing Value";
        // Act
        _instance.FWeb = null;
        // Assert
        var fieldValueObj = fieldInfo?.GetValue(_instance);
        var fieldValue = fieldValueObj is bool b ? b : false;
        Assert.True(fieldValue);
    }

#region Testes de GUID
    [Fact]
    public void GUID_DefaultValue_ShouldBeEmpty()
    {
        Assert.Equal(string.Empty, _instance.FGUID);
    }

    [Fact]
    public void GUID_SetValidGUID_ShouldStore()
    {
        var guid = Guid.NewGuid().ToString();
        _instance.FGUID = guid;
        Assert.Equal(guid, _instance.FGUID);
    }

#endregion
    [Fact]
    public void TabelaNome_Property_ShouldReturnCorrectTableName()
    {
        // Arrange
        var tribunal = new DBTribunal();
        // Act & Assert
        tribunal.TabelaNome.Should().Be("Tribunal");
    }

    public virtual void Dispose()
    {
    // Cleanup resources if needed
    }
}