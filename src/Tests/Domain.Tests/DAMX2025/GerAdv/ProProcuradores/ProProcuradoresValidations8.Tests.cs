// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class ProProcuradoresValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFProProcuradoresFactory> _mockProProcuradoresFactory;
    private readonly Mock<IProProcuradoresReader> _mockReader;
    private readonly ProProcuradoresValidation _validation;
    private readonly Mock<IProProcuradoresService> _mockProProcuradoresService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IAdvogadosReader> _mockAdvogadosReader;
    private readonly ProProcuradoresService _service;
    private readonly string _validUri = "test-uri";
    public ProProcuradoresValidationTests()
    {
        _mockProProcuradoresFactory = new Mock<IFProProcuradoresFactory>();
        _mockReader = new Mock<IProProcuradoresReader>();
        _validation = new ProProcuradoresValidation();
        _mockProProcuradoresService = new Mock<IProProcuradoresService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockAdvogadosReader = new Mock<IAdvogadosReader>();
    }

#region Class Structure Tests
    [Fact]
    public void ProProcuradoresValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IProProcuradoresValidation>();
    }

    [Fact]
    public void ProProcuradoresValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(ProProcuradoresValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void ProProcuradoresValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(ProProcuradoresValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.ProProcuradores CreateValidProProcuradores()
    {
        return new Models.ProProcuradores
        {
            Id = 1,
            Advogado = 0,
            Nome = "João",
            Processo = 0,
            Data = "27/05/2022",
            Substabelecimento = false,
            Procuracao = true
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockProProcuradoresService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterProProcuradores>(), It.IsAny<string>())).ReturnsAsync(new List<ProProcuradoresResponseAll>());
        // Setup other mocks but don't override the ProProcuradoress service mock
        _mockAdvogadosReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.AdvogadosResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockProProcuradoresService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterProProcuradores>(), It.IsAny<string>())).ReturnsAsync(new List<ProProcuradoresResponseAll>());
        // Setup other mocks but don't override the ProProcuradoress service mock
        _mockAdvogadosReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.AdvogadosResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var proprocuradores = new Models.ProProcuradores
        {
            Id = 1,
            Nome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Data = null,
            Substabelecimento = false,
            Procuracao = true
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(proprocuradores, _mockProProcuradoresService.Object, _mockAdvogadosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockProProcuradoresService.Object, _mockAdvogadosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region Foreign Key Validation Tests - Advogados
    [Fact]
    public async Task ValidateReg_WithInvalidAdvogados_ShouldThrowSGValidationException()
    {
        // Arrange
        var proprocuradores = CreateValidProProcuradores();
        proprocuradores.Advogado = 999;
        _mockAdvogadosReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.AdvogadosResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(proprocuradores, _mockProProcuradoresService.Object, _mockAdvogadosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedAdvogadosId_ShouldThrowSGValidationException()
    {
        // Arrange
        var proprocuradores = CreateValidProProcuradores();
        proprocuradores.Advogado = 999;
        var reg888 = new Models.Response.AdvogadosResponse
        {
            Id = 888
        }; // Different ID
        _mockAdvogadosReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(proprocuradores, _mockProProcuradoresService.Object, _mockAdvogadosReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidAdvogados_ShouldPass()
    {
        // Arrange
        var proprocuradores = CreateValidProProcuradores();
        proprocuradores.Advogado = 123;
        var reg123 = new Models.Response.AdvogadosResponse
        {
            Id = 123
        };
        _mockAdvogadosReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(proprocuradores, _mockProProcuradoresService.Object, _mockAdvogadosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyAdvogados_ShouldPass()
    {
        // Arrange
        var proprocuradores = CreateValidProProcuradores();
        proprocuradores.Advogado = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(proprocuradores, _mockProProcuradoresService.Object, _mockAdvogadosReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockAdvogadosReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}