// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class ModelosDocumentosValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFModelosDocumentosFactory> _mockModelosDocumentosFactory;
    private readonly Mock<IModelosDocumentosReader> _mockReader;
    private readonly ModelosDocumentosValidation _validation;
    private readonly Mock<IModelosDocumentosService> _mockModelosDocumentosService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<ITipoModeloDocumentoReader> _mockTipoModeloDocumentoReader;
    private readonly ModelosDocumentosService _service;
    private readonly string _validUri = "test-uri";
    public ModelosDocumentosValidationTests()
    {
        _mockModelosDocumentosFactory = new Mock<IFModelosDocumentosFactory>();
        _mockReader = new Mock<IModelosDocumentosReader>();
        _validation = new ModelosDocumentosValidation();
        _mockModelosDocumentosService = new Mock<IModelosDocumentosService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockTipoModeloDocumentoReader = new Mock<ITipoModeloDocumentoReader>();
    }

#region Class Structure Tests
    [Fact]
    public void ModelosDocumentosValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IModelosDocumentosValidation>();
    }

    [Fact]
    public void ModelosDocumentosValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(ModelosDocumentosValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void ModelosDocumentosValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(ModelosDocumentosValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.ModelosDocumentos CreateValidModelosDocumentos()
    {
        return new Models.ModelosDocumentos
        {
            Id = 1,
            Nome = "João",
            Remuneracao = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Assinatura = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Header = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Footer = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Extra1 = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Extra2 = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Extra3 = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Outorgante = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Outorgados = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Poderes = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Objeto = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Titulo
            Testemunhas = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            TipoModeloDocumento = 1,
            CSS = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            GUID = Guid.NewGuid().ToString()
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockModelosDocumentosService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterModelosDocumentos>(), It.IsAny<string>())).ReturnsAsync(new List<ModelosDocumentosResponseAll>());
        // Setup other mocks but don't override the ModelosDocumentoss service mock
        _mockTipoModeloDocumentoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.TipoModeloDocumentoResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockModelosDocumentosService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterModelosDocumentos>(), It.IsAny<string>())).ReturnsAsync(new List<ModelosDocumentosResponseAll>());
        // Setup other mocks but don't override the ModelosDocumentoss service mock
        _mockTipoModeloDocumentoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.TipoModeloDocumentoResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var modelosdocumentos = new Models.ModelosDocumentos
        {
            Id = 1,
            Nome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Remuneracao = null,
            Assinatura = null,
            Header = null,
            Footer = null,
            Extra1 = null,
            Extra2 = null,
            Extra3 = null,
            Outorgante = null,
            Outorgados = null,
            Poderes = null,
            Objeto = null,
            Titulo = null,
            Testemunhas = null,
            TipoModeloDocumento = 1,
            CSS = null,
            GUID = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(modelosdocumentos, _mockModelosDocumentosService.Object, _mockTipoModeloDocumentoReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockModelosDocumentosService.Object, _mockTipoModeloDocumentoReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region ValidateReg Required Nome Method Tests 
    [Fact]
    public async Task ValidateReg_WithEmptyNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var modelosdocumentos = CreateValidModelosDocumentos();
        modelosdocumentos.Nome = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(modelosdocumentos, _mockModelosDocumentosService.Object, _mockTipoModeloDocumentoReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var modelosdocumentos = CreateValidModelosDocumentos();
        modelosdocumentos.Nome = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(modelosdocumentos, _mockModelosDocumentosService.Object, _mockTipoModeloDocumentoReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataNome_ShouldReturnTrue()
    {
        // Arrange
        var modelosdocumentos = CreateValidModelosDocumentos();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(modelosdocumentos, _mockModelosDocumentosService.Object, _mockTipoModeloDocumentoReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var modelosdocumentos = CreateValidModelosDocumentos();
        modelosdocumentos.Nome = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(modelosdocumentos, _mockModelosDocumentosService.Object, _mockTipoModeloDocumentoReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
#region ValidateReg Required GUID Method Tests 
    [Fact]
    public async Task ValidateReg_WithEmptyGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var modelosdocumentos = CreateValidModelosDocumentos();
        modelosdocumentos.GUID = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(modelosdocumentos, _mockModelosDocumentosService.Object, _mockTipoModeloDocumentoReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var modelosdocumentos = CreateValidModelosDocumentos();
        modelosdocumentos.GUID = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(modelosdocumentos, _mockModelosDocumentosService.Object, _mockTipoModeloDocumentoReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataGUID_ShouldReturnTrue()
    {
        // Arrange
        var modelosdocumentos = CreateValidModelosDocumentos();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(modelosdocumentos, _mockModelosDocumentosService.Object, _mockTipoModeloDocumentoReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var modelosdocumentos = CreateValidModelosDocumentos();
        modelosdocumentos.GUID = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(modelosdocumentos, _mockModelosDocumentosService.Object, _mockTipoModeloDocumentoReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
#region Foreign Key Validation Tests - TipoModeloDocumento
    [Fact]
    public async Task ValidateReg_WithInvalidTipoModeloDocumento_ShouldThrowSGValidationException()
    {
        // Arrange
        var modelosdocumentos = CreateValidModelosDocumentos();
        modelosdocumentos.TipoModeloDocumento = 999;
        _mockTipoModeloDocumentoReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.TipoModeloDocumentoResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(modelosdocumentos, _mockModelosDocumentosService.Object, _mockTipoModeloDocumentoReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedTipoModeloDocumentoId_ShouldThrowSGValidationException()
    {
        // Arrange
        var modelosdocumentos = CreateValidModelosDocumentos();
        modelosdocumentos.TipoModeloDocumento = 999;
        var reg888 = new Models.Response.TipoModeloDocumentoResponse
        {
            Id = 888
        }; // Different ID
        _mockTipoModeloDocumentoReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(modelosdocumentos, _mockModelosDocumentosService.Object, _mockTipoModeloDocumentoReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidTipoModeloDocumento_ShouldPass()
    {
        // Arrange
        var modelosdocumentos = CreateValidModelosDocumentos();
        modelosdocumentos.TipoModeloDocumento = 123;
        var reg123 = new Models.Response.TipoModeloDocumentoResponse
        {
            Id = 123
        };
        _mockTipoModeloDocumentoReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(modelosdocumentos, _mockModelosDocumentosService.Object, _mockTipoModeloDocumentoReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}