// 100% auto-generated by Source Genesys Core
// copyright Â© 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming
public partial class DBAgendaSemana
{
    public DBAgendaSemana(DataRow? dbRec)
    {
        if (dbRec is null)
            return;
        InitFromRecord(name =>
        {
            try
            {
                return dbRec[name];
            }
            catch
            {
                return DBNull.Value;
            }
        });
    }

    public DBAgendaSemana(SqlDataReader? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do AgendaSemana: {ex.Message}", ex);
        }
    }

    private void InitFromRecord(Func<string, object?> getValue)
    {
        if (DBNull.Value.Equals(getValue(CampoCodigo)))
            return;
        ID = Convert.ToInt32(getValue(CampoCodigo));
        // Checkpoint Carregar 
        try
        {
            if (!DBNull.Value.Equals(getValue(DBAgendaSemanaDicInfo.Advogado)))
                m_FAdvogado = Convert.ToInt32(getValue(DBAgendaSemanaDicInfo.Advogado));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBAgendaSemanaDicInfo.Cliente)))
                m_FCliente = Convert.ToInt32(getValue(DBAgendaSemanaDicInfo.Cliente));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBAgendaSemanaDicInfo.Concluido)))
                m_FConcluido = Convert.ToBoolean(getValue(DBAgendaSemanaDicInfo.Concluido));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBAgendaSemanaDicInfo.Data)))
                m_FData = Convert.ToDateTime(getValue(DBAgendaSemanaDicInfo.Data));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBAgendaSemanaDicInfo.Funcionario)))
                m_FFuncionario = Convert.ToInt32(getValue(DBAgendaSemanaDicInfo.Funcionario));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBAgendaSemanaDicInfo.Hora)))
                m_FHora = Convert.ToDateTime(getValue(DBAgendaSemanaDicInfo.Hora));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBAgendaSemanaDicInfo.HoraFinal)))
                m_FHoraFinal = Convert.ToDateTime(getValue(DBAgendaSemanaDicInfo.HoraFinal));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBAgendaSemanaDicInfo.Importante)))
                m_FImportante = Convert.ToBoolean(getValue(DBAgendaSemanaDicInfo.Importante));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBAgendaSemanaDicInfo.Liberado)))
                m_FLiberado = Convert.ToBoolean(getValue(DBAgendaSemanaDicInfo.Liberado));
        }
        catch
        {
        }

        try
        {
            if (!DBNull.Value.Equals(getValue(DBAgendaSemanaDicInfo.TipoCompromisso)))
                m_FTipoCompromisso = Convert.ToInt32(getValue(DBAgendaSemanaDicInfo.TipoCompromisso));
        }
        catch
        {
        }

        try
        {
            m_FCompromisso = getValue(DBAgendaSemanaDicInfo.Compromisso)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FNome = getValue(DBAgendaSemanaDicInfo.Nome)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FNomeCliente = getValue(DBAgendaSemanaDicInfo.NomeCliente)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FParaNome = getValue(DBAgendaSemanaDicInfo.ParaNome)?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            m_FTipo = getValue(DBAgendaSemanaDicInfo.Tipo)?.ToString() ?? string.Empty;
        }
        catch
        {
        }
    }

    public void CarregarDadosBd(DataRow? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do AgendaSemana: {ex.Message}", ex);
        }
    }

    public void CarregarDadosBd(SqlDataReader? dbRec)
    {
        if (dbRec is null)
            return;
        try
        {
            InitFromRecord(name =>
            {
                try
                {
                    return dbRec[name];
                }
                catch
                {
                    return DBNull.Value;
                }
            });
        }
        catch (Exception ex)
        {
            throw new Exception($"Erro ao carregar dados do AgendaSemana: {ex.Message}", ex);
        }
    }
}