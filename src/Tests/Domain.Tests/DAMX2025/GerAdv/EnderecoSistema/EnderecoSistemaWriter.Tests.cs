// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class EnderecoSistemaWriterTests
{
    private readonly Mock<IFEnderecoSistemaFactory> _mockEnderecoSistemaFactory;
    private readonly Mock<FEnderecoSistema> _mockFEnderecoSistema;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly EnderecoSistemaWriter _enderecosistemaWriter;
    public EnderecoSistemaWriterTests()
    {
        _mockEnderecoSistemaFactory = new Mock<IFEnderecoSistemaFactory>();
        _mockFEnderecoSistema = new Mock<FEnderecoSistema>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _enderecosistemaWriter = new EnderecoSistemaWriter(_mockEnderecoSistemaFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var enderecosistema = CreateValidEnderecoSistemaModel();
        enderecosistema.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockEnderecoSistemaFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFEnderecoSistema.Object);
        _mockFEnderecoSistema.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _enderecosistemaWriter.WriteAsync(enderecosistema, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFEnderecoSistema.Object);
        _mockEnderecoSistemaFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockEnderecoSistemaFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFEnderecoSistema.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var enderecosistema = CreateValidEnderecoSistemaModel();
        enderecosistema.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockEnderecoSistemaFactory.Setup(x => x.CreateFromIdAsync(enderecosistema.Id, _mockConnection.Object)).ReturnsAsync(_mockFEnderecoSistema.Object);
        _mockFEnderecoSistema.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _enderecosistemaWriter.WriteAsync(enderecosistema, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFEnderecoSistema.Object);
        _mockEnderecoSistemaFactory.Verify(x => x.CreateFromIdAsync(enderecosistema.Id, _mockConnection.Object), Times.Once);
        _mockEnderecoSistemaFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFEnderecoSistema.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var enderecosistema = CreateValidEnderecoSistemaModel();
        var auditorQuem = 99;
        _mockEnderecoSistemaFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFEnderecoSistema.Object);
        _mockFEnderecoSistema.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _enderecosistemaWriter.WriteAsync(enderecosistema, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFEnderecoSistema.Object);
        _mockFEnderecoSistema.VerifySet(x => x.FCadastro = enderecosistema.Cadastro, Times.Once);
        _mockFEnderecoSistema.VerifySet(x => x.FCadastroExCod = enderecosistema.CadastroExCod, Times.Once);
        _mockFEnderecoSistema.VerifySet(x => x.FTipoEnderecoSistema = enderecosistema.TipoEnderecoSistema, Times.Once);
        _mockFEnderecoSistema.VerifySet(x => x.FGUID = enderecosistema.GUID, Times.Once);
        _mockFEnderecoSistema.VerifySet(x => x.FProcesso = enderecosistema.Processo, Times.Once);
        _mockFEnderecoSistema.VerifySet(x => x.FMotivo = enderecosistema.Motivo, Times.Once);
        _mockFEnderecoSistema.VerifySet(x => x.FContatoNoLocal = enderecosistema.ContatoNoLocal, Times.Once);
        _mockFEnderecoSistema.VerifySet(x => x.FCidade = enderecosistema.Cidade, Times.Once);
        _mockFEnderecoSistema.VerifySet(x => x.FEndereco = enderecosistema.Endereco, Times.Once);
        _mockFEnderecoSistema.VerifySet(x => x.FBairro = enderecosistema.Bairro, Times.Once);
        _mockFEnderecoSistema.VerifySet(x => x.FCEP = It.IsAny<string>(), Times.Once); // CEP é limpo pelo ClearInputCep()
        _mockFEnderecoSistema.VerifySet(x => x.FFone = enderecosistema.Fone, Times.Once);
        _mockFEnderecoSistema.VerifySet(x => x.FFax = enderecosistema.Fax, Times.Once);
        _mockFEnderecoSistema.VerifySet(x => x.FObservacao = enderecosistema.Observacao, Times.Once);
        _mockFEnderecoSistema.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var enderecosistema = CreateValidEnderecoSistemaModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockEnderecoSistemaFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _enderecosistemaWriter.WriteAsync(enderecosistema, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var enderecosistema = CreateValidEnderecoSistemaModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockEnderecoSistemaFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFEnderecoSistema.Object);
        _mockFEnderecoSistema.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _enderecosistemaWriter.WriteAsync(enderecosistema, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var enderecosistemaResponse = new EnderecoSistemaResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockEnderecoSistemaFactory.Setup(x => x.DeleteAsync(operadorId, enderecosistemaResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _enderecosistemaWriter.Delete(enderecosistemaResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockEnderecoSistemaFactory.Verify(x => x.DeleteAsync(operadorId, enderecosistemaResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var enderecosistemaResponse = new EnderecoSistemaResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockEnderecoSistemaFactory.Setup(x => x.DeleteAsync(operadorId, enderecosistemaResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _enderecosistemaWriter.Delete(enderecosistemaResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var enderecosistemaResponse = new EnderecoSistemaResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockEnderecoSistemaFactory.Setup(x => x.DeleteAsync(operadorId, enderecosistemaResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _enderecosistemaWriter.Delete(enderecosistemaResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new EnderecoSistemaWriter(_mockEnderecoSistemaFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new EnderecoSistemaWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.EnderecoSistema CreateValidEnderecoSistemaModel()
    {
        return new Models.EnderecoSistema
        {
            Id = 0,
            Cadastro = 1,
            CadastroExCod = 1,
            TipoEnderecoSistema = 1,
            GUID = Guid.NewGuid().ToString(),
            Processo = 1,
            Motivo = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            ContatoNoLocal = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Cidade = 1,
            Endereco = "Rua das Flores, 123",
            Bairro = "Centro",
            CEP = "01234-567",
            Fone = "(11) 99999-9999",
            Fax = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Observacao = "Observação teste"
        };
    }
#endregion
}