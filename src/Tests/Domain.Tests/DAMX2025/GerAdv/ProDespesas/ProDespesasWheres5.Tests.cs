// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class ProDespesasWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFProDespesasFactory> _mockProDespesasFactory;
    private readonly Mock<FProDespesas> _mockFProDespesas;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly ProDespesasWhere _prodespesasWhere;
    public ProDespesasWhereTests()
    {
        _mockProDespesasFactory = new Mock<IFProDespesasFactory>();
        _mockFProDespesas = new Mock<FProDespesas>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _prodespesasWhere = new ProDespesasWhere(_mockProDespesasFactory.Object);
    }

    public void Dispose()
    {
        _mockProDespesasFactory?.Reset();
        _mockFProDespesas?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "27/05/2022")
        };
    }

    private void SetupMockFProDespesas(int? LigacaoID = 1, int? Cliente = 1, bool? Corrigido = false, string? Data = "27/05/2022", decimal? ValorOriginal = 0m, int? Processo = 1, int? Quitado = 1, string? DataCorrecao = "24/04/1975", decimal? Valor = 0m, bool? Tipo = true, string? Historico = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", bool? LivroCaixa = false)
    {
        _mockFProDespesas.Setup(f => f.FLigacaoID).Returns(LigacaoID ?? 0);
        _mockFProDespesas.Setup(f => f.FCliente).Returns(Cliente ?? 0);
        _mockFProDespesas.Setup(f => f.FCorrigido).Returns(Corrigido ?? false);
        _mockFProDespesas.Setup(f => f.FData).Returns(Data ?? string.Empty);
        _mockFProDespesas.Setup(f => f.FValorOriginal).Returns(ValorOriginal ?? 0m);
        _mockFProDespesas.Setup(f => f.FProcesso).Returns(Processo ?? 0);
        _mockFProDespesas.Setup(f => f.FQuitado).Returns(Quitado ?? 0);
        _mockFProDespesas.Setup(f => f.FDataCorrecao).Returns(DataCorrecao ?? string.Empty);
        _mockFProDespesas.Setup(f => f.FValor).Returns(Valor ?? 0m);
        _mockFProDespesas.Setup(f => f.FTipo).Returns(Tipo ?? false);
        _mockFProDespesas.Setup(f => f.FHistorico).Returns(Historico ?? string.Empty);
        _mockFProDespesas.Setup(f => f.FLivroCaixa).Returns(LivroCaixa ?? false);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFProDespesasFactory>();
        // Act
        var prodespesasWhere = new ProDespesasWhere(mockFactory.Object);
        // Assert
        prodespesasWhere.Should().NotBeNull();
        prodespesasWhere.Should().BeAssignableTo<IProDespesasWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFProDespesasFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new ProDespesasWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnProDespesasResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFProDespesas();
        _mockProDespesasFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFProDespesas.Object);
        // Act
        var result = _prodespesasWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.LigacaoID.Should().Be(1);
        result.Cliente.Should().Be(1);
        result.Corrigido.Should().Be(false);
        result.Data.Should().Be("27/05/2022");
        result.ValorOriginal.Should().Be(0m);
        result.Processo.Should().Be(1);
        result.Quitado.Should().Be(1);
        result.DataCorrecao.Should().Be("24/04/1975");
        result.Valor.Should().Be(0m);
        result.Tipo.Should().Be(true);
        result.Historico.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.LivroCaixa.Should().Be(false);
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFProDespesas(LigacaoID: null, Cliente: null, Corrigido: null, Data: null, ValorOriginal: null, Processo: null, Quitado: null, DataCorrecao: null, Valor: null, Tipo: null, Historico: null, LivroCaixa: null);
        _mockProDespesasFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFProDespesas.Object);
        // Act
        var result = _prodespesasWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.LigacaoID.Should().Be(0);
        result.Cliente.Should().Be(0);
        result.Corrigido.Should().Be(false);
        result.Data.Should().Be(string.Empty);
        result.ValorOriginal.Should().Be(0m);
        result.Processo.Should().Be(0);
        result.Quitado.Should().Be(0);
        result.DataCorrecao.Should().Be(string.Empty);
        result.Valor.Should().Be(0m);
        result.Tipo.Should().Be(false);
        result.Historico.Should().Be(string.Empty);
        result.LivroCaixa.Should().Be(false);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFProDespesas();
        _mockProDespesasFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFProDespesas.Object);
        // Act
        var result = _prodespesasWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockProDespesasFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFProDespesas();
        _mockProDespesasFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFProDespesas.Object);
        // Act
        var result = _prodespesasWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockProDespesasFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFProDespesas();
        _mockProDespesasFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFProDespesas.Object);
        // Act
        var result = _prodespesasWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockProDespesasFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFProDespesas();
        _mockProDespesasFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFProDespesas.Object);
        // Act
        _prodespesasWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockProDespesasFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFProDespesasInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFProDespesas.Setup(f => f.Dispose());
        SetupMockFProDespesas();
        _mockProDespesasFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFProDespesas.Object);
        // Act
        _prodespesasWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFProDespesas.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockProDespesasFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _prodespesasWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFProDespesas(LigacaoID: 1, Cliente: 1, Corrigido: false, Data: "27/05/2022", ValorOriginal: 0m, Processo: 1, Quitado: 1, DataCorrecao: "24/04/1975", Valor: 0m, Tipo: true, Historico: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", LivroCaixa: false);
        _mockProDespesasFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFProDespesas.Object);
        // Act
        var result = _prodespesasWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.LigacaoID.Should().Be(1);
        result.Cliente.Should().Be(1);
        result.Corrigido.Should().Be(false);
        result.Data.Should().Be("27/05/2022");
        result.ValorOriginal.Should().Be(0m);
        result.Processo.Should().Be(1);
        result.Quitado.Should().Be(1);
        result.DataCorrecao.Should().Be("24/04/1975");
        result.Valor.Should().Be(0m);
        result.Tipo.Should().Be(true);
        result.Historico.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.LivroCaixa.Should().Be(false);
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "Data = @{DBProDespesasDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBProDespesasDicInfo.CampoNome}", "27/05/2022"),
        };
        SetupMockFProDespesas();
        _mockProDespesasFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFProDespesas.Object);
        // Act
        _prodespesasWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockProDespesasFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBProDespesasDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#region DateTime Tests
    [Fact]
    public void Read_WithValidDateDataCorrecaoFields_ShouldParseAndSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var testDate = "31/12/2024";
        SetupMockFProDespesas(DataCorrecao: testDate);
        _mockProDespesasFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFProDespesas.Object);
        // Act
        var result = _prodespesasWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataCorrecao.Should().Be("31/12/2024");
    }

    [Fact]
    public void Read_WithInvalidDateDataCorrecaoStrings_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFProDespesas(DataCorrecao: "invalid-date");
        _mockProDespesasFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFProDespesas.Object);
        // Act
        var result = _prodespesasWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataCorrecao.Should().Be("");
    }

    [Fact]
    public void Read_WithNullDateDataCorrecaoFields_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFProDespesas(DataCorrecao: null);
        _mockProDespesasFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFProDespesas.Object);
        // Act
        var result = _prodespesasWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataCorrecao.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("31/12/2024")]
    [InlineData("2025/01/01T23:59:59")]
    [InlineData("2000-02-29")] // Leap year
    [InlineData("2025/01/02T14:30:45.123")]
    public void Read_WithValidDateDataCorrecaoFormats_ShouldParseCorrectly(string dateString)
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedDate = DateTime.Parse(dateString);
        SetupMockFProDespesas(DataCorrecao: dateString);
        _mockProDespesasFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFProDespesas.Object);
        // Act
        var result = _prodespesasWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DataCorrecao.Should().Be(dateString);
    }
#endregion
#endregion
}