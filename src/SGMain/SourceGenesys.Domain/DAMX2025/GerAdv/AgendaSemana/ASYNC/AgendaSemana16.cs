// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#define NOTSTORED_AgendaSemana
namespace MenphisSI.SG.GerAdv;
public partial class DBAgendaSemana
{
    /// <summary>
    /// Factory method async para carregar [tableMin]
    /// </summary>
    public static async Task<DBAgendaSemana> CreateAsync(int nCodigo, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        var registro = new DBAgendaSemana();
        await registro.CarregarAsync(nCodigo, oCnn, cancellationToken);
        return registro;
    }

    /// <summary>
    /// Carregar dados async
    /// </summary>
    protected async Task CarregarAsync(int id, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        if (id.IsEmptyIDNumber() || oCnn is null)
            return;
        using var cmd = new SqlCommand($"{ConfiguracoesDBT.SQLNoCount}SELECT TOP (1) {CamposSqlX} FROM {PTabelaNome.dbo(oCnn)} WHERE [{CampoCodigo}] = @ThisIDToLoad", oCnn.InnerConnection);
        cmd.Parameters.AddWithValue("@ThisIDToLoad", id);
        using var ds = await ConfiguracoesDBT.GetDataTableAsync(cmd, CommandBehavior.SingleRow, oCnn, cancellationToken);
        if (ds is null)
        {
            throw new InvalidOperationException($"Erro ao carregar registro {this.TabelaNome}.");
        }

        if (ds?.Rows.Count > 0)
        {
            CarregarDadosBd(ds.Rows[0]);
        }
    }

#if (!NOTSTORED_AgendaSemana)
    /// <summary>
    /// Update async com timeout e cancellation
    /// </summary>
    public virtual async Task<int> UpdateAsync(
        MsiSqlConnection? oCnn,
        int insertId = 0,
        CancellationToken cancellationToken = default,
        int timeoutSeconds = 30)
    {
        var isInsert = insertId == 0 && ID == 0;

        if (!isInsert && !HasAnyFieldChanged())
            return 0;

        if (oCnn is null)
        {
#if DEBUG
            PTabelaNome.PopupBox("oCnn is null - UpdateAsync()");
#endif
            return 0;
        } 

        try
        {
            var updateTool = new DBToolWTable32Async(PTabelaNome, CampoCodigo, ID == 0)
            {
                IsMachineCode = true,        
                Identity = this.IdIsIdentity()
            };

            updateTool.Where = isInsert ? string.Empty : $"{CampoCodigo}={ID}";

            ConfigureUpdateFields(updateTool);
            ConfigureAuditorFields(updateTool);            

            if (insertId != 0)
            {
                return await GravaNewIdAsync(updateTool, insertId, oCnn, cancellationToken);
            }

            var result = await updateTool.RecUpdateAsync(oCnn, cancellationToken);

            if (updateTool.Insert && result == "OK")
            {
                ID = updateTool.GetCodigo();
                if (ID == 0)
                {
                    Error = -2;
                    ErrorDescription = "O registro não pode ser incluído, tente mais tarde.";
                    return Error;
                }
            }

            return result == "OK" ? 0 : -1;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (Exception ex)
        {
            Error = -1;
            ErrorDescription = ex.Message;
            throw new InvalidOperationException($"Factory error");
        }
    }
   
#endif
    /// <summary>
    /// Verificar se existe async
    /// </summary>
    public static async Task<bool> ExisteAsync(int id, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        if (oCnn is null || id <= 0)
            return false;
        var existe = await ConfiguracoesDBT.GetScalarAsync<int?>($"SELECT 1 FROM {PTabelaNome.dbo(oCnn)} WHERE {CampoCodigo} = {id}", oCnn, cancellationToken);
        return existe.HasValue;
    }

    /// <summary>
    /// Delete async
    /// </summary>
    /// <param name = "operadorId">For future Audity</param>
    /// <param name = "id"></param>
    /// <param name = "oCnn"></param>
    /// <param name = "cancellationToken"></param>
    /// <returns></returns>
    /// <exception cref = "InvalidOperationException"></exception>
    public static async Task<bool> DeleteRecordAsync(int operadorId, int id, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        if (oCnn is null || id <= 0)
            return false;
        var sql = $"DELETE FROM {PTabelaNome.dbo(oCnn)} WHERE {CampoCodigo} = @Id";
        try
        {
            using var cmd = new SqlCommand(sql, oCnn.InnerConnection);
            cmd.Parameters.AddWithValue("@Id", id);
            var rowsAffected = await cmd.ExecuteNonQueryAsync(cancellationToken);
            return rowsAffected > 0;
        }
        catch (SqlException ex)when (ex.Number == 547)
        {
            throw new InvalidOperationException("Este registro não pode ser excluído, pois está vinculado a outros registros.");
        }
    }
#if (!NOTSTORED_AgendaSemana)

    // Helper methods
    private bool HasAnyFieldChanged()     
        => pFldFParaNome
 || pFldFData
 || pFldFFuncionario
 || pFldFAdvogado
 || pFldFHora
 || pFldFTipoCompromisso
 || pFldFCompromisso
 || pFldFConcluido
 || pFldFLiberado
 || pFldFImportante
 || pFldFHoraFinal
 || pFldFNome
 || pFldFCliente
 || pFldFNomeCliente
 || pFldFTipo
;       

    private void ConfigureUpdateFields(DBToolWTable32Async updateTool)
    {
        if (pFldFParaNome) updateTool.Fields(DBAgendaSemanaDicInfo.ParaNome, m_FParaNome, ETiposCampos.FString);
if (pFldFData) updateTool.Fields(DBAgendaSemanaDicInfo.Data, m_FData, ETiposCampos.FString);
if (pFldFFuncionario) updateTool.Fields(DBAgendaSemanaDicInfo.Funcionario, m_FFuncionario, ETiposCampos.FNumber);
if (pFldFAdvogado) updateTool.Fields(DBAgendaSemanaDicInfo.Advogado, m_FAdvogado, ETiposCampos.FNumber);
if (pFldFHora) updateTool.Fields(DBAgendaSemanaDicInfo.Hora, m_FHora, ETiposCampos.FString);
if (pFldFTipoCompromisso) updateTool.Fields(DBAgendaSemanaDicInfo.TipoCompromisso, m_FTipoCompromisso, ETiposCampos.FNumber);
if (pFldFCompromisso) updateTool.Fields(DBAgendaSemanaDicInfo.Compromisso, m_FCompromisso, ETiposCampos.FString);
if (pFldFConcluido || updateTool.Insert) updateTool.Fields(DBAgendaSemanaDicInfo.Concluido, m_FConcluido, ETiposCampos.FBoolean);
if (pFldFLiberado || updateTool.Insert) updateTool.Fields(DBAgendaSemanaDicInfo.Liberado, m_FLiberado, ETiposCampos.FBoolean);
if (pFldFImportante || updateTool.Insert) updateTool.Fields(DBAgendaSemanaDicInfo.Importante, m_FImportante, ETiposCampos.FBoolean);
if (pFldFHoraFinal) updateTool.Fields(DBAgendaSemanaDicInfo.HoraFinal, m_FHoraFinal, ETiposCampos.FString);
if (pFldFNome) updateTool.Fields(DBAgendaSemanaDicInfo.Nome, m_FNome, ETiposCampos.FString);
if (pFldFCliente) updateTool.Fields(DBAgendaSemanaDicInfo.Cliente, m_FCliente, ETiposCampos.FNumber);
if (pFldFNomeCliente) updateTool.Fields(DBAgendaSemanaDicInfo.NomeCliente, m_FNomeCliente, ETiposCampos.FString);
if (pFldFTipo) updateTool.Fields(DBAgendaSemanaDicInfo.Tipo, m_FTipo, ETiposCampos.FString);

    }

#endif
#if (!NOTSTORED_AgendaSemana)
    private void ConfigureAuditorFields(DBToolWTable32Async updateTool)
    {    
         
    }

    private async Task<int> GravaNewIdAsync(
        DBToolWTable32Async updateTool,
        int insertId,
        MsiSqlConnection oCnn,
        CancellationToken cancellationToken)
    {
        ID = insertId;
        updateTool.Fields(CampoCodigo, insertId, ETiposCampos.FNumber);
        var result = await updateTool.RecUpdateAsync(oCnn, cancellationToken, true);

        return result == "OK" ? 0 : -3;
    }
#endif
}