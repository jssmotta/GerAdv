// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class BensMateriaisWriterTests
{
    private readonly Mock<IFBensMateriaisFactory> _mockBensMateriaisFactory;
    private readonly Mock<FBensMateriais> _mockFBensMateriais;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly BensMateriaisWriter _bensmateriaisWriter;
    public BensMateriaisWriterTests()
    {
        _mockBensMateriaisFactory = new Mock<IFBensMateriaisFactory>();
        _mockFBensMateriais = new Mock<FBensMateriais>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _bensmateriaisWriter = new BensMateriaisWriter(_mockBensMateriaisFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriaisModel();
        bensmateriais.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockBensMateriaisFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFBensMateriais.Object);
        _mockFBensMateriais.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _bensmateriaisWriter.WriteAsync(bensmateriais, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFBensMateriais.Object);
        _mockBensMateriaisFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockBensMateriaisFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFBensMateriais.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriaisModel();
        bensmateriais.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockBensMateriaisFactory.Setup(x => x.CreateFromIdAsync(bensmateriais.Id, _mockConnection.Object)).ReturnsAsync(_mockFBensMateriais.Object);
        _mockFBensMateriais.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _bensmateriaisWriter.WriteAsync(bensmateriais, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFBensMateriais.Object);
        _mockBensMateriaisFactory.Verify(x => x.CreateFromIdAsync(bensmateriais.Id, _mockConnection.Object), Times.Once);
        _mockBensMateriaisFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFBensMateriais.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriaisModel();
        var auditorQuem = 99;
        _mockBensMateriaisFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFBensMateriais.Object);
        _mockFBensMateriais.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _bensmateriaisWriter.WriteAsync(bensmateriais, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFBensMateriais.Object);
        _mockFBensMateriais.VerifySet(x => x.FNome = bensmateriais.Nome, Times.Once);
        _mockFBensMateriais.VerifySet(x => x.FBensClassificacao = bensmateriais.BensClassificacao, Times.Once);
        _mockFBensMateriais.VerifySet(x => x.FDataCompra = bensmateriais.DataCompra.ToString(), Times.Once);
        _mockFBensMateriais.VerifySet(x => x.FDataFimDaGarantia = bensmateriais.DataFimDaGarantia.ToString(), Times.Once);
        _mockFBensMateriais.VerifySet(x => x.FNFNRO = bensmateriais.NFNRO, Times.Once);
        _mockFBensMateriais.VerifySet(x => x.FFornecedor = bensmateriais.Fornecedor, Times.Once);
        _mockFBensMateriais.VerifySet(x => x.FValorBem = bensmateriais.ValorBem, Times.Once);
        _mockFBensMateriais.VerifySet(x => x.FNroSerieProduto = bensmateriais.NroSerieProduto, Times.Once);
        _mockFBensMateriais.VerifySet(x => x.FComprador = bensmateriais.Comprador, Times.Once);
        _mockFBensMateriais.VerifySet(x => x.FCidade = bensmateriais.Cidade, Times.Once);
        _mockFBensMateriais.VerifySet(x => x.FGarantiaLoja = bensmateriais.GarantiaLoja, Times.Once);
        _mockFBensMateriais.VerifySet(x => x.FDataTerminoDaGarantiaDaLoja = bensmateriais.DataTerminoDaGarantiaDaLoja.ToString(), Times.Once);
        _mockFBensMateriais.VerifySet(x => x.FObservacoes = bensmateriais.Observacoes, Times.Once);
        _mockFBensMateriais.VerifySet(x => x.FNomeVendedor = bensmateriais.NomeVendedor, Times.Once);
        _mockFBensMateriais.VerifySet(x => x.FGUID = bensmateriais.GUID, Times.Once);
        _mockFBensMateriais.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithNullDataCompra_ShouldNotSetFDataCompra()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriaisModel();
        bensmateriais.DataCompra = null;
        var auditorQuem = 123;
        _mockBensMateriaisFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFBensMateriais.Object);
        _mockFBensMateriais.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _bensmateriaisWriter.WriteAsync(bensmateriais, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFBensMateriais.VerifySet(x => x.FDataCompra = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WithNullDataFimDaGarantia_ShouldNotSetFDataFimDaGarantia()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriaisModel();
        bensmateriais.DataFimDaGarantia = null;
        var auditorQuem = 123;
        _mockBensMateriaisFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFBensMateriais.Object);
        _mockFBensMateriais.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _bensmateriaisWriter.WriteAsync(bensmateriais, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFBensMateriais.VerifySet(x => x.FDataFimDaGarantia = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WithNullDataTerminoDaGarantiaDaLoja_ShouldNotSetFDataTerminoDaGarantiaDaLoja()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriaisModel();
        bensmateriais.DataTerminoDaGarantiaDaLoja = null;
        var auditorQuem = 123;
        _mockBensMateriaisFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFBensMateriais.Object);
        _mockFBensMateriais.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _bensmateriaisWriter.WriteAsync(bensmateriais, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFBensMateriais.VerifySet(x => x.FDataTerminoDaGarantiaDaLoja = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriaisModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockBensMateriaisFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _bensmateriaisWriter.WriteAsync(bensmateriais, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var bensmateriais = CreateValidBensMateriaisModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockBensMateriaisFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFBensMateriais.Object);
        _mockFBensMateriais.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _bensmateriaisWriter.WriteAsync(bensmateriais, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var bensmateriaisResponse = new BensMateriaisResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockBensMateriaisFactory.Setup(x => x.DeleteAsync(operadorId, bensmateriaisResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _bensmateriaisWriter.Delete(bensmateriaisResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockBensMateriaisFactory.Verify(x => x.DeleteAsync(operadorId, bensmateriaisResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var bensmateriaisResponse = new BensMateriaisResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockBensMateriaisFactory.Setup(x => x.DeleteAsync(operadorId, bensmateriaisResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _bensmateriaisWriter.Delete(bensmateriaisResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var bensmateriaisResponse = new BensMateriaisResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockBensMateriaisFactory.Setup(x => x.DeleteAsync(operadorId, bensmateriaisResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _bensmateriaisWriter.Delete(bensmateriaisResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new BensMateriaisWriter(_mockBensMateriaisFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new BensMateriaisWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.BensMateriais CreateValidBensMateriaisModel()
    {
        return new Models.BensMateriais
        {
            Id = 0,
            Nome = "João",
            BensClassificacao = 1,
            DataCompra = "24/04/1975",
            DataFimDaGarantia = "24/04/1975",
            NFNRO = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Fornecedor = 1,
            ValorBem = 1m,
            NroSerieProduto = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Comprador = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Cidade = 1,
            GarantiaLoja = false,
            DataTerminoDaGarantiaDaLoja = "24/04/1975",
            Observacoes = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            NomeVendedor = "João",
            GUID = Guid.NewGuid().ToString()
        };
    }
#endregion
}