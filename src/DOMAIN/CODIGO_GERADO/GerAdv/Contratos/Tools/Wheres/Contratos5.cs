// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Wheres;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IContratosWhere
{
    ContratosResponse Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn);
}

public partial class ContratosWhere(IFContratosFactory contratosFactory) : IContratosWhere
{
    private readonly IFContratosFactory _contratosFactory = contratosFactory;
    public ContratosResponse Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn)
    {
        using var dbRec = _contratosFactory.CreateFromParameters(parameters, oCnn, sqlWhere: where);
        var contratos = new ContratosResponse
        {
            Id = dbRec.ID,
            Processo = dbRec.FProcesso,
            Cliente = dbRec.FCliente,
            Advogado = dbRec.FAdvogado,
            Dia = dbRec.FDia,
            Valor = dbRec.FValor,
            OcultarRelatorio = dbRec.FOcultarRelatorio,
            PercEscritorio = dbRec.FPercEscritorio,
            ValorConsultoria = dbRec.FValorConsultoria,
            TipoCobranca = dbRec.FTipoCobranca,
            Protestar = dbRec.FProtestar ?? string.Empty,
            Juros = dbRec.FJuros ?? string.Empty,
            ValorRealizavel = dbRec.FValorRealizavel,
            DOCUMENTO = dbRec.FDOCUMENTO ?? string.Empty,
            EMail1 = dbRec.FEMail1 ?? string.Empty,
            EMail2 = dbRec.FEMail2 ?? string.Empty,
            EMail3 = dbRec.FEMail3 ?? string.Empty,
            Pessoa1 = dbRec.FPessoa1 ?? string.Empty,
            Pessoa2 = dbRec.FPessoa2 ?? string.Empty,
            Pessoa3 = dbRec.FPessoa3 ?? string.Empty,
            OBS = dbRec.FOBS ?? string.Empty,
            ClienteContrato = dbRec.FClienteContrato,
            IdExtrangeiro = dbRec.FIdExtrangeiro,
            ChaveContrato = dbRec.FChaveContrato ?? string.Empty,
            Avulso = dbRec.FAvulso,
            Suspenso = dbRec.FSuspenso,
            Multa = dbRec.FMulta ?? string.Empty,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataInicio, out DateTime XDataInicio))
        {
            contratos.DataInicio = dbRec.FDataInicio;
            contratos.DataInicio_date = XDataInicio;
        }

        if (DateTime.TryParse(dbRec.FDataTermino, out DateTime XDataTermino))
        {
            contratos.DataTermino = dbRec.FDataTermino;
            contratos.DataTermino_date = XDataTermino;
        }

        return contratos;
    }
}