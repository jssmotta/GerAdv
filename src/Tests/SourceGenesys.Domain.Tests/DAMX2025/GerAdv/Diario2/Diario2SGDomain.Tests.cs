// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBDiario2 - Nome da classe (ex: DBClientes)
/// Diario2 - Nome da tabela (ex: Clientes)
/// dia - Prefixo dos campos (ex: cli)
/// diaCodigo - Nome do campo código (ex: cliCodigo)
/// diaData - Nome do campo nome (ex: cliNome)
/// DBDiario2.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBDiario2Tests : IDisposable
{
    private readonly DBDiario2 _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBDiario2Tests()
    {
        _instance = new DBDiario2();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("diaCodigo", typeof(int));
        dt.Columns.Add("diaQuemCad", typeof(int));
        dt.Columns.Add("diaDtCad", typeof(DateTime));
        dt.Columns.Add("diaQuemAtu", typeof(int));
        dt.Columns.Add("diaDtAtu", typeof(DateTime));
        dt.Columns.Add("diaVisto", typeof(bool));
        dt.Columns.Add("diaData", typeof(string));
        dt.Columns.Add("diaHora", typeof(string));
        dt.Columns.Add("diaOperador", typeof(int));
        dt.Columns.Add("diaGUID", typeof(string));
        dt.Columns.Add("diaNome", typeof(string));
        dt.Columns.Add("diaOcorrencia", typeof(string));
        dt.Columns.Add("diaCliente", typeof(int));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("Diario2", DBDiario2.PTabelaNome);
        Assert.Equal(" Diario2.* ", DBDiario2.CamposSqlX);
        Assert.Equal("diaCodigo", DBDiario2.CampoCodigo);
        Assert.Equal("diaData", DBDiario2.CampoNome);
        Assert.Equal("dia", DBDiario2.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBDiario2();
        Assert.Equal(0, instance.ID);
        Assert.Equal("Diario2", instance.ITabelaName());
        Assert.Equal("dia", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBDiario2((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBDiario2((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["diaCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBDiario2(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("Diario2", cadastro.ITabelaName());
        Assert.Equal("diaCodigo", cadastro.ICampoCodigo());
        Assert.Equal("diaData", cadastro.ICampoNome());
        Assert.Equal("dia", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBDiario2.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBDiario2.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBDiario2.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBDiario2();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBDiario2();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnTrue()
    {
        Assert.True(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Operador_ShouldAcceptIntegerValues(int value)
    {
        _instance.FOperador = value;
        Assert.Equal(value, _instance.FOperador);
    }

    [Fact]
    public void Operador_DefaultValue_ShouldBeZero()
    {
        var instance = new DBDiario2();
        Assert.Equal(0, instance.FOperador);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void GUID_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FGUID = input;
        Assert.Equal(expected, _instance.FGUID);
    }

    [Fact]
    public void GUID_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 150 + 10);
        _instance.FGUID = longString;
        Assert.True(_instance.FGUID.Length <= 150);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Nome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNome = input;
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void Nome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 150 + 10);
        _instance.FNome = longString;
        Assert.True(_instance.FNome.Length <= 150);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Ocorrencia_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FOcorrencia = input;
        Assert.Equal(expected, _instance.FOcorrencia);
    }

    [Fact]
    public void Ocorrencia_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 2048 + 10);
        _instance.FOcorrencia = longString;
        Assert.True(_instance.FOcorrencia.Length <= 2048);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cliente_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCliente = value;
        Assert.Equal(value, _instance.FCliente);
    }

    [Fact]
    public void Cliente_DefaultValue_ShouldBeZero()
    {
        var instance = new DBDiario2();
        Assert.Equal(0, instance.FCliente);
    }

    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}