// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class OutrasPartesClienteWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFOutrasPartesClienteFactory> _mockOutrasPartesClienteFactory;
    private readonly Mock<FOutrasPartesCliente> _mockFOutrasPartesCliente;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly OutrasPartesClienteWhere _outraspartesclienteWhere;
    public OutrasPartesClienteWhereTests()
    {
        _mockOutrasPartesClienteFactory = new Mock<IFOutrasPartesClienteFactory>();
        _mockFOutrasPartesCliente = new Mock<FOutrasPartesCliente>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _outraspartesclienteWhere = new OutrasPartesClienteWhere(_mockOutrasPartesClienteFactory.Object);
    }

    public void Dispose()
    {
        _mockOutrasPartesClienteFactory?.Reset();
        _mockFOutrasPartesCliente?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
        };
    }

    private void SetupMockFOutrasPartesCliente(string? Nome = "João", bool? Terceirizado = false, int? ClientePrincipal = 1, bool? Tipo = true, bool? Sexo = false, string? DtNasc = "24/04/1975", string? CPF = "544.506.718-13", string? RG = "12.345.678-9", string? CNPJ = "93016944000138", string? InscEst = "AAAAAAAAAAAAA", string? NomeFantasia = "João", string? Endereco = "Rua das Flores, 123", int? Cidade = 1, string? CEP = "01234-567", string? Bairro = "Centro", string? Fone = "(11) 99999-9999", string? Fax = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string? EMail = "test@email.com", string? Site = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string? Class = "A")
    {
        _mockFOutrasPartesCliente.Setup(f => f.FNome).Returns(Nome ?? string.Empty);
        _mockFOutrasPartesCliente.Setup(f => f.FTerceirizado).Returns(Terceirizado ?? false);
        _mockFOutrasPartesCliente.Setup(f => f.FClientePrincipal).Returns(ClientePrincipal ?? 0);
        _mockFOutrasPartesCliente.Setup(f => f.FTipo).Returns(Tipo ?? false);
        _mockFOutrasPartesCliente.Setup(f => f.FSexo).Returns(Sexo ?? false);
        _mockFOutrasPartesCliente.Setup(f => f.FDtNasc).Returns(DtNasc ?? string.Empty);
        _mockFOutrasPartesCliente.Setup(f => f.FCPF).Returns(CPF ?? string.Empty);
        _mockFOutrasPartesCliente.Setup(f => f.FRG).Returns(RG ?? string.Empty);
        _mockFOutrasPartesCliente.Setup(f => f.FCNPJ).Returns(CNPJ ?? string.Empty);
        _mockFOutrasPartesCliente.Setup(f => f.FInscEst).Returns(InscEst ?? string.Empty);
        _mockFOutrasPartesCliente.Setup(f => f.FNomeFantasia).Returns(NomeFantasia ?? string.Empty);
        _mockFOutrasPartesCliente.Setup(f => f.FEndereco).Returns(Endereco ?? string.Empty);
        _mockFOutrasPartesCliente.Setup(f => f.FCidade).Returns(Cidade ?? 0);
        _mockFOutrasPartesCliente.Setup(f => f.FCEP).Returns(CEP ?? string.Empty);
        _mockFOutrasPartesCliente.Setup(f => f.FBairro).Returns(Bairro ?? string.Empty);
        _mockFOutrasPartesCliente.Setup(f => f.FFone).Returns(Fone ?? string.Empty);
        _mockFOutrasPartesCliente.Setup(f => f.FFax).Returns(Fax ?? string.Empty);
        _mockFOutrasPartesCliente.Setup(f => f.FEMail).Returns(EMail ?? string.Empty);
        _mockFOutrasPartesCliente.Setup(f => f.FSite).Returns(Site ?? string.Empty);
        _mockFOutrasPartesCliente.Setup(f => f.FClass).Returns(Class ?? string.Empty);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFOutrasPartesClienteFactory>();
        // Act
        var outraspartesclienteWhere = new OutrasPartesClienteWhere(mockFactory.Object);
        // Assert
        outraspartesclienteWhere.Should().NotBeNull();
        outraspartesclienteWhere.Should().BeAssignableTo<IOutrasPartesClienteWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFOutrasPartesClienteFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new OutrasPartesClienteWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnOutrasPartesClienteResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFOutrasPartesCliente();
        _mockOutrasPartesClienteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOutrasPartesCliente.Object);
        // Act
        var result = _outraspartesclienteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.Nome.Should().Be("João");
        result.Terceirizado.Should().Be(false);
        result.ClientePrincipal.Should().Be(1);
        result.Tipo.Should().Be(true);
        result.Sexo.Should().Be(false);
        result.DtNasc.Should().Be("24/04/1975");
        result.CPF.Should().Be("544.506.718-13");
        result.RG.Should().Be("12.345.678-9");
        result.CNPJ.Should().Be("93016944000138");
        result.InscEst.Should().Be("AAAAAAAAAAAAA");
        result.NomeFantasia.Should().Be("João");
        result.Endereco.Should().Be("Rua das Flores, 123");
        result.Cidade.Should().Be(1);
        result.CEP.Should().Be("01234-567");
        result.Bairro.Should().Be("Centro");
        result.Fone.Should().Be("(11) 99999-9999");
        result.Fax.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.EMail.Should().Be("test@email.com");
        result.Site.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Class.Should().Be("A");
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFOutrasPartesCliente(Nome: null, Terceirizado: null, ClientePrincipal: null, Tipo: null, Sexo: null, DtNasc: null, CPF: null, RG: null, CNPJ: null, InscEst: null, NomeFantasia: null, Endereco: null, Cidade: null, CEP: null, Bairro: null, Fone: null, Fax: null, EMail: null, Site: null, Class: null);
        _mockOutrasPartesClienteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOutrasPartesCliente.Object);
        // Act
        var result = _outraspartesclienteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Nome.Should().Be(string.Empty);
        result.Terceirizado.Should().Be(false);
        result.ClientePrincipal.Should().Be(0);
        result.Tipo.Should().Be(false);
        result.Sexo.Should().Be(false);
        result.DtNasc.Should().Be(string.Empty);
        result.CPF.Should().Be(string.Empty);
        result.RG.Should().Be(string.Empty);
        result.CNPJ.Should().Be(string.Empty);
        result.InscEst.Should().Be(string.Empty);
        result.NomeFantasia.Should().Be(string.Empty);
        result.Endereco.Should().Be(string.Empty);
        result.Cidade.Should().Be(0);
        result.CEP.Should().Be(string.Empty);
        result.Bairro.Should().Be(string.Empty);
        result.Fone.Should().Be(string.Empty);
        result.Fax.Should().Be(string.Empty);
        result.EMail.Should().Be(string.Empty);
        result.Site.Should().Be(string.Empty);
        result.Class.Should().Be(string.Empty);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFOutrasPartesCliente();
        _mockOutrasPartesClienteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFOutrasPartesCliente.Object);
        // Act
        var result = _outraspartesclienteWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockOutrasPartesClienteFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFOutrasPartesCliente();
        _mockOutrasPartesClienteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOutrasPartesCliente.Object);
        // Act
        var result = _outraspartesclienteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockOutrasPartesClienteFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFOutrasPartesCliente();
        _mockOutrasPartesClienteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOutrasPartesCliente.Object);
        // Act
        var result = _outraspartesclienteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockOutrasPartesClienteFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFOutrasPartesCliente();
        _mockOutrasPartesClienteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOutrasPartesCliente.Object);
        // Act
        _outraspartesclienteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockOutrasPartesClienteFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFOutrasPartesClienteInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFOutrasPartesCliente.Setup(f => f.Dispose());
        SetupMockFOutrasPartesCliente();
        _mockOutrasPartesClienteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOutrasPartesCliente.Object);
        // Act
        _outraspartesclienteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFOutrasPartesCliente.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockOutrasPartesClienteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _outraspartesclienteWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFOutrasPartesCliente(Nome: "João", Terceirizado: false, ClientePrincipal: 1, Tipo: true, Sexo: false, DtNasc: "24/04/1975", CPF: "544.506.718-13", RG: "12.345.678-9", CNPJ: "93016944000138", InscEst: "AAAAAAAAAAAAA", NomeFantasia: "João", Endereco: "Rua das Flores, 123", Cidade: 1, CEP: "01234-567", Bairro: "Centro", Fone: "(11) 99999-9999", Fax: "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", EMail: "test@email.com", Site: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", Class: "A");
        _mockOutrasPartesClienteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOutrasPartesCliente.Object);
        // Act
        var result = _outraspartesclienteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.Nome.Should().Be("João");
        result.Terceirizado.Should().Be(false);
        result.ClientePrincipal.Should().Be(1);
        result.Tipo.Should().Be(true);
        result.Sexo.Should().Be(false);
        result.DtNasc.Should().Be("24/04/1975");
        result.CPF.Should().Be("544.506.718-13");
        result.RG.Should().Be("12.345.678-9");
        result.CNPJ.Should().Be("93016944000138");
        result.InscEst.Should().Be("AAAAAAAAAAAAA");
        result.NomeFantasia.Should().Be("João");
        result.Endereco.Should().Be("Rua das Flores, 123");
        result.Cidade.Should().Be(1);
        result.CEP.Should().Be("01234-567");
        result.Bairro.Should().Be("Centro");
        result.Fone.Should().Be("(11) 99999-9999");
        result.Fax.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.EMail.Should().Be("test@email.com");
        result.Site.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Class.Should().Be("A");
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "Nome = @{DBOutrasPartesClienteDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBOutrasPartesClienteDicInfo.CampoNome}", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"),
        };
        SetupMockFOutrasPartesCliente();
        _mockOutrasPartesClienteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOutrasPartesCliente.Object);
        // Act
        _outraspartesclienteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockOutrasPartesClienteFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBOutrasPartesClienteDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#region DateTime Tests
    [Fact]
    public void Read_WithValidDateDtNascFields_ShouldParseAndSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var testDate = "31/12/2024";
        SetupMockFOutrasPartesCliente(DtNasc: testDate);
        _mockOutrasPartesClienteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOutrasPartesCliente.Object);
        // Act
        var result = _outraspartesclienteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtNasc.Should().Be("31/12/2024");
    }

    [Fact]
    public void Read_WithInvalidDateDtNascStrings_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFOutrasPartesCliente(DtNasc: "invalid-date");
        _mockOutrasPartesClienteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOutrasPartesCliente.Object);
        // Act
        var result = _outraspartesclienteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtNasc.Should().Be("");
    }

    [Fact]
    public void Read_WithNullDateDtNascFields_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFOutrasPartesCliente(DtNasc: null);
        _mockOutrasPartesClienteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOutrasPartesCliente.Object);
        // Act
        var result = _outraspartesclienteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtNasc.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("31/12/2024")]
    [InlineData("2025/01/01T23:59:59")]
    [InlineData("2000-02-29")] // Leap year
    [InlineData("2025/01/02T14:30:45.123")]
    public void Read_WithValidDateDtNascFormats_ShouldParseCorrectly(string dateString)
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedDate = DateTime.Parse(dateString);
        SetupMockFOutrasPartesCliente(DtNasc: dateString);
        _mockOutrasPartesClienteFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFOutrasPartesCliente.Object);
        // Act
        var result = _outraspartesclienteWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtNasc.Should().Be(dateString);
    }
#endregion
#endregion
}