// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class AndamentosMDService
{
    public (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterAndamentosMD? filtro)
    {
        if (filtro == null)
            return null;
        var parameters = new List<SqlParameter>();
        if (!string.IsNullOrWhiteSpace(filtro.GUID))
        {
            parameters.Add(new($"@{(DBAndamentosMDDicInfo.GUID)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.GUID)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Nome))
        {
            parameters.Add(new($"@{(DBAndamentosMDDicInfo.Nome)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Nome)));
        }

        if (filtro.Processo != int.MinValue)
        {
            parameters.Add(new($"@{(DBAndamentosMDDicInfo.Processo)}", filtro.Processo));
            if (filtro.Processo_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBAndamentosMDDicInfo.Processo)}_end", filtro.Processo_end));
            }
        }

        if (filtro.Andamento != int.MinValue)
        {
            parameters.Add(new($"@{(DBAndamentosMDDicInfo.Andamento)}", filtro.Andamento));
            if (filtro.Andamento_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBAndamentosMDDicInfo.Andamento)}_end", filtro.Andamento_end));
            }
        }

        if (!string.IsNullOrWhiteSpace(filtro.PathFull))
        {
            parameters.Add(new($"@{(DBAndamentosMDDicInfo.PathFull)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.PathFull)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.UNC))
        {
            parameters.Add(new($"@{(DBAndamentosMDDicInfo.UNC)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.UNC)));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{(DBAndamentosMDDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
            if (filtro.Codigo_filtro_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBAndamentosMDDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
            }
        }

        if (filtro.LogicalOperator.IsEmptyX() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        cWhere.Append(filtro.GUID.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAndamentosMDDicInfo.PTabelaNome}].[{DBAndamentosMDDicInfo.GUID}]  {DevourerConsts.MsiCollate} like @{(DBAndamentosMDDicInfo.GUID)}");
        cWhere.Append(filtro.Nome.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAndamentosMDDicInfo.PTabelaNome}].[{DBAndamentosMDDicInfo.Nome}]  {DevourerConsts.MsiCollate} like @{(DBAndamentosMDDicInfo.Nome)}");
        if (!(filtro.Processo.IsEmptyX()) && filtro.Processo_end.IsEmptyX())
        {
            cWhere.Append(filtro.Processo.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAndamentosMDDicInfo.PTabelaNome}].[{DBAndamentosMDDicInfo.Processo}] = @{(DBAndamentosMDDicInfo.Processo)}");
        }
        else if (!(filtro.Processo.IsEmptyX()) && !(filtro.Processo_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAndamentosMDDicInfo.PTabelaNome}].{DBAndamentosMDDicInfo.Processo} BETWEEN @{(DBAndamentosMDDicInfo.Processo)} AND @{(DBAndamentosMDDicInfo.Processo)}_end");
        }

        if (!(filtro.Andamento.IsEmptyX()) && filtro.Andamento_end.IsEmptyX())
        {
            cWhere.Append(filtro.Andamento.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAndamentosMDDicInfo.PTabelaNome}].[{DBAndamentosMDDicInfo.Andamento}] = @{(DBAndamentosMDDicInfo.Andamento)}");
        }
        else if (!(filtro.Andamento.IsEmptyX()) && !(filtro.Andamento_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAndamentosMDDicInfo.PTabelaNome}].{DBAndamentosMDDicInfo.Andamento} BETWEEN @{(DBAndamentosMDDicInfo.Andamento)} AND @{(DBAndamentosMDDicInfo.Andamento)}_end");
        }

        cWhere.Append(filtro.PathFull.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAndamentosMDDicInfo.PTabelaNome}].[{DBAndamentosMDDicInfo.PathFull}]  {DevourerConsts.MsiCollate} like @{(DBAndamentosMDDicInfo.PathFull)}");
        cWhere.Append(filtro.UNC.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAndamentosMDDicInfo.PTabelaNome}].[{DBAndamentosMDDicInfo.UNC}]  {DevourerConsts.MsiCollate} like @{(DBAndamentosMDDicInfo.UNC)}");
        if (!(filtro.Codigo_filtro.IsEmptyX()) && filtro.Codigo_filtro_end.IsEmptyX())
        {
            cWhere.Append(filtro.Codigo_filtro.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAndamentosMDDicInfo.PTabelaNome}].[{DBAndamentosMDDicInfo.CampoCodigo}] = @{(DBAndamentosMDDicInfo.CampoCodigo)}");
        }
        else if (!(filtro.Codigo_filtro.IsEmptyX()) && !(filtro.Codigo_filtro_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBAndamentosMDDicInfo.PTabelaNome}].{DBAndamentosMDDicInfo.CampoCodigo} BETWEEN @{(DBAndamentosMDDicInfo.CampoCodigo)} AND @{(DBAndamentosMDDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private string GetFilterHash(Filters.FilterAndamentosMD? filtro)
    {
        if (filtro == null)
            return string.Empty;
        var json = JsonSerializer.Serialize(filtro);
        using var sha256 = SHA256.Create();
        var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(json));
        return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
    }

    public async Task<IEnumerable<NomeID>> GetListN([FromQuery] int max, [FromBody] Filters.FilterAndamentosMD? filtro, [FromRoute, Required] string uri, CancellationToken token)
    {
        // Tracking: 20250606-0
        ThrowIfDisposed();
        var filtroResult = filtro == null ? null : WFiltro(filtro!);
        string where = filtroResult?.where ?? string.Empty;
        List<SqlParameter>? parameters = filtroResult?.parametros ?? [];
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new Exception($"Coneão nula.");
        }

        var keyCache = await reader.ReadStringAuditor(max, uri, "", [], oCnn);
        var cacheKey = $"{uri}-AndamentosMD-{max}-{where.GetHashCode()}-GetListN-{keyCache}";
        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId)
        };
        return await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataListNAsync(max, uri, where, parameters, cancel), entryOptions, cancellationToken: token) ?? [];
    }

    private async Task<IEnumerable<NomeID>> GetDataListNAsync(int max, string uri, string where, List<SqlParameter>? parameters, CancellationToken token)
    {
        var result = new List<NomeID>(max);
        var lista = await reader.ListarN(max, uri, where, parameters, DBAndamentosMDDicInfo.CampoNome);
        foreach (var item in lista)
        {
            if (token.IsCancellationRequested)
                break;
            if (item?.FNome != null)
            {
                result.Add(new NomeID { Nome = item.FNome, ID = item.ID });
            }
        }

        return result;
    }

    private async Task<IEnumerable<AndamentosMDResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter>? parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}