// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class PontoVirtualWriterTests
{
    private readonly Mock<IFPontoVirtualFactory> _mockPontoVirtualFactory;
    private readonly Mock<FPontoVirtual> _mockFPontoVirtual;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly PontoVirtualWriter _pontovirtualWriter;
    public PontoVirtualWriterTests()
    {
        _mockPontoVirtualFactory = new Mock<IFPontoVirtualFactory>();
        _mockFPontoVirtual = new Mock<FPontoVirtual>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _pontovirtualWriter = new PontoVirtualWriter(_mockPontoVirtualFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var pontovirtual = CreateValidPontoVirtualModel();
        pontovirtual.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockPontoVirtualFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFPontoVirtual.Object);
        _mockFPontoVirtual.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _pontovirtualWriter.WriteAsync(pontovirtual, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFPontoVirtual.Object);
        _mockPontoVirtualFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockPontoVirtualFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFPontoVirtual.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var pontovirtual = CreateValidPontoVirtualModel();
        pontovirtual.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockPontoVirtualFactory.Setup(x => x.CreateFromIdAsync(pontovirtual.Id, _mockConnection.Object)).ReturnsAsync(_mockFPontoVirtual.Object);
        _mockFPontoVirtual.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _pontovirtualWriter.WriteAsync(pontovirtual, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFPontoVirtual.Object);
        _mockPontoVirtualFactory.Verify(x => x.CreateFromIdAsync(pontovirtual.Id, _mockConnection.Object), Times.Once);
        _mockPontoVirtualFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFPontoVirtual.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var pontovirtual = CreateValidPontoVirtualModel();
        var auditorQuem = 99;
        _mockPontoVirtualFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFPontoVirtual.Object);
        _mockFPontoVirtual.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _pontovirtualWriter.WriteAsync(pontovirtual, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFPontoVirtual.Object);
        _mockFPontoVirtual.VerifySet(x => x.FHoraEntrada = pontovirtual.HoraEntrada.ToString(), Times.Once);
        _mockFPontoVirtual.VerifySet(x => x.FHoraSaida = pontovirtual.HoraSaida.ToString(), Times.Once);
        _mockFPontoVirtual.VerifySet(x => x.FOperador = pontovirtual.Operador, Times.Once);
        _mockFPontoVirtual.VerifySet(x => x.FKey = pontovirtual.Key, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithNullHoraEntrada_ShouldNotSetFHoraEntrada()
    {
        // Arrange
        var pontovirtual = CreateValidPontoVirtualModel();
        pontovirtual.HoraEntrada = null;
        var auditorQuem = 123;
        _mockPontoVirtualFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFPontoVirtual.Object);
        _mockFPontoVirtual.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _pontovirtualWriter.WriteAsync(pontovirtual, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFPontoVirtual.VerifySet(x => x.FHoraEntrada = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WithNullHoraSaida_ShouldNotSetFHoraSaida()
    {
        // Arrange
        var pontovirtual = CreateValidPontoVirtualModel();
        pontovirtual.HoraSaida = null;
        var auditorQuem = 123;
        _mockPontoVirtualFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFPontoVirtual.Object);
        _mockFPontoVirtual.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        await _pontovirtualWriter.WriteAsync(pontovirtual, auditorQuem, _mockConnection.Object);
        // Assert
        _mockFPontoVirtual.VerifySet(x => x.FHoraSaida = It.IsAny<string>(), Times.Never);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var pontovirtual = CreateValidPontoVirtualModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockPontoVirtualFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _pontovirtualWriter.WriteAsync(pontovirtual, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var pontovirtual = CreateValidPontoVirtualModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockPontoVirtualFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFPontoVirtual.Object);
        _mockFPontoVirtual.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _pontovirtualWriter.WriteAsync(pontovirtual, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var pontovirtualResponse = new PontoVirtualResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockPontoVirtualFactory.Setup(x => x.DeleteAsync(operadorId, pontovirtualResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _pontovirtualWriter.Delete(pontovirtualResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockPontoVirtualFactory.Verify(x => x.DeleteAsync(operadorId, pontovirtualResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var pontovirtualResponse = new PontoVirtualResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockPontoVirtualFactory.Setup(x => x.DeleteAsync(operadorId, pontovirtualResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _pontovirtualWriter.Delete(pontovirtualResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var pontovirtualResponse = new PontoVirtualResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockPontoVirtualFactory.Setup(x => x.DeleteAsync(operadorId, pontovirtualResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _pontovirtualWriter.Delete(pontovirtualResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new PontoVirtualWriter(_mockPontoVirtualFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new PontoVirtualWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.PontoVirtual CreateValidPontoVirtualModel()
    {
        return new Models.PontoVirtual
        {
            Id = 0,
            HoraEntrada = "04:04",
            HoraSaida = "04:04",
            Operador = 1,
            Key = "AAAAAAAAAAAAAAAAAAAAA"
        };
    }
#endregion
}