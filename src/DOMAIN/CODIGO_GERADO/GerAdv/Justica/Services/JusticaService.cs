// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class JusticaService(IOptions<AppSettings> appSettings, IFJusticaFactory justicaFactory, IJusticaReader reader, IJusticaValidation validation, IJusticaWriter writer, IAcaoService acaoService, IAgendaService agendaService, IAgendaFinanceiroService agendafinanceiroService, IAreasJusticaService areasjusticaService, IDivisaoTribunalService divisaotribunalService, IFaseService faseService, IObjetosService objetosService, IPoderJudiciarioAssociadoService poderjudiciarioassociadoService, IProcessosService processosService, ITipoRecursoService tiporecursoService, ITribunalService tribunalService, IHttpContextAccessor httpContextAccessor, HybridCache cache, IMemoryCache memory) : IJusticaService, IDisposable
{
    private readonly IHttpContextAccessor _httpContextAccessor = httpContextAccessor;
    private readonly IOptions<AppSettings> _appSettings = appSettings;
    private readonly HybridCache _cache = cache;
    private readonly IMemoryCache _memoryCache = memory;
    private bool _disposed;
    private readonly IFJusticaFactory justicaFactory = justicaFactory;
    private readonly IJusticaReader reader = reader;
    private readonly IJusticaValidation validation = validation;
    private readonly IJusticaWriter writer = writer;
    private readonly IAcaoService acaoService = acaoService;
    private readonly IAgendaService agendaService = agendaService;
    private readonly IAgendaFinanceiroService agendafinanceiroService = agendafinanceiroService;
    private readonly IAreasJusticaService areasjusticaService = areasjusticaService;
    private readonly IDivisaoTribunalService divisaotribunalService = divisaotribunalService;
    private readonly IFaseService faseService = faseService;
    private readonly IObjetosService objetosService = objetosService;
    private readonly IPoderJudiciarioAssociadoService poderjudiciarioassociadoService = poderjudiciarioassociadoService;
    private readonly IProcessosService processosService = processosService;
    private readonly ITipoRecursoService tiporecursoService = tiporecursoService;
    private readonly ITribunalService tribunalService = tribunalService;
    public async Task<IEnumerable<JusticaResponseAll>> GetAll(int max, [FromRoute, Required] string uri, CancellationToken token = default)
    {
        max = Math.Min(Math.Max(max, 1), BaseConsts.PMaxItens);
        ThrowIfDisposed();
        if (!Uris.ValidaUri(uri, _appSettings))
        {
            throw new Exception("Justica: URI inválida");
        }

        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromMinutes(BaseConsts.PMaxMinutesCache),
            LocalCacheExpiration = TimeSpan.FromMinutes(BaseConsts.PMaxMinutesCache)
        };
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        var keyCache = await reader.ReadStringAuditor(uri, "", [], oCnn);
        var cacheKey = $"{uri}-Justica-Filter-{keyCache}";
        var result = await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataAllAsync(max, string.Empty, [], uri, cancel), entryOptions, cancellationToken: token);
        return result;
    }

    public async Task<IEnumerable<JusticaResponseAll>> Filter(Filters.FilterJustica filtro, [FromRoute, Required] string uri)
    {
        ThrowIfDisposed();
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var filtroResult = filtro == null ? null : WFiltro(filtro!);
        string where = filtroResult?.where ?? string.Empty;
        List<SqlParameter> parameters = filtroResult?.parametros ?? [];
        var keyCache = await reader.ReadStringAuditor(uri, where, parameters, oCnn);
        var cacheKey = $"{uri}-Justica-Filter-{where.GetHashCode()}{parameters.GetHashCode()}{keyCache}";
        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxGetListSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxGetListSecondsCacheId)
        };
        var result = await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataAllAsync(BaseConsts.PMaxItens, string.IsNullOrEmpty(where) ? string.Empty : TSql.Where + where, parameters, uri, cancel), entryOptions, cancellationToken: new());
        return result;
    }

    public async Task<JusticaResponse?> GetById([FromQuery] int id, [FromRoute, Required] string uri, CancellationToken token)
    {
        ThrowIfDisposed();
        if (id < 1)
        {
            return new JusticaResponse();
        }

        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId)
        };
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        try
        {
            var keyCache = await reader.ReadStringAuditor(id, uri, oCnn);
            var result = await _cache.GetOrCreateAsync($"{uri}-Justica-GetById-{id}-{keyCache}", async cancel => await GetDataByIdAsync(id, oCnn, cancel), entryOptions, cancellationToken: token);
            return result;
        }
        catch (Exception)
        {
            throw new Exception($"Justica - {uri}-: GetById");
        }
    }

    private async Task<JusticaResponse?> GetDataByIdAsync(int id, MsiSqlConnection oCnn, CancellationToken token) => await reader.Read(id, oCnn);
    public async Task<JusticaResponse?> AddAndUpdate([FromBody] Models.Justica regJustica, [FromRoute, Required] string uri)
    {
        ThrowIfDisposed();
        if (!Uris.ValidaUri(uri, _appSettings))
        {
            throw new Exception("Justica: URI inválida");
        }

        if (regJustica == null)
        {
            return null;
        }

        using var oCnn = Configuracoes.GetConnectionByUriRw(uri);
        if (oCnn == null)
        {
            return null;
        }

        try
        {
            var validade = await validation.ValidateReg(regJustica, this, uri, oCnn);
            if (!validade)
            {
                throw new Exception("Erro inesperado ao vaidadar 0x0!");
            }
        }
        catch (SGValidationException ex)
        {
            throw new Exception(ex.Message);
        }
        catch (Exception)
        {
            throw new Exception("Erro inesperado ao vaidadar 0x1!");
        }

        int operadorId = UserTools.GetAuthenticatedUserId(_httpContextAccessor);
        using var saved = await writer.WriteAsync(regJustica, operadorId, oCnn);
        return reader.Read(saved, oCnn);
    }

    public async Task<JusticaResponse?> Validation([FromBody] Models.Justica regJustica, [FromRoute, Required] string uri)
    {
        ThrowIfDisposed();
        if (!Uris.ValidaUri(uri, _appSettings))
        {
            throw new Exception("Justica: URI inválida");
        }

        if (regJustica == null)
        {
            return null;
        }

        using var oCnn = Configuracoes.GetConnectionByUriRw(uri);
        if (oCnn == null)
        {
            return null;
        }

        try
        {
            var validade = await validation.ValidateReg(regJustica, this, uri, oCnn);
            if (!validade)
            {
                throw new Exception("Erro inesperado ao vaidadar 0x0!");
            }
        }
        catch (SGValidationException ex)
        {
            throw new Exception(ex.Message);
        }
        catch (Exception)
        {
            throw new Exception("Erro inesperado ao vaidadar 0x1!");
        }

        if (regJustica.Id.IsEmptyIDNumber())
        {
            return new JusticaResponse();
        }

        return await reader.Read(regJustica.Id, oCnn);
    }

    public async Task<JusticaResponse?> Delete([FromQuery] int id, [FromRoute, Required] string uri)
    {
        ThrowIfDisposed();
        if (!Uris.ValidaUri(uri, _appSettings))
        {
            throw new Exception("Justica: URI inválida");
        }

        if (id.IsEmptyIDNumber())
        {
            return null;
        }

        var nOperador = UserTools.GetAuthenticatedUserId(_httpContextAccessor);
        using var oCnn = Configuracoes.GetConnectionByUriRw(uri);
        if (oCnn == null)
        {
            return null;
        }

        try
        {
            var deleteValidation = await validation.CanDelete(id, this, acaoService, agendaService, agendafinanceiroService, areasjusticaService, divisaotribunalService, faseService, objetosService, poderjudiciarioassociadoService, processosService, tiporecursoService, tribunalService, uri, oCnn);
            if (!deleteValidation)
            {
                throw new Exception("Erro inesperado ao vaidadar 0x0!");
            }
        }
        catch (SGValidationException ex)
        {
            throw new Exception(ex.Message);
        }
        catch (Exception)
        {
            throw new Exception("Erro inesperado ao vaidadar 0x1!");
        }

        var justica = await reader.Read(id, oCnn);
        try
        {
            if (justica != null)
            {
                await writer.Delete(justica, nOperador, oCnn);
                if (_memoryCache is MemoryCache memCache)
                {
                    memCache.Compact(1.0);
                }
            }
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }

        return justica;
    }

    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (_disposed)
            return;
        if (disposing)
        {
        //_cache?.Dispose();
        }

        _disposed = true;
    }

    private void ThrowIfDisposed()
    {
        if (_disposed)
        {
            throw new ObjectDisposedException(GetType().Name);
        }
    }
}