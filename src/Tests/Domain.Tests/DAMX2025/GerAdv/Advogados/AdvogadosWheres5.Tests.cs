// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class AdvogadosWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFAdvogadosFactory> _mockAdvogadosFactory;
    private readonly Mock<FAdvogados> _mockFAdvogados;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly AdvogadosWhere _advogadosWhere;
    public AdvogadosWhereTests()
    {
        _mockAdvogadosFactory = new Mock<IFAdvogadosFactory>();
        _mockFAdvogados = new Mock<FAdvogados>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _advogadosWhere = new AdvogadosWhere(_mockAdvogadosFactory.Object);
    }

    public void Dispose()
    {
        _mockAdvogadosFactory?.Reset();
        _mockFAdvogados?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
        };
    }

    private void SetupMockFAdvogados(int? Cargo = 1, string? EMailPro = "test@email.com", string? CPF = "544.506.718-13", string? Nome = "João", string? RG = "12.345.678-9", bool? Casa = false, string? NomeMae = "João", int? Escritorio = 1, bool? Estagiario = true, string? OAB = "AAAAAAAAAA", string? NomeCompleto = "João", string? Endereco = "Rua das Flores, 123", int? Cidade = 1, string? CEP = "01234-567", bool? Sexo = false, string? Bairro = "Centro", string? CTPSSerie = "AAAAAAAA", string? CTPS = "AAAAAAAAAAAAA", string? Fone = "(11) 99999-9999", string? Fax = "(11) 88888-9999", int? Comissao = 1, string? DtInicio = "24/04/1975", string? DtFim = "24/04/1975", string? DtNasc = "24/04/1975", decimal? Salario = 1m, string? Secretaria = "AAAAAAAAAAAAAAAAAA", string? TextoProcuracao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string? EMail = "test@email.com", string? Especializacao = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string? Pasta = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string? Observacao = "Observação teste", string? ContaBancaria = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", bool? ParcTop = true, string? Class = "A", bool? Top = false)
    {
        _mockFAdvogados.Setup(f => f.FCargo).Returns(Cargo ?? 0);
        _mockFAdvogados.Setup(f => f.FEMailPro).Returns(EMailPro ?? string.Empty);
        _mockFAdvogados.Setup(f => f.FCPF).Returns(CPF ?? string.Empty);
        _mockFAdvogados.Setup(f => f.FNome).Returns(Nome ?? string.Empty);
        _mockFAdvogados.Setup(f => f.FRG).Returns(RG ?? string.Empty);
        _mockFAdvogados.Setup(f => f.FCasa).Returns(Casa ?? false);
        _mockFAdvogados.Setup(f => f.FNomeMae).Returns(NomeMae ?? string.Empty);
        _mockFAdvogados.Setup(f => f.FEscritorio).Returns(Escritorio ?? 0);
        _mockFAdvogados.Setup(f => f.FEstagiario).Returns(Estagiario ?? false);
        _mockFAdvogados.Setup(f => f.FOAB).Returns(OAB ?? string.Empty);
        _mockFAdvogados.Setup(f => f.FNomeCompleto).Returns(NomeCompleto ?? string.Empty);
        _mockFAdvogados.Setup(f => f.FEndereco).Returns(Endereco ?? string.Empty);
        _mockFAdvogados.Setup(f => f.FCidade).Returns(Cidade ?? 0);
        _mockFAdvogados.Setup(f => f.FCEP).Returns(CEP ?? string.Empty);
        _mockFAdvogados.Setup(f => f.FSexo).Returns(Sexo ?? false);
        _mockFAdvogados.Setup(f => f.FBairro).Returns(Bairro ?? string.Empty);
        _mockFAdvogados.Setup(f => f.FCTPSSerie).Returns(CTPSSerie ?? string.Empty);
        _mockFAdvogados.Setup(f => f.FCTPS).Returns(CTPS ?? string.Empty);
        _mockFAdvogados.Setup(f => f.FFone).Returns(Fone ?? string.Empty);
        _mockFAdvogados.Setup(f => f.FFax).Returns(Fax ?? string.Empty);
        _mockFAdvogados.Setup(f => f.FComissao).Returns(Comissao ?? 0);
        _mockFAdvogados.Setup(f => f.FDtInicio).Returns(DtInicio ?? string.Empty);
        _mockFAdvogados.Setup(f => f.FDtFim).Returns(DtFim ?? string.Empty);
        _mockFAdvogados.Setup(f => f.FDtNasc).Returns(DtNasc ?? string.Empty);
        _mockFAdvogados.Setup(f => f.FSalario).Returns(Salario ?? 0m);
        _mockFAdvogados.Setup(f => f.FSecretaria).Returns(Secretaria ?? string.Empty);
        _mockFAdvogados.Setup(f => f.FTextoProcuracao).Returns(TextoProcuracao ?? string.Empty);
        _mockFAdvogados.Setup(f => f.FEMail).Returns(EMail ?? string.Empty);
        _mockFAdvogados.Setup(f => f.FEspecializacao).Returns(Especializacao ?? string.Empty);
        _mockFAdvogados.Setup(f => f.FPasta).Returns(Pasta ?? string.Empty);
        _mockFAdvogados.Setup(f => f.FObservacao).Returns(Observacao ?? string.Empty);
        _mockFAdvogados.Setup(f => f.FContaBancaria).Returns(ContaBancaria ?? string.Empty);
        _mockFAdvogados.Setup(f => f.FParcTop).Returns(ParcTop ?? false);
        _mockFAdvogados.Setup(f => f.FClass).Returns(Class ?? string.Empty);
        _mockFAdvogados.Setup(f => f.FTop).Returns(Top ?? false);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFAdvogadosFactory>();
        // Act
        var advogadosWhere = new AdvogadosWhere(mockFactory.Object);
        // Assert
        advogadosWhere.Should().NotBeNull();
        advogadosWhere.Should().BeAssignableTo<IAdvogadosWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFAdvogadosFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new AdvogadosWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnAdvogadosResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFAdvogados();
        _mockAdvogadosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAdvogados.Object);
        // Act
        var result = _advogadosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.Cargo.Should().Be(1);
        result.EMailPro.Should().Be("test@email.com");
        result.CPF.Should().Be("544.506.718-13");
        result.Nome.Should().Be("João");
        result.RG.Should().Be("12.345.678-9");
        result.Casa.Should().Be(false);
        result.NomeMae.Should().Be("João");
        result.Escritorio.Should().Be(1);
        result.Estagiario.Should().Be(true);
        result.OAB.Should().Be("AAAAAAAAAA");
        result.NomeCompleto.Should().Be("João");
        result.Endereco.Should().Be("Rua das Flores, 123");
        result.Cidade.Should().Be(1);
        result.CEP.Should().Be("01234-567");
        result.Sexo.Should().Be(false);
        result.Bairro.Should().Be("Centro");
        result.CTPSSerie.Should().Be("AAAAAAAA");
        result.CTPS.Should().Be("AAAAAAAAAAAAA");
        result.Fone.Should().Be("(11) 99999-9999");
        result.Fax.Should().Be("(11) 88888-9999");
        result.Comissao.Should().Be(1);
        result.DtInicio.Should().Be("24/04/1975");
        result.DtFim.Should().Be("24/04/1975");
        result.DtNasc.Should().Be("24/04/1975");
        result.Salario.Should().Be(1m);
        result.Secretaria.Should().Be("AAAAAAAAAAAAAAAAAA");
        result.TextoProcuracao.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.EMail.Should().Be("test@email.com");
        result.Especializacao.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.Pasta.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Observacao.Should().Be("Observação teste");
        result.ContaBancaria.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.ParcTop.Should().Be(true);
        result.Class.Should().Be("A");
        result.Top.Should().Be(false);
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFAdvogados(Cargo: null, EMailPro: null, CPF: null, Nome: null, RG: null, Casa: null, NomeMae: null, Escritorio: null, Estagiario: null, OAB: null, NomeCompleto: null, Endereco: null, Cidade: null, CEP: null, Sexo: null, Bairro: null, CTPSSerie: null, CTPS: null, Fone: null, Fax: null, Comissao: null, DtInicio: null, DtFim: null, DtNasc: null, Salario: null, Secretaria: null, TextoProcuracao: null, EMail: null, Especializacao: null, Pasta: null, Observacao: null, ContaBancaria: null, ParcTop: null, Class: null, Top: null);
        _mockAdvogadosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAdvogados.Object);
        // Act
        var result = _advogadosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Cargo.Should().Be(0);
        result.EMailPro.Should().Be(string.Empty);
        result.CPF.Should().Be(string.Empty);
        result.Nome.Should().Be(string.Empty);
        result.RG.Should().Be(string.Empty);
        result.Casa.Should().Be(false);
        result.NomeMae.Should().Be(string.Empty);
        result.Escritorio.Should().Be(0);
        result.Estagiario.Should().Be(false);
        result.OAB.Should().Be(string.Empty);
        result.NomeCompleto.Should().Be(string.Empty);
        result.Endereco.Should().Be(string.Empty);
        result.Cidade.Should().Be(0);
        result.CEP.Should().Be(string.Empty);
        result.Sexo.Should().Be(false);
        result.Bairro.Should().Be(string.Empty);
        result.CTPSSerie.Should().Be(string.Empty);
        result.CTPS.Should().Be(string.Empty);
        result.Fone.Should().Be(string.Empty);
        result.Fax.Should().Be(string.Empty);
        result.Comissao.Should().Be(0);
        result.DtInicio.Should().Be(string.Empty);
        result.DtFim.Should().Be(string.Empty);
        result.DtNasc.Should().Be(string.Empty);
        result.Salario.Should().Be(0m);
        result.Secretaria.Should().Be(string.Empty);
        result.TextoProcuracao.Should().Be(string.Empty);
        result.EMail.Should().Be(string.Empty);
        result.Especializacao.Should().Be(string.Empty);
        result.Pasta.Should().Be(string.Empty);
        result.Observacao.Should().Be(string.Empty);
        result.ContaBancaria.Should().Be(string.Empty);
        result.ParcTop.Should().Be(false);
        result.Class.Should().Be(string.Empty);
        result.Top.Should().Be(false);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFAdvogados();
        _mockAdvogadosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFAdvogados.Object);
        // Act
        var result = _advogadosWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockAdvogadosFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFAdvogados();
        _mockAdvogadosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAdvogados.Object);
        // Act
        var result = _advogadosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockAdvogadosFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFAdvogados();
        _mockAdvogadosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAdvogados.Object);
        // Act
        var result = _advogadosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockAdvogadosFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFAdvogados();
        _mockAdvogadosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAdvogados.Object);
        // Act
        _advogadosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockAdvogadosFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFAdvogadosInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFAdvogados.Setup(f => f.Dispose());
        SetupMockFAdvogados();
        _mockAdvogadosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAdvogados.Object);
        // Act
        _advogadosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFAdvogados.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockAdvogadosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _advogadosWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFAdvogados(Cargo: 1, EMailPro: "test@email.com", CPF: "544.506.718-13", Nome: "João", RG: "12.345.678-9", Casa: false, NomeMae: "João", Escritorio: 1, Estagiario: true, OAB: "AAAAAAAAAA", NomeCompleto: "João", Endereco: "Rua das Flores, 123", Cidade: 1, CEP: "01234-567", Sexo: false, Bairro: "Centro", CTPSSerie: "AAAAAAAA", CTPS: "AAAAAAAAAAAAA", Fone: "(11) 99999-9999", Fax: "(11) 88888-9999", Comissao: 1, DtInicio: "24/04/1975", DtFim: "24/04/1975", DtNasc: "24/04/1975", Salario: 1m, Secretaria: "AAAAAAAAAAAAAAAAAA", TextoProcuracao: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", EMail: "test@email.com", Especializacao: "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", Pasta: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", Observacao: "Observação teste", ContaBancaria: "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", ParcTop: true, Class: "A", Top: false);
        _mockAdvogadosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAdvogados.Object);
        // Act
        var result = _advogadosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.Cargo.Should().Be(1);
        result.EMailPro.Should().Be("test@email.com");
        result.CPF.Should().Be("544.506.718-13");
        result.Nome.Should().Be("João");
        result.RG.Should().Be("12.345.678-9");
        result.Casa.Should().Be(false);
        result.NomeMae.Should().Be("João");
        result.Escritorio.Should().Be(1);
        result.Estagiario.Should().Be(true);
        result.OAB.Should().Be("AAAAAAAAAA");
        result.NomeCompleto.Should().Be("João");
        result.Endereco.Should().Be("Rua das Flores, 123");
        result.Cidade.Should().Be(1);
        result.CEP.Should().Be("01234-567");
        result.Sexo.Should().Be(false);
        result.Bairro.Should().Be("Centro");
        result.CTPSSerie.Should().Be("AAAAAAAA");
        result.CTPS.Should().Be("AAAAAAAAAAAAA");
        result.Fone.Should().Be("(11) 99999-9999");
        result.Fax.Should().Be("(11) 88888-9999");
        result.Comissao.Should().Be(1);
        result.DtInicio.Should().Be("24/04/1975");
        result.DtFim.Should().Be("24/04/1975");
        result.DtNasc.Should().Be("24/04/1975");
        result.Salario.Should().Be(1m);
        result.Secretaria.Should().Be("AAAAAAAAAAAAAAAAAA");
        result.TextoProcuracao.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.EMail.Should().Be("test@email.com");
        result.Especializacao.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.Pasta.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        result.Observacao.Should().Be("Observação teste");
        result.ContaBancaria.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.ParcTop.Should().Be(true);
        result.Class.Should().Be("A");
        result.Top.Should().Be(false);
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "Nome = @{DBAdvogadosDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBAdvogadosDicInfo.CampoNome}", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"),
        };
        SetupMockFAdvogados();
        _mockAdvogadosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAdvogados.Object);
        // Act
        _advogadosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockAdvogadosFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBAdvogadosDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#region DateTime Tests
    [Fact]
    public void Read_WithValidDateDtInicioFields_ShouldParseAndSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var testDate = "31/12/2024";
        SetupMockFAdvogados(DtInicio: testDate);
        _mockAdvogadosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAdvogados.Object);
        // Act
        var result = _advogadosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtInicio.Should().Be("31/12/2024");
    }

    [Fact]
    public void Read_WithInvalidDateDtInicioStrings_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFAdvogados(DtInicio: "invalid-date");
        _mockAdvogadosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAdvogados.Object);
        // Act
        var result = _advogadosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtInicio.Should().Be("");
    }

    [Fact]
    public void Read_WithNullDateDtInicioFields_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFAdvogados(DtInicio: null);
        _mockAdvogadosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAdvogados.Object);
        // Act
        var result = _advogadosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtInicio.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("31/12/2024")]
    [InlineData("2025/01/01T23:59:59")]
    [InlineData("2000-02-29")] // Leap year
    [InlineData("2025/01/02T14:30:45.123")]
    public void Read_WithValidDateDtInicioFormats_ShouldParseCorrectly(string dateString)
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedDate = DateTime.Parse(dateString);
        SetupMockFAdvogados(DtInicio: dateString);
        _mockAdvogadosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAdvogados.Object);
        // Act
        var result = _advogadosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtInicio.Should().Be(dateString);
    }

    [Fact]
    public void Read_WithValidDateDtFimFields_ShouldParseAndSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var testDate = "01/01/2025";
        SetupMockFAdvogados(DtFim: testDate);
        _mockAdvogadosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAdvogados.Object);
        // Act
        var result = _advogadosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtFim.Should().Be("01/01/2025");
    }

    [Fact]
    public void Read_WithInvalidDateDtFimStrings_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFAdvogados(DtFim: "invalid-date");
        _mockAdvogadosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAdvogados.Object);
        // Act
        var result = _advogadosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtFim.Should().Be("");
    }

    [Fact]
    public void Read_WithNullDateDtFimFields_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFAdvogados(DtFim: null);
        _mockAdvogadosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAdvogados.Object);
        // Act
        var result = _advogadosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtFim.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("01/01/2025")]
    [InlineData("2025/01/02T23:59:59")]
    [InlineData("2000-02-29")] // Leap year
    [InlineData("2025/01/03T14:30:45.123")]
    public void Read_WithValidDateDtFimFormats_ShouldParseCorrectly(string dateString)
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedDate = DateTime.Parse(dateString);
        SetupMockFAdvogados(DtFim: dateString);
        _mockAdvogadosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAdvogados.Object);
        // Act
        var result = _advogadosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtFim.Should().Be(dateString);
    }

    [Fact]
    public void Read_WithValidDateDtNascFields_ShouldParseAndSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var testDate = "02/01/2025";
        SetupMockFAdvogados(DtNasc: testDate);
        _mockAdvogadosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAdvogados.Object);
        // Act
        var result = _advogadosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtNasc.Should().Be("02/01/2025");
    }

    [Fact]
    public void Read_WithInvalidDateDtNascStrings_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFAdvogados(DtNasc: "invalid-date");
        _mockAdvogadosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAdvogados.Object);
        // Act
        var result = _advogadosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtNasc.Should().Be("");
    }

    [Fact]
    public void Read_WithNullDateDtNascFields_ShouldNotSetDateProperties()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFAdvogados(DtNasc: null);
        _mockAdvogadosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAdvogados.Object);
        // Act
        var result = _advogadosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtNasc.Should().Be(string.Empty);
    }

    [Theory]
    [InlineData("02/01/2025")]
    [InlineData("2025/01/03T23:59:59")]
    [InlineData("2000-02-29")] // Leap year
    [InlineData("2025/01/04T14:30:45.123")]
    public void Read_WithValidDateDtNascFormats_ShouldParseCorrectly(string dateString)
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedDate = DateTime.Parse(dateString);
        SetupMockFAdvogados(DtNasc: dateString);
        _mockAdvogadosFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAdvogados.Object);
        // Act
        var result = _advogadosWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.DtNasc.Should().Be(dateString);
    }
#endregion
#endregion
}