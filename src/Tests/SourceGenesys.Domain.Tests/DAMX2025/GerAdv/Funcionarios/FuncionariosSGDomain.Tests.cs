// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
/// <summary>
/// Template de testes unitários para classes geradas pelo Source Genesys
/// Variáveis de substituição:
/// MenphisSI.GerAdv - Namespace da classe
/// DBFuncionarios - Nome da classe (ex: DBClientes)
/// Funcionarios - Nome da tabela (ex: Clientes)
/// fun - Prefixo dos campos (ex: cli)
/// funCodigo - Nome do campo código (ex: cliCodigo)
/// funNome - Nome do campo nome (ex: cliNome)
/// DBFuncionarios.CadastroGuid - GUID do cadastro
/// </summary>
namespace MenphisSI.GerAdv.Tests;
public class DBFuncionariosTests : IDisposable
{
    private readonly DBFuncionarios _instance;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DataTable _testDataTable;
    public DBFuncionariosTests()
    {
        _instance = new DBFuncionarios();
        _mockConnection = new Mock<MsiSqlConnection>();
        _testDataTable = CreateTestDataTable();
    }

    private DataTable CreateTestDataTable()
    {
        var dt = new DataTable();
        // Campos obrigatórios Source Genesys
        dt.Columns.Add("funCodigo", typeof(int));
        dt.Columns.Add("funQuemCad", typeof(int));
        dt.Columns.Add("funDtCad", typeof(DateTime));
        dt.Columns.Add("funQuemAtu", typeof(int));
        dt.Columns.Add("funDtAtu", typeof(DateTime));
        dt.Columns.Add("funVisto", typeof(bool));
        dt.Columns.Add("funGUID", typeof(string));
        dt.Columns.Add("funEMailPro", typeof(string));
        dt.Columns.Add("funCargo", typeof(int));
        dt.Columns.Add("funNome", typeof(string));
        dt.Columns.Add("funFuncao", typeof(int));
        dt.Columns.Add("funSexo", typeof(string));
        dt.Columns.Add("funRegistro", typeof(string));
        dt.Columns.Add("funCPF", typeof(string));
        dt.Columns.Add("funRG", typeof(string));
        dt.Columns.Add("funTipo", typeof(string));
        dt.Columns.Add("funObservacao", typeof(string));
        dt.Columns.Add("funEndereco", typeof(string));
        dt.Columns.Add("funBairro", typeof(string));
        dt.Columns.Add("funCidade", typeof(int));
        dt.Columns.Add("funCEP", typeof(string));
        dt.Columns.Add("funContato", typeof(string));
        dt.Columns.Add("funFax", typeof(string));
        dt.Columns.Add("funFone", typeof(string));
        dt.Columns.Add("funEMail", typeof(string));
        dt.Columns.Add("funPeriodo_Ini", typeof(DateTime));
        dt.Columns.Add("funPeriodo_Fim", typeof(DateTime));
        dt.Columns.Add("funCTPSNumero", typeof(string));
        dt.Columns.Add("funCTPSSerie", typeof(string));
        dt.Columns.Add("funPIS", typeof(string));
        dt.Columns.Add("funSalario", typeof(decimal));
        dt.Columns.Add("funCTPSDtEmissao", typeof(DateTime));
        dt.Columns.Add("funDtNasc", typeof(DateTime));
        dt.Columns.Add("funData", typeof(string));
        dt.Columns.Add("funLiberaAgenda", typeof(string));
        dt.Columns.Add("funPasta", typeof(string));
        dt.Columns.Add("funClass", typeof(string));
        return dt;
    }

#region Testes de Constantes e Propriedades Estáticas
    [Fact]
    public void Constants_ShouldHaveCorrectValues()
    {
        Assert.Equal("Funcionarios", DBFuncionarios.PTabelaNome);
        Assert.Equal(" Funcionarios.* ", DBFuncionarios.CamposSqlX);
        Assert.Equal("funCodigo", DBFuncionarios.CampoCodigo);
        Assert.Equal("funNome", DBFuncionarios.CampoNome);
        Assert.Equal("fun", DBFuncionarios.PTabelaPrefixo);
    }

#endregion
#region Testes de Construtores
    [Fact]
    public void Constructor_Default_ShouldInitializeCorrectly()
    {
        var instance = new DBFuncionarios();
        Assert.Equal(0, instance.ID);
        Assert.Equal("Funcionarios", instance.ITabelaName());
        Assert.Equal("fun", instance.Prefixo);
    }

    [Fact]
    public void Constructor_WithNullDataRow_ShouldNotThrow()
    {
        var instance = new DBFuncionarios((DataRow)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithNullSqlDataReader_ShouldNotThrow()
    {
        var instance = new DBFuncionarios((SqlDataReader)null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public void Constructor_WithValidDataRow_ShouldLoadData()
    {
        // Arrange
        var row = _testDataTable.NewRow();
        row["funCodigo"] = 123;
        _testDataTable.Rows.Add(row);
        // Act
        var instance = new DBFuncionarios(_testDataTable.Rows[0]);
        // Assert
        Assert.Equal(123, instance.ID);
    }

#endregion
#region Testes de Interfaces
    [Fact]
    public void ICadastros_Implementation_ShouldWork()
    {
        ICadastros cadastro = (ICadastros)_instance;
        Assert.Equal("Funcionarios", cadastro.ITabelaName());
        Assert.Equal("funCodigo", cadastro.ICampoCodigo());
        Assert.Equal("funNome", cadastro.ICampoNome());
        Assert.Equal("fun", cadastro.IPrefixo());
    }

#endregion
#region Testes de Métodos Assíncronos
    [Fact]
    public async Task CreateAsync_WithInvalidId_ShouldReturnEmptyInstance()
    {
        var instance = await DBFuncionarios.CreateAsync(0, null);
        Assert.Equal(0, instance.ID);
    }

    [Fact]
    public async Task ExisteAsync_WithNullConnection_ShouldReturnFalse()
    {
        var exists = await DBFuncionarios.ExisteAsync(1, null);
        Assert.False(exists);
    }

    [Fact]
    public async Task DeleteRecordAsync_WithInvalidId_ShouldReturnFalse()
    {
        var result = await DBFuncionarios.DeleteRecordAsync(1, 0, null);
        Assert.False(result);
    }

#endregion
#region Testes de Dispose
    [Fact]
    public void Dispose_ShouldNotThrow()
    {
        var instance = new DBFuncionarios();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

    [Fact]
    public void Dispose_MultipleCalls_ShouldBeIdempotent()
    {
        var instance = new DBFuncionarios();
        instance.Dispose();
        var exception = Record.Exception(() => instance.Dispose());
        Assert.Null(exception);
    }

#endregion
#region Testes de Propriedades Computadas
    [Fact]
    public void HasAuditor_ShouldReturnTrue()
    {
        Assert.True(_instance.HasAuditor());
    }

    [Fact]
    public void HasNameId_ShouldReturnTrue()
    {
        Assert.True(_instance.HasNameId());
    }

    [Fact]
    public void IIsStoredProcedureOrView_ShouldReturnFalse()
    {
        Assert.False(_instance.IIsStoredProcedureOrView());
    }

#endregion
    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void GUID_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FGUID = input;
        Assert.Equal(expected, _instance.FGUID);
    }

    [Fact]
    public void GUID_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 150 + 10);
        _instance.FGUID = longString;
        Assert.True(_instance.FGUID.Length <= 150);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void EMailPro_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FEMailPro = input;
        Assert.Equal(expected, _instance.FEMailPro);
    }

    [Fact]
    public void EMailPro_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 255 + 10);
        _instance.FEMailPro = longString;
        Assert.True(_instance.FEMailPro.Length <= 255);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cargo_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCargo = value;
        Assert.Equal(value, _instance.FCargo);
    }

    [Fact]
    public void Cargo_DefaultValue_ShouldBeZero()
    {
        var instance = new DBFuncionarios();
        Assert.Equal(0, instance.FCargo);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Nome_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FNome = input;
        Assert.Equal(expected, _instance.FNome);
    }

    [Fact]
    public void Nome_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 60 + 10);
        _instance.FNome = longString;
        Assert.True(_instance.FNome.Length <= 60);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Funcao_ShouldAcceptIntegerValues(int value)
    {
        _instance.FFuncao = value;
        Assert.Equal(value, _instance.FFuncao);
    }

    [Fact]
    public void Funcao_DefaultValue_ShouldBeZero()
    {
        var instance = new DBFuncionarios();
        Assert.Equal(0, instance.FFuncao);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Sexo_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FSexo = value;
        Assert.Equal(value, _instance.FSexo);
    }

    [Fact]
    public void Sexo_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBFuncionarios();
        Assert.False(instance.FSexo);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Registro_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FRegistro = input;
        Assert.Equal(expected, _instance.FRegistro);
    }

    [Fact]
    public void Registro_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 20 + 10);
        _instance.FRegistro = longString;
        Assert.True(_instance.FRegistro.Length <= 20);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void RG_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FRG = input;
        Assert.Equal(expected, _instance.FRG);
    }

    [Fact]
    public void RG_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 30 + 10);
        _instance.FRG = longString;
        Assert.True(_instance.FRG.Length <= 30);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Tipo_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FTipo = value;
        Assert.Equal(value, _instance.FTipo);
    }

    [Fact]
    public void Tipo_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBFuncionarios();
        Assert.False(instance.FTipo);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Observacao_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FObservacao = input;
        Assert.Equal(expected, _instance.FObservacao);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Endereco_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FEndereco = input;
        Assert.Equal(expected, _instance.FEndereco);
    }

    [Fact]
    public void Endereco_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 80 + 10);
        _instance.FEndereco = longString;
        Assert.True(_instance.FEndereco.Length <= 80);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Bairro_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FBairro = input;
        Assert.Equal(expected, _instance.FBairro);
    }

    [Fact]
    public void Bairro_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 50 + 10);
        _instance.FBairro = longString;
        Assert.True(_instance.FBairro.Length <= 50);
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(-1)]
    [InlineData(int.MaxValue)]
    [InlineData(int.MinValue)]
    public void Cidade_ShouldAcceptIntegerValues(int value)
    {
        _instance.FCidade = value;
        Assert.Equal(value, _instance.FCidade);
    }

    [Fact]
    public void Cidade_DefaultValue_ShouldBeZero()
    {
        var instance = new DBFuncionarios();
        Assert.Equal(0, instance.FCidade);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Contato_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FContato = input;
        Assert.Equal(expected, _instance.FContato);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Fax_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FFax = input;
        Assert.Equal(expected, _instance.FFax);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Fone_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FFone = input;
        Assert.Equal(expected, _instance.FFone);
    }

    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void Periodo_Ini_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FPeriodo_Ini = dateString;
        Assert.Equal(dateString, _instance.FPeriodo_Ini);
    }

    [Fact]
    public void Periodo_Ini_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBFuncionarios();
        Assert.Equal(string.Empty, instance.FPeriodo_Ini);
    }

    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void Periodo_Fim_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FPeriodo_Fim = dateString;
        Assert.Equal(dateString, _instance.FPeriodo_Fim);
    }

    [Fact]
    public void Periodo_Fim_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBFuncionarios();
        Assert.Equal(string.Empty, instance.FPeriodo_Fim);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void CTPSNumero_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FCTPSNumero = input;
        Assert.Equal(expected, _instance.FCTPSNumero);
    }

    [Fact]
    public void CTPSNumero_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 15 + 10);
        _instance.FCTPSNumero = longString;
        Assert.True(_instance.FCTPSNumero.Length <= 15);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void CTPSSerie_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FCTPSSerie = input;
        Assert.Equal(expected, _instance.FCTPSSerie);
    }

    [Fact]
    public void CTPSSerie_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 10 + 10);
        _instance.FCTPSSerie = longString;
        Assert.True(_instance.FCTPSSerie.Length <= 10);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void PIS_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FPIS = input;
        Assert.Equal(expected, _instance.FPIS);
    }

    [Fact]
    public void PIS_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 20 + 10);
        _instance.FPIS = longString;
        Assert.True(_instance.FPIS.Length <= 20);
    }

    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void CTPSDtEmissao_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FCTPSDtEmissao = dateString;
        Assert.Equal(dateString, _instance.FCTPSDtEmissao);
    }

    [Fact]
    public void CTPSDtEmissao_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBFuncionarios();
        Assert.Equal(string.Empty, instance.FCTPSDtEmissao);
    }

    [Theory]
    [InlineData("01/01/2000")]
    [InlineData("31/12/2023")]
    [InlineData("15/08/2024")]
    public void DtNasc_ShouldFormatDateCorrectly(string dateString)
    {
        _instance.FDtNasc = dateString;
        Assert.Equal(dateString, _instance.FDtNasc);
    }

    [Fact]
    public void DtNasc_EmptyDate_ShouldReturnEmptyString()
    {
        var instance = new DBFuncionarios();
        Assert.Equal(string.Empty, instance.FDtNasc);
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void LiberaAgenda_ShouldAcceptBooleanValues(bool value)
    {
        _instance.FLiberaAgenda = value;
        Assert.Equal(value, _instance.FLiberaAgenda);
    }

    [Fact]
    public void LiberaAgenda_DefaultValue_ShouldBeFalse()
    {
        var instance = new DBFuncionarios();
        Assert.False(instance.FLiberaAgenda);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData("  Teste  ", "Teste")]
    public void Pasta_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FPasta = input;
        Assert.Equal(expected, _instance.FPasta);
    }

    [Fact]
    public void Pasta_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 200 + 10);
        _instance.FPasta = longString;
        Assert.True(_instance.FPasta.Length <= 200);
    }

    [Theory]
    [InlineData("", "")]
    [InlineData(null, "")]
    [InlineData(" A", "A")]
    public void Class_ShouldTrimAndHandleNulls(string input, string expected)
    {
        _instance.FClass = input;
        Assert.Equal(expected, _instance.FClass);
    }

    [Fact]
    public void Class_ShouldRespectMaxLength()
    {
        var longString = new string ('A', 1 + 10);
        _instance.FClass = longString;
        Assert.True(_instance.FClass.Length <= 1);
    }

    public virtual void Dispose()
    {
        _instance?.Dispose();
    }
}