// 100% auto-generated by Source Genesys Core
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming
public partial class DBFuncionarios
{
    [XmlIgnore]
    private protected bool pFldFEMailPro, pFldFCargo, pFldFNome, pFldFFuncao, pFldFSexo, pFldFRegistro, pFldFCPF, pFldFRG, pFldFTipo, pFldFObservacao, pFldFEndereco, pFldFBairro, pFldFCidade, pFldFCEP, pFldFContato, pFldFFax, pFldFFone, pFldFEMail, pFldFPeriodo_Ini, pFldFPeriodo_Fim, pFldFCTPSNumero, pFldFCTPSSerie, pFldFPIS, pFldFSalario, pFldFCTPSDtEmissao, pFldFDtNasc, pFldFData, pFldFLiberaAgenda, pFldFPasta, pFldFClass, pFldFEtiqueta, pFldFAni, pFldFBold;
    [XmlIgnore]
    private protected int m_FCargo, m_FFuncao, m_FCidade;
    [XmlIgnore]
    private protected string? m_FEMailPro, m_FNome, m_FRegistro, m_FCPF, m_FRG, m_FObservacao, m_FEndereco, m_FBairro, m_FCEP, m_FContato, m_FFax, m_FFone, m_FEMail, m_FCTPSNumero, m_FCTPSSerie, m_FPIS, m_FPasta, m_FClass;
    [XmlIgnore]
    private protected DateTime? m_FPeriodo_Ini, m_FPeriodo_Fim, m_FCTPSDtEmissao, m_FDtNasc, m_FData;
    [XmlIgnore]
    private protected bool m_FSexo, m_FTipo, m_FLiberaAgenda, m_FEtiqueta, m_FAni, m_FBold;
    [XmlIgnore]
    private protected decimal m_FSalario;
    [StringLength(255, ErrorMessage = "A propriedade FEMailPro da tabela Funcionarios deve ter no máximo 255 caracteres.")]
    public string? FEMailPro
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEMailPro ?? string.Empty;
        set
        {
            pFldFEMailPro = pFldFEMailPro || !(m_FEMailPro ?? string.Empty).Equals(value);
            if (pFldFEMailPro)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FEMailPro = trimmed.Length > 255 ? trimmed.AsSpan(0, 255).ToString() : trimmed;
            }
        }
    }

    public int FCargo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCargo;
        set
        {
            pFldFCargo = pFldFCargo || value != m_FCargo;
            if (pFldFCargo)
                m_FCargo = value;
        }
    }

    [StringLength(60, ErrorMessage = "A propriedade FNome da tabela Funcionarios deve ter no máximo 60 caracteres.")]
    public string? FNome
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNome ?? string.Empty;
        set
        {
            pFldFNome = pFldFNome || !(m_FNome ?? string.Empty).Equals(value);
            if (pFldFNome)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FNome = trimmed.Length > 60 ? trimmed.AsSpan(0, 60).ToString() : trimmed;
            }
        }
    }

    public int FFuncao
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FFuncao;
        set
        {
            pFldFFuncao = pFldFFuncao || value != m_FFuncao;
            if (pFldFFuncao)
                m_FFuncao = value;
        }
    }

    public bool FSexo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FSexo;
        set
        {
            pFldFSexo = pFldFSexo || value != m_FSexo;
            if (pFldFSexo)
                m_FSexo = value;
        }
    }

    [StringLength(20, ErrorMessage = "A propriedade FRegistro da tabela Funcionarios deve ter no máximo 20 caracteres.")]
    public string? FRegistro
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FRegistro ?? string.Empty;
        set
        {
            pFldFRegistro = pFldFRegistro || !(m_FRegistro ?? string.Empty).Equals(value);
            if (pFldFRegistro)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FRegistro = trimmed.Length > 20 ? trimmed.AsSpan(0, 20).ToString() : trimmed;
            }
        }
    }

    [StringLength(11, ErrorMessage = "A propriedade FCPF da tabela Funcionarios deve ter no máximo 11 caracteres.")]
    public string? FCPF
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCPF ?? string.Empty;
        set
        {
            pFldFCPF = pFldFCPF || !(m_FCPF ?? string.Empty).Equals(value);
            if (pFldFCPF)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                var valueCpf = trimmed.Length > 11 ? trimmed.AsSpan(0, 11).ToString() : trimmed;
                if (valueCpf.IsValidCpf())
                    m_FCPF = valueCpf;
                else
                    throw new ArgumentException("CPF inválido ou não informado corretamente.", nameof(value));
            }
        }
    }

    [StringLength(30, ErrorMessage = "A propriedade FRG da tabela Funcionarios deve ter no máximo 30 caracteres.")]
    public string? FRG
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FRG ?? string.Empty;
        set
        {
            pFldFRG = pFldFRG || !(m_FRG ?? string.Empty).Equals(value);
            if (pFldFRG)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FRG = trimmed.Length > 30 ? trimmed.AsSpan(0, 30).ToString() : trimmed;
            }
        }
    }

    public bool FTipo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FTipo;
        set
        {
            pFldFTipo = pFldFTipo || value != m_FTipo;
            if (pFldFTipo)
                m_FTipo = value;
        }
    }

    public string? FObservacao
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FObservacao ?? string.Empty;
        set
        {
            pFldFObservacao = pFldFObservacao || !(m_FObservacao ?? string.Empty).Equals(value);
            if (pFldFObservacao)
                m_FObservacao = value.trim().FixAbc() ?? string.Empty;
        }
    }

    [StringLength(80, ErrorMessage = "A propriedade FEndereco da tabela Funcionarios deve ter no máximo 80 caracteres.")]
    public string? FEndereco
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEndereco ?? string.Empty;
        set
        {
            pFldFEndereco = pFldFEndereco || !(m_FEndereco ?? string.Empty).Equals(value);
            if (pFldFEndereco)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FEndereco = trimmed.Length > 80 ? trimmed.AsSpan(0, 80).ToString() : trimmed;
            }
        }
    }

    [StringLength(50, ErrorMessage = "A propriedade FBairro da tabela Funcionarios deve ter no máximo 50 caracteres.")]
    public string? FBairro
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FBairro ?? string.Empty;
        set
        {
            pFldFBairro = pFldFBairro || !(m_FBairro ?? string.Empty).Equals(value);
            if (pFldFBairro)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FBairro = trimmed.Length > 50 ? trimmed.AsSpan(0, 50).ToString() : trimmed;
            }
        }
    }

    public int FCidade
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCidade;
        set
        {
            pFldFCidade = pFldFCidade || value != m_FCidade;
            if (pFldFCidade)
                m_FCidade = value;
        }
    }

    [StringLength(10, ErrorMessage = "A propriedade FCEP da tabela Funcionarios deve ter no máximo 10 caracteres.")]
    public string? FCEP
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCEP ?? string.Empty;
        set
        {
            pFldFCEP = pFldFCEP || !(m_FCEP ?? string.Empty).Equals(value);
            if (pFldFCEP)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FCEP = trimmed.Length > 10 ? trimmed.AsSpan(0, 10).ToString() : trimmed;
            }
        }
    }

    public string? FContato
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FContato ?? string.Empty;
        set
        {
            pFldFContato = pFldFContato || !(m_FContato ?? string.Empty).Equals(value);
            if (pFldFContato)
                m_FContato = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public string? FFax
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FFax ?? string.Empty;
        set
        {
            pFldFFax = pFldFFax || !(m_FFax ?? string.Empty).Equals(value);
            if (pFldFFax)
                m_FFax = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public string? FFone
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FFone ?? string.Empty;
        set
        {
            pFldFFone = pFldFFone || !(m_FFone ?? string.Empty).Equals(value);
            if (pFldFFone)
                m_FFone = value.trim().FixAbc() ?? string.Empty;
        }
    }

    [StringLength(60, ErrorMessage = "A propriedade FEMail da tabela Funcionarios deve ter no máximo 60 caracteres.")]
    public string? FEMail
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEMail ?? string.Empty;
        set
        {
            pFldFEMail = pFldFEMail || !(m_FEMail ?? string.Empty).Equals(value);
            if (pFldFEMail)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FEMail = trimmed.Length > 60 ? trimmed.AsSpan(0, 60).ToString() : trimmed;
                if (m_FEMail.IsValidEmail())
                    return;
                throw new ArgumentException("E-mail inválido ou não informado corretamente.", nameof(value));
            }
        }
    }

    public string? FPeriodo_Ini
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPeriodo_Ini is null || m_FPeriodo_Ini == DevourerOne.DDataZerada ? string.Empty : m_FPeriodo_Ini.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFPeriodo_Ini, m_FPeriodo_Ini, value)is not (true, var changed, var data))
                return;
            (pFldFPeriodo_Ini, m_FPeriodo_Ini) = (changed, data);
        }
    }

    public string? FPeriodo_Fim
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPeriodo_Fim is null || m_FPeriodo_Fim == DevourerOne.DDataZerada ? string.Empty : m_FPeriodo_Fim.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFPeriodo_Fim, m_FPeriodo_Fim, value)is not (true, var changed, var data))
                return;
            (pFldFPeriodo_Fim, m_FPeriodo_Fim) = (changed, data);
        }
    }

    [StringLength(15, ErrorMessage = "A propriedade FCTPSNumero da tabela Funcionarios deve ter no máximo 15 caracteres.")]
    public string? FCTPSNumero
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCTPSNumero ?? string.Empty;
        set
        {
            pFldFCTPSNumero = pFldFCTPSNumero || !(m_FCTPSNumero ?? string.Empty).Equals(value);
            if (pFldFCTPSNumero)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FCTPSNumero = trimmed.Length > 15 ? trimmed.AsSpan(0, 15).ToString() : trimmed;
            }
        }
    }

    [StringLength(10, ErrorMessage = "A propriedade FCTPSSerie da tabela Funcionarios deve ter no máximo 10 caracteres.")]
    public string? FCTPSSerie
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCTPSSerie ?? string.Empty;
        set
        {
            pFldFCTPSSerie = pFldFCTPSSerie || !(m_FCTPSSerie ?? string.Empty).Equals(value);
            if (pFldFCTPSSerie)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FCTPSSerie = trimmed.Length > 10 ? trimmed.AsSpan(0, 10).ToString() : trimmed;
            }
        }
    }

    [StringLength(20, ErrorMessage = "A propriedade FPIS da tabela Funcionarios deve ter no máximo 20 caracteres.")]
    public string? FPIS
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPIS ?? string.Empty;
        set
        {
            pFldFPIS = pFldFPIS || !(m_FPIS ?? string.Empty).Equals(value);
            if (pFldFPIS)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FPIS = trimmed.Length > 20 ? trimmed.AsSpan(0, 20).ToString() : trimmed;
            }
        }
    }

    public decimal FSalario
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FSalario;
        set
        {
            if (value == m_FSalario)
                return;
            pFldFSalario = true;
            m_FSalario = value;
        }
    }

    public string? FCTPSDtEmissao
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCTPSDtEmissao is null || m_FCTPSDtEmissao == DevourerOne.DDataZerada ? string.Empty : m_FCTPSDtEmissao.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFCTPSDtEmissao, m_FCTPSDtEmissao, value)is not (true, var changed, var data))
                return;
            (pFldFCTPSDtEmissao, m_FCTPSDtEmissao) = (changed, data);
        }
    }

    public string? FDtNasc
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDtNasc is null || m_FDtNasc == DevourerOne.DDataZerada ? string.Empty : m_FDtNasc.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFDtNasc, m_FDtNasc, value)is not (true, var changed, var data))
                return;
            (pFldFDtNasc, m_FDtNasc) = (changed, data);
        }
    }

    public string? FData
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FData is null || m_FData == DevourerOne.DDataZerada ? string.Empty : m_FData.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFData, m_FData, value)is not (true, var changed, var data))
                return;
            (pFldFData, m_FData) = (changed, data);
        }
    }

    public bool FLiberaAgenda
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FLiberaAgenda;
        set
        {
            pFldFLiberaAgenda = pFldFLiberaAgenda || value != m_FLiberaAgenda;
            if (pFldFLiberaAgenda)
                m_FLiberaAgenda = value;
        }
    }

    [StringLength(200, ErrorMessage = "A propriedade FPasta da tabela Funcionarios deve ter no máximo 200 caracteres.")]
    public string? FPasta
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPasta ?? string.Empty;
        set
        {
            pFldFPasta = pFldFPasta || !(m_FPasta ?? string.Empty).Equals(value);
            if (pFldFPasta)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FPasta = trimmed.Length > 200 ? trimmed.AsSpan(0, 200).ToString() : trimmed;
            }
        }
    }

    [StringLength(1, ErrorMessage = "A propriedade FClass da tabela Funcionarios deve ter no máximo 1 caracteres.")]
    public string? FClass
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FClass ?? string.Empty;
        set
        {
            pFldFClass = pFldFClass || !(m_FClass ?? string.Empty).Equals(value);
            if (pFldFClass)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FClass = trimmed.Length > 1 ? trimmed.AsSpan(0, 1).ToString() : trimmed;
            }
        }
    }

    public bool FEtiqueta
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEtiqueta;
        set
        {
            pFldFEtiqueta = pFldFEtiqueta || value != m_FEtiqueta;
            if (pFldFEtiqueta)
                m_FEtiqueta = value;
        }
    }

    public bool FAni
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAni;
        set
        {
            pFldFAni = pFldFAni || value != m_FAni;
            if (pFldFAni)
                m_FAni = value;
        }
    }

    public bool FBold
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FBold;
        set
        {
            pFldFBold = pFldFBold || value != m_FBold;
            if (pFldFBold)
                m_FBold = value;
        }
    }

    public bool IVisto() => m_FVisto;
    public int IQuemCad() => m_FQuemCad;
    public int IQuemAtu() => m_FQuemAtu;
    public DateTime IDtCad() => MDtCad;
    public DateTime IDtAtu() => MDtAtu;
    public string IDtCadDataX_DataHora() => MDtCadDataX_DataHora;
    public string IDtAtuDataX_DataHora() => MDtAtuDataX_DataHora;
    public void SetAuditor(int usuarioId) => AuditorQuem = usuarioId;
    public string IMDtCadDataX_DataHora() => MDtAtuDataX_DataHora;
    public string ITabelaName() => PTabelaNome;
    public string ICampoCodigo() => CampoCodigo;
    public string ICampoNome() => CampoNome;
    public string IPrefixo() => PTabelaPrefixo;
    public ImmutableArray<DBInfoSystem> IFieldsRaw() => throw new NotImplementedException();
    public ImmutableArray<DBInfoSystem> IPkFields() => throw new NotImplementedException();
    public ImmutableArray<DBInfoSystem> IPkIndicesFields() => throw new NotImplementedException();
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetID() => ID;
}