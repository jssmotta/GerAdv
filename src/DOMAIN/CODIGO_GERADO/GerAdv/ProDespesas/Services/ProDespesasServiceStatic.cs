// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class ProDespesasService
{
    public (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterProDespesas? filtro)
    {
        if (filtro == null)
            return null;
        var parameters = new List<SqlParameter>();
        if (!string.IsNullOrWhiteSpace(filtro.GUID))
        {
            parameters.Add(new($"@{(DBProDespesasDicInfo.GUID)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.GUID)));
        }

        if (filtro.LigacaoID != int.MinValue)
        {
            parameters.Add(new($"@{(DBProDespesasDicInfo.LigacaoID)}", filtro.LigacaoID));
            if (filtro.LigacaoID_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBProDespesasDicInfo.LigacaoID)}_end", filtro.LigacaoID_end));
            }
        }

        if (filtro.Cliente != int.MinValue)
        {
            parameters.Add(new($"@{(DBProDespesasDicInfo.Cliente)}", filtro.Cliente));
            if (filtro.Cliente_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBProDespesasDicInfo.Cliente)}_end", filtro.Cliente_end));
            }
        }

        if (filtro.Corrigido != int.MinValue)
        {
            parameters.Add(new($"@{(DBProDespesasDicInfo.Corrigido)}", filtro.Corrigido));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Data))
        {
            parameters.Add(new($"@{(DBProDespesasDicInfo.Data)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Data)));
        }

        if (filtro.ValorOriginal != decimal.MinValue)
        {
            parameters.Add(new($"@{(DBProDespesasDicInfo.ValorOriginal)}", filtro.ValorOriginal));
            if (filtro.ValorOriginal_end != decimal.MinValue)
            {
                parameters.Add(new($"@{(DBProDespesasDicInfo.ValorOriginal)}_end", filtro.ValorOriginal_end));
            }
        }

        if (filtro.Processo != int.MinValue)
        {
            parameters.Add(new($"@{(DBProDespesasDicInfo.Processo)}", filtro.Processo));
            if (filtro.Processo_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBProDespesasDicInfo.Processo)}_end", filtro.Processo_end));
            }
        }

        if (filtro.Quitado != int.MinValue)
        {
            parameters.Add(new($"@{(DBProDespesasDicInfo.Quitado)}", filtro.Quitado));
            if (filtro.Quitado_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBProDespesasDicInfo.Quitado)}_end", filtro.Quitado_end));
            }
        }

        if (!filtro.DataCorrecao.IsEmptyDX())
        {
            if (DateTime.TryParse(filtro.DataCorrecao, out var dataParam1))
                parameters.Add(new($"@{(DBProDespesasDicInfo.DataCorrecao)}", dataParam1));
            if (!filtro.DataCorrecao_end.IsEmptyDX())
            {
                if (DateTime.TryParse(filtro.DataCorrecao_end, out var dataParam2))
                    parameters.Add(new($"@{(DBProDespesasDicInfo.DataCorrecao)}_end", dataParam2));
            }
        }

        if (filtro.Valor != decimal.MinValue)
        {
            parameters.Add(new($"@{(DBProDespesasDicInfo.Valor)}", filtro.Valor));
            if (filtro.Valor_end != decimal.MinValue)
            {
                parameters.Add(new($"@{(DBProDespesasDicInfo.Valor)}_end", filtro.Valor_end));
            }
        }

        if (filtro.Tipo != int.MinValue)
        {
            parameters.Add(new($"@{(DBProDespesasDicInfo.Tipo)}", filtro.Tipo));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Historico))
        {
            parameters.Add(new($"@{(DBProDespesasDicInfo.Historico)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Historico)));
        }

        if (filtro.LivroCaixa != int.MinValue)
        {
            parameters.Add(new($"@{(DBProDespesasDicInfo.LivroCaixa)}", filtro.LivroCaixa));
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{(DBProDespesasDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
            if (filtro.Codigo_filtro_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBProDespesasDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
            }
        }

        if (filtro.LogicalOperator.IsEmptyX() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        cWhere.Append(filtro.GUID.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.GUID}]  {DevourerConsts.MsiCollate} like @{(DBProDespesasDicInfo.GUID)}");
        if (!(filtro.LigacaoID.IsEmptyX()) && filtro.LigacaoID_end.IsEmptyX())
        {
            cWhere.Append(filtro.LigacaoID.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.LigacaoID}] = @{(DBProDespesasDicInfo.LigacaoID)}");
        }
        else if (!(filtro.LigacaoID.IsEmptyX()) && !(filtro.LigacaoID_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].{DBProDespesasDicInfo.LigacaoID} BETWEEN @{(DBProDespesasDicInfo.LigacaoID)} AND @{(DBProDespesasDicInfo.LigacaoID)}_end");
        }

        if (!(filtro.Cliente.IsEmptyX()) && filtro.Cliente_end.IsEmptyX())
        {
            cWhere.Append(filtro.Cliente.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.Cliente}] = @{(DBProDespesasDicInfo.Cliente)}");
        }
        else if (!(filtro.Cliente.IsEmptyX()) && !(filtro.Cliente_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].{DBProDespesasDicInfo.Cliente} BETWEEN @{(DBProDespesasDicInfo.Cliente)} AND @{(DBProDespesasDicInfo.Cliente)}_end");
        }

        cWhere.Append(filtro.Corrigido == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.Corrigido}] = @{(DBProDespesasDicInfo.Corrigido)}");
        cWhere.Append(filtro.Data.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.Data}]  {DevourerConsts.MsiCollate} like @{(DBProDespesasDicInfo.Data)}");
        if (!(filtro.ValorOriginal == decimal.MinValue) && filtro.ValorOriginal_end == decimal.MinValue)
        {
            cWhere.Append(filtro.ValorOriginal == decimal.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.ValorOriginal}] = @{(DBProDespesasDicInfo.ValorOriginal)}");
        }
        else if (!(filtro.ValorOriginal == decimal.MinValue) && !(filtro.ValorOriginal_end == decimal.MinValue))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].{DBProDespesasDicInfo.ValorOriginal} BETWEEN @{(DBProDespesasDicInfo.ValorOriginal)} AND @{(DBProDespesasDicInfo.ValorOriginal)}_end");
        }

        if (!(filtro.Processo.IsEmptyX()) && filtro.Processo_end.IsEmptyX())
        {
            cWhere.Append(filtro.Processo.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.Processo}] = @{(DBProDespesasDicInfo.Processo)}");
        }
        else if (!(filtro.Processo.IsEmptyX()) && !(filtro.Processo_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].{DBProDespesasDicInfo.Processo} BETWEEN @{(DBProDespesasDicInfo.Processo)} AND @{(DBProDespesasDicInfo.Processo)}_end");
        }

        if (!(filtro.Quitado.IsEmptyX()) && filtro.Quitado_end.IsEmptyX())
        {
            cWhere.Append(filtro.Quitado.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.Quitado}] = @{(DBProDespesasDicInfo.Quitado)}");
        }
        else if (!(filtro.Quitado.IsEmptyX()) && !(filtro.Quitado_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].{DBProDespesasDicInfo.Quitado} BETWEEN @{(DBProDespesasDicInfo.Quitado)} AND @{(DBProDespesasDicInfo.Quitado)}_end");
        }

        if (!(filtro.DataCorrecao.IsEmptyDX()) && filtro.DataCorrecao_end.IsEmptyDX())
        {
            cWhere.Append(filtro.DataCorrecao.IsEmptyDX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.DataCorrecao}], 103) = CONVERT(DATE, @{(DBProDespesasDicInfo.DataCorrecao)}, 103)");
        }
        else if (!(filtro.DataCorrecao.IsEmptyDX()) && !(filtro.DataCorrecao_end.IsEmptyDX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].{DBProDespesasDicInfo.DataCorrecao} BETWEEN @{(DBProDespesasDicInfo.DataCorrecao)} AND @{(DBProDespesasDicInfo.DataCorrecao)}_end");
        }

        if (!(filtro.Valor == decimal.MinValue) && filtro.Valor_end == decimal.MinValue)
        {
            cWhere.Append(filtro.Valor == decimal.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.Valor}] = @{(DBProDespesasDicInfo.Valor)}");
        }
        else if (!(filtro.Valor == decimal.MinValue) && !(filtro.Valor_end == decimal.MinValue))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].{DBProDespesasDicInfo.Valor} BETWEEN @{(DBProDespesasDicInfo.Valor)} AND @{(DBProDespesasDicInfo.Valor)}_end");
        }

        cWhere.Append(filtro.Tipo == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.Tipo}] = @{(DBProDespesasDicInfo.Tipo)}");
        cWhere.Append(filtro.Historico.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.Historico}]  {DevourerConsts.MsiCollate} like @{(DBProDespesasDicInfo.Historico)}");
        cWhere.Append(filtro.LivroCaixa == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.LivroCaixa}] = @{(DBProDespesasDicInfo.LivroCaixa)}");
        if (!(filtro.Codigo_filtro.IsEmptyX()) && filtro.Codigo_filtro_end.IsEmptyX())
        {
            cWhere.Append(filtro.Codigo_filtro.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].[{DBProDespesasDicInfo.CampoCodigo}] = @{(DBProDespesasDicInfo.CampoCodigo)}");
        }
        else if (!(filtro.Codigo_filtro.IsEmptyX()) && !(filtro.Codigo_filtro_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProDespesasDicInfo.PTabelaNome}].{DBProDespesasDicInfo.CampoCodigo} BETWEEN @{(DBProDespesasDicInfo.CampoCodigo)} AND @{(DBProDespesasDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private string GetFilterHash(Filters.FilterProDespesas? filtro)
    {
        if (filtro == null)
            return string.Empty;
        var json = JsonSerializer.Serialize(filtro);
        using var sha256 = SHA256.Create();
        var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(json));
        return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
    }

    public async Task<IEnumerable<NomeID>> GetListN([FromQuery] int max, [FromBody] Filters.FilterProDespesas? filtro, [FromRoute, Required] string uri, CancellationToken token)
    {
        // Tracking: 20250606-0
        ThrowIfDisposed();
        var filtroResult = filtro == null ? null : WFiltro(filtro!);
        string where = filtroResult?.where ?? string.Empty;
        List<SqlParameter> parameters = filtroResult?.parametros ?? [];
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new Exception($"Coneão nula.");
        }

        var keyCache = await reader.ReadStringAuditor(max, uri, "", [], oCnn);
        var cacheKey = $"{uri}-ProDespesas-{max}-{where.GetHashCode()}-GetListN-{keyCache}";
        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId)
        };
        return await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataListNAsync(max, uri, where, parameters, cancel), entryOptions, cancellationToken: token) ?? [];
    }

    private async Task<IEnumerable<NomeID>> GetDataListNAsync(int max, string uri, string where, List<SqlParameter> parameters, CancellationToken token)
    {
        var result = new List<NomeID>(max);
        var lista = await reader.ListarN(max, uri, where, parameters, DBProDespesasDicInfo.CampoNome);
        foreach (var item in lista)
        {
            if (token.IsCancellationRequested)
                break;
            if (item?.FNome != null)
            {
                result.Add(new NomeID { Nome = item.FNome, ID = item.ID });
            }
        }

        return result;
    }

    private async Task<IEnumerable<ProDespesasResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}