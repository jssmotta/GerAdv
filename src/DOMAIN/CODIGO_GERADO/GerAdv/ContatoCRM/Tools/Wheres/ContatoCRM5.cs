// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Wheres;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IContatoCRMWhere
{
    ContatoCRMResponse Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn);
}

public partial class ContatoCRMWhere(IFContatoCRMFactory contatocrmFactory) : IContatoCRMWhere
{
    private readonly IFContatoCRMFactory _contatocrmFactory = contatocrmFactory;
    public ContatoCRMResponse Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn)
    {
        using var dbRec = _contatocrmFactory.CreateFromParameters(parameters, oCnn, sqlWhere: where);
        var contatocrm = new ContatoCRMResponse
        {
            Id = dbRec.ID,
            AgeClienteAvisado = dbRec.FAgeClienteAvisado,
            DocsViaRecebimento = dbRec.FDocsViaRecebimento,
            NaoPublicavel = dbRec.FNaoPublicavel,
            Notificar = dbRec.FNotificar,
            Ocultar = dbRec.FOcultar,
            Assunto = dbRec.FAssunto ?? string.Empty,
            IsDocsRecebidos = dbRec.FIsDocsRecebidos,
            QuemNotificou = dbRec.FQuemNotificou,
            Operador = dbRec.FOperador,
            Cliente = dbRec.FCliente,
            ObjetoNotificou = dbRec.FObjetoNotificou,
            PessoaContato = dbRec.FPessoaContato ?? string.Empty,
            Data = dbRec.FData ?? string.Empty,
            Tempo = dbRec.FTempo,
            Processo = dbRec.FProcesso,
            Importante = dbRec.FImportante,
            Urgente = dbRec.FUrgente,
            GerarHoraTrabalhada = dbRec.FGerarHoraTrabalhada,
            ExibirNoTopo = dbRec.FExibirNoTopo,
            TipoContatoCRM = dbRec.FTipoContatoCRM,
            Contato = dbRec.FContato ?? string.Empty,
            Emocao = dbRec.FEmocao,
            Continuar = dbRec.FContinuar,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataNotificou, out DateTime XDataNotificou))
        {
            contatocrm.DataNotificou = dbRec.FDataNotificou;
            contatocrm.DataNotificou_date = XDataNotificou;
        }

        if (DateTime.TryParse(dbRec.FHoraNotificou, out DateTime XHoraNotificou))
        {
            contatocrm.HoraNotificou = dbRec.FHoraNotificou;
            contatocrm.HoraNotificou_date = XHoraNotificou;
        }

        if (DateTime.TryParse(dbRec.FHoraInicial, out DateTime XHoraInicial))
        {
            contatocrm.HoraInicial = dbRec.FHoraInicial;
            contatocrm.HoraInicial_date = XHoraInicial;
        }

        if (DateTime.TryParse(dbRec.FHoraFinal, out DateTime XHoraFinal))
        {
            contatocrm.HoraFinal = dbRec.FHoraFinal;
            contatocrm.HoraFinal_date = XHoraFinal;
        }

        return contatocrm;
    }
}