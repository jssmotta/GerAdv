// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class ProcessOutputEngineService
{
    public (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterProcessOutputEngine? filtro)
    {
        if (filtro == null)
            return null;
        var parameters = new List<SqlParameter>();
        if (!string.IsNullOrWhiteSpace(filtro.Nome))
        {
            parameters.Add(new($"@{(DBProcessOutputEngineDicInfo.Nome)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Nome)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Database))
        {
            parameters.Add(new($"@{(DBProcessOutputEngineDicInfo.Database)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Database)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Tabela))
        {
            parameters.Add(new($"@{(DBProcessOutputEngineDicInfo.Tabela)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Tabela)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Campo))
        {
            parameters.Add(new($"@{(DBProcessOutputEngineDicInfo.Campo)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Campo)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Valor))
        {
            parameters.Add(new($"@{(DBProcessOutputEngineDicInfo.Valor)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Valor)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Output))
        {
            parameters.Add(new($"@{(DBProcessOutputEngineDicInfo.Output)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Output)));
        }

        if (filtro.Administrador != int.MinValue)
        {
            parameters.Add(new($"@{(DBProcessOutputEngineDicInfo.Administrador)}", filtro.Administrador));
        }

        if (!string.IsNullOrWhiteSpace(filtro.GUID))
        {
            parameters.Add(new($"@{(DBProcessOutputEngineDicInfo.GUID)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.GUID)));
        }

        if (filtro.OutputSource != int.MinValue)
        {
            parameters.Add(new($"@{(DBProcessOutputEngineDicInfo.OutputSource)}", filtro.OutputSource));
            if (filtro.OutputSource_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBProcessOutputEngineDicInfo.OutputSource)}_end", filtro.OutputSource_end));
            }
        }

        if (filtro.DisabledItem != int.MinValue)
        {
            parameters.Add(new($"@{(DBProcessOutputEngineDicInfo.DisabledItem)}", filtro.DisabledItem));
        }

        if (filtro.IDModulo != int.MinValue)
        {
            parameters.Add(new($"@{(DBProcessOutputEngineDicInfo.IDModulo)}", filtro.IDModulo));
            if (filtro.IDModulo_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBProcessOutputEngineDicInfo.IDModulo)}_end", filtro.IDModulo_end));
            }
        }

        if (filtro.IsOnlyProcesso != int.MinValue)
        {
            parameters.Add(new($"@{(DBProcessOutputEngineDicInfo.IsOnlyProcesso)}", filtro.IsOnlyProcesso));
        }

        if (filtro.MyID != int.MinValue)
        {
            parameters.Add(new($"@{(DBProcessOutputEngineDicInfo.MyID)}", filtro.MyID));
            if (filtro.MyID_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBProcessOutputEngineDicInfo.MyID)}_end", filtro.MyID_end));
            }
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{(DBProcessOutputEngineDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
            if (filtro.Codigo_filtro_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBProcessOutputEngineDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
            }
        }

        if (filtro.LogicalOperator.IsEmptyX() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        cWhere.Append(filtro.Nome.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessOutputEngineDicInfo.PTabelaNome}].[{DBProcessOutputEngineDicInfo.Nome}]  {DevourerConsts.MsiCollate} like @{(DBProcessOutputEngineDicInfo.Nome)}");
        cWhere.Append(filtro.Database.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessOutputEngineDicInfo.PTabelaNome}].[{DBProcessOutputEngineDicInfo.Database}]  {DevourerConsts.MsiCollate} like @{(DBProcessOutputEngineDicInfo.Database)}");
        cWhere.Append(filtro.Tabela.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessOutputEngineDicInfo.PTabelaNome}].[{DBProcessOutputEngineDicInfo.Tabela}]  {DevourerConsts.MsiCollate} like @{(DBProcessOutputEngineDicInfo.Tabela)}");
        cWhere.Append(filtro.Campo.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessOutputEngineDicInfo.PTabelaNome}].[{DBProcessOutputEngineDicInfo.Campo}]  {DevourerConsts.MsiCollate} like @{(DBProcessOutputEngineDicInfo.Campo)}");
        cWhere.Append(filtro.Valor.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessOutputEngineDicInfo.PTabelaNome}].[{DBProcessOutputEngineDicInfo.Valor}]  {DevourerConsts.MsiCollate} like @{(DBProcessOutputEngineDicInfo.Valor)}");
        cWhere.Append(filtro.Output.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessOutputEngineDicInfo.PTabelaNome}].[{DBProcessOutputEngineDicInfo.Output}]  {DevourerConsts.MsiCollate} like @{(DBProcessOutputEngineDicInfo.Output)}");
        cWhere.Append(filtro.Administrador == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessOutputEngineDicInfo.PTabelaNome}].[{DBProcessOutputEngineDicInfo.Administrador}] = @{(DBProcessOutputEngineDicInfo.Administrador)}");
        cWhere.Append(filtro.GUID.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessOutputEngineDicInfo.PTabelaNome}].[{DBProcessOutputEngineDicInfo.GUID}]  {DevourerConsts.MsiCollate} like @{(DBProcessOutputEngineDicInfo.GUID)}");
        if (!(filtro.OutputSource.IsEmptyX()) && filtro.OutputSource_end.IsEmptyX())
        {
            cWhere.Append(filtro.OutputSource.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessOutputEngineDicInfo.PTabelaNome}].[{DBProcessOutputEngineDicInfo.OutputSource}] = @{(DBProcessOutputEngineDicInfo.OutputSource)}");
        }
        else if (!(filtro.OutputSource.IsEmptyX()) && !(filtro.OutputSource_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessOutputEngineDicInfo.PTabelaNome}].{DBProcessOutputEngineDicInfo.OutputSource} BETWEEN @{(DBProcessOutputEngineDicInfo.OutputSource)} AND @{(DBProcessOutputEngineDicInfo.OutputSource)}_end");
        }

        cWhere.Append(filtro.DisabledItem == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessOutputEngineDicInfo.PTabelaNome}].[{DBProcessOutputEngineDicInfo.DisabledItem}] = @{(DBProcessOutputEngineDicInfo.DisabledItem)}");
        if (!(filtro.IDModulo.IsEmptyX()) && filtro.IDModulo_end.IsEmptyX())
        {
            cWhere.Append(filtro.IDModulo.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessOutputEngineDicInfo.PTabelaNome}].[{DBProcessOutputEngineDicInfo.IDModulo}] = @{(DBProcessOutputEngineDicInfo.IDModulo)}");
        }
        else if (!(filtro.IDModulo.IsEmptyX()) && !(filtro.IDModulo_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessOutputEngineDicInfo.PTabelaNome}].{DBProcessOutputEngineDicInfo.IDModulo} BETWEEN @{(DBProcessOutputEngineDicInfo.IDModulo)} AND @{(DBProcessOutputEngineDicInfo.IDModulo)}_end");
        }

        cWhere.Append(filtro.IsOnlyProcesso == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessOutputEngineDicInfo.PTabelaNome}].[{DBProcessOutputEngineDicInfo.IsOnlyProcesso}] = @{(DBProcessOutputEngineDicInfo.IsOnlyProcesso)}");
        if (!(filtro.MyID.IsEmptyX()) && filtro.MyID_end.IsEmptyX())
        {
            cWhere.Append(filtro.MyID.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessOutputEngineDicInfo.PTabelaNome}].[{DBProcessOutputEngineDicInfo.MyID}] = @{(DBProcessOutputEngineDicInfo.MyID)}");
        }
        else if (!(filtro.MyID.IsEmptyX()) && !(filtro.MyID_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessOutputEngineDicInfo.PTabelaNome}].{DBProcessOutputEngineDicInfo.MyID} BETWEEN @{(DBProcessOutputEngineDicInfo.MyID)} AND @{(DBProcessOutputEngineDicInfo.MyID)}_end");
        }

        if (!(filtro.Codigo_filtro.IsEmptyX()) && filtro.Codigo_filtro_end.IsEmptyX())
        {
            cWhere.Append(filtro.Codigo_filtro.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessOutputEngineDicInfo.PTabelaNome}].[{DBProcessOutputEngineDicInfo.CampoCodigo}] = @{(DBProcessOutputEngineDicInfo.CampoCodigo)}");
        }
        else if (!(filtro.Codigo_filtro.IsEmptyX()) && !(filtro.Codigo_filtro_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBProcessOutputEngineDicInfo.PTabelaNome}].{DBProcessOutputEngineDicInfo.CampoCodigo} BETWEEN @{(DBProcessOutputEngineDicInfo.CampoCodigo)} AND @{(DBProcessOutputEngineDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private string GetFilterHash(Filters.FilterProcessOutputEngine? filtro)
    {
        if (filtro == null)
            return string.Empty;
        var json = JsonSerializer.Serialize(filtro);
        using var sha256 = SHA256.Create();
        var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(json));
        return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
    }

    public async Task<IEnumerable<NomeID>> GetListN([FromQuery] int max, [FromBody] Filters.FilterProcessOutputEngine? filtro, [FromRoute, Required] string uri, CancellationToken token)
    {
        // Tracking: 20250606-1
        ThrowIfDisposed();
        var filtroResult = filtro == null ? null : WFiltro(filtro!);
        string where = filtroResult?.where ?? string.Empty;
        List<SqlParameter> parameters = filtroResult?.parametros ?? [];
        var cacheKey = $"{uri}-ProcessOutputEngine-{max}-{where.GetHashCode()}-{parameters.GetHashCode()}GetListN";
        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxGetListSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxGetListSecondsCacheId)
        };
        return await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataListNAsync(max, uri, where, parameters, cancel), entryOptions, cancellationToken: token) ?? [];
    }

    private async Task<IEnumerable<NomeID>> GetDataListNAsync(int max, string uri, string where, List<SqlParameter> parameters, CancellationToken token)
    {
        var result = new List<NomeID>(max);
        var lista = await reader.ListarN(max, uri, where, parameters, DBProcessOutputEngineDicInfo.CampoNome);
        foreach (var item in lista)
        {
            if (token.IsCancellationRequested)
                break;
            if (item?.FNome != null)
            {
                result.Add(new NomeID { Nome = item.FNome, ID = item.ID });
            }
        }

        return result;
    }

    private async Task<IEnumerable<ProcessOutputEngineResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}