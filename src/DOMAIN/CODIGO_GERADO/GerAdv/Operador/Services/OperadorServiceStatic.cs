// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Services;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class OperadorService
{
    public (string where, List<SqlParameter> parametros)? WFiltro(Filters.FilterOperador? filtro)
    {
        if (filtro == null)
            return null;
        var parameters = new List<SqlParameter>();
        if (!string.IsNullOrWhiteSpace(filtro.EMail))
        {
            parameters.Add(new($"@{(DBOperadorDicInfo.EMail)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.EMail)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Pasta))
        {
            parameters.Add(new($"@{(DBOperadorDicInfo.Pasta)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Pasta)));
        }

        if (filtro.Telefonista != int.MinValue)
        {
            parameters.Add(new($"@{(DBOperadorDicInfo.Telefonista)}", filtro.Telefonista));
        }

        if (filtro.Master != int.MinValue)
        {
            parameters.Add(new($"@{(DBOperadorDicInfo.Master)}", filtro.Master));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Nome))
        {
            parameters.Add(new($"@{(DBOperadorDicInfo.Nome)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Nome)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.Nick))
        {
            parameters.Add(new($"@{(DBOperadorDicInfo.Nick)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.Nick)));
        }

        if (filtro.Excluido != int.MinValue)
        {
            parameters.Add(new($"@{(DBOperadorDicInfo.Excluido)}", filtro.Excluido));
        }

        if (filtro.Situacao != int.MinValue)
        {
            parameters.Add(new($"@{(DBOperadorDicInfo.Situacao)}", filtro.Situacao));
        }

        if (!string.IsNullOrWhiteSpace(filtro.MinhaDescricao))
        {
            parameters.Add(new($"@{(DBOperadorDicInfo.MinhaDescricao)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.MinhaDescricao)));
        }

        if (!string.IsNullOrWhiteSpace(filtro.EMailNet))
        {
            parameters.Add(new($"@{(DBOperadorDicInfo.EMailNet)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.EMailNet)));
        }

        if (filtro.OnLine != int.MinValue)
        {
            parameters.Add(new($"@{(DBOperadorDicInfo.OnLine)}", filtro.OnLine));
        }

        if (filtro.SysOp != int.MinValue)
        {
            parameters.Add(new($"@{(DBOperadorDicInfo.SysOp)}", filtro.SysOp));
        }

        if (filtro.IsFinanceiro != int.MinValue)
        {
            parameters.Add(new($"@{(DBOperadorDicInfo.IsFinanceiro)}", filtro.IsFinanceiro));
        }

        if (!string.IsNullOrWhiteSpace(filtro.GUID))
        {
            parameters.Add(new($"@{(DBOperadorDicInfo.GUID)}", DevourerOne.ApplyWildCard(filtro.WildcardChar, filtro.GUID)));
        }

        if (filtro.Top != int.MinValue)
        {
            parameters.Add(new($"@{(DBOperadorDicInfo.Top)}", filtro.Top));
        }

        if (filtro.Sexo != int.MinValue)
        {
            parameters.Add(new($"@{(DBOperadorDicInfo.Sexo)}", filtro.Sexo));
        }

        if (filtro.Basico != int.MinValue)
        {
            parameters.Add(new($"@{(DBOperadorDicInfo.Basico)}", filtro.Basico));
        }

        if (filtro.Externo != int.MinValue)
        {
            parameters.Add(new($"@{(DBOperadorDicInfo.Externo)}", filtro.Externo));
        }

        if (filtro.EMailConfirmado != int.MinValue)
        {
            parameters.Add(new($"@{(DBOperadorDicInfo.EMailConfirmado)}", filtro.EMailConfirmado));
        }

        if (!filtro.DataLimiteReset.IsEmptyDX())
        {
            if (DateTime.TryParse(filtro.DataLimiteReset, out var dataParam1))
                parameters.Add(new($"@{(DBOperadorDicInfo.DataLimiteReset)}", dataParam1));
            if (!filtro.DataLimiteReset_end.IsEmptyDX())
            {
                if (DateTime.TryParse(filtro.DataLimiteReset_end, out var dataParam2))
                    parameters.Add(new($"@{(DBOperadorDicInfo.DataLimiteReset)}_end", dataParam2));
            }
        }

        if (filtro.Codigo_filtro != int.MinValue)
        {
            parameters.Add(new($"@{(DBOperadorDicInfo.CampoCodigo)}", filtro.Codigo_filtro));
            if (filtro.Codigo_filtro_end != int.MinValue)
            {
                parameters.Add(new($"@{(DBOperadorDicInfo.CampoCodigo)}_end", filtro.Codigo_filtro_end));
            }
        }

        if (filtro.LogicalOperator.IsEmptyX() || (filtro.LogicalOperator.NotEquals(TSql.And) && filtro.LogicalOperator.NotEquals(TSql.OR)))
        {
            filtro.LogicalOperator = TSql.And;
        }

        var cWhere = new StringBuilder();
        cWhere.Append(filtro.EMail.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadorDicInfo.PTabelaNome}].[{DBOperadorDicInfo.EMail}]  {DevourerConsts.MsiCollate} like @{(DBOperadorDicInfo.EMail)}");
        cWhere.Append(filtro.Pasta.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadorDicInfo.PTabelaNome}].[{DBOperadorDicInfo.Pasta}]  {DevourerConsts.MsiCollate} like @{(DBOperadorDicInfo.Pasta)}");
        cWhere.Append(filtro.Telefonista == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadorDicInfo.PTabelaNome}].[{DBOperadorDicInfo.Telefonista}] = @{(DBOperadorDicInfo.Telefonista)}");
        cWhere.Append(filtro.Master == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadorDicInfo.PTabelaNome}].[{DBOperadorDicInfo.Master}] = @{(DBOperadorDicInfo.Master)}");
        cWhere.Append(filtro.Nome.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadorDicInfo.PTabelaNome}].[{DBOperadorDicInfo.Nome}]  {DevourerConsts.MsiCollate} like @{(DBOperadorDicInfo.Nome)}");
        cWhere.Append(filtro.Nick.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadorDicInfo.PTabelaNome}].[{DBOperadorDicInfo.Nick}]  {DevourerConsts.MsiCollate} like @{(DBOperadorDicInfo.Nick)}");
        cWhere.Append(filtro.Excluido == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadorDicInfo.PTabelaNome}].[{DBOperadorDicInfo.Excluido}] = @{(DBOperadorDicInfo.Excluido)}");
        cWhere.Append(filtro.Situacao == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadorDicInfo.PTabelaNome}].[{DBOperadorDicInfo.Situacao}] = @{(DBOperadorDicInfo.Situacao)}");
        cWhere.Append(filtro.MinhaDescricao.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadorDicInfo.PTabelaNome}].[{DBOperadorDicInfo.MinhaDescricao}]  {DevourerConsts.MsiCollate} like @{(DBOperadorDicInfo.MinhaDescricao)}");
        cWhere.Append(filtro.EMailNet.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadorDicInfo.PTabelaNome}].[{DBOperadorDicInfo.EMailNet}]  {DevourerConsts.MsiCollate} like @{(DBOperadorDicInfo.EMailNet)}");
        cWhere.Append(filtro.OnLine == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadorDicInfo.PTabelaNome}].[{DBOperadorDicInfo.OnLine}] = @{(DBOperadorDicInfo.OnLine)}");
        cWhere.Append(filtro.SysOp == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadorDicInfo.PTabelaNome}].[{DBOperadorDicInfo.SysOp}] = @{(DBOperadorDicInfo.SysOp)}");
        cWhere.Append(filtro.IsFinanceiro == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadorDicInfo.PTabelaNome}].[{DBOperadorDicInfo.IsFinanceiro}] = @{(DBOperadorDicInfo.IsFinanceiro)}");
        cWhere.Append(filtro.GUID.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadorDicInfo.PTabelaNome}].[{DBOperadorDicInfo.GUID}]  {DevourerConsts.MsiCollate} like @{(DBOperadorDicInfo.GUID)}");
        cWhere.Append(filtro.Top == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadorDicInfo.PTabelaNome}].[{DBOperadorDicInfo.Top}] = @{(DBOperadorDicInfo.Top)}");
        cWhere.Append(filtro.Sexo == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadorDicInfo.PTabelaNome}].[{DBOperadorDicInfo.Sexo}] = @{(DBOperadorDicInfo.Sexo)}");
        cWhere.Append(filtro.Basico == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadorDicInfo.PTabelaNome}].[{DBOperadorDicInfo.Basico}] = @{(DBOperadorDicInfo.Basico)}");
        cWhere.Append(filtro.Externo == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadorDicInfo.PTabelaNome}].[{DBOperadorDicInfo.Externo}] = @{(DBOperadorDicInfo.Externo)}");
        cWhere.Append(filtro.EMailConfirmado == int.MinValue ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadorDicInfo.PTabelaNome}].[{DBOperadorDicInfo.EMailConfirmado}] = @{(DBOperadorDicInfo.EMailConfirmado)}");
        if (!(filtro.DataLimiteReset.IsEmptyDX()) && filtro.DataLimiteReset_end.IsEmptyDX())
        {
            cWhere.Append(filtro.DataLimiteReset.IsEmptyDX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"CONVERT(DATE,[{DBOperadorDicInfo.PTabelaNome}].[{DBOperadorDicInfo.DataLimiteReset}], 103) = CONVERT(DATE, @{(DBOperadorDicInfo.DataLimiteReset)}, 103)");
        }
        else if (!(filtro.DataLimiteReset.IsEmptyDX()) && !(filtro.DataLimiteReset_end.IsEmptyDX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadorDicInfo.PTabelaNome}].{DBOperadorDicInfo.DataLimiteReset} BETWEEN @{(DBOperadorDicInfo.DataLimiteReset)} AND @{(DBOperadorDicInfo.DataLimiteReset)}_end");
        }

        if (!(filtro.Codigo_filtro.IsEmptyX()) && filtro.Codigo_filtro_end.IsEmptyX())
        {
            cWhere.Append(filtro.Codigo_filtro.IsEmptyX() ? string.Empty : (cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadorDicInfo.PTabelaNome}].[{DBOperadorDicInfo.CampoCodigo}] = @{(DBOperadorDicInfo.CampoCodigo)}");
        }
        else if (!(filtro.Codigo_filtro.IsEmptyX()) && !(filtro.Codigo_filtro_end.IsEmptyX()))
        {
            cWhere.Append((cWhere.Length == 0 ? string.Empty : filtro.LogicalOperator) + $"[{DBOperadorDicInfo.PTabelaNome}].{DBOperadorDicInfo.CampoCodigo} BETWEEN @{(DBOperadorDicInfo.CampoCodigo)} AND @{(DBOperadorDicInfo.CampoCodigo)}_end");
        }

        return (cWhere.ToString().Trim(), parameters);
    }

    private string GetFilterHash(Filters.FilterOperador? filtro)
    {
        if (filtro == null)
            return string.Empty;
        var json = JsonSerializer.Serialize(filtro);
        using var sha256 = SHA256.Create();
        var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(json));
        return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
    }

    public async Task<IEnumerable<NomeID>> GetListN([FromQuery] int max, [FromBody] Filters.FilterOperador? filtro, [FromRoute, Required] string uri, CancellationToken token)
    {
        // Tracking: 20250606-0
        ThrowIfDisposed();
        var filtroResult = filtro == null ? null : WFiltro(filtro!);
        string where = filtroResult?.where ?? string.Empty;
        List<SqlParameter> parameters = filtroResult?.parametros ?? [];
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new Exception($"Coneão nula.");
        }

        var keyCache = await reader.ReadStringAuditor(max, uri, "", [], oCnn);
        var cacheKey = $"{uri}-Operador-{max}-{where.GetHashCode()}-GetListN-{keyCache}";
        var entryOptions = new HybridCacheEntryOptions
        {
            Expiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId),
            LocalCacheExpiration = TimeSpan.FromSeconds(BaseConsts.PMaxSecondsCacheId)
        };
        return await _cache.GetOrCreateAsync(cacheKey, async cancel => await GetDataListNAsync(max, uri, where, parameters, cancel), entryOptions, cancellationToken: token) ?? [];
    }

    private async Task<IEnumerable<NomeID>> GetDataListNAsync(int max, string uri, string where, List<SqlParameter> parameters, CancellationToken token)
    {
        var result = new List<NomeID>(max);
        var lista = await reader.ListarN(max, uri, where, parameters, DBOperadorDicInfo.CampoNome);
        foreach (var item in lista)
        {
            if (token.IsCancellationRequested)
                break;
            if (item?.FNome != null)
            {
                result.Add(new NomeID { Nome = item.FNome, ID = item.ID });
            }
        }

        return result;
    }

    private async Task<IEnumerable<OperadorResponseAll>> GetDataAllAsync(int max, string where, List<SqlParameter> parameters, string uri, CancellationToken token)
    {
        using var oCnn = Configuracoes.GetConnectionByUri(uri);
        if (oCnn == null)
        {
            throw new DatabaseConnectionException();
        }

        var result = await reader.Listar(max, uri, where, parameters, string.Empty, token);
        return result;
    }
}