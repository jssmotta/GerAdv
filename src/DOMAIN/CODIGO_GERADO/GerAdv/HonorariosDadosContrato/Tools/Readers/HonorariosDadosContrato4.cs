// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Readers;
public partial class HonorariosDadosContratoReader(IFHonorariosDadosContratoFactory honorariosdadoscontratoFactory) : IHonorariosDadosContratoReader
{
    private readonly IFHonorariosDadosContratoFactory _honorariosdadoscontratoFactory = honorariosdadoscontratoFactory;
    public async Task<IEnumerable<DBNomeID>> ListarN(int max, string uri, string cWhere, List<SqlParameter> parameters, string order) => await DevourerSqlData.ListarNomeID(BuildSqlQuery("hdcCodigo, hdcGUID", cWhere, order, max), parameters, uri, caching: DevourerOne.PCachingDefault, max: max);
    public async Task<IEnumerable<HonorariosDadosContratoResponseAll>> Listar(int max, string uri, string cWhere, List<SqlParameter> parameters, string order, CancellationToken cancellationToken) => await ListarTabela(BuildSqlQuery(DBHonorariosDadosContrato.CamposSqlX, cWhere, order, max), parameters, uri, caching: DevourerOne.PCachingDefault, max: max, cancellationToken: cancellationToken);
    private async Task<IEnumerable<HonorariosDadosContratoResponseAll>> ListarTabela(string sql, List<SqlParameter> parameters, string uri, bool caching = DevourerOne.PCachingDefault, int max = 200, CancellationToken cancellationToken = default)
    {
        var result = new List<HonorariosDadosContratoResponseAll>(max);
        await using var connection = Configuracoes.GetConnectionByUri(uri);
        await using var cmd = new SqlCommand(cmdText: ConfiguracoesDBT.CmdSql(sql), connection: connection?.InnerConnection)
        {
            CommandTimeout = 30
        };
        foreach (var param in parameters)
        {
            if (!cmd.Parameters.Contains(param.ParameterName))
            {
                var newParam = new SqlParameter(param.ParameterName, param.Value)
                {
                    SqlDbType = param.SqlDbType,
                    Direction = param.Direction,
                    Size = param.Size,
                    Precision = param.Precision,
                    Scale = param.Scale
                };
                cmd.Parameters.Add(newParam);
            }
        }

        await using var reader = await cmd.ExecuteReaderAsync(CommandBehavior.SingleResult);
        while (await reader.ReadAsync())
        {
            if (cancellationToken.IsCancellationRequested)
                return result;
            result.Add(ReadAll(_honorariosdadoscontratoFactory.CreateFromReader(reader), reader)!);
        }

        return result;
    }

    public async Task<HonorariosDadosContratoResponse?> Read(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _honorariosdadoscontratoFactory.CreateFromIdAsync(id, oCnn);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public async Task<Models.HonorariosDadosContrato?> ReadM(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _honorariosdadoscontratoFactory.CreateFromIdAsync(id, oCnn);
        var honorariosdadoscontrato = new Models.HonorariosDadosContrato
        {
            Id = dbRec.ID,
            Cliente = dbRec.FCliente,
            Fixo = dbRec.FFixo,
            Variavel = dbRec.FVariavel,
            PercSucesso = dbRec.FPercSucesso,
            Processo = dbRec.FProcesso,
            ArquivoContrato = dbRec.FArquivoContrato ?? string.Empty,
            TextoContrato = dbRec.FTextoContrato ?? string.Empty,
            ValorFixo = dbRec.FValorFixo,
            Observacao = dbRec.FObservacao ?? string.Empty,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataContrato, out DateTime XDataContrato))
        {
            honorariosdadoscontrato.DataContrato = dbRec.FDataContrato;
            honorariosdadoscontrato.DataContrato_date = XDataContrato;
        }

        return honorariosdadoscontrato;
    }

    public HonorariosDadosContratoResponse? Read(FHonorariosDadosContrato dbRec, MsiSqlConnection oCnn)
    {
        return Read(dbRec);
    }

    public HonorariosDadosContratoResponse? Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn)
    {
        using var dbRec = _honorariosdadoscontratoFactory.CreateFromParameters(parameters, oCnn, sqlWhere: where);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public HonorariosDadosContratoResponse? Read(FHonorariosDadosContrato dbRec) // Track 001.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var honorariosdadoscontrato = new HonorariosDadosContratoResponse
        {
            Id = dbRec.ID,
            Cliente = dbRec.FCliente,
            Fixo = dbRec.FFixo,
            Variavel = dbRec.FVariavel,
            PercSucesso = dbRec.FPercSucesso,
            Processo = dbRec.FProcesso,
            ArquivoContrato = dbRec.FArquivoContrato ?? string.Empty,
            TextoContrato = dbRec.FTextoContrato ?? string.Empty,
            ValorFixo = dbRec.FValorFixo,
            Observacao = dbRec.FObservacao ?? string.Empty,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataContrato, out DateTime XDataContrato))
        {
            honorariosdadoscontrato.DataContrato = dbRec.FDataContrato;
            honorariosdadoscontrato.DataContrato_date = XDataContrato;
        }

        return honorariosdadoscontrato;
    }

    public HonorariosDadosContratoResponse? Read(SG.GerAdv.DBHonorariosDadosContrato dbRec) // Track 002.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var honorariosdadoscontrato = new HonorariosDadosContratoResponse
        {
            Id = dbRec.ID,
            Cliente = dbRec.FCliente,
            Fixo = dbRec.FFixo,
            Variavel = dbRec.FVariavel,
            PercSucesso = dbRec.FPercSucesso,
            Processo = dbRec.FProcesso,
            ArquivoContrato = dbRec.FArquivoContrato ?? string.Empty,
            TextoContrato = dbRec.FTextoContrato ?? string.Empty,
            ValorFixo = dbRec.FValorFixo,
            Observacao = dbRec.FObservacao ?? string.Empty,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataContrato, out DateTime XDataContrato))
        {
            honorariosdadoscontrato.DataContrato = dbRec.FDataContrato;
            honorariosdadoscontrato.DataContrato_date = XDataContrato;
        }

        return honorariosdadoscontrato;
    }

    public HonorariosDadosContratoResponseAll? ReadAll(FHonorariosDadosContrato dbRec, IDataRecord dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var honorariosdadoscontrato = new HonorariosDadosContratoResponseAll
        {
            Id = dbRec.ID,
            Cliente = dbRec.FCliente,
            Fixo = dbRec.FFixo,
            Variavel = dbRec.FVariavel,
            PercSucesso = dbRec.FPercSucesso,
            Processo = dbRec.FProcesso,
            ArquivoContrato = dbRec.FArquivoContrato ?? string.Empty,
            TextoContrato = dbRec.FTextoContrato ?? string.Empty,
            ValorFixo = dbRec.FValorFixo,
            Observacao = dbRec.FObservacao ?? string.Empty,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataContrato, out DateTime XDataContrato))
        {
            honorariosdadoscontrato.DataContrato = dbRec.FDataContrato;
            honorariosdadoscontrato.DataContrato_date = XDataContrato;
        }

        try
        {
            honorariosdadoscontrato.NomeClientes = dr[DBClientesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return honorariosdadoscontrato;
    }

    public HonorariosDadosContratoResponseAll? ReadAll(SG.GerAdv.DBHonorariosDadosContrato dbRec, DataRow dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var honorariosdadoscontrato = new HonorariosDadosContratoResponseAll
        {
            Id = dbRec.ID,
            Cliente = dbRec.FCliente,
            Fixo = dbRec.FFixo,
            Variavel = dbRec.FVariavel,
            PercSucesso = dbRec.FPercSucesso,
            Processo = dbRec.FProcesso,
            ArquivoContrato = dbRec.FArquivoContrato ?? string.Empty,
            TextoContrato = dbRec.FTextoContrato ?? string.Empty,
            ValorFixo = dbRec.FValorFixo,
            Observacao = dbRec.FObservacao ?? string.Empty,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        if (DateTime.TryParse(dbRec.FDataContrato, out DateTime XDataContrato))
        {
            honorariosdadoscontrato.DataContrato = dbRec.FDataContrato;
            honorariosdadoscontrato.DataContrato_date = XDataContrato;
        }

        try
        {
            honorariosdadoscontrato.NomeClientes = dr[DBClientesDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return honorariosdadoscontrato;
    }
}