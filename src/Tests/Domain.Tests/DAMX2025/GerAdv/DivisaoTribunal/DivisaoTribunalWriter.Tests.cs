// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class DivisaoTribunalWriterTests
{
    private readonly Mock<IFDivisaoTribunalFactory> _mockDivisaoTribunalFactory;
    private readonly Mock<FDivisaoTribunal> _mockFDivisaoTribunal;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly DivisaoTribunalWriter _divisaotribunalWriter;
    public DivisaoTribunalWriterTests()
    {
        _mockDivisaoTribunalFactory = new Mock<IFDivisaoTribunalFactory>();
        _mockFDivisaoTribunal = new Mock<FDivisaoTribunal>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _divisaotribunalWriter = new DivisaoTribunalWriter(_mockDivisaoTribunalFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var divisaotribunal = CreateValidDivisaoTribunalModel();
        divisaotribunal.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockDivisaoTribunalFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFDivisaoTribunal.Object);
        _mockFDivisaoTribunal.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _divisaotribunalWriter.WriteAsync(divisaotribunal, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFDivisaoTribunal.Object);
        _mockDivisaoTribunalFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockDivisaoTribunalFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFDivisaoTribunal.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var divisaotribunal = CreateValidDivisaoTribunalModel();
        divisaotribunal.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockDivisaoTribunalFactory.Setup(x => x.CreateFromIdAsync(divisaotribunal.Id, _mockConnection.Object)).ReturnsAsync(_mockFDivisaoTribunal.Object);
        _mockFDivisaoTribunal.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _divisaotribunalWriter.WriteAsync(divisaotribunal, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFDivisaoTribunal.Object);
        _mockDivisaoTribunalFactory.Verify(x => x.CreateFromIdAsync(divisaotribunal.Id, _mockConnection.Object), Times.Once);
        _mockDivisaoTribunalFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFDivisaoTribunal.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var divisaotribunal = CreateValidDivisaoTribunalModel();
        var auditorQuem = 99;
        _mockDivisaoTribunalFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFDivisaoTribunal.Object);
        _mockFDivisaoTribunal.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _divisaotribunalWriter.WriteAsync(divisaotribunal, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFDivisaoTribunal.Object);
        _mockFDivisaoTribunal.VerifySet(x => x.FNumCodigo = divisaotribunal.NumCodigo, Times.Once);
        _mockFDivisaoTribunal.VerifySet(x => x.FJustica = divisaotribunal.Justica, Times.Once);
        _mockFDivisaoTribunal.VerifySet(x => x.FNomeEspecial = divisaotribunal.NomeEspecial, Times.Once);
        _mockFDivisaoTribunal.VerifySet(x => x.FArea = divisaotribunal.Area, Times.Once);
        _mockFDivisaoTribunal.VerifySet(x => x.FCidade = divisaotribunal.Cidade, Times.Once);
        _mockFDivisaoTribunal.VerifySet(x => x.FForo = divisaotribunal.Foro, Times.Once);
        _mockFDivisaoTribunal.VerifySet(x => x.FTribunal = divisaotribunal.Tribunal, Times.Once);
        _mockFDivisaoTribunal.VerifySet(x => x.FCodigoDiv = divisaotribunal.CodigoDiv, Times.Once);
        _mockFDivisaoTribunal.VerifySet(x => x.FEndereco = divisaotribunal.Endereco, Times.Once);
        _mockFDivisaoTribunal.VerifySet(x => x.FFone = divisaotribunal.Fone, Times.Once);
        _mockFDivisaoTribunal.VerifySet(x => x.FFax = divisaotribunal.Fax, Times.Once);
        _mockFDivisaoTribunal.VerifySet(x => x.FCEP = It.IsAny<string>(), Times.Once); // CEP é limpo pelo ClearInputCep()
        _mockFDivisaoTribunal.VerifySet(x => x.FObs = divisaotribunal.Obs, Times.Once);
        _mockFDivisaoTribunal.VerifySet(x => x.FEMail = divisaotribunal.EMail, Times.Once);
        _mockFDivisaoTribunal.VerifySet(x => x.FAndar = divisaotribunal.Andar, Times.Once);
        _mockFDivisaoTribunal.VerifySet(x => x.FGUID = divisaotribunal.GUID, Times.Once);
        _mockFDivisaoTribunal.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var divisaotribunal = CreateValidDivisaoTribunalModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockDivisaoTribunalFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _divisaotribunalWriter.WriteAsync(divisaotribunal, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var divisaotribunal = CreateValidDivisaoTribunalModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockDivisaoTribunalFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFDivisaoTribunal.Object);
        _mockFDivisaoTribunal.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _divisaotribunalWriter.WriteAsync(divisaotribunal, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var divisaotribunalResponse = new DivisaoTribunalResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockDivisaoTribunalFactory.Setup(x => x.DeleteAsync(operadorId, divisaotribunalResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _divisaotribunalWriter.Delete(divisaotribunalResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockDivisaoTribunalFactory.Verify(x => x.DeleteAsync(operadorId, divisaotribunalResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var divisaotribunalResponse = new DivisaoTribunalResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockDivisaoTribunalFactory.Setup(x => x.DeleteAsync(operadorId, divisaotribunalResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _divisaotribunalWriter.Delete(divisaotribunalResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var divisaotribunalResponse = new DivisaoTribunalResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockDivisaoTribunalFactory.Setup(x => x.DeleteAsync(operadorId, divisaotribunalResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _divisaotribunalWriter.Delete(divisaotribunalResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new DivisaoTribunalWriter(_mockDivisaoTribunalFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new DivisaoTribunalWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.DivisaoTribunal CreateValidDivisaoTribunalModel()
    {
        return new Models.DivisaoTribunal
        {
            Id = 0,
            NumCodigo = 1,
            Justica = 1,
            NomeEspecial = "João",
            Area = 1,
            Cidade = 1,
            Foro = 1,
            Tribunal = 1,
            CodigoDiv = "AAA",
            Endereco = "Rua das Flores, 123",
            Fone = "(11) 99999-9999",
            Fax = "(11) 88888-9999",
            CEP = "01234-567",
            Obs = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            EMail = "test@email.com",
            Andar = "AAAAAAAAAA",
            GUID = Guid.NewGuid().ToString()
        };
    }
#endregion
}