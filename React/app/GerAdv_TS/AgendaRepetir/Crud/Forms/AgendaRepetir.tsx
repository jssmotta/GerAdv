// 100% auto-generated by Source Genesys WebApi Front & Back Creator
                     // copyright © 2000-2025 Menphis - Sistemas Inteligentes
                     // This file is part of the Source Genesys project                     
                    // Tracking: Forms.tsx.txt
'use client';
import { IAgendaRepetir } from '@/app/GerAdv_TS/AgendaRepetir/Interfaces/interface.AgendaRepetir';
import { useRouter } from 'next/navigation';
import React, { useEffect, useState, useRef } from 'react';
import { useSystemContext } from '@/app/context/SystemContext';
import { getParamFromUrl } from '@/app/tools/helpers';
import '@/app/styles/CrudFormsBase.css';
import '@/app/styles/CrudFormsMobile.css';
import '@/app/styles/CrudForms.css'; // [ INDEX_SIZE ]
import ButtonSalvarCrud from '@/app/components/Cruds/ButtonSalvarCrud';
import { useIsMobile } from '@/app/context/MobileContext';
import DeleteButton from '@/app/components/Cruds/DeleteButton';
import { AgendaRepetirApi } from '../../Apis/ApiAgendaRepetir';
import { useValidationsAgendaRepetir } from '../../Hooks/hookAgendaRepetir';
import AdvogadosComboBox from '@/app/GerAdv_TS/Advogados/ComboBox/Advogados';
import ClientesComboBox from '@/app/GerAdv_TS/Clientes/ComboBox/Clientes';
import FuncionariosComboBox from '@/app/GerAdv_TS/Funcionarios/ComboBox/Funcionarios';
import ProcessosComboBox from '@/app/GerAdv_TS/Processos/ComboBox/Processos';
import { AdvogadosApi } from '@/app/GerAdv_TS/Advogados/Apis/ApiAdvogados';
import { ClientesApi } from '@/app/GerAdv_TS/Clientes/Apis/ApiClientes';
import { FuncionariosApi } from '@/app/GerAdv_TS/Funcionarios/Apis/ApiFuncionarios';
import { ProcessosApi } from '@/app/GerAdv_TS/Processos/Apis/ApiProcessos';
import InputName from '@/app/components/Inputs/InputName';
import InputInput from '@/app/components/Inputs/InputInput'
import InputCheckbox from '@/app/components/Inputs/InputCheckbox';
interface AgendaRepetirFormProps {
  agendarepetirData: IAgendaRepetir;
  onChange: (e: any) => void;
  onSubmit: (e: React.FormEvent) => void;
  onClose: () => void;
  onError?: () => void;
  onReload?: () => void;
  onSuccess?: (registro?: any) => void;
}

export const AgendaRepetirForm: React.FC<AgendaRepetirFormProps> = ({
  agendarepetirData, 
  onChange, 
  onSubmit, 
  onClose, 
  onError, 
  onReload, 
  onSuccess, 
}) => {
const router = useRouter();
const { systemContext } = useSystemContext();
const isMobile = useIsMobile();
const dadoApi = new AgendaRepetirApi(systemContext?.Uri ?? '', systemContext?.Token ?? '');
const [isSubmitting, setIsSubmitting] = useState(false);
const initialized = useRef(false);
const validationForm = useValidationsAgendaRepetir();
const [nomeAdvogados, setNomeAdvogados] = useState('');
const advogadosApi = new AdvogadosApi(systemContext?.Uri ?? '', systemContext?.Token ?? '');
const [nomeClientes, setNomeClientes] = useState('');
const clientesApi = new ClientesApi(systemContext?.Uri ?? '', systemContext?.Token ?? '');
const [nomeFuncionarios, setNomeFuncionarios] = useState('');
const funcionariosApi = new FuncionariosApi(systemContext?.Uri ?? '', systemContext?.Token ?? '');
const [nomeProcessos, setNomeProcessos] = useState('');
const processosApi = new ProcessosApi(systemContext?.Uri ?? '', systemContext?.Token ?? '');

if (getParamFromUrl('advogados') > 0) {
  if (agendarepetirData.id === 0 && agendarepetirData.advogado == 0) {
    advogadosApi
    .getById(getParamFromUrl('advogados'))
    .then((response) => {
      setNomeAdvogados(response.data.nome);
    })
    .catch((error) => {
      console.log('Error unexpected');
    });

    agendarepetirData.advogado = getParamFromUrl('advogados');
  }
}

if (getParamFromUrl('clientes') > 0) {
  if (agendarepetirData.id === 0 && agendarepetirData.cliente == 0) {
    clientesApi
    .getById(getParamFromUrl('clientes'))
    .then((response) => {
      setNomeClientes(response.data.nome);
    })
    .catch((error) => {
      console.log('Error unexpected');
    });

    agendarepetirData.cliente = getParamFromUrl('clientes');
  }
}

if (getParamFromUrl('funcionarios') > 0) {
  if (agendarepetirData.id === 0 && agendarepetirData.funcionario == 0) {
    funcionariosApi
    .getById(getParamFromUrl('funcionarios'))
    .then((response) => {
      setNomeFuncionarios(response.data.nome);
    })
    .catch((error) => {
      console.log('Error unexpected');
    });

    agendarepetirData.funcionario = getParamFromUrl('funcionarios');
  }
}

if (getParamFromUrl('processos') > 0) {
  if (agendarepetirData.id === 0 && agendarepetirData.processo == 0) {
    processosApi
    .getById(getParamFromUrl('processos'))
    .then((response) => {
      setNomeProcessos(response.data.nropasta);
    })
    .catch((error) => {
      console.log('Error unexpected');
    });

    agendarepetirData.processo = getParamFromUrl('processos');
  }
}
const addValorAdvogado = (e: any) => {
  if (e?.id>0)
    onChange({ target: { name: 'advogado', value: e.id } });
  };
  const addValorCliente = (e: any) => {
    if (e?.id>0)
      onChange({ target: { name: 'cliente', value: e.id } });
    };
    const addValorFuncionario = (e: any) => {
      if (e?.id>0)
        onChange({ target: { name: 'funcionario', value: e.id } });
      };
      const addValorProcesso = (e: any) => {
        if (e?.id>0)
          onChange({ target: { name: 'processo', value: e.id } });
        };
        const onConfirm = (e: React.FormEvent) => {
          e.preventDefault();
          if (e.stopPropagation) e.stopPropagation();

            if (!isSubmitting) {
              setIsSubmitting(true);

              try {
                onSubmit(e);
              } catch (error) {
              console.log('Erro ao submeter formulário de AgendaRepetir:');
              setIsSubmitting(false);
              if (onError) onError();
              }
            }
          };
          const handleCancel = () => {
            if (onReload) {
              onReload(); // Recarrega os dados originais
            } else {
            onClose(); // Comportamento padrão se não há callback de recarga
          }
        };

        const handleDirectSave = () => {
          if (!isSubmitting) {
            setIsSubmitting(true);

            try {
              const syntheticEvent = {
                preventDefault: () => { }, 
                target: document.getElementById(`AgendaRepetirForm-${agendarepetirData.id}`)
              } as unknown as React.FormEvent;

              onSubmit(syntheticEvent);
            } catch (error) {
            console.log('Erro ao salvar AgendaRepetir diretamente');
            setIsSubmitting(false);
            if (onError) onError();
            }
          }
        };
        useEffect(() => {
          const el = document.querySelector('.nameFormMobile');
          if (el) {
            el.textContent = agendarepetirData?.id == 0 ? 'Editar AgendaRepetir' : 'Adicionar Agenda Repetir';
          }
        }, [agendarepetirData.id]);
        return (
        <>
        {!isMobile ? <style jsx global>{`
          @media (max-width: 1366px) {
            html {
              zoom: 0.8 !important;
            }
          }
          `}</style> : null}

          <div className={isMobile ? 'form-container form-container-AgendaRepetir' : 'form-container form-container-AgendaRepetir'}>

            <form className='formInputCadInc' id={`AgendaRepetirForm-${agendarepetirData.id}`} onSubmit={onConfirm}>
              {!isMobile && (
                <ButtonSalvarCrud isMobile={false} validationForm={validationForm} entity='AgendaRepetir' data={agendarepetirData} isSubmitting={isSubmitting} onClose={onClose} formId={`AgendaRepetirForm-${agendarepetirData.id}`} preventPropagation={true} onSave={handleDirectSave} onCancel={handleCancel} />
                )}
                <div className='grid-container'>


                  <AdvogadosComboBox
                  name={'advogado'}
                  dataForm={agendarepetirData}
                  value={agendarepetirData.advogado}
                  setValue={addValorAdvogado}
                  label={'Advogados'}
                  />

                  <ClientesComboBox
                  name={'cliente'}
                  dataForm={agendarepetirData}
                  value={agendarepetirData.cliente}
                  setValue={addValorCliente}
                  label={'Clientes'}
                  />

                  <InputInput
                  type='text'
                  maxLength={2048}
                  id='datafinal'
                  label='DataFinal'
                  dataForm={agendarepetirData}
                  className='inputIncNome'
                  name='datafinal'
                  value={agendarepetirData.datafinal}
                  onChange={onChange}
                  />


                  <FuncionariosComboBox
                  name={'funcionario'}
                  dataForm={agendarepetirData}
                  value={agendarepetirData.funcionario}
                  setValue={addValorFuncionario}
                  label={'Colaborador'}
                  />

                  <InputInput
                  type='text'
                  maxLength={2048}
                  id='horafinal'
                  label='HoraFinal'
                  dataForm={agendarepetirData}
                  className='inputIncNome'
                  name='horafinal'
                  value={agendarepetirData.horafinal}
                  onChange={onChange}
                  />


                  <ProcessosComboBox
                  name={'processo'}
                  dataForm={agendarepetirData}
                  value={agendarepetirData.processo}
                  setValue={addValorProcesso}
                  label={'Processos'}
                  />
                  <InputCheckbox dataForm={agendarepetirData} label='Pessoal' name='pessoal' checked={agendarepetirData.pessoal} onChange={onChange} />

                  <InputInput
                  type='text'
                  maxLength={2048}
                  id='frequencia'
                  label='Frequencia'
                  dataForm={agendarepetirData}
                  className='inputIncNome'
                  name='frequencia'
                  value={agendarepetirData.frequencia}
                  onChange={onChange}
                  />

                </div><div className='grid-container'>
                  <InputInput
                  type='text'
                  maxLength={2048}
                  id='dia'
                  label='Dia'
                  dataForm={agendarepetirData}
                  className='inputIncNome'
                  name='dia'
                  value={agendarepetirData.dia}
                  onChange={onChange}
                  />


                  <InputInput
                  type='text'
                  maxLength={2048}
                  id='mes'
                  label='Mes'
                  dataForm={agendarepetirData}
                  className='inputIncNome'
                  name='mes'
                  value={agendarepetirData.mes}
                  onChange={onChange}
                  />


                  <InputInput
                  type='text'
                  maxLength={2048}
                  id='hora'
                  label='Hora'
                  dataForm={agendarepetirData}
                  className='inputIncNome'
                  name='hora'
                  value={agendarepetirData.hora}
                  onChange={onChange}
                  />


                  <InputInput
                  type='text'
                  maxLength={2048}
                  id='idquem'
                  label='IDQuem'
                  dataForm={agendarepetirData}
                  className='inputIncNome'
                  name='idquem'
                  value={agendarepetirData.idquem}
                  onChange={onChange}
                  />


                  <InputInput
                  type='text'
                  maxLength={2048}
                  id='idquem2'
                  label='IDQuem2'
                  dataForm={agendarepetirData}
                  className='inputIncNome'
                  name='idquem2'
                  value={agendarepetirData.idquem2}
                  onChange={onChange}
                  />


                  <InputInput
                  type='text'
                  maxLength={2147483647}
                  id='mensagem'
                  label='Mensagem'
                  dataForm={agendarepetirData}
                  className='inputIncNome'
                  name='mensagem'
                  value={agendarepetirData.mensagem}
                  onChange={onChange}
                  />


                  <InputInput
                  type='text'
                  maxLength={2048}
                  id='idtipo'
                  label='IDTipo'
                  dataForm={agendarepetirData}
                  className='inputIncNome'
                  name='idtipo'
                  value={agendarepetirData.idtipo}
                  onChange={onChange}
                  />


                  <InputInput
                  type='text'
                  maxLength={2048}
                  id='id1'
                  label='ID1'
                  dataForm={agendarepetirData}
                  className='inputIncNome'
                  name='id1'
                  value={agendarepetirData.id1}
                  onChange={onChange}
                  />


                  <InputInput
                  type='text'
                  maxLength={2048}
                  id='id2'
                  label='ID2'
                  dataForm={agendarepetirData}
                  className='inputIncNome'
                  name='id2'
                  value={agendarepetirData.id2}
                  onChange={onChange}
                  />

                </div><div className='grid-container'>
                  <InputInput
                  type='text'
                  maxLength={2048}
                  id='id3'
                  label='ID3'
                  dataForm={agendarepetirData}
                  className='inputIncNome'
                  name='id3'
                  value={agendarepetirData.id3}
                  onChange={onChange}
                  />


                  <InputInput
                  type='text'
                  maxLength={2048}
                  id='id4'
                  label='ID4'
                  dataForm={agendarepetirData}
                  className='inputIncNome'
                  name='id4'
                  value={agendarepetirData.id4}
                  onChange={onChange}
                  />

                  <InputCheckbox dataForm={agendarepetirData} label='Segunda' name='segunda' checked={agendarepetirData.segunda} onChange={onChange} />
                  <InputCheckbox dataForm={agendarepetirData} label='Quarta' name='quarta' checked={agendarepetirData.quarta} onChange={onChange} />
                  <InputCheckbox dataForm={agendarepetirData} label='Quinta' name='quinta' checked={agendarepetirData.quinta} onChange={onChange} />
                  <InputCheckbox dataForm={agendarepetirData} label='Sexta' name='sexta' checked={agendarepetirData.sexta} onChange={onChange} />
                  <InputCheckbox dataForm={agendarepetirData} label='Sabado' name='sabado' checked={agendarepetirData.sabado} onChange={onChange} />
                  <InputCheckbox dataForm={agendarepetirData} label='Domingo' name='domingo' checked={agendarepetirData.domingo} onChange={onChange} />
                  <InputCheckbox dataForm={agendarepetirData} label='Terca' name='terca' checked={agendarepetirData.terca} onChange={onChange} />
                </div>
              </form>


              {isMobile && (
                <ButtonSalvarCrud isMobile={true} validationForm={validationForm} entity='AgendaRepetir' data={agendarepetirData} isSubmitting={isSubmitting} onClose={onClose} formId={`AgendaRepetirForm-${agendarepetirData.id}`} preventPropagation={true} onSave={handleDirectSave} onCancel={handleCancel} />
                )}
                <DeleteButton page={'/pages/agendarepetir'} id={agendarepetirData.id} closeModel={onClose} dadoApi={dadoApi} />
              </div>
              <div className='form-spacer'></div>
              </>
            );
          };