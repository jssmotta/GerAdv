// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class AgendaSemanaValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFAgendaSemanaFactory> _mockAgendaSemanaFactory;
    private readonly Mock<IAgendaSemanaReader> _mockReader;
    private readonly AgendaSemanaValidation _validation;
    private readonly Mock<IAgendaSemanaService> _mockAgendaSemanaService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IFuncionariosReader> _mockFuncionariosReader;
    private readonly Mock<IAdvogadosReader> _mockAdvogadosReader;
    private readonly Mock<ITipoCompromissoReader> _mockTipoCompromissoReader;
    private readonly Mock<IClientesReader> _mockClientesReader;
    private readonly AgendaSemanaService _service;
    private readonly string _validUri = "test-uri";
    public AgendaSemanaValidationTests()
    {
        _mockAgendaSemanaFactory = new Mock<IFAgendaSemanaFactory>();
        _mockReader = new Mock<IAgendaSemanaReader>();
        _validation = new AgendaSemanaValidation();
        _mockAgendaSemanaService = new Mock<IAgendaSemanaService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockFuncionariosReader = new Mock<IFuncionariosReader>();
        _mockAdvogadosReader = new Mock<IAdvogadosReader>();
        _mockTipoCompromissoReader = new Mock<ITipoCompromissoReader>();
        _mockClientesReader = new Mock<IClientesReader>();
    }

#region Class Structure Tests
    [Fact]
    public void AgendaSemanaValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IAgendaSemanaValidation>();
    }

    [Fact]
    public void AgendaSemanaValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(AgendaSemanaValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void AgendaSemanaValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(AgendaSemanaValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.AgendaSemana CreateValidAgendaSemana()
    {
        return new Models.AgendaSemana
        {
            Id = 1,
            ParaNome = "João",
            Data = "27/05/2022",
            Funcionario = 0,
            Advogado = 0,
            Hora = "27/05/2022",
            TipoCompromisso = 0,
            Compromisso = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Concluido = false,
            Liberado = true,
            Importante = false,
            HoraFinal = "27/05/2022",
            Nome = "João",
            Cliente = 0,
            NomeCliente = "João",
            Tipo = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockAgendaSemanaService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterAgendaSemana>(), It.IsAny<string>())).ReturnsAsync(new List<AgendaSemanaResponseAll>());
        // Setup other mocks but don't override the AgendaSemanas service mock
        _mockFuncionariosReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.FuncionariosResponse { Id = id }));
        _mockAdvogadosReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.AdvogadosResponse { Id = id }));
        _mockTipoCompromissoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.TipoCompromissoResponse { Id = id }));
        _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.ClientesResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockAgendaSemanaService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterAgendaSemana>(), It.IsAny<string>())).ReturnsAsync(new List<AgendaSemanaResponseAll>());
        // Setup other mocks but don't override the AgendaSemanas service mock
        _mockFuncionariosReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.FuncionariosResponse { Id = 0 }));
        _mockAdvogadosReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.AdvogadosResponse { Id = 0 }));
        _mockTipoCompromissoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.TipoCompromissoResponse { Id = 0 }));
        _mockClientesReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.ClientesResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var agendasemana = new Models.AgendaSemana
        {
            Id = 1,
            ParaNome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Data = null,
            Hora = null,
            Compromisso = null,
            Concluido = false,
            Liberado = true,
            Importante = false,
            HoraFinal = null,
            Nome = null,
            NomeCliente = null,
            Tipo = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agendasemana, _mockAgendaSemanaService.Object, _mockFuncionariosReader.Object, _mockAdvogadosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockAgendaSemanaService.Object, _mockFuncionariosReader.Object, _mockAdvogadosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region Foreign Key Validation Tests - Funcionarios
    [Fact]
    public async Task ValidateReg_WithInvalidFuncionarios_ShouldThrowSGValidationException()
    {
        // Arrange
        var agendasemana = CreateValidAgendaSemana();
        agendasemana.Funcionario = 999;
        _mockFuncionariosReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.FuncionariosResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agendasemana, _mockAgendaSemanaService.Object, _mockFuncionariosReader.Object, _mockAdvogadosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedFuncionariosId_ShouldThrowSGValidationException()
    {
        // Arrange
        var agendasemana = CreateValidAgendaSemana();
        agendasemana.Funcionario = 999;
        var reg888 = new Models.Response.FuncionariosResponse
        {
            Id = 888
        }; // Different ID
        _mockFuncionariosReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agendasemana, _mockAgendaSemanaService.Object, _mockFuncionariosReader.Object, _mockAdvogadosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidFuncionarios_ShouldPass()
    {
        // Arrange
        var agendasemana = CreateValidAgendaSemana();
        agendasemana.Funcionario = 123;
        var reg123 = new Models.Response.FuncionariosResponse
        {
            Id = 123
        };
        _mockFuncionariosReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agendasemana, _mockAgendaSemanaService.Object, _mockFuncionariosReader.Object, _mockAdvogadosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyFuncionarios_ShouldPass()
    {
        // Arrange
        var agendasemana = CreateValidAgendaSemana();
        agendasemana.Funcionario = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agendasemana, _mockAgendaSemanaService.Object, _mockFuncionariosReader.Object, _mockAdvogadosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockFuncionariosReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - Advogados
    [Fact]
    public async Task ValidateReg_WithInvalidAdvogados_ShouldThrowSGValidationException()
    {
        // Arrange
        var agendasemana = CreateValidAgendaSemana();
        agendasemana.Advogado = 999;
        _mockAdvogadosReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.AdvogadosResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agendasemana, _mockAgendaSemanaService.Object, _mockFuncionariosReader.Object, _mockAdvogadosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedAdvogadosId_ShouldThrowSGValidationException()
    {
        // Arrange
        var agendasemana = CreateValidAgendaSemana();
        agendasemana.Advogado = 999;
        var reg888 = new Models.Response.AdvogadosResponse
        {
            Id = 888
        }; // Different ID
        _mockAdvogadosReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agendasemana, _mockAgendaSemanaService.Object, _mockFuncionariosReader.Object, _mockAdvogadosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidAdvogados_ShouldPass()
    {
        // Arrange
        var agendasemana = CreateValidAgendaSemana();
        agendasemana.Advogado = 123;
        var reg123 = new Models.Response.AdvogadosResponse
        {
            Id = 123
        };
        _mockAdvogadosReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agendasemana, _mockAgendaSemanaService.Object, _mockFuncionariosReader.Object, _mockAdvogadosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyAdvogados_ShouldPass()
    {
        // Arrange
        var agendasemana = CreateValidAgendaSemana();
        agendasemana.Advogado = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agendasemana, _mockAgendaSemanaService.Object, _mockFuncionariosReader.Object, _mockAdvogadosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockAdvogadosReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - TipoCompromisso
    [Fact]
    public async Task ValidateReg_WithInvalidTipoCompromisso_ShouldThrowSGValidationException()
    {
        // Arrange
        var agendasemana = CreateValidAgendaSemana();
        agendasemana.TipoCompromisso = 999;
        _mockTipoCompromissoReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.TipoCompromissoResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agendasemana, _mockAgendaSemanaService.Object, _mockFuncionariosReader.Object, _mockAdvogadosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedTipoCompromissoId_ShouldThrowSGValidationException()
    {
        // Arrange
        var agendasemana = CreateValidAgendaSemana();
        agendasemana.TipoCompromisso = 999;
        var reg888 = new Models.Response.TipoCompromissoResponse
        {
            Id = 888
        }; // Different ID
        _mockTipoCompromissoReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agendasemana, _mockAgendaSemanaService.Object, _mockFuncionariosReader.Object, _mockAdvogadosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidTipoCompromisso_ShouldPass()
    {
        // Arrange
        var agendasemana = CreateValidAgendaSemana();
        agendasemana.TipoCompromisso = 123;
        var reg123 = new Models.Response.TipoCompromissoResponse
        {
            Id = 123
        };
        _mockTipoCompromissoReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agendasemana, _mockAgendaSemanaService.Object, _mockFuncionariosReader.Object, _mockAdvogadosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyTipoCompromisso_ShouldPass()
    {
        // Arrange
        var agendasemana = CreateValidAgendaSemana();
        agendasemana.TipoCompromisso = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agendasemana, _mockAgendaSemanaService.Object, _mockFuncionariosReader.Object, _mockAdvogadosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockTipoCompromissoReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - Clientes
    [Fact]
    public async Task ValidateReg_WithInvalidClientes_ShouldThrowSGValidationException()
    {
        // Arrange
        var agendasemana = CreateValidAgendaSemana();
        agendasemana.Cliente = 999;
        _mockClientesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.ClientesResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agendasemana, _mockAgendaSemanaService.Object, _mockFuncionariosReader.Object, _mockAdvogadosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedClientesId_ShouldThrowSGValidationException()
    {
        // Arrange
        var agendasemana = CreateValidAgendaSemana();
        agendasemana.Cliente = 999;
        var reg888 = new Models.Response.ClientesResponse
        {
            Id = 888
        }; // Different ID
        _mockClientesReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(agendasemana, _mockAgendaSemanaService.Object, _mockFuncionariosReader.Object, _mockAdvogadosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidClientes_ShouldPass()
    {
        // Arrange
        var agendasemana = CreateValidAgendaSemana();
        agendasemana.Cliente = 123;
        var reg123 = new Models.Response.ClientesResponse
        {
            Id = 123
        };
        _mockClientesReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agendasemana, _mockAgendaSemanaService.Object, _mockFuncionariosReader.Object, _mockAdvogadosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyClientes_ShouldPass()
    {
        // Arrange
        var agendasemana = CreateValidAgendaSemana();
        agendasemana.Cliente = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(agendasemana, _mockAgendaSemanaService.Object, _mockFuncionariosReader.Object, _mockAdvogadosReader.Object, _mockTipoCompromissoReader.Object, _mockClientesReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockClientesReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}