// 100% auto-generated by Source Genesys WebApi Front & Back Creator
                     // copyright © 2000-2025 Menphis - Sistemas Inteligentes
                     // This file is part of the Source Genesys project                     
                    import { useState } from 'react';
import InputInput from '@/app/components/Inputs/InputInput';
import InputDate from '@/app/components/Inputs/InputDate';
import InputHora from '@/app/components/Inputs/InputHora';
import InputValor from '@/app/components/Inputs/InputValor';
import InputComboFilterYesNo from '@/app/components/Inputs/InputComboFilterYesNo';
import { FilterHandlers } from '@/app/components/Cruds/GenericFilterDialog';
import { FilterCargosEsc } from '@/app/GerAdv_TS/CargosEsc/Filters/CargosEsc';
interface UseCargosEscFilterProps {
  handleFetchWithFilter: (filtro?: FilterCargosEsc | undefined | null) => Promise<void>;
}
interface UseCargosEscFilterReturn {
  // Estados
  showSearch: boolean;
  windowFilter: FilterCargosEsc;
  setWindowFilter: React.Dispatch<React.SetStateAction<FilterCargosEsc>>;
  // Handlers do Dialog
  handleSearch: () => void;
  handleCloseSearch: () => void;
  handleConfirmSearch: (filter: FilterCargosEsc) => Promise<void>;
  // Render function
  renderInputFilters: (handlers: FilterHandlers<FilterCargosEsc>) => React.ReactNode;
  // Utilitários
  clearFilter: () => void;
  hasActiveFilter: boolean;
}
export const useCargosEscFilter = ({ handleFetchWithFilter }: UseCargosEscFilterProps): UseCargosEscFilterReturn => {
  const [showSearch, setShowSearch] = useState(false);
  const [windowFilter, setWindowFilter] = useState<FilterCargosEsc>({} as FilterCargosEsc);
  // Handlers do Dialog
  const handleSearch = () => {
    setShowSearch(true);
    const filterWildechar = {...windowFilter, wildcardChar: '%' } as FilterCargosEsc;
    setWindowFilter(filterWildechar);
  };
  const handleCloseSearch = () => {
    setShowSearch(false);
  };
  const handleConfirmSearch = async (filter: FilterCargosEsc) => {
    await handleFetchWithFilter(filter);
  };
  // Função para limpar filtros
  const clearFilter = () => {
    setWindowFilter({});
    sessionStorage.removeItem(btoa('CargosEscFilter'));
    handleFetchWithFilter({});
  };
  // Verificar se há filtros ativos
  const hasActiveFilter = Object.values(windowFilter).some(value =>
    value !== undefined && value !== null && value !== '' && value !== -2147483648
  );
  // Função para renderizar os campos de filtro
  const renderInputFilters = (handlers: FilterHandlers<FilterCargosEsc>) => (
  <>
  <InputValor
  type='text'
  id='percentual'
  name='percentual'
  value={handlers.windowFilter?.percentual ?? 0}
  onChange={handlers.handleInputValorChange}
  label='Percentual (igual ou começando com)'
  className='inputSearch inputSearchValor'
  />

  <InputValor
  type='text'
  id='percentual_end'
  name='percentual_end'
  value={handlers.windowFilter?.percentual_end ?? 0}
  disabled={handlers.windowFilter?.percentual != 0 ? false: true}
  onChange={handlers.handleInputValorChange}
  label='Percentual (até)'
  className='inputSearch inputSearchValor inputSearchValorEnd'
  />

  <InputInput
  type='text'
  id='nome'
  name='nome'
  value={handlers.windowFilter?.nome ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Nome'
  label='Nome'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='classificacao'
  name='classificacao'
  value={handlers.windowFilter?.classificacao ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Classificacao'
  label='Classificacao (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='classificacao_end'
  name='classificacao_end'
  value={handlers.windowFilter?.classificacao_end ?? ''}
  onChange={handlers.handleInputChange}
  placeholder='Informe Classificacao final'
  label='Classificacao final'
  disabled={handlers.windowFilter?.classificacao ? false: true}
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='codigo_filtro'
  name='codigo_filtro'
  value={handlers.windowFilter?.codigo_filtro ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código do cadastro'
  label='Código (igual ou inicial)'
  className='inputIncNome inputSearch'
  />
  <InputInput
  type='text'
  id='codigo_filtro_end'
  name='codigo_filtro_end'
  value={handlers.windowFilter?.codigo_filtro_end ?? ''}
  onChange={handlers.handleInputChange}
  dataForm={handlers.windowFilter}
  placeholder='Código final do cadastro'
  label='Código final'
  disabled={handlers.windowFilter?.codigo_filtro ? false: true}
  className='inputIncNome inputSearch'
  />
</>
);
return {
  // Estados
  showSearch, 
  windowFilter, 
  setWindowFilter, 
  // Handlers
  handleSearch, 
  handleCloseSearch, 
  handleConfirmSearch, 
  // Render function
  renderInputFilters, 
  // Utilitários
  clearFilter, 
  hasActiveFilter
};
};