// 100% auto-generated by Source Genesys Core
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming
public partial class DBEnderecos
{
    [XmlIgnore]
    private protected bool pFldFTopIndex, pFldFDescricao, pFldFContato, pFldFDtNasc, pFldFEndereco, pFldFBairro, pFldFPrivativo, pFldFAddContato, pFldFCEP, pFldFOAB, pFldFOBS, pFldFFone, pFldFFax, pFldFTratamento, pFldFCidade, pFldFSite, pFldFEMail, pFldFQuem, pFldFQuemIndicou, pFldFReportECBOnly, pFldFEtiqueta, pFldFAni, pFldFBold;
    [XmlIgnore]
    private protected int m_FCidade, m_FQuem;
    [XmlIgnore]
    private protected string? m_FDescricao, m_FContato, m_FEndereco, m_FBairro, m_FCEP, m_FOAB, m_FOBS, m_FFone, m_FFax, m_FTratamento, m_FSite, m_FEMail, m_FQuemIndicou;
    [XmlIgnore]
    private protected DateTime? m_FDtNasc;
    [XmlIgnore]
    private protected bool m_FTopIndex, m_FPrivativo, m_FAddContato, m_FReportECBOnly, m_FEtiqueta, m_FAni, m_FBold;
    public bool FTopIndex
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FTopIndex;
        set
        {
            pFldFTopIndex = pFldFTopIndex || value != m_FTopIndex;
            if (pFldFTopIndex)
                m_FTopIndex = value;
        }
    }

    [StringLength(50, ErrorMessage = "A propriedade FDescricao da tabela Enderecos deve ter no máximo 50 caracteres.")]
    public string? FDescricao
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDescricao ?? string.Empty;
        set
        {
            pFldFDescricao = pFldFDescricao || !(m_FDescricao ?? string.Empty).Equals(value);
            if (pFldFDescricao)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FDescricao = trimmed.Length > 50 ? trimmed.AsSpan(0, 50).ToString() : trimmed;
            }
        }
    }

    public string? FContato
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FContato ?? string.Empty;
        set
        {
            pFldFContato = pFldFContato || !(m_FContato ?? string.Empty).Equals(value);
            if (pFldFContato)
                m_FContato = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public string? FDtNasc
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDtNasc is null || m_FDtNasc == DevourerOne.DDataZerada ? string.Empty : m_FDtNasc.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFDtNasc, m_FDtNasc, value)is not (true, var changed, var data))
                return;
            (pFldFDtNasc, m_FDtNasc) = (changed, data);
        }
    }

    [StringLength(50, ErrorMessage = "A propriedade FEndereco da tabela Enderecos deve ter no máximo 50 caracteres.")]
    public string? FEndereco
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEndereco ?? string.Empty;
        set
        {
            pFldFEndereco = pFldFEndereco || !(m_FEndereco ?? string.Empty).Equals(value);
            if (pFldFEndereco)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FEndereco = trimmed.Length > 50 ? trimmed.AsSpan(0, 50).ToString() : trimmed;
            }
        }
    }

    [StringLength(30, ErrorMessage = "A propriedade FBairro da tabela Enderecos deve ter no máximo 30 caracteres.")]
    public string? FBairro
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FBairro ?? string.Empty;
        set
        {
            pFldFBairro = pFldFBairro || !(m_FBairro ?? string.Empty).Equals(value);
            if (pFldFBairro)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FBairro = trimmed.Length > 30 ? trimmed.AsSpan(0, 30).ToString() : trimmed;
            }
        }
    }

    public bool FPrivativo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPrivativo;
        set
        {
            pFldFPrivativo = pFldFPrivativo || value != m_FPrivativo;
            if (pFldFPrivativo)
                m_FPrivativo = value;
        }
    }

    public bool FAddContato
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAddContato;
        set
        {
            pFldFAddContato = pFldFAddContato || value != m_FAddContato;
            if (pFldFAddContato)
                m_FAddContato = value;
        }
    }

    [StringLength(10, ErrorMessage = "A propriedade FCEP da tabela Enderecos deve ter no máximo 10 caracteres.")]
    public string? FCEP
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCEP ?? string.Empty;
        set
        {
            pFldFCEP = pFldFCEP || !(m_FCEP ?? string.Empty).Equals(value);
            if (pFldFCEP)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FCEP = trimmed.Length > 10 ? trimmed.AsSpan(0, 10).ToString() : trimmed;
            }
        }
    }

    [StringLength(20, ErrorMessage = "A propriedade FOAB da tabela Enderecos deve ter no máximo 20 caracteres.")]
    public string? FOAB
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FOAB ?? string.Empty;
        set
        {
            pFldFOAB = pFldFOAB || !(m_FOAB ?? string.Empty).Equals(value);
            if (pFldFOAB)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FOAB = trimmed.Length > 20 ? trimmed.AsSpan(0, 20).ToString() : trimmed;
            }
        }
    }

    public string? FOBS
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FOBS ?? string.Empty;
        set
        {
            pFldFOBS = pFldFOBS || !(m_FOBS ?? string.Empty).Equals(value);
            if (pFldFOBS)
                m_FOBS = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public string? FFone
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FFone ?? string.Empty;
        set
        {
            pFldFFone = pFldFFone || !(m_FFone ?? string.Empty).Equals(value);
            if (pFldFFone)
                m_FFone = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public string? FFax
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FFax ?? string.Empty;
        set
        {
            pFldFFax = pFldFFax || !(m_FFax ?? string.Empty).Equals(value);
            if (pFldFFax)
                m_FFax = value.trim().FixAbc() ?? string.Empty;
        }
    }

    [StringLength(20, ErrorMessage = "A propriedade FTratamento da tabela Enderecos deve ter no máximo 20 caracteres.")]
    public string? FTratamento
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FTratamento ?? string.Empty;
        set
        {
            pFldFTratamento = pFldFTratamento || !(m_FTratamento ?? string.Empty).Equals(value);
            if (pFldFTratamento)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FTratamento = trimmed.Length > 20 ? trimmed.AsSpan(0, 20).ToString() : trimmed;
            }
        }
    }

    public int FCidade
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCidade;
        set
        {
            pFldFCidade = pFldFCidade || value != m_FCidade;
            if (pFldFCidade)
                m_FCidade = value;
        }
    }

    [StringLength(200, ErrorMessage = "A propriedade FSite da tabela Enderecos deve ter no máximo 200 caracteres.")]
    public string? FSite
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FSite ?? string.Empty;
        set
        {
            pFldFSite = pFldFSite || !(m_FSite ?? string.Empty).Equals(value);
            if (pFldFSite)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FSite = trimmed.Length > 200 ? trimmed.AsSpan(0, 200).ToString() : trimmed;
            }
        }
    }

    [StringLength(255, ErrorMessage = "A propriedade FEMail da tabela Enderecos deve ter no máximo 255 caracteres.")]
    public string? FEMail
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEMail ?? string.Empty;
        set
        {
            pFldFEMail = pFldFEMail || !(m_FEMail ?? string.Empty).Equals(value);
            if (pFldFEMail)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FEMail = trimmed.Length > 255 ? trimmed.AsSpan(0, 255).ToString() : trimmed;
                if (m_FEMail.IsValidEmail())
                    return;
                throw new ArgumentException("E-mail inválido ou não informado corretamente.", nameof(value));
            }
        }
    }

    public int FQuem
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FQuem;
        set
        {
            pFldFQuem = pFldFQuem || value != m_FQuem;
            if (pFldFQuem)
                m_FQuem = value;
        }
    }

    [StringLength(150, ErrorMessage = "A propriedade FQuemIndicou da tabela Enderecos deve ter no máximo 150 caracteres.")]
    public string? FQuemIndicou
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FQuemIndicou ?? string.Empty;
        set
        {
            pFldFQuemIndicou = pFldFQuemIndicou || !(m_FQuemIndicou ?? string.Empty).Equals(value);
            if (pFldFQuemIndicou)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FQuemIndicou = trimmed.Length > 150 ? trimmed.AsSpan(0, 150).ToString() : trimmed;
            }
        }
    }

    public bool FReportECBOnly
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FReportECBOnly;
        set
        {
            pFldFReportECBOnly = pFldFReportECBOnly || value != m_FReportECBOnly;
            if (pFldFReportECBOnly)
                m_FReportECBOnly = value;
        }
    }

    public bool FEtiqueta
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEtiqueta;
        set
        {
            pFldFEtiqueta = pFldFEtiqueta || value != m_FEtiqueta;
            if (pFldFEtiqueta)
                m_FEtiqueta = value;
        }
    }

    public bool FAni
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAni;
        set
        {
            pFldFAni = pFldFAni || value != m_FAni;
            if (pFldFAni)
                m_FAni = value;
        }
    }

    public bool FBold
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FBold;
        set
        {
            pFldFBold = pFldFBold || value != m_FBold;
            if (pFldFBold)
                m_FBold = value;
        }
    }

    public bool IVisto() => m_FVisto;
    public int IQuemCad() => m_FQuemCad;
    public int IQuemAtu() => m_FQuemAtu;
    public DateTime IDtCad() => MDtCad;
    public DateTime IDtAtu() => MDtAtu;
    public string IDtCadDataX_DataHora() => MDtCadDataX_DataHora;
    public string IDtAtuDataX_DataHora() => MDtAtuDataX_DataHora;
    public void SetAuditor(int usuarioId) => AuditorQuem = usuarioId;
    public string IMDtCadDataX_DataHora() => MDtAtuDataX_DataHora;
    public string ITabelaName() => PTabelaNome;
    public string ICampoCodigo() => CampoCodigo;
    public string ICampoNome() => CampoNome;
    public string IPrefixo() => PTabelaPrefixo;
    public ImmutableArray<DBInfoSystem> IFieldsRaw() => throw new NotImplementedException();
    public ImmutableArray<DBInfoSystem> IPkFields() => throw new NotImplementedException();
    public ImmutableArray<DBInfoSystem> IPkIndicesFields() => throw new NotImplementedException();
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetID() => ID;
}