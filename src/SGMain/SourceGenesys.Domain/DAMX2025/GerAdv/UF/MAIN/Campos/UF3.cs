// 100% auto-generated by Source Genesys Core
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming 1
public partial class DBUF
{
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool pFldFDDD, pFldFID, pFldFPais, pFldFTop, pFldFDescricao, pFldFGUID;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected int m_FPais;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected string? m_FDDD, m_FID, m_FDescricao, m_FGUID;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool m_FTop;
    // Tracking Code: 20250503
    [StringLength(10, ErrorMessage = "A propriedade FDDD da tabela UF deve ter no máximo 10 caracteres.")]
    public virtual string? FDDD
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDDD ?? string.Empty;
        set
        {
            pFldFDDD = pFldFDDD || !(m_FDDD ?? string.Empty).Equals(value);
            if (pFldFDDD)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FDDD = trimmed.Length > 10 ? trimmed.AsSpan(0, 10).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(4, ErrorMessage = "A propriedade FID da tabela UF deve ter no máximo 4 caracteres.")]
    public virtual string? FID
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FID ?? string.Empty;
        set
        {
            pFldFID = pFldFID || !(m_FID ?? string.Empty).Equals(value);
            if (pFldFID)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FID = trimmed.Length > 4 ? trimmed.AsSpan(0, 4).ToString() : trimmed;
            }
        }
    }

    public virtual int FPais
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FPais;
        set
        {
            pFldFPais = pFldFPais || value != m_FPais;
            if (pFldFPais)
                m_FPais = value;
        }
    }

    public virtual bool FTop
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FTop;
        set
        {
            pFldFTop = pFldFTop || value != m_FTop;
            if (pFldFTop)
                m_FTop = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(40, ErrorMessage = "A propriedade FDescricao da tabela UF deve ter no máximo 40 caracteres.")]
    public virtual string? FDescricao
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDescricao ?? string.Empty;
        set
        {
            pFldFDescricao = pFldFDescricao || !(m_FDescricao ?? string.Empty).Equals(value);
            if (pFldFDescricao)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FDescricao = trimmed.Length > 40 ? trimmed.AsSpan(0, 40).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(100, ErrorMessage = "A propriedade FGUID da tabela UF deve ter no máximo 100 caracteres.")]
    public virtual string? FGUID
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FGUID ?? string.Empty;
        set
        {
            pFldFGUID = pFldFGUID || !(m_FGUID ?? string.Empty).Equals(value);
            if (pFldFGUID)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FGUID = trimmed.Length > 100 ? trimmed.AsSpan(0, 100).ToString() : trimmed;
            }
        }
    }

    public void SetAuditor(int usuarioId) => AuditorQuem = usuarioId;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITabelaName() => PTabelaNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoCodigo() => CampoCodigo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoNome() => CampoNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string IPrefixo() => PTabelaPrefixo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITypeFieldCode() => "int";
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IdIsIdentity() => false;
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetID() => ID;
}