// 100% auto-generated by Source Genesys Core
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming 1
public partial class DBOutrasPartesCliente
{
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool pFldFNome, pFldFTerceirizado, pFldFClientePrincipal, pFldFTipo, pFldFSexo, pFldFDtNasc, pFldFCPF, pFldFRG, pFldFCNPJ, pFldFInscEst, pFldFNomeFantasia, pFldFEndereco, pFldFCidade, pFldFCEP, pFldFBairro, pFldFFone, pFldFFax, pFldFEMail, pFldFSite, pFldFGUID, pFldFClass, pFldFEtiqueta, pFldFAni, pFldFBold;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected int m_FClientePrincipal, m_FCidade;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected string? m_FNome, m_FCPF, m_FRG, m_FCNPJ, m_FInscEst, m_FNomeFantasia, m_FEndereco, m_FCEP, m_FBairro, m_FFone, m_FFax, m_FEMail, m_FSite, m_FGUID, m_FClass;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected DateTime? m_FDtNasc;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool m_FTerceirizado, m_FTipo, m_FSexo, m_FEtiqueta, m_FAni, m_FBold;
    // Tracking Code: 20250503
    [StringLength(80, ErrorMessage = "A propriedade FNome da tabela OutrasPartesCliente deve ter no máximo 80 caracteres.")]
    public virtual string? FNome
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNome ?? string.Empty;
        set
        {
            pFldFNome = pFldFNome || !(m_FNome ?? string.Empty).Equals(value);
            if (pFldFNome)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FNome = trimmed.Length > 80 ? trimmed.AsSpan(0, 80).ToString() : trimmed;
            }
        }
    }

    public virtual bool FTerceirizado
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FTerceirizado;
        set
        {
            pFldFTerceirizado = pFldFTerceirizado || value != m_FTerceirizado;
            if (pFldFTerceirizado)
                m_FTerceirizado = value;
        }
    }

    public virtual int FClientePrincipal
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FClientePrincipal;
        set
        {
            pFldFClientePrincipal = pFldFClientePrincipal || value != m_FClientePrincipal;
            if (pFldFClientePrincipal)
                m_FClientePrincipal = value;
        }
    }

    public virtual bool FTipo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FTipo;
        set
        {
            pFldFTipo = pFldFTipo || value != m_FTipo;
            if (pFldFTipo)
                m_FTipo = value;
        }
    }

    public virtual bool FSexo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FSexo;
        set
        {
            pFldFSexo = pFldFSexo || value != m_FSexo;
            if (pFldFSexo)
                m_FSexo = value;
        }
    }

    public virtual string? FDtNasc
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDtNasc is null || m_FDtNasc == DevourerOne.DDataZerada ? string.Empty : m_FDtNasc.Value.ToString("dd/MM/yyyy");
        set
        {
            if (DevourerOne.DateUp12(pFldFDtNasc, m_FDtNasc, value)is not (true, var changed, var data))
                return;
            (pFldFDtNasc, m_FDtNasc) = (changed, data);
        }
    }

    // Tracking Code: 20250503
    [StringLength(11, ErrorMessage = "A propriedade FCPF da tabela OutrasPartesCliente deve ter no máximo 11 caracteres.")]
    public virtual string? FCPF
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCPF ?? string.Empty;
        set
        {
            pFldFCPF = pFldFCPF || !(m_FCPF ?? string.Empty).Equals(value);
            if (pFldFCPF)
            {
                var trimmed = (value?.Trim() ?? string.Empty).ClearInputCpf();
                var valueCpf = trimmed.Length > 11 ? trimmed.AsSpan(0, 11).ToString() : trimmed;
                if (valueCpf.Length < 11)
                {
                    valueCpf = string.Empty;
                }

                if (valueCpf.Length == 0 || valueCpf.IsValidCpf())
                    m_FCPF = valueCpf;
                else
                    throw new ArgumentException("CPF inválido ou não informado corretamente.", nameof(value));
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(30, ErrorMessage = "A propriedade FRG da tabela OutrasPartesCliente deve ter no máximo 30 caracteres.")]
    public virtual string? FRG
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FRG ?? string.Empty;
        set
        {
            pFldFRG = pFldFRG || !(m_FRG ?? string.Empty).Equals(value);
            if (pFldFRG)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FRG = trimmed.Length > 30 ? trimmed.AsSpan(0, 30).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(14, ErrorMessage = "A propriedade FCNPJ da tabela OutrasPartesCliente deve ter no máximo 14 caracteres.")]
    public virtual string? FCNPJ
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCNPJ ?? string.Empty;
        set
        {
            pFldFCNPJ = pFldFCNPJ || !(m_FCNPJ ?? string.Empty).Equals(value);
            if (pFldFCNPJ)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FCNPJ = trimmed.Length > 14 ? trimmed.AsSpan(0, 14).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(15, ErrorMessage = "A propriedade FInscEst da tabela OutrasPartesCliente deve ter no máximo 15 caracteres.")]
    public virtual string? FInscEst
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FInscEst ?? string.Empty;
        set
        {
            pFldFInscEst = pFldFInscEst || !(m_FInscEst ?? string.Empty).Equals(value);
            if (pFldFInscEst)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FInscEst = trimmed.Length > 15 ? trimmed.AsSpan(0, 15).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(255, ErrorMessage = "A propriedade FNomeFantasia da tabela OutrasPartesCliente deve ter no máximo 255 caracteres.")]
    public virtual string? FNomeFantasia
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FNomeFantasia ?? string.Empty;
        set
        {
            pFldFNomeFantasia = pFldFNomeFantasia || !(m_FNomeFantasia ?? string.Empty).Equals(value);
            if (pFldFNomeFantasia)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FNomeFantasia = trimmed.Length > 255 ? trimmed.AsSpan(0, 255).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(80, ErrorMessage = "A propriedade FEndereco da tabela OutrasPartesCliente deve ter no máximo 80 caracteres.")]
    public virtual string? FEndereco
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEndereco ?? string.Empty;
        set
        {
            pFldFEndereco = pFldFEndereco || !(m_FEndereco ?? string.Empty).Equals(value);
            if (pFldFEndereco)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FEndereco = trimmed.Length > 80 ? trimmed.AsSpan(0, 80).ToString() : trimmed;
            }
        }
    }

    public virtual int FCidade
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCidade;
        set
        {
            pFldFCidade = pFldFCidade || value != m_FCidade;
            if (pFldFCidade)
                m_FCidade = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(10, ErrorMessage = "A propriedade FCEP da tabela OutrasPartesCliente deve ter no máximo 10 caracteres.")]
    public virtual string? FCEP
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCEP ?? string.Empty;
        set
        {
            pFldFCEP = pFldFCEP || !(m_FCEP ?? string.Empty).Equals(value);
            if (pFldFCEP)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FCEP = trimmed.Length > 10 ? trimmed.AsSpan(0, 10).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(50, ErrorMessage = "A propriedade FBairro da tabela OutrasPartesCliente deve ter no máximo 50 caracteres.")]
    public virtual string? FBairro
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FBairro ?? string.Empty;
        set
        {
            pFldFBairro = pFldFBairro || !(m_FBairro ?? string.Empty).Equals(value);
            if (pFldFBairro)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FBairro = trimmed.Length > 50 ? trimmed.AsSpan(0, 50).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    public virtual string? FFone
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FFone ?? string.Empty;
        set
        {
            pFldFFone = pFldFFone || !(m_FFone ?? string.Empty).Equals(value);
            if (pFldFFone)
                m_FFone = value.trim().FixAbc() ?? string.Empty;
        }
    }

    // Tracking Code: 20250503
    public virtual string? FFax
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FFax ?? string.Empty;
        set
        {
            pFldFFax = pFldFFax || !(m_FFax ?? string.Empty).Equals(value);
            if (pFldFFax)
                m_FFax = value.trim().FixAbc() ?? string.Empty;
        }
    }

    // Tracking Code: 20250503
    [StringLength(150, ErrorMessage = "A propriedade FEMail da tabela OutrasPartesCliente deve ter no máximo 150 caracteres.")]
    public virtual string? FEMail
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEMail ?? string.Empty;
        set
        {
            pFldFEMail = pFldFEMail || !(m_FEMail ?? string.Empty).Equals(value);
            if (pFldFEMail)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FEMail = trimmed.Length > 150 ? trimmed.AsSpan(0, 150).ToString() : trimmed;
                if (m_FEMail.IsValidEmail())
                    return;
                throw new ArgumentException("E-mail inválido ou não informado corretamente.", nameof(value));
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(150, ErrorMessage = "A propriedade FSite da tabela OutrasPartesCliente deve ter no máximo 150 caracteres.")]
    public virtual string? FSite
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FSite ?? string.Empty;
        set
        {
            pFldFSite = pFldFSite || !(m_FSite ?? string.Empty).Equals(value);
            if (pFldFSite)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FSite = trimmed.Length > 150 ? trimmed.AsSpan(0, 150).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(150, ErrorMessage = "A propriedade FGUID da tabela OutrasPartesCliente deve ter no máximo 150 caracteres.")]
    public virtual string? FGUID
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FGUID ?? string.Empty;
        set
        {
            pFldFGUID = pFldFGUID || !(m_FGUID ?? string.Empty).Equals(value);
            if (pFldFGUID)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FGUID = trimmed.Length > 150 ? trimmed.AsSpan(0, 150).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(1, ErrorMessage = "A propriedade FClass da tabela OutrasPartesCliente deve ter no máximo 1 caracteres.")]
    public virtual string? FClass
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FClass ?? string.Empty;
        set
        {
            pFldFClass = pFldFClass || !(m_FClass ?? string.Empty).Equals(value);
            if (pFldFClass)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FClass = trimmed.Length > 1 ? trimmed.AsSpan(0, 1).ToString() : trimmed;
            }
        }
    }

    public virtual bool FEtiqueta
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEtiqueta;
        set
        {
            pFldFEtiqueta = pFldFEtiqueta || value != m_FEtiqueta;
            if (pFldFEtiqueta)
                m_FEtiqueta = value;
        }
    }

    public virtual bool FAni
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FAni;
        set
        {
            pFldFAni = pFldFAni || value != m_FAni;
            if (pFldFAni)
                m_FAni = value;
        }
    }

    public virtual bool FBold
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FBold;
        set
        {
            pFldFBold = pFldFBold || value != m_FBold;
            if (pFldFBold)
                m_FBold = value;
        }
    }

    public void SetAuditor(int usuarioId) => AuditorQuem = usuarioId;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITabelaName() => PTabelaNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoCodigo() => CampoCodigo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoNome() => CampoNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string IPrefixo() => PTabelaPrefixo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITypeFieldCode() => "int";
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IdIsIdentity() => false;
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetID() => ID;
}