// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class GUTMatrizValidationTests : IDisposable
{
    private readonly GUTMatrizValidation _validation;
    private readonly Mock<IGUTMatrizService> _mockGUTMatrizService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<IGUTTipoReader> _mockGUTTipoReader;
    private readonly GUTMatrizService _service;
    private readonly string _validUri = "test-uri";
    public GUTMatrizValidationTests()
    {
        _validation = new GUTMatrizValidation();
        _mockGUTMatrizService = new Mock<IGUTMatrizService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockGUTTipoReader = new Mock<IGUTTipoReader>();
    }

#region Class Structure Tests
    [Fact]
    public void GUTMatrizValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IGUTMatrizValidation>();
    }

    [Fact]
    public void GUTMatrizValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(GUTMatrizValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void GUTMatrizValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(GUTMatrizValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private static Models.GUTMatriz CreateValidGUTMatriz()
    {
        return new Models.GUTMatriz
        {
            Id = 1,
            Descricao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            GUTTipo = 1,
            Valor = 1
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockGUTMatrizService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterGUTMatriz>(), It.IsAny<string>())).ReturnsAsync([]);
        // Setup other mocks but don't override the GUTMatrizs service mock
        _ = _mockGUTTipoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new GUTTipoResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockGUTMatrizService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterGUTMatriz>(), It.IsAny<string>())).ReturnsAsync([]);
        // Setup other mocks but don't override the GUTMatrizs service mock
        _ = _mockGUTTipoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new GUTTipoResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var gutmatriz = new Models.GUTMatriz
        {
            Id = 1,
            Descricao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            GUTTipo = 1,
            Valor = 1
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(gutmatriz, _mockGUTMatrizService.Object, _mockGUTTipoReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockGUTMatrizService.Object, _mockGUTTipoReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region ValidateReg Required Descricao Method Tests 
    [Fact]
    public async Task ValidateReg_WithEmptyDescricao_ShouldThrowSGValidationException()
    {
        // Arrange
        var gutmatriz = CreateValidGUTMatriz();
        gutmatriz.Descricao = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(gutmatriz, _mockGUTMatrizService.Object, _mockGUTTipoReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullDescricao_ShouldThrowSGValidationException()
    {
        // Arrange
        var gutmatriz = CreateValidGUTMatriz();
        gutmatriz.Descricao = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(gutmatriz, _mockGUTMatrizService.Object, _mockGUTTipoReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataDescricao_ShouldReturnTrue()
    {
        // Arrange
        var gutmatriz = CreateValidGUTMatriz();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(gutmatriz, _mockGUTMatrizService.Object, _mockGUTTipoReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceDescricao_ShouldThrowSGValidationException()
    {
        // Arrange
        var gutmatriz = CreateValidGUTMatriz();
        gutmatriz.Descricao = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(gutmatriz, _mockGUTMatrizService.Object, _mockGUTTipoReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
#region Foreign Key Validation Tests - GUTTipo
    [Fact]
    public async Task ValidateReg_WithInvalidGUTTipo_ShouldThrowSGValidationException()
    {
        // Arrange
        var gutmatriz = CreateValidGUTMatriz();
        gutmatriz.GUTTipo = 999;
        _mockGUTTipoReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.GUTTipoResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(gutmatriz, _mockGUTMatrizService.Object, _mockGUTTipoReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedGUTTipoId_ShouldThrowSGValidationException()
    {
        // Arrange
        var gutmatriz = CreateValidGUTMatriz();
        gutmatriz.GUTTipo = 999;
        var reg888 = new Models.Response.GUTTipoResponse
        {
            Id = 888
        }; // Different ID
        _mockGUTTipoReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(gutmatriz, _mockGUTMatrizService.Object, _mockGUTTipoReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidGUTTipo_ShouldPass()
    {
        // Arrange
        var gutmatriz = CreateValidGUTMatriz();
        gutmatriz.GUTTipo = 123;
        var reg123 = new Models.Response.GUTTipoResponse
        {
            Id = 123
        };
        _mockGUTTipoReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(gutmatriz, _mockGUTMatrizService.Object, _mockGUTTipoReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}