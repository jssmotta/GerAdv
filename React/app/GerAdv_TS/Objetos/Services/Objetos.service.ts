// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
'use client';
import { CRUD_CONSTANTS } from '@/app/tools/crud';
import { ObjetosApi, ObjetosApiError } from '../Apis/ApiObjetos';
import { FilterObjetos } from '../Filters/Objetos';
import { IObjetos } from '../Interfaces/interface.Objetos';
import { ObjetosEmpty } from '../../Models/Objetos';

export class ObjetosValidator {
  static validateObjetos(objetos: IObjetos): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];

    // Atualmente não há validações de regras de negócio específicas
    // Todas as validações são feitas nos inputs correspondentes
    
    return {
      isValid: errors.length === 0,
      errors
    };
  }
}

export interface IObjetosService {
  fetchObjetosById: (id: number) => Promise<IObjetos>;
  saveObjetos: (objetos: IObjetos) => Promise<IObjetos>;  
  getList: (filtro?: FilterObjetos) => Promise<IObjetos[]>;
  getAll: (filtro?: FilterObjetos) => Promise<IObjetos[]>;
  deleteObjetos: (id: number) => Promise<void>;
  validateObjetos: (objetos: IObjetos) => { isValid: boolean; errors: string[] };
}

export class ObjetosService implements IObjetosService {
  constructor(private api: ObjetosApi) {}

  async fetchObjetosById(id: number): Promise<IObjetos> {
    if (id <= 0) {
      throw new ObjetosApiError('ID inválido', 400, 'INVALID_ID');
    }

    try {
      
      const response = await this.api.getById(id);
      return response.data;

    } catch (error) {
      if (error instanceof ObjetosApiError) {
        throw error;
      }
      throw new ObjetosApiError('Erro ao buscar objetos', 500, 'FETCH_ERROR', error);
    }
  }

  async saveObjetos(objetos: IObjetos): Promise<IObjetos> {    
    const validation = this.validateObjetos(objetos);
    if (!validation.isValid) {
      throw new ObjetosApiError(
        `Dados inválidos: ${validation.errors.join(', ')}`,
        400,
        'VALIDATION_ERROR'
      );
    }

    try {
      const response = await this.api.addAndUpdate(objetos);
      return response.data;
    } catch (error) {
      if (error instanceof ObjetosApiError) {
        throw error;
      }
      throw new ObjetosApiError('Erro ao salvar objetos', 500, 'SAVE_ERROR', error);
    }
  }

  
    async getList(filtro?: FilterObjetos): Promise<IObjetos[]> {
    try {
      const response = await this.api.getListN(CRUD_CONSTANTS.MAX_RECORDS_COMBO, filtro);
      return response.data || [];
    } catch (error) {
      console.log('Error fetching Objetos list');
      return [];
    }
  }

 
  

   async getAll(
    filtro?: FilterObjetos,
    onOnlineData?: (data: IObjetos[]) => void
  ): Promise<IObjetos[]> {
    try {
      // Carrega dados offline primeiro
      const preloadResponse = await this.api.filterPreload(0, filtro ?? {});
      const offlineData = preloadResponse?.data || [];

      if (onOnlineData) {
        // Busca dados online em background e envia via callback
        this.api.filter(0, filtro ?? {})
          .then(response => {
            if (response?.data) {
              onOnlineData(response.data);
            }
          })
          .catch(error => {
            console.log('Error fetching online Objetos');
          });
        // Retorna offline imediatamente
        return offlineData;
      } else {
        // Se não há callback, aguarda dados online e retorna
        try {
          const onlineResponse = await this.api.filter(0, filtro ?? {});
          return onlineResponse?.data || offlineData;
        } catch (error) {
          console.log('Error fetching online Objetos');
          return offlineData;
        }
      }
    } catch (error) {
      console.log('Error fetching all Objetos:');
      return [];
    }
  }


  async deleteObjetos(id: number): Promise<void> {
    if (id <= 0) {
      throw new ObjetosApiError('ID inválido para exclusão', 400, 'INVALID_ID');
    }

    try {
      await this.api.delete(id);
    } catch (error) {
      if (error instanceof ObjetosApiError) {
        throw error;
      }
      throw new ObjetosApiError('Erro ao excluir objetos', 500, 'DELETE_ERROR', error);
    }
  }

  validateObjetos(objetos: IObjetos): { isValid: boolean; errors: string[] } {
    return ObjetosValidator.validateObjetos(objetos);
  }
}