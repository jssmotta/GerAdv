// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IInstanciaValidation
{
    Task<bool> ValidateReg(Models.Instancia reg, IInstanciaService service, IAcaoReader acaoReader, IForoReader foroReader, ITipoRecursoReader tiporecursoReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, IInstanciaService service, INENotasService nenotasService, IProSucumbenciaService prosucumbenciaService, ITribunalService tribunalService, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class InstanciaValidation : IInstanciaValidation
{
    public async Task<bool> CanDelete(int id, IInstanciaService service, INENotasService nenotasService, IProSucumbenciaService prosucumbenciaService, ITribunalService tribunalService, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        var nenotasExists0 = await nenotasService.Filter(new Filters.FilterNENotas { Instancia = id }, uri);
        if (nenotasExists0 != null && nenotasExists0.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela N E Notas associados a ele.");
        var prosucumbenciaExists1 = await prosucumbenciaService.Filter(new Filters.FilterProSucumbencia { Instancia = id }, uri);
        if (prosucumbenciaExists1 != null && prosucumbenciaExists1.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Pro Sucumbencia associados a ele.");
        var tribunalExists2 = await tribunalService.Filter(new Filters.FilterTribunal { Instancia = id }, uri);
        if (tribunalExists2 != null && tribunalExists2.Any())
            throw new SGValidationException("Não é possível excluir o registro, pois existem registros da tabela Tribunal associados a ele.");
        return true;
    }

    private bool ValidSizes(Models.Instancia reg)
    {
        if (reg.Objeto != null && reg.Objeto.Length > 255)
            throw new SGValidationException($"Objeto deve ter no máximo 255 caracteres.");
        if (reg.NroProcesso != null && reg.NroProcesso.Length > 25)
            throw new SGValidationException($"NroProcesso deve ter no máximo 25 caracteres.");
        if (reg.ZKey != null && reg.ZKey.Length > 25)
            throw new SGValidationException($"ZKey deve ter no máximo 25 caracteres.");
        if (reg.NroAntigo != null && reg.NroAntigo.Length > 25)
            throw new SGValidationException($"NroAntigo deve ter no máximo 25 caracteres.");
        if (reg.AccessCode != null && reg.AccessCode.Length > 100)
            throw new SGValidationException($"AccessCode deve ter no máximo 100 caracteres.");
        if (reg.ZKeyIA != null && reg.ZKeyIA.Length > 25)
            throw new SGValidationException($"ZKeyIA deve ter no máximo 25 caracteres.");
        if (reg.GUID != null && reg.GUID.Length > 100)
            throw new SGValidationException($"GUID deve ter no máximo 100 caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.Instancia reg, IInstanciaService service, IAcaoReader acaoReader, IForoReader foroReader, ITipoRecursoReader tiporecursoReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.NroProcesso))
            throw new SGValidationException("NroProcesso é obrigatório");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        // Acao
        if (!reg.Acao.IsEmptyIDNumber())
        {
            var regAcao = await acaoReader.Read(reg.Acao, oCnn);
            if (regAcao == null || regAcao.Id != reg.Acao)
            {
                throw new SGValidationException($"Acao não encontrado ({regAcao?.Id}).");
            }
        }

        // Foro
        if (!reg.Foro.IsEmptyIDNumber())
        {
            var regForo = await foroReader.Read(reg.Foro, oCnn);
            if (regForo == null || regForo.Id != reg.Foro)
            {
                throw new SGValidationException($"Foro não encontrado ({regForo?.Id}).");
            }
        }

        // TipoRecurso
        if (!reg.TipoRecurso.IsEmptyIDNumber())
        {
            var regTipoRecurso = await tiporecursoReader.Read(reg.TipoRecurso, oCnn);
            if (regTipoRecurso == null || regTipoRecurso.Id != reg.TipoRecurso)
            {
                throw new SGValidationException($"Tipo Recurso não encontrado ({regTipoRecurso?.Id}).");
            }
        }

        return true;
    }
}