// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IModelosDocumentosValidation
{
    Task<bool> ValidateReg(Models.ModelosDocumentos reg, IModelosDocumentosService service, ITipoModeloDocumentoReader tipomodelodocumentoReader, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
    Task<bool> CanDelete(int? id, IModelosDocumentosService service, [FromRoute, Required] string uri, MsiSqlConnection? oCnn);
}

public class ModelosDocumentosValidation : IModelosDocumentosValidation
{
    public async Task<bool> CanDelete(int? id, IModelosDocumentosService service, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (id == null || id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id ?? default, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.ModelosDocumentos reg)
    {
        if (reg.Nome != null && reg.Nome.Length > DBModelosDocumentosDicInfo.MdcNome.FTamanho)
            throw new SGValidationException($"Nome deve ter no máximo {DBModelosDocumentosDicInfo.MdcNome.FTamanho} caracteres.");
        if (reg.Titulo != null && reg.Titulo.Length > DBModelosDocumentosDicInfo.MdcTitulo.FTamanho)
            throw new SGValidationException($"Titulo deve ter no máximo {DBModelosDocumentosDicInfo.MdcTitulo.FTamanho} caracteres.");
        if (reg.GUID != null && reg.GUID.Length > DBModelosDocumentosDicInfo.MdcGUID.FTamanho)
            throw new SGValidationException($"GUID deve ter no máximo {DBModelosDocumentosDicInfo.MdcGUID.FTamanho} caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.ModelosDocumentos reg, IModelosDocumentosService service, ITipoModeloDocumentoReader tipomodelodocumentoReader, [FromRoute, Required] string uri, MsiSqlConnection? oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        if (string.IsNullOrWhiteSpace(reg.Nome))
            throw new SGValidationException("Nome é obrigatório");
        if (await IsDuplicado(reg, service, uri))
            throw new SGValidationException($"Modelos Documentos '{reg.Nome}'  - Nome");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.TipoModeloDocumento == 0)
            throw new SGValidationException("TipoModeloDocumento é obrigatório.");
        if (reg.GUID.IsEmpty())
            throw new SGValidationException("GUID é obrigatório.");
        // TipoModeloDocumento
        {
            var regTipoModeloDocumento = await tipomodelodocumentoReader.Read(reg.TipoModeloDocumento, oCnn);
            if (regTipoModeloDocumento == null || regTipoModeloDocumento.Id != reg.TipoModeloDocumento)
            {
                throw new SGValidationException($"Tipo Modelo Documento não encontrado ({regTipoModeloDocumento?.Id}).");
            }
        }

        return true;
    }

    private async Task<bool> IsDuplicado(Models.ModelosDocumentos reg, IModelosDocumentosService service, string uri)
    {
        var existingModelosDocumentos = (await service.Filter(BaseConsts.DefaultCheckValidation, new Filters.FilterModelosDocumentos { Nome = reg.Nome }, uri)).FirstOrDefault(); // TRACK 10042025
        return existingModelosDocumentos != null && existingModelosDocumentos.Id > 0 && existingModelosDocumentos.Id != reg.Id;
    }
}