// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
// Tracking: Forms.tsx.txt
'use client';
import { IOperador } from '@/app/GerAdv_TS/Operador/Interfaces/interface.Operador';
import { useRouter } from 'next/navigation';
import React, { useEffect, useState, useRef } from 'react';
import { useSystemContext } from '@/app/context/SystemContext';
import { getParamFromUrl } from '@/app/tools/helpers';
import '@/app/styles/CrudFormsBase.css';
import '@/app/styles/CrudFormsMobile.css';
import '@/app/styles/CrudForms.css'; // [ INDEX_SIZE ]
import ButtonSalvarCrud from '@/app/components/Cruds/ButtonSalvarCrud';
import { useIsMobile } from '@/app/context/MobileContext';
import DeleteButton from '@/app/components/Cruds/DeleteButton';
import { OperadorApi } from '../../Apis/ApiOperador';
import { useValidationsOperador } from '../../Hooks/hookOperador';
import InputName from '@/app/components/Inputs/InputName';
import InputInput from '@/app/components/Inputs/InputInput'
import InputCheckbox from '@/app/components/Inputs/InputCheckbox';
interface OperadorFormProps {
  operadorData: IOperador;
  onChange: (e: any) => void;
  onSubmit: (e: React.FormEvent) => void;
  onClose: () => void;
  onError?: () => void;
  onReload?: () => void;
  onSuccess?: (registro?: any) => void;
}

export const OperadorForm: React.FC<OperadorFormProps> = ({
  operadorData, 
  onChange, 
  onSubmit, 
  onClose, 
  onError, 
  onReload, 
  onSuccess, 
}) => {
const router = useRouter();
const { systemContext } = useSystemContext();
const isMobile = useIsMobile();
const dadoApi = new OperadorApi(systemContext?.Uri ?? '', systemContext?.Token ?? '');
const [isSubmitting, setIsSubmitting] = useState(false);
const initialized = useRef(false);
const validationForm = useValidationsOperador();

const onConfirm = (e: React.FormEvent) => {
  e.preventDefault();
  if (e.stopPropagation) e.stopPropagation();

    if (!isSubmitting) {
      setIsSubmitting(true);

      try {
        onSubmit(e);
      } catch (error) {
      console.log('Erro ao submeter formulário de Operador:');
      setIsSubmitting(false);
      if (onError) onError();
      }
    }
  };
  const handleCancel = () => {
    if (onReload) {
      onReload(); // Recarrega os dados originais
    } else {
    onClose(); // Comportamento padrão se não há callback de recarga
  }
};

const handleDirectSave = () => {
  if (!isSubmitting) {
    setIsSubmitting(true);

    try {
      const syntheticEvent = {
        preventDefault: () => { }, 
        target: document.getElementById(`OperadorForm-${operadorData.id}`)
      } as unknown as React.FormEvent;

      onSubmit(syntheticEvent);
    } catch (error) {
    if (process.env.NEXT_PUBLIC_SHOW_LOG === '1')
      console.log('Erro ao salvar Operador diretamente');
      setIsSubmitting(false);
      if (onError) onError();
      }
    }
  };
  useEffect(() => {
    const el = document.querySelector('.nameFormMobile');
    if (el) {
      el.textContent = operadorData?.id == 0 ? 'Editar Operador' : 'Adicionar Operador';
    }
  }, [operadorData.id]);
  return (
  <>
  {!isMobile ? <style jsx global>{`
    @media (max-width: 1366px) {
      html {
        zoom: 0.8 !important;
      }
    }
    `}</style> : null}

    <div className={isMobile ? 'form-container form-container-Operador' : 'form-container form-container-Operador'}>

      <form className='formInputCadInc' id={`OperadorForm-${operadorData.id}`} onSubmit={onConfirm}>
        {!isMobile && (
          <ButtonSalvarCrud isMobile={false} validationForm={validationForm} entity='Operador' data={operadorData} isSubmitting={isSubmitting} setIsSubmitting={setIsSubmitting} onClose={onClose} formId={`OperadorForm-${operadorData.id}`} preventPropagation={true} onSave={handleDirectSave} onCancel={handleCancel} />
          )}
          <div className='grid-container'>

            <InputName
            type='text'
            id='nome'
            label='Nome'
            dataForm={operadorData}
            className='inputIncNome'
            name='nome'
            value={operadorData.nome}
            placeholder={`Informe Nome`}
            onChange={onChange}
            required
            />

            <InputInput
            type='email'
            maxLength={150}
            id='email'
            label='EMail'
            dataForm={operadorData}
            className='inputIncNome'
            name='email'
            value={operadorData.email}
            onChange={onChange}
            />


            <InputInput
            type='text'
            maxLength={2147483647}
            id='pasta'
            label='Pasta'
            dataForm={operadorData}
            className='inputIncNome'
            name='pasta'
            value={operadorData.pasta}
            onChange={onChange}
            />

            <InputCheckbox dataForm={operadorData} label='Telefonista' name='telefonista' checked={operadorData.telefonista} onChange={onChange} />
            <InputCheckbox dataForm={operadorData} label='Master' name='master' checked={operadorData.master} onChange={onChange} />

            <InputInput
            type='text'
            maxLength={50}
            id='nick'
            label='Nick'
            dataForm={operadorData}
            className='inputIncNome'
            name='nick'
            value={operadorData.nick}
            onChange={onChange}
            />

            <InputCheckbox dataForm={operadorData} label='Excluido' name='excluido' checked={operadorData.excluido} onChange={onChange} />
            <InputCheckbox dataForm={operadorData} label='Situacao' name='situacao' checked={operadorData.situacao} onChange={onChange} />

            <InputInput
            type='text'
            maxLength={255}
            id='minhadescricao'
            label='MinhaDescricao'
            dataForm={operadorData}
            className='inputIncNome'
            name='minhadescricao'
            value={operadorData.minhadescricao}
            onChange={onChange}
            />

          </div><div className='grid-container'>
            <InputInput
            type='email'
            maxLength={100}
            id='emailnet'
            label='EMailNet'
            dataForm={operadorData}
            className='inputIncNome'
            name='emailnet'
            value={operadorData.emailnet}
            onChange={onChange}
            />

            <InputCheckbox dataForm={operadorData} label='OnLine' name='online' checked={operadorData.online} onChange={onChange} />
            <InputCheckbox dataForm={operadorData} label='SysOp' name='sysop' checked={operadorData.sysop} onChange={onChange} />
            <InputCheckbox dataForm={operadorData} label='IsFinanceiro' name='isfinanceiro' checked={operadorData.isfinanceiro} onChange={onChange} />
            <InputCheckbox dataForm={operadorData} label='Top' name='top' checked={operadorData.top} onChange={onChange} />
            <InputCheckbox dataForm={operadorData} label='Sexo' name='sexo' checked={operadorData.sexo} onChange={onChange} />
            <InputCheckbox dataForm={operadorData} label='Basico' name='basico' checked={operadorData.basico} onChange={onChange} />
            <InputCheckbox dataForm={operadorData} label='Externo' name='externo' checked={operadorData.externo} onChange={onChange} />

            <InputInput
            autoComplete='off'
            type='password'
            maxLength={4000}
            id='senha256'
            label='Senha256'
            dataForm={operadorData}
            className='inputIncNome'
            name='senha256'
            value={operadorData.senha256}
            onChange={onChange}
            />

          </div><div className='grid-container'><InputCheckbox dataForm={operadorData} label='EMailConfirmado' name='emailconfirmado' checked={operadorData.emailconfirmado} onChange={onChange} />

          <InputInput
          type='text'
          maxLength={2048}
          id='datalimitereset'
          label='DataLimiteReset'
          dataForm={operadorData}
          className='inputIncNome'
          name='datalimitereset'
          value={operadorData.datalimitereset}
          onChange={onChange}
          />

        </div>
      </form>


      {isMobile && (
        <ButtonSalvarCrud isMobile={true} validationForm={validationForm} entity='Operador' data={operadorData} isSubmitting={isSubmitting} setIsSubmitting={setIsSubmitting} onClose={onClose} formId={`OperadorForm-${operadorData.id}`} preventPropagation={true} onSave={handleDirectSave} onCancel={handleCancel} />
        )}
        <DeleteButton page={'/pages/operador'} id={operadorData.id} closeModel={onClose} dadoApi={dadoApi} />
      </div>
      <div className='form-spacer'></div>
      </>
    );
  };