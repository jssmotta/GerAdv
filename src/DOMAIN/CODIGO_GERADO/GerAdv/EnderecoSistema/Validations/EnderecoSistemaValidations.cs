// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Validations;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial interface IEnderecoSistemaValidation
{
    Task<bool> ValidateReg(Models.EnderecoSistema reg, IEnderecoSistemaService service, ITipoEnderecoSistemaReader tipoenderecosistemaReader, IProcessosReader processosReader, ICidadeReader cidadeReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
    Task<bool> CanDelete(int id, IEnderecoSistemaService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn);
}

public class EnderecoSistemaValidation : IEnderecoSistemaValidation
{
    public async Task<bool> CanDelete(int id, IEnderecoSistemaService service, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (id <= 0)
            throw new SGValidationException("Id inválido");
        var reg = await service.GetById(id, uri, default);
        if (reg == null)
            throw new SGValidationException($"Registro com id {id} não encontrado.");
        return true;
    }

    private bool ValidSizes(Models.EnderecoSistema reg)
    {
        if (reg.Motivo.Length > 200)
            throw new SGValidationException($"Motivo deve ter no máximo 200 caracteres.");
        if (reg.ContatoNoLocal.Length > 50)
            throw new SGValidationException($"ContatoNoLocal deve ter no máximo 50 caracteres.");
        if (reg.Endereco.Length > 150)
            throw new SGValidationException($"Endereco deve ter no máximo 150 caracteres.");
        if (reg.Bairro.Length > 50)
            throw new SGValidationException($"Bairro deve ter no máximo 50 caracteres.");
        if (reg.CEP.Length > 10)
            throw new SGValidationException($"CEP deve ter no máximo 10 caracteres.");
        if (reg.GUID.Length > 150)
            throw new SGValidationException($"GUID deve ter no máximo 150 caracteres.");
        return true;
    }

    public async Task<bool> ValidateReg(Models.EnderecoSistema reg, IEnderecoSistemaService service, ITipoEnderecoSistemaReader tipoenderecosistemaReader, IProcessosReader processosReader, ICidadeReader cidadeReader, [FromRoute, Required] string uri, MsiSqlConnection oCnn)
    {
        if (reg == null)
            throw new SGValidationException("Objeto está nulo");
        var validSizes = ValidSizes(reg);
        if (!validSizes)
            return false;
        if (reg.Cadastro == 0)
            throw new SGValidationException("Cadastro é obrigatório.");
        if (reg.CadastroExCod == 0)
            throw new SGValidationException("CadastroExCod é obrigatório.");
        if (reg.TipoEnderecoSistema == 0)
            throw new SGValidationException("TipoEnderecoSistema é obrigatório.");
        if (reg.GUID.IsEmpty())
            throw new SGValidationException("GUID é obrigatório.");
        // TipoEnderecoSistema
        {
            var regTipoEnderecoSistema = await tipoenderecosistemaReader.Read(reg.TipoEnderecoSistema, oCnn);
            if (regTipoEnderecoSistema == null || regTipoEnderecoSistema.Id != reg.TipoEnderecoSistema)
            {
                throw new SGValidationException($"Tipo Endereco Sistema não encontrado ({regTipoEnderecoSistema?.Id}).");
            }
        }

        // Processos
        if (!reg.Processo.IsEmptyIDNumber())
        {
            var regProcessos = await processosReader.Read(reg.Processo, oCnn);
            if (regProcessos == null || regProcessos.Id != reg.Processo)
            {
                throw new SGValidationException($"Processos não encontrado ({regProcessos?.Id}).");
            }
        }

        // Cidade
        if (!reg.Cidade.IsEmptyIDNumber())
        {
            var regCidade = await cidadeReader.Read(reg.Cidade, oCnn);
            if (regCidade == null || regCidade.Id != reg.Cidade)
            {
                throw new SGValidationException($"Cidade não encontrado ({regCidade?.Id}).");
            }
        }

        return true;
    }
}