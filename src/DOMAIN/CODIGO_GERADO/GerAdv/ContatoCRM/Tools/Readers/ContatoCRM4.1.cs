// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
#pragma warning disable IDE0130 // Namespace does not match folder structure

namespace MenphisSI.GerAdv.Readers;
#pragma warning restore IDE0130 // Namespace does not match folder structure

public partial class ContatoCRMReader
{
    private static string BuildSqlQuery(string campos, string whereClause, string orderClause, int max, MsiSqlConnection? oCnn = null)
    {
        if (max <= 0)
        {
            max = 200;
        }

        var orderQuery = $"{TSql.OrderBy} {DBContatoCRMDicInfo.CampoNome}";
        if (!string.IsNullOrEmpty(orderClause))
        {
            orderQuery = (!orderClause.ToUpperInvariant().Contains(TSql.OrderBy, StringComparison.OrdinalIgnoreCase) ? TSql.OrderBy : string.Empty) + orderClause;
        }

        var cWhere = whereClause.IsEmpty() ? string.Empty : (whereClause.Contains("WHERE", StringComparison.CurrentCultureIgnoreCase) ? whereClause : $" WHERE {whereClause}");
        var query = $@"SELECT TOP ({max})
                   {campos}, [{DBOperadorDicInfo.PTabelaNome}].[{DBOperadorDicInfo.Nome}],[{DBClientesDicInfo.PTabelaNome}].[{DBClientesDicInfo.Nome}],[{DBProcessosDicInfo.PTabelaNome}].[{DBProcessosDicInfo.NroPasta}],[{DBTipoContatoCRMDicInfo.PTabelaNome}].[{DBTipoContatoCRMDicInfo.Nome}]
                   FROM {DBContatoCRM.PTabelaNome.dbo(oCnn)}
                   LEFT JOIN {DBOperadorDicInfo.PTabelaNome.dbo(oCnn)} ON [{DBOperadorDicInfo.PTabelaNome}].[{DBOperador.CampoCodigo}]=[{DBContatoCRMDicInfo.PTabelaNome}].[{DBContatoCRMDicInfo.Operador}]
LEFT JOIN {DBClientesDicInfo.PTabelaNome.dbo(oCnn)} ON [{DBClientesDicInfo.PTabelaNome}].[{DBClientes.CampoCodigo}]=[{DBContatoCRMDicInfo.PTabelaNome}].[{DBContatoCRMDicInfo.Cliente}]
LEFT JOIN {DBProcessosDicInfo.PTabelaNome.dbo(oCnn)} ON [{DBProcessosDicInfo.PTabelaNome}].[{DBProcessos.CampoCodigo}]=[{DBContatoCRMDicInfo.PTabelaNome}].[{DBContatoCRMDicInfo.Processo}]
LEFT JOIN {DBTipoContatoCRMDicInfo.PTabelaNome.dbo(oCnn)} ON [{DBTipoContatoCRMDicInfo.PTabelaNome}].[{DBTipoContatoCRM.CampoCodigo}]=[{DBContatoCRMDicInfo.PTabelaNome}].[{DBContatoCRMDicInfo.TipoContatoCRM}]
 
                   {cWhere}
                   {orderQuery}
                   OPTION (OPTIMIZE FOR UNKNOWN)";
        return query;
    }

    public async Task<string> ReadStringAuditor(int id, string uri, MsiSqlConnection? oCnn)
    {
        if (oCnn is null)
            return string.Empty;
        string query = $@"{ConfiguracoesDBT.SQLNoCount}
SELECT TOP (1) 
    FORMAT(ctcDtAtu, 'yyyy-MM-dd-HH-mm-ss')
FROM {oCnn.UseDbo}.ContatoCRM WITH (NOLOCK, INDEX = idx_ContatoCRM_AuditorDtAtu)
WHERE ctcCodigo = @id
OPTION (OPTIMIZE FOR (@id UNKNOWN), FAST 1);";
        using var cmd = new SqlCommand(query, oCnn.InnerConnection);
        cmd.Parameters.AddWithValue("@id", id);
        var dataFormatada = $"{await cmd.ExecuteScalarAsync()}";
        return dataFormatada;
    }

    public async Task<string> ReadStringAuditor(string uri, string cWhere, List<SqlParameter> parameters, MsiSqlConnection? oCnn)
    {
        if (oCnn is null)
            return string.Empty;
        string query = $@"{ConfiguracoesDBT.SQLNoCount}
SELECT TOP (1) 
    FORMAT(
        CASE 
            WHEN ctcDtAtu IS NULL THEN ctcDtCad 
            WHEN ctcDtAtu > ctcDtCad THEN ctcDtAtu 
            ELSE ctcDtCad 
        END, 'yyyy-MM-dd-HH-mm-ss') AS data
FROM {oCnn.UseDbo}.ContatoCRM
        {(cWhere.Trim().Equals("") ? "" : $" WHERE {cWhere}")}
ORDER BY 
    CASE 
        WHEN ctcDtAtu IS NULL THEN ctcDtCad 
        WHEN ctcDtAtu > ctcDtCad THEN ctcDtAtu 
        ELSE ctcDtCad 
    END DESC;";
        using var cmd = new SqlCommand(query, oCnn.InnerConnection);
        foreach (var param in parameters)
        {
            if (!cmd.Parameters.Contains(param.ParameterName))
            {
                var newParam = new SqlParameter(param.ParameterName, param.Value)
                {
                    SqlDbType = param.SqlDbType,
                    Direction = param.Direction,
                    Size = param.Size,
                    Precision = param.Precision,
                    Scale = param.Scale
                };
                cmd.Parameters.Add(newParam);
            }
        }

        var dataFormatada = $"{await cmd.ExecuteScalarAsync()}";
        return dataFormatada;
    }
}