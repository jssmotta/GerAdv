// 100% auto-generated by Source Genesys WebApi Front & Back Creator
                     // copyright © 2000-2025 Menphis - Sistemas Inteligentes
                     // This file is part of the Source Genesys project                     
                    // Tracking: Forms.tsx.txt
'use client';
import { INENotas } from '@/app/GerAdv_TS/NENotas/Interfaces/interface.NENotas';
import { useRouter } from 'next/navigation';
import React, { useEffect, useState, useRef } from 'react';
import { useSystemContext } from '@/app/context/SystemContext';
import { getParamFromUrl } from '@/app/tools/helpers';
import '@/app/styles/CrudFormsBase.css';
import '@/app/styles/CrudFormsMobile.css';
import '@/app/styles/CrudForms.css'; // [ INDEX_SIZE ]
import ButtonSalvarCrud from '@/app/components/Cruds/ButtonSalvarCrud';
import { useIsMobile } from '@/app/context/MobileContext';
import DeleteButton from '@/app/components/Cruds/DeleteButton';
import { NENotasApi } from '../../Apis/ApiNENotas';
import { useValidationsNENotas } from '../../Hooks/hookNENotas';
import InstanciaComboBox from '@/app/GerAdv_TS/Instancia/ComboBox/Instancia';
import { InstanciaApi } from '@/app/GerAdv_TS/Instancia/Apis/ApiInstancia';
import InputName from '@/app/components/Inputs/InputName';
import InputInput from '@/app/components/Inputs/InputInput'
import InputCheckbox from '@/app/components/Inputs/InputCheckbox';
interface NENotasFormProps {
  nenotasData: INENotas;
  onChange: (e: any) => void;
  onSubmit: (e: React.FormEvent) => void;
  onClose: () => void;
  onError?: () => void;
  onReload?: () => void;
  onSuccess?: (registro?: any) => void;
}

export const NENotasForm: React.FC<NENotasFormProps> = ({
  nenotasData, 
  onChange, 
  onSubmit, 
  onClose, 
  onError, 
  onReload, 
  onSuccess, 
}) => {
const router = useRouter();
const { systemContext } = useSystemContext();
const isMobile = useIsMobile();
const dadoApi = new NENotasApi(systemContext?.Uri ?? '', systemContext?.Token ?? '');
const [isSubmitting, setIsSubmitting] = useState(false);
const initialized = useRef(false);
const validationForm = useValidationsNENotas();
const [nomeInstancia, setNomeInstancia] = useState('');
const instanciaApi = new InstanciaApi(systemContext?.Uri ?? '', systemContext?.Token ?? '');

if (getParamFromUrl('instancia') > 0) {
  if (nenotasData.id === 0 && nenotasData.instancia == 0) {
    instanciaApi
    .getById(getParamFromUrl('instancia'))
    .then((response) => {
      setNomeInstancia(response.data.nroprocesso);
    })
    .catch((error) => {
      console.log('Error unexpected');
    });

    nenotasData.instancia = getParamFromUrl('instancia');
  }
}
const addValorInstancia = (e: any) => {
  if (e?.id>0)
    onChange({ target: { name: 'instancia', value: e.id } });
  };
  const onConfirm = (e: React.FormEvent) => {
    e.preventDefault();
    if (e.stopPropagation) e.stopPropagation();

      if (!isSubmitting) {
        setIsSubmitting(true);

        try {
          onSubmit(e);
        } catch (error) {
        console.log('Erro ao submeter formulário de NENotas:');
        setIsSubmitting(false);
        if (onError) onError();
        }
      }
    };
    const handleCancel = () => {
      if (onReload) {
        onReload(); // Recarrega os dados originais
      } else {
      onClose(); // Comportamento padrão se não há callback de recarga
    }
  };

  const handleDirectSave = () => {
    if (!isSubmitting) {
      setIsSubmitting(true);

      try {
        const syntheticEvent = {
          preventDefault: () => { }, 
          target: document.getElementById(`NENotasForm-${nenotasData.id}`)
        } as unknown as React.FormEvent;

        onSubmit(syntheticEvent);
      } catch (error) {
      console.log('Erro ao salvar NENotas diretamente');
      setIsSubmitting(false);
      if (onError) onError();
      }
    }
  };
  useEffect(() => {
    const el = document.querySelector('.nameFormMobile');
    if (el) {
      el.textContent = nenotasData?.id == 0 ? 'Editar NENotas' : 'Adicionar N E Notas';
    }
  }, [nenotasData.id]);
  return (
  <>
  {!isMobile ? <style jsx global>{`
    @media (max-width: 1366px) {
      html {
        zoom: 0.8 !important;
      }
    }
    `}</style> : null}

    <div className={isMobile ? 'form-container form-container-NENotas' : 'form-container form-container-NENotas'}>

      <form className='formInputCadInc' id={`NENotasForm-${nenotasData.id}`} onSubmit={onConfirm}>
        {!isMobile && (
          <ButtonSalvarCrud isMobile={false} validationForm={validationForm} entity='NENotas' data={nenotasData} isSubmitting={isSubmitting} onClose={onClose} formId={`NENotasForm-${nenotasData.id}`} preventPropagation={true} onSave={handleDirectSave} onCancel={handleCancel} />
          )}
          <div className='grid-container'>

            <InputName
            type='text'
            id='nome'
            label='Nome'
            dataForm={nenotasData}
            className='inputIncNome'
            name='nome'
            value={nenotasData.nome}
            placeholder={`Informe Nome`}
            onChange={onChange}
            required
            />

            <InputInput
            type='text'
            maxLength={2048}
            id='apenso'
            label='Apenso'
            dataForm={nenotasData}
            className='inputIncNome'
            name='apenso'
            value={nenotasData.apenso}
            onChange={onChange}
            />


            <InputInput
            type='text'
            maxLength={2048}
            id='precatoria'
            label='Precatoria'
            dataForm={nenotasData}
            className='inputIncNome'
            name='precatoria'
            value={nenotasData.precatoria}
            onChange={onChange}
            />


            <InstanciaComboBox
            name={'instancia'}
            dataForm={nenotasData}
            value={nenotasData.instancia}
            setValue={addValorInstancia}
            label={'Instancia'}
            />
            <InputCheckbox dataForm={nenotasData} label='MovPro' name='movpro' checked={nenotasData.movpro} onChange={onChange} />
            <InputCheckbox dataForm={nenotasData} label='NotaExpedida' name='notaexpedida' checked={nenotasData.notaexpedida} onChange={onChange} />
            <InputCheckbox dataForm={nenotasData} label='Revisada' name='revisada' checked={nenotasData.revisada} onChange={onChange} />

            <InputInput
            type='text'
            maxLength={2048}
            id='processo'
            label='Processo'
            dataForm={nenotasData}
            className='inputIncNome'
            name='processo'
            value={nenotasData.processo}
            onChange={onChange}
            />


            <InputInput
            type='text'
            maxLength={2048}
            id='palavrachave'
            label='PalavraChave'
            dataForm={nenotasData}
            className='inputIncNome'
            name='palavrachave'
            value={nenotasData.palavrachave}
            onChange={onChange}
            />

          </div><div className='grid-container'>
            <InputInput
            type='text'
            maxLength={2048}
            id='data'
            label='Data'
            dataForm={nenotasData}
            className='inputIncNome'
            name='data'
            value={nenotasData.data}
            onChange={onChange}
            />


            <InputInput
            type='text'
            maxLength={2147483647}
            id='notapublicada'
            label='NotaPublicada'
            dataForm={nenotasData}
            className='inputIncNome'
            name='notapublicada'
            value={nenotasData.notapublicada}
            onChange={onChange}
            />

          </div>
        </form>


        {isMobile && (
          <ButtonSalvarCrud isMobile={true} validationForm={validationForm} entity='NENotas' data={nenotasData} isSubmitting={isSubmitting} onClose={onClose} formId={`NENotasForm-${nenotasData.id}`} preventPropagation={true} onSave={handleDirectSave} onCancel={handleCancel} />
          )}
          <DeleteButton page={'/pages/nenotas'} id={nenotasData.id} closeModel={onClose} dadoApi={dadoApi} />
        </div>
        <div className='form-spacer'></div>
        </>
      );
    };