// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
public partial class DBOperador
{
    /// <summary>
    /// Factory method async para carregar [tableMin]
    /// </summary>
    public static async Task<DBOperador> CreateAsync(int nCodigo, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        var registro = new DBOperador();
        await registro.CarregarAsync(nCodigo, oCnn, cancellationToken);
        return registro;
    }

    /// <summary>
    /// Carregar dados async
    /// </summary>
    protected async Task CarregarAsync(int id, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        if (id.IsEmptyIDNumber() || oCnn is null)
            return;
        using var cmd = new SqlCommand($"{ConfiguracoesDBT.SQLNoCount}SELECT TOP (1) {CamposSqlX} FROM {PTabelaNome.dbo(oCnn)} WHERE [{CampoCodigo}] = @ThisIDToLoad", oCnn.InnerConnection);
        cmd.Parameters.AddWithValue("@ThisIDToLoad", id);
        using var ds = await ConfiguracoesDBT.GetDataTableAsync(cmd, CommandBehavior.SingleRow, oCnn, cancellationToken);
        if (ds is null)
        {
            throw new InvalidOperationException($"Erro ao carregar registro {this.TabelaNome}.");
        }

        if (ds?.Rows.Count > 0)
        {
            CarregarDadosBd(ds.Rows[0]);
        }
    }

#if (!NOTSTORED_Operador)
    /// <summary>
    /// Update async com timeout e cancellation
    /// </summary>
    public virtual async Task<int> UpdateAsync(MsiSqlConnection? oCnn, int insertId = 0, CancellationToken cancellationToken = default, int timeoutSeconds = 30)
    {
        var isInsert = insertId == 0 && ID == 0;
        if (!isInsert && !HasAnyFieldChanged())
            return 0;
        if (oCnn is null)
        {
#if DEBUG
            PTabelaNome.PopupBox("oCnn is null - UpdateAsync()");
#endif
            return 0;
        }

        try
        {
            var updateTool = new DBToolWTable32Async(PTabelaNome, CampoCodigo, ID == 0)
            {
                IsMachineCode = true,
                Identity = this.IdIsIdentity()
            };
            updateTool.Where = isInsert ? string.Empty : $"{CampoCodigo}={ID}";
            ConfigureUpdateFields(updateTool);
            ConfigureAuditorFields(updateTool);
            if (insertId != 0)
            {
                return await GravaNewIdAsync(updateTool, insertId, oCnn, cancellationToken);
            }

            var result = await updateTool.RecUpdateAsync(oCnn, cancellationToken);
            if (updateTool.Insert && result == "OK")
            {
                ID = updateTool.GetCodigo();
                if (ID == 0)
                {
                    Error = -2;
                    ErrorDescription = "O registro não pode ser incluído, tente mais tarde.";
                    return Error;
                }
            }

            return result == "OK" ? 0 : -1;
        }
        catch (OperationCanceledException)
        {
            throw;
        }
        catch (Exception ex)
        {
            Error = -1;
            ErrorDescription = ex.Message;
            throw new InvalidOperationException($"Factory error");
        }
    }

#endif
    /// <summary>
    /// Verificar se existe async
    /// </summary>
    public static async Task<bool> ExisteAsync(int id, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        if (oCnn is null || id <= 0)
            return false;
        var existe = await ConfiguracoesDBT.GetScalarAsync<int?>($"SELECT 1 FROM {PTabelaNome.dbo(oCnn)} WHERE {CampoCodigo} = {id}", oCnn, cancellationToken);
        return existe.HasValue;
    }

    /// <summary>
    /// Delete async
    /// </summary>
    /// <param name = "operadorId">For future Audity</param>
    /// <param name = "id"></param>
    /// <param name = "oCnn"></param>
    /// <param name = "cancellationToken"></param>
    /// <returns></returns>
    /// <exception cref = "InvalidOperationException"></exception>
    public static async Task<bool> DeleteRecordAsync(int operadorId, int id, MsiSqlConnection? oCnn, CancellationToken cancellationToken = default)
    {
        if (oCnn is null || id <= 0)
            return false;
        var sql = $"DELETE FROM {PTabelaNome.dbo(oCnn)} WHERE {CampoCodigo} = @Id";
        try
        {
            using var cmd = new SqlCommand(sql, oCnn.InnerConnection);
            cmd.Parameters.AddWithValue("@Id", id);
            var rowsAffected = await cmd.ExecuteNonQueryAsync(cancellationToken);
            return rowsAffected > 0;
        }
        catch (SqlException ex)when (ex.Number == 547)
        {
            throw new InvalidOperationException("Este registro não pode ser excluído, pois está vinculado a outros registros.");
        }
    }

#if (!NOTSTORED_Operador)
    // Helper methods
    private bool HasAnyFieldChanged() => pFldFEMail || pFldFPasta || pFldFTelefonista || pFldFMaster || pFldFNome || pFldFNick || pFldFRamal || pFldFCadID || pFldFCadCod || pFldFExcluido || pFldFSituacao || pFldFComputador || pFldFMinhaDescricao || pFldFUltimoLogoff || pFldFEMailNet || pFldFOnlineIP || pFldFOnLine || pFldFSysOp || pFldFStatusId || pFldFStatusMessage || pFldFIsFinanceiro || pFldFGUID || pFldFTop || pFldFSexo || pFldFBasico || pFldFExterno || pFldFSenha256 || pFldFEMailConfirmado || pFldFDataLimiteReset || pFldFSuporteSenha256 || pFldFSuporteMaxAge || pFldFSuporteNomeSolicitante || pFldFSuporteUltimoAcesso || pFldFSuporteIpUltimoAcesso;
    private void ConfigureUpdateFields(DBToolWTable32Async updateTool)
    {
        if (pFldFEMail)
            updateTool.Fields(DBOperadorDicInfo.EMail, m_FEMail, ETiposCampos.FString);
        if (pFldFPasta)
            updateTool.Fields(DBOperadorDicInfo.Pasta, m_FPasta, ETiposCampos.FString);
        if (pFldFTelefonista || updateTool.Insert)
            updateTool.Fields(DBOperadorDicInfo.Telefonista, m_FTelefonista, ETiposCampos.FBoolean);
        if (pFldFMaster || updateTool.Insert)
            updateTool.Fields(DBOperadorDicInfo.Master, m_FMaster, ETiposCampos.FBoolean);
        if (pFldFNome)
            updateTool.Fields(DBOperadorDicInfo.Nome, m_FNome, ETiposCampos.FString);
        if (pFldFNick)
            updateTool.Fields(DBOperadorDicInfo.Nick, m_FNick, ETiposCampos.FString);
        if (pFldFRamal)
            updateTool.Fields(DBOperadorDicInfo.Ramal, m_FRamal, ETiposCampos.FString);
        if (pFldFCadID)
            updateTool.Fields(DBOperadorDicInfo.CadID, m_FCadID, ETiposCampos.FNumber);
        if (pFldFCadCod)
            updateTool.Fields(DBOperadorDicInfo.CadCod, m_FCadCod, ETiposCampos.FNumber);
        if (pFldFExcluido || updateTool.Insert)
            updateTool.Fields(DBOperadorDicInfo.Excluido, m_FExcluido, ETiposCampos.FBoolean);
        if (pFldFSituacao || updateTool.Insert)
            updateTool.Fields(DBOperadorDicInfo.Situacao, m_FSituacao, ETiposCampos.FBoolean);
        if (pFldFComputador)
            updateTool.Fields(DBOperadorDicInfo.Computador, m_FComputador, ETiposCampos.FNumber);
        if (pFldFMinhaDescricao)
            updateTool.Fields(DBOperadorDicInfo.MinhaDescricao, m_FMinhaDescricao, ETiposCampos.FString);
        if (pFldFUltimoLogoff)
            updateTool.Fields(DBOperadorDicInfo.UltimoLogoff, m_FUltimoLogoff, ETiposCampos.FDate);
        if (pFldFEMailNet)
            updateTool.Fields(DBOperadorDicInfo.EMailNet, m_FEMailNet, ETiposCampos.FString);
        if (pFldFOnlineIP)
            updateTool.Fields(DBOperadorDicInfo.OnlineIP, m_FOnlineIP, ETiposCampos.FString);
        if (pFldFOnLine || updateTool.Insert)
            updateTool.Fields(DBOperadorDicInfo.OnLine, m_FOnLine, ETiposCampos.FBoolean);
        if (pFldFSysOp || updateTool.Insert)
            updateTool.Fields(DBOperadorDicInfo.SysOp, m_FSysOp, ETiposCampos.FBoolean);
        if (pFldFStatusId)
            updateTool.Fields(DBOperadorDicInfo.StatusId, m_FStatusId, ETiposCampos.FNumber);
        if (pFldFStatusMessage)
            updateTool.Fields(DBOperadorDicInfo.StatusMessage, m_FStatusMessage, ETiposCampos.FString);
        if (pFldFIsFinanceiro || updateTool.Insert)
            updateTool.Fields(DBOperadorDicInfo.IsFinanceiro, m_FIsFinanceiro, ETiposCampos.FBoolean);
        if (pFldFGUID)
            updateTool.Fields(DBOperadorDicInfo.GUID, m_FGUID, ETiposCampos.FString);
        if (pFldFTop || updateTool.Insert)
            updateTool.Fields(DBOperadorDicInfo.Top, m_FTop, ETiposCampos.FBoolean);
        if (pFldFSexo || updateTool.Insert)
            updateTool.Fields(DBOperadorDicInfo.Sexo, m_FSexo, ETiposCampos.FBoolean);
        if (pFldFBasico || updateTool.Insert)
            updateTool.Fields(DBOperadorDicInfo.Basico, m_FBasico, ETiposCampos.FBoolean);
        if (pFldFExterno || updateTool.Insert)
            updateTool.Fields(DBOperadorDicInfo.Externo, m_FExterno, ETiposCampos.FBoolean);
        if (pFldFSenha256)
            updateTool.Fields(DBOperadorDicInfo.Senha256, m_FSenha256, ETiposCampos.FString);
        if (pFldFEMailConfirmado || updateTool.Insert)
            updateTool.Fields(DBOperadorDicInfo.EMailConfirmado, m_FEMailConfirmado, ETiposCampos.FBoolean);
        if (pFldFDataLimiteReset)
            updateTool.Fields(DBOperadorDicInfo.DataLimiteReset, m_FDataLimiteReset, ETiposCampos.FDate);
        if (pFldFSuporteSenha256)
            updateTool.Fields(DBOperadorDicInfo.SuporteSenha256, m_FSuporteSenha256, ETiposCampos.FString);
        if (pFldFSuporteMaxAge)
            updateTool.Fields(DBOperadorDicInfo.SuporteMaxAge, m_FSuporteMaxAge, ETiposCampos.FDate);
        if (pFldFSuporteNomeSolicitante)
            updateTool.Fields(DBOperadorDicInfo.SuporteNomeSolicitante, m_FSuporteNomeSolicitante, ETiposCampos.FString);
        if (pFldFSuporteUltimoAcesso)
            updateTool.Fields(DBOperadorDicInfo.SuporteUltimoAcesso, m_FSuporteUltimoAcesso, ETiposCampos.FDate);
        if (pFldFSuporteIpUltimoAcesso)
            updateTool.Fields(DBOperadorDicInfo.SuporteIpUltimoAcesso, m_FSuporteIpUltimoAcesso, ETiposCampos.FString);
    }

#endif
#if (!NOTSTORED_Operador)
    private void ConfigureAuditorFields(DBToolWTable32Async updateTool)
    {
        // Tracking: CodeAuditor(202508121515)
        var isInsert = ID.IsEmptyIDNumber();
        if (m_AuditorQuem == 0)
            AuditorQuem = 1;
        if (isInsert)
            updateTool.Fields(DBOperadorDicInfo.QuemCad, AuditorQuem, ETiposCampos.FNumber);
        if (isInsert)
            updateTool.Fields(DBOperadorDicInfo.DtCad, DevourerOne.DateTimeUtc, ETiposCampos.FDate);
        if (!isInsert)
            updateTool.Fields(DBOperadorDicInfo.QuemAtu, AuditorQuem, ETiposCampos.FNumber);
        if (!isInsert)
            updateTool.Fields(DBOperadorDicInfo.DtAtu, DevourerOne.DateTimeUtc, ETiposCampos.FDate);
        updateTool.Fields(DBOperadorDicInfo.Visto, false, ETiposCampos.FBoolean);
        if (string.IsNullOrWhiteSpace(m_FGUID))
        {
            this.FGUID = Guid.NewGuid().ToString();
        }
    }

    private async Task<int> GravaNewIdAsync(DBToolWTable32Async updateTool, int insertId, MsiSqlConnection oCnn, CancellationToken cancellationToken)
    {
        ID = insertId;
        updateTool.Fields(CampoCodigo, insertId, ETiposCampos.FNumber);
        var result = await updateTool.RecUpdateAsync(oCnn, cancellationToken, true);
        return result == "OK" ? 0 : -3;
    }
#endif
}