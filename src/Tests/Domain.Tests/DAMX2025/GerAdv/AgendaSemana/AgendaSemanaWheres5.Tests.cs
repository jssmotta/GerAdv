// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests.Wheres;
public class AgendaSemanaWhereTests : IDisposable
{
#region Test Setup and Dependencies
    private readonly Mock<IFAgendaSemanaFactory> _mockAgendaSemanaFactory;
    private readonly Mock<FAgendaSemana> _mockFAgendaSemana;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly AgendaSemanaWhere _agendasemanaWhere;
    public AgendaSemanaWhereTests()
    {
        _mockAgendaSemanaFactory = new Mock<IFAgendaSemanaFactory>();
        _mockFAgendaSemana = new Mock<FAgendaSemana>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _agendasemanaWhere = new AgendaSemanaWhere(_mockAgendaSemanaFactory.Object);
    }

    public void Dispose()
    {
        _mockAgendaSemanaFactory?.Reset();
        _mockFAgendaSemana?.Reset();
        _mockConnection?.Reset();
        GC.SuppressFinalize(this);
    }

#endregion
#region Test Data Setup Helpers
    private static List<SqlParameter> CreateTestParameters()
    {
        return new List<SqlParameter>
        {
            new SqlParameter("@Id", 1),
            new SqlParameter("@[FIELD_NAME2]", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
        };
    }

    private void SetupMockFAgendaSemana(string? ParaNome = "João", string? Data = "27/05/2022", int? Funcionario = 1, int? Advogado = 1, string? Hora = "27/05/2022", int? TipoCompromisso = 1, string? Compromisso = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", bool? Concluido = false, bool? Liberado = true, bool? Importante = false, string? HoraFinal = "27/05/2022", string? Nome = "João", int? Cliente = 1, string? NomeCliente = "João", string? Tipo = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
    {
        _mockFAgendaSemana.Setup(f => f.FParaNome).Returns(ParaNome ?? string.Empty);
        _mockFAgendaSemana.Setup(f => f.FData).Returns(Data ?? string.Empty);
        _mockFAgendaSemana.Setup(f => f.FFuncionario).Returns(Funcionario ?? 0);
        _mockFAgendaSemana.Setup(f => f.FAdvogado).Returns(Advogado ?? 0);
        _mockFAgendaSemana.Setup(f => f.FHora).Returns(Hora ?? string.Empty);
        _mockFAgendaSemana.Setup(f => f.FTipoCompromisso).Returns(TipoCompromisso ?? 0);
        _mockFAgendaSemana.Setup(f => f.FCompromisso).Returns(Compromisso ?? string.Empty);
        _mockFAgendaSemana.Setup(f => f.FConcluido).Returns(Concluido ?? false);
        _mockFAgendaSemana.Setup(f => f.FLiberado).Returns(Liberado ?? false);
        _mockFAgendaSemana.Setup(f => f.FImportante).Returns(Importante ?? false);
        _mockFAgendaSemana.Setup(f => f.FHoraFinal).Returns(HoraFinal ?? string.Empty);
        _mockFAgendaSemana.Setup(f => f.FNome).Returns(Nome ?? string.Empty);
        _mockFAgendaSemana.Setup(f => f.FCliente).Returns(Cliente ?? 0);
        _mockFAgendaSemana.Setup(f => f.FNomeCliente).Returns(NomeCliente ?? string.Empty);
        _mockFAgendaSemana.Setup(f => f.FTipo).Returns(Tipo ?? string.Empty);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Arrange
        var mockFactory = new Mock<IFAgendaSemanaFactory>();
        // Act
        var agendasemanaWhere = new AgendaSemanaWhere(mockFactory.Object);
        // Assert
        agendasemanaWhere.Should().NotBeNull();
        agendasemanaWhere.Should().BeAssignableTo<IAgendaSemanaWhere>();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Arrange
        IFAgendaSemanaFactory nullFactory = null !;
        // Act & Assert
        Assert.Throws<ArgumentNullException>(() => new AgendaSemanaWhere(nullFactory));
    }

#endregion
#region Read Method - Happy Path Tests
    [Fact]
    public void Read_WithValidParameters_ShouldReturnAgendaSemanaResponse()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFAgendaSemana();
        _mockAgendaSemanaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAgendaSemana.Object);
        // Act
        var result = _agendasemanaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        result.ParaNome.Should().Be("João");
        result.Data.Should().Be("27/05/2022");
        result.Funcionario.Should().Be(1);
        result.Advogado.Should().Be(1);
        result.Hora.Should().Be("27/05/2022");
        result.TipoCompromisso.Should().Be(1);
        result.Compromisso.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.Concluido.Should().Be(false);
        result.Liberado.Should().Be(true);
        result.Importante.Should().Be(false);
        result.HoraFinal.Should().Be("27/05/2022");
        result.Nome.Should().Be("João");
        result.Cliente.Should().Be(1);
        result.NomeCliente.Should().Be("João");
        result.Tipo.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

#endregion
#region Read Method - Null Value Handling Tests
    [Fact]
    public void Read_WithNullStringFields_ShouldReturnEmptyStrings()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFAgendaSemana(ParaNome: null, Data: null, Funcionario: null, Advogado: null, Hora: null, TipoCompromisso: null, Compromisso: null, Concluido: null, Liberado: null, Importante: null, HoraFinal: null, Nome: null, Cliente: null, NomeCliente: null, Tipo: null);
        _mockAgendaSemanaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAgendaSemana.Object);
        // Act
        var result = _agendasemanaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.ParaNome.Should().Be(string.Empty);
        result.Data.Should().Be(string.Empty);
        result.Funcionario.Should().Be(0);
        result.Advogado.Should().Be(0);
        result.Hora.Should().Be(string.Empty);
        result.TipoCompromisso.Should().Be(0);
        result.Compromisso.Should().Be(string.Empty);
        result.Concluido.Should().Be(false);
        result.Liberado.Should().Be(false);
        result.Importante.Should().Be(false);
        result.HoraFinal.Should().Be(string.Empty);
        result.Nome.Should().Be(string.Empty);
        result.Cliente.Should().Be(0);
        result.NomeCliente.Should().Be(string.Empty);
        result.Tipo.Should().Be(string.Empty);
    }

#endregion
#region Read Method - Date Parsing Edge Cases
#endregion
#region Read Method - Parameter Validation Tests
    [Fact]
    public void Read_WithNullWhere_ShouldCallFactoryWithNullWhere()
    {
        // Arrange
        string? where = null;
        var parameters = CreateTestParameters();
        SetupMockFAgendaSemana();
        _mockAgendaSemanaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, "")).Returns(_mockFAgendaSemana.Object);
        // Act
        var result = _agendasemanaWhere.Read(where!, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockAgendaSemanaFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where!, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyWhere_ShouldCallFactoryWithEmptyWhere()
    {
        // Arrange
        var where = string.Empty;
        var parameters = CreateTestParameters();
        SetupMockFAgendaSemana();
        _mockAgendaSemanaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAgendaSemana.Object);
        // Act
        var result = _agendasemanaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockAgendaSemanaFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

    [Fact]
    public void Read_WithEmptyParametersList_ShouldCallFactoryWithEmptyList()
    {
        // Arrange
        var where = "1=1";
        var parameters = new List<SqlParameter>();
        SetupMockFAgendaSemana();
        _mockAgendaSemanaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAgendaSemana.Object);
        // Act
        var result = _agendasemanaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        result.Should().NotBeNull();
        _mockAgendaSemanaFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Factory Interaction Tests
    [Fact]
    public void Read_ShouldCallFactoryCreateFromParametersOnce()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        SetupMockFAgendaSemana();
        _mockAgendaSemanaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAgendaSemana.Object);
        // Act
        _agendasemanaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockAgendaSemanaFactory.Verify(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, ""), Times.Once);
    }

#endregion
#region Read Method - Resource Management Tests
    [Fact]
    public void Read_ShouldDisposeFAgendaSemanaInstance()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        _mockFAgendaSemana.Setup(f => f.Dispose());
        SetupMockFAgendaSemana();
        _mockAgendaSemanaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAgendaSemana.Object);
        // Act
        _agendasemanaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockFAgendaSemana.Verify(f => f.Dispose(), Times.Once);
    }

#endregion
#region Read Method - Exception Handling Tests
    [Fact]
    public void Read_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = CreateTestParameters();
        var expectedException = new InvalidOperationException("Database connection failed");
        _mockAgendaSemanaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Throws(expectedException);
        // Act & Assert
        var exception = Assert.Throws<InvalidOperationException>(() => _agendasemanaWhere.Read(where, parameters, _mockConnection.Object));
        exception.Message.Should().Be("Database connection failed");
    }

#endregion
#region Integration Tests
    [Fact]
    public void Read_WithCompleteRealWorldScenario_ShouldMapAllFieldsCorrectly()
    {
        // Arrange
        var where = "Id = @Id";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Id", 123),
        };
        SetupMockFAgendaSemana(ParaNome: "João", Data: "27/05/2022", Funcionario: 1, Advogado: 1, Hora: "27/05/2022", TipoCompromisso: 1, Compromisso: "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", Concluido: false, Liberado: true, Importante: false, HoraFinal: "27/05/2022", Nome: "João", Cliente: 1, NomeCliente: "João", Tipo: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
        _mockAgendaSemanaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAgendaSemana.Object);
        // Act
        var result = _agendasemanaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert - Verify all properties are correctly mapped
        result.Should().NotBeNull();
        // Basic properties        
        result.ParaNome.Should().Be("João");
        result.Data.Should().Be("27/05/2022");
        result.Funcionario.Should().Be(1);
        result.Advogado.Should().Be(1);
        result.Hora.Should().Be("27/05/2022");
        result.TipoCompromisso.Should().Be(1);
        result.Compromisso.Should().Be("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        result.Concluido.Should().Be(false);
        result.Liberado.Should().Be(true);
        result.Importante.Should().Be(false);
        result.HoraFinal.Should().Be("27/05/2022");
        result.Nome.Should().Be("João");
        result.Cliente.Should().Be(1);
        result.NomeCliente.Should().Be("João");
        result.Tipo.Should().Be("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
    }

    [Fact]
    public void Read_ShouldPassCorrectParametersToFactory()
    {
        // Arrange
        var where = "ParaNome = @{DBAgendaSemanaDicInfo.CampoNome}";
        var parameters = new List<SqlParameter>
        {
            new SqlParameter($"@{DBAgendaSemanaDicInfo.CampoNome}", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"),
        };
        SetupMockFAgendaSemana();
        _mockAgendaSemanaFactory.Setup(f => f.CreateFromParameters(parameters, _mockConnection.Object, "", "", where, "")).Returns(_mockFAgendaSemana.Object);
        // Act
        _agendasemanaWhere.Read(where, parameters, _mockConnection.Object);
        // Assert
        _mockAgendaSemanaFactory.Verify(f => f.CreateFromParameters(It.Is<List<SqlParameter>>(p => p.Count == 1 && p.Any(param => param.ParameterName == $"@{DBAgendaSemanaDicInfo.CampoNome}")), _mockConnection.Object, "", "", where, ""), Times.Once);
    }
#region DateTime Tests
#endregion
#endregion
}