// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class ClientesValidationTests : IDisposable
{
    private readonly ClientesValidation _validation;
    private readonly Mock<IClientesService> _mockClientesService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<ICidadeReader> _mockCidadeReader;
    private readonly Mock<IRegimeTributacaoReader> _mockRegimeTributacaoReader;
    private readonly Mock<IEnquadramentoEmpresaReader> _mockEnquadramentoEmpresaReader;
    private readonly ClientesService _service;
    private readonly string _validUri = "test-uri";
    public ClientesValidationTests()
    {
        _validation = new ClientesValidation();
        _mockClientesService = new Mock<IClientesService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockCidadeReader = new Mock<ICidadeReader>();
        _mockRegimeTributacaoReader = new Mock<IRegimeTributacaoReader>();
        _mockEnquadramentoEmpresaReader = new Mock<IEnquadramentoEmpresaReader>();
    }

#region Class Structure Tests
    [Fact]
    public void ClientesValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IClientesValidation>();
    }

    [Fact]
    public void ClientesValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(ClientesValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void ClientesValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(ClientesValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private static Models.Clientes CreateValidClientes()
    {
        return new Models.Clientes
        {
            Id = 1,
            Empresa = 0,
            Icone = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            NomeMae = "João",
            RGDataExp = "24/04/1975",
            Inativo = false,
            QuemIndicou = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            SendEMail = true,
            Nome = "João",
            Adv = 0,
            IDRep = 0,
            Juridica = false,
            NomeFantasia = "João",
            Class = "A",
            Tipo = true,
            DtNasc = "24/04/1975",
            InscEst = "AAAAAAAAAAAAA",
            Qualificacao = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Sexo = false,
            Idade = 0,
            CNPJ = "93016944000138",
            CPF = "544.506.718-13",
            RG = "12.345.678-9",
            TipoCaptacao = true,
            Observacao = "Observação teste",
            Endereco = "Rua das Flores, 123",
            Bairro = "Centro",
            Cidade = 0,
            CEP = "01234-567",
            Fax = "(11) 88888-9999",
            Fone = "(11) 99999-9999",
            Data = "27/05/2022",
            HomePage = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            EMail = "test@email.com",
            Obito = false,
            NomePai = "João",
            RGOExpeditor = "12.345.678-9",
            RegimeTributacao = 0,
            EnquadramentoEmpresa = 0,
            ReportECBOnly = true,
            ProBono = false,
            CNH = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            PessoaContato = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockClientesService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterClientes>(), It.IsAny<string>())).ReturnsAsync([]);
        // Setup other mocks but don't override the Clientess service mock
        _ = _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new CidadeResponse { Id = id }));
        _ = _mockRegimeTributacaoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new RegimeTributacaoResponse { Id = id }));
        _ = _mockEnquadramentoEmpresaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new EnquadramentoEmpresaResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockClientesService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterClientes>(), It.IsAny<string>())).ReturnsAsync([]);
        // Setup other mocks but don't override the Clientess service mock
        _ = _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new CidadeResponse { Id = 0 }));
        _ = _mockRegimeTributacaoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new RegimeTributacaoResponse { Id = 0 }));
        _ = _mockEnquadramentoEmpresaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new EnquadramentoEmpresaResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var clientes = new Models.Clientes
        {
            Id = 1,
            Icone = null,
            NomeMae = null,
            RGDataExp = null,
            Inativo = false,
            QuemIndicou = null,
            SendEMail = true,
            Nome = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Juridica = false,
            NomeFantasia = null,
            Class = null,
            Tipo = true,
            DtNasc = null,
            InscEst = null,
            Qualificacao = null,
            Sexo = false,
            CNPJ = null,
            CPF = null,
            RG = null,
            TipoCaptacao = true,
            Observacao = null,
            Endereco = null,
            Bairro = null,
            CEP = null,
            Fax = null,
            Fone = null,
            Data = null,
            HomePage = null,
            EMail = null,
            NomePai = null,
            RGOExpeditor = null,
            CNH = null,
            PessoaContato = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region ValidateReg Required Nome Method Tests 
    [Fact]
    public async Task ValidateReg_WithEmptyNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.Nome = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.Nome = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataNome_ShouldReturnTrue()
    {
        // Arrange
        var clientes = CreateValidClientes();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceNome_ShouldThrowSGValidationException()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.Nome = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
#region CPF Validation Tests
    [Fact]
    public async Task ValidateReg_WithDuplicateCPF_ShouldThrowSGValidationException()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.CPF = "81833354036";
        clientes.Id = 1;
        var existingClientes = new ClientesResponseAll
        {
            Id = 2,
            Nome = "Existing User",
            CPF = "81833354036"
        };
        // Setup the Filter method with any filter to see if it's being called
        _mockClientesService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterClientes>(), It.IsAny<string>())).ReturnsAsync(new List<ClientesResponseAll> { existingClientes });
        // Setup other mocks but don't override the Clientess service mock
        _ = _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new CidadeResponse { Id = id }));
        _ = _mockRegimeTributacaoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new RegimeTributacaoResponse { Id = id }));
        _ = _mockEnquadramentoEmpresaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new EnquadramentoEmpresaResponse { Id = id }));
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("já cadastrado");
        // Verify that the Filter method was called
        _mockClientesService.Verify(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterClientes>(), It.IsAny<string>()), Times.AtLeastOnce);
    }

    [Fact]
    public async Task ValidateReg_WithDuplicateCPF_NoName_ShouldThrowSGValidationException()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.CPF = "34666807004";
        clientes.Id = 1;
        var existingClientes = new ClientesResponseAll
        {
            Id = 2,
            Nome = "João",
            CPF = "34666807004"
        };
        _mockClientesService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterClientes>(), It.IsAny<string>())).ReturnsAsync(new List<ClientesResponseAll> { existingClientes });
        // Setup other mocks but don't override the Clientess service mock
        _ = _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new CidadeResponse { Id = id }));
        _ = _mockRegimeTributacaoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new RegimeTributacaoResponse { Id = id }));
        _ = _mockEnquadramentoEmpresaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new EnquadramentoEmpresaResponse { Id = id }));
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("já cadastrado");
        exception.Message.Should().Contain("(");
    }

    [Fact]
    public async Task ValidateReg_WithSameCPF_SameId_ShouldPass()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.CPF = "67290209117";
        clientes.Id = 1;
        var existingClientes = new ClientesResponseAll
        {
            Id = 1, // Same ID
            Nome = "Same User",
            CPF = "67290209117"
        };
        _mockClientesService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterClientes>(), It.IsAny<string>())).ReturnsAsync(new List<ClientesResponseAll> { existingClientes });
        // Setup other mocks but don't override the Clientess service mock
        _ = _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new CidadeResponse { Id = id }));
        _ = _mockRegimeTributacaoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new RegimeTributacaoResponse { Id = id }));
        _ = _mockEnquadramentoEmpresaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new EnquadramentoEmpresaResponse { Id = id }));
        // Act
        var result = await _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithEmptyCPF_ShouldPass()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.CPF = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullCPF_ShouldPass()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.CPF = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region CNPJ Validation Tests
    [Fact]
    public async Task ValidateReg_WithDuplicateCNPJ_ShouldThrowSGValidationException()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.CNPJ = "90724474000179";
        clientes.Id = 1;
        var existingClientes = new ClientesResponseAll
        {
            Id = 2,
            Nome = "Existing User",
            CNPJ = "90724474000179"
        };
        // Setup the Filter method with any filter to see if it's being called
        _mockClientesService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterClientes>(), It.IsAny<string>())).ReturnsAsync(new List<ClientesResponseAll> { existingClientes });
        // Setup other mocks but don't override the Clientess service mock
        _ = _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new CidadeResponse { Id = id }));
        _ = _mockRegimeTributacaoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new RegimeTributacaoResponse { Id = id }));
        _ = _mockEnquadramentoEmpresaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new EnquadramentoEmpresaResponse { Id = id }));
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("já cadastrado");
        // Verify that the Filter method was called
        _mockClientesService.Verify(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterClientes>(), It.IsAny<string>()), Times.AtLeastOnce);
    }

    [Fact]
    public async Task ValidateReg_WithDuplicateCNPJ_NoName_ShouldThrowSGValidationException()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.CNPJ = "84590488000144";
        clientes.Id = 1;
        var existingClientes = new ClientesResponseAll
        {
            Id = 2,
            Nome = "João",
            CNPJ = "84590488000144"
        };
        _mockClientesService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterClientes>(), It.IsAny<string>())).ReturnsAsync(new List<ClientesResponseAll> { existingClientes });
        // Setup other mocks but don't override the Clientess service mock
        _ = _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new CidadeResponse { Id = id }));
        _ = _mockRegimeTributacaoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new RegimeTributacaoResponse { Id = id }));
        _ = _mockEnquadramentoEmpresaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new EnquadramentoEmpresaResponse { Id = id }));
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("já cadastrado");
    }

    [Fact]
    public async Task ValidateReg_WithSameCNPJ_SameId_ShouldPass()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.CNPJ = "34692293000137";
        clientes.Id = 1;
        var existingClientes = new ClientesResponseAll
        {
            Id = 1, // Same ID
            Nome = "Same User",
            CNPJ = "34692293000137"
        };
        _mockClientesService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterClientes>(), It.IsAny<string>())).ReturnsAsync(new List<ClientesResponseAll> { existingClientes });
        // Setup other mocks but don't override the Clientess service mock
        _ = _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new CidadeResponse { Id = id }));
        _ = _mockRegimeTributacaoReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new RegimeTributacaoResponse { Id = id }));
        _ = _mockEnquadramentoEmpresaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>(valueFunction: static (id, conn) => Task.FromResult(new EnquadramentoEmpresaResponse { Id = id }));
        // Act
        var result = await _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithEmptyCNPJ_ShouldPass()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.CNPJ = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullCNPJ_ShouldPass()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.CNPJ = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region EMail Validation Tests
    [Fact]
    public async Task ValidateReg_WithInvalidEMail_ShouldThrowSGValidationException()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.EMail = "invalid-email";
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("formato inválido.");
    }

    [Fact]
    public async Task ValidateReg_WithValidEMail_ShouldPass()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.EMail = "menphis@example.com";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithEmptyEMail_ShouldPass()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.EMail = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region RGDataExp Validation Tests
    [Theory]
    [InlineData("01/01/1899")]
    [InlineData("31/12/1899")]
    public async Task ValidateReg_WithRGDataExpBeforeMinDate_ShouldThrowSGValidationException(string invalidDate)
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.RGDataExp = invalidDate;
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("01/01/1900.");
    }

    [Fact]
    public async Task ValidateReg_WithValidRGDataExp_ShouldPass()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.RGDataExp = "01/01/1990";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullRGDataExp_ShouldPass()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.RGDataExp = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithInvalidDateRGDataExpFormat_ShouldPass()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.RGDataExp = "invalid-date";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue(); // Invalid format is ignored, not validated
    }

    [Fact]
    public async Task ValidateReg_WithEmptyRGDataExp_ShouldPass()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.RGDataExp = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region DtNasc Validation Tests
    [Theory]
    [InlineData("01/01/1899")]
    [InlineData("31/12/1899")]
    public async Task ValidateReg_WithDtNascBeforeMinDate_ShouldThrowSGValidationException(string invalidDate)
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.DtNasc = invalidDate;
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("01/01/1900.");
    }

    [Fact]
    public async Task ValidateReg_WithValidDtNasc_ShouldPass()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.DtNasc = "01/01/1990";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithNullDtNasc_ShouldPass()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.DtNasc = null;
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithInvalidDateDtNascFormat_ShouldPass()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.DtNasc = "invalid-date";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue(); // Invalid format is ignored, not validated
    }

    [Fact]
    public async Task ValidateReg_WithEmptyDtNasc_ShouldPass()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.DtNasc = "";
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateRegDtNasc_WithBoundaryValues_ShouldPass()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.DtNasc = "01/01/1900"; // Exactly on the boundary
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithTodayDateDtNasc_ShouldPass()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.DtNasc = DateTime.Now.ToString("dd/MM/yyyy");
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithTomorrowDateDtNasc_ShouldNotPass()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.DtNasc = DateTime.Now.AddDays(1).ToString("dd/MM/yyyy");
        SetupValidMocks();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não pode ser uma data futura.");
    }

#region Foreign Key Validation Tests - Cidade
    [Fact]
    public async Task ValidateReg_WithInvalidCidade_ShouldThrowSGValidationException()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.Cidade = 999;
        _mockCidadeReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.CidadeResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedCidadeId_ShouldThrowSGValidationException()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.Cidade = 999;
        var reg888 = new Models.Response.CidadeResponse
        {
            Id = 888
        }; // Different ID
        _mockCidadeReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidCidade_ShouldPass()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.Cidade = 123;
        var reg123 = new Models.Response.CidadeResponse
        {
            Id = 123
        };
        _mockCidadeReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyCidade_ShouldPass()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.Cidade = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockCidadeReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - RegimeTributacao
    [Fact]
    public async Task ValidateReg_WithInvalidRegimeTributacao_ShouldThrowSGValidationException()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.RegimeTributacao = 999;
        _mockRegimeTributacaoReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.RegimeTributacaoResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedRegimeTributacaoId_ShouldThrowSGValidationException()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.RegimeTributacao = 999;
        var reg888 = new Models.Response.RegimeTributacaoResponse
        {
            Id = 888
        }; // Different ID
        _mockRegimeTributacaoReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidRegimeTributacao_ShouldPass()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.RegimeTributacao = 123;
        var reg123 = new Models.Response.RegimeTributacaoResponse
        {
            Id = 123
        };
        _mockRegimeTributacaoReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyRegimeTributacao_ShouldPass()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.RegimeTributacao = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockRegimeTributacaoReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

#region Foreign Key Validation Tests - EnquadramentoEmpresa
    [Fact]
    public async Task ValidateReg_WithInvalidEnquadramentoEmpresa_ShouldThrowSGValidationException()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.EnquadramentoEmpresa = 999;
        _mockEnquadramentoEmpresaReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.EnquadramentoEmpresaResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedEnquadramentoEmpresaId_ShouldThrowSGValidationException()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.EnquadramentoEmpresa = 999;
        var reg888 = new Models.Response.EnquadramentoEmpresaResponse
        {
            Id = 888
        }; // Different ID
        _mockEnquadramentoEmpresaReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidEnquadramentoEmpresa_ShouldPass()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.EnquadramentoEmpresa = 123;
        var reg123 = new Models.Response.EnquadramentoEmpresaResponse
        {
            Id = 123
        };
        _mockEnquadramentoEmpresaReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyEnquadramentoEmpresa_ShouldPass()
    {
        // Arrange
        var clientes = CreateValidClientes();
        clientes.EnquadramentoEmpresa = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(clientes, _mockClientesService.Object, _mockCidadeReader.Object, _mockRegimeTributacaoReader.Object, _mockEnquadramentoEmpresaReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockEnquadramentoEmpresaReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}