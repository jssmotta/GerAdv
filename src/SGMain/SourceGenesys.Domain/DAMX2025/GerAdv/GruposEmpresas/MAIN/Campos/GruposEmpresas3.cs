// 100% auto-generated by Source Genesys Core
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.SG.GerAdv;
// ReSharper disable once InconsistentNaming 1
public partial class DBGruposEmpresas
{
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool pFldFEMail, pFldFInativo, pFldFOponente, pFldFDescricao, pFldFObservacoes, pFldFCliente, pFldFGUID, pFldFIcone, pFldFDespesaUnificada;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected int m_FOponente, m_FCliente;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected string? m_FEMail, m_FDescricao, m_FObservacoes, m_FGUID, m_FIcone;
    [XmlIgnore]
    [EditorBrowsable(EditorBrowsableState.Never)]
    private protected bool m_FInativo, m_FDespesaUnificada;
    // Tracking Code: 20250503
    [StringLength(255, ErrorMessage = "A propriedade FEMail da tabela GruposEmpresas deve ter no máximo 255 caracteres.")]
    public virtual string? FEMail
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FEMail ?? string.Empty;
        set
        {
            pFldFEMail = pFldFEMail || !(m_FEMail ?? string.Empty).Equals(value);
            if (pFldFEMail)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FEMail = trimmed.Length > 255 ? trimmed.AsSpan(0, 255).ToString() : trimmed;
                if (m_FEMail.IsValidEmail())
                    return;
                throw new ArgumentException("E-mail inválido ou não informado corretamente.", nameof(value));
            }
        }
    }

    public virtual bool FInativo
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FInativo;
        set
        {
            pFldFInativo = pFldFInativo || value != m_FInativo;
            if (pFldFInativo)
                m_FInativo = value;
        }
    }

    public virtual int FOponente
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FOponente;
        set
        {
            pFldFOponente = pFldFOponente || value != m_FOponente;
            if (pFldFOponente)
                m_FOponente = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(50, ErrorMessage = "A propriedade FDescricao da tabela GruposEmpresas deve ter no máximo 50 caracteres.")]
    public virtual string? FDescricao
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDescricao ?? string.Empty;
        set
        {
            pFldFDescricao = pFldFDescricao || !(m_FDescricao ?? string.Empty).Equals(value);
            if (pFldFDescricao)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FDescricao = trimmed.Length > 50 ? trimmed.AsSpan(0, 50).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    public virtual string? FObservacoes
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FObservacoes ?? string.Empty;
        set
        {
            pFldFObservacoes = pFldFObservacoes || !(m_FObservacoes ?? string.Empty).Equals(value);
            if (pFldFObservacoes)
                m_FObservacoes = value.trim().FixAbc() ?? string.Empty;
        }
    }

    public virtual int FCliente
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FCliente;
        set
        {
            pFldFCliente = pFldFCliente || value != m_FCliente;
            if (pFldFCliente)
                m_FCliente = value;
        }
    }

    // Tracking Code: 20250503
    [StringLength(100, ErrorMessage = "A propriedade FGUID da tabela GruposEmpresas deve ter no máximo 100 caracteres.")]
    public virtual string? FGUID
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FGUID ?? string.Empty;
        set
        {
            pFldFGUID = pFldFGUID || !(m_FGUID ?? string.Empty).Equals(value);
            if (pFldFGUID)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FGUID = trimmed.Length > 100 ? trimmed.AsSpan(0, 100).ToString() : trimmed;
            }
        }
    }

    // Tracking Code: 20250503
    [StringLength(255, ErrorMessage = "A propriedade FIcone da tabela GruposEmpresas deve ter no máximo 255 caracteres.")]
    public virtual string? FIcone
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FIcone ?? string.Empty;
        set
        {
            pFldFIcone = pFldFIcone || !(m_FIcone ?? string.Empty).Equals(value);
            if (pFldFIcone)
            {
                var trimmed = value?.Trim() ?? string.Empty;
                m_FIcone = trimmed.Length > 255 ? trimmed.AsSpan(0, 255).ToString() : trimmed;
            }
        }
    }

    public virtual bool FDespesaUnificada
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => m_FDespesaUnificada;
        set
        {
            pFldFDespesaUnificada = pFldFDespesaUnificada || value != m_FDespesaUnificada;
            if (pFldFDespesaUnificada)
                m_FDespesaUnificada = value;
        }
    }

    public void SetAuditor(int usuarioId) => AuditorQuem = usuarioId;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITabelaName() => PTabelaNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoCodigo() => CampoCodigo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ICampoNome() => CampoNome;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string IPrefixo() => PTabelaPrefixo;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ITypeFieldCode() => "int";
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IdIsIdentity() => true;
#pragma warning disable CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasAuditor() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool HasNameId() => true;
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IIsStoredProcedureOrView() => false;
#pragma warning restore CA1822 // Mark members as static

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int GetID() => ID;
}