// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
using Xunit;
using FluentAssertions;
using Moq;
using System;
using System.Threading.Tasks;
using MenphisSI.GerAdv.Writers;
using MenphisSI.GerAdv.Models;

namespace MenphisSI.GerAdv.Tests.Writers;
public class OponentesRepLegalWriterTests
{
    private readonly Mock<IFOponentesRepLegalFactory> _mockOponentesRepLegalFactory;
    private readonly Mock<FOponentesRepLegal> _mockFOponentesRepLegal;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly OponentesRepLegalWriter _oponentesreplegalWriter;
    public OponentesRepLegalWriterTests()
    {
        _mockOponentesRepLegalFactory = new Mock<IFOponentesRepLegalFactory>();
        _mockFOponentesRepLegal = new Mock<FOponentesRepLegal>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _oponentesreplegalWriter = new OponentesRepLegalWriter(_mockOponentesRepLegalFactory.Object);
    }

#region WriteAsync Tests
    [Fact]
    public async Task WriteAsync_WithNewClient_ShouldCreateNewRecord()
    {
        // Arrange
        var oponentesreplegal = CreateValidOponentesRepLegalModel();
        oponentesreplegal.Id = 0; // ID vazio para novo registro
        var auditorQuem = 123;
        _mockOponentesRepLegalFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFOponentesRepLegal.Object);
        _mockFOponentesRepLegal.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _oponentesreplegalWriter.WriteAsync(oponentesreplegal, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFOponentesRepLegal.Object);
        _mockOponentesRepLegalFactory.Verify(x => x.CreateAsync(), Times.Once);
        _mockOponentesRepLegalFactory.Verify(x => x.CreateFromIdAsync(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
        _mockFOponentesRepLegal.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WithExistingClient_ShouldLoadExistingRecord()
    {
        // Arrange
        var oponentesreplegal = CreateValidOponentesRepLegalModel();
        oponentesreplegal.Id = 456; // ID existente
        var auditorQuem = 123;
        _mockOponentesRepLegalFactory.Setup(x => x.CreateFromIdAsync(oponentesreplegal.Id, _mockConnection.Object)).ReturnsAsync(_mockFOponentesRepLegal.Object);
        _mockFOponentesRepLegal.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        ;
        // Act
        var result = await _oponentesreplegalWriter.WriteAsync(oponentesreplegal, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFOponentesRepLegal.Object);
        _mockOponentesRepLegalFactory.Verify(x => x.CreateFromIdAsync(oponentesreplegal.Id, _mockConnection.Object), Times.Once);
        _mockOponentesRepLegalFactory.Verify(x => x.CreateAsync(), Times.Never);
        _mockFOponentesRepLegal.Verify(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>()), Times.Once);
    }

    [Fact]
    public async Task WriteAsync_ShouldMapAllPropertiesCorrectly()
    {
        // Arrange
        var oponentesreplegal = CreateValidOponentesRepLegalModel();
        var auditorQuem = 99;
        _mockOponentesRepLegalFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFOponentesRepLegal.Object);
        _mockFOponentesRepLegal.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ReturnsAsync(0);
        // Act
        var result = await _oponentesreplegalWriter.WriteAsync(oponentesreplegal, auditorQuem, _mockConnection.Object);
        // Assert
        result.Should().Be(_mockFOponentesRepLegal.Object);
        _mockFOponentesRepLegal.VerifySet(x => x.FNome = oponentesreplegal.Nome, Times.Once);
        _mockFOponentesRepLegal.VerifySet(x => x.FFone = oponentesreplegal.Fone, Times.Once);
        _mockFOponentesRepLegal.VerifySet(x => x.FOponente = oponentesreplegal.Oponente, Times.Once);
        _mockFOponentesRepLegal.VerifySet(x => x.FSexo = oponentesreplegal.Sexo, Times.Once);
        _mockFOponentesRepLegal.VerifySet(x => x.FCPF = It.IsAny<string>(), Times.Once); // CPF é limpo pelo ClearInputCpf()
        _mockFOponentesRepLegal.VerifySet(x => x.FRG = oponentesreplegal.RG, Times.Once);
        _mockFOponentesRepLegal.VerifySet(x => x.FEndereco = oponentesreplegal.Endereco, Times.Once);
        _mockFOponentesRepLegal.VerifySet(x => x.FBairro = oponentesreplegal.Bairro, Times.Once);
        _mockFOponentesRepLegal.VerifySet(x => x.FCEP = It.IsAny<string>(), Times.Once); // CEP é limpo pelo ClearInputCep()
        _mockFOponentesRepLegal.VerifySet(x => x.FCidade = oponentesreplegal.Cidade, Times.Once);
        _mockFOponentesRepLegal.VerifySet(x => x.FFax = oponentesreplegal.Fax, Times.Once);
        _mockFOponentesRepLegal.VerifySet(x => x.FEMail = oponentesreplegal.EMail, Times.Once);
        _mockFOponentesRepLegal.VerifySet(x => x.FSite = oponentesreplegal.Site, Times.Once);
        _mockFOponentesRepLegal.VerifySet(x => x.FObservacao = oponentesreplegal.Observacao, Times.Once);
        _mockFOponentesRepLegal.VerifySet(x => x.AuditorQuem = auditorQuem, Times.Once);
    }

    [Fact]
    public async Task WriteAsync_WhenFactoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var oponentesreplegal = CreateValidOponentesRepLegalModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockOponentesRepLegalFactory.Setup(x => x.CreateAsync()).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _oponentesreplegalWriter.WriteAsync(oponentesreplegal, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

    [Fact]
    public async Task WriteAsync_WhenUpdateAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var oponentesreplegal = CreateValidOponentesRepLegalModel();
        var auditorQuem = 123;
        var expectedException = new InvalidOperationException("Factory error");
        _mockOponentesRepLegalFactory.Setup(x => x.CreateAsync()).ReturnsAsync(_mockFOponentesRepLegal.Object);
        _mockFOponentesRepLegal.Setup(x => x.UpdateAsync(It.IsAny<MsiSqlConnection>(), It.IsAny<int>(), It.IsAny<CancellationToken>(), It.IsAny<int>())).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _oponentesreplegalWriter.WriteAsync(oponentesreplegal, auditorQuem, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Delete Tests
    [Fact]
    public async Task Delete_ShouldCallFactoryDeleteAsync()
    {
        // Arrange
        var oponentesreplegalResponse = new OponentesRepLegalResponse
        {
            Id = 123
        };
        var operadorId = 456;
        _mockOponentesRepLegalFactory.Setup(x => x.DeleteAsync(operadorId, oponentesreplegalResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        await _oponentesreplegalWriter.Delete(oponentesreplegalResponse, operadorId, _mockConnection.Object);
        // Assert
        _mockOponentesRepLegalFactory.Verify(x => x.DeleteAsync(operadorId, oponentesreplegalResponse.Id, _mockConnection.Object), Times.Once);
    }

    [Fact]
    public async Task Delete_WithValidParameters_ShouldCompleteSuccessfully()
    {
        // Arrange
        var oponentesreplegalResponse = new OponentesRepLegalResponse
        {
            Id = 999
        };
        var operadorId = 111;
        _mockOponentesRepLegalFactory.Setup(x => x.DeleteAsync(operadorId, oponentesreplegalResponse.Id, _mockConnection.Object)).Returns(Task.CompletedTask);
        // Act
        Func<Task> act = async () => await _oponentesreplegalWriter.Delete(oponentesreplegalResponse, operadorId, _mockConnection.Object);
        // Assert
        await act.Should().NotThrowAsync();
    }

    [Fact]
    public async Task Delete_WhenFactoryDeleteAsyncFails_ShouldPropagateException()
    {
        // Arrange
        var oponentesreplegalResponse = new OponentesRepLegalResponse
        {
            Id = 123
        };
        var operadorId = 456;
        var expectedException = new InvalidOperationException("Delete failed");
        _mockOponentesRepLegalFactory.Setup(x => x.DeleteAsync(operadorId, oponentesreplegalResponse.Id, _mockConnection.Object)).ThrowsAsync(expectedException);
        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _oponentesreplegalWriter.Delete(oponentesreplegalResponse, operadorId, _mockConnection.Object));
        exception.Should().Be(expectedException);
    }

#endregion
#region Constructor Tests
    [Fact]
    public void Constructor_WithValidFactory_ShouldCreateInstance()
    {
        // Act
        var writer = new OponentesRepLegalWriter(_mockOponentesRepLegalFactory.Object);
        // Assert
        writer.Should().NotBeNull();
    }

    [Fact]
    public void Constructor_WithNullFactory_ShouldThrowArgumentNullException()
    {
        // Act & Assert
        Action act = () => new OponentesRepLegalWriter(null);
        act.Should().Throw<ArgumentNullException>();
    }

#endregion
#region Helper Methods
    private static Models.OponentesRepLegal CreateValidOponentesRepLegalModel()
    {
        return new Models.OponentesRepLegal
        {
            Id = 0,
            Nome = "João",
            Fone = "(11) 99999-9999",
            Oponente = 1,
            Sexo = false,
            CPF = "544.506.718-13",
            RG = "12.345.678-9",
            Endereco = "Rua das Flores, 123",
            Bairro = "Centro",
            CEP = "01234-567",
            Cidade = 1,
            Fax = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            EMail = "test@email.com",
            Site = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Observacao = "Observação teste"
        };
    }
#endregion
}