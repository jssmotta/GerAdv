// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Readers;
public partial class TribunalReader(IFTribunalFactory tribunalFactory) : ITribunalReader
{
    private readonly IFTribunalFactory _tribunalFactory = tribunalFactory;
    public async Task<IEnumerable<DBNomeID>> ListarN(int max, string uri, string cWhere, List<SqlParameter> parameters, string order) => await DevourerSqlData.ListarNomeID(BuildSqlQuery("triCodigo, triNome", cWhere, order, max), parameters, uri, caching: DevourerOne.PCachingDefault, max: max);
    public async Task<IEnumerable<TribunalResponseAll>> Listar(int max, string uri, string cWhere, List<SqlParameter> parameters, string order, CancellationToken cancellationToken) => await ListarTabela(BuildSqlQuery(DBTribunal.CamposSqlX, cWhere, order, max), parameters, uri, caching: DevourerOne.PCachingDefault, max: max, cancellationToken: cancellationToken);
    private async Task<IEnumerable<TribunalResponseAll>> ListarTabela(string sql, List<SqlParameter> parameters, string uri, bool caching = DevourerOne.PCachingDefault, int max = 200, CancellationToken cancellationToken = default)
    {
        var result = new List<TribunalResponseAll>(max);
        await using var connection = Configuracoes.GetConnectionByUri(uri);
        await using var cmd = new SqlCommand(cmdText: ConfiguracoesDBT.CmdSql(sql), connection: connection?.InnerConnection)
        {
            CommandTimeout = 30
        };
        foreach (var param in parameters)
        {
            if (!cmd.Parameters.Contains(param.ParameterName))
            {
                var newParam = new SqlParameter(param.ParameterName, param.Value)
                {
                    SqlDbType = param.SqlDbType,
                    Direction = param.Direction,
                    Size = param.Size,
                    Precision = param.Precision,
                    Scale = param.Scale
                };
                cmd.Parameters.Add(newParam);
            }
        }

        await using var reader = await cmd.ExecuteReaderAsync(CommandBehavior.SingleResult);
        while (await reader.ReadAsync())
        {
            if (cancellationToken.IsCancellationRequested)
                return result;
            result.Add(ReadAll(_tribunalFactory.CreateFromReader(reader), reader)!);
        }

        return result;
    }

    public async Task<TribunalResponse?> Read(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _tribunalFactory.CreateFromIdAsync(id, oCnn);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public async Task<Models.Tribunal?> ReadM(int id, MsiSqlConnection oCnn)
    {
        using var dbRec = await _tribunalFactory.CreateFromIdAsync(id, oCnn);
        var tribunal = new Models.Tribunal
        {
            Id = dbRec.ID,
            Nome = dbRec.FNome ?? string.Empty,
            Area = dbRec.FArea,
            Justica = dbRec.FJustica,
            Descricao = dbRec.FDescricao ?? string.Empty,
            Instancia = dbRec.FInstancia,
            Sigla = dbRec.FSigla ?? string.Empty,
            Web = dbRec.FWeb ?? string.Empty,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        return tribunal;
    }

    public TribunalResponse? Read(FTribunal dbRec, MsiSqlConnection oCnn)
    {
        return Read(dbRec);
    }

    public TribunalResponse? Read(string where, List<SqlParameter> parameters, MsiSqlConnection oCnn)
    {
        using var dbRec = _tribunalFactory.CreateFromParameters(parameters, oCnn, sqlWhere: where);
        return dbRec.ID.IsEmptyIDNumber() ? null : Read(dbRec);
    }

    public TribunalResponse? Read(FTribunal dbRec) // Track 001.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var tribunal = new TribunalResponse
        {
            Id = dbRec.ID,
            Nome = dbRec.FNome ?? string.Empty,
            Area = dbRec.FArea,
            Justica = dbRec.FJustica,
            Descricao = dbRec.FDescricao ?? string.Empty,
            Instancia = dbRec.FInstancia,
            Sigla = dbRec.FSigla ?? string.Empty,
            Web = dbRec.FWeb ?? string.Empty,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        return tribunal;
    }

    public TribunalResponse? Read(SG.GerAdv.DBTribunal dbRec) // Track 002.16072025
    {
        if (dbRec == null)
        {
            return null;
        }

        var tribunal = new TribunalResponse
        {
            Id = dbRec.ID,
            Nome = dbRec.FNome ?? string.Empty,
            Area = dbRec.FArea,
            Justica = dbRec.FJustica,
            Descricao = dbRec.FDescricao ?? string.Empty,
            Instancia = dbRec.FInstancia,
            Sigla = dbRec.FSigla ?? string.Empty,
            Web = dbRec.FWeb ?? string.Empty,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        return tribunal;
    }

    public TribunalResponseAll? ReadAll(FTribunal dbRec, IDataRecord dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var tribunal = new TribunalResponseAll
        {
            Id = dbRec.ID,
            Nome = dbRec.FNome ?? string.Empty,
            Area = dbRec.FArea,
            Justica = dbRec.FJustica,
            Descricao = dbRec.FDescricao ?? string.Empty,
            Instancia = dbRec.FInstancia,
            Sigla = dbRec.FSigla ?? string.Empty,
            Web = dbRec.FWeb ?? string.Empty,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        try
        {
            tribunal.DescricaoArea = dr[DBAreaDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            tribunal.NomeJustica = dr[DBJusticaDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            tribunal.NroProcessoInstancia = dr[DBInstanciaDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return tribunal;
    }

    public TribunalResponseAll? ReadAll(SG.GerAdv.DBTribunal dbRec, DataRow dr)
    {
        if (dbRec == null)
        {
            return null;
        }

        var tribunal = new TribunalResponseAll
        {
            Id = dbRec.ID,
            Nome = dbRec.FNome ?? string.Empty,
            Area = dbRec.FArea,
            Justica = dbRec.FJustica,
            Descricao = dbRec.FDescricao ?? string.Empty,
            Instancia = dbRec.FInstancia,
            Sigla = dbRec.FSigla ?? string.Empty,
            Web = dbRec.FWeb ?? string.Empty,
            GUID = dbRec.FGUID ?? string.Empty,
        };
        try
        {
            tribunal.DescricaoArea = dr[DBAreaDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            tribunal.NomeJustica = dr[DBJusticaDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        try
        {
            tribunal.NroProcessoInstancia = dr[DBInstanciaDicInfo.CampoNome]?.ToString() ?? string.Empty;
        }
        catch
        {
        }

        return tribunal;
    }
}