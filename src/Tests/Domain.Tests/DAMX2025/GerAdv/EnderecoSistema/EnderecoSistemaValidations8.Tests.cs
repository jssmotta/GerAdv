// 100% auto-generated by Source Genesys WebApi Front & Back Creator
// copyright © 2000-2025 Menphis - Sistemas Inteligentes
// This file is part of the Source Genesys project                     
namespace MenphisSI.GerAdv.Tests;
public class EnderecoSistemaValidationTests : IDisposable
{
    private readonly Mock<IOptions<AppSettings>> _mockAppSettings;
    private readonly Mock<IFEnderecoSistemaFactory> _mockEnderecoSistemaFactory;
    private readonly Mock<IEnderecoSistemaReader> _mockReader;
    private readonly EnderecoSistemaValidation _validation;
    private readonly Mock<IEnderecoSistemaService> _mockEnderecoSistemaService;
    private readonly Mock<MsiSqlConnection> _mockConnection;
    private readonly Mock<ITipoEnderecoSistemaReader> _mockTipoEnderecoSistemaReader;
    private readonly Mock<ICidadeReader> _mockCidadeReader;
    private readonly EnderecoSistemaService _service;
    private readonly string _validUri = "test-uri";
    public EnderecoSistemaValidationTests()
    {
        _mockEnderecoSistemaFactory = new Mock<IFEnderecoSistemaFactory>();
        _mockReader = new Mock<IEnderecoSistemaReader>();
        _validation = new EnderecoSistemaValidation();
        _mockEnderecoSistemaService = new Mock<IEnderecoSistemaService>();
        _mockConnection = new Mock<MsiSqlConnection>();
        _mockTipoEnderecoSistemaReader = new Mock<ITipoEnderecoSistemaReader>();
        _mockCidadeReader = new Mock<ICidadeReader>();
    }

#region Class Structure Tests
    [Fact]
    public void EnderecoSistemaValidation_ShouldImplementInterface()
    {
        // Assert
        _validation.Should().BeAssignableTo<IEnderecoSistemaValidation>();
    }

    [Fact]
    public void EnderecoSistemaValidation_ShouldBePublicClass()
    {
        // Arrange
        var type = typeof(EnderecoSistemaValidation);
        // Assert
        type.IsPublic.Should().BeTrue();
        type.IsClass.Should().BeTrue();
        type.IsAbstract.Should().BeFalse();
        type.IsSealed.Should().BeFalse();
    }

    [Fact]
    public void EnderecoSistemaValidation_ShouldHaveParameterlessConstructor()
    {
        // Arrange
        var type = typeof(EnderecoSistemaValidation);
        var constructors = type.GetConstructors();
        // Assert
        constructors.Should().ContainSingle();
        constructors[0].GetParameters().Should().BeEmpty();
        constructors[0].IsPublic.Should().BeTrue();
    }

    private Models.EnderecoSistema CreateValidEnderecoSistema()
    {
        return new Models.EnderecoSistema
        {
            Id = 1,
            Cadastro = 1,
            CadastroExCod = 1,
            TipoEnderecoSistema = 1,
            Processo = 0,
            Motivo = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            ContatoNoLocal = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            Cidade = 0,
            Endereco = "Rua das Flores, 123",
            Bairro = "Centro",
            CEP = "01234-567",
            Fone = "(11) 99999-9999",
            Fax = "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
            Observacao = "Observação teste"
        };
    }

    private void SetupValidMocks()
    {
        // Setup default valid responses for all mocks
        _mockEnderecoSistemaService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterEnderecoSistema>(), It.IsAny<string>())).ReturnsAsync(new List<EnderecoSistemaResponseAll>());
        // Setup other mocks but don't override the EnderecoSistemas service mock
        _mockTipoEnderecoSistemaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.TipoEnderecoSistemaResponse { Id = id }));
        _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.CidadeResponse { Id = id }));
    }

    private void SetupValidMocksInvalid()
    {
        // Setup default valid responses for all mocks
        _mockEnderecoSistemaService.Setup(x => x.Filter(It.IsAny<int>(), It.IsAny<FilterEnderecoSistema>(), It.IsAny<string>())).ReturnsAsync(new List<EnderecoSistemaResponseAll>());
        // Setup other mocks but don't override the EnderecoSistemas service mock
        _mockTipoEnderecoSistemaReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.TipoEnderecoSistemaResponse { Id = 0 }));
        _mockCidadeReader.Setup(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>())).Returns<int, MsiSqlConnection>((id, conn) => Task.FromResult(new Models.Response.CidadeResponse { Id = 0 }));
    }

    [Fact]
    public async Task ValidateReg_WithNullStringFields_ShouldNotThrow()
    {
        // Arrange
        var enderecosistema = new Models.EnderecoSistema
        {
            Id = 1,
            Cadastro = 1,
            CadastroExCod = 1,
            TipoEnderecoSistema = 1,
            Motivo = null,
            ContatoNoLocal = null,
            Endereco = null,
            Bairro = null,
            CEP = null,
            Fone = null,
            Fax = null,
            Observacao = null
        };
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(enderecosistema, _mockEnderecoSistemaService.Object, _mockTipoEnderecoSistemaReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithNullInput_ShouldThrowSGValidationException()
    {
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(null, _mockEnderecoSistemaService.Object, _mockTipoEnderecoSistemaReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Be("Objeto está nulo");
    }

#region ValidateReg Required GUID Method Tests
    [Fact]
    public async Task ValidateReg_WithEmptyGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var enderecosistema = CreateValidEnderecoSistema();
        enderecosistema.GUID = "";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(enderecosistema, _mockEnderecoSistemaService.Object, _mockTipoEnderecoSistemaReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithNullGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var enderecosistema = CreateValidEnderecoSistema();
        enderecosistema.GUID = null;
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(enderecosistema, _mockEnderecoSistemaService.Object, _mockTipoEnderecoSistemaReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

    [Fact]
    public async Task ValidateReg_WithValidDataGUID_ShouldReturnTrue()
    {
        // Arrange
        var enderecosistema = CreateValidEnderecoSistema();
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(enderecosistema, _mockEnderecoSistemaService.Object, _mockTipoEnderecoSistemaReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task ValidateReg_WithWhitespaceGUID_ShouldThrowSGValidationException()
    {
        // Arrange
        var enderecosistema = CreateValidEnderecoSistema();
        enderecosistema.GUID = "   ";
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(enderecosistema, _mockEnderecoSistemaService.Object, _mockTipoEnderecoSistemaReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("é obrigatório");
    }

#endregion
#region Foreign Key Validation Tests - TipoEnderecoSistema
    [Fact]
    public async Task ValidateReg_WithInvalidTipoEnderecoSistema_ShouldThrowSGValidationException()
    {
        // Arrange
        var enderecosistema = CreateValidEnderecoSistema();
        enderecosistema.TipoEnderecoSistema = 999;
        _mockTipoEnderecoSistemaReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.TipoEnderecoSistemaResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(enderecosistema, _mockEnderecoSistemaService.Object, _mockTipoEnderecoSistemaReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedTipoEnderecoSistemaId_ShouldThrowSGValidationException()
    {
        // Arrange
        var enderecosistema = CreateValidEnderecoSistema();
        enderecosistema.TipoEnderecoSistema = 999;
        var reg888 = new Models.Response.TipoEnderecoSistemaResponse
        {
            Id = 888
        }; // Different ID
        _mockTipoEnderecoSistemaReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(enderecosistema, _mockEnderecoSistemaService.Object, _mockTipoEnderecoSistemaReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidTipoEnderecoSistema_ShouldPass()
    {
        // Arrange
        var enderecosistema = CreateValidEnderecoSistema();
        enderecosistema.TipoEnderecoSistema = 123;
        var reg123 = new Models.Response.TipoEnderecoSistemaResponse
        {
            Id = 123
        };
        _mockTipoEnderecoSistemaReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(enderecosistema, _mockEnderecoSistemaService.Object, _mockTipoEnderecoSistemaReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
#region Foreign Key Validation Tests - Cidade
    [Fact]
    public async Task ValidateReg_WithInvalidCidade_ShouldThrowSGValidationException()
    {
        // Arrange
        var enderecosistema = CreateValidEnderecoSistema();
        enderecosistema.Cidade = 999;
        _mockCidadeReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult<Models.Response.CidadeResponse>(null));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(enderecosistema, _mockEnderecoSistemaService.Object, _mockTipoEnderecoSistemaReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithMismatchedCidadeId_ShouldThrowSGValidationException()
    {
        // Arrange
        var enderecosistema = CreateValidEnderecoSistema();
        enderecosistema.Cidade = 999;
        var reg888 = new Models.Response.CidadeResponse
        {
            Id = 888
        }; // Different ID
        _mockCidadeReader.Setup(x => x.Read(999, _mockConnection.Object)).Returns(Task.FromResult(reg888));
        SetupValidMocksInvalid();
        // Act & Assert
        var exception = await Assert.ThrowsAsync<SGValidationException>(() => _validation.ValidateReg(enderecosistema, _mockEnderecoSistemaService.Object, _mockTipoEnderecoSistemaReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object));
        exception.Message.Should().Contain("não encontrado");
    }

    [Fact]
    public async Task ValidateReg_WithValidCidade_ShouldPass()
    {
        // Arrange
        var enderecosistema = CreateValidEnderecoSistema();
        enderecosistema.Cidade = 123;
        var reg123 = new Models.Response.CidadeResponse
        {
            Id = 123
        };
        _mockCidadeReader.Setup(x => x.Read(123, _mockConnection.Object)).Returns(Task.FromResult(reg123));
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(enderecosistema, _mockEnderecoSistemaService.Object, _mockTipoEnderecoSistemaReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
    }

#endregion
    [Fact]
    public async Task ValidateReg_WithEmptyCidade_ShouldPass()
    {
        // Arrange
        var enderecosistema = CreateValidEnderecoSistema();
        enderecosistema.Cidade = 0; // Assuming 0 is considered empty
        SetupValidMocks();
        // Act
        var result = await _validation.ValidateReg(enderecosistema, _mockEnderecoSistemaService.Object, _mockTipoEnderecoSistemaReader.Object, _mockCidadeReader.Object, _validUri, _mockConnection.Object);
        // Assert
        result.Should().BeTrue();
        _mockCidadeReader.Verify(x => x.Read(It.IsAny<int>(), It.IsAny<MsiSqlConnection>()), Times.Never);
    }

    public virtual void Dispose()
    {
        _service?.Dispose();
    }
}